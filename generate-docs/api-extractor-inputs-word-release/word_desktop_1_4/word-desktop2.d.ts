import { OfficeExtension } from "../../api-extractor-inputs-office/office"
import { Office as Outlook} from "../../api-extractor-inputs-outlook/outlook"
////////////////////////////////////////////////////////////////
/////////////////////// Begin Word APIs ////////////////////////
////////////////////////////////////////////////////////////////

export declare namespace Word {
    /**
     * Represents the {@link Word.Editor | editors} in a protected (read-only) Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class EditorCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns an `Editor` object that represents a new permission for the specified user to modify a range within the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param editorId - The user's email alias (if in the same domain) or an email address.
         */
        addById(editorId: string): Word.Editor;
        /**
         * Returns an `Editor` object that represents a new permission for the specified group of users to modify a range within the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param editorType - An `EditorType` that represents a group of users.
         */
        addByType(editorType: Word.EditorType): Word.Editor;
        /**
         * Returns an `Editor` object that represents a new permission for the specified group of users to modify a range within the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param editorType - An `EditorType` that represents a group of users.
         */
        addByType(editorType: "Current" | "Editors" | "Everyone" | "Owners"): Word.Editor;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets an `Editor` object by its index in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param index - The index of the item to retrieve.
         */
        getItemAt(index: number): Word.Editor;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.EditorCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.EditorCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.EditorCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.EditorCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.EditorCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.EditorCollectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     * Represents a user with permissions to edit authorized portions of a protected (read-only) Word document. To learn more, see {@link https://support.microsoft.com/office/187ed01c-8795-43e1-9fd0-c9fca419dadf | Allow changes to parts of a protected Word document}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class Editor extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `Range` object that represents the next range that the editor has permissions to modify.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly nextRange: Word.Range;
        /**
         * Gets a `Range` object that represents the portion of the document that's contained in the `Editor` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Gets the identifier for the `Editor` object when the parent document is saved as a webpage.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly id: string;
        /**
         * Gets the name of the editor.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly name: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.EditorUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Editor): void;
        /**
         * Deletes the `Editor` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Removes all editing permissions in the document for the editor. The editor will be deleted next time the document opens.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        removeAllPermissions(): void;
        /**
         * Selects all the shapes in the document that were inserted or edited by the editor.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectAllShapes(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.EditorLoadOptions): Word.Editor;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Editor;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Editor;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Editor;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Editor;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Editor` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.EditorData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.EditorData;
    }
    /**
     * Represents the coauthoring conflicts in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class ConflictCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Conflict[];
        /**
         * Accepts all of the user's changes, removes the conflicts, and merges the changes into the server copy of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        acceptAll(): void;
        /**
         * Rejects all of the user's changes and retains the server copy of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rejectAll(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ConflictCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ConflictCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ConflictCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ConflictCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ConflictCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ConflictCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ConflictCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ConflictCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ConflictCollectionData;
    }
    /**
     * Represents a coauthoring conflict in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class Conflict extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `Range` object that represents the portion of the document that's contained in the `Conflict` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Gets the `RevisionType` for the `Conflict` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly type: Word.RevisionType | "None" | "Insert" | "Delete" | "Property" | "ParagraphNumber" | "DisplayField" | "Reconcile" | "Conflict" | "Style" | "Replace" | "ParagraphProperty" | "TableProperty" | "SectionProperty" | "StyleDefinition" | "MovedFrom" | "MovedTo" | "CellInsertion" | "CellDeletion" | "CellMerge" | "CellSplit" | "ConflictInsert" | "ConflictDelete";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ConflictUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Conflict): void;
        /**
         * Accepts the user's change and removes the conflict.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        accept(): void;
        /**
         * Rejects the user's change, removes the conflict, and accepts the server copy of the change for the conflict.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reject(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ConflictLoadOptions): Word.Conflict;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Conflict;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Conflict;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Conflict;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Conflict;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Conflict` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ConflictData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ConflictData;
    }
    /**
     * Represents the color scheme of a critique in the document, affecting underline and highlight.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    enum CritiqueColorScheme {
        /**
         * Red color.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        red = "Red",
        /**
         * Green color.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        green = "Green",
        /**
         * Blue color.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        blue = "Blue",
        /**
         * Lavender color.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        lavender = "Lavender",
        /**
         * Berry color.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        berry = "Berry",
    }
    /**
     * Properties defining the behavior of the pop-up menu for a given critique.
     *
     * @remarks
     * [Api set: WordApi 1.8]
     */
    export interface CritiquePopupOptions {
        /**
         * Specifies the manifest resource ID of the string to use for branding. This branding text appears next to your add-in icon in the pop-up menu.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        brandingTextResourceId: string;
        /**
         * Specifies the manifest resource ID of the string to use as the subtitle.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        subtitleResourceId: string;
        /**
         * Specifies the suggestions to display in the critique pop-up menu.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        suggestions: string[];
        /**
         * Specifies the manifest resource ID of the string to use as the title.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        titleResourceId: string;
    }
    /**
     * Critique that will be rendered as underline for the specified part of paragraph in the document.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export interface Critique {
        /**
         * Specifies the color scheme of the critique.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        colorScheme: Word.CritiqueColorScheme | "Red" | "Green" | "Blue" | "Lavender" | "Berry";
        /**
         * Specifies the length of the critique inside paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        length: number;
        /**
         * Specifies the behavior of the pop-up menu for the critique.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        popupOptions?: Word.CritiquePopupOptions;
        /**
         * Specifies the start index of the critique inside paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        start: number;
    }
    /**
     * Represents an annotation wrapper around critique displayed in the document.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export class CritiqueAnnotation extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the range of text that is annotated.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        readonly range: Word.Range;
        /**
         * Gets the critique that was passed when the annotation was inserted.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        readonly critique: Word.Critique;
        /**
         * Accepts the critique. This will change the annotation state to `accepted`.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        accept(): void;
        /**
         * Rejects the critique. This will change the annotation state to `rejected`.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        reject(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CritiqueAnnotationLoadOptions): Word.CritiqueAnnotation;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CritiqueAnnotation;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CritiqueAnnotation;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CritiqueAnnotation;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CritiqueAnnotation;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CritiqueAnnotation` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CritiqueAnnotationData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CritiqueAnnotationData;
    }
    /**
     * Represents the state of the annotation.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    enum AnnotationState {
        /**
         * Created.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        created = "Created",
        /**
         * Accepted.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        accepted = "Accepted",
        /**
         * Rejected.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        rejected = "Rejected",
    }
    /**
     * Annotations set produced by the add-in. Currently supporting only critiques.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export interface AnnotationSet {
        /**
         * Critiques.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        critiques: Word.Critique[];
    }
    /**
     * Represents an annotation attached to a paragraph.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export class Annotation extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the `CritiqueAnnotation` object.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        readonly critiqueAnnotation: Word.CritiqueAnnotation;
        /**
         * Gets the unique identifier, which is meant to be used for easier tracking of `Annotation` objects.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        readonly id: string;
        /**
         * Gets the state of the annotation.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        readonly state: Word.AnnotationState | "Created" | "Accepted" | "Rejected";
        /**
         * Deletes the annotation.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.AnnotationLoadOptions): Word.Annotation;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Annotation;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Annotation;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Annotation;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Annotation;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Annotation` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.AnnotationData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.AnnotationData;
    }
    /**
     * Holds annotation information that is passed back on annotation added event.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export interface AnnotationInsertedEventArgs {
        /**
         * Specifies the annotation IDs for which the event was fired.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        ids: string[];
    }
    /**
     * Holds annotation information that is passed back on annotation inserted event.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export interface AnnotationClickedEventArgs {
        /**
         * Specifies the annotation ID for which the event was fired.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        id: string;
    }
    /**
     * Holds annotation information that is passed back on annotation removed event.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export interface AnnotationRemovedEventArgs {
        /**
         * Specifies the annotation IDs for which the event was fired.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        ids: string[];
    }
    /**
     * Holds annotation information that is passed back on annotation hovered event.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export interface AnnotationHoveredEventArgs {
        /**
         * Specifies the annotation ID for which the event was fired.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        id: string;
    }
    /**
     * Represents action information that's passed back on annotation pop-up action event.
     *
     * @remarks
     * [Api set: WordApi 1.8]
     */
    export interface AnnotationPopupActionEventArgs {
        /**
         * Specifies the chosen action in the pop-up menu.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        action: string;
        /**
         * Specifies the accepted suggestion (only populated when accepting a critique suggestion).
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        critiqueSuggestion: string;
        /**
         * Specifies the annotation ID for which the event was fired.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        id: string;
    }
    /**
     * Contains a collection of {@link Word.Annotation} objects.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export class AnnotationCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Annotation[];
        /**
         * Gets the first annotation in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        getFirst(): Word.Annotation;
        /**
         * Gets the first annotation in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`.
                    For further information,
                    see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        getFirstOrNullObject(): Word.Annotation;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.AnnotationCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.AnnotationCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.AnnotationCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.AnnotationCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.AnnotationCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.AnnotationCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.AnnotationCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.AnnotationCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.AnnotationCollectionData;
    }
    /**
     * Represents the `Application` object.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class Application extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `Bibliography` object that represents the bibliography reference sources stored in Microsoft Word.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly bibliography: Word.Bibliography;
        /**
         * Returns a `FontNameCollection` object that represents all the available font names in Microsoft Word.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly fontNames: Word.FontNameCollection;
        /**
         * Returns a `ListTemplateGalleryCollection` object that represents all the list template galleries in Microsoft Word.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly listTemplateGalleries: Word.ListTemplateGalleryCollection;
        /**
         * Returns a `TemplateCollection` object that represents all the available templates: global templates and those attached to open documents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly templates: Word.TemplateCollection;
        /**
         * Specifies if Microsoft Word automatically detects the language you are using as you type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        checkLanguage: boolean;
        /**
         * Gets a `LanguageId` value that represents the language selected for the Microsoft Word user interface.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly language: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Application): void;
        /**
         * Creates a new document by using an optional Base64-encoded .docx file.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param base64File - Optional. The Base64-encoded .docx file. The default value is `null`.
         */
        createDocument(base64File?: string): Word.DocumentCreated;
        /**
         * Opens a document and displays it in a new tab or window.
                     The following are examples for the various supported clients and platforms.
                    
                     - Remote or cloud location example: `https://microsoft.sharepoint.com/some/path/Document.docx`
                    
                     - Local location examples for Windows: `C:\\Users\\Someone\\Documents\\Document.docx` (includes required escaped backslashes), `file://mycomputer/myfolder/Document.docx`
                    
                     - Local location example for Mac and iOS: `/User/someone/document.docx`
         *
         * @remarks
         * [Api set: WordApi 1.6]
         *
         * @param filePath - The absolute path of the .docx file. Word on the web only supports remote (cloud) locations, while Word on Windows, on Mac, and on iOS support local and remote locations.
         */
        openDocument(filePath: string): void;
        /**
         * Parse styles from template Base64 file and return JSON format of retrieved styles as a string.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param base64File - The template file.
         */
        retrieveStylesFromBase64(base64File: string): OfficeExtension.ClientResult<string>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ApplicationLoadOptions): Word.Application;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Application;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Application;
        /**
         * Create a new instance of the `Word.Application` object.
         */
        static newObject(context: OfficeExtension.ClientRequestContext): Word.Application;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Application` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ApplicationData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ApplicationData;
    }
    /**
     * Represents the body of a document or a section.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class Body extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the collection of rich text content control objects in the body.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly contentControls: Word.ContentControlCollection;
        /**
         * Gets the collection of endnotes in the body.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly endnotes: Word.NoteItemCollection;
        /**
         * Gets the collection of `Field` objects in the body.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly fields: Word.FieldCollection;
        /**
         * Gets the text format of the body. Use this to get and set font name, size, color, and other properties.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly font: Word.Font;
        /**
         * Gets the collection of footnotes in the body.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly footnotes: Word.NoteItemCollection;
        /**
         * Gets the collection of `InlinePicture` objects in the body. The collection doesn't include floating images.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly inlinePictures: Word.InlinePictureCollection;
        /**
         * Gets the collection of `List` objects in the body.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly lists: Word.ListCollection;
        /**
         * Gets the collection of `Paragraph` objects in the body.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Important: Paragraphs in tables aren't returned for requirement sets 1.1 and 1.2. From requirement set 1.3, paragraphs in tables are also returned.
         */
        readonly paragraphs: Word.ParagraphCollection;
        /**
         * Gets the parent body of the body. For example, a table cell body's parent body could be a header. Throws an `ItemNotFound` error if there isn't a parent body.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentBody: Word.Body;
        /**
         * Gets the parent body of the body. For example, a table cell body's parent body could be a header. If there isn't a parent body, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentBodyOrNullObject: Word.Body;
        /**
         * Gets the content control that contains the body. Throws an `ItemNotFound` error if there isn't a parent content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly parentContentControl: Word.ContentControl;
        /**
         * Gets the content control that contains the body. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentContentControlOrNullObject: Word.ContentControl;
        /**
         * Gets the parent section of the body. Throws an `ItemNotFound` error if there isn't a parent section.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentSection: Word.Section;
        /**
         * Gets the parent section of the body. If there isn't a parent section, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentSectionOrNullObject: Word.Section;
        /**
         * Gets the collection of `Shape` objects in the body, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * Important: Be aware that with time, additional types of shapes may be supported. Therefore, your add-in should request and handle specific types of shapes.
         */
        readonly shapes: Word.ShapeCollection;
        /**
         * Gets the collection of `Table` objects in the body.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly tables: Word.TableCollection;
        /**
         * Specifies the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        style: string;
        /**
         * Specifies the built-in style name for the body. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleBuiltIn: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
        /**
         * Gets the text of the body. Use the `insertText` method to insert text.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly text: string;
        /**
         * Gets the type of the body. The type can be `mainDoc`, `section`, `header`, `footer`, or `tableCell`. Additional types `footnote`, `endnote`, and `noteItem` are supported in WordApi 1.5 and later.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly type: Word.BodyType | "Unknown" | "MainDoc" | "Section" | "Header" | "Footer" | "TableCell" | "Footnote" | "Endnote" | "NoteItem";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.BodyUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Body): void;
        /**
         * Clears the contents of the `Body` object. The user can perform the undo operation on the cleared content.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        clear(): void;
        /**
         * Gets comments associated with the body.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getComments(): Word.CommentCollection;
        /**
         * Gets the currently supported content controls in the body.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Important: If specific types are provided in the options parameter, only content controls of supported types are returned.
         * Be aware that an exception will be thrown on using methods of a generic {@link Word.ContentControl} that aren't relevant for the specific type.
         * With time, additional types of content controls may be supported. Therefore, your add-in should request and handle specific types of content controls.
         *
         * @param options - Optional. Options that define which content controls are returned.
         */
        getContentControls(options?: Word.ContentControlOptions): Word.ContentControlCollection;
        /**
         * Gets an HTML representation of the `Body` object. When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for of the formatting of the document. This method doesn't return the exact same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact fidelity, or consistency across platforms, use `Body.getOoxml()` and convert the returned XML to HTML.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getHtml(): OfficeExtension.ClientResult<string>;
        /**
         * Gets the OOXML (Office Open XML) representation of the `Body` object.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getOoxml(): OfficeExtension.ClientResult<string>;
        /**
         * Gets the whole body, or the starting or ending point of the body, as a range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rangeLocation - Optional. The range location must be `whole`, `start`, `end`, `after`, or `content`.
         */
        getRange(rangeLocation?: Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | Word.RangeLocation.after | Word.RangeLocation.content | "Whole" | "Start" | "End" | "After" | "Content"): Word.Range;
        /**
         * Gets reviewed text based on ChangeTrackingVersion selection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param changeTrackingVersion - Optional. The value must be `original` or `current`. The default is `current`.
         */
        getReviewedText(changeTrackingVersion?: Word.ChangeTrackingVersion): OfficeExtension.ClientResult<string>;
        /**
         * Gets reviewed text based on ChangeTrackingVersion selection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param changeTrackingVersion - Optional. The value must be `original` or `current`. The default is `current`.
         */
        getReviewedText(changeTrackingVersion?: "Original" | "Current"): OfficeExtension.ClientResult<string>;
        /**
         * Gets the collection of the `TrackedChange` objects in the body.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        getTrackedChanges(): Word.TrackedChangeCollection;
        /**
         * Inserts a break at the specified location in the main document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param breakType - The break type to add to the body.
         * @param insertLocation - The value must be `start` or `end`.
         */
        insertBreak(breakType: Word.BreakType | "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | "Start" | "End"): void;
        /**
         * Wraps the `Body` object with a content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Note: The `contentControlType` parameter was introduced in WordApi 1.5. `plainText` support was added in WordApi 1.5. `checkBox` support was added in WordApi 1.7.
         * `dropDownList` and `comboBox` support was added in WordApi 1.9. Support for `buildingBlockGallery`, `datePicker`, `group`, `picture`, and `repeatingSection` was added in WordApiDesktop 1.3.
         *
         * @param contentControlType - Optional. Content control type to insert. Must be `richText`, `plainText`, `checkBox`, `dropDownList`, `comboBox`, `buildingBlockGallery`, `datePicker`, `repeatingSection`, `picture`, or `group`. The default is `richText`.
         */
        insertContentControl(contentControlType?: Word.ContentControlType.richText | Word.ContentControlType.plainText | Word.ContentControlType.checkBox | Word.ContentControlType.dropDownList | Word.ContentControlType.comboBox | Word.ContentControlType.buildingBlockGallery | Word.ContentControlType.datePicker | Word.ContentControlType.repeatingSection | Word.ContentControlType.picture | Word.ContentControlType.group | "RichText" | "PlainText" | "CheckBox" | "DropDownList" | "ComboBox" | "BuildingBlockGallery" | "DatePicker" | "RepeatingSection" | "Picture" | "Group"): Word.ContentControl;
        /**
         * Inserts a document into the body at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Insertion isn't supported if the document being inserted contains an ActiveX control (likely in a form field). Consider replacing such a form field with a content control or other option appropriate for your scenario.
         *
         * @param base64File - The Base64-encoded content of a .docx file.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts HTML at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param html - The HTML to be inserted in the document.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertHtml(html: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts a picture into the body at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param base64EncodedImage - The Base64-encoded image to be inserted in the body.
         * @param insertLocation - The value must be `start` or `end`.
         */
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | "Start" | "End"): Word.InlinePicture;
        /**
         * Inserts OOXML at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param ooxml - The OOXML to be inserted.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts a paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param paragraphText - The paragraph text to be inserted.
         * @param insertLocation - The value must be `start` or `end`.
         */
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | "Start" | "End"): Word.Paragraph;
        /**
         * Inserts a table with the specified number of rows and columns.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rowCount - The number of rows in the table.
         * @param columnCount - The number of columns in the table.
         * @param insertLocation - The value must be `start` or `end`.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | "Start" | "End", values?: string[][]): Word.Table;
        /**
         * Inserts text into the body at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param text - Text to be inserted.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertText(text: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Performs a search with the specified search options on the scope of the `Body` object. The search results are a collection of `Range` objects.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param searchText - The search text. Can be a maximum of 255 characters.
         * @param searchOptions - Optional. Options for the search.
         */
        search(searchText: string, searchOptions?: Word.SearchOptions | {
            ignorePunct?: boolean;
            ignoreSpace?: boolean;
            matchCase?: boolean;
            matchPrefix?: boolean;
            matchSuffix?: boolean;
            matchWholeWord?: boolean;
            matchWildcards?: boolean;
        }): Word.RangeCollection;
        /**
         * Selects the body and navigates the Word UI to it.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: Word.SelectionMode): void;
        /**
         * Selects the body and navigates the Word UI to it.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: "Select" | "Start" | "End"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BodyLoadOptions): Word.Body;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Body;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Body;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Body;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Body;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Body` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BodyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BodyData;
    }
    /**
     * Represents the `Border` object for text, a paragraph, or a table.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    export class Border extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the color for the border. Color is specified in ‘#RRGGBB’ format or by using the color name.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        color: string;
        /**
         * Gets the location of the border.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        readonly location: Word.BorderLocation | "Top" | "Left" | "Bottom" | "Right" | "InsideHorizontal" | "InsideVertical" | "Inside" | "Outside" | "All";
        /**
         * Specifies the border type for the border.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        type: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
        /**
         * Specifies whether the border is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        visible: boolean;
        /**
         * Specifies the width for the border.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        width: Word.BorderWidth | "None" | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600" | "Mixed";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.BorderUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Border): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BorderLoadOptions): Word.Border;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Border;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Border;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Border;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Border;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Border` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BorderData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BorderData;
    }
    /**
     * Represents the `BorderUniversal` object, which manages borders for a range, paragraph, table, or frame.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BorderUniversal extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the graphical page-border design for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        artStyle: Word.PageBorderArt | "Apples" | "MapleMuffins" | "CakeSlice" | "CandyCorn" | "IceCreamCones" | "ChampagneBottle" | "PartyGlass" | "ChristmasTree" | "Trees" | "PalmsColor" | "Balloons3Colors" | "BalloonsHotAir" | "PartyFavor" | "ConfettiStreamers" | "Hearts" | "HeartBalloon" | "Stars3D" | "StarsShadowed" | "Stars" | "Sun" | "Earth2" | "Earth1" | "PeopleHats" | "Sombrero" | "Pencils" | "Packages" | "Clocks" | "Firecrackers" | "Rings" | "MapPins" | "Confetti" | "CreaturesButterfly" | "CreaturesLadyBug" | "CreaturesFish" | "BirdsFlight" | "ScaredCat" | "Bats" | "FlowersRoses" | "FlowersRedRose" | "Poinsettias" | "Holly" | "FlowersTiny" | "FlowersPansy" | "FlowersModern2" | "FlowersModern1" | "WhiteFlowers" | "Vine" | "FlowersDaisies" | "FlowersBlockPrint" | "DecoArchColor" | "Fans" | "Film" | "Lightning1" | "Compass" | "DoubleD" | "ClassicalWave" | "ShadowedSquares" | "TwistedLines1" | "Waveline" | "Quadrants" | "CheckedBarColor" | "Swirligig" | "PushPinNote1" | "PushPinNote2" | "Pumpkin1" | "EggsBlack" | "Cup" | "HeartGray" | "GingerbreadMan" | "BabyPacifier" | "BabyRattle" | "Cabins" | "HouseFunky" | "StarsBlack" | "Snowflakes" | "SnowflakeFancy" | "Skyrocket" | "Seattle" | "MusicNotes" | "PalmsBlack" | "MapleLeaf" | "PaperClips" | "ShorebirdTracks" | "People" | "PeopleWaving" | "EclipsingSquares2" | "Hypnotic" | "DiamondsGray" | "DecoArch" | "DecoBlocks" | "CirclesLines" | "Papyrus" | "Woodwork" | "WeavingBraid" | "WeavingRibbon" | "WeavingAngles" | "ArchedScallops" | "Safari" | "CelticKnotwork" | "CrazyMaze" | "EclipsingSquares1" | "Birds" | "FlowersTeacup" | "Northwest" | "Southwest" | "Tribal6" | "Tribal4" | "Tribal3" | "Tribal2" | "Tribal5" | "XIllusions" | "ZanyTriangles" | "Pyramids" | "PyramidsAbove" | "ConfettiGrays" | "ConfettiOutline" | "ConfettiWhite" | "Mosaic" | "Lightning2" | "HeebieJeebies" | "LightBulb" | "Gradient" | "TriangleParty" | "TwistedLines2" | "Moons" | "Ovals" | "DoubleDiamonds" | "ChainLink" | "Triangles" | "Tribal1" | "MarqueeToothed" | "SharksTeeth" | "Sawtooth" | "SawtoothGray" | "PostageStamp" | "WeavingStrips" | "ZigZag" | "CrossStitch" | "Gems" | "CirclesRectangles" | "CornerTriangles" | "CreaturesInsects" | "ZigZagStitch" | "Checkered" | "CheckedBarBlack" | "Marquee" | "BasicWhiteDots" | "BasicWideMidline" | "BasicWideOutline" | "BasicWideInline" | "BasicThinLines" | "BasicWhiteDashes" | "BasicWhiteSquares" | "BasicBlackSquares" | "BasicBlackDashes" | "BasicBlackDots" | "StarsTop" | "CertificateBanner" | "Handmade1" | "Handmade2" | "TornPaper" | "TornPaperBlack" | "CouponCutoutDashes" | "CouponCutoutDots";
        /**
         * Specifies the width (in points) of the graphical page border specified in the `artStyle` property.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        artWidth: number;
        /**
         * Specifies the color for the `BorderUniversal` object. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        color: string;
        /**
         * Specifies the color for the `BorderUniversal` or {@link Word.Font} object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        colorIndex: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
        /**
         * Returns `true` if an inside border can be applied to the specified object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly inside: boolean;
        /**
         * Specifies whether the border is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isVisible: boolean;
        /**
         * Specifies the line style of the border.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lineStyle: Word.BorderLineStyle | "None" | "Single" | "Dot" | "DashSmallGap" | "DashLargeGap" | "DashDot" | "DashDotDot" | "Double" | "Triple" | "ThinThickSmallGap" | "ThickThinSmallGap" | "ThinThickThinSmallGap" | "ThinThickMedGap" | "ThickThinMedGap" | "ThinThickThinMedGap" | "ThinThickLargeGap" | "ThickThinLargeGap" | "ThinThickThinLargeGap" | "SingleWavy" | "DoubleWavy" | "DashDotStroked" | "Emboss3D" | "Engrave3D" | "Outset" | "Inset";
        /**
         * Specifies the line width of an object's border.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lineWidth: Word.LineWidth | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.BorderUniversalUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.BorderUniversal): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BorderUniversalLoadOptions): Word.BorderUniversal;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BorderUniversal;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BorderUniversal;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BorderUniversal;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BorderUniversal;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BorderUniversal` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BorderUniversalData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BorderUniversalData;
    }
    /**
     * Represents the collection of border styles.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    export class BorderCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Border[];
        /**
         * Specifies the 24-bit color of the inside borders. Color is specified in '#RRGGBB' format or by using the color name.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        insideBorderColor: string;
        /**
         * Specifies the border type of the inside borders.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        insideBorderType: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
        /**
         * Specifies the width of the inside borders.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        insideBorderWidth: Word.BorderWidth | "None" | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600" | "Mixed";
        /**
         * Specifies the 24-bit color of the outside borders. Color is specified in '#RRGGBB' format or by using the color name.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        outsideBorderColor: string;
        /**
         * Specifies the border type of the outside borders.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        outsideBorderType: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
        /**
         * Specifies the width of the outside borders.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        outsideBorderWidth: Word.BorderWidth | "None" | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600" | "Mixed";
        /**
         * Gets the border that has the specified location.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        getByLocation(borderLocation: Word.BorderLocation.top | Word.BorderLocation.left | Word.BorderLocation.bottom | Word.BorderLocation.right | Word.BorderLocation.insideHorizontal | Word.BorderLocation.insideVertical | "Top" | "Left" | "Bottom" | "Right" | "InsideHorizontal" | "InsideVertical"): Word.Border;
        /**
         * Gets the first border in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        getFirst(): Word.Border;
        /**
         * Gets the first border in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        getFirstOrNullObject(): Word.Border;
        /**
         * Gets a `Border` object by its index in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         *
         * @param index - The location of a `Border` object.
         */
        getItem(index: number): Word.Border;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BorderCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.BorderCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BorderCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.BorderCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BorderCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BorderCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BorderCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BorderCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.BorderCollectionData;
    }
    /**
     * Represents the collection of {@link Word.BorderUniversal} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BorderUniversalCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.BorderUniversal[];
        /**
         * Applies the specified page-border formatting to all sections in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        applyPageBordersToAllSections(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BorderUniversalCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.BorderUniversalCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BorderUniversalCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.BorderUniversalCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BorderUniversalCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BorderUniversalCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BorderUniversalCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BorderUniversalCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.BorderUniversalCollectionData;
    }
    /**
     * Represents a break in a Word document. This could be a page, column, or section break.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class Break extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `Range` object that represents the portion of the document that's contained in the break.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Returns the page number on which the break occurs.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly pageIndex: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.BreakUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Break): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BreakLoadOptions): Word.Break;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Break;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Break;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Break;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Break;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Break` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BreakData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BreakData;
    }
    /**
     * Contains a collection of {@link Word.Break} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BreakCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Break[];
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BreakCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.BreakCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BreakCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.BreakCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BreakCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BreakCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BreakCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BreakCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.BreakCollectionData;
    }
    /**
     * Represents a building block in a template. A building block is pre-built content, similar to autotext, that may contain text, images, and formatting.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BuildingBlock extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlockCategory` object that represents the category for the building block.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly category: Word.BuildingBlockCategory;
        /**
         * Returns a `BuildingBlockTypeItem` object that represents the type for the building block.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly type: Word.BuildingBlockTypeItem;
        /**
         * Specifies the description for the building block.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        description: string;
        /**
         * Returns the internal identification number for the building block.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly id: string;
        /**
         * Returns the position of this building block in a collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly index: number;
        /**
         * Specifies a `DocPartInsertType` value that represents how to insert the contents of the building block into the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        insertType: Word.DocPartInsertType | "Content" | "Paragraph" | "Page";
        /**
         * Specifies the name of the building block.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        name: string;
        /**
         * Specifies the contents of the building block.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        value: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.BuildingBlockUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.BuildingBlock): void;
        /**
         * Deletes the building block.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Inserts the value of the building block into the document and returns a `Range` object that represents the contents of the building block within the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param range - The range where the building block should be inserted.
         * @param richText - Indicates whether to insert as rich text.
         */
        insert(range: Word.Range, richText: boolean): Word.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BuildingBlockLoadOptions): Word.BuildingBlock;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BuildingBlock;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BuildingBlock;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BuildingBlock;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BuildingBlock;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BuildingBlock` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BuildingBlockData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BuildingBlockData;
    }
    /**
     * Represents a collection of {@link Word.BuildingBlock} objects for a specific building block type and category in a template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BuildingBlockCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Creates a new building block and returns a `BuildingBlock` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param name - The name of the building block.
         * @param range - The range to insert the building block.
         * @param description - The description of the building block.
         * @param insertType - How to insert the contents of the building block.
         */
        add(name: string, range: Word.Range, description: string, insertType: Word.DocPartInsertType): Word.BuildingBlock;
        /**
         * Creates a new building block and returns a `BuildingBlock` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param name - The name of the building block.
         * @param range - The range to insert the building block.
         * @param description - The description of the building block.
         * @param insertType - How to insert the contents of the building block.
         */
        add(name: string, range: Word.Range, description: string, insertType: "Content" | "Paragraph" | "Page"): Word.BuildingBlock;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Returns a `BuildingBlock` object that represents the specified item in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param index - The index of the item to retrieve.
         */
        getItemAt(index: number): Word.BuildingBlock;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BuildingBlockCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BuildingBlockCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BuildingBlockCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BuildingBlockCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BuildingBlockCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BuildingBlockCollectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     * Represents a collection of building block entries in a Word template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BuildingBlockEntryCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Creates a new building block entry in a template and returns a `BuildingBlock` object that represents the new building block entry.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param name - The name of the building block.
         * @param type - The type of the building block.
         * @param category - The category of the building block.
         * @param range - The range to insert the building block.
         * @param description - The description of the building block.
         * @param insertType - How to insert the contents of the building block.
         */
        add(name: string, type: Word.BuildingBlockType, category: string, range: Word.Range, description: string, insertType: Word.DocPartInsertType): Word.BuildingBlock;
        /**
         * Creates a new building block entry in a template and returns a `BuildingBlock` object that represents the new building block entry.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param name - The name of the building block.
         * @param type - The type of the building block.
         * @param category - The category of the building block.
         * @param range - The range to insert the building block.
         * @param description - The description of the building block.
         * @param insertType - How to insert the contents of the building block.
         */
        add(name: string, type: "QuickParts" | "CoverPage" | "Equations" | "Footers" | "Headers" | "PageNumber" | "Tables" | "Watermarks" | "AutoText" | "TextBox" | "PageNumberTop" | "PageNumberBottom" | "PageNumberPage" | "TableOfContents" | "CustomQuickParts" | "CustomCoverPage" | "CustomEquations" | "CustomFooters" | "CustomHeaders" | "CustomPageNumber" | "CustomTables" | "CustomWatermarks" | "CustomAutoText" | "CustomTextBox" | "CustomPageNumberTop" | "CustomPageNumberBottom" | "CustomPageNumberPage" | "CustomTableOfContents" | "Custom1" | "Custom2" | "Custom3" | "Custom4" | "Custom5" | "Bibliography" | "CustomBibliography", category: string, range: Word.Range, description: string, insertType: "Content" | "Paragraph" | "Page"): Word.BuildingBlock;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Returns a `BuildingBlock` object that represents the specified item in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param index - The index of the item to retrieve.
         */
        getItemAt(index: number): Word.BuildingBlock;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BuildingBlockEntryCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BuildingBlockEntryCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BuildingBlockEntryCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BuildingBlockEntryCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BuildingBlockEntryCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BuildingBlockEntryCollectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     * Represents a category of building blocks in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BuildingBlockCategory extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlockCollection` object that represents the building blocks for the category.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly buildingBlocks: Word.BuildingBlockCollection;
        /**
         * Returns a `BuildingBlockTypeItem` object that represents the type of building block for the building block category.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly type: Word.BuildingBlockTypeItem;
        /**
         * Returns the position of the `BuildingBlockCategory` object in a collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly index: number;
        /**
         * Returns the name of the `BuildingBlockCategory` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly name: string;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BuildingBlockCategoryLoadOptions): Word.BuildingBlockCategory;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BuildingBlockCategory;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BuildingBlockCategory;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BuildingBlockCategory;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BuildingBlockCategory;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BuildingBlockCategory` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BuildingBlockCategoryData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BuildingBlockCategoryData;
    }
    /**
     * Represents a collection of {@link Word.BuildingBlockCategory} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BuildingBlockCategoryCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Returns a `BuildingBlockCategory` object that represents the specified item in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param index - The index of the item to retrieve.
         */
        getItemAt(index: number): Word.BuildingBlockCategory;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BuildingBlockCategoryCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BuildingBlockCategoryCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BuildingBlockCategoryCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BuildingBlockCategoryCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BuildingBlockCategoryCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BuildingBlockCategoryCollectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     * Represents a type of building block in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BuildingBlockTypeItem extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlockCategoryCollection` object that represents the categories for a building block type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly categories: Word.BuildingBlockCategoryCollection;
        /**
         * Returns the position of an item in a collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly index: number;
        /**
         * Returns the localized name of a building block type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly name: string;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BuildingBlockTypeItemLoadOptions): Word.BuildingBlockTypeItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BuildingBlockTypeItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BuildingBlockTypeItem;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BuildingBlockTypeItem;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BuildingBlockTypeItem;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BuildingBlockTypeItem` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BuildingBlockTypeItemData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BuildingBlockTypeItemData;
    }
    /**
     * Represents a collection of building block types in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BuildingBlockTypeItemCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `BuildingBlockTypeItem` object by its type in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param type - Specifies the building block type of the item in the collection.
         */
        getByType(type: Word.BuildingBlockType): Word.BuildingBlockTypeItem;
        /**
         * Gets a `BuildingBlockTypeItem` object by its type in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param type - Specifies the building block type of the item in the collection.
         */
        getByType(type: "QuickParts" | "CoverPage" | "Equations" | "Footers" | "Headers" | "PageNumber" | "Tables" | "Watermarks" | "AutoText" | "TextBox" | "PageNumberTop" | "PageNumberBottom" | "PageNumberPage" | "TableOfContents" | "CustomQuickParts" | "CustomCoverPage" | "CustomEquations" | "CustomFooters" | "CustomHeaders" | "CustomPageNumber" | "CustomTables" | "CustomWatermarks" | "CustomAutoText" | "CustomTextBox" | "CustomPageNumberTop" | "CustomPageNumberBottom" | "CustomPageNumberPage" | "CustomTableOfContents" | "Custom1" | "Custom2" | "Custom3" | "Custom4" | "Custom5" | "Bibliography" | "CustomBibliography"): Word.BuildingBlockTypeItem;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BuildingBlockTypeItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BuildingBlockTypeItemCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BuildingBlockTypeItemCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BuildingBlockTypeItemCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BuildingBlockTypeItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BuildingBlockTypeItemCollectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     * The data specific to content controls of type CheckBox.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export class CheckboxContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the current state of the checkbox.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        isChecked: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CheckboxContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.CheckboxContentControl): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CheckboxContentControlLoadOptions): Word.CheckboxContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CheckboxContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CheckboxContentControl;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CheckboxContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CheckboxContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CheckboxContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CheckboxContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CheckboxContentControlData;
    }
    /**
     * Represents a coauthoring lock in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class CoauthoringLock extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the owner of the lock.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly owner: Word.Coauthor;
        /**
         * Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringLock` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Gets a `CoauthoringLockType` value that represents the lock type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly type: Word.CoauthoringLockType | "None" | "Reservation" | "Ephemeral" | "Changed";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CoauthoringLockUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.CoauthoringLock): void;
        /**
         * Removes this lock, even if it belongs to a different user.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unlock(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CoauthoringLockLoadOptions): Word.CoauthoringLock;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CoauthoringLock;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CoauthoringLock;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CoauthoringLock;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CoauthoringLock;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CoauthoringLock` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CoauthoringLockData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CoauthoringLockData;
    }
    /**
     * Represents a collection of coauthoring locks in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class CoauthoringLockCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CoauthoringLock[];
        /**
         * Returns a `CoauthoringLock` object that represents a lock added to a specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. The options to further configure the coauthoring lock.
         */
        add(options?: Word.CoauthoringLockAddOptions): Word.CoauthoringLock;
        /**
         * Removes all ephemeral locks from the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unlockEphemeralLocks(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CoauthoringLockCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CoauthoringLockCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CoauthoringLockCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CoauthoringLockCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CoauthoringLockCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CoauthoringLockCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CoauthoringLockCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CoauthoringLockCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CoauthoringLockCollectionData;
    }
    /**
     * Specifies the options for adding to a {@link Word.CoauthoringLockCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface CoauthoringLockAddOptions {
        /**
         * If provided, specifies the range to which the lock is added. If not provided, the new lock is placed on the paragraph that contains the insertion point.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        range?: Word.Range;
        /**
         * If provided, specifies the type of lock. If not provided, the lock type is set to `reservation`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        type?: Word.CoauthoringLockType | "None" | "Reservation" | "Ephemeral" | "Changed";
    }
    /**
     * Represents a coauthor in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class Coauthor extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `CoauthoringLockCollection` object that represents the locks in the document that are associated with this coauthor.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly locks: Word.CoauthoringLockCollection;
        /**
         * Gets the email address of the coauthor.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly emailAddress: string;
        /**
         * Gets the unique identifier for the `Coauthor` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly id: string;
        /**
         * Gets whether this author represents the current user.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isMe: boolean;
        /**
         * Gets the display name of the coauthor.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly name: string;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CoauthorLoadOptions): Word.Coauthor;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Coauthor;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Coauthor;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Coauthor;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Coauthor;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Coauthor` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CoauthorData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CoauthorData;
    }
    /**
     * Contains a collection of {@link Word.Coauthor} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class CoauthorCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Coauthor[];
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CoauthorCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CoauthorCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CoauthorCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CoauthorCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CoauthorCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CoauthorCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CoauthorCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CoauthorCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CoauthorCollectionData;
    }
    /**
     * Represents the `Coauthoring` object. This tracks the updates, changes, conflicts, and other interactions in the document done through coauthoring.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class Coauthoring extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `CoauthorCollection` object that represents all the coauthors currently editing the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly authors: Word.CoauthorCollection;
        /**
         * Gets a `ConflictCollection` object that represents all the conflicts in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly conflicts: Word.ConflictCollection;
        /**
         * Gets a `CoauthoringLockCollection` object that represents the locks in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly locks: Word.CoauthoringLockCollection;
        /**
         * Gets a `Coauthor` object that represents the current user.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly me: Word.Coauthor;
        /**
         * Gets a `CoauthoringUpdateCollection` object that represents the most recent updates that were merged into the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly updates: Word.CoauthoringUpdateCollection;
        /**
         * Gets whether this document can be coauthored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly canCoauthor: boolean;
        /**
         * Gets whether the document can be automatically merged.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly canMerge: boolean;
        /**
         * Gets whether the document has pending updates that have not been accepted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly pendingUpdates: boolean;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CoauthoringLoadOptions): Word.Coauthoring;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Coauthoring;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Coauthoring;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Coauthoring;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Coauthoring;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Coauthoring` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CoauthoringData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CoauthoringData;
    }
    /**
     * Represents a coauthoring update in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class CoauthoringUpdate extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringUpdate` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CoauthoringUpdateUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.CoauthoringUpdate): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CoauthoringUpdateLoadOptions): Word.CoauthoringUpdate;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CoauthoringUpdate;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CoauthoringUpdate;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CoauthoringUpdate;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CoauthoringUpdate;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CoauthoringUpdate` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CoauthoringUpdateData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CoauthoringUpdateData;
    }
    /**
     * Contains a collection of {@link Word.CoauthoringUpdate} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class CoauthoringUpdateCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CoauthoringUpdate[];
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CoauthoringUpdateCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CoauthoringUpdateCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CoauthoringUpdateCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CoauthoringUpdateCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CoauthoringUpdateCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CoauthoringUpdateCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CoauthoringUpdateCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CoauthoringUpdateCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CoauthoringUpdateCollectionData;
    }
    /**
     * Represents a comment in the document.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class Comment extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the comment's content range.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        contentRange: Word.CommentContentRange;
        /**
         * Gets the collection of reply objects associated with the comment.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly replies: Word.CommentReplyCollection;
        /**
         * Gets the email of the comment's author.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly authorEmail: string;
        /**
         * Gets the name of the comment's author.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly authorName: string;
        /**
         * Specifies the comment's content as plain text.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        content: string;
        /**
         * Gets the creation date of the comment.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly creationDate: Date;
        /**
         * Gets the ID of the comment.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly id: string;
        /**
         * Specifies the comment thread's status. Setting to `true` resolves the comment thread. Getting a value of `true` means that the comment thread is resolved.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        resolved: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CommentUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Comment): void;
        /**
         * Deletes the comment and its replies.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        delete(): void;
        /**
         * Gets the range in the main document where the comment is on.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getRange(): Word.Range;
        /**
         * Adds a new reply to the end of the comment thread.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param replyText - Reply text.
         */
        reply(replyText: string): Word.CommentReply;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CommentLoadOptions): Word.Comment;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Comment;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Comment;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Comment;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Comment;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Comment` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CommentData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CommentData;
    }
    /**
     * Contains a collection of {@link Word.Comment} objects.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class CommentCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Comment[];
        /**
         * Gets the first comment in the collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getFirst(): Word.Comment;
        /**
         * Gets the first comment in the collection. If the collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getFirstOrNullObject(): Word.Comment;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CommentCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CommentCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CommentCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CommentCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CommentCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CommentCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CommentCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CommentCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CommentCollectionData;
    }
    /**
     * Represents a content range within a comment.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class CommentContentRange extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies whether the comment text is bold.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        bold: boolean;
        /**
         * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        hyperlink: string;
        /**
         * Checks whether the range length is zero.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly isEmpty: boolean;
        /**
         * Specifies whether the comment text is italicized.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        italic: boolean;
        /**
         * Specifies whether the comment text has a strikethrough.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        strikeThrough: boolean;
        /**
         * Gets the text of the comment range.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly text: string;
        /**
         * Specifies the comment text's underline type. `none` if the comment text isn't underlined.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        underline: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CommentContentRangeUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.CommentContentRange): void;
        /**
         * Inserts text into at the specified location. **Note**: For the modern comment, the content range tracked across context turns to empty if any revision to the comment is posted through the UI.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param text - The text to be inserted in to the `CommentContentRange`.
         * @param insertLocation - The value must be `replace`, `start`, `end`, `before`, or `after`.
         */
        insertText(text: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After"): Word.CommentContentRange;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CommentContentRangeLoadOptions): Word.CommentContentRange;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CommentContentRange;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CommentContentRange;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CommentContentRange;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CommentContentRange;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CommentContentRange` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CommentContentRangeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CommentContentRangeData;
    }
    /**
     * Represents a comment reply in the document.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class CommentReply extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the commentReply's content range.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        contentRange: Word.CommentContentRange;
        /**
         * Gets the parent comment of this reply.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly parentComment: Word.Comment;
        /**
         * Gets the email of the comment reply's author.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly authorEmail: string;
        /**
         * Gets the name of the comment reply's author.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly authorName: string;
        /**
         * Specifies the comment reply's content. The string is plain text.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        content: string;
        /**
         * Gets the creation date of the comment reply.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly creationDate: Date;
        /**
         * Gets the ID of the comment reply.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly id: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CommentReplyUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.CommentReply): void;
        /**
         * Deletes the comment reply.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CommentReplyLoadOptions): Word.CommentReply;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CommentReply;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CommentReply;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CommentReply;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CommentReply;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CommentReply` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CommentReplyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CommentReplyData;
    }
    /**
     * Contains a collection of {@link Word.CommentReply} objects. Represents all comment replies in one comment thread.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class CommentReplyCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CommentReply[];
        /**
         * Gets the first comment reply in the collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getFirst(): Word.CommentReply;
        /**
         * Gets the first comment reply in the collection. If the collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getFirstOrNullObject(): Word.CommentReply;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CommentReplyCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CommentReplyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CommentReplyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CommentReplyCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CommentReplyCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CommentReplyCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CommentReplyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CommentReplyCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CommentReplyCollectionData;
    }
    /**
     * Represents special formatting applied to specified areas of a table when the selected table is formatted with a specified table style.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class ConditionalStyle extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BorderUniversalCollection` object that represents all the borders for the conditional style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Returns a `Font` object that represents the font formatting for the conditional style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly font: Word.Font;
        /**
         * Returns a `ParagraphFormat` object that represents the paragraph formatting for the conditional style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly paragraphFormat: Word.ParagraphFormat;
        /**
         * Returns a `ShadingUniversal` object that represents the shading of the conditional style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Specifies the amount of space (in points) to add below the contents of a single cell or all the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bottomPadding: number;
        /**
         * Specifies the amount of space (in points) to add to the left of the contents of a single cell or all the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        leftPadding: number;
        /**
         * Specifies the amount of space (in points) to add to the right of the contents of a single cell or all the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rightPadding: number;
        /**
         * Specifies the amount of space (in points) to add above the contents of a single cell or all the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        topPadding: number;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ConditionalStyleLoadOptions): Word.ConditionalStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ConditionalStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ConditionalStyle;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ConditionalStyle;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ConditionalStyle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ConditionalStyle` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ConditionalStyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ConditionalStyleData;
    }
    /**
     * Represents the XML mapping on a {@link Word.ContentControl} object between custom XML and that content control. An XML mapping is a link between the text in a content control and an XML element in the custom XML data store for this document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class XmlMapping extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `CustomXmlNode` object that represents the custom XML node in the data store that the content control in the document maps to.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly customXmlNode: Word.CustomXmlNode;
        /**
         * Returns a `CustomXmlPart` object that represents the custom XML part to which the content control in the document maps.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly customXmlPart: Word.CustomXmlPart;
        /**
         * Returns whether the content control in the document is mapped to an XML node in the document's XML data store.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly isMapped: boolean;
        /**
         * Returns the prefix mappings used to evaluate the XPath for the current XML mapping.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly prefixMappings: string;
        /**
         * Returns the XPath for the XML mapping, which evaluates to the currently mapped XML node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xpath: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.XmlMappingUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.XmlMapping): void;
        /**
         * Deletes the XML mapping from the parent content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Allows creating or changing the XML mapping on the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xPath - The XPath expression to evaluate.
         * @param options - Optional. The options available for setting the XML mapping.
         */
        setMapping(xPath: string, options?: Word.XmlSetMappingOptions): OfficeExtension.ClientResult<boolean>;
        /**
         * Allows creating or changing the XML data mapping on the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param node - The custom XML node to map.
         */
        setMappingByNode(node: Word.CustomXmlNode): OfficeExtension.ClientResult<boolean>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.XmlMappingLoadOptions): Word.XmlMapping;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.XmlMapping;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.XmlMapping;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.XmlMapping;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.XmlMapping;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.XmlMapping` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.XmlMappingData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.XmlMappingData;
    }
    /**
     * The options that define the prefix mapping and the source of the custom XML data.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface XmlSetMappingOptions {
        /**
         * If provided, specifies the prefix mappings to use when querying the expression provided in the `xPath` parameter of the `XmlMapping.setMapping` calling method. If omitted, Word uses the set of prefix mappings for the specified custom XML part in the current document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        prefixMapping?: string;
        /**
         * If provided, specifies the desired custom XML data to map the content control to. If this property is omitted, the XPath is evaluated against all custom XML in the current document, and the mapping is established with the first `CustomXmlPart` where the XPath resolves to an XML node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        source?: Word.CustomXmlPart;
    }
    /**
     * Represents a collection of {@link Word.CustomXmlPrefixMapping} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class CustomXmlPrefixMappingCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CustomXmlPrefixMapping[];
        /**
         * Adds a custom namespace/prefix mapping to use when querying an item.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param prefix - The prefix to associate with the namespace.
         * @param namespaceUri - The namespace URI to map.
         */
        addNamespace(prefix: string, namespaceUri: string): OfficeExtension.ClientResult<number>;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets the namespace corresponding to the specified prefix.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param prefix - The prefix to look up.
         */
        lookupNamespace(prefix: string): OfficeExtension.ClientResult<string>;
        /**
         * Gets the prefix corresponding to the specified namespace.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param namespaceUri - The namespace URI to look up.
         */
        lookupPrefix(namespaceUri: string): OfficeExtension.ClientResult<string>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlPrefixMappingCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CustomXmlPrefixMappingCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlPrefixMappingCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CustomXmlPrefixMappingCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlPrefixMappingCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlPrefixMappingCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlPrefixMappingCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlPrefixMappingCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CustomXmlPrefixMappingCollectionData;
    }
    /**
     * Represents a `CustomXmlPrefixMapping` object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class CustomXmlPrefixMapping extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the unique address identifier for the namespace of the `CustomXmlPrefixMapping` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly namespaceUri: string;
        /**
         * Gets the prefix for the `CustomXmlPrefixMapping` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly prefix: string;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlPrefixMappingLoadOptions): Word.CustomXmlPrefixMapping;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlPrefixMapping;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CustomXmlPrefixMapping;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlPrefixMapping;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlPrefixMapping;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlPrefixMapping` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlPrefixMappingData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CustomXmlPrefixMappingData;
    }
    /**
     * Represents a schema in a {@link Word.CustomXmlSchemaCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class CustomXmlSchema extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the location of the schema on a computer.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly location: string;
        /**
         * Gets the unique address identifier for the namespace of the `CustomXmlSchema` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly namespaceUri: string;
        /**
         * Deletes this schema from the {@link Word.CustomXmlSchemaCollection} object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Reloads the schema from a file.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        reload(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlSchemaLoadOptions): Word.CustomXmlSchema;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlSchema;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CustomXmlSchema;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlSchema;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlSchema;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlSchema` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlSchemaData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CustomXmlSchemaData;
    }
    /**
     * Represents a collection of {@link Word.CustomXmlSchema} objects attached to a data stream.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class CustomXmlSchemaCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CustomXmlSchema[];
        /**
         * Adds one or more schemas to the schema collection that can then be added to a stream in the data store and to the schema library.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. The options that define the schema to be added.
         */
        add(options?: Word.CustomXmlAddSchemaOptions): Word.CustomXmlSchema;
        /**
         * Adds an existing schema collection to the current schema collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param schemaCollection - The schema collection to add.
         */
        addCollection(schemaCollection: Word.CustomXmlSchemaCollection): Word.CustomXmlSchemaCollection;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Returns a `CustomXmlSchema` object that represents the specified item in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param index - The location of a `CustomXmlSchema` object.
         */
        getItem(index: number): Word.CustomXmlSchema;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getNamespaceUri(): OfficeExtension.ClientResult<number>;
        /**
         * Specifies whether the schemas in the schema collection are valid (conforms to the syntactic rules of XML and the rules for a specified vocabulary).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        validate(): OfficeExtension.ClientResult<boolean>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlSchemaCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CustomXmlSchemaCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlSchemaCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CustomXmlSchemaCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlSchemaCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlSchemaCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlSchemaCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlSchemaCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CustomXmlSchemaCollectionData;
    }
    /**
     * Adds one or more schemas to a schema collection that can then be added to a stream in the data store and to the schema library.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface CustomXmlAddSchemaOptions {
        /**
         * If provided, specifies the alias of the schema to be added to the collection. However, if the alias already exists in the Schema Library, the schema can be found using this value.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        alias?: string;
        /**
         * If provided, specifies the location of the schema on a disk. If this property is specified, the schema is added to the collection and to the Schema Library.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fileName?: string;
        /**
         * If provided, specifies whether, in the case where the schema is being added to the Schema Library, the Schema Library keys should be written to the registry (`HKEY_LOCAL_MACHINE` for all users or `HKEY_CURRENT_USER` for just the current user). The property defaults to `false` and writes to `HKEY_CURRENT_USER`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        installForAllUsers?: boolean;
        /**
         * If provided, specifies the namespace of the schema to be added to the collection. However, if the schema already exists in the Schema Library, the schema will be retrieved from there.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        namespaceUri?: string;
    }
    /**
     * Contains a collection of {@link Word.CustomXmlNode} objects representing the XML nodes in a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class CustomXmlNodeCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CustomXmlNode[];
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlNodeCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CustomXmlNodeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlNodeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CustomXmlNodeCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlNodeCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlNodeCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlNodeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlNodeCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CustomXmlNodeCollectionData;
    }
    /**
     * The options that define the prefix mapping and the source of the custom XML data.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface CustomXmlAppendChildNodeOptions {
        /**
         * If provided, specifies the base name of the element to be appended.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        name?: string;
        /**
         * If provided, specifies the namespace of the element to be appended. This property is required to append nodes of {@link Word.CustomXmlNodeType | type} `element` or `attribute`; otherwise, it's ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        namespaceUri?: string;
        /**
         * If provided, specifies the type of node to append. If the property isn't specified, it's assumed to be of type `element`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeType?: Word.CustomXmlNodeType | "element" | "attribute" | "text" | "cData" | "processingInstruction" | "comment" | "document";
        /**
         * If provided, specifies the value of the appended node for those nodes that allow text. If the node doesn't allow text, the property is ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeValue?: string;
    }
    /**
     * Inserts a new node just before the context node in the tree.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface CustomXmlInsertNodeBeforeOptions {
        /**
         * If provided, specifies the base name of the element to be inserted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        name?: string;
        /**
         * If provided, specifies the namespace of the element to be inserted. This property is required to insert nodes of {@link Word.CustomXmlNodeType | type} `element` or `attribute`; otherwise, it's ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        namespaceUri?: string;
        /**
         * If provided, specifies the context node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nextSibling?: Word.CustomXmlNode;
        /**
         * If provided, specifies the type of node to append. If the property isn't specified, it's assumed to be of type `element`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeType?: Word.CustomXmlNodeType | "element" | "attribute" | "text" | "cData" | "processingInstruction" | "comment" | "document";
        /**
         * If provided, specifies the value of the inserted node for those nodes that allow text. If the node doesn't allow text, the property is ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeValue?: string;
    }
    /**
     * Inserts a new node just before the context node in the tree.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface CustomXmlInsertSubtreeBeforeOptions {
        /**
         * If provided, specifies the context node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nextSibling?: Word.CustomXmlNode;
    }
    /**
     * Removes the specified child node and replaces it with a different node in the same location.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface CustomXmlReplaceChildNodeOptions {
        /**
         * If provided, specifies the base name of the replacement element.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        name?: string;
        /**
         * If provided, specifies the namespace of the replacement element. This property is required to replace nodes of {@link Word.CustomXmlNodeType | type} `element` or `attribute`; otherwise, it's ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        namespaceUri?: string;
        /**
         * If provided, specifies the type of the replacement node. If the property isn't specified, it's assumed to be of type `element`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeType?: Word.CustomXmlNodeType | "element" | "attribute" | "text" | "cData" | "processingInstruction" | "comment" | "document";
        /**
         * If provided, specifies the value of the replacement node for those nodes that allow text. If the node doesn't allow text, the property is ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeValue?: string;
    }
    /**
     * Represents an XML node in a tree in the document. The `CustomXmlNode` object is a member of the {@link Word.CustomXmlNodeCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class CustomXmlNode extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `CustomXmlNodeCollection` object representing the attributes of the current element in the current node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly attributes: Word.CustomXmlNodeCollection;
        /**
         * Gets a `CustomXmlNodeCollection` object containing all of the child elements of the current node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly childNodes: Word.CustomXmlNodeCollection;
        /**
         * Gets a `CustomXmlNode` object corresponding to the first child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), returns `Nothing`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly firstChild: Word.CustomXmlNode;
        /**
         * Gets a `CustomXmlNode` object corresponding to the last child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), the property returns `Nothing`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly lastChild: Word.CustomXmlNode;
        /**
         * Gets the next sibling node (element, comment, or processing instruction) of the current node. If the node is the last sibling at its level, the property returns `Nothing`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly nextSibling: Word.CustomXmlNode;
        /**
         * Gets the object representing the part associated with this node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly ownerPart: Word.CustomXmlPart;
        /**
         * Gets the parent element node of the current node. If the current node is at the root level, the property returns `Nothing`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly parentNode: Word.CustomXmlNode;
        /**
         * Gets the previous sibling node (element, comment, or processing instruction) of the current node. If the current node is the first sibling at its level, the property returns `Nothing`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly previousSibling: Word.CustomXmlNode;
        /**
         * Gets the base name of the node without the namespace prefix, if one exists.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly baseName: string;
        /**
         * Gets the unique address identifier for the namespace of the node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly namespaceUri: string;
        /**
         * Gets the type of the current node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly nodeType: Word.CustomXmlNodeType | "element" | "attribute" | "text" | "cData" | "processingInstruction" | "comment" | "document";
        /**
         * Specifies the value of the current node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeValue: string;
        /**
         * Specifies the text for the current node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        text: string;
        /**
         * Gets a string with the canonicalized XPath for the current node. If the node is no longer in the Document Object Model (DOM), the property returns an error message.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xpath: string;
        /**
         * Gets the XML representation of the current node and its children.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xml: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CustomXmlNodeUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.CustomXmlNode): void;
        /**
         * Appends a single node as the last child under the context element node in the tree.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. The options that define the node to be appended.
         */
        appendChildNode(options?: Word.CustomXmlAppendChildNodeOptions): OfficeExtension.ClientResult<number>;
        /**
         * Adds a subtree as the last child under the context element node in the tree.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xml - A string representing the XML subtree.
         */
        appendChildSubtree(xml: string): OfficeExtension.ClientResult<number>;
        /**
         * Deletes the current node from the tree (including all of its children, if any exist).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Specifies if the current element node has child element nodes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hasChildNodes(): OfficeExtension.ClientResult<boolean>;
        /**
         * Inserts a new node just before the context node in the tree.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. The options that define the node to be inserted.
         */
        insertNodeBefore(options?: Word.CustomXmlInsertNodeBeforeOptions): OfficeExtension.ClientResult<number>;
        /**
         * Inserts the specified subtree into the location just before the context node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xml - A string representing the XML subtree.
         * @param options - Optional. The options available for inserting the subtree.
         */
        insertSubtreeBefore(xml: string, options?: Word.CustomXmlInsertSubtreeBeforeOptions): OfficeExtension.ClientResult<number>;
        /**
         * Removes the specified child node from the tree.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param child - The child node to remove.
         */
        removeChild(child: Word.CustomXmlNode): OfficeExtension.ClientResult<number>;
        /**
         * Removes the specified child node and replaces it with a different node in the same location.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param oldNode - The node to be replaced.
         * @param options - Optional. The options that define the child node which is to replace the old node.
         */
        replaceChildNode(oldNode: Word.CustomXmlNode, options?: Word.CustomXmlReplaceChildNodeOptions): OfficeExtension.ClientResult<number>;
        /**
         * Removes the specified node and replaces it with a different subtree in the same location.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xml - A string representing the new subtree.
         * @param oldNode - The node to be replaced.
         */
        replaceChildSubtree(xml: string, oldNode: Word.CustomXmlNode): OfficeExtension.ClientResult<number>;
        /**
         * Selects a collection of nodes matching an XPath expression.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xPath - The XPath expression.
         */
        selectNodes(xPath: string): Word.CustomXmlNodeCollection;
        /**
         * Selects a single node from a collection matching an XPath expression.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xPath - The XPath expression.
         */
        selectSingleNode(xPath: string): Word.CustomXmlNode;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlNodeLoadOptions): Word.CustomXmlNode;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlNode;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CustomXmlNode;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlNode;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlNode;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlNode` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlNodeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CustomXmlNodeData;
    }
    /**
     * Represents a content control. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain contents such as images, tables, or paragraphs of formatted text. Currently, only rich text, plain text, checkbox, dropdown list, and combo box content controls are supported.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class ContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the building block gallery-related data if the content control's {@link Word.ContentControlType} is `buildingBlockGallery`. It's `null` otherwise.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly buildingBlockGalleryContentControl: Word.BuildingBlockGalleryContentControl;
        /**
         * Gets the data of the content control when its type is `checkBox`. It's `null` otherwise.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        readonly checkboxContentControl: Word.CheckboxContentControl;
        /**
         * Gets the data of the content control when its type is `comboBox`. It's `null` otherwise.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        readonly comboBoxContentControl: Word.ComboBoxContentControl;
        /**
         * Gets the collection of `ContentControl` objects in the content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly contentControls: Word.ContentControlCollection;
        /**
         * Gets the date picker-related data if the content control's {@link Word.ContentControlType} is `datePicker`. It's `null` otherwise.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly datePickerContentControl: Word.DatePickerContentControl;
        /**
         * Gets the data of the content control when its type is `dropDownList`. It's `null` otherwise.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        readonly dropDownListContentControl: Word.DropDownListContentControl;
        /**
         * Gets the collection of endnotes in the content control.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly endnotes: Word.NoteItemCollection;
        /**
         * Gets the collection of `Field` objects in the content control.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly fields: Word.FieldCollection;
        /**
         * Gets the text format of the content control. Use this to get and set font name, size, color, and other properties.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly font: Word.Font;
        /**
         * Gets the collection of footnotes in the content control.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly footnotes: Word.NoteItemCollection;
        /**
         * Gets the group-related data if the content control's {@link Word.ContentControlType} is `group`. It's `null` otherwise.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly groupContentControl: Word.GroupContentControl;
        /**
         * Gets the collection of `InlinePicture` objects in the content control. The collection doesn't include floating images.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly inlinePictures: Word.InlinePictureCollection;
        /**
         * Gets the collection of `List` objects in the content control.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly lists: Word.ListCollection;
        /**
         * Gets the collection of `Paragraph` objects in the content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Important: For requirement sets 1.1 and 1.2, paragraphs in tables wholly contained within this content control aren't returned. From requirement set 1.3, paragraphs in such tables are also returned.
         */
        readonly paragraphs: Word.ParagraphCollection;
        /**
         * Gets the parent body of the content control.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentBody: Word.Body;
        /**
         * Gets the content control that contains the content control. Throws an `ItemNotFound` error if there isn't a parent content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly parentContentControl: Word.ContentControl;
        /**
         * Gets the content control that contains the content control. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentContentControlOrNullObject: Word.ContentControl;
        /**
         * Gets the table that contains the content control. Throws an `ItemNotFound` error if it isn't contained in a table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTable: Word.Table;
        /**
         * Gets the table cell that contains the content control. Throws an `ItemNotFound` error if it isn't contained in a table cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCell: Word.TableCell;
        /**
         * Gets the table cell that contains the content control. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCellOrNullObject: Word.TableCell;
        /**
         * Gets the table that contains the content control. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableOrNullObject: Word.Table;
        /**
         * Gets the picture-related data if the content control's {@link Word.ContentControlType} is `picture`. It's `null` otherwise.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly pictureContentControl: Word.PictureContentControl;
        /**
         * Gets the repeating section-related data if the content control's {@link Word.ContentControlType} is `repeatingSection`. It's `null` otherwise.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly repeatingSectionContentControl: Word.RepeatingSectionContentControl;
        /**
         * Gets the collection of `Table` objects in the content control.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly tables: Word.TableCollection;
        /**
         * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xmlMapping: Word.XmlMapping;
        /**
         * Specifies the appearance of the content control. The value can be `boundingBox`, `tags`, or `hidden`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
        /**
         * Specifies a value that indicates whether the user can delete the content control. Mutually exclusive with `removeWhenEdited`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        cannotDelete: boolean;
        /**
         * Specifies a value that indicates whether the user can edit the contents of the content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        cannotEdit: boolean;
        /**
         * Specifies the color of the content control. Color is specified in '#RRGGBB' format or by using the color name.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        color: string;
        /**
         * Gets an integer that represents the content control identifier.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly id: number;
        /**
         * Specifies the placeholder text of the content control. Dimmed text will be displayed when the content control is empty.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        placeholderText: string;
        /**
         * Specifies a value that indicates whether the content control is removed after it's edited. Mutually exclusive with `cannotDelete`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        removeWhenEdited: boolean;
        /**
         * Specifies the style name for the content control. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the `styleBuiltIn` property.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        style: string;
        /**
         * Specifies the built-in style name for the content control. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the `style` property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleBuiltIn: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
        /**
         * Gets the content control subtype. The subtype can be `richTextInline`, `richTextParagraphs`, `richTextTableCell`, `richTextTableRow` and `richTextTable` for rich text content controls, `plainTextInline` and `plainTextParagraph` for plain text content controls, `checkBox` for checkbox content controls, `dropDownList` for dropdown list content controls, `comboBox` for combo box content controls, `buildingBlockGallery` for building block gallery content controls, `datePicker` for date picker content controls, `repeatingSection` for repeating section content controls, `picture` for picture content controls, and `group` for group content controls.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly subtype: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText" | "Group";
        /**
         * Specifies a tag to identify a content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        tag: string;
        /**
         * Gets the text of the content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly text: string;
        /**
         * Specifies the title for a content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        title: string;
        /**
         * Gets the content control type. Only rich text, plain text, check box, dropdown list, combo box, building block gallery, date picker, repeating section, picture, and group content controls are supported currently.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly type: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText" | "Group";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ContentControl): void;
        /**
         * Clears the contents of the content control. The user can perform the undo operation on the cleared content.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        clear(): void;
        /**
         * Deletes the content control and its content. If `keepContent` is set to `true`, the content isn't deleted.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param keepContent - Indicates whether the content should be deleted with the content control. If `keepContent` is set to `true`, the content isn't deleted.
         */
        delete(keepContent: boolean): void;
        /**
         * Gets comments associated with the content control.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getComments(): Word.CommentCollection;
        /**
         * Gets the currently supported child content controls in this content control.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Important: If specific types are provided in the options parameter, only content controls of supported types are returned.
         * Be aware that an exception will be thrown on using methods of a generic {@link Word.ContentControl} that aren't relevant for the specific type.
         * With time, additional types of content controls may be supported. Therefore, your add-in should request and handle specific types of content controls.
         *
         * @param options - Optional. Options that define which content controls are returned.
         */
        getContentControls(options?: Word.ContentControlOptions): Word.ContentControlCollection;
        /**
         * Gets an HTML representation of the `ContentControl` object. When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for of the formatting of the document. This method doesn't return the exact same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact fidelity, or consistency across platforms, use `ContentControl.getOoxml()` and convert the returned XML to HTML.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getHtml(): OfficeExtension.ClientResult<string>;
        /**
         * Gets the Office Open XML (OOXML) representation of the `ContentControl` object.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getOoxml(): OfficeExtension.ClientResult<string>;
        /**
         * Gets the whole content control, or the starting or ending point of the content control, as a range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rangeLocation - Optional. The range location must be `whole`, `start`, `end`, `before`, `after`, or `content`.
         */
        getRange(rangeLocation?: Word.RangeLocation | "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;
        /**
         * Gets reviewed text based on ChangeTrackingVersion selection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param changeTrackingVersion - Optional. The value must be `original` or `current`. The default is `current`.
         */
        getReviewedText(changeTrackingVersion?: Word.ChangeTrackingVersion): OfficeExtension.ClientResult<string>;
        /**
         * Gets reviewed text based on ChangeTrackingVersion selection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param changeTrackingVersion - Optional. The value must be `original` or `current`. The default is `current`.
         */
        getReviewedText(changeTrackingVersion?: "Original" | "Current"): OfficeExtension.ClientResult<string>;
        /**
         * Gets the text ranges in the content control by using punctuation marks and other ending marks.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param endingMarks - The punctuation marks and other ending marks as an array of strings.
         * @param trimSpacing - Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is `false` which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         */
        getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;
        /**
         * Gets the collection of the `TrackedChange` objects in the content control.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        getTrackedChanges(): Word.TrackedChangeCollection;
        /**
         * Inserts a break at the specified location in the main document. This method cannot be used with `richTextTable`, `richTextTableRow`, and `richTextTableCell` content controls.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param breakType - Type of break.
         * @param insertLocation - The value must be `start`, `end`, `before`, or `after`.
         */
        insertBreak(breakType: Word.BreakType | "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | Word.InsertLocation.before | Word.InsertLocation.after | "Start" | "End" | "Before" | "After"): void;
        /**
         * Inserts a document into the content control at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Insertion isn't supported if the document being inserted contains an ActiveX control (likely in a form field). Consider replacing such a form field with a content control or other option appropriate for your scenario.
         *
         * @param base64File - The Base64-encoded content of a .docx file.
         * @param insertLocation - The value must be `replace`, `start`, or `end`. `replace` cannot be used with `richTextTable` and `richTextTableRow` content controls.
         */
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts HTML into the content control at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param html - The HTML to be inserted in to the content control.
         * @param insertLocation - The value must be `replace`, `start`, or `end`. `replace` cannot be used with `richTextTable` and `richTextTableRow` content controls.
         */
        insertHtml(html: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts an inline picture into the content control at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param base64EncodedImage - The Base64-encoded image to be inserted in the content control.
         * @param insertLocation - The value must be `replace`, `start`, or `end`. `replace` cannot be used with `richTextTable` and `richTextTableRow` content controls.
         */
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.InlinePicture;
        /**
         * Inserts OOXML into the content control at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param ooxml - The OOXML to be inserted in to the content control.
         * @param insertLocation - The value must be `replace`, `start`, or `end`. `replace` cannot be used with `richTextTable` and `richTextTableRow` content controls.
         */
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts a paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param paragraphText - The paragraph text to be inserted.
         * @param insertLocation - The value must be `start`, `end`, `before`, or `after`. `before` and `after` cannot be used with `richTextTable`, `richTextTableRow`, and `richTextTableCell` content controls.
         */
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | Word.InsertLocation.before | Word.InsertLocation.after | "Start" | "End" | "Before" | "After"): Word.Paragraph;
        /**
         * Inserts a table with the specified number of rows and columns into, or next to, a content control.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rowCount - The number of rows in the table.
         * @param columnCount - The number of columns in the table.
         * @param insertLocation - The value must be `start`, `end`, `before`, or `after`. `before` and `after` cannot be used with `richTextTable`, `richTextTableRow`, and `richTextTableCell` content controls.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | Word.InsertLocation.before | Word.InsertLocation.after | "Start" | "End" | "Before" | "After", values?: string[][]): Word.Table;
        /**
         * Inserts text into the content control at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param text - The text to be inserted in to the content control.
         * @param insertLocation - The value must be `replace`, `start`, or `end`. `replace` cannot be used with `richTextTable` and `richTextTableRow` content controls.
         */
        insertText(text: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Performs a search with the specified search options on the scope of the `ContentControl` object. The search results are a collection of `Range` objects.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param searchText - The search text.
         * @param searchOptions - Optional. Options for the search.
         */
        search(searchText: string, searchOptions?: Word.SearchOptions | {
            ignorePunct?: boolean;
            ignoreSpace?: boolean;
            matchCase?: boolean;
            matchPrefix?: boolean;
            matchSuffix?: boolean;
            matchWholeWord?: boolean;
            matchWildcards?: boolean;
        }): Word.RangeCollection;
        /**
         * Selects the content control. This causes Word to scroll to the selection.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: Word.SelectionMode): void;
        /**
         * Selects the content control. This causes Word to scroll to the selection.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: "Select" | "Start" | "End"): void;
        /**
         * Splits the content control into child ranges by using delimiters.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param delimiters - The delimiters as an array of strings.
         * @param multiParagraphs - Optional. Indicates whether a returned child range can cover multiple paragraphs. Default is `false` which indicates that the paragraph boundaries are also used as delimiters.
         * @param trimDelimiters - Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is `false` which indicates that the delimiters are included in the ranges returned in the range collection.
         * @param trimSpacing - Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is `false` which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         */
        split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ContentControlLoadOptions): Word.ContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ContentControl;
        /**
         * Occurs when data within the content control are changed. To get the new text, load this content control in the handler. To get the old text, do not load it.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @eventproperty
         */
        readonly onDataChanged: OfficeExtension.EventHandlers<Word.ContentControlDataChangedEventArgs>;
        /**
         * Occurs when the content control is deleted. Do not load this content control in the handler, otherwise you won't be able to get its original properties.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @eventproperty
         */
        readonly onDeleted: OfficeExtension.EventHandlers<Word.ContentControlDeletedEventArgs>;
        /**
         * Occurs when the content control is entered.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @eventproperty
         */
        readonly onEntered: OfficeExtension.EventHandlers<Word.ContentControlEnteredEventArgs>;
        /**
         * Occurs when the content control is exited, for example, when the cursor leaves the content control.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @eventproperty
         */
        readonly onExited: OfficeExtension.EventHandlers<Word.ContentControlExitedEventArgs>;
        /**
         * Occurs when selection within the content control is changed.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @eventproperty
         */
        readonly onSelectionChanged: OfficeExtension.EventHandlers<Word.ContentControlSelectionChangedEventArgs>;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ContentControlData;
    }
    /**
     * Contains a collection of {@link Word.ContentControl} objects. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain contents such as images, tables, or paragraphs of formatted text. Currently, only rich text, plain text, checkbox, dropdown list, and combo box content controls are supported.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class ContentControlCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.ContentControl[];
        /**
         * Gets the content controls that have the specified tracking state.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param changeTrackingStates - An array of content control change tracking states.
         */
        getByChangeTrackingStates(changeTrackingStates: Word.ChangeTrackingState[]): Word.ContentControlCollection;
        /**
         * Gets a content control by its identifier. Throws an `ItemNotFound` error if there isn't a content control with the identifier in this collection.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param id - A content control identifier.
         */
        getById(id: number): Word.ContentControl;
        /**
         * Gets a content control by its identifier. If there isn't a content control with the identifier in this collection, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param id - A content control identifier.
         */
        getByIdOrNullObject(id: number): Word.ContentControl;
        /**
         * Gets the content controls that have the specified tag.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param tag - A tag set on a content control.
         */
        getByTag(tag: string): Word.ContentControlCollection;
        /**
         * Gets the content controls that have the specified title.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param title - The title of a content control.
         */
        getByTitle(title: string): Word.ContentControlCollection;
        /**
         * Gets the content controls that have the specified types.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param types - An array of content control types.
         */
        getByTypes(types: Word.ContentControlType[]): Word.ContentControlCollection;
        /**
         * Gets the first content control in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.ContentControl;
        /**
         * Gets the first content control in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.ContentControl;
        /**
         * Gets a content control by its ID.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param id - The content control's ID.
         */
        getItem(id: number): Word.ContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ContentControlCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ContentControlCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ContentControlCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ContentControlCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ContentControlCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ContentControlCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ContentControlCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ContentControlCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ContentControlCollectionData;
    }
    /**
     * Represents a list item in a dropdown list or combo box content control.
     *
     * @remarks
     * [Api set: WordApi 1.9]
     */
    export class ContentControlListItem extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the display text of a list item for a dropdown list or combo box content control.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        displayText: string;
        /**
         * Specifies the index location of a content control list item in the collection of list items.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        index: number;
        /**
         * Specifies the programmatic value of a list item for a dropdown list or combo box content control.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        value: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ContentControlListItemUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ContentControlListItem): void;
        /**
         * Deletes the list item.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        delete(): void;
        /**
         * Selects the list item and sets the text of the content control to the value of the list item.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        select(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ContentControlListItemLoadOptions): Word.ContentControlListItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ContentControlListItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ContentControlListItem;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ContentControlListItem;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ContentControlListItem;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ContentControlListItem` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ContentControlListItemData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ContentControlListItemData;
    }
    /**
     * Contains a collection of {@link Word.ContentControlListItem} objects that represent the items in a dropdown list or combo box content control.
     *
     * @remarks
     * [Api set: WordApi 1.9]
     */
    export class ContentControlListItemCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.ContentControlListItem[];
        /**
         * Gets the first list item in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        getFirst(): Word.ContentControlListItem;
        /**
         * Gets the first list item in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`.
                    For further information,
                    see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        getFirstOrNullObject(): Word.ContentControlListItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ContentControlListItemCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ContentControlListItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ContentControlListItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ContentControlListItemCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ContentControlListItemCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ContentControlListItemCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ContentControlListItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ContentControlListItemCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ContentControlListItemCollectionData;
    }
    /**
     * Specifies the options that define which content controls are returned.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export interface ContentControlOptions {
        /**
         * An array of content control types, item must be `richText`, `plainText`, `checkBox`, `dropDownList`, `comboBox`, `buildingBlockGallery`, `datePicker`, `repeatingSection`, `picture`, or `group`.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Note: `plainText` support was added in WordApi 1.5. `checkBox` support was added in WordApi 1.7. `dropDownList` and `comboBox` support was added in WordApi 1.9.
         * Support for `buildingBlockGallery`, `datePicker`, `group`, `picture`, and `repeatingSection` was added in WordApiDesktop 1.3.
         */
        types: Word.ContentControlType[];
    }
    /**
     * Represents a custom property.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class CustomProperty extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the key of the custom property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly key: string;
        /**
         * Gets the value type of the custom property. Possible values are: String, Number, Date, Boolean.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly type: Word.DocumentPropertyType | "String" | "Number" | "Date" | "Boolean";
        /**
         * Specifies the value of the custom property. Note that even though Word on the web and the docx file format allow these properties to be arbitrarily long, the desktop version of Word will truncate string values to 255 16-bit chars (possibly creating invalid unicode by breaking up a surrogate pair).
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        value: any;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CustomPropertyUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.CustomProperty): void;
        /**
         * Deletes the custom property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomPropertyLoadOptions): Word.CustomProperty;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomProperty;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CustomProperty;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomProperty;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomProperty;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomProperty` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomPropertyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CustomPropertyData;
    }
    /**
     * Contains the collection of {@link Word.CustomProperty} objects.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class CustomPropertyCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CustomProperty[];
        /**
         * Creates a new or sets an existing custom property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param key - The custom property's key, which is case-insensitive.
         * @param value - The custom property's value.
         */
        add(key: string, value: any): Word.CustomProperty;
        /**
         * Deletes all custom properties in this collection.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        deleteAll(): void;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets a `CustomProperty` object by its key, which is case-insensitive. Throws an `ItemNotFound` error if the custom property doesn't exist.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param key - The key that identifies the `CustomProperty` object.
         */
        getItem(key: string): Word.CustomProperty;
        /**
         * Gets a custom property object by its key, which is case-insensitive. If the custom property doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param key - The key that identifies the custom property object.
         */
        getItemOrNullObject(key: string): Word.CustomProperty;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomPropertyCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CustomPropertyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomPropertyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CustomPropertyCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomPropertyCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomPropertyCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomPropertyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomPropertyCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CustomPropertyCollectionData;
    }
    /**
     * The options for adding a node to the XML tree.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface CustomXmlAddNodeOptions {
        /**
         * If provided, specifies the base name of the element to be added.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        name?: string;
        /**
         * If provided, specifies the namespace of the element to be appended. This property is required to add nodes of {@link Word.CustomXmlNodeType | type} `element` or `attribute`; otherwise, it's ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        namespaceUri?: string;
        /**
         * If provided, specifies the node which should become the next sibling of the new node. If not specified, the node is added to the end of the parent node's children. This property is ignored for additions of {@link Word.CustomXmlNodeType | type} `attribute`. If the node isn't a child of the parent, an error is displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nextSibling?: Word.CustomXmlNode;
        /**
         * If provided, specifies the type of node to add. If the parameter isn't specified, it's assumed to be of type `element`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeType?: Word.CustomXmlNodeType | "element" | "attribute" | "text" | "cData" | "processingInstruction" | "comment" | "document";
        /**
         * If provided, specifies the value of the added node for those nodes that allow text. If the node doesn't allow text, the property is ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nodeValue?: string;
    }
    /**
     * Represents a custom XML part.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class CustomXmlPart extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the root element of a bound region of data in the document. If the region is empty, the property returns `Nothing`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly documentElement: Word.CustomXmlNode;
        /**
         * Gets the set of namespace prefix mappings used against the current `CustomXmlPart` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly namespaceManager: Word.CustomXmlPrefixMappingCollection;
        /**
         * Specifies a `CustomXmlSchemaCollection` object representing the set of schemas attached to a bound region of data in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        schemaCollection: Word.CustomXmlSchemaCollection;
        /**
         * Gets a value that indicates whether the `CustomXmlPart` is built-in.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly builtIn: boolean;
        /**
         * Gets the ID of the custom XML part.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly id: string;
        /**
         * Gets the namespace URI of the custom XML part.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly namespaceUri: string;
        /**
         * Gets the XML representation of the current `CustomXmlPart` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xml: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CustomXmlPartUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.CustomXmlPart): void;
        /**
         * Adds a node to the XML tree.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param parent - The parent node to which the new node will be added.
         * @param options - Optional. The options that define the node to be added.
         */
        addNode(parent: Word.CustomXmlNode, options?: Word.CustomXmlAddNodeOptions): OfficeExtension.ClientResult<number>;
        /**
         * Deletes the custom XML part.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        delete(): void;
        /**
         * Deletes an attribute with the given name from the element identified by xpath.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * If any element in the tree has an xmlns attribute (whose value is typically, but not always, a URI),
         * an alias for that attribute value must prefix the element name in the xpath parameter. For example, suppose
         * the tree is the following:
         *
         * ```xml
         * <Day>
         *   <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
         *     <Week>something</Week>
         *   </Month>
         * </Day>
         * ```
         *
         * The xpath to `<Week>` must be \/Day\/greg:Month\/Week, where greg is an alias that is mapped to
         * "http:\/\/calendartypes.org\/xsds\/GregorianCalendar" in the namespaceMappings parameter.
         *
         * @param xpath - Absolute path to the single element in XPath notation.
         * @param namespaceMappings - An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`. The property names (such as "greg") can be any string that doesn't used reserved XPath characters, such as the forward slash "/".
         * @param name - Name of the attribute.
         */
        deleteAttribute(xpath: string, namespaceMappings: {
            [key: string]: string;
        }, name: string): void;
        /**
         * Deletes the element identified by xpath.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * If any element in the tree has an xmlns attribute (whose value is typically, but not always, a URI),
         * an alias for that attribute value must prefix the element name in the xpath parameter. For example, suppose
         * the tree is the following:
         *
         * ```xml
         * <Day>
         *   <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
         *     <Week>something</Week>
         *   </Month>
         * </Day>
         * ```
         *
         * The xpath to `<Week>` must be \/Day\/greg:Month\/Week, where greg is an alias that is mapped to
         * "http:\/\/calendartypes.org\/xsds\/GregorianCalendar" in the namespaceMappings parameter.
         *
         * @param xpath - Absolute path to the single element in XPath notation.
         * @param namespaceMappings - An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`. The property names (such as "greg") can be any string that doesn't used reserved XPath characters, such as the forward slash "/".
         */
        deleteElement(xpath: string, namespaceMappings: {
            [key: string]: string;
        }): void;
        /**
         * Gets the full XML content of the custom XML part.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getXml(): OfficeExtension.ClientResult<string>;
        /**
         * Inserts an attribute with the given name and value to the element identified by xpath.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * If any element in the tree has an xmlns attribute (whose value is typically, but not always, a URI),
         * an alias for that attribute value must prefix the element name in the xpath parameter. For example, suppose
         * the tree is the following:
         *
         * ```xml
         * <Day>
         *   <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
         *     <Week>something</Week>
         *   </Month>
         * </Day>
         * ```
         *
         * The xpath to `<Week>` must be \/Day\/greg:Month\/Week, where greg is an alias that is mapped to
         * "http:\/\/calendartypes.org\/xsds\/GregorianCalendar" in the namespaceMappings parameter.
         *
         * @param xpath - Absolute path to the single element in XPath notation.
         * @param namespaceMappings - An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`. The property names (such as "greg") can be any string that doesn't used reserved XPath characters, such as the forward slash "/".
         * @param name - Name of the attribute.
         * @param value - Value of the attribute.
         */
        insertAttribute(xpath: string, namespaceMappings: {
            [key: string]: string;
        }, name: string, value: string): void;
        /**
         * Inserts the given XML under the parent element identified by xpath at child position index.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * If any element in the tree has an xmlns attribute (whose value is typically, but not always, a URI),
         * an alias for that attribute value must prefix the element name in the xpath parameter. For example, suppose
         * the tree is the following:
         *
         * ```xml
         * <Day>
         *   <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
         *     <Week>something</Week>
         *   </Month>
         * </Day>
         * ```
         *
         * The xpath to `<Week>` must be \/Day\/greg:Month\/Week, where greg is an alias that is mapped to
         * "http:\/\/calendartypes.org\/xsds\/GregorianCalendar" in the namespaceMappings parameter.
         *
         * @param xpath - Absolute path to the single parent element in XPath notation.
         * @param xml - XML content to be inserted.
         * @param namespaceMappings - An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`. The property names (such as "greg") can be any string that doesn't used reserved XPath characters, such as the forward slash "/".
         * @param index - Optional. Zero-based position at which the new XML to be inserted. If omitted, the XML will be appended as the last child of this parent.
         */
        insertElement(xpath: string, xml: string, namespaceMappings: {
            [key: string]: string;
        }, index?: number): void;
        /**
         * Populates the `CustomXmlPart` object from an XML string.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xml - The XML string to load.
         */
        loadXml(xml: string): OfficeExtension.ClientResult<boolean>;
        /**
         * Queries the XML content of the custom XML part.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * If any element in the tree has an xmlns attribute (whose value is typically, but not always, a URI),
         * an alias for that attribute value must prefix the element name in the xpath parameter. For example, suppose
         * the tree is the following:
         *
         * ```xml
         * <Day>
         *   <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
         *     <Week>something</Week>
         *   </Month>
         * </Day>
         * ```
         *
         * The xpath to `<Week>` must be \/Day\/greg:Month\/Week, where greg is an alias that is mapped to
         * "http:\/\/calendartypes.org\/xsds\/GregorianCalendar" in the namespaceMappings parameter.
         *
         * @param xpath - An XPath query.
         * @param namespaceMappings - An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`. The property names (such as "greg") can be any string that doesn't used reserved XPath characters, such as the forward slash "/".
         * @returns An array where each item represents an entry matched by the XPath query.
         */
        query(xpath: string, namespaceMappings: {
            [key: string]: string;
        }): OfficeExtension.ClientResult<string[]>;
        /**
         * Selects a collection of nodes from a custom XML part.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xPath - The XPath expression to evaluate.
         */
        selectNodes(xPath: string): Word.CustomXmlNodeCollection;
        /**
         * Selects a single node within a custom XML part matching an XPath expression.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xPath - The XPath expression to evaluate.
         */
        selectSingleNode(xPath: string): Word.CustomXmlNode;
        /**
         * Sets the full XML content of the custom XML part.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param xml - XML content to be set.
         */
        setXml(xml: string): void;
        /**
         * Updates the value of an attribute with the given name of the element identified by xpath.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * If any element in the tree has an xmlns attribute (whose value is typically, but not always, a URI),
         * an alias for that attribute value must prefix the element name in the xpath parameter. For example, suppose
         * the tree is the following:
         *
         * ```xml
         * <Day>
         *   <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
         *     <Week>something</Week>
         *   </Month>
         * </Day>
         * ```
         *
         * The xpath to `<Week>` must be \/Day\/greg:Month\/Week, where greg is an alias that is mapped to
         * "http:\/\/calendartypes.org\/xsds\/GregorianCalendar" in the namespaceMappings parameter.
         *
         * @param xpath - Absolute path to the single element in XPath notation.
         * @param namespaceMappings - An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`. The property names (such as "greg") can be any string that doesn't used reserved XPath characters, such as the forward slash "/".
         * @param name - Name of the attribute.
         * @param value - New value of the attribute.
         */
        updateAttribute(xpath: string, namespaceMappings: {
            [key: string]: string;
        }, name: string, value: string): void;
        /**
         * Updates the XML of the element identified by xpath.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * If any element in the tree has an xmlns attribute (whose value is typically, but not always, a URI),
         * an alias for that attribute value must prefix the element name in the xpath parameter. For example, suppose
         * the tree is the following:
         *
         * ```xml
         * <Day>
         *   <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
         *     <Week>something</Week>
         *   </Month>
         * </Day>
         * ```
         *
         * The xpath to `<Week>` must be \/Day\/greg:Month\/Week, where greg is an alias that is mapped to
         * "http:\/\/calendartypes.org\/xsds\/GregorianCalendar" in the namespaceMappings parameter.
         *
         * @param xpath - Absolute path to the single element in XPath notation.
         * @param xml - New XML content to be stored.
         * @param namespaceMappings - An object whose property values are namespace names and whose property names are aliases for the corresponding namespaces. For example, `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`. The property names (such as "greg") can be any string that doesn't used reserved XPath characters, such as the forward slash "/".
         */
        updateElement(xpath: string, xml: string, namespaceMappings: {
            [key: string]: string;
        }): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlPartLoadOptions): Word.CustomXmlPart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlPart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.CustomXmlPart;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlPart;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlPart;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlPart` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlPartData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CustomXmlPartData;
    }
    /**
     * Contains the collection of {@link Word.CustomXmlPart} objects.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class CustomXmlPartCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CustomXmlPart[];
        /**
         * Adds a new custom XML part to the document.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param xml - XML content. Must be a valid XML fragment.
         */
        add(xml: string): Word.CustomXmlPart;
        /**
         * Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param namespaceUri - The namespace URI.
         */
        getByNamespace(namespaceUri: string): Word.CustomXmlPartScopedCollection;
        /**
         * Gets the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets a custom XML part based on its ID.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param id - ID or index of the custom XML part to be retrieved.
         */
        getItem(id: string): Word.CustomXmlPart;
        /**
         * Gets a custom XML part based on its ID. If the CustomXmlPart doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param id - ID of the object to be retrieved.
         */
        getItemOrNullObject(id: string): Word.CustomXmlPart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlPartCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CustomXmlPartCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlPartCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CustomXmlPartCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlPartCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlPartCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlPartCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CustomXmlPartCollectionData;
    }
    /**
     * Contains the collection of {@link Word.CustomXmlPart} objects with a specific namespace.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class CustomXmlPartScopedCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.CustomXmlPart[];
        /**
         * Gets the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets a custom XML part based on its ID.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param id - ID of the custom XML part to be retrieved.
         */
        getItem(id: string): Word.CustomXmlPart;
        /**
         * Gets a custom XML part based on its ID. If the CustomXmlPart doesn't exist in the collection, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param id - ID of the object to be retrieved.
         */
        getItemOrNullObject(id: string): Word.CustomXmlPart;
        /**
         * If the collection contains exactly one item, this method returns it. Otherwise, this method produces an error.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getOnlyItem(): Word.CustomXmlPart;
        /**
         * If the collection contains exactly one item, this method returns it. Otherwise, this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getOnlyItemOrNullObject(): Word.CustomXmlPart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.CustomXmlPartScopedCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.CustomXmlPartScopedCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.CustomXmlPartScopedCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.CustomXmlPartScopedCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.CustomXmlPartScopedCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CustomXmlPartScopedCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.CustomXmlPartScopedCollectionData;
    }
    /**
     * The `Document` object is the top level object. A `Document` object contains one or more sections, content controls, and the body that contains the contents of the document.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class Document extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the active window for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly activeWindow: Word.Window;
        /**
         * Specifies a `Template` object that represents the template attached to the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        attachedTemplate: Word.Template;
        /**
         * Gets a `Shape` object that represents the background image for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly background: Word.Shape;
        /**
         * Returns a `Bibliography` object that represents the bibliography references contained within the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly bibliography: Word.Bibliography;
        /**
         * Gets the `Body` object of the main document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly body: Word.Body;
        /**
         * Returns a `BookmarkCollection` object that represents all the bookmarks in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly bookmarks: Word.BookmarkCollection;
        /**
         * Gets a `DocumentProperties` object that represents all the built-in document properties for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly builtInDocumentProperties: Word.DocumentProperties;
        /**
         * Gets the `RangeScopedCollection` object that represents all the characters in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly characters: Word.RangeScopedCollection;
        /**
         * Gets a `Coauthoring` object for managing coauthoring in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly coauthoring: Word.Coauthoring;
        /**
         * Gets a `CommentCollection` object that represents all the comments in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly comments: Word.CommentCollection;
        /**
         * Gets a `Range` object that represents the main document story.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly content: Word.Range;
        /**
         * Gets the collection of `ContentControl` objects in the document. This includes content controls in the body of the document, headers, footers, textboxes, etc.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly contentControls: Word.ContentControlCollection;
        /**
         * Gets a `DocumentProperties` collection that represents all the custom document properties for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly customDocumentProperties: Word.DocumentProperties;
        /**
         * Gets the custom XML parts in the document.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly customXmlParts: Word.CustomXmlPartCollection;
        /**
         * Returns a `DocumentLibraryVersionCollection` object that represents the collection of versions of a shared document that has versioning enabled and that's stored in a document library on a server.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly documentLibraryVersions: Word.DocumentLibraryVersionCollection;
        /**
         * Gets a `FieldCollection` object that represents all the fields in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly fields: Word.FieldCollection;
        /**
         * Returns a `FrameCollection` object that represents all the frames in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly frames: Word.FrameCollection;
        /**
         * Gets a `RangeCollection` object that represents the sentences that failed the grammar check in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly grammaticalErrors: Word.RangeCollection;
        /**
         * Returns a `HyperlinkCollection` object that represents all the hyperlinks in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly hyperlinks: Word.HyperlinkCollection;
        /**
         * Returns an `IndexCollection` object that represents all the indexes in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly indexes: Word.IndexCollection;
        /**
         * Gets a `ParagraphCollection` object that represents all the numbered paragraphs in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly listParagraphs: Word.ParagraphCollection;
        /**
         * Returns a `ListTemplateCollection` object that represents all the list templates in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly listTemplates: Word.ListTemplateCollection;
        /**
         * Gets a `ListCollection` object that contains all the formatted lists in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly lists: Word.ListCollection;
        /**
         * Returns a `PageSetup` object that's associated with the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly pageSetup: Word.PageSetup;
        /**
         * Gets a `ParagraphCollection` object that represents all the paragraphs in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly paragraphs: Word.ParagraphCollection;
        /**
         * Gets the properties of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly properties: Word.DocumentProperties;
        /**
         * Gets a `ReadabilityStatisticCollection` object that represents the readability statistics for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly readabilityStatistics: Word.ReadabilityStatisticCollection;
        /**
         * Gets the collection of revisions that represents the tracked changes in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly revisions: Word.RevisionCollection;
        /**
         * Gets the collection of `Section` objects in the document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly sections: Word.SectionCollection;
        /**
         * Returns a `Selection` object that represents the current selection in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly selection: Word.Selection;
        /**
         * Gets the `RangeScopedCollection` object that represents all the sentences in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly sentences: Word.RangeScopedCollection;
        /**
         * Gets the add-in's settings in the document.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly settings: Word.SettingCollection;
        /**
         * Gets a `RangeCollection` object that represents the words identified as spelling errors in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly spellingErrors: Word.RangeCollection;
        /**
         * Gets a `RangeCollection` object that represents all the stories in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly storyRanges: Word.RangeCollection;
        /**
         * Gets a `StyleCollection` for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly styles: Word.StyleCollection;
        /**
         * Returns a `TableOfAuthoritiesCategoryCollection` object that represents the available table of authorities categories in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly tableOfAuthoritiesCategories: Word.TableOfAuthoritiesCategoryCollection;
        /**
         * Gets a `TableCollection` object that represents all the tables in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly tables: Word.TableCollection;
        /**
         * Returns a `TableOfAuthoritiesCollection` object that represents all the tables of authorities in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly tablesOfAuthorities: Word.TableOfAuthoritiesCollection;
        /**
         * Returns a `TableOfContentsCollection` object that represents all the tables of contents in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly tablesOfContents: Word.TableOfContentsCollection;
        /**
         * Returns a `TableOfFiguresCollection` object that represents all the tables of figures in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly tablesOfFigures: Word.TableOfFiguresCollection;
        /**
         * Gets the `WebSettings` object for webpage-related attributes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly webSettings: Word.WebSettings;
        /**
         * Gets the collection of `Word.Window` objects for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly windows: Word.WindowCollection;
        /**
         * Gets the `RangeScopedCollection` object that represents each word in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly words: Word.RangeScopedCollection;
        /**
         * Gets the name of the active theme and formatting options.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly activeTheme: string;
        /**
         * Gets the display name of the active theme.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly activeThemeDisplayName: string;
        /**
         * Gets whether Word encrypts file properties for password-protected documents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areFilePropertiesPasswordEncrypted: boolean;
        /**
         * Specifies whether grammatical errors are marked by a wavy green line in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areGrammaticalErrorsShown: boolean;
        /**
         * Specifies whether to use the default math settings when creating new equations.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areMathDefaultsUsed: boolean;
        /**
         * Specifies whether to disable features introduced after a specified version.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areNewerFeaturesDisabled: boolean;
        /**
         * Specifies whether Microsoft Word underlines spelling errors in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areSpellingErrorsShown: boolean;
        /**
         * Specifies whether the styles in this document are updated to match the styles in the attached template each time the document is opened.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areStylesUpdatedOnOpen: boolean;
        /**
         * Specifies whether Microsoft Word embeds TrueType fonts in the document when it's saved.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areTrueTypeFontsEmbedded: boolean;
        /**
         * Specifies if automatic hyphenation is turned on for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        autoHyphenation: boolean;
        /**
         * Specifies if the edits in the document are automatically saved.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        autoSaveOn: boolean;
        /**
         * Specifies the ChangeTracking mode.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        changeTrackingMode: Word.ChangeTrackingMode | "Off" | "TrackAll" | "TrackMineOnly";
        /**
         * Gets the code name for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly codeName: string;
        /**
         * Gets the compatibility mode that Word uses when opening the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly compatibilityMode: Word.CompatibilityMode | "Word2003" | "Word2007" | "Word2010" | "Word2013" | "Current";
        /**
         * Specifies the maximum number of consecutive lines that can end with hyphens.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        consecutiveHyphensLimit: number;
        /**
         * Gets a random number that Word assigns to changes in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly currentRsid: number;
        /**
         * Specifies the interval (in points) between the default tab stops in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        defaultTabStop: number;
        /**
         * Specifies the browser frame for displaying a webpage via hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        defaultTargetFrame: string;
        /**
         * Specifies whether Word should not embed common system fonts.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        doNotEmbedSystemFonts: boolean;
        /**
         * Specifies the name of the algorithm encryption provider that Microsoft Word uses when encrypting documents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        encryptionProvider: string;
        /**
         * Specifies the East Asian language used for line breaking.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        farEastLineBreakLanguage: Word.FarEastLineBreakLanguageId | "TraditionalChinese" | "Japanese" | "Korean" | "SimplifiedChinese";
        /**
         * Specifies the line break control level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        farEastLineBreakLevel: Word.FarEastLineBreakLevel | "Normal" | "Strict" | "Custom";
        /**
         * Specifies whether Word shows the next heading level when the previous is used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formattingIsNextLevelShown: boolean;
        /**
         * Specifies whether to show user-defined styles.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formattingIsUserStyleNameShown: boolean;
        /**
         * Gets the name of a document, including the path.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly fullName: string;
        /**
         * Specifies the horizontal space between invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        gridDistanceHorizontal: number;
        /**
         * Specifies the vertical space between invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        gridDistanceVertical: number;
        /**
         * Specifies whether the character grid starts from the upper-left corner of the page.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        gridIsOriginFromMargin: boolean;
        /**
         * Specifies the horizontal origin point for the invisible grid.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        gridOriginHorizontal: number;
        /**
         * Specifies the vertical origin point for the invisible grid.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        gridOriginVertical: number;
        /**
         * Specifies the interval for horizontal character gridlines in print layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        gridSpaceBetweenHorizontalLines: number;
        /**
         * Specifies the interval for vertical character gridlines in print layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        gridSpaceBetweenVerticalLines: number;
        /**
         * Gets whether a password is required to open the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly hasPassword: boolean;
        /**
         * Gets whether the document has an attached Microsoft Visual Basic for Applications project.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly hasVbProject: boolean;
        /**
         * Specifies whether words in all capital letters can be hyphenated.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hyphenateCaps: boolean;
        /**
         * Specifies the width of the hyphenation zone, in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hyphenationZone: number;
        /**
         * Specifies whether automatic formatting options override formatting restrictions.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isAutoFormatOverrideOn: boolean;
        /**
         * Specifies whether charts in the active document use cell-reference data-point tracking.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isChartDataPointTracked: boolean;
        /**
         * Specifies whether the compatibility option specified by the `type` property is enabled.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isCompatible: boolean;
        /**
         * Specifies whether the document is final.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isFinal: boolean;
        /**
         * Specifies whether Microsoft Word saves a subset of the embedded TrueType fonts with the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isFontsSubsetSaved: boolean;
        /**
         * Specifies whether Microsoft Word prints onto a preprinted form only the data entered in the corresponding online form.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isFormsDataPrinted: boolean;
        /**
         * Specifies whether Microsoft Word saves the data entered in a form as a tab-delimited record for use in a database.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isFormsDataSaved: boolean;
        /**
         * Specifies whether a grammar check has been run on the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isGrammarChecked: boolean;
        /**
         * Gets whether the most recent firing of the `Application.DocumentBeforeSave` event was the result of an automatic save by the document or a manual save by the user.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isInAutoSave: boolean;
        /**
         * Gets whether the document is in form design mode.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isInFormsDesign: boolean;
        /**
         * Specifies whether Word kerns half-width Latin characters and punctuation marks.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isKerningByAlgorithm: boolean;
        /**
         * Specifies whether to embed speech and handwriting data.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isLinguisticDataEmbedded: boolean;
        /**
         * Gets whether this document is a master document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isMasterDocument: boolean;
        /**
         * Specifies whether Word optimizes the document for Word 97.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isOptimizedForWord97: boolean;
        /**
         * Specifies whether {@link https://support.microsoft.com/office/0250c02b-060f-4986-88a4-36cec2a9665f | PRINT field} instructions (such as PostScript commands) in the document are to be printed on top of text and graphics when a PostScript printer is used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isPostScriptPrintedOverText: boolean;
        /**
         * Specifies whether users can change the Quick Style set.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isQuickStyleSetLocked: boolean;
        /**
         * Gets whether changes to the document cannot be saved to the original document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isReadOnly: boolean;
        /**
         * Specifies whether Microsoft Word displays a message box whenever a user opens the document, suggesting that it be opened as read-only.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isReadOnlyRecommended: boolean;
        /**
         * Specifies whether AutoShapes or East Asian characters are automatically aligned with an invisible grid.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isSnappedToGrid: boolean;
        /**
         * Specifies whether AutoShapes or East Asian characters align with invisible gridlines through other shapes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isSnappedToShapes: boolean;
        /**
         * Specifies whether spelling has been checked throughout the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isSpellingChecked: boolean;
        /**
         * Specifies whether formatting restrictions are enforced in a protected document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isStyleEnforced: boolean;
        /**
         * Gets whether this document is a subdocument of a master document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isSubdocument: boolean;
        /**
         * Specifies whether users can change the document theme.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isThemeLocked: boolean;
        /**
         * Specifies whether the document was created or opened by the user.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isUserControl: boolean;
        /**
         * Gets whether the VBA project is digitally signed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isVbaSigned: boolean;
        /**
         * Gets whether the document is protected with a write password.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isWriteReserved: boolean;
        /**
         * Specifies the character spacing adjustment.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        justificationMode: Word.JustificationMode | "Expand" | "Compress" | "CompressKana";
        /**
         * Specifies the format type that Microsoft Word uses when automatically formatting the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        kind: Word.DocumentKind | "NotSpecified" | "Letter" | "Email";
        /**
         * Specifies whether Microsoft Word has detected the language of the document text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageDetected: boolean;
        /**
         * Specifies the kinsoku characters after which Word will not break a line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        noLineBreakAfter: string;
        /**
         * Specifies the kinsoku characters before which Word will not break a line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        noLineBreakBefore: string;
        /**
         * Gets the encoding used to open the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly openEncoding: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
        /**
         * Gets the title of the original document after legal-blackline comparison.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly originalDocumentTitle: string;
        /**
         * Sets a password that must be supplied to open the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        password: string;
        /**
         * Gets the algorithm used for password encryption.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly passwordEncryptionAlgorithm: string;
        /**
         * Gets the key length used for password encryption.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly passwordEncryptionKeyLength: number;
        /**
         * Gets the name of the password encryption provider.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly passwordEncryptionProvider: string;
        /**
         * Gets the disk or the web path to the document (excludes the document name).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly path: string;
        /**
         * Specifies whether revision marks are printed with the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        printRevisions: boolean;
        /**
         * Gets the protection type for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly protectionType: Word.ProtectionType | "NoProtection" | "AllowOnlyRevisions" | "AllowOnlyComments" | "AllowOnlyFormFields" | "AllowOnlyReading";
        /**
         * Specifies the width of pages in reading layout view when frozen.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readingLayoutSizeX: number;
        /**
         * Specifies the height of pages in reading layout view when frozen.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readingLayoutSizeY: number;
        /**
         * Specifies whether pages in reading layout view are frozen for handwritten markup.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readingModeIsLayoutFrozen: boolean;
        /**
         * Specifies whether Word removes user information upon saving.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        removePersonalInformationOnSave: boolean;
        /**
         * Gets the title of the revised document after legal-blackline comparison.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly revisedDocumentTitle: string;
        /**
         * Specifies the encoding used when saving the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        saveEncoding: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
        /**
         * Gets the file format of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly saveFormat: Word.FileSaveFormat | "Document" | "Template" | "Text" | "TextLineBreaks" | "DosText" | "DosTextLineBreaks" | "Rtf" | "UnicodeText" | "Html" | "WebArchive" | "FilteredHtml" | "Xml" | "XmlDocument" | "XmlDocumentMacroEnabled" | "XmlTemplate" | "XmlTemplateMacroEnabled" | "DocumentDefault" | "Pdf" | "Xps" | "FlatXml" | "FlatXmlMacroEnabled" | "FlatXmlTemplate" | "FlatXmlTemplateMacroEnabled" | "OpenDocumentText" | "StrictOpenXmlDocument";
        /**
         * Indicates whether the changes in the document have been saved. A value of `true` indicates that the document hasn't changed since it was saved.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly saved: boolean;
        /**
         * Specifies the encoding for saving as encoded text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        textEncoding: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
        /**
         * Specifies how Word marks line and paragraph breaks in text files.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        textLineEnding: Word.LineEndingType | "Crlf" | "CrOnly" | "LfOnly" | "Lfcr" | "Lsps";
        /**
         * Specifies whether to track formatting changes when change tracking is on.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        trackFormatting: boolean;
        /**
         * Specifies whether to mark moved text when Track Changes is on.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        trackMoves: boolean;
        /**
         * Specifies whether changes are tracked in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        trackRevisions: boolean;
        /**
         * Specifies whether to remove or store date and time metadata for tracked changes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        trackedChangesAreDateAndTimeRemoved: boolean;
        /**
         * Gets the document type (template or document).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly type: Word.DocumentType | "Document" | "Template" | "Frameset";
        /**
         * Sets a password for saving changes to the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        writePassword: string;
        /**
         * Specifies whether error messages are generated from built-in Word messages or MSXML (Microsoft XML).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xmlAreAdvancedErrorsShown: boolean;
        /**
         * Specifies whether to save a document through an Extensible Stylesheet Language Transformation (XSLT).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xmlIsXsltUsedWhenSaving: boolean;
        /**
         * Specifies the path and file name for the XSLT to apply when saving a document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xmlSaveThroughXslt: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.DocumentUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Document): void;
        /**
         * Accepts all tracked changes in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        acceptAllRevisions(): void;
        /**
         * Accepts all revisions in the document that are displayed on the screen.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        acceptAllRevisionsShown(): void;
        /**
         * Activates the document so that it becomes the active document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        activate(): void;
        /**
         * Adds a style into the document by name and type.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param name - A string representing the style name.
         * @param type - The style type, including character, list, paragraph, or table.
         */
        addStyle(name: string, type: Word.StyleType): Word.Style;
        /**
         * Adds a style into the document by name and type.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param name - A string representing the style name.
         * @param type - The style type, including character, list, paragraph, or table.
         */
        addStyle(name: string, type: "Character" | "List" | "Paragraph" | "Table"): Word.Style;
        /**
         * Creates a shortcut to the document or hyperlink and adds it to the **Favorites** folder.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        addToFavorites(): void;
        /**
         * Applies the specified Quick Style set to the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param style - The style set to apply.
         */
        applyQuickStyleSet(style: Word.ApplyQuickStyleSet): void;
        /**
         * Applies the specified Quick Style set to the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param style - The style set to apply.
         */
        applyQuickStyleSet(style: "SessionStart" | "Template"): void;
        /**
         * Applies the specified theme to this document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param name - The name of the theme.
         */
        applyTheme(name: string): void;
        /**
         * Automatically formats the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        autoFormat(): void;
        /**
         * Returns `true` if Microsoft Word can check in the document to a server.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         * @returns `true` if the document can be checked in; otherwise, `false`.
         */
        canCheckin(): OfficeExtension.ClientResult<boolean>;
        /**
         * Searches all text in a Japanese language document and displays instances where character usage is inconsistent for the same words.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        checkConsistencyJapanese(): void;
        /**
         * Begins a spelling and grammar check for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        checkGrammar(): void;
        /**
         * Closes the current document.
                    
                     Note: This API isn't supported in Word on the web.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param closeBehavior - Optional. The close behavior must be `save` or `skipSave`. Default value is `save`.
         */
        close(closeBehavior?: Word.CloseBehavior): void;
        /**
         * Closes the current document.
                    
                     Note: This API isn't supported in Word on the web.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param closeBehavior - Optional. The close behavior must be `save` or `skipSave`. Default value is `save`.
         */
        close(closeBehavior?: "Save" | "SkipSave"): void;
        /**
         * Switches the document from print preview to the previous view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        closePrintPreview(): void;
        /**
         * Displays revision marks that indicate where the specified document differs from another document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         *
         * @param filePath - The path of the document with which the specified document is compared.
         * @param documentCompareOptions - Optional. The additional options that specifies the behavior of comparing document.
         */
        compare(filePath: string, documentCompareOptions?: Word.DocumentCompareOptions): void;
        /**
         * Displays revision marks that indicate where the specified document differs from another document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param base64File - The Base64-encoded content of the document with which the specified document is compared.
         * @param documentCompareOptions - Optional. The additional options that specify the behavior for comparing the documents. Note that the `compareTarget` option isn't allowed to be `compareTargetSelected` in this API.
         */
        compareFromBase64(base64File: string, documentCompareOptions?: Word.DocumentCompareOptions): void;
        /**
         * Converts the file to the newest format and enables all features.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        convert(): void;
        /**
         * Converts automatic hyphens to manual hyphens.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        convertAutoHyphens(): void;
        /**
         * Changes the list numbers and {@link https://support.microsoft.com/office/557541b1-abb2-4959-a9f2-401639c8ff82 | LISTNUM fields} in the document to text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param numberType - Optional. The type of numbering to convert.
         */
        convertNumbersToText(numberType?: Word.NumberType): void;
        /**
         * Changes the list numbers and {@link https://support.microsoft.com/office/557541b1-abb2-4959-a9f2-401639c8ff82 | LISTNUM fields} in the document to text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param numberType - Optional. The type of numbering to convert.
         */
        convertNumbersToText(numberType?: "Paragraph" | "ListNum" | "AllNumbers"): void;
        /**
         * Reconverts a Vietnamese document to Unicode using a code page other than the default.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param codePageOrigin - The code page to use.
         */
        convertVietnameseDocument(codePageOrigin: number): void;
        /**
         * Copies styles from the specified template to the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param StyleTemplate - The template to copy styles from.
         */
        copyStylesFromTemplate(StyleTemplate: string): void;
        /**
         * Deletes all comments from the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        deleteAllComments(): void;
        /**
         * Deletes all revisions in the document that are displayed on the screen.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        deleteAllCommentsShown(): void;
        /**
         * Deletes all handwritten ink annotations in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        deleteAllInkAnnotations(): void;
        /**
         * Deletes a bookmark, if it exists, from the document.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param name - The case-insensitive bookmark name.
         */
        deleteBookmark(name: string): void;
        /**
         * Analyzes the document text to determine the language.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        detectLanguage(): void;
        /**
         * Decreases the font size of text just enough so that the document page count drops by one.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fitToPages(): void;
        /**
         * Fixes the layout of the document in Web view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        freezeLayout(): void;
        /**
         * Gets the annotation by ID. Throws an `ItemNotFound` error if annotation isn't found.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * @param id - The ID of the annotation to get.
         */
        getAnnotationById(id: string): Word.Annotation;
        /**
         * Gets a bookmark's range. Throws an `ItemNotFound` error if the bookmark doesn't exist.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param name - The case-insensitive bookmark name.
         */
        getBookmarkRange(name: string): Word.Range;
        /**
         * Gets a bookmark's range. If the bookmark doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param name - The case-insensitive bookmark name.
         */
        getBookmarkRangeOrNullObject(name: string): Word.Range;
        /**
         * Gets the currently supported content controls in the document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Important: If specific types are provided in the options parameter, only content controls of supported types are returned.
         * Be aware that an exception will be thrown on using methods of a generic {@link Word.ContentControl} that aren't relevant for the specific type.
         * With time, additional types of content controls may be supported. Therefore, your add-in should request and handle specific types of content controls.
         *
         * @param options - Optional. Options that define which content controls are returned.
         */
        getContentControls(options?: Word.ContentControlOptions): Word.ContentControlCollection;
        /**
         * Returns an array of items that can be cross-referenced based on the specified cross-reference type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param referenceType - The type of reference.
         */
        getCrossReferenceItems(referenceType: Word.ReferenceType): OfficeExtension.ClientResult<string[]>;
        /**
         * Returns an array of items that can be cross-referenced based on the specified cross-reference type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param referenceType - The type of reference.
         */
        getCrossReferenceItems(referenceType: "NumberedItem" | "Heading" | "Bookmark" | "Footnote" | "Endnote"): OfficeExtension.ClientResult<string[]>;
        /**
         * Gets the document's endnotes in a single body.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        getEndnoteBody(): Word.Body;
        /**
         * Gets the document's footnotes in a single body.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        getFootnoteBody(): Word.Body;
        /**
         * Gets the paragraph by its unique local ID. Throws an `ItemNotFound` error if the collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         *
         * @param id - Unique local ID in standard 8-4-4-4-12 GUID format without curly braces. Note that the ID differs across sessions and coauthors.
         */
        getParagraphByUniqueLocalId(id: string): Word.Paragraph;
        /**
         * Gets the current selection of the document. Multiple selections aren't supported.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getSelection(): Word.Range;
        /**
         * Gets a `StyleCollection` object that represents the whole style set of the document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        getStyles(): Word.StyleCollection;
        /**
         * Import styles from a JSON-formatted string.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         *
         * Note: The `importedStylesConflictBehavior` parameter was introduced in WordApiDesktop 1.1.
         *
         * @param stylesJson - A JSON-formatted string representing the styles.
         * @param importedStylesConflictBehavior - Optional. Specifies how to handle any imported styles with the same name as existing styles in the current document. The default value is `ignore`.
         */
        importStylesFromJson(stylesJson: string, importedStylesConflictBehavior?: Word.ImportedStylesConflictBehavior): OfficeExtension.ClientResult<string[]>;
        /**
         * Import styles from a JSON-formatted string.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         *
         * Note: The `importedStylesConflictBehavior` parameter was introduced in WordApiDesktop 1.1.
         *
         * @param stylesJson - A JSON-formatted string representing the styles.
         * @param importedStylesConflictBehavior - Optional. Specifies how to handle any imported styles with the same name as existing styles in the current document. The default value is `ignore`.
         */
        importStylesFromJson(stylesJson: string, importedStylesConflictBehavior?: "Ignore" | "Overwrite" | "CreateNew"): OfficeExtension.ClientResult<string[]>;
        /**
         * Inserts a document into the target document at a specific location with additional properties.
                    Headers, footers, watermarks, and other section properties are copied by default.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Insertion isn't supported if the document being inserted contains an ActiveX control (likely in a form field). Consider replacing such a form field with a content control or other option appropriate for your scenario.
         *
         * @param base64File - The Base64-encoded content of a .docx file.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         * @param insertFileOptions - Optional. The additional properties that should be imported to the destination document.
         */
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End", insertFileOptions?: Word.InsertFileOptions): Word.SectionCollection;
        /**
         * Locks the file on the server preventing anyone else from editing it.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lockServerFile(): void;
        /**
         * Sets the compatibility options.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        makeCompatibilityDefault(): void;
        /**
         * Initiates manual hyphenation of a document, one line at a time.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        manualHyphenation(): void;
        /**
         * Posts the document to a public folder in Microsoft Exchange.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        post(): void;
        /**
         * Opens PowerPoint with the Word document loaded.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        presentIt(): void;
        /**
         * Switches the view to print preview.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        printPreview(): void;
        /**
         * Redoes the last action that was undone (reverses the `undo` method).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param times - Optional. The number of actions to redo.
         * @returns `true` if the actions were redone successfully; otherwise, `false`.
         */
        redo(times?: number): OfficeExtension.ClientResult<boolean>;
        /**
         * Rejects all tracked changes in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rejectAllRevisions(): void;
        /**
         * Rejects all revisions in the document that are displayed on the screen.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rejectAllRevisionsShown(): void;
        /**
         * Reloads a cached document by resolving the hyperlink to the document and downloading it.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reload(): void;
        /**
         * Reloads the document based on an HTML document, using the document encoding.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param encoding - The encoding to use.
         */
        reloadAs(encoding: Word.DocumentEncoding): void;
        /**
         * Reloads the document based on an HTML document, using the document encoding.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param encoding - The encoding to use.
         */
        reloadAs(encoding: "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8"): void;
        /**
         * Removes sensitive information, properties, comments, and other metadata from the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param removeDocInfoType - The type of document info to remove.
         */
        removeDocumentInformation(removeDocInfoType: Word.RemoveDocInfoType): void;
        /**
         * Removes sensitive information, properties, comments, and other metadata from the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param removeDocInfoType - The type of document info to remove.
         */
        removeDocumentInformation(removeDocInfoType: "Comments" | "Revisions" | "Versions" | "RemovePersonalInformation" | "EmailHeader" | "RoutingSlip" | "SendForReview" | "DocumentProperties" | "Template" | "DocumentWorkspace" | "InkAnnotations" | "DocumentServerProperties" | "DocumentManagementPolicy" | "ContentType" | "TaskpaneWebExtensions" | "AtMentions" | "DocumentTasks" | "DocumentIntelligence" | "CommentReactions" | "All"): void;
        /**
         * Purges the document of locked styles when formatting restrictions have been applied in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        removeLockedStyles(): void;
        /**
         * Removes numbers or bullets from the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param numberType - Optional. The type of numbering to remove.
         */
        removeNumbers(numberType?: Word.NumberType): void;
        /**
         * Removes numbers or bullets from the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param numberType - Optional. The type of numbering to remove.
         */
        removeNumbers(numberType?: "Paragraph" | "ListNum" | "AllNumbers"): void;
        /**
         * Removes the active theme from the current document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        removeTheme(): void;
        /**
         * Repaginates the entire document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        repaginate(): void;
        /**
         * Clears all form fields in the document, preparing the form to be filled in again.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        resetFormFields(): void;
        /**
         * Returns the document to the last saved reading position.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        returnToLastReadPosition(): OfficeExtension.ClientResult<number>;
        /**
         * Runs an auto macro that's stored in the document. If the specified auto macro doesn't exist, nothing happens.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param autoMacro - The auto macro to run.
         */
        runAutoMacro(autoMacro: Word.AutoMacro): void;
        /**
         * Runs an auto macro that's stored in the document. If the specified auto macro doesn't exist, nothing happens.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param autoMacro - The auto macro to run.
         */
        runAutoMacro(autoMacro: "StartWord" | "New" | "Open" | "Close" | "Exit" | "Sync"): void;
        /**
         * Saves the document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Note: The `saveBehavior` and `fileName` parameters were introduced in WordApi 1.5.
         *
         * @param saveBehavior - Optional. The save behavior must be `save` or `prompt`. Default value is `save`.
         * @param fileName - Optional. The file name (exclude file extension). Only takes effect for a new document.
         */
        save(saveBehavior?: Word.SaveBehavior, fileName?: string): void;
        /**
         * Saves the document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Note: The `saveBehavior` and `fileName` parameters were introduced in WordApi 1.5.
         *
         * @param saveBehavior - Optional. The save behavior must be `save` or `prompt`. Default value is `save`.
         * @param fileName - Optional. The file name (exclude file extension). Only takes effect for a new document.
         */
        save(saveBehavior?: "Save" | "Prompt", fileName?: string): void;
        /**
         * Saves the group of quick styles currently in use.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param fileName - The name of the file to save.
         */
        saveAsQuickStyleSet(fileName: string): void;
        /**
         * Performs a search with the specified search options on the scope of the whole document. The search results are a collection of `Range` objects.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * @param searchText - The text to search for.
         * @param searchOptions - Optional. Options that define how the search is performed.
         */
        search(searchText: string, searchOptions?: Word.SearchOptions | {
            ignorePunct?: boolean;
            ignoreSpace?: boolean;
            matchCase?: boolean;
            matchPrefix?: boolean;
            matchSuffix?: boolean;
            matchWholeWord?: boolean;
            matchWildcards?: boolean;
        }): Word.RangeCollection;
        /**
         * Selects the contents of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        select(): void;
        /**
         * Returns all content controls with the specified tag.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param tag - The tag value to filter content controls.
         */
        selectContentControlsByTag(tag: string): Word.ContentControlCollection;
        /**
         * Returns a `ContentControlCollection` object that represents all the content controls in the document with the specified title.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param title - The title of the content controls.
         */
        selectContentControlsByTitle(title: string): Word.ContentControlCollection;
        /**
         * Returns a `ContentControlCollection` object that represents all content controls in the document that are linked to the specific custom XML node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param node - The custom XML node.
         */
        selectLinkedControls(node: Word.CustomXmlNode): Word.ContentControlCollection;
        /**
         * Returns an `XmlNodeCollection` object that represents all the nodes that match the XPath parameter in the order in which they appear in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param xPath - The XPath expression.
         * @param options - Optional. Configuration options for the nodes selection.
         */
        selectNodes(xPath: string, options?: Word.SelectNodesOptions): Word.XmlNodeCollection;
        /**
         * Returns an `XmlNode` object that represents the first node that matches the XPath parameter in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param xPath - The XPath expression.
         * @param options - Optional. Configuration options for the node selection.
         */
        selectSingleNode(xPath: string, options?: Word.SelectSingleNodeOptions): Word.XmlNode;
        /**
         * Returns a `ContentControlCollection` object that represents all content controls in the document that are not linked to an XML node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param stream - Optional. The custom XML part.
         */
        selectUnlinkedControls(stream?: Word.CustomXmlPart): Word.ContentControlCollection;
        /**
         * Sends the document as a fax, without any user interaction.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param address - The fax address.
         * @param subject - Optional. The subject of the fax.
         */
        sendFax(address: string, subject?: string): void;
        /**
         * Opens a message window for sending the document through Microsoft Exchange.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sendMail(): void;
        /**
         * Specifies the table style to use for newly created tables in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param style - The style to apply.
         * @param setInTemplate - Whether to set the style in the template.
         */
        setDefaultTableStyle(style: string, setInTemplate: boolean): void;
        /**
         * Sets the options Microsoft Word uses for encrypting documents with passwords.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param passwordEncryptionProvider - The encryption provider.
         * @param passwordEncryptionAlgorithm - The encryption algorithm.
         * @param passwordEncryptionKeyLength - The key length.
         * @param passwordEncryptFileProperties - Optional. Whether to encrypt file properties.
         */
        setPasswordEncryptionOptions(passwordEncryptionProvider: string, passwordEncryptionAlgorithm: string, passwordEncryptionKeyLength: number, passwordEncryptFileProperties?: boolean): void;
        /**
         * Switches form design mode on or off.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        toggleFormsDesign(): void;
        /**
         * Applies the specified Extensible Stylesheet Language Transformation (XSLT) file to this document and replaces the document with the results.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param path - The path to the XSLT file.
         * @param dataOnly - Optional. Whether to use data only.
         */
        transformDocument(path: string, dataOnly?: boolean): void;
        /**
         * Undoes the last action or a sequence of actions, which are displayed in the Undo list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param times - Optional. The number of actions to undo.
         * @returns `true` if the actions were undone successfully; otherwise, `false`.
         */
        undo(times?: number): OfficeExtension.ClientResult<boolean>;
        /**
         * Clears the list of actions that can be undone in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        undoClear(): void;
        /**
         * Removes protection from the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param password - Optional. The password to unprotect the document.
         */
        unprotect(password?: string): void;
        /**
         * Copies all styles from the attached template into the document, overwriting any existing styles in the document that have the same name.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        updateStyles(): void;
        /**
         * Displays the code window for the selected Microsoft ActiveX control in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        viewCode(): void;
        /**
         * Displays the property window for the selected Microsoft ActiveX control in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        viewPropertyBrowser(): void;
        /**
         * Displays a preview of the current document as it would look if saved as a webpage.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        webPagePreview(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.DocumentLoadOptions): Word.Document;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Document;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Document;
        /**
         * Occurs when the user clicks an annotation (or selects it using **Alt+Down**).
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * @eventproperty
         */
        readonly onAnnotationClicked: OfficeExtension.EventHandlers<Word.AnnotationClickedEventArgs>;
        /**
         * Occurs when the user hovers the cursor over an annotation.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * @eventproperty
         */
        readonly onAnnotationHovered: OfficeExtension.EventHandlers<Word.AnnotationHoveredEventArgs>;
        /**
         * Occurs when the user adds one or more annotations.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * @eventproperty
         */
        readonly onAnnotationInserted: OfficeExtension.EventHandlers<Word.AnnotationInsertedEventArgs>;
        /**
         * Occurs when the user performs an action in an annotation pop-up menu.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         *
         * @eventproperty
         */
        readonly onAnnotationPopupAction: OfficeExtension.EventHandlers<Word.AnnotationPopupActionEventArgs>;
        /**
         * Occurs when the user deletes one or more annotations.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * @eventproperty
         */
        readonly onAnnotationRemoved: OfficeExtension.EventHandlers<Word.AnnotationRemovedEventArgs>;
        /**
         * Occurs when a content control is added. Run context.sync() in the handler to get the new content control's properties.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @eventproperty
         */
        readonly onContentControlAdded: OfficeExtension.EventHandlers<Word.ContentControlAddedEventArgs>;
        /**
         * Occurs when the user adds new paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         *
         * @eventproperty
         */
        readonly onParagraphAdded: OfficeExtension.EventHandlers<Word.ParagraphAddedEventArgs>;
        /**
         * Occurs when the user changes paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         *
         * @eventproperty
         */
        readonly onParagraphChanged: OfficeExtension.EventHandlers<Word.ParagraphChangedEventArgs>;
        /**
         * Occurs when the user deletes paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         *
         * @eventproperty
         */
        readonly onParagraphDeleted: OfficeExtension.EventHandlers<Word.ParagraphDeletedEventArgs>;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Document;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Document;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Document` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DocumentData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.DocumentData;
    }
    /**
     * The `DocumentCreated` object is the top level object created by `Application.createDocument`. A `DocumentCreated` object is a special `Document` object.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class DocumentCreated extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the `Body` object of the document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.3]
         */
        readonly body: Word.Body;
        /**
         * Gets the collection of `ContentControl` objects in the document. This includes content controls in the body of the document, headers, footers, textboxes, etc.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.3]
         */
        readonly contentControls: Word.ContentControlCollection;
        /**
         * Gets the custom XML parts in the document.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.4]
         */
        readonly customXmlParts: Word.CustomXmlPartCollection;
        /**
         * Gets the properties of the document.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.3]
         */
        readonly properties: Word.DocumentProperties;
        /**
         * Gets the collection of `Section` objects in the document.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.3]
         */
        readonly sections: Word.SectionCollection;
        /**
         * Gets the add-in's settings in the document.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.4]
         */
        readonly settings: Word.SettingCollection;
        /**
         * Indicates whether the changes in the document have been saved. A value of `true` indicates that the document hasn't changed since it was saved.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.3]
         */
        readonly saved: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.DocumentCreatedUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.DocumentCreated): void;
        
        
        /**
         * Deletes a bookmark, if it exists, from the document.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.4]
         *
         * @param name - The case-insensitive bookmark name.
         */
        deleteBookmark(name: string): void;
        /**
         * Gets a bookmark's range. Throws an `ItemNotFound` error if the bookmark doesn't exist.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.4]
         *
         * @param name - The case-insensitive bookmark name.
         */
        getBookmarkRange(name: string): Word.Range;
        /**
         * Gets a bookmark's range. If the bookmark doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.4]
         *
         * @param name - The case-insensitive bookmark name. Only alphanumeric and underscore characters are supported. It must begin with a letter but if you want to tag the bookmark as hidden, then start the name with an underscore character. Names can't be longer than 40 characters.
         */
        getBookmarkRangeOrNullObject(name: string): Word.Range;
        
        
        
        /**
         * Opens the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        open(): void;
        /**
         * Saves the document.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.3]
         *
         * Note: The `saveBehavior` and `fileName` parameters were introduced in WordApiHiddenDocument 1.5.
         *
         * @param saveBehavior - Optional. `DocumentCreated` only supports `save`.
         * @param fileName - Optional. The file name (exclude file extension). Only takes effect for a new document.
         */
        save(saveBehavior?: Word.SaveBehavior, fileName?: string): void;
        /**
         * Saves the document.
         *
         * @remarks
         * [Api set: WordApiHiddenDocument 1.3]
         *
         * Note: The `saveBehavior` and `fileName` parameters were introduced in WordApiHiddenDocument 1.5.
         *
         * @param saveBehavior - Optional. `DocumentCreated` only supports `save`.
         * @param fileName - Optional. The file name (exclude file extension). Only takes effect for a new document.
         */
        save(saveBehavior?: "Save" | "Prompt", fileName?: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.DocumentCreatedLoadOptions): Word.DocumentCreated;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.DocumentCreated;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.DocumentCreated;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.DocumentCreated;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.DocumentCreated;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.DocumentCreated` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DocumentCreatedData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.DocumentCreatedData;
    }
    /**
     * Represents document properties.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class DocumentProperties extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the collection of custom properties of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly customProperties: Word.CustomPropertyCollection;
        /**
         * Gets the application name of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly applicationName: string;
        /**
         * Specifies the author of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        author: string;
        /**
         * Specifies the category of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        category: string;
        /**
         * Specifies the Comments field in the metadata of the document. These have no connection to comments by users made in the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        comments: string;
        /**
         * Specifies the company of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        company: string;
        /**
         * Gets the creation date of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly creationDate: Date;
        /**
         * Specifies the format of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        format: string;
        /**
         * Specifies the keywords of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        keywords: string;
        /**
         * Gets the last author of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly lastAuthor: string;
        /**
         * Gets the last print date of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly lastPrintDate: Date;
        /**
         * Gets the last save time of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly lastSaveTime: Date;
        /**
         * Specifies the manager of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        manager: string;
        /**
         * Gets the revision number of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly revisionNumber: string;
        /**
         * Gets security settings of the document. Some are access restrictions on the file on disk. Others are Document Protection settings. Some possible values are 0 = File on disk is read/write; 1 = Protect Document: File is encrypted and requires a password to open; 2 = Protect Document: Always Open as Read-Only; 3 = Protect Document: Both #1 and #2; 4 = File on disk is read-only; 5 = Both #1 and #4; 6 = Both #2 and #4; 7 = All of #1, #2, and #4; 8 = Protect Document: Restrict Edit to read-only; 9 = Both #1 and #8; 10 = Both #2 and #8; 11 = All of #1, #2, and #8; 12 = Both #4 and #8; 13 = All of #1, #4, and #8; 14 = All of #2, #4, and #8; 15 = All of #1, #2, #4, and #8.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly security: number;
        /**
         * Specifies the subject of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        subject: string;
        /**
         * Gets the template of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly template: string;
        /**
         * Specifies the title of the document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        title: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.DocumentPropertiesUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.DocumentProperties): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.DocumentPropertiesLoadOptions): Word.DocumentProperties;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.DocumentProperties;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.DocumentProperties;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.DocumentProperties;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.DocumentProperties;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.DocumentProperties` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DocumentPropertiesData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.DocumentPropertiesData;
    }
    /**
     * The data specific to content controls of type `dropDownList`.
     *
     * @remarks
     * [Api set: WordApi 1.9]
     */
    export class DropDownListContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the collection of list items in the dropdown list content control.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        readonly listItems: Word.ContentControlListItemCollection;
        /**
         * Adds a new list item to this dropdown list content control and returns a {@link Word.ContentControlListItem} object.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         *
         * @param displayText - Display text of the list item.
         * @param value - Optional. Value of the list item.
         * @param index - Optional. Index location of the new item in the list. If an item exists at the position specified, the existing item is pushed down in the list. If omitted, the new item is added to the end of the list.
         */
        addListItem(displayText: string, value?: string, index?: number): Word.ContentControlListItem;
        /**
         * Deletes all list items in this dropdown list content control.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        deleteAllListItems(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.DropDownListContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.DropDownListContentControl;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.DropDownListContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.DropDownListContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.DropDownListContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DropDownListContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.DropDownListContentControlData;
    }
    /**
     * The data specific to content controls of type `comboBox`.
     *
     * @remarks
     * [Api set: WordApi 1.9]
     */
    export class ComboBoxContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the collection of list items in the combo box content control.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        readonly listItems: Word.ContentControlListItemCollection;
        /**
         * Adds a new list item to this combo box content control and returns a {@link Word.ContentControlListItem} object.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         *
         * @param displayText - Display text of the list item.
         * @param value - Optional. Value of the list item.
         * @param index - Optional. Index location of the new item in the list. If an item exists at the position specified, the existing item is pushed down in the list. If omitted, the new item is added to the end of the list.
         */
        addListItem(displayText: string, value?: string, index?: number): Word.ContentControlListItem;
        /**
         * Deletes all list items in this combo box content control.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        deleteAllListItems(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ComboBoxContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ComboBoxContentControl;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ComboBoxContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ComboBoxContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ComboBoxContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ComboBoxContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ComboBoxContentControlData;
    }
    /**
     * Represents a field.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     *
     * Important: To learn more about which fields can be inserted, see the `Word.Range.insertField` API introduced in requirement set 1.5.
     * Support for managing fields is similar to what's available in the Word UI. However, the Word UI on the web primarily only supports fields as read-only (see {@link https://support.microsoft.com/office/d8f46094-13c3-4966-98c3-259748f3caf1 | Field codes in Word for the web}).
     * To learn more about Word UI clients that more fully support fields, see the product list at the beginning of {@link https://support.microsoft.com/office/c429bbb0-8669-48a7-bd24-bab6ba6b06bb | Insert, edit, and view fields in Word}.
     */
    export class Field extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `LinkFormat` object that represents the link options of the field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly linkFormat: Word.LinkFormat;
        /**
         * Gets an `OleFormat` object that represents the OLE characteristics (other than linking) for the field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly oleFormat: Word.OleFormat;
        /**
         * Gets the parent body of the field.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly parentBody: Word.Body;
        /**
         * Gets the content control that contains the field. Throws an `ItemNotFound` error if there isn't a parent content control.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly parentContentControl: Word.ContentControl;
        /**
         * Gets the content control that contains the field. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly parentContentControlOrNullObject: Word.ContentControl;
        /**
         * Gets the table that contains the field. Throws an `ItemNotFound` error if it isn't contained in a table.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly parentTable: Word.Table;
        /**
         * Gets the table cell that contains the field. Throws an `ItemNotFound` error if it isn't contained in a table cell.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly parentTableCell: Word.TableCell;
        /**
         * Gets the table cell that contains the field. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly parentTableCellOrNullObject: Word.TableCell;
        /**
         * Gets the table that contains the field. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly parentTableOrNullObject: Word.Table;
        /**
         * Gets the field's result data.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly result: Word.Range;
        /**
         * Specifies the field's code instruction.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * Note: The ability to set the code was introduced in WordApi 1.5.
         */
        code: string;
        /**
         * Specifies data in a field of `addin` type. If the field isn't an `addin` type, it's `null` and it will throw a general exception when code attempts to set it.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        data: string;
        /**
         * Gets the field's kind.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly kind: Word.FieldKind | "None" | "Hot" | "Warm" | "Cold";
        /**
         * Specifies whether the field is locked. `true` if the field is locked, `false` otherwise.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        locked: boolean;
        /**
         * Specifies whether the field codes are displayed for the specified field. `true` if the field codes are displayed, `false` otherwise.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        showCodes: boolean;
        /**
         * Gets the field's type.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly type: Word.FieldType | "Addin" | "AddressBlock" | "Advance" | "Ask" | "Author" | "AutoText" | "AutoTextList" | "BarCode" | "Bibliography" | "BidiOutline" | "Citation" | "Comments" | "Compare" | "CreateDate" | "Data" | "Database" | "Date" | "DisplayBarcode" | "DocProperty" | "DocVariable" | "EditTime" | "Embedded" | "EQ" | "Expression" | "FileName" | "FileSize" | "FillIn" | "FormCheckbox" | "FormDropdown" | "FormText" | "GotoButton" | "GreetingLine" | "Hyperlink" | "If" | "Import" | "Include" | "IncludePicture" | "IncludeText" | "Index" | "Info" | "Keywords" | "LastSavedBy" | "Link" | "ListNum" | "MacroButton" | "MergeBarcode" | "MergeField" | "MergeRec" | "MergeSeq" | "Next" | "NextIf" | "NoteRef" | "NumChars" | "NumPages" | "NumWords" | "OCX" | "Page" | "PageRef" | "Print" | "PrintDate" | "Private" | "Quote" | "RD" | "Ref" | "RevNum" | "SaveDate" | "Section" | "SectionPages" | "Seq" | "Set" | "Shape" | "SkipIf" | "StyleRef" | "Subject" | "Subscriber" | "Symbol" | "TA" | "TC" | "Template" | "Time" | "Title" | "TOA" | "TOC" | "UserAddress" | "UserInitials" | "UserName" | "XE" | "Empty" | "Others" | "Undefined";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.FieldUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Field): void;
        /**
         * Copies the field to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        copyToClipboard(): void;
        /**
         * Removes the field from the document and places it on the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cut(): void;
        /**
         * Deletes the field.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        delete(): void;
        /**
         * Clicks the field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        doClick(): void;
        /**
         * Gets the next field. Throws an `ItemNotFound` error if this field is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getNext(): Word.Field;
        /**
         * Gets the next field. If this field is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getNextOrNullObject(): Word.Field;
        /**
         * Selects the field.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: Word.SelectionMode): void;
        /**
         * Selects the field.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: "Select" | "Start" | "End"): void;
        /**
         * Replaces the field with its most recent result.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unlink(): void;
        /**
         * Updates the field.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        updateResult(): void;
        /**
         * Saves the changes made to the results of an {@link https://support.microsoft.com/office/1c34d6d6-0de3-4b5c-916a-2ff950fb629e | INCLUDETEXT field} back to the source document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        updateSource(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.FieldLoadOptions): Word.Field;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Field;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Field;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Field;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Field;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Field` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.FieldData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.FieldData;
    }
    /**
     * Contains a collection of {@link Word.Field} objects.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     *
     * Important: To learn more about which fields can be inserted, see the `Word.Range.insertField` API introduced in requirement set 1.5.
     * Support for managing fields is similar to what's available in the Word UI. However, the Word UI on the web primarily only supports fields as read-only (see {@link https://support.microsoft.com/office/d8f46094-13c3-4966-98c3-259748f3caf1 | Field codes in Word for the web}).
     * To learn more about Word UI clients that more fully support fields, see the product list at the beginning of {@link https://support.microsoft.com/office/c429bbb0-8669-48a7-bd24-bab6ba6b06bb | Insert, edit, and view fields in Word}.
     */
    export class FieldCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Field[];
        /**
         * Gets the first field in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getFirst(): Word.Field;
        /**
         * Gets the first field in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getFirstOrNullObject(): Word.Field;
        /**
         * Gets the `FieldCollection` object including the specified types of fields.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param types - An array of field types.
         */
        getByTypes(types: Word.FieldType[]): Word.FieldCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.FieldCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.FieldCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.FieldCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.FieldCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.FieldCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.FieldCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.FieldCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.FieldCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.FieldCollectionData;
    }
    /**
     * Represents a font.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class Font extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BorderUniversalCollection` object that represents all the borders for the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Returns a `FillFormat` object that contains fill formatting properties for the font used by the range of text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly fill: Word.FillFormat;
        /**
         * Returns a `GlowFormat` object that represents the glow formatting for the font used by the range of text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly glow: Word.GlowFormat;
        /**
         * Returns a `LineFormat` object that specifies the formatting for a line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly line: Word.LineFormat;
        /**
         * Returns a `ReflectionFormat` object that represents the reflection formatting for a shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly reflection: Word.ReflectionFormat;
        /**
         * Returns a `ColorFormat` object that represents the color for the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly textColor: Word.ColorFormat;
        /**
         * Returns a `ShadowFormat` object that specifies the shadow formatting for the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly textShadow: Word.ShadowFormat;
        /**
         * Returns a `ThreeDimensionalFormat` object that contains 3-dimensional (3D) effect formatting properties for the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly threeDimensionalFormat: Word.ThreeDimensionalFormat;
        /**
         * Specifies whether the font is formatted as all capital letters, which makes lowercase letters appear as uppercase letters. The possible values are as follows:
                    
                    - `true`: All the text has the **All Caps** attribute.
                    
                    - `false`: None of the text has the **All Caps** attribute.
                    
                    - `null`: Returned if some, but not all, of the text has the **All Caps** attribute.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        allCaps: boolean;
        /**
         * Specifies whether the font is bold. `true` if the font is formatted as bold, otherwise, `false`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        bold: boolean;
        /**
         * Specifies whether the font is formatted as bold in a right-to-left language document. The possible values are as follows:
                    
                    - `true`: All the text is bold.
                    
                    - `false`: None of the text is bold.
                    
                    - `null`: Returned if some, but not all, of the text is bold.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        boldBidirectional: boolean;
        /**
         * Specifies the color for the font. You can provide the value in the '#RRGGBB' format or the color name.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        color: string;
        /**
         * Specifies a `ColorIndex` value that represents the color for the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        colorIndex: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
        /**
         * Specifies the color for the `Font` object in a right-to-left language document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        colorIndexBidirectional: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
        /**
         * Specifies whether contextual alternates are enabled for the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        contextualAlternates: boolean;
        /**
         * Specifies the color to be used for diacritics for the `Font` object. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        diacriticColor: string;
        /**
         * Specifies whether Microsoft Word ignores the number of characters per line for the corresponding `Font` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        disableCharacterSpaceGrid: boolean;
        /**
         * Specifies whether the font has a double strikethrough. `true` if the font is formatted as double strikethrough text, otherwise, `false`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        doubleStrikeThrough: boolean;
        /**
         * Specifies whether the font is formatted as embossed. The possible values are as follows:
                    
                    - `true`: All the text is embossed.
                    
                    - `false`: None of the text is embossed.
                    
                    - `null`: Returned if some, but not all, of the text is embossed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        emboss: boolean;
        /**
         * Specifies an `EmphasisMark` value that represents the emphasis mark for a character or designated character string.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        emphasisMark: Word.EmphasisMark | "None" | "OverSolidCircle" | "OverComma" | "OverWhiteCircle" | "UnderSolidCircle";
        /**
         * Specifies whether the font is formatted as engraved. The possible values are as follows:
                    
                    - `true`: All the text is engraved.
                    
                    - `false`: None of the text is engraved.
                    
                    - `null`: Returned if some, but not all, of the text is engraved.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        engrave: boolean;
        /**
         * Specifies whether the font is tagged as hidden. `true` if the font is formatted as hidden text, otherwise, `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        hidden: boolean;
        /**
         * Specifies the highlight color. To set it, use a value either in the '#RRGGBB' format or the color name. To remove highlight color, set it to `null`. The returned highlight color can be in the '#RRGGBB' format, an empty string for mixed highlight colors, or `null` for no highlight color. Note: Only the default highlight colors are available in Office for Windows Desktop. These are "Yellow", "Lime", "Turquoise", "Pink", "Blue", "Red", "DarkBlue", "Teal", "Green", "Purple", "DarkRed", "Olive", "Gray", "LightGray", and "Black". When the add-in runs in Office for Windows Desktop, any other color is converted to the closest color when applied to the font.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        highlightColor: string;
        /**
         * Specifies whether the font is italicized. `true` if the font is italicized, otherwise, `false`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        italic: boolean;
        /**
         * Specifies whether the font is italicized in a right-to-left language document. The possible values are as follows:
                    
                    - `true`: All the text is italicized.
                    
                    - `false`: None of the text is italicized.
                    
                    - `null`: Returned if some, but not all, of the text is italicized.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        italicBidirectional: boolean;
        /**
         * Specifies the minimum font size for which Microsoft Word will adjust kerning automatically.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        kerning: number;
        /**
         * Specifies the ligature setting for the `Font` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        ligature: Word.Ligature | "None" | "Standard" | "Contextual" | "StandardContextual" | "Historical" | "StandardHistorical" | "ContextualHistorical" | "StandardContextualHistorical" | "Discretional" | "StandardDiscretional" | "ContextualDiscretional" | "StandardContextualDiscretional" | "HistoricalDiscretional" | "StandardHistoricalDiscretional" | "ContextualHistoricalDiscretional" | "All";
        /**
         * Specifies the name of the font.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        name: string;
        /**
         * Specifies the font used for Latin text (characters with character codes from 0 (zero) through 127).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nameAscii: string;
        /**
         * Specifies the font name in a right-to-left language document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nameBidirectional: string;
        /**
         * Specifies the East Asian font name.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nameFarEast: string;
        /**
         * Specifies the font used for characters with codes from 128 through 255.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nameOther: string;
        /**
         * Specifies the number form setting for an OpenType font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        numberForm: Word.NumberForm | "Default" | "Lining" | "OldStyle";
        /**
         * Specifies the number spacing setting for the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        numberSpacing: Word.NumberSpacing | "Default" | "Proportional" | "Tabular";
        /**
         * Specifies if the font is formatted as outlined. The possible values are as follows:
                    
                    - `true`: All the text is outlined.
                    
                    - `false`: None of the text is outlined.
                    
                    - `null`: Returned if some, but not all, of the text is outlined.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        outline: boolean;
        /**
         * Specifies the position of text (in points) relative to the base line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        position: number;
        /**
         * Specifies the scaling percentage applied to the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        scaling: number;
        /**
         * Specifies if the font is formatted as shadowed. The possible values are as follows:
                    
                    - `true`: All the text is shadowed.
                    
                    - `false`: None of the text is shadowed.
                    
                    - `null`: Returned if some, but not all, of the text is shadowed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        shadow: boolean;
        /**
         * Specifies the font size in points.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        size: number;
        /**
         * Specifies the font size in points for right-to-left text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sizeBidirectional: number;
        /**
         * Specifies whether the font is formatted as small caps, which makes lowercase letters appear as small uppercase letters. The possible values are as follows:
                    
                    - `true`: All the text has the **Small Caps** attribute.
                    
                    - `false`: None of the text has the **Small Caps** attribute.
                    
                    - `null`: Returned if some, but not all, of the text has the **Small Caps** attribute.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        smallCaps: boolean;
        /**
         * Specifies the spacing between characters.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spacing: number;
        /**
         * Specifies whether the font has a strikethrough. `true` if the font is formatted as strikethrough text, otherwise, `false`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        strikeThrough: boolean;
        /**
         * Specifies the stylistic set for the font.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        stylisticSet: Word.StylisticSet | "Default" | "Set01" | "Set02" | "Set03" | "Set04" | "Set05" | "Set06" | "Set07" | "Set08" | "Set09" | "Set10" | "Set11" | "Set12" | "Set13" | "Set14" | "Set15" | "Set16" | "Set17" | "Set18" | "Set19" | "Set20";
        /**
         * Specifies whether the font is a subscript. `true` if the font is formatted as subscript, otherwise, `false`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        subscript: boolean;
        /**
         * Specifies whether the font is a superscript. `true` if the font is formatted as superscript, otherwise, `false`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        superscript: boolean;
        /**
         * Specifies the font's underline type. `none` if the font isn't underlined.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        underline: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";
        /**
         * Specifies the color of the underline for the `Font` object. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        underlineColor: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.FontUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Font): void;
        /**
         * Decreases the font size to the next available size.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        decreaseFontSize(): void;
        /**
         * Increases the font size to the next available size.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        increaseFontSize(): void;
        /**
         * Removes manual character formatting.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        reset(): void;
        /**
         * Sets the specified font formatting as the default for the active document and all new documents based on the active template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setAsTemplateDefault(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.FontLoadOptions): Word.Font;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Font;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Font;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Font;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Font;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Font` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.FontData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.FontData;
    }
    /**
     * Represents a heading style used in a table of contents or table of figures.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class HeadingStyle extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the level for the heading style in a table of contents or table of figures. Must be a value from 1 to 9.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        level: number;
        /**
         * Specifies the name of style for a heading.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        name: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.HeadingStyleUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.HeadingStyle): void;
        /**
         * Deletes the heading style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.HeadingStyleLoadOptions): Word.HeadingStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.HeadingStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.HeadingStyle;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.HeadingStyle;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.HeadingStyle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.HeadingStyle` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.HeadingStyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.HeadingStyleData;
    }
    /**
     * Represents a collection of {@link Word.HeadingStyle} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class HeadingStyleCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.HeadingStyle[];
        /**
         * Adds a new heading style to a document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param name - The style name to be added.
         * @param level - The heading level to assign. Must be a value from 1 to 9.
         * @returns The new `HeadingStyle` object that was added to the collection.
         */
        add(name: string, level: number): Word.HeadingStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.HeadingStyleCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.HeadingStyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.HeadingStyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.HeadingStyleCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.HeadingStyleCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.HeadingStyleCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.HeadingStyleCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.HeadingStyleCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.HeadingStyleCollectionData;
    }
    /**
     * Represents a hyperlink in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class Hyperlink extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `Range` object that represents the portion of the document that's contained within the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Specifies the address (for example, a file name or URL) of the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        address: string;
        /**
         * Specifies the text string for the hyperlink's subject line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        emailSubject: string;
        /**
         * Returns `true` if extra information is required to resolve the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly isExtraInfoRequired: boolean;
        /**
         * Returns the name of the `Hyperlink` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly name: string;
        /**
         * Specifies the text that appears as a ScreenTip when the mouse pointer is positioned over the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        screenTip: string;
        /**
         * Specifies a named location in the destination of the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        subAddress: string;
        /**
         * Specifies the name of the frame or window in which to load the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        target: string;
        /**
         * Specifies the hyperlink's visible text in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textToDisplay: string;
        /**
         * Returns the hyperlink type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly type: Word.HyperlinkType | "Range" | "Shape" | "InlineShape";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.HyperlinkUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Hyperlink): void;
        /**
         * Creates a shortcut to the document or hyperlink and adds it to the **Favorites** folder.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        addToFavorites(): void;
        /**
         * Creates a new document linked to the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param fileName - The name of the file.
         * @param editNow - `true` to start editing now.
         * @param overwrite - `true` to overwrite if there's another file with the same name.
         */
        createNewDocument(fileName: string, editNow: boolean, overwrite: boolean): void;
        /**
         * Deletes the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.HyperlinkLoadOptions): Word.Hyperlink;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Hyperlink;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Hyperlink;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Hyperlink;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Hyperlink;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Hyperlink` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.HyperlinkData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.HyperlinkData;
    }
    /**
     * Contains a collection of {@link Word.Hyperlink} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class HyperlinkCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Hyperlink[];
        /**
         * Returns a `Hyperlink` object that represents a new hyperlink added to a range, selection, or document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param anchor - The range to which the hyperlink is added.
         * @param options - Optional. The options to further configure the new hyperlink.
         */
        add(anchor: Word.Range, options?: Word.HyperlinkAddOptions): Word.Hyperlink;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.HyperlinkCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.HyperlinkCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.HyperlinkCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.HyperlinkCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.HyperlinkCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.HyperlinkCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.HyperlinkCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.HyperlinkCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.HyperlinkCollectionData;
    }
    /**
     * Specifies the options for adding to a {@link Word.HyperlinkCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface HyperlinkAddOptions {
        /**
         * If provided, specifies the address (e.g., URL or file path) of the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        address?: string;
        /**
         * If provided, specifies the text that appears as a tooltip.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        screenTip?: string;
        /**
         * If provided, specifies the location within the file or document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        subAddress?: string;
        /**
         * If provided, specifies the name of the frame or window in which to load the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        target?: string;
        /**
         * If provided, specifies the visible text of the hyperlink.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textToDisplay?: string;
    }
    /**
     * Represents an inline picture.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class InlinePicture extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the parent paragraph that contains the inline image.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         */
        readonly paragraph: Word.Paragraph;
        /**
         * Gets the content control that contains the inline image. Throws an `ItemNotFound` error if there isn't a parent content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly parentContentControl: Word.ContentControl;
        /**
         * Gets the content control that contains the inline image. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentContentControlOrNullObject: Word.ContentControl;
        /**
         * Gets the table that contains the inline image. Throws an `ItemNotFound` error if it isn't contained in a table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTable: Word.Table;
        /**
         * Gets the table cell that contains the inline image. Throws an `ItemNotFound` error if it isn't contained in a table cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCell: Word.TableCell;
        /**
         * Gets the table cell that contains the inline image. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCellOrNullObject: Word.TableCell;
        /**
         * Gets the table that contains the inline image. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableOrNullObject: Word.Table;
        /**
         * Specifies a string that represents the alternative text associated with the inline image.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        altTextDescription: string;
        /**
         * Specifies a string that contains the title for the inline image.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        altTextTitle: string;
        /**
         * Specifies a number that describes the height of the inline image.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        height: number;
        /**
         * Specifies a hyperlink on the image. Use a '#' to separate the address part from the optional location part.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        hyperlink: string;
        /**
         * Gets the format of the inline image.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        readonly imageFormat: Word.ImageFormat | "Unsupported" | "Undefined" | "Bmp" | "Jpeg" | "Gif" | "Tiff" | "Png" | "Icon" | "Exif" | "Wmf" | "Emf" | "Pict" | "Pdf" | "Svg";
        /**
         * Specifies a value that indicates whether the inline image retains its original proportions when you resize it.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        lockAspectRatio: boolean;
        /**
         * Specifies a number that describes the width of the inline image.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        width: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.InlinePictureUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.InlinePicture): void;
        /**
         * Deletes the inline picture from the document.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         */
        delete(): void;
        /**
         * Gets the Base64-encoded string representation of the inline image.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getBase64ImageSrc(): OfficeExtension.ClientResult<string>;
        /**
         * Gets the next inline image. Throws an `ItemNotFound` error if this inline image is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNext(): Word.InlinePicture;
        /**
         * Gets the next inline image. If this inline image is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNextOrNullObject(): Word.InlinePicture;
        /**
         * Gets the picture, or the starting or ending point of the picture, as a range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rangeLocation - Optional. The range location must be `whole`, `start`, or `end`.
         */
        getRange(rangeLocation?: Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | "Whole" | "Start" | "End"): Word.Range;
        /**
         * Inserts a break at the specified location in the main document.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param breakType - The break type to add.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertBreak(breakType: Word.BreakType | "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): void;
        /**
         * Wraps the inline picture with a rich text content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        insertContentControl(): Word.ContentControl;
        /**
         * Inserts a document at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * Insertion isn't supported if the document being inserted contains an ActiveX control (likely in a form field). Consider replacing such a form field with a content control or other option appropriate for your scenario.
         *
         * @param base64File - The Base64-encoded content of a .docx file.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): Word.Range;
        /**
         * Inserts HTML at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param html - The HTML to be inserted.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertHtml(html: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): Word.Range;
        /**
         * Inserts an inline picture at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param base64EncodedImage - The Base64-encoded image to be inserted.
         * @param insertLocation - The value must be `replace`, `before`, or `after`.
         */
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.before | Word.InsertLocation.after | "Replace" | "Before" | "After"): Word.InlinePicture;
        /**
         * Inserts OOXML at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param ooxml - The OOXML to be inserted.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): Word.Range;
        /**
         * Inserts a paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param paragraphText - The paragraph text to be inserted.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): Word.Paragraph;
        /**
         * Inserts text at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param text - Text to be inserted.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertText(text: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): Word.Range;
        /**
         * Selects the inline picture. This causes Word to scroll to the selection.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: Word.SelectionMode): void;
        /**
         * Selects the inline picture. This causes Word to scroll to the selection.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: "Select" | "Start" | "End"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.InlinePictureLoadOptions): Word.InlinePicture;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.InlinePicture;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.InlinePicture;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.InlinePicture;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.InlinePicture;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.InlinePicture` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.InlinePictureData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.InlinePictureData;
    }
    /**
     * Contains a collection of {@link Word.InlinePicture} objects.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class InlinePictureCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.InlinePicture[];
        /**
         * Gets the first inline image in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.InlinePicture;
        /**
         * Gets the first inline image in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.InlinePicture;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.InlinePictureCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.InlinePictureCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.InlinePictureCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.InlinePictureCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.InlinePictureCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.InlinePictureCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.InlinePictureCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.InlinePictureCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.InlinePictureCollectionData;
    }
    /**
     * Represents the linking characteristics for an OLE object or picture.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class LinkFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies if the link is updated automatically when the container file is opened or when the source file is changed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isAutoUpdated: boolean;
        /**
         * Specifies if a `Field`, `InlineShape`, or `Shape` object is locked to prevent automatic updating.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isLocked: boolean;
        /**
         * Specifies if the linked picture is saved with the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isPictureSavedWithDocument: boolean;
        /**
         * Specifies the path and name of the source file for the linked OLE object, picture, or field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sourceFullName: string;
        /**
         * Gets the name of the source file for the linked OLE object, picture, or field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly sourceName: string;
        /**
         * Gets the path of the source file for the linked OLE object, picture, or field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly sourcePath: string;
        /**
         * Gets the link type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly type: Word.LinkType | "Ole" | "Picture" | "Text" | "Reference" | "Include" | "Import" | "Dde" | "DdeAuto" | "Chart";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.LinkFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.LinkFormat): void;
        /**
         * Breaks the link between the source file and the OLE object, picture, or linked field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        breakLink(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.LinkFormatLoadOptions): Word.LinkFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.LinkFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.LinkFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.LinkFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.LinkFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.LinkFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.LinkFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.LinkFormatData;
    }
    /**
     * Contains a collection of {@link Word.Paragraph} objects.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class List extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets paragraphs in the list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly paragraphs: Word.ParagraphCollection;
        /**
         * Gets the list's ID.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly id: number;
        /**
         * Checks whether each of the 9 levels exists in the list. `true` indicates the level exists, which means there's at least one list item at that level.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly levelExistences: boolean[];
        /**
         * Gets all 9 level types in the list. Each type can be `bullet`, `number`, or `picture`.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly levelTypes: Word.ListLevelType[];
        /**
         * Gets the font of the bullet, number, or picture at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         *
         * @param level - The level in the list.
         */
        getLevelFont(level: number): Word.Font;
        /**
         * Gets the paragraphs that occur at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         */
        getLevelParagraphs(level: number): Word.ParagraphCollection;
        /**
         * Gets the Base64-encoded string representation of the picture at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         *
         * @param level - The level in the list.
         */
        getLevelPicture(level: number): OfficeExtension.ClientResult<string>;
        /**
         * Gets the bullet, number, or picture at the specified level as a string.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         */
        getLevelString(level: number): OfficeExtension.ClientResult<string>;
        /**
         * Inserts a paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param paragraphText - The paragraph text to be inserted.
         * @param insertLocation - The value must be `start`, `end`, `before`, or `after`.
         */
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | Word.InsertLocation.before | Word.InsertLocation.after | "Start" | "End" | "Before" | "After"): Word.Paragraph;
        /**
         * Resets the font of the bullet, number, or picture at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         *
         * @param level - The level in the list.
         * @param resetFontName - Optional. Indicates whether to reset the font name. Default is `false` that indicates the font name remains unchanged.
         */
        resetLevelFont(level: number, resetFontName?: boolean): void;
        /**
         * Sets the alignment of the bullet, number, or picture at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         * @param alignment - The level alignment that must be `left`, `centered`, or `right`.
         */
        setLevelAlignment(level: number, alignment: Word.Alignment): void;
        /**
         * Sets the alignment of the bullet, number, or picture at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         * @param alignment - The level alignment that must be `left`, `centered`, or `right`.
         */
        setLevelAlignment(level: number, alignment: "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"): void;
        /**
         * Sets the bullet format at the specified level in the list. If the bullet is `custom`, the `charCode` is required.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         * @param listBullet - The bullet.
         * @param charCode - Optional. The bullet character's code value. Used only if the bullet is `custom`.
         * @param fontName - Optional. The bullet's font name. Used only if the bullet is `custom`.
         */
        setLevelBullet(level: number, listBullet: Word.ListBullet, charCode?: number, fontName?: string): void;
        /**
         * Sets the bullet format at the specified level in the list. If the bullet is `custom`, the `charCode` is required.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         * @param listBullet - The bullet.
         * @param charCode - Optional. The bullet character's code value. Used only if the bullet is `custom`.
         * @param fontName - Optional. The bullet's font name. Used only if the bullet is `custom`.
         */
        setLevelBullet(level: number, listBullet: "Custom" | "Solid" | "Hollow" | "Square" | "Diamonds" | "Arrow" | "Checkmark", charCode?: number, fontName?: string): void;
        /**
         * Sets the two indents of the specified level in the list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         * @param textIndent - The text indent in points. It is the same as paragraph left indent.
         * @param bulletNumberPictureIndent - The relative indent, in points, of the bullet, number, or picture. It is the same as paragraph first line indent.
         */
        setLevelIndents(level: number, textIndent: number, bulletNumberPictureIndent: number): void;
        /**
         * Sets the numbering format at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         * @param listNumbering - The ordinal format.
         * @param formatString - Optional. The numbering string format defined as an array of strings or integers. Each integer is a level of number type that is higher than or equal to this level. For example, an array of ["(", level - 1, ".", level, ")"] can define the format of "(2.c)", where 2 is the parent's item number and c is this level's item number.
         */
        setLevelNumbering(level: number, listNumbering: Word.ListNumbering, formatString?: Array<string | number>): void;
        /**
         * Sets the numbering format at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         * @param listNumbering - The ordinal format.
         * @param formatString - Optional. The numbering string format defined as an array of strings or integers. Each integer is a level of number type that is higher than or equal to this level. For example, an array of ["(", level - 1, ".", level, ")"] can define the format of "(2.c)", where 2 is the parent's item number and c is this level's item number.
         */
        setLevelNumbering(level: number, listNumbering: "None" | "Arabic" | "UpperRoman" | "LowerRoman" | "UpperLetter" | "LowerLetter", formatString?: Array<string | number>): void;
        /**
         * Sets the picture at the specified level in the list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         *
         * @param level - The level in the list.
         * @param base64EncodedImage - Optional. The Base64-encoded image to be set. If not given, the default picture is set.
         */
        setLevelPicture(level: number, base64EncodedImage?: string): void;
        /**
         * Sets the starting number at the specified level in the list. Default value is 1.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param level - The level in the list.
         * @param startingNumber - The number to start with.
         */
        setLevelStartingNumber(level: number, startingNumber: number): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ListLoadOptions): Word.List;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.List;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.List;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.List;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.List;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.List` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ListData;
    }
    /**
     * Contains a collection of {@link Word.List} objects.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class ListCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.List[];
        /**
         * Gets a list by its identifier. Throws an `ItemNotFound` error if there isn't a list with the identifier in this collection.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param id - A list identifier.
         */
        getById(id: number): Word.List;
        /**
         * Gets a list by its identifier. If there isn't a list with the identifier in this collection, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param id - A list identifier.
         */
        getByIdOrNullObject(id: number): Word.List;
        /**
         * Gets the first list in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.List;
        /**
         * Gets the first list in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.List;
        /**
         * Gets a `List` object by its ID.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param id - The list's ID.
         */
        getItem(id: number): Word.List;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ListCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ListCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ListCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ListCollectionData;
    }
    /**
     * Represents the paragraph list item format.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class ListItem extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the level of the item in the list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        level: number;
        /**
         * Gets the list item bullet, number, or picture as a string.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly listString: string;
        /**
         * Gets the list item order number in relation to its siblings.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly siblingIndex: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ListItemUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ListItem): void;
        /**
         * Gets the list item parent, or the closest ancestor if the parent doesn't exist. Throws an `ItemNotFound` error if the list item has no ancestor.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param parentOnly - Optional. Specifies only the list item's parent will be returned. The default is `false` that specifies to get the lowest ancestor.
         */
        getAncestor(parentOnly?: boolean): Word.Paragraph;
        /**
         * Gets the list item parent, or the closest ancestor if the parent doesn't exist. If the list item has no ancestor, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param parentOnly - Optional. Specifies only the list item's parent will be returned. The default is `false` that specifies to get the lowest ancestor.
         */
        getAncestorOrNullObject(parentOnly?: boolean): Word.Paragraph;
        /**
         * Gets all descendant list items of the list item.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param directChildrenOnly - Optional. Specifies only the list item's direct children will be returned. The default is `false` that indicates to get all descendant items.
         */
        getDescendants(directChildrenOnly?: boolean): Word.ParagraphCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ListItemLoadOptions): Word.ListItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ListItem;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListItem;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListItem;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListItem` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListItemData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ListItemData;
    }
    /**
     * Represents a list level.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    export class ListLevel extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `Font` object that represents the character formatting of the `ListLevel` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        readonly font: Word.Font;
        /**
         * Specifies the horizontal alignment of the list level. The value can be `left`, `centered`, or `right`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
        /**
         * Specifies the name of the style that's linked to the `ListLevel` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        linkedStyle: string;
        /**
         * Specifies the number format for the list level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        numberFormat: string;
        /**
         * Specifies the position (in points) of the number or bullet for the `ListLevel` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        numberPosition: number;
        /**
         * Specifies the number style for the `ListLevel` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        numberStyle: Word.ListBuiltInNumberStyle | "None" | "Arabic" | "UpperRoman" | "LowerRoman" | "UpperLetter" | "LowerLetter" | "Ordinal" | "CardinalText" | "OrdinalText" | "Kanji" | "KanjiDigit" | "AiueoHalfWidth" | "IrohaHalfWidth" | "ArabicFullWidth" | "KanjiTraditional" | "KanjiTraditional2" | "NumberInCircle" | "Aiueo" | "Iroha" | "ArabicLZ" | "Bullet" | "Ganada" | "Chosung" | "GBNum1" | "GBNum2" | "GBNum3" | "GBNum4" | "Zodiac1" | "Zodiac2" | "Zodiac3" | "TradChinNum1" | "TradChinNum2" | "TradChinNum3" | "TradChinNum4" | "SimpChinNum1" | "SimpChinNum2" | "SimpChinNum3" | "SimpChinNum4" | "HanjaRead" | "HanjaReadDigit" | "Hangul" | "Hanja" | "Hebrew1" | "Arabic1" | "Hebrew2" | "Arabic2" | "HindiLetter1" | "HindiLetter2" | "HindiArabic" | "HindiCardinalText" | "ThaiLetter" | "ThaiArabic" | "ThaiCardinalText" | "VietCardinalText" | "LowercaseRussian" | "UppercaseRussian" | "LowercaseGreek" | "UppercaseGreek" | "ArabicLZ2" | "ArabicLZ3" | "ArabicLZ4" | "LowercaseTurkish" | "UppercaseTurkish" | "LowercaseBulgarian" | "UppercaseBulgarian" | "PictureBullet" | "Legal" | "LegalLZ";
        /**
         * Specifies the list level that must appear before it restarts numbering at 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        resetOnHigher: number;
        /**
         * Specifies the starting number for the `ListLevel` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        startAt: number;
        /**
         * Specifies the tab position for the `ListLevel` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        tabPosition: number;
        /**
         * Specifies the position (in points) for the second line of wrapping text for the `ListLevel` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        textPosition: number;
        /**
         * Specifies the character inserted after the number for the list level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        trailingCharacter: Word.TrailingCharacter | "TrailingTab" | "TrailingSpace" | "TrailingNone";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ListLevelUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ListLevel): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ListLevelLoadOptions): Word.ListLevel;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListLevel;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ListLevel;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListLevel;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListLevel;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListLevel` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListLevelData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ListLevelData;
    }
    /**
     * Contains a collection of {@link Word.ListLevel} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    export class ListLevelCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.ListLevel[];
        /**
         * Gets the first list level in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        getFirst(): Word.ListLevel;
        /**
         * Gets the first list level in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        getFirstOrNullObject(): Word.ListLevel;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ListLevelCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ListLevelCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListLevelCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ListLevelCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListLevelCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListLevelCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListLevelCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListLevelCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ListLevelCollectionData;
    }
    /**
     * Represents a list template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    export class ListTemplate extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `ListLevelCollection` object that represents all the levels for the list template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        readonly listLevels: Word.ListLevelCollection;
        /**
         * Specifies the name of the list template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        name: string;
        /**
         * Specifies whether the list template is outline numbered.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        outlineNumbered: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ListTemplateUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ListTemplate): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ListTemplateLoadOptions): Word.ListTemplate;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListTemplate;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ListTemplate;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListTemplate;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListTemplate;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListTemplate` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListTemplateData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ListTemplateData;
    }
    /**
     * Represents a footnote or endnote.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export class NoteItem extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Represents the body object of the note item. It's the portion of the text within the footnote or endnote.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly body: Word.Body;
        /**
         * Represents a footnote or endnote reference in the main document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly reference: Word.Range;
        /**
         * Represents the note item type: footnote or endnote.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly type: Word.NoteItemType | "Footnote" | "Endnote";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.NoteItemUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.NoteItem): void;
        /**
         * Deletes the note item.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        delete(): void;
        /**
         * Gets the next note item of the same type. Throws an `ItemNotFound` error if this note item is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        getNext(): Word.NoteItem;
        /**
         * Gets the next note item of the same type. If this note item is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        getNextOrNullObject(): Word.NoteItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.NoteItemLoadOptions): Word.NoteItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.NoteItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.NoteItem;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.NoteItem;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.NoteItem;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.NoteItem` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.NoteItemData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.NoteItemData;
    }
    /**
     * Contains a collection of {@link Word.NoteItem} objects.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export class NoteItemCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.NoteItem[];
        /**
         * Gets the first note item in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        getFirst(): Word.NoteItem;
        /**
         * Gets the first note item in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        getFirstOrNullObject(): Word.NoteItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.NoteItemCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.NoteItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.NoteItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.NoteItemCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.NoteItemCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.NoteItemCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.NoteItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.NoteItemCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.NoteItemCollectionData;
    }
    /**
     * Represents the OLE characteristics (other than linking) for an OLE object, ActiveX control, or field.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class OleFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the class type for the specified OLE object, picture, or field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        classType: string;
        /**
         * Specifies the icon that is used when the `displayAsIcon` property is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iconIndex: number;
        /**
         * Specifies the text displayed below the icon for the OLE object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iconLabel: string;
        /**
         * Specifies the program file in which the icon for the OLE object is stored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iconName: string;
        /**
         * Gets the path of the file in which the icon for the OLE object is stored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly iconPath: string;
        /**
         * Gets whether the specified object is displayed as an icon.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isDisplayedAsIcon: boolean;
        /**
         * Specifies whether formatting done in Microsoft Word to the linked OLE object is preserved.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isFormattingPreservedOnUpdate: boolean;
        /**
         * Gets a string that's used to identify the portion of the source file that's being linked.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly label: string;
        /**
         * Gets the programmatic identifier (`ProgId`) for the specified OLE object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly progId: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.OleFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.OleFormat): void;
        /**
         * Activates the `OleFormat` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        activate(): void;
        /**
         * Sets the Windows registry value that determines the default application used to activate the specified OLE object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param classType - The class type to activate as.
         */
        activateAs(classType: string): void;
        /**
         * Requests that the OLE object perform one of its available verbs.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param verbIndex - Optional. The index of the verb to perform.
         */
        doVerb(verbIndex: Word.OleVerb): void;
        /**
         * Requests that the OLE object perform one of its available verbs.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param verbIndex - Optional. The index of the verb to perform.
         */
        doVerb(verbIndex: "Primary" | "Show" | "Open" | "Hide" | "UiActivate" | "InPlaceActivate" | "DiscardUndoState"): void;
        /**
         * Opens the OLE object for editing in the application it was created in.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        edit(): void;
        /**
         * Opens the `OleFormat` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        open(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.OleFormatLoadOptions): Word.OleFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.OleFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.OleFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.OleFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.OleFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.OleFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.OleFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.OleFormatData;
    }
    /**
     * Represents a page in the document. `Page` objects manage the page layout and content.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class Page extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `BreakCollection` object that represents the breaks on the page.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly breaks: Word.BreakCollection;
        /**
         * Gets the height, in points, of the paper defined in the Page Setup dialog box.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly height: number;
        /**
         * Gets the index of the page. The page index is 1-based and independent of the user's custom page numbering.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly index: number;
        /**
         * Gets the width, in points, of the paper defined in the Page Setup dialog box.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly width: number;
        /**
         * Gets the next page in the pane. Throws an `ItemNotFound` error if this page is the last one.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getNext(): Word.Page;
        /**
         * Gets the next page. If this page is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getNextOrNullObject(): Word.Page;
        /**
         * Gets the whole page, or the starting or ending point of the page, as a range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param rangeLocation - Optional. The range location must be `whole`, `start`, or `end`.
         */
        getRange(rangeLocation?: Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | "Whole" | "Start" | "End"): Word.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.PageLoadOptions): Word.Page;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Page;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Page;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Page;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Page;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Page` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.PageData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.PageData;
    }
    /**
     * Represents the collection of {@link Word.Page} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class PageCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Page[];
        /**
         * Gets the first page in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getFirst(): Word.Page;
        /**
         * Gets the first page in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getFirstOrNullObject(): Word.Page;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.PageCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.PageCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.PageCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.PageCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.PageCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.PageCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.PageCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.PageCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.PageCollectionData;
    }
    /**
     * Represents a window pane. The `Pane` object is a member of the pane collection. The pane collection includes all the window panes for a single window.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class Pane extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the collection of pages in the pane.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly pages: Word.PageCollection;
        /**
         * Gets the `PageCollection` shown in the viewport of the pane. If a page is partially visible in the pane, the whole page is returned.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly pagesEnclosingViewport: Word.PageCollection;
        /**
         * Returns a `Selection` object that represents the current selection in the pane.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly selection: Word.Selection;
        /**
         * Gets the next pane in the window. Throws an `ItemNotFound` error if this pane is the last one.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getNext(): Word.Pane;
        /**
         * Gets the next pane. If this pane is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getNextOrNullObject(): Word.Pane;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.PaneLoadOptions): Word.Pane;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Pane;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Pane;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Pane;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Pane;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Pane` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.PaneData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.PaneData;
    }
    /**
     * Represents the collection of {@link Word.Pane} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class PaneCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Pane[];
        /**
         * Gets the first pane in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getFirst(): Word.Pane;
        /**
         * Gets the first pane in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getFirstOrNullObject(): Word.Pane;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.PaneCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.PaneCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.PaneCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.PaneCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.PaneCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.PaneCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.PaneCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.PaneCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.PaneCollectionData;
    }
    /**
     * The options that define whether to save changes before closing and whether to route the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface WindowCloseOptions {
        /**
         * If provided, specifies whether to route the document to the next recipient. If the document doesn't have a routing slip attached, this property is ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        routeDocument?: boolean;
        /**
         * If provided, specifies the save action for the document. For available values, see {@link Word.SaveConfiguration}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        saveChanges?: Word.SaveConfiguration | "DoNotSaveChanges" | "SaveChanges" | "PromptToSaveChanges";
    }
    /**
     * The options that scrolls a window or pane by the specified number of units defined by the calling method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface WindowScrollOptions {
        /**
         * If provided, specifies the number of units to scroll the window down.
                    If `down` and `up` are both provided, the contents of the window are scrolled by the difference of the property values. For example, if `down` is 3 and `up` is 6, the contents are scrolled up three units.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        down?: number;
        /**
         * If provided, specifies the number of screens to scroll the window to the left.
                    If `left` and `right` are both provided, the contents of the window are scrolled by the difference of the property values. For example, if `left` is 3 and `right` is 6, the contents are scrolled to the right three screens.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        left?: number;
        /**
         * If provided, specifies the number of screens to scroll the window to the right.
                    If `left` and `right` are both provided, the contents of the window are scrolled by the difference of the property values. For example, if `left` is 3 and `right` is 6, the contents are scrolled to the right three screens.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        right?: number;
        /**
         * If provided, specifies the number of units to scroll the window up.
                    If `down` and `up` are both provided, the contents of the window are scrolled by the difference of the property values. For example, if `down` is 3 and `up` is 6, the contents are scrolled up three units.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        up?: number;
    }
    /**
     * The options for scrolling through the specified pane or window page by page.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface WindowPageScrollOptions {
        /**
         * If provided, specifies the number of pages to scroll the window down.
                    If `down` and `up` are both provided, the contents of the window are scrolled by the difference of the property values. For example, if `down` is 3 and `up` is 6, the contents are scrolled up three pages.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        down?: number;
        /**
         * If provided, specifies the number of pages to scroll the window up.
                    If `down` and `up` are both provided, the contents of the window are scrolled by the difference of the property values. For example, if `down` is 3 and `up` is 6, the contents are scrolled up three pages.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        up?: number;
    }
    /**
     * Represents the window that displays the document. A window can be split to contain multiple reading panes.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class Window extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the active pane in the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly activePane: Word.Pane;
        /**
         * Gets the next document window in the collection of open document windows.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly next: Word.Window;
        /**
         * Gets the collection of panes in the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly panes: Word.PaneCollection;
        /**
         * Gets the previous document window in the collection open document windows.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly previous: Word.Window;
        /**
         * Gets the `View` object that represents the view for the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly view: Word.View;
        /**
         * Specifies whether rulers are displayed for the window or pane.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areRulersDisplayed: boolean;
        /**
         * Specifies whether comments, footnotes, endnotes, and hyperlinks are displayed as tips.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areScreenTipsDisplayed: boolean;
        /**
         * Specifies whether thumbnail images of the pages in a document are displayed along the left side of the Microsoft Word document window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areThumbnailsDisplayed: boolean;
        /**
         * Specifies the caption text for the window that is displayed in the title bar of the document or application window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        caption: string;
        /**
         * Specifies the height of the window (in points).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly height: number;
        /**
         * Specifies the horizontal scroll position as a percentage of the document width.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        horizontalPercentScrolled: number;
        /**
         * Specifies the default start-up mode for the Japanese Input Method Editor (IME).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        imeMode: Word.ImeMode | "NoControl" | "On" | "Off" | "Hiragana" | "Katakana" | "KatakanaHalf" | "AlphaFull" | "Alpha" | "HangulFull" | "Hangul";
        /**
         * Gets the position of an item in a collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly index: number;
        /**
         * Specifies whether the window is active.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isActive: boolean;
        /**
         * Specifies whether the document map is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isDocumentMapVisible: boolean;
        /**
         * Specifies whether the email message header is visible in the document window. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isEnvelopeVisible: boolean;
        /**
         * Specifies whether a horizontal scroll bar is displayed for the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isHorizontalScrollBarDisplayed: boolean;
        /**
         * Specifies whether the vertical scroll bar appears on the left side of the document window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isLeftScrollBarDisplayed: boolean;
        /**
         * Specifies whether the vertical ruler appears on the right side of the document window in print layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isRightRulerDisplayed: boolean;
        /**
         * Specifies whether the window is split into multiple panes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isSplit: boolean;
        /**
         * Specifies whether a vertical ruler is displayed for the window or pane.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isVerticalRulerDisplayed: boolean;
        /**
         * Specifies whether a vertical scroll bar is displayed for the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isVerticalScrollBarDisplayed: boolean;
        /**
         * Specifies whether the window is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isVisible: boolean;
        /**
         * Specifies the horizontal position of the window, measured in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly left: number;
        /**
         * Specifies how Microsoft Word displays source documents after a compare and merge process.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        showSourceDocuments: Word.ShowSourceDocuments | "None" | "Original" | "Revised" | "Both";
        /**
         * Specifies the vertical split percentage for the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        splitVertical: number;
        /**
         * Specifies the width of the style area in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        styleAreaWidth: number;
        /**
         * Specifies the vertical position of the document window, in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly top: number;
        /**
         * Gets the window type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly type: Word.WindowType | "Document" | "Template";
        /**
         * Gets the height (in points) of the active working area in the document window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly usableHeight: number;
        /**
         * Gets the width (in points) of the active working area in the document window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly usableWidth: number;
        /**
         * Specifies the vertical scroll position as a percentage of the document length.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        verticalPercentScrolled: number;
        /**
         * Specifies the width of the document window, in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly width: number;
        /**
         * Gets an integer that represents the position of the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly windowNumber: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.WindowUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Window): void;
        /**
         * Activates the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        activate(): void;
        /**
         * Closes the window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. The options that define whether to save changes before closing and whether to route the document.
         */
        close(options?: Word.WindowCloseOptions): void;
        /**
         * Scrolls the window by the specified number of screens.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. The options for scrolling the window by the specified number of screens. If no options are specified, the window is scrolled down one screen.
         */
        largeScroll(options?: Word.WindowScrollOptions): void;
        /**
         * Scrolls through the window page by page.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. The options for scrolling through the window page by page.
         */
        pageScroll(options?: Word.WindowPageScrollOptions): void;
        /**
         * Sets the focus of the document window to the body of an email message.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        setFocus(): void;
        /**
         * Scrolls the window by the specified number of lines. A "line" corresponds to the distance scrolled by clicking the scroll arrow on the scroll bar once.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. The options for scrolling the window by the specified number of lines. If no options are specified, the window is scrolled down by one line.
         */
        smallScroll(options?: Word.WindowScrollOptions): void;
        /**
         * Shows or hides the ribbon.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        toggleRibbon(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.WindowLoadOptions): Word.Window;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Window;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Window;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Window;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Window;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Window` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.WindowData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.WindowData;
    }
    /**
     * Represents the collection of {@link Word.Window} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class WindowCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Window[];
        /**
         * Gets the first window in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getFirst(): Word.Window;
        /**
         * Gets the first window in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getFirstOrNullObject(): Word.Window;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.WindowCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.WindowCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.WindowCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.WindowCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.WindowCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.WindowCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.WindowCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.WindowCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.WindowCollectionData;
    }
    /**
     * Represents a single paragraph in a selection, range, content control, or document body.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class Paragraph extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BorderUniversalCollection` object that represents all the borders for the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Gets the collection of `ContentControl` objects in the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly contentControls: Word.ContentControlCollection;
        /**
         * Gets the collection of endnotes in the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly endnotes: Word.NoteItemCollection;
        /**
         * Gets the collection of fields in the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly fields: Word.FieldCollection;
        /**
         * Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly font: Word.Font;
        /**
         * Gets the collection of footnotes in the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly footnotes: Word.NoteItemCollection;
        /**
         * Gets the collection of `InlinePicture` objects in the paragraph. The collection doesn't include floating images.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly inlinePictures: Word.InlinePictureCollection;
        /**
         * Gets the List to which this paragraph belongs. Throws an `ItemNotFound` error if the paragraph isn't in a list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly list: Word.List;
        /**
         * Gets the ListItem for the paragraph. Throws an `ItemNotFound` error if the paragraph isn't part of a list.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly listItem: Word.ListItem;
        /**
         * Gets the ListItem for the paragraph. If the paragraph isn't part of a list, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly listItemOrNullObject: Word.ListItem;
        /**
         * Gets the List to which this paragraph belongs. If the paragraph isn't in a list, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly listOrNullObject: Word.List;
        /**
         * Gets the parent body of the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentBody: Word.Body;
        /**
         * Gets the content control that contains the paragraph. Throws an `ItemNotFound` error if there isn't a parent content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly parentContentControl: Word.ContentControl;
        /**
         * Gets the content control that contains the paragraph. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentContentControlOrNullObject: Word.ContentControl;
        /**
         * Gets the table that contains the paragraph. Throws an `ItemNotFound` error if it isn't contained in a table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTable: Word.Table;
        /**
         * Gets the table cell that contains the paragraph. Throws an `ItemNotFound` error if it isn't contained in a table cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCell: Word.TableCell;
        /**
         * Gets the table cell that contains the paragraph. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCellOrNullObject: Word.TableCell;
        /**
         * Gets the table that contains the paragraph. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableOrNullObject: Word.Table;
        /**
         * Returns a `ShadingUniversal` object that refers to the shading formatting for the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Gets the collection of `Shape` objects anchored in the paragraph, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * Important: Be aware that with time, additional types of shapes may be supported. Therefore, your add-in should request and handle specific types of shapes.
         */
        readonly shapes: Word.ShapeCollection;
        /**
         * Specifies the alignment for a paragraph. The value can be `left`, `centered`, `right`, or `justified`.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
        /**
         * Specifies the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        firstLineIndent: number;
        /**
         * Indicates the paragraph is the last one inside its parent body.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly isLastParagraph: boolean;
        /**
         * Checks whether the paragraph is a list item.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly isListItem: boolean;
        /**
         * Specifies the left indent value, in points, for the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        leftIndent: number;
        /**
         * Specifies the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        lineSpacing: number;
        /**
         * Specifies the amount of spacing, in grid lines, after the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        lineUnitAfter: number;
        /**
         * Specifies the amount of spacing, in grid lines, before the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        lineUnitBefore: number;
        /**
         * Specifies the outline level for the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        outlineLevel: number;
        /**
         * Specifies the right indent value, in points, for the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        rightIndent: number;
        /**
         * Specifies the spacing, in points, after the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        spaceAfter: number;
        /**
         * Specifies the spacing, in points, before the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        spaceBefore: number;
        /**
         * Specifies the style name for the paragraph. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        style: string;
        /**
         * Specifies the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleBuiltIn: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
        /**
         * Gets the level of the paragraph's table. It returns 0 if the paragraph isn't in a table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly tableNestingLevel: number;
        /**
         * Gets the text of the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly text: string;
        /**
         * Gets a string that represents the paragraph identifier in the current session. ID is in standard 8-4-4-4-12 GUID format without curly braces and differs across sessions and coauthors.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        readonly uniqueLocalId: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Paragraph): void;
        /**
         * Lets the paragraph join an existing list at the specified level. Fails if the paragraph cannot join the list or if the paragraph is already a list item.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param listId - The ID of an existing list.
         * @param level - The level in the list.
         */
        attachToList(listId: number, level: number): Word.List;
        /**
         * Clears the contents of the `Paragraph` object. The user can perform the undo operation on the cleared content.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        clear(): void;
        /**
         * Removes any spacing before the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        closeUp(): void;
        /**
         * Deletes the paragraph and its content from the document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        delete(): void;
        /**
         * Moves this paragraph out of its list, if the paragraph is a list item.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        detachFromList(): void;
        /**
         * Gets annotations set on this `Paragraph` object.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * Important: This API requires a Microsoft 365 subscription in order to work properly because of an underlying service's requirement. For more about this, see {@link https://github.com/OfficeDev/office-js/issues/4953 | GitHub issue 4953}.
         */
        getAnnotations(): Word.AnnotationCollection;
        /**
         * Gets comments associated with the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getComments(): Word.CommentCollection;
        /**
         * Gets the currently supported content controls in the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Important: If specific types are provided in the options parameter, only content controls of supported types are returned.
         * Be aware that an exception will be thrown on using methods of a generic {@link Word.ContentControl} that aren't relevant for the specific type.
         * With time, additional types of content controls may be supported. Therefore, your add-in should request and handle specific types of content controls.
         *
         * @param options - Optional. Options that define which content controls are returned.
         */
        getContentControls(options?: Word.ContentControlOptions): Word.ContentControlCollection;
        /**
         * Gets an HTML representation of the `Paragraph` object. When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for the formatting of the document. This method doesn't return the exact same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact fidelity, or consistency across platforms, use `Paragraph.getOoxml()` and convert the returned XML to HTML.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getHtml(): OfficeExtension.ClientResult<string>;
        /**
         * Gets the next paragraph. Throws an `ItemNotFound` error if the paragraph is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNext(): Word.Paragraph;
        /**
         * Gets the next paragraph. If the paragraph is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNextOrNullObject(): Word.Paragraph;
        /**
         * Gets the Office Open XML (OOXML) representation of the `Paragraph` object.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getOoxml(): OfficeExtension.ClientResult<string>;
        /**
         * Gets the previous paragraph. Throws an `ItemNotFound` error if the paragraph is the first one.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getPrevious(): Word.Paragraph;
        /**
         * Gets the previous paragraph. If the paragraph is the first one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getPreviousOrNullObject(): Word.Paragraph;
        /**
         * Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rangeLocation - Optional. The range location must be `whole`, `start`, `end`, `after`, or `content`.
         */
        getRange(rangeLocation?: Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | Word.RangeLocation.after | Word.RangeLocation.content | "Whole" | "Start" | "End" | "After" | "Content"): Word.Range;
        /**
         * Gets reviewed text based on `ChangeTrackingVersion` selection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param changeTrackingVersion - Optional. The value must be `original` or `current`. The default is `current`.
         */
        getReviewedText(changeTrackingVersion?: Word.ChangeTrackingVersion): OfficeExtension.ClientResult<string>;
        /**
         * Gets reviewed text based on `ChangeTrackingVersion` selection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param changeTrackingVersion - Optional. The value must be `original` or `current`. The default is `current`.
         */
        getReviewedText(changeTrackingVersion?: "Original" | "Current"): OfficeExtension.ClientResult<string>;
        /**
         * Returns the text of the paragraph. This excludes equations, graphics (e.g., images, videos, drawings), and special characters that mark various content (e.g., for content controls, fields, comments, footnotes, endnotes).
                    By default, hidden text and text marked as deleted are excluded.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * @param options - Optional. Options that define whether the final result should include hidden text and text marked as deleted.
         */
        getText(options?: Word.GetTextOptions | {
            IncludeHiddenText?: boolean;
            IncludeTextMarkedAsDeleted?: boolean;
        }): OfficeExtension.ClientResult<string>;
        /**
         * Gets the text ranges in the paragraph by using punctuation marks and other ending marks.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param endingMarks - The punctuation marks and other ending marks as an array of strings.
         * @param trimSpacing - Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is `false` which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         */
        getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;
        /**
         * Gets the collection of the `TrackedChange` objects in the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        getTrackedChanges(): Word.TrackedChangeCollection;
        /**
         * Indents the paragraph by one level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        indent(): void;
        /**
         * Indents the paragraph by a specified number of characters.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - The number of characters for the indent.
         */
        indentCharacterWidth(count: number): void;
        /**
         * Indents the first line of the paragraph by the specified number of characters.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - The number of characters for the first line indent.
         */
        indentFirstLineCharacterWidth(count: number): void;
        /**
         * Inserts annotations on this `Paragraph` object.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         *
         * Important: This API requires a Microsoft 365 subscription in order to work properly because of an underlying service's requirement. For more about this, see {@link https://github.com/OfficeDev/office-js/issues/4953 | GitHub issue 4953}.
         *
         * @param annotations - Annotations to set.
         * @returns An array of the inserted annotations identifiers.
         */
        insertAnnotations(annotations: Word.AnnotationSet): OfficeExtension.ClientResult<string[]>;
        /**
         * Inserts a break at the specified location in the main document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param breakType - The break type to add to the document.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertBreak(breakType: Word.BreakType | "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): void;
        /**
         * Inserts a floating canvas in front of text with its anchor at the beginning of the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param insertShapeOptions - Optional. The location and size of canvas. The default location and size is (0, 0, 300, 200).
         */
        insertCanvas(insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Wraps the `Paragraph` object with a content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Note: The `contentControlType` parameter was introduced in WordApi 1.5. `plainText` support was added in WordApi 1.5. `checkBox` support was added in WordApi 1.7.
         * `dropDownList` and `comboBox` support was added in WordApi 1.9. Support for `buildingBlockGallery`, `datePicker`, `group`, `picture`, and `repeatingSection` was added in WordApiDesktop 1.3.
         *
         * @param contentControlType - Optional. Content control type to insert. Must be `richText`, `plainText`, `checkBox`, `dropDownList`, `comboBox`, `buildingBlockGallery`, `datePicker`, `repeatingSection`, `picture`, or `group`. The default is `richText`.
         */
        insertContentControl(contentControlType?: Word.ContentControlType.richText | Word.ContentControlType.plainText | Word.ContentControlType.checkBox | Word.ContentControlType.dropDownList | Word.ContentControlType.comboBox | Word.ContentControlType.buildingBlockGallery | Word.ContentControlType.datePicker | Word.ContentControlType.repeatingSection | Word.ContentControlType.picture | Word.ContentControlType.group | "RichText" | "PlainText" | "CheckBox" | "DropDownList" | "ComboBox" | "BuildingBlockGallery" | "DatePicker" | "RepeatingSection" | "Picture" | "Group"): Word.ContentControl;
        /**
         * Inserts a document into the paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Insertion isn't supported if the document being inserted contains an ActiveX control (likely in a form field). Consider replacing such a form field with a content control or other option appropriate for your scenario.
         *
         * @param base64File - The Base64-encoded content of a .docx file.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts a geometric shape in front of text with its anchor at the beginning of the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param geometricShapeType - The geometric type of the shape to insert.
         * @param insertShapeOptions - Optional. The location and size of the geometric shape. The default location and size is (0, 0, 100, 100).
         */
        insertGeometricShape(geometricShapeType: Word.GeometricShapeType, insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Inserts a geometric shape in front of text with its anchor at the beginning of the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param geometricShapeType - The geometric type of the shape to insert.
         * @param insertShapeOptions - Optional. The location and size of the geometric shape. The default location and size is (0, 0, 100, 100).
         */
        insertGeometricShape(geometricShapeType: "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus", insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Inserts HTML into the paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param html - The HTML to be inserted in the paragraph.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertHtml(html: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts a picture into the paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param base64EncodedImage - The Base64-encoded image to be inserted.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.InlinePicture;
        /**
         * Inserts OOXML into the paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param ooxml - The OOXML to be inserted in the paragraph.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts a paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param paragraphText - The paragraph text to be inserted.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): Word.Paragraph;
        /**
         * Inserts a floating picture in front of text with its anchor at the beginning of the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param base64EncodedImage - The Base64-encoded image to be inserted.
         * @param insertShapeOptions - Optional. The location and size of the picture. The default location is (0, 0) and the default size is the image's original size.
         */
        insertPictureFromBase64(base64EncodedImage: string, insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Inserts a table with the specified number of rows and columns.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rowCount - The number of rows in the table.
         * @param columnCount - The number of columns in the table.
         * @param insertLocation - The value must be `before` or `after`.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After", values?: string[][]): Word.Table;
        /**
         * Inserts text into the paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param text - Text to be inserted.
         * @param insertLocation - The value must be `replace`, `start`, or `end`.
         */
        insertText(text: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
        /**
         * Inserts a floating text box in front of text with its anchor at the beginning of the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param text - Optional. The text to insert into the text box.
         * @param insertShapeOptions - Optional. The location and size of the text box. The default location and size is (0, 0, 100, 100).
         */
        insertTextBox(text?: string, insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Joins a list paragraph with the closest list above or below this paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        joinList(): void;
        /**
         * Returns a `Paragraph` object that represents the next paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - Optional. The number of paragraphs to move forward.
         */
        next(count: number): Word.Paragraph;
        /**
         * Toggles the spacing before the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        openOrCloseUp(): void;
        /**
         * Sets spacing before the paragraph to 12 points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        openUp(): void;
        /**
         * Removes one level of indent for the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outdent(): void;
        /**
         * Applies the next heading level style (Heading 1 through Heading 8) to the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outlineDemote(): void;
        /**
         * Demotes the paragraph to body text by applying the Normal style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outlineDemoteToBody(): void;
        /**
         * Applies the previous heading level style (Heading 1 through Heading 8) to the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outlinePromote(): void;
        /**
         * Returns the previous paragraph as a `Paragraph` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - Optional. The number of paragraphs to move backward.
         */
        previous(count: number): Word.Paragraph;
        /**
         * Removes manual paragraph formatting (formatting not applied using a style).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reset(): void;
        /**
         * Resets the paragraph that uses custom list levels to the original level settings.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        resetAdvanceTo(): void;
        /**
         * Performs a search with the specified search options on the scope of the `Paragraph` object. The search results are a collection of `Range` objects.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param searchText - The search text.
         * @param searchOptions - Optional. Options for the search.
         */
        search(searchText: string, searchOptions?: Word.SearchOptions | {
            ignorePunct?: boolean;
            ignoreSpace?: boolean;
            matchCase?: boolean;
            matchPrefix?: boolean;
            matchSuffix?: boolean;
            matchWholeWord?: boolean;
            matchWildcards?: boolean;
        }): Word.RangeCollection;
        /**
         * Selects and navigates the Word UI to the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: Word.SelectionMode): void;
        /**
         * Selects and navigates the Word UI to the paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: "Select" | "Start" | "End"): void;
        /**
         * Selects the number or bullet in a list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectNumber(): void;
        /**
         * Separates a list into two separate lists. For numbered lists, the new list restarts numbering at the starting number, usually 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        separateList(): void;
        /**
         * Sets the paragraph to single spacing.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        space1(): void;
        /**
         * Sets the paragraph to 1.5-line spacing.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        space1Pt5(): void;
        /**
         * Sets the paragraph to double spacing.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        space2(): void;
        /**
         * Splits the paragraph into child ranges by using delimiters.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param delimiters - The delimiters as an array of strings.
         * @param trimDelimiters - Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is `false` which indicates that the delimiters are included in the ranges returned in the range collection.
         * @param trimSpacing - Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is `false` which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         */
        split(delimiters: string[], trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;
        /**
         * Starts a new list with this paragraph. Fails if the paragraph is already a list item.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        startNewList(): Word.List;
        /**
         * Sets a hanging indent to a specified number of tab stops.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - The number of tab stops for the hanging indent.
         */
        tabHangingIndent(count: number): void;
        /**
         * Sets the left indent for the paragraph to a specified number of tab stops.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - The number of tab stops for the left indent.
         */
        tabIndent(count: number): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ParagraphLoadOptions): Word.Paragraph;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Paragraph;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Paragraph;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Paragraph;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Paragraph;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Paragraph` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ParagraphData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ParagraphData;
    }
    /**
     * Contains a collection of {@link Word.Paragraph} objects.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class ParagraphCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Paragraph[];
        /**
         * Returns a `Paragraph` object that represents a new, blank paragraph added to the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range before which you want the new paragraph to be added. The new paragraph doesn't replace the range.
         */
        add(range: Word.Range): Word.Paragraph;
        /**
         * Removes any spacing before the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        closeUp(): void;
        /**
         * Decreases the spacing before and after paragraphs in six-point increments.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        decreaseSpacing(): void;
        /**
         * Gets the first paragraph in this collection. Throws an `ItemNotFound` error if the collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.Paragraph;
        /**
         * Gets the first paragraph in this collection. If the collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.Paragraph;
        /**
         * Gets the last paragraph in this collection. Throws an `ItemNotFound` error if the collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getLast(): Word.Paragraph;
        /**
         * Gets the last paragraph in this collection. If the collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getLastOrNullObject(): Word.Paragraph;
        /**
         * Increases the spacing before and after paragraphs in six-point increments.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        increaseSpacing(): void;
        /**
         * Indents the paragraphs by one level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        indent(): void;
        /**
         * Indents the paragraphs in the collection by the specified number of characters.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - The number of characters by which the specified paragraphs are to be indented.
         */
        indentCharacterWidth(count: number): void;
        /**
         * Indents the first line of the paragraphs in the collection by the specified number of characters.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - The number of characters by which the first line of each specified paragraph is to be indented.
         */
        indentFirstLineCharacterWidth(count: number): void;
        /**
         * Toggles spacing before paragraphs.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        openOrCloseUp(): void;
        /**
         * Sets spacing before the specified paragraphs to 12 points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        openUp(): void;
        /**
         * Removes one level of indent for the paragraphs.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outdent(): void;
        /**
         * Applies the next heading level style (Heading 1 through Heading 8) to the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outlineDemote(): void;
        /**
         * Demotes the specified paragraphs to body text by applying the Normal style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outlineDemoteToBody(): void;
        /**
         * Applies the previous heading level style (Heading 1 through Heading 8) to the paragraphs in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outlinePromote(): void;
        /**
         * Sets the specified paragraphs to single spacing.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        space1(): void;
        /**
         * Sets the specified paragraphs to 1.5-line spacing.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        space1Pt5(): void;
        /**
         * Sets the specified paragraphs to double spacing.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        space2(): void;
        /**
         * Sets a hanging indent to the specified number of tab stops.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - The number of tab stops to indent (if positive) or the number of tab stops to remove from the indent (if negative).
         */
        tabHangingIndent(count: number): void;
        /**
         * Sets the left indent for the specified paragraphs to the specified number of tab stops.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param count - The number of tab stops to indent (if positive) or the number of tab stops to remove from the indent (if negative).
         */
        tabIndent(count: number): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ParagraphCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ParagraphCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ParagraphCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ParagraphCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ParagraphCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ParagraphCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ParagraphCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ParagraphCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ParagraphCollectionData;
    }
    /**
     * Represents a style of paragraph in a document.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export class ParagraphFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the alignment for the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
        /**
         * Specifies the value (in points) for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        firstLineIndent: number;
        /**
         * Specifies whether all lines in the specified paragraphs remain on the same page when Microsoft Word repaginates the document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        keepTogether: boolean;
        /**
         * Specifies whether the specified paragraph remains on the same page as the paragraph that follows it when Microsoft Word repaginates the document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        keepWithNext: boolean;
        /**
         * Specifies the left indent.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        leftIndent: number;
        /**
         * Specifies the line spacing (in points) for the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        lineSpacing: number;
        /**
         * Specifies the amount of spacing (in gridlines) after the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        lineUnitAfter: number;
        /**
         * Specifies the amount of spacing (in gridlines) before the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        lineUnitBefore: number;
        /**
         * Specifies whether left and right indents are the same width.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        mirrorIndents: boolean;
        /**
         * Specifies the outline level for the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel: Word.OutlineLevel | "OutlineLevel1" | "OutlineLevel2" | "OutlineLevel3" | "OutlineLevel4" | "OutlineLevel5" | "OutlineLevel6" | "OutlineLevel7" | "OutlineLevel8" | "OutlineLevel9" | "OutlineLevelBodyText";
        /**
         * Specifies the right indent (in points) for the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        rightIndent: number;
        /**
         * Specifies the amount of spacing (in points) after the specified paragraph or text column.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        spaceAfter: number;
        /**
         * Specifies the spacing (in points) before the specified paragraphs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        spaceBefore: number;
        /**
         * Specifies whether the first and last lines in the specified paragraph remain on the same page as the rest of the paragraph when Microsoft Word repaginates the document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        widowControl: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ParagraphFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ParagraphFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ParagraphFormatLoadOptions): Word.ParagraphFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ParagraphFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ParagraphFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ParagraphFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ParagraphFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ParagraphFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ParagraphFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ParagraphFormatData;
    }
    /**
     * Represents a contiguous area in a document.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class Range extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BookmarkCollection` object that represents all the bookmarks in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly bookmarks: Word.BookmarkCollection;
        /**
         * Returns a `BorderUniversalCollection` object that represents all the borders for the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Returns a `ConflictCollection` object that contains all the {@link Word.Conflict} objects in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly conflicts: Word.ConflictCollection;
        /**
         * Gets the collection of `ContentControl` objects in the range.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly contentControls: Word.ContentControlCollection;
        /**
         * Returns an `EditorCollection` object that represents all the users authorized to modify the range when the document is in protected (read-only) mode.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly editors: Word.EditorCollection;
        /**
         * Gets the collection of endnotes in the range.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly endnotes: Word.NoteItemCollection;
        /**
         * Gets the collection of `Field` objects in the range.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly fields: Word.FieldCollection;
        /**
         * Gets the text format of the range. Use this to get and set font name, size, color, and other properties.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly font: Word.Font;
        /**
         * Gets the collection of footnotes in the range.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly footnotes: Word.NoteItemCollection;
        /**
         * Gets a `FrameCollection` object that represents all the frames in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly frames: Word.FrameCollection;
        /**
         * Returns a `HyperlinkCollection` object that represents all the hyperlinks in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly hyperlinks: Word.HyperlinkCollection;
        /**
         * Gets the collection of `InlinePicture` objects in the range.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         */
        readonly inlinePictures: Word.InlinePictureCollection;
        /**
         * Returns a `ListFormat` object that represents all the list formatting characteristics of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly listFormat: Word.ListFormat;
        /**
         * Gets the collection of `List` objects in the range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly lists: Word.ListCollection;
        /**
         * Gets the collection of pages in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly pages: Word.PageCollection;
        /**
         * Gets the collection of `Paragraph` objects in the range.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Important: For requirement sets 1.1 and 1.2, paragraphs in tables wholly contained within this range aren't returned. From requirement set 1.3, paragraphs in such tables are also returned.
         */
        readonly paragraphs: Word.ParagraphCollection;
        /**
         * Gets the parent body of the range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentBody: Word.Body;
        /**
         * Gets the currently supported content control that contains the range. Throws an `ItemNotFound` error if there isn't a parent content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly parentContentControl: Word.ContentControl;
        /**
         * Gets the currently supported content control that contains the range. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentContentControlOrNullObject: Word.ContentControl;
        /**
         * Gets the table that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTable: Word.Table;
        /**
         * Gets the table cell that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCell: Word.TableCell;
        /**
         * Gets the table cell that contains the range. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCellOrNullObject: Word.TableCell;
        /**
         * Gets the table that contains the range. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableOrNullObject: Word.Table;
        /**
         * Gets the collection of revisions that represents the tracked changes in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly revisions: Word.RevisionCollection;
        /**
         * Gets the collection of sections in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly sections: Word.SectionCollection;
        /**
         * Returns a `ShadingUniversal` object that refers to the shading formatting for the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Gets the collection of `Shape` objects anchored in the range, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * Important: Be aware that with time, additional types of shapes may be supported. Therefore, your add-in should request and handle specific types of shapes.
         */
        readonly shapes: Word.ShapeCollection;
        /**
         * Gets a `TableColumnCollection` object that represents all the table columns in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly tableColumns: Word.TableColumnCollection;
        /**
         * Gets the collection of `Table` objects in the range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly tables: Word.TableCollection;
        /**
         * Specifies whether the range is formatted as bold.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly bold: boolean;
        /**
         * Specifies whether the range is formatted as bold in a right-to-left language document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly boldBidirectional: boolean;
        /**
         * Specifies a `CharacterCase` value that represents the case of the text in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        case: Word.CharacterCase | "Next" | "Lower" | "Upper" | "TitleWord" | "TitleSentence" | "Toggle" | "HalfWidth" | "FullWidth" | "Katakana" | "Hiragana";
        /**
         * Specifies the character width of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        characterWidth: Word.CharacterWidth | "Half" | "Full";
        /**
         * Specifies if the range contains combined characters.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        combineCharacters: boolean;
        /**
         * Specifies if Microsoft Word ignores the number of characters per line for the corresponding `Range` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly disableCharacterSpaceGrid: boolean;
        /**
         * Specifies the emphasis mark for a character or designated character string.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly emphasisMark: Word.EmphasisMark | "None" | "OverSolidCircle" | "OverComma" | "OverWhiteCircle" | "UnderSolidCircle";
        /**
         * Specifies the ending character position of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        end: number;
        /**
         * Specifies the width (in the current measurement units) in which Microsoft Word fits the text in the current selection or range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fitTextWidth: number;
        /**
         * Specifies if a grammar check has been run on the range or document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grammarChecked: boolean;
        /**
         * Specifies the proofing status (spelling and grammar checking) of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hasNoProofing: boolean;
        /**
         * Specifies the highlight color for the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly highlightColorIndex: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
        /**
         * Specifies the formatting for horizontal text set within vertical text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        horizontalInVertical: Word.HorizontalInVerticalType | "None" | "FitInLine" | "ResizeLine";
        /**
         * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range. Use a '#' to separate the address part from the optional location part.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        hyperlink: string;
        /**
         * Specifies the ID for the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        id: string;
        /**
         * Checks whether the range length is zero.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly isEmpty: boolean;
        /**
         * Gets if the range is collapsed and is located at the end-of-row mark in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isEndOfRowMark: boolean;
        /**
         * Gets whether the text in the range is visible on the screen.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isTextVisibleOnScreen: boolean;
        /**
         * Specifies if the font or range is formatted as italic.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly italic: boolean;
        /**
         * Specifies if the font or range is formatted as italic (right-to-left languages).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly italicBidirectional: boolean;
        /**
         * Specifies whether the range of Japanese language text is hiragana or katakana.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        kana: Word.Kana | "Katakana" | "Hiragana";
        /**
         * Specifies whether Microsoft Word has detected the language of the text in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageDetected: boolean;
        /**
         * Specifies a `LanguageId` value that represents the language for the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageId: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Specifies an East Asian language for the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageIdFarEast: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Specifies a language for the range that isn't classified as an East Asian language.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageIdOther: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Specifies if all nonprinting characters (such as hidden text, tab marks, space marks, and paragraph marks) are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        showAll: boolean;
        /**
         * Specifies if spelling has been checked throughout the range or document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        spellingChecked: boolean;
        /**
         * Specifies the starting character position of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        start: number;
        /**
         * Gets the number of characters in the story that contains the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly storyLength: number;
        /**
         * Gets the story type for the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly storyType: Word.StoryType | "MainText" | "Footnotes" | "Endnotes" | "Comments" | "TextFrame" | "EvenPagesHeader" | "PrimaryHeader" | "EvenPagesFooter" | "PrimaryFooter" | "FirstPageHeader" | "FirstPageFooter" | "FootnoteSeparator" | "FootnoteContinuationSeparator" | "FootnoteContinuationNotice" | "EndnoteSeparator" | "EndnoteContinuationSeparator" | "EndnoteContinuationNotice";
        /**
         * Specifies the style name for the range. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        style: string;
        /**
         * Specifies the built-in style name for the range. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleBuiltIn: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
        /**
         * Gets the text of the range.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly text: string;
        /**
         * Specifies whether Microsoft Word sets two lines of text in one and specifies the characters that enclose the text, if any.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        twoLinesInOne: Word.TwoLinesInOneType | "None" | "NoBrackets" | "Parentheses" | "SquareBrackets" | "AngleBrackets" | "CurlyBrackets";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Range): void;
        /**
         * Clears the contents of the `Range` object. The user can perform the undo operation on the cleared content.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        clear(): void;
        /**
         * Compares this range's location with another range's location.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param range - The range to compare with this range.
         */
        compareLocationWith(range: Word.Range): OfficeExtension.ClientResult<Word.LocationRelation>;
        /**
         * Deletes the range and its content from the document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        delete(): void;
        /**
         * Analyzes the range text to determine the language that it's written in.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        detectLanguage(): OfficeExtension.ClientResult<boolean>;
        /**
         * Returns a new range that extends from this range in either direction to cover another range. This range isn't changed. Throws an `ItemNotFound` error if the two ranges don't have a union.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param range - Another range.
         */
        expandTo(range: Word.Range): Word.Range;
        /**
         * Returns a new range that extends from this range in either direction to cover another range. This range isn't changed. If the two ranges don't have a union, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param range - Another range.
         */
        expandToOrNullObject(range: Word.Range): Word.Range;
        /**
         * Gets the names all bookmarks in or overlapping the range. A bookmark is hidden if its name starts with the underscore character.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param includeHidden - Optional. Indicates whether to include hidden bookmarks. Default is `false` which indicates that the hidden bookmarks are excluded.
         * @param includeAdjacent - Optional. Indicates whether to include bookmarks that are adjacent to the range. Default is `false` which indicates that the adjacent bookmarks are excluded.
         */
        getBookmarks(includeHidden?: boolean, includeAdjacent?: boolean): OfficeExtension.ClientResult<string[]>;
        /**
         * Gets comments associated with the range.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         * @returns A `CommentCollection` object that contains all the comments associated with the range.
         */
        getComments(): Word.CommentCollection;
        /**
         * Gets the currently supported content controls in the range.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * **Important**: If specific types are provided in the options parameter, only content controls of supported types are returned.
         * Be aware that an exception will be thrown on using methods of a generic {@link Word.ContentControl} that aren't relevant for the specific type.
         * With time, additional types of content controls may be supported. Therefore, your add-in should request and handle specific types of content controls.
         *
         * @param options - Optional. Options that define which content controls are returned.
         */
        getContentControls(options?: Word.ContentControlOptions): Word.ContentControlCollection;
        /**
         * Gets an HTML representation of the `Range` object. When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for of the formatting of the document. This method doesn't return the exact same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact fidelity, or consistency across platforms, use `Range.getOoxml()` and convert the returned XML to HTML.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getHtml(): OfficeExtension.ClientResult<string>;
        /**
         * Gets hyperlink child ranges within the range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getHyperlinkRanges(): Word.RangeCollection;
        /**
         * Gets the next text range by using punctuation marks and other ending marks. Throws an `ItemNotFound` error if this text range is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param endingMarks - The punctuation marks and other ending marks as an array of strings.
         * @param trimSpacing - Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the returned range. Default is `false` which indicates that spacing characters at the start and end of the range are included.
         */
        getNextTextRange(endingMarks: string[], trimSpacing?: boolean): Word.Range;
        /**
         * Gets the next text range by using punctuation marks and other ending marks. If this text range is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param endingMarks - The punctuation marks and other ending marks as an array of strings.
         * @param trimSpacing - Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the returned range. Default is `false` which indicates that spacing characters at the start and end of the range are included.
         */
        getNextTextRangeOrNullObject(endingMarks: string[], trimSpacing?: boolean): Word.Range;
        /**
         * Gets the OOXML representation of the `Range` object.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        getOoxml(): OfficeExtension.ClientResult<string>;
        /**
         * Clones the `Range` object, or gets the starting or ending point of the range as a new range.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rangeLocation - Optional. The range location must be `whole`, `start`, `end`, `after`, or `content`.
         */
        getRange(rangeLocation?: Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | Word.RangeLocation.after | Word.RangeLocation.content | "Whole" | "Start" | "End" | "After" | "Content"): Word.Range;
        /**
         * Gets reviewed text based on ChangeTrackingVersion selection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param changeTrackingVersion - Optional. The value must be `original` or `current`. The default is `current`.
         */
        getReviewedText(changeTrackingVersion?: Word.ChangeTrackingVersion): OfficeExtension.ClientResult<string>;
        /**
         * Gets reviewed text based on ChangeTrackingVersion selection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param changeTrackingVersion - Optional. The value must be `original` or `current`. The default is `current`.
         */
        getReviewedText(changeTrackingVersion?: "Original" | "Current"): OfficeExtension.ClientResult<string>;
        /**
         * Gets the text child ranges in the range by using punctuation marks and other ending marks.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param endingMarks - The punctuation marks and other ending marks as an array of strings.
         * @param trimSpacing - Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is `false` which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         */
        getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;
        /**
         * Gets the collection of the `TrackedChange` objects in the range.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        getTrackedChanges(): Word.TrackedChangeCollection;
        /**
         * Highlights the range temporarily without changing document content.
                    To highlight the text permanently, set the range's `font.highlightColor`.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        highlight(): void;
        /**
         * Inserts a bookmark on the range. If a bookmark of the same name exists somewhere, it is deleted first.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * Note: The conditions of inserting a bookmark are similar to doing so in the Word UI. To learn more about managing bookmarks in the Word UI, see {@link https://support.microsoft.com/office/f68d781f-0150-4583-a90e-a4009d99c2a0 | Add or delete bookmarks in a Word document or Outlook message}.
         *
         * @param name - The case-insensitive bookmark name. Only alphanumeric and underscore characters are supported. It must begin with a letter but if you want to tag the bookmark as hidden, then start the name with an underscore character. Names can't be longer than 40 characters.
         */
        insertBookmark(name: string): void;
        /**
         * Inserts a break at the specified location in the main document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param breakType - The break type to add.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertBreak(breakType: Word.BreakType | "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): void;
        /**
         * Inserts a floating canvas in front of text with its anchor at the beginning of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param insertShapeOptions - Optional. The location and size of the canvas. The default location and size is (0, 0, 300, 200).
         */
        insertCanvas(insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Insert a comment on the range.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param commentText - The comment text to be inserted.
         * @returns The `Comment` object that was inserted.
         */
        insertComment(commentText: string): Word.Comment;
        /**
         * Wraps the `Range` object with a content control.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Note: The `contentControlType` parameter was introduced in WordApi 1.5. `plainText` support was added in WordApi 1.5. `checkBox` support was added in WordApi 1.7.
         * `dropDownList` and `comboBox` support was added in WordApi 1.9. Support for `buildingBlockGallery`, `datePicker`, `group`, `picture`, and `repeatingSection` was added in WordApiDesktop 1.3.
         *
         * @param contentControlType - Optional. Content control type to insert. Must be `richText`, `plainText`, `checkBox`, `dropDownList`, `comboBox`, `buildingBlockGallery`, `datePicker`, `repeatingSection`, `picture`, or `group`. The default is `richText`.
         */
        insertContentControl(contentControlType?: Word.ContentControlType.richText | Word.ContentControlType.plainText | Word.ContentControlType.checkBox | Word.ContentControlType.dropDownList | Word.ContentControlType.comboBox | Word.ContentControlType.buildingBlockGallery | Word.ContentControlType.datePicker | Word.ContentControlType.repeatingSection | Word.ContentControlType.picture | Word.ContentControlType.group | "RichText" | "PlainText" | "CheckBox" | "DropDownList" | "ComboBox" | "BuildingBlockGallery" | "DatePicker" | "RepeatingSection" | "Picture" | "Group"): Word.ContentControl;
        /**
         * Inserts an endnote. The endnote reference is placed after the range.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param insertText - Optional. Text to be inserted into the endnote body. The default is "".
         */
        insertEndnote(insertText?: string): Word.NoteItem;
        /**
         * Inserts a field at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Important: In Word on Windows and on Mac, the API supports inserting and managing all types listed in {@link Word.FieldType} except `Word.FieldType.others`.
         * In Word on the web, fields are mainly read-only. To learn more, see {@link https://learn.microsoft.com/office/dev/add-ins/word/fields-guidance | Use fields in your Word add-in}.
         *
         * @param insertLocation - The location relative to the range where the field will be inserted. The value must be `replace`, `start`, `end`, `before`, or `after`.
         * @param fieldType - Optional. Can be any `FieldType` value. The default value is `empty`.
         * @param text - Optional. Additional properties or options if needed for specified field type.
         * @param removeFormatting - Optional. `true` to remove the formatting that's applied to the field during updates, `false` otherwise. The default value is `false`.
         */
        insertField(insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After", fieldType?: Word.FieldType, text?: string, removeFormatting?: boolean): Word.Field;
        /**
         * Inserts a field at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Important: In Word on Windows and on Mac, the API supports inserting and managing all types listed in {@link Word.FieldType} except `Word.FieldType.others`.
         * In Word on the web, fields are mainly read-only. To learn more, see {@link https://learn.microsoft.com/office/dev/add-ins/word/fields-guidance | Use fields in your Word add-in}.
         *
         * @param insertLocation - The location relative to the range where the field will be inserted. The value must be `replace`, `start`, `end`, `before`, or `after`.
         * @param fieldType - Optional. Can be any `FieldType` value. The default value is `empty`.
         * @param text - Optional. Additional properties or options if needed for specified field type.
         * @param removeFormatting - Optional. `true` to remove the formatting that's applied to the field during updates, `false` otherwise. The default value is `false`.
         */
        insertField(insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After", fieldType?: "Addin" | "AddressBlock" | "Advance" | "Ask" | "Author" | "AutoText" | "AutoTextList" | "BarCode" | "Bibliography" | "BidiOutline" | "Citation" | "Comments" | "Compare" | "CreateDate" | "Data" | "Database" | "Date" | "DisplayBarcode" | "DocProperty" | "DocVariable" | "EditTime" | "Embedded" | "EQ" | "Expression" | "FileName" | "FileSize" | "FillIn" | "FormCheckbox" | "FormDropdown" | "FormText" | "GotoButton" | "GreetingLine" | "Hyperlink" | "If" | "Import" | "Include" | "IncludePicture" | "IncludeText" | "Index" | "Info" | "Keywords" | "LastSavedBy" | "Link" | "ListNum" | "MacroButton" | "MergeBarcode" | "MergeField" | "MergeRec" | "MergeSeq" | "Next" | "NextIf" | "NoteRef" | "NumChars" | "NumPages" | "NumWords" | "OCX" | "Page" | "PageRef" | "Print" | "PrintDate" | "Private" | "Quote" | "RD" | "Ref" | "RevNum" | "SaveDate" | "Section" | "SectionPages" | "Seq" | "Set" | "Shape" | "SkipIf" | "StyleRef" | "Subject" | "Subscriber" | "Symbol" | "TA" | "TC" | "Template" | "Time" | "Title" | "TOA" | "TOC" | "UserAddress" | "UserInitials" | "UserName" | "XE" | "Empty" | "Others" | "Undefined", text?: string, removeFormatting?: boolean): Word.Field;
        /**
         * Inserts a document at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * Insertion isn't supported if the document being inserted contains an ActiveX control (likely in a form field). Consider replacing such a form field with a content control or other option appropriate for your scenario.
         *
         * @param base64File - The Base64-encoded content of a .docx file.
         * @param insertLocation - The value must be `replace`, `start`, `end`, `before`, or `after`.
         */
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After"): Word.Range;
        /**
         * Inserts a footnote. The footnote reference is placed after the range.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param insertText - Optional. Text to be inserted into the footnote body. The default is "".
         */
        insertFootnote(insertText?: string): Word.NoteItem;
        /**
         * Inserts a geometric shape in front of text with its anchor at the beginning of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param geometricShapeType - The geometric type of the shape to insert.
         * @param insertShapeOptions - Optional. The location and size of the geometric shape. The default location and size is (0, 0, 100, 100).
         */
        insertGeometricShape(geometricShapeType: Word.GeometricShapeType, insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Inserts a geometric shape in front of text with its anchor at the beginning of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param geometricShapeType - The geometric type of the shape to insert.
         * @param insertShapeOptions - Optional. The location and size of the geometric shape. The default location and size is (0, 0, 100, 100).
         */
        insertGeometricShape(geometricShapeType: "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus", insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Inserts HTML at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param html - The HTML to be inserted.
         * @param insertLocation - The value must be `replace`, `start`, `end`, `before`, or `after`.
         */
        insertHtml(html: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After"): Word.Range;
        /**
         * Inserts a picture at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.2]
         *
         * @param base64EncodedImage - The Base64-encoded image to be inserted.
         * @param insertLocation - The value must be `replace`, `start`, `end`, `before`, or `after`.
         */
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After"): Word.InlinePicture;
        /**
         * Inserts OOXML at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param ooxml - The OOXML to be inserted.
         * @param insertLocation - The value must be `replace`, `start`, `end`, `before`, or `after`.
         */
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After"): Word.Range;
        /**
         * Inserts a paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param paragraphText - The paragraph text to be inserted.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): Word.Paragraph;
        /**
         * Inserts a floating picture in front of text with its anchor at the beginning of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param base64EncodedImage - The Base64-encoded image to be inserted.
         * @param insertShapeOptions - Optional. The location and size of the picture. The default location is (0, 0) and the default size is the image's original size.
         */
        insertPictureFromBase64(base64EncodedImage: string, insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Inserts a table with the specified number of rows and columns.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rowCount - The number of rows in the table.
         * @param columnCount - The number of columns in the table.
         * @param insertLocation - The value must be `before` or `after`.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After", values?: string[][]): Word.Table;
        /**
         * Inserts text at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param text - Text to be inserted.
         * @param insertLocation - The value must be `replace`, `start`, `end`, `before`, or `after`.
         */
        insertText(text: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After"): Word.Range;
        /**
         * Inserts a floating text box in front of text with its anchor at the beginning of the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param text - Optional. The text to insert into the text box.
         * @param insertShapeOptions - Optional. The location and size of the text box. The default location and size is (0, 0, 100, 100).
         */
        insertTextBox(text?: string, insertShapeOptions?: Word.InsertShapeOptions): Word.Shape;
        /**
         * Returns a new range as the intersection of this range with another range. This range isn't changed. Throws an `ItemNotFound` error if the two ranges aren't overlapped or adjacent.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param range - Another range.
         */
        intersectWith(range: Word.Range): Word.Range;
        /**
         * Returns a new range as the intersection of this range with another range. This range isn't changed. If the two ranges aren't overlapped or adjacent, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param range - Another range.
         */
        intersectWithOrNullObject(range: Word.Range): Word.Range;
        /**
         * Removes the highlight added by the `highlight` method if any.
         *
         * @remarks
         * [Api set: WordApi 1.8]
         */
        removeHighlight(): void;
        /**
         * Performs a search with the specified search options on the scope of the `Range` object. The search results are a collection of `Range` objects.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param searchText - The search text.
         * @param searchOptions - Optional. Options for the search.
         */
        search(searchText: string, searchOptions?: Word.SearchOptions | {
            ignorePunct?: boolean;
            ignoreSpace?: boolean;
            matchCase?: boolean;
            matchPrefix?: boolean;
            matchSuffix?: boolean;
            matchWholeWord?: boolean;
            matchWildcards?: boolean;
        }): Word.RangeCollection;
        /**
         * Selects and navigates the Word UI to the range.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: Word.SelectionMode): void;
        /**
         * Selects and navigates the Word UI to the range.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: "Select" | "Start" | "End"): void;
        /**
         * Splits the range into child ranges by using delimiters.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param delimiters - The delimiters as an array of strings.
         * @param multiParagraphs - Optional. Indicates whether a returned child range can cover multiple paragraphs. Default is `false` which indicates that the paragraph boundaries are also used as delimiters.
         * @param trimDelimiters - Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is `false` which indicates that the delimiters are included in the ranges returned in the range collection.
         * @param trimSpacing - Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is `false` which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         */
        split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.RangeLoadOptions): Word.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Range;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Range;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Range;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Range` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RangeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.RangeData;
    }
    /**
     * Contains a collection of {@link Word.Range} objects.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class RangeCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Range[];
        /**
         * Gets the first range in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.Range;
        /**
         * Gets the first range in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.RangeCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.RangeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.RangeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.RangeCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.RangeCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.RangeCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.RangeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RangeCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.RangeCollectionData;
    }
    /**
     * Specifies the options to determine location and size when inserting a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export interface InsertShapeOptions {
        /**
         * If provided, specifies the height of the shape being inserted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        height?: number;
        /**
         * If provided, specifies the left position of the shape being inserted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        left?: number;
        /**
         * If provided, specifies the top position of the shape being inserted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        top?: number;
        /**
         * If provided, specifies the width of the shape being inserted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        width?: number;
    }
    /**
     * Specifies the options to determine what to copy when inserting a file.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export interface InsertFileOptions {
        /**
         * If provided, specifies whether the change tracking mode status from the source document should be imported.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        importChangeTrackingMode?: boolean;
        /**
         * If provided, specifies whether the custom properties from the source document should be imported. Overwrites existing properties with the same name.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        importCustomProperties?: boolean;
        /**
         * If provided, specifies whether the custom XML parts from the source document should be imported.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        importCustomXmlParts?: boolean;
        /**
         * If provided, specifies whether to import the Different Odd and Even Pages setting for the header and footer from the source document.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        importDifferentOddEvenPages?: boolean;
        /**
         * If provided, specifies whether the page color and other background information from the source document should be imported.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        importPageColor?: boolean;
        /**
         * If provided, specifies whether the paragraph spacing from the source document should be imported.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        importParagraphSpacing?: boolean;
        /**
         * If provided, specifies whether the styles from the source document should be imported.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        importStyles?: boolean;
        /**
         * If provided, specifies whether the theme from the source document should be imported.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        importTheme?: boolean;
    }
    /**
     * Specifies the options to be included in a search operation.
                To learn more about how to use search options in the Word JavaScript APIs, read {@link https://learn.microsoft.com/office/dev/add-ins/word/search-option-guidance | Use search options to find text in your Word add-in}.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class SearchOptions extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * If provided, specifies whether to ignore all punctuation characters between words. The default is `false`. Corresponds to the _Ignore punctuation characters_ check box in the **Find and Replace** dialog box.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        ignorePunct: boolean;
        /**
         * If provided, specifies whether to ignore all whitespace between words. The default is `false`. Corresponds to the _Ignore white-space characters_ check box in the **Find and Replace** dialog box.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        ignoreSpace: boolean;
        /**
         * If provided, specifies whether to perform a case sensitive search. The default is `false`. Corresponds to the _Match case_ check box in the **Find and Replace** dialog box.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        matchCase: boolean;
        /**
         * If provided, specifies whether to match words that begin with the search string. The default is `false`. Corresponds to the _Match prefix_ check box in the **Find and Replace** dialog box.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        matchPrefix: boolean;
        /**
         * If provided, specifies whether to match words that end with the search string. The default is `false`. Corresponds to the _Match suffix_ check box in the **Find and Replace** dialog box.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        matchSuffix: boolean;
        /**
         * If provided, specifies whether to find only entire words, not text that's part of a larger word. The default is `false`. Corresponds to the _Find whole words only_ check box in the **Find and Replace** dialog box.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        matchWholeWord: boolean;
        /**
         * If provided, specifies whether the search will be performed using special search operators. The default is `false`. Corresponds to the _Use wildcards_ check box in the **Find and Replace** dialog box.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        matchWildcards: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.SearchOptionsUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.SearchOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.SearchOptionsLoadOptions): Word.SearchOptions;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.SearchOptions;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.SearchOptions;
        /**
         * Create a new instance of the `Word.SearchOptions` object.
         */
        static newObject(context: OfficeExtension.ClientRequestContext): Word.SearchOptions;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.SearchOptions` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SearchOptionsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.SearchOptionsData;
    }
    /**
     * Specifies the options to be included in a {@link Word.Paragraph | Paragraph.getText} operation.
     *
     * @remarks
     * [Api set: WordApi 1.7]
     */
    export interface GetTextOptions {
        /**
         * If provided, specifies whether to include hidden text in the result of the `Paragraph.getText` method. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        includeHiddenText?: boolean;
        /**
         * If provided, specifies whether to include text marked as deleted in the result of the `Paragraph.getText` method. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        includeTextMarkedAsDeleted?: boolean;
    }
    /**
     * Specifies the options to be included in a compare document operation.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    export interface DocumentCompareOptions {
        /**
         * If provided, specifies whether to add the document to the list of recently used files on the **File** menu. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        addToRecentFiles?: boolean;
        /**
         * If provided, specifies the reviewer name associated with the differences generated by the comparison.
                    If unspecified, the value defaults to the author name of the revised document or the string `Comparison` if no author information is present.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        authorName?: string;
        /**
         * If provided, specifies the target document for the comparison. Default value is `compareTargetCurrent`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        compareTarget?: Word.CompareTarget | "CompareTargetCurrent" | "CompareTargetSelected" | "CompareTargetNew";
        /**
         * If provided, specifies whether the comparison should include detection of format changes. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        detectFormatChanges?: boolean;
        /**
         * If provided, specifies whether to compare the documents without notifying a user of problems. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        ignoreAllComparisonWarnings?: boolean;
        /**
         * If provided, specifies whether to remove date and time stamp information from tracked changes in the returned `Document` object. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        removeDateAndTime?: boolean;
        /**
         * If provided, specifies whether to remove all user information from comments, revisions, and the properties dialog box in the returned `Document` object. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        removePersonalInformation?: boolean;
    }
    /**
     * Represents a section in a Word document.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class Section extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the `Body` object of the section. This doesn't include the header, footer, and other section metadata.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        readonly body: Word.Body;
        /**
         * Returns a `BorderUniversalCollection` object that represents all the borders in the section.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Returns a `PageSetup` object that's associated with the section.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly pageSetup: Word.PageSetup;
        /**
         * Specifies if the section is protected for forms.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        protectedForForms: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.SectionUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Section): void;
        /**
         * Gets one of the section's footers.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param type - The type of footer to return. This value must be: `primary`, `firstPage`, or `evenPages`.
         */
        getFooter(type: Word.HeaderFooterType): Word.Body;
        /**
         * Gets one of the section's footers.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param type - The type of footer to return. This value must be: `primary`, `firstPage`, or `evenPages`.
         */
        getFooter(type: "Primary" | "FirstPage" | "EvenPages"): Word.Body;
        /**
         * Gets one of the section's headers.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param type - The type of header to return. This value must be: `primary`, `firstPage`, or `evenPages`.
         */
        getHeader(type: Word.HeaderFooterType): Word.Body;
        /**
         * Gets one of the section's headers.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         *
         * @param type - The type of header to return. This value must be: `primary`, `firstPage`, or `evenPages`.
         */
        getHeader(type: "Primary" | "FirstPage" | "EvenPages"): Word.Body;
        /**
         * Gets the next section. Throws an `ItemNotFound` error if this section is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNext(): Word.Section;
        /**
         * Gets the next section. If this section is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNextOrNullObject(): Word.Section;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.SectionLoadOptions): Word.Section;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Section;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Section;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Section;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Section;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Section` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.SectionData;
    }
    /**
     * Contains the collection of the document's {@link Word.Section} objects.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    export class SectionCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Section[];
        /**
         * Gets the first section in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.Section;
        /**
         * Gets the first section in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.Section;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.SectionCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.SectionCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.SectionCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.SectionCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.SectionCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.SectionCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.SectionCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SectionCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.SectionCollectionData;
    }
    /**
     * Represents a setting of the add-in.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class Setting extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the key of the setting.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly key: string;
        /**
         * Specifies the value of the setting.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        value: any;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.SettingUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Setting): void;
        /**
         * Deletes the setting.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.SettingLoadOptions): Word.Setting;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Setting;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Setting;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Setting;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Setting;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Setting` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SettingData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.SettingData;
    }
    /**
     * Contains the collection of {@link Word.Setting} objects.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    export class SettingCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Setting[];
        /**
         * Creates a new setting or sets an existing setting.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param key - The setting's key, which is case-sensitive.
         * @param value - The setting's value.
         */
        add(key: string, value: any): Word.Setting;
        /**
         * Deletes all settings in this add-in.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        deleteAll(): void;
        /**
         * Gets the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets a `Setting` object by its key, which is case-sensitive. Throws an `ItemNotFound` error if the setting doesn't exist.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param key - The key that identifies the `Setting` object.
         */
        getItem(key: string): Word.Setting;
        /**
         * Gets a `Setting` object by its key, which is case-sensitive. If the setting doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param key - The key that identifies the `Setting` object.
         */
        getItemOrNullObject(key: string): Word.Setting;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.SettingCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.SettingCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.SettingCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.SettingCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.SettingCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.SettingCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.SettingCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SettingCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.SettingCollectionData;
    }
    /**
     * Contains a collection of {@link Word.Style} objects.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export class StyleCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Style[];
        /**
         * Get the `Style` object by its name.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param name - The style name.
         */
        getByName(name: string): Word.Style;
        /**
         * If the corresponding style doesn't exist, then this method returns an object with its `isNullObject` property set to `true`.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param name - The style name.
         */
        getByNameOrNullObject(name: string): Word.Style;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets a `Style` object by its index in the collection.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * @param index - The location of a `Style` object.
         */
        getItem(index: number): Word.Style;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.StyleCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.StyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.StyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.StyleCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.StyleCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.StyleCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.StyleCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.StyleCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.StyleCollectionData;
    }
    /**
     * Represents a style in a Word document.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class Style extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies a `BorderCollection` object that represents all the borders for the style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        readonly borders: Word.BorderCollection;
        /**
         * Gets a `Font` object that represents the character formatting of the style.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly font: Word.Font;
        /**
         * Returns a `Frame` object that represents the frame formatting for the style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly frame: Word.Frame;
        /**
         * Specifies a link between a paragraph and a character style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        linkStyle: Word.Style;
        /**
         * Gets a `ListTemplate` object that represents the list formatting for the style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        readonly listTemplate: Word.ListTemplate;
        /**
         * Gets a `ParagraphFormat` object that represents the paragraph settings for the style.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly paragraphFormat: Word.ParagraphFormat;
        /**
         * Gets a `Shading` object that represents the shading for the style. Not applicable to a style of `List` type.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        readonly shading: Word.Shading;
        /**
         * Gets a `TableStyle` object representing style properties that can be applied to a table.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        readonly tableStyle: Word.TableStyle;
        /**
         * Specifies whether the style is automatically redefined based on the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        automaticallyUpdate: boolean;
        /**
         * Specifies the name of an existing style to use as the base formatting of another style.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Note: The ability to set `baseStyle` was introduced in WordApi 1.6.
         */
        baseStyle: string;
        /**
         * Gets whether the style is a built-in style.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly builtIn: boolean;
        /**
         * Specifies whether the spelling and grammar checker ignores text formatted with this style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hasProofing: boolean;
        /**
         * Gets whether the style is a built-in style that has been modified or applied in the document or a new style that has been created in the document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly inUse: boolean;
        /**
         * Specifies a `LanguageId` value that represents the language for the style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageId: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Specifies an East Asian language for the style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageIdFarEast: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Gets whether the style is a linked style that can be used for both paragraph and character formatting.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly linked: boolean;
        /**
         * Returns the list level for the style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly listLevelNumber: number;
        /**
         * Specifies whether the style cannot be changed or edited.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        locked: boolean;
        /**
         * Gets the name of the style in the language of the user.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly nameLocal: string;
        /**
         * Specifies the name of the style to be applied automatically to a new paragraph that is inserted after a paragraph formatted with the style.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         *
         * Note: The ability to set `nextParagraphStyle` was introduced in WordApi 1.6.
         */
        nextParagraphStyle: string;
        /**
         * Specifies whether to remove spacing between paragraphs that are formatted using the same style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        noSpaceBetweenParagraphsOfSameStyle: boolean;
        /**
         * Specifies the priority.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        priority: number;
        /**
         * Specifies whether the style corresponds to an available quick style.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        quickStyle: boolean;
        /**
         * Gets the style type.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly type: Word.StyleType | "Character" | "List" | "Paragraph" | "Table";
        /**
         * Specifies whether the style is made visible as a recommended style in the Styles gallery and in the Styles task pane in Microsoft Word after it's used in the document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        unhideWhenUsed: boolean;
        /**
         * Specifies whether the style is visible as a recommended style in the Styles gallery and in the Styles task pane.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        visibility: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.StyleUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Style): void;
        /**
         * Deletes the style.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        delete(): void;
        /**
         * Links this style to a list template so that the style's formatting can be applied to lists.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param listTemplate - A `ListTemplate` to link to the style.
         */
        linkToListTemplate(listTemplate: Word.ListTemplate): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.StyleLoadOptions): Word.Style;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Style;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Style;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Style;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Style;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Style` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.StyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.StyleData;
    }
    /**
     * Represents the `Shading` object.
     *
     * @remarks
     * [Api set: WordApi 1.6]
     */
    export class Shading extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the color for the background of the object. You can provide the value in the '#RRGGBB' format or the color name.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        backgroundPatternColor: string;
        /**
         * Specifies the color for the foreground of the object. You can provide the value in the '#RRGGBB' format or the color name.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        foregroundPatternColor: string;
        /**
         * Specifies the shading texture of the object. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        texture: Word.ShadingTextureType | "DarkDiagonalDown" | "DarkDiagonalUp" | "DarkGrid" | "DarkHorizontal" | "DarkTrellis" | "DarkVertical" | "LightDiagonalDown" | "LightDiagonalUp" | "LightGrid" | "LightHorizontal" | "LightTrellis" | "LightVertical" | "None" | "Percent10" | "Percent12Pt5" | "Percent15" | "Percent20" | "Percent25" | "Percent30" | "Percent35" | "Percent37Pt5" | "Percent40" | "Percent45" | "Percent5" | "Percent50" | "Percent55" | "Percent60" | "Percent62Pt5" | "Percent65" | "Percent70" | "Percent75" | "Percent80" | "Percent85" | "Percent87Pt5" | "Percent90" | "Percent95" | "Solid";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ShadingUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Shading): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ShadingLoadOptions): Word.Shading;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Shading;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Shading;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Shading;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Shading;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Shading` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShadingData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ShadingData;
    }
    /**
     * Represents the `ShadingUniversal` object, which manages shading for a range, paragraph, frame, or table.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class ShadingUniversal extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the color that's applied to the background of the `ShadingUniversal` object. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        backgroundPatternColor: string;
        /**
         * Specifies the color that's applied to the background of the `ShadingUniversal` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        backgroundPatternColorIndex: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
        /**
         * Specifies the color that's applied to the foreground of the `ShadingUniversal` object. This color is applied to the dots and lines in the shading pattern. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        foregroundPatternColor: string;
        /**
         * Specifies the color that's applied to the foreground of the `ShadingUniversal` object. This color is applied to the dots and lines in the shading pattern.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        foregroundPatternColorIndex: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
        /**
         * Specifies the shading texture of the object. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        texture: Word.ShadingTextureType | "DarkDiagonalDown" | "DarkDiagonalUp" | "DarkGrid" | "DarkHorizontal" | "DarkTrellis" | "DarkVertical" | "LightDiagonalDown" | "LightDiagonalUp" | "LightGrid" | "LightHorizontal" | "LightTrellis" | "LightVertical" | "None" | "Percent10" | "Percent12Pt5" | "Percent15" | "Percent20" | "Percent25" | "Percent30" | "Percent35" | "Percent37Pt5" | "Percent40" | "Percent45" | "Percent5" | "Percent50" | "Percent55" | "Percent60" | "Percent62Pt5" | "Percent65" | "Percent70" | "Percent75" | "Percent80" | "Percent85" | "Percent87Pt5" | "Percent90" | "Percent95" | "Solid";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ShadingUniversalUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ShadingUniversal): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ShadingUniversalLoadOptions): Word.ShadingUniversal;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ShadingUniversal;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ShadingUniversal;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ShadingUniversal;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ShadingUniversal;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ShadingUniversal` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShadingUniversalData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ShadingUniversalData;
    }
    /**
     * Represents a table in a Word document.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class Table extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns the `TableColumnCollection` object that represents the columns in the table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly columns: Word.TableColumnCollection;
        /**
         * Gets the collection of endnotes in the table.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly endnotes: Word.NoteItemCollection;
        /**
         * Gets the collection of `Field` objects in the table.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly fields: Word.FieldCollection;
        /**
         * Gets the font. Use this to get and set font name, size, color, and other properties.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly font: Word.Font;
        /**
         * Gets the collection of footnotes in the table.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly footnotes: Word.NoteItemCollection;
        /**
         * Gets the parent body of the table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentBody: Word.Body;
        /**
         * Gets the content control that contains the table. Throws an `ItemNotFound` error if there isn't a parent content control.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentContentControl: Word.ContentControl;
        /**
         * Gets the content control that contains the table. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentContentControlOrNullObject: Word.ContentControl;
        /**
         * Gets the table that contains this table. Throws an `ItemNotFound` error if it isn't contained in a table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTable: Word.Table;
        /**
         * Gets the table cell that contains this table. Throws an `ItemNotFound` error if it isn't contained in a table cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCell: Word.TableCell;
        /**
         * Gets the table cell that contains this table. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableCellOrNullObject: Word.TableCell;
        /**
         * Gets the table that contains this table. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTableOrNullObject: Word.Table;
        /**
         * Gets all of the table rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly rows: Word.TableRowCollection;
        /**
         * Returns the `ShadingUniversal` object that represents the shading of the table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Gets the child tables nested one level deeper.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly tables: Word.TableCollection;
        /**
         * Specifies the alignment of the table against the page column. The value can be `left`, `centered`, or `right`.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
        /**
         * Specifies the description of the table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        description: string;
        /**
         * Specifies the number of header rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        headerRowCount: number;
        /**
         * Specifies the horizontal alignment of every cell in the table. The value can be `left`, `centered`, `right`, or `justified`.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        horizontalAlignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
        /**
         * Indicates whether all of the table rows are uniform.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly isUniform: boolean;
        /**
         * Gets the nesting level of the table. Top-level tables have level 1.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly nestingLevel: number;
        /**
         * Gets the number of rows in the table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly rowCount: number;
        /**
         * Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        shadingColor: string;
        /**
         * Specifies the style name for the table. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        style: string;
        /**
         * Specifies whether the table has banded columns.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleBandedColumns: boolean;
        /**
         * Specifies whether the table has banded rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleBandedRows: boolean;
        /**
         * Specifies the built-in style name for the table. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleBuiltIn: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
        /**
         * Specifies whether the table has a first column with a special style.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleFirstColumn: boolean;
        /**
         * Specifies whether the table has a last column with a special style.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleLastColumn: boolean;
        /**
         * Specifies whether the table has a total (last) row with a special style.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        styleTotalRow: boolean;
        /**
         * Specifies the title of the table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        title: string;
        /**
         * Specifies the text values in the table, as a 2D JavaScript array.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        values: string[][];
        /**
         * Specifies the vertical alignment of every cell in the table. The value can be `top`, `center`, or `bottom`.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        verticalAlignment: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
        /**
         * Specifies the width of the table in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        width: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Table): void;
        /**
         * Adds columns to the start or end of the table, using the first or last existing column as a template. This is applicable to uniform tables. The string values, if specified, are set in the newly inserted rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param insertLocation - It must be `start` or `end`, corresponding to the appropriate side of the table.
         * @param columnCount - Number of columns to add.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        addColumns(insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | "Start" | "End", columnCount: number, values?: string[][]): void;
        /**
         * Adds rows to the start or end of the table, using the first or last existing row as a template. The string values, if specified, are set in the newly inserted rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param insertLocation - It must be `start` or `end`.
         * @param rowCount - Number of rows to add.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        addRows(insertLocation: Word.InsertLocation.start | Word.InsertLocation.end | "Start" | "End", rowCount: number, values?: string[][]): Word.TableRowCollection;
        /**
         * Applies the specified style but maintains any formatting that a user directly applies.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param styleName - The name of the style to apply.
         */
        applyStyleDirectFormatting(styleName: string): void;
        /**
         * Determines how Microsoft Word resizes a table when the AutoFit feature is used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param behavior - How Word resizes the specified table with the AutoFit feature is used.
         */
        autoFitBehavior(behavior: Word.AutoFitBehavior): void;
        /**
         * Determines how Microsoft Word resizes a table when the AutoFit feature is used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param behavior - How Word resizes the specified table with the AutoFit feature is used.
         */
        autoFitBehavior(behavior: "FixedSize" | "Content" | "Window"): void;
        /**
         * Autofits the table columns to the width of the window.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        autoFitWindow(): void;
        /**
         * Applies a predefined look to a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. An object that specifies the options for applying the table format.
         */
        autoFormat(options?: Word.TableAutoFormatOptions): void;
        /**
         * Clears the contents of the table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        clear(): void;
        /**
         * Converts a table to text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. An object that specifies the options for converting the table to text.
         * @returns A `Range` object that represents the converted text.
         */
        convertToText(options?: Word.TableConvertToTextOptions): Word.Range;
        /**
         * Deletes the entire table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        delete(): void;
        /**
         * Deletes specific columns. This is applicable to uniform tables.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param columnIndex - The first column to delete.
         * @param columnCount - Optional. The number of columns to delete. Default 1.
         */
        deleteColumns(columnIndex: number, columnCount?: number): void;
        /**
         * Deletes specific rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rowIndex - The first row to delete.
         * @param rowCount - Optional. The number of rows to delete. Default 1.
         */
        deleteRows(rowIndex: number, rowCount?: number): void;
        /**
         * Distributes the column widths evenly. This is applicable to uniform tables.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        distributeColumns(): void;
        /**
         * Gets the border style for the specified border.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param borderLocation - The border location.
         */
        getBorder(borderLocation: Word.BorderLocation): Word.TableBorder;
        /**
         * Gets the border style for the specified border.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param borderLocation - The border location.
         */
        getBorder(borderLocation: "Top" | "Left" | "Bottom" | "Right" | "InsideHorizontal" | "InsideVertical" | "Inside" | "Outside" | "All"): Word.TableBorder;
        /**
         * Gets the table cell at a specified row and column. Throws an `ItemNotFound` error if the specified table cell doesn't exist.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rowIndex - The index of the row.
         * @param cellIndex - The index of the cell in the row.
         */
        getCell(rowIndex: number, cellIndex: number): Word.TableCell;
        /**
         * Gets the table cell at a specified row and column. If the specified table cell doesn't exist, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rowIndex - The index of the row.
         * @param cellIndex - The index of the cell in the row.
         */
        getCellOrNullObject(rowIndex: number, cellIndex: number): Word.TableCell;
        /**
         * Gets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         */
        getCellPadding(cellPaddingLocation: Word.CellPaddingLocation): OfficeExtension.ClientResult<number>;
        /**
         * Gets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         */
        getCellPadding(cellPaddingLocation: "Top" | "Left" | "Bottom" | "Right"): OfficeExtension.ClientResult<number>;
        /**
         * Gets the next table. Throws an `ItemNotFound` error if this table is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNext(): Word.Table;
        /**
         * Gets the next table. If this table is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNextOrNullObject(): Word.Table;
        /**
         * Gets the paragraph after the table. Throws an `ItemNotFound` error if there isn't a paragraph after the table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getParagraphAfter(): Word.Paragraph;
        /**
         * Gets the paragraph after the table. If there isn't a paragraph after the table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getParagraphAfterOrNullObject(): Word.Paragraph;
        /**
         * Gets the paragraph before the table. Throws an `ItemNotFound` error if there isn't a paragraph before the table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getParagraphBefore(): Word.Paragraph;
        /**
         * Gets the paragraph before the table. If there isn't a paragraph before the table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getParagraphBeforeOrNullObject(): Word.Paragraph;
        /**
         * Gets the range that contains this table, or the range at the start or end of the table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rangeLocation - Optional. The range location must be `whole`, `start`, `end`, or `after`.
         */
        getRange(rangeLocation?: Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | Word.RangeLocation.after | "Whole" | "Start" | "End" | "After"): Word.Range;
        /**
         * Inserts a content control on the table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        insertContentControl(): Word.ContentControl;
        /**
         * Inserts a paragraph at the specified location.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param paragraphText - The paragraph text to be inserted.
         * @param insertLocation - The value must be `before` or `after`.
         */
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After"): Word.Paragraph;
        /**
         * Inserts a table with the specified number of rows and columns.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param rowCount - The number of rows in the table.
         * @param columnCount - The number of columns in the table.
         * @param insertLocation - The value must be `before` or `after`.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After", values?: string[][]): Word.Table;
        /**
         * Merges the cells bounded inclusively by a first and last cell.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param topRow - The row of the first cell.
         * @param firstCell - The index of the first cell in its row.
         * @param bottomRow - The row of the last cell.
         * @param lastCell - The index of the last cell in its row.
         */
        mergeCells(topRow: number, firstCell: number, bottomRow: number, lastCell: number): Word.TableCell;
        /**
         * Updates the table with the characteristics of the predefined table format set when the `autoFormat` method was called. The default predefined format is {@link Word.TableFormatType | TableFormatType.none}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reapplyAutoFormat(): void;
        /**
         * Performs a search with the specified search options on the scope of the `Table` object. The search results are a collection of `Range` objects.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param searchText - The search text.
         * @param searchOptions - Optional. Options for the search.
         */
        search(searchText: string, searchOptions?: Word.SearchOptions | {
            ignorePunct?: boolean;
            ignoreSpace?: boolean;
            matchCase?: boolean;
            matchPrefix?: boolean;
            matchSuffix?: boolean;
            matchWholeWord?: boolean;
            matchWildcards?: boolean;
        }): Word.RangeCollection;
        /**
         * Selects the table, or the position at the start or end of the table, and navigates the Word UI to it.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: Word.SelectionMode): void;
        /**
         * Selects the table, or the position at the start or end of the table, and navigates the Word UI to it.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: "Select" | "Start" | "End"): void;
        /**
         * Sets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         * @param cellPadding - The cell padding.
         */
        setCellPadding(cellPaddingLocation: Word.CellPaddingLocation, cellPadding: number): void;
        /**
         * Sets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         * @param cellPadding - The cell padding.
         */
        setCellPadding(cellPaddingLocation: "Top" | "Left" | "Bottom" | "Right", cellPadding: number): void;
        /**
         * Sorts the specified table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. An object that specifies the options for sorting the table.
         */
        sort(options?: Word.TableSortOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableLoadOptions): Word.Table;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Table;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Table;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Table;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Table;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Table` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableData;
    }
    /**
     * Represents the `TableStyle` object.
     *
     * @remarks
     * [Api set: WordApi 1.6]
     */
    export class TableStyle extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BorderUniversalCollection` that represents all the borders for the table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Returns a `ShadingUniversal` object that refers to the shading formatting for the table style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly shading: Word.Shading;
        /**
         * Specifies the table's alignment against the page margin.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
        /**
         * Specifies whether lines in tables formatted with a style break across pages.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        allowBreakAcrossPage: boolean;
        /**
         * Specifies the amount of space to add between the contents and the bottom borders of the cells.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        bottomCellMargin: number;
        /**
         * Specifies the spacing (in points) between the cells in a table style.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        cellSpacing: number;
        /**
         * Specifies the number of columns in the banding when a style specifies odd- or even-column banding.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        columnStripe: number;
        /**
         * Specifies whether Microsoft Word allows to break the specified table across pages.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isBreakAcrossPagesAllowed: boolean;
        /**
         * Specifies the amount of space to add between the contents and the left borders of the cells.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        leftCellMargin: number;
        /**
         * Specifies the left indent value (in points) for the rows in the table style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        leftIndent: number;
        /**
         * Specifies the amount of space to add between the contents and the right borders of the cells.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        rightCellMargin: number;
        /**
         * Specifies the number of rows to include in the banding when the style specifies odd- or even-row banding.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rowStripe: number;
        /**
         * Specifies the direction in which Microsoft Word orders cells in the table style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableDirection: Word.TableDirection | "RightToLeft" | "LeftToRight";
        /**
         * Specifies the amount of space to add between the contents and the top borders of the cells.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        topCellMargin: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableStyleUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TableStyle): void;
        /**
         * Returns a `ConditionalStyle` object that represents special style formatting for a portion of a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param conditionCode - The area of the table to which to apply the formatting.
         */
        condition(conditionCode: Word.ConditionCode): Word.ConditionalStyle;
        /**
         * Returns a `ConditionalStyle` object that represents special style formatting for a portion of a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param conditionCode - The area of the table to which to apply the formatting.
         */
        condition(conditionCode: "FirstRow" | "LastRow" | "OddRowBanding" | "EvenRowBanding" | "FirstColumn" | "LastColumn" | "OddColumnBanding" | "EvenColumnBanding" | "TopRightCell" | "TopLeftCell" | "BottomRightCell" | "BottomLeftCell"): Word.ConditionalStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableStyleLoadOptions): Word.TableStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableStyle;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableStyle;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableStyle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableStyle` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableStyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableStyleData;
    }
    /**
     * Represents a tab stop in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TabStop extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the next tab stop in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly next: Word.TabStop;
        /**
         * Gets the previous tab stop in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly previous: Word.TabStop;
        /**
         * Gets a `TabAlignment` value that represents the alignment for the tab stop.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly alignment: Word.TabAlignment | "Left" | "Center" | "Right" | "Decimal" | "Bar" | "List";
        /**
         * Gets whether this tab stop is a custom tab stop.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly customTab: boolean;
        /**
         * Gets a `TabLeader` value that represents the leader for this `TabStop` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly leader: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
        /**
         * Gets the position of the tab stop relative to the left margin.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly position: number;
        /**
         * Removes this custom tab stop.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clear(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TabStopLoadOptions): Word.TabStop;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TabStop;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TabStop;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TabStop;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TabStop;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TabStop` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TabStopData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TabStopData;
    }
    /**
     * Represents a collection of {@link Word.TabStop | tab stops} in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TabStopCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TabStop[];
        /**
         * Returns a `TabStop` object that represents a custom tab stop added to the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param position - The position of the tab stop.
         * @param options - Optional. The options to further configure the new tab stop.
         */
        add(position: number, options?: Word.TabStopAddOptions): Word.TabStop;
        /**
         * Returns the next `TabStop` object to the right of the specified position.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param Position - The position to check.
         */
        after(Position: number): Word.TabStop;
        /**
         * Returns the next `TabStop` object to the left of the specified position.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param Position - The position to check.
         */
        before(Position: number): Word.TabStop;
        /**
         * Clears all the custom tab stops from the paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clearAll(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TabStopCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TabStopCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TabStopCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TabStopCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TabStopCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TabStopCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TabStopCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TabStopCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TabStopCollectionData;
    }
    /**
     * Specifies the options for adding to a {@link Word.TabStopCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TabStopAddOptions {
        /**
         * If provided, specifies the alignment of the tab stop. The default value is `left`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        alignment?: Word.TabAlignment | "Left" | "Center" | "Right" | "Decimal" | "Bar" | "List";
        /**
         * If provided, specifies the leader character for the tab stop. The default value is `spaces`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        leader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
    }
    /**
     * Contains the collection of the document's {@link Word.Table} objects.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class TableCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Table[];
        /**
         * Gets the first table in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.Table;
        /**
         * Gets the first table in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.Table;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TableCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TableCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TableCollectionData;
    }
    /**
     * Represents a table column in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class TableColumn extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BorderUniversalCollection` object that represents all the borders for the table column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Returns a `ShadingUniversal` object that refers to the shading formatting for the column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Returns the position of this column in a collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly columnIndex: number;
        /**
         * Returns `true` if the column or row is the first one in the table; `false` otherwise.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly isFirst: boolean;
        /**
         * Returns `true` if the column or row is the last one in the table; `false` otherwise.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly isLast: boolean;
        /**
         * Returns the nesting level of the column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly nestingLevel: number;
        /**
         * Specifies the preferred width (in points or as a percentage of the window width) for the column.
                    The unit of measurement can be specified by the `preferredWidthType` property.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        preferredWidth: number;
        /**
         * Specifies the preferred unit of measurement to use for the width of the table column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        preferredWidthType: Word.PreferredWidthType | "Auto" | "Percent" | "Points";
        /**
         * Specifies the width of the column, in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        width: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableColumnUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TableColumn): void;
        /**
         * Changes the width of the table column to accommodate the width of the text without changing the way text wraps in the cells.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        autoFit(): void;
        /**
         * Deletes the column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Selects the table column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        select(): void;
        /**
         * Sets the width of the column in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param columnWidth - The width to set.
         * @param rulerStyle - The ruler style to apply.
         */
        setWidth(columnWidth: number, rulerStyle: Word.RulerStyle): void;
        /**
         * Sets the width of the column in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param columnWidth - The width to set.
         * @param rulerStyle - The ruler style to apply.
         */
        setWidth(columnWidth: number, rulerStyle: "None" | "Proportional" | "FirstColumn" | "SameWidth"): void;
        /**
         * Sorts the table column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sort(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableColumnLoadOptions): Word.TableColumn;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableColumn;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableColumn;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableColumn;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableColumn;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableColumn` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableColumnData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableColumnData;
    }
    /**
     * Represents a collection of {@link Word.TableColumn} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class TableColumnCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TableColumn[];
        /**
         * Returns a `TableColumn` object that represents a column added to a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param beforeColumn - Optional. The column before which the new column is added.
         * @returns A new `TableColumn` object.
         */
        add(beforeColumn?: Word.TableColumn): Word.TableColumn;
        /**
         * Changes the width of a table column to accommodate the width of the text without changing the way text wraps in the cells.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        autoFit(): void;
        /**
         * Deletes the specified columns.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Adjusts the width of the specified columns so that they are equal.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        distributeWidth(): void;
        /**
         * Selects the specified table columns.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        select(): void;
        /**
         * Sets the width of columns in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param columnWidth - The width to set.
         * @param rulerStyle - The ruler style to apply.
         */
        setWidth(columnWidth: number, rulerStyle: Word.RulerStyle): void;
        /**
         * Sets the width of columns in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param columnWidth - The width to set.
         * @param rulerStyle - The ruler style to apply.
         */
        setWidth(columnWidth: number, rulerStyle: "None" | "Proportional" | "FirstColumn" | "SameWidth"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableColumnCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TableColumnCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableColumnCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TableColumnCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableColumnCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableColumnCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableColumnCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableColumnCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TableColumnCollectionData;
    }
    /**
     * Represents a table of authorities in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TableOfAuthorities extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the portion of a document that is this table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Specifies the name of the bookmark from which to collect table of authorities entries.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bookmark: string;
        /**
         * Specifies the category of entries to be included in the table of authorities.
                    Values 0 through 16 correspond to the items listed in the Category box of the Table of Authorities dialog. To learn how to access this through the Word UI, see {@link https://support.microsoft.com/office/ddd126ae-52bc-4299-9558-06dd0e4fe8c0 | Create a table of authorities}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        category: number;
        /**
         * Specifies a separator of up to five characters. This appears between the table of authorities entry and its page number.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        entrySeparator: string;
        /**
         * Specifies whether the category name for a group of entries appears in the table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isCategoryHeaderIncluded: boolean;
        /**
         * Specifies whether the entries in the table of authorities are displayed with their formatting in the table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isEntryFormattingKept: boolean;
        /**
         * Specifies whether references to the same authority that are repeated on five or more pages are replaced with "Passim".
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isPassimUsed: boolean;
        /**
         * Specifies a separator of up to five characters. This appears between individual page references in the table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pageNumberSeparator: string;
        /**
         * Specifies a separator of up to five characters. This appears between ranges of pages in the table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pageRangeSeparator: string;
        /**
         * Specifies the {@link https://support.microsoft.com/office/062a387b-dfc9-4ef8-8235-29ee113d59be | Sequence (SEQ) field} identifier for the table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sequenceName: string;
        /**
         * Specifies a separator of up to five characters. This appears between the sequence number and the page number in the table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sequenceSeparator: string;
        /**
         * Specifies the leader character that appears between entries and their associated page numbers in the table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tabLeader: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableOfAuthoritiesUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TableOfAuthorities): void;
        /**
         * Deletes this table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableOfAuthoritiesLoadOptions): Word.TableOfAuthorities;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableOfAuthorities;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableOfAuthorities;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableOfAuthorities;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableOfAuthorities;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableOfAuthorities` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableOfAuthoritiesData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableOfAuthoritiesData;
    }
    /**
     * Represents a collection of {@link Word.TableOfAuthorities} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TableOfAuthoritiesCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TableOfAuthorities[];
        /**
         * Adds a table of authorities to the document at the specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range where the table of authorities will appear. The table of authorities replaces the range if the range isn't collapsed.
         * @param options - Optional. The options to configure the table of authorities.
         */
        add(range: Word.Range, options?: Word.TableOfAuthoritiesAddOptions): Word.TableOfAuthorities;
        /**
         * Inserts a {@link https://support.microsoft.com/office/2a90ad2b-4169-475d-8a09-e62521d4159c | Table of Authorities Entry (TA) field} after all instances of the specified citation text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param shortCitation - The citation text to mark.
         * @param options - Optional. The options for marking the citation.
         */
        markAllCitations(shortCitation: string, options?: Word.TableOfAuthoritiesMarkCitationOptions): void;
        /**
         * Inserts a {@link https://support.microsoft.com/office/2a90ad2b-4169-475d-8a09-e62521d4159c | Table of Authorities Entry (TA) field} at the specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range where the citation will be inserted.
         * @param shortCitation - The short citation text.
         * @param options - Optional. The options for marking the citation.
         */
        markCitation(range: Word.Range, shortCitation: string, options?: Word.TableOfAuthoritiesMarkCitationOptions): Word.Field;
        /**
         * Finds and selects the next instance of the specified citation text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param shortCitation - The citation text to search for.
         */
        selectNextCitation(shortCitation: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableOfAuthoritiesCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TableOfAuthoritiesCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableOfAuthoritiesCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TableOfAuthoritiesCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableOfAuthoritiesCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableOfAuthoritiesCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableOfAuthoritiesCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableOfAuthoritiesCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TableOfAuthoritiesCollectionData;
    }
    /**
     * Specifies the options for adding to a {@link Word.TableOfAuthoritiesCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableOfAuthoritiesAddOptions {
        /**
         * If provided, specifies the string name of the bookmark from which to collect entries for a table of authorities.
                    When specified, the entries are collected only from the portion of the document marked by the bookmark.
                    Corresponds to the `\b` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bookmark?: string;
        /**
         * If provided, specifies the category of entries to include in a table of authorities.
                    Corresponds to the `\c` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
                    Values 0 through 16 correspond to the items listed in the Category box of the Table of Authorities dialog. To learn how to access this through the Word UI, see {@link https://support.microsoft.com/office/ddd126ae-52bc-4299-9558-06dd0e4fe8c0 | Create a table of authorities}.
                    The default value is `1`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        category?: number;
        /**
         * If provided, specifies a separator of up to five characters. This appears between the table of authorities entry and its page number.
                    Corresponds to the `\e` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
                    If omitted, no separator is used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        entrySeparator?: string;
        /**
         * If provided, specifies whether the category name for each group of entries appears in a table of authorities (e.g., "Cases").
                    Corresponds to the `\h` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        includeCategoryHeader?: boolean;
        /**
         * If provided, specifies whether the entries in a table of authorities are displayed with their formatting in the table.
                    Corresponds to the `\f` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        keepEntryFormatting?: boolean;
        /**
         * If provided, specifies a separator of up to five characters. This appears between individual page references in a table of authorities.
                    Corresponds to the `\l` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
                    If omitted, a comma and a space (", ") are used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pageNumberSeparator?: string;
        /**
         * If provided, specifies a separator of up to five characters. This appears between ranges of pages in a table of authorities.
                    Corresponds to the `\g` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
                    If omitted, an en dash ("–") is used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pageRangeSeparator?: string;
        /**
         * If provided, specifies the string that identifies the Sequence (SEQ) field identifier for a table of authorities.
                    Corresponds to the `\s` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sequenceName?: string;
        /**
         * If provided, specifies a separator of up to five characters. This appears between the sequence number and the page number in a table of authorities.
                    Corresponds to the `\d` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
                    If omitted, a hyphen ("-") is used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sequenceSeparator?: string;
        /**
         * If provided, specifies whether references to the same authority that are repeated on five or more pages are replaced with "Passim".
                    Corresponds to the `\p` switch for a {@link https://support.microsoft.com/office/c754a963-90c1-4d32-b2db-1ed90b9dd958 | Table of Authorities (TOA) field}.
                    The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        usePassim?: boolean;
    }
    /**
     * Specifies the options for inserting a {@link https://support.microsoft.com/office/2a90ad2b-4169-475d-8a09-e62521d4159c | Table of Authorities Entry (TA) field}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableOfAuthoritiesMarkCitationOptions {
        /**
         * If provided, specifies the category number to be associated with the entry.
                    Values 1 through 16 correspond to the items listed in the Category dropdown list of the Mark Citation dialog.
                    The value `1` corresponds to the first category listed, `2` corresponds to the second category, and so on.
                    To learn how to access this through the Word UI, see {@link https://support.microsoft.com/office/ddd126ae-52bc-4299-9558-06dd0e4fe8c0 | Create a table of authorities}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        category?: number;
        /**
         * If provided, specifies the long citation for the entry as it will appear in a table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        longCitation?: string;
        /**
         * If provided, specifies the name of the AutoText entry that contains the text of the long citation as it will appear in a table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        longCitationAutoText?: string;
    }
    /**
     * Represents a category used in a table of authorities.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TableOfAuthoritiesCategory extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the name of this table of authorities category.
                    Changing the name of the category doesn't change the index in the collection. The value for {@link Word.TableOfAuthorities | TableOfAuthorities.category} will remain the same.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly name: string;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableOfAuthoritiesCategoryLoadOptions): Word.TableOfAuthoritiesCategory;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableOfAuthoritiesCategory;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableOfAuthoritiesCategory;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableOfAuthoritiesCategory;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableOfAuthoritiesCategory;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableOfAuthoritiesCategory` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableOfAuthoritiesCategoryData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableOfAuthoritiesCategoryData;
    }
    /**
     * Represents a collection of {@link Word.TableOfAuthoritiesCategory} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TableOfAuthoritiesCategoryCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TableOfAuthoritiesCategory[];
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Returns a `TableOfAuthoritiesCategory` object that represents the specified item in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param index - The index of the item to retrieve.
         */
        getItemAt(index: number): Word.TableOfAuthoritiesCategory;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableOfAuthoritiesCategoryCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TableOfAuthoritiesCategoryCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableOfAuthoritiesCategoryCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TableOfAuthoritiesCategoryCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableOfAuthoritiesCategoryCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableOfAuthoritiesCategoryCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableOfAuthoritiesCategoryCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableOfAuthoritiesCategoryCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TableOfAuthoritiesCategoryCollectionData;
    }
    /**
     * Represents a table of contents in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TableOfContents extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the additional styles used for the table of contents. The default "Heading 1" - "Heading 9" styles aren't included in this collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly additionalHeadingStyles: Word.HeadingStyleCollection;
        /**
         * Gets the portion of a document that is this table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Specifies whether built-in heading styles are used for the table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areBuiltInHeadingStylesUsed: boolean;
        /**
         * Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areFieldsUsed: boolean;
        /**
         * Specifies whether entries in the table of contents should be formatted as hyperlinks when publishing to the web.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areHyperlinksUsedOnWeb: boolean;
        /**
         * Specifies whether the page numbers in the table of contents should be hidden when publishing to the web.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arePageNumbersHiddenOnWeb: boolean;
        /**
         * Specifies whether page numbers are included in the table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arePageNumbersIncluded: boolean;
        /**
         * Specifies whether page numbers are aligned with the right margin in the table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arePageNumbersRightAligned: boolean;
        /**
         * Specifies the ending heading level for the table of contents. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lowerHeadingLevel: number;
        /**
         * Specifies the character between entries and their page numbers in the table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tabLeader: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
        /**
         * Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableId: string;
        /**
         * Specifies the starting heading level for the table of contents. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        upperHeadingLevel: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableOfContentsUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TableOfContents): void;
        /**
         * Deletes this table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Updates the entire table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
        /**
         * Updates only the page numbers for items in this table of contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        updatePageNumbers(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableOfContentsLoadOptions): Word.TableOfContents;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableOfContents;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableOfContents;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableOfContents;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableOfContents;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableOfContents` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableOfContentsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableOfContentsData;
    }
    /**
     * Represents a collection of {@link Word.TableOfContents} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TableOfContentsCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TableOfContents[];
        /**
         * Adds a table of contents to the document at the specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range where the table of contents will be added. The table of contents replaces the range if the range isn't collapsed.
         * @param options - Optional. The options for configuring the table of contents.
         */
        add(range: Word.Range, options?: Word.TableOfContentsAddOptions): Word.TableOfContents;
        /**
         * Inserts a {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) field} after the specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range where the entry will be inserted.
         * @param options - Optional. The options for marking the table of contents entry.
         */
        markTocEntry(range: Word.Range, options?: Word.TableOfContentsMarkEntryOptions): Word.Field;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableOfContentsCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TableOfContentsCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableOfContentsCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TableOfContentsCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableOfContentsCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableOfContentsCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableOfContentsCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableOfContentsCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TableOfContentsCollectionData;
    }
    /**
     * Specifies the options for adding to a {@link Word.TableOfContentsCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableOfContentsAddOptions {
        /**
         * If provided, specifies the string names of additional styles to use for the table of contents.
                    Use {@link Word.HeadingStyleCollection | HeadingStyleCollection.add} to create new heading styles.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        addedStyles?: string;
        /**
         * If provided, specifies whether the page numbers in a table of contents should be hidden when publishing to the web.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hidePageNumbersOnWeb?: boolean;
        /**
         * If provided, specifies whether to include page numbers in a table of contents.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        includePageNumbers?: boolean;
        /**
         * If provided, specifies the ending heading level for a table of contents and must be a value from 1 to 9. Must be greater than `upperHeadingLevel`.
                    Corresponds to the ending value used with the `\o` switch for a {@link https://support.microsoft.com/office/1f538bc4-60e6-4854-9f64-67754d78d05c | Table of Contents (TOC) field}.
                    The default value is `9`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lowerHeadingLevel?: number;
        /**
         * If provided, specifies whether page numbers in a table of contents are aligned with the right margin.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rightAlignPageNumbers?: boolean;
        /**
         * If provided, specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for a table of contents.
                    Corresponds to the `\f` switch for a {@link https://support.microsoft.com/office/1f538bc4-60e6-4854-9f64-67754d78d05c | Table of Contents (TOC) field}. For example, "T" indicates a table of contents includes TC fields that use the table identifier T.
                    If this argument is omitted, TC fields aren't used.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableId?: string;
        /**
         * If provided, specifies the starting heading level for a table of contents and must be a value from 1 to 9. Should be smaller than `lowerHeadingLevel`.
                    Corresponds to the starting value used with the `\o` switch for a {@link https://support.microsoft.com/office/1f538bc4-60e6-4854-9f64-67754d78d05c | Table of Contents (TOC) field}.
                    The default value is `1`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        upperHeadingLevel?: number;
        /**
         * If provided, specifies whether to use built-in heading styles to create a table of contents.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useBuiltInHeadingStyles?: boolean;
        /**
         * If provided, specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are used to create a table of contents.
                    Use the {@link Word.TableOfContentsCollection | TableOfContentsCollection.markTocEntry} method to mark entries to be included in a table of contents.
                    The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useFields?: boolean;
        /**
         * If provided, specifies whether entries in a table of contents should be formatted as hyperlinks when the document is published to the web.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useHyperlinksOnWeb?: boolean;
        /**
         * If provided, specifies whether to use outline levels to create a table of contents.
                    The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useOutlineLevels?: boolean;
    }
    /**
     * Specifies the options for inserting a {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) field}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableOfContentsMarkEntryOptions {
        /**
         * If provided, specifies the text that appears in a table of contents or table of figures.
                    To indicate a subentry, include the main entry text and the subentry text, separated by a colon (":") (e.g., "Introduction:The Product").
                    When the `entryAutoText` property is set, this property is ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        entry?: string;
        /**
         * If provided, specifies the AutoText entry name that includes text for the table of figures, or table of contents.
                    When this property is used, the `entry` property is ignored.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        entryAutoText?: string;
        /**
         * If provided, specifies the level for the entry in a table of contents or table of figures and should be a value from 1 to 9.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        level?: number;
        /**
         * If provided, specifies a one-letter identifier for a table of contents or table of figures (e.g., "i" for an "illustration").
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableId?: string;
    }
    /**
     * Represents a table of figures in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TableOfFigures extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the additional styles used for the table of figures. The default "Heading 1" - "Heading 9" styles aren't included in this collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly additionalHeadingStyles: Word.HeadingStyleCollection;
        /**
         * Gets the portion of a document that is this table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Specifies whether built-in heading styles are used for the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areBuiltInHeadingStylesUsed: boolean;
        /**
         * Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areFieldsUsed: boolean;
        /**
         * Specifies whether entries in the table of figures should be formatted as hyperlinks when publishing to the web.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areHyperlinksUsedOnWeb: boolean;
        /**
         * Specifies whether the page numbers in the table of figures should be hidden when publishing to the web.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arePageNumbersHiddenOnWeb: boolean;
        /**
         * Specifies whether page numbers are included in the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arePageNumbersIncluded: boolean;
        /**
         * Specifies whether page numbers are aligned with the right margin in the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arePageNumbersRightAligned: boolean;
        /**
         * Specifies the label that identifies the items to be included in the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        captionLabel: string;
        /**
         * Specifies whether the caption label and caption number are included in the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isLabelIncluded: boolean;
        /**
         * Specifies the ending heading level for the table of figures. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lowerHeadingLevel: number;
        /**
         * Specifies the character between entries and their page numbers in the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tabLeader: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
        /**
         * Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableId: string;
        /**
         * Specifies the starting heading level for the table of figures. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        upperHeadingLevel: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableOfFiguresUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TableOfFigures): void;
        /**
         * Deletes this table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Updates the entire table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
        /**
         * Updates only the page numbers for items in this table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        updatePageNumbers(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableOfFiguresLoadOptions): Word.TableOfFigures;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableOfFigures;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableOfFigures;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableOfFigures;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableOfFigures;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableOfFigures` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableOfFiguresData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableOfFiguresData;
    }
    /**
     * Represents a collection of {@link Word.TableOfFigures} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class TableOfFiguresCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TableOfFigures[];
        /**
         * Adds a table of figures to the document at the specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range where the table of figures will be added. The table of figures replaces the range if the range isn't collapsed.
         * @param options - Optional. The options for configuring the table of figures.
         */
        add(range: Word.Range, options?: Word.TableOfFiguresAddOptions): Word.TableOfFigures;
        /**
         * Inserts a {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) field} after the specified range for marking entries in a table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range where the TC field will be inserted.
         * @param options - Optional. The options for marking the entry.
         */
        markTocEntry(range: Word.Range, options?: Word.TableOfContentsMarkEntryOptions): Word.Field;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableOfFiguresCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TableOfFiguresCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableOfFiguresCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TableOfFiguresCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableOfFiguresCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableOfFiguresCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableOfFiguresCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableOfFiguresCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TableOfFiguresCollectionData;
    }
    /**
     * Specifies the options for adding to a {@link Word.TableOfFiguresCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableOfFiguresAddOptions {
        /**
         * If provided, specifies the string names of additional styles to use for the table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        addedStyles?: string;
        /**
         * If provided, specifies the label that identifies the items to include in a table of figures.
                    Corresponds to the `\c` switch for a {@link https://support.microsoft.com/office/1f538bc4-60e6-4854-9f64-67754d78d05c | Table of Contents (TOC) field}.
                    The default value is "Figure".
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        captionLabel?: string;
        /**
         * If provided, specifies whether the page numbers in the table of figures should be hidden when publishing to the web.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hidePageNumbersOnWeb?: boolean;
        /**
         * If provided, specifies whether to include the caption label and caption number in a table of figures.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        includeLabel?: boolean;
        /**
         * If provided, specifies whether page numbers are included in a table of figures.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        includePageNumbers?: boolean;
        /**
         * If provided, specifies the ending heading level for a table of figures when `useBuiltInHeadingStyles` is set to `true`. Should be a value from 1 to 9 and greater than `upperHeadingLevel`.
                    Corresponds to the ending value used with the `\o` switch for a {@link https://support.microsoft.com/office/1f538bc4-60e6-4854-9f64-67754d78d05c | Table of Contents (TOC) field}.
                    The default value is `9`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lowerHeadingLevel?: number;
        /**
         * If provided, specifies whether to align page numbers with the right margin in a table of figures.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rightAlignPageNumbers?: boolean;
        /**
         * If provided, specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for a table of figures.
                    Corresponds to the `\f` switch for a {@link https://support.microsoft.com/office/1f538bc4-60e6-4854-9f64-67754d78d05c | Table of Contents (TOC) field}. For example, "T" indicates a table of figures includes TC fields that use the table identifier T.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableId?: string;
        /**
         * If provided, specifies the starting heading level for a table of figures when `useBuiltInHeadingStyles` is set to `true`. Should be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
                    Corresponds to the starting value used with the `\o` switch for a {@link https://support.microsoft.com/office/1f538bc4-60e6-4854-9f64-67754d78d05c | Table of Contents (TOC) field}.
                    The default value is `1`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        upperHeadingLevel?: number;
        /**
         * If provided, specifies whether to use built-in heading styles to create a table of figures.
                    The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useBuiltInHeadingStyles?: boolean;
        /**
         * If provided, specifies whether to use {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} to create a table of figures.
                    Use the {@link Word.TableOfFiguresCollection | TableOfFiguresCollection.markTocEntry} method to mark entries to include in a table of figures.
                    The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useFields?: boolean;
        /**
         * If provided, specifies whether entries in a table of figures should be formatted as hyperlinks when the document is published to the web.
                    The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useHyperlinksOnWeb?: boolean;
    }
    /**
     * Represents a row in a Word document.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class TableRow extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets cells.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly cells: Word.TableCellCollection;
        /**
         * Gets the collection of endnotes in the table row.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly endnotes: Word.NoteItemCollection;
        /**
         * Gets the collection of `Field` objects in the table row.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        readonly fields: Word.FieldCollection;
        /**
         * Gets the font. Use this to get and set font name, size, color, and other properties.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly font: Word.Font;
        /**
         * Gets the collection of footnotes in the table row.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        readonly footnotes: Word.NoteItemCollection;
        /**
         * Gets parent table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTable: Word.Table;
        /**
         * Returns the `Range` object that represents the table row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Returns the `ShadingUniversal` object that represents the shading of the table row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Gets the number of cells in the row.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly cellCount: number;
        /**
         * Specifies the horizontal alignment of every cell in the row. The value can be `left`, `centered`, `right`, or `justified`.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        horizontalAlignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
        /**
         * Checks whether the row is a header row. To set the number of header rows, use `headerRowCount` on the `Table` object.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly isHeader: boolean;
        /**
         * Specifies the preferred height of the row in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        preferredHeight: number;
        /**
         * Gets the index of the row in its parent table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly rowIndex: number;
        /**
         * Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        shadingColor: string;
        /**
         * Specifies the text values in the row, as a 2D JavaScript array.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        values: string[][];
        /**
         * Specifies the vertical alignment of the cells in the row. The value can be `top`, `center`, or `bottom`.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        verticalAlignment: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableRowUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TableRow): void;
        /**
         * Clears the contents of the row.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        clear(): void;
        /**
         * Converts the table row to text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. An object that specifies the options for converting the table row to text.
         */
        convertToText(options?: Word.TableConvertToTextOptions): Word.Range;
        /**
         * Deletes the entire row.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        delete(): void;
        /**
         * Gets the border style of the cells in the row.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param borderLocation - The border location.
         */
        getBorder(borderLocation: Word.BorderLocation): Word.TableBorder;
        /**
         * Gets the border style of the cells in the row.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param borderLocation - The border location.
         */
        getBorder(borderLocation: "Top" | "Left" | "Bottom" | "Right" | "InsideHorizontal" | "InsideVertical" | "Inside" | "Outside" | "All"): Word.TableBorder;
        /**
         * Gets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         */
        getCellPadding(cellPaddingLocation: Word.CellPaddingLocation): OfficeExtension.ClientResult<number>;
        /**
         * Gets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         */
        getCellPadding(cellPaddingLocation: "Top" | "Left" | "Bottom" | "Right"): OfficeExtension.ClientResult<number>;
        /**
         * Gets the next row. Throws an `ItemNotFound` error if this row is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNext(): Word.TableRow;
        /**
         * Gets the next row. If this row is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNextOrNullObject(): Word.TableRow;
        /**
         * Inserts a content control on the row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        insertContentControl(): Word.ContentControl;
        /**
         * Inserts rows using this row as a template. If values are specified, inserts the values into the new rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param insertLocation - Where the new rows should be inserted, relative to the current row. It must be `before` or `after`.
         * @param rowCount - Number of rows to add.
         * @param values - Optional. Strings to insert in the new rows, specified as a 2D array. The number of cells in each row must not exceed the number of cells in the existing row.
         */
        insertRows(insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After", rowCount: number, values?: string[][]): Word.TableRowCollection;
        /**
         * Merges the row into one cell.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        merge(): Word.TableCell;
        /**
         * Performs a search with the specified search options on the scope of the row. The search results are a collection of `Range` objects.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param searchText - The search text.
         * @param searchOptions - Optional. Options for the search.
         */
        search(searchText: string, searchOptions?: Word.SearchOptions | {
            ignorePunct?: boolean;
            ignoreSpace?: boolean;
            matchCase?: boolean;
            matchPrefix?: boolean;
            matchSuffix?: boolean;
            matchWholeWord?: boolean;
            matchWildcards?: boolean;
        }): Word.RangeCollection;
        /**
         * Selects the row and navigates the Word UI to it.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: Word.SelectionMode): void;
        /**
         * Selects the row and navigates the Word UI to it.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param selectionMode - Optional. The selection mode must be `select`, `start`, or `end`. `select` is the default.
         */
        select(selectionMode?: "Select" | "Start" | "End"): void;
        /**
         * Sets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         * @param cellPadding - The cell padding.
         */
        setCellPadding(cellPaddingLocation: Word.CellPaddingLocation, cellPadding: number): void;
        /**
         * Sets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         * @param cellPadding - The cell padding.
         */
        setCellPadding(cellPaddingLocation: "Top" | "Left" | "Bottom" | "Right", cellPadding: number): void;
        /**
         * Sets the height of the row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param rowHeight - The height of the row, in points.
         * @param heightRule - The rule for determining the height of the table row.
         */
        setHeight(rowHeight: number, heightRule: Word.RowHeightRule): void;
        /**
         * Sets the height of the row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param rowHeight - The height of the row, in points.
         * @param heightRule - The rule for determining the height of the table row.
         */
        setHeight(rowHeight: number, heightRule: "Auto" | "AtLeast" | "Exactly"): void;
        /**
         * Sets the left indent for the table row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param leftIndent - The distance (in points) between the current left edge of the table row and the desired left edge.
         * @param rulerStyle - The ruler style to apply.
         */
        setLeftIndent(leftIndent: number, rulerStyle: Word.RulerStyle): void;
        /**
         * Sets the left indent for the table row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param leftIndent - The distance (in points) between the current left edge of the table row and the desired left edge.
         * @param rulerStyle - The ruler style to apply.
         */
        setLeftIndent(leftIndent: number, rulerStyle: "None" | "Proportional" | "FirstColumn" | "SameWidth"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableRowLoadOptions): Word.TableRow;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableRow;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableRow;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableRow;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableRow;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableRow` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableRowData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableRowData;
    }
    /**
     * Contains the collection of the document's {@link Word.TableRow} objects.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class TableRowCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TableRow[];
        /**
         * Converts rows in a table to text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. An object that specifies the options for converting the table rows to text.
         * @returns A `Range` object that represents the converted text.
         */
        convertToText(options?: Word.TableConvertToTextOptions): Word.Range;
        /**
         * Deletes the table rows.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Adjusts the height of the rows so that they're equal.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        distributeHeight(): void;
        /**
         * Gets the first row in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.TableRow;
        /**
         * Gets the first row in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.TableRow;
        /**
         * Selects the table rows.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        select(): void;
        /**
         * Sets the height of the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param rowHeight - The height of the row, in points.
         * @param heightRule - The rule for determining the height of the specified rows.
         */
        setHeight(rowHeight: number, heightRule: Word.RowHeightRule): void;
        /**
         * Sets the height of the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param rowHeight - The height of the row, in points.
         * @param heightRule - The rule for determining the height of the specified rows.
         */
        setHeight(rowHeight: number, heightRule: "Auto" | "AtLeast" | "Exactly"): void;
        /**
         * Sets the left indent for the table row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param leftIndent - The distance (in points) between the current left edge of the specified rows and the desired left edge.
         * @param rulerStyle - The ruler style to apply.
         */
        setLeftIndent(leftIndent: number, rulerStyle: Word.RulerStyle): void;
        /**
         * Sets the left indent for the table row.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param leftIndent - The distance (in points) between the current left edge of the specified rows and the desired left edge.
         * @param rulerStyle - The ruler style to apply.
         */
        setLeftIndent(leftIndent: number, rulerStyle: "None" | "Proportional" | "FirstColumn" | "SameWidth"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableRowCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TableRowCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableRowCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TableRowCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableRowCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableRowCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableRowCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableRowCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TableRowCollectionData;
    }
    /**
     * Represents a table cell in a Word document.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class TableCell extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the `Body` object of the cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly body: Word.Body;
        /**
         * Returns the `TableColumn` object that represents the table column that contains this cell.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly column: Word.TableColumn;
        /**
         * Gets the parent row of the cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentRow: Word.TableRow;
        /**
         * Gets the parent table of the cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly parentTable: Word.Table;
        /**
         * Returns the `ShadingUniversal` object that represents the shading of the table cell.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Gets the index of the cell in its row.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly cellIndex: number;
        /**
         * Specifies the width of the cell's column in points. This is applicable to uniform tables.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        columnWidth: number;
        /**
         * Specifies the horizontal alignment of the cell. The value can be `left`, `centered`, `right`, or `justified`.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        horizontalAlignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
        /**
         * Gets the index of the cell's row in the table.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly rowIndex: number;
        /**
         * Specifies the shading color of the cell. Color is specified in "#RRGGBB" format or by using the color name.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        shadingColor: string;
        /**
         * Specifies the text of the cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        value: string;
        /**
         * Specifies the vertical alignment of the cell. The value can be `top`, `center`, or `bottom`.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        verticalAlignment: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
        /**
         * Gets the width of the cell in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        readonly width: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableCellUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TableCell): void;
        /**
         * Inserts a {@link https://support.microsoft.com/office/32d5c9de-3516-4ec3-80ed-d1fc2b5bc21d | = (Formula) field} that calculates and displays the sum of the values in table cells above or to the left of the cell specified in the expression.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        autoSum(): void;
        /**
         * Deletes the table cell and optionally controls how the remaining cells are shifted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param shiftCells - Optional. Specifies how the remaining cells are shifted after the deletion. The default is `shiftLeft`.
         */
        delete(shiftCells: any): void;
        /**
         * Deletes the column containing this cell. This is applicable to uniform tables.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        deleteColumn(): void;
        /**
         * Deletes the row containing this cell.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        deleteRow(): void;
        /**
         * Inserts a {@link https://support.microsoft.com/office/32d5c9de-3516-4ec3-80ed-d1fc2b5bc21d | = (Formula) field} that contains the specified formula into a table cell.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. An object that specifies the options for the formula.
         */
        formula(options?: Word.TableCellFormulaOptions): void;
        /**
         * Gets the border style for the specified border.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param borderLocation - The border location.
         */
        getBorder(borderLocation: Word.BorderLocation): Word.TableBorder;
        /**
         * Gets the border style for the specified border.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param borderLocation - The border location.
         */
        getBorder(borderLocation: "Top" | "Left" | "Bottom" | "Right" | "InsideHorizontal" | "InsideVertical" | "Inside" | "Outside" | "All"): Word.TableBorder;
        /**
         * Gets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         */
        getCellPadding(cellPaddingLocation: Word.CellPaddingLocation): OfficeExtension.ClientResult<number>;
        /**
         * Gets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         */
        getCellPadding(cellPaddingLocation: "Top" | "Left" | "Bottom" | "Right"): OfficeExtension.ClientResult<number>;
        /**
         * Gets the next cell. Throws an `ItemNotFound` error if this cell is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNext(): Word.TableCell;
        /**
         * Gets the next cell. If this cell is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getNextOrNullObject(): Word.TableCell;
        /**
         * Adds columns to the left or right of the cell, using the cell's column as a template. This is applicable to uniform tables. The string values, if specified, are set in the newly inserted rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param insertLocation - It must be `before` or `after`.
         * @param columnCount - Number of columns to add.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        insertColumns(insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After", columnCount: number, values?: string[][]): void;
        /**
         * Inserts rows above or below the cell, using the cell's row as a template. The string values, if specified, are set in the newly inserted rows.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param insertLocation - It must be `before` or `after`.
         * @param rowCount - Number of rows to add.
         * @param values - Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         */
        insertRows(insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" | "After", rowCount: number, values?: string[][]): Word.TableRowCollection;
        /**
         * Merges this table cell with the specified table cell.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param mergeTo - The cell to be merged with.
         */
        merge(mergeTo: Word.TableCell): void;
        /**
         * Selects the table cell.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        select(): void;
        /**
         * Sets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         * @param cellPadding - The cell padding.
         */
        setCellPadding(cellPaddingLocation: Word.CellPaddingLocation, cellPadding: number): void;
        /**
         * Sets cell padding in points.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         *
         * @param cellPaddingLocation - The cell padding location must be `top`, `left`, `bottom`, or `right`.
         * @param cellPadding - The cell padding.
         */
        setCellPadding(cellPaddingLocation: "Top" | "Left" | "Bottom" | "Right", cellPadding: number): void;
        /**
         * Splits the cell into the specified number of rows and columns.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * @param rowCount - The number of rows to split into. Must be a divisor of the number of underlying rows.
         * @param columnCount - The number of columns to split into.
         */
        split(rowCount: number, columnCount: number): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableCellLoadOptions): Word.TableCell;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableCell;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableCell;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableCell;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableCell;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableCell` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableCellData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableCellData;
    }
    /**
     * Contains the collection of the document's {@link Word.TableCell} objects.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class TableCellCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TableCell[];
        /**
         * Changes the width of a table column to accommodate the width of the text without changing the way text wraps in the cells.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        autoFit(): void;
        /**
         * Deletes the table cells and optionally controls how the remaining cells are shifted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param shiftCells - Optional. Specifies how the remaining cells are shifted after the deletion. The default is `shiftLeft`.
         */
        delete(shiftCells?: Word.DeleteCells): void;
        /**
         * Deletes the table cells and optionally controls how the remaining cells are shifted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param shiftCells - Optional. Specifies how the remaining cells are shifted after the deletion. The default is `shiftLeft`.
         */
        delete(shiftCells?: "ShiftLeft" | "ShiftUp" | "EntireRow" | "EntireColumn"): void;
        /**
         * Adjusts the height of the specified cells so that they are equal.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        distributeHeight(): void;
        /**
         * Adjusts the width of the specified cells so that they are equal.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        distributeWidth(): void;
        /**
         * Gets the first table cell in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirst(): Word.TableCell;
        /**
         * Gets the first table cell in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        getFirstOrNullObject(): Word.TableCell;
        /**
         * Merges the specified cells into a single cell.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        merge(): void;
        /**
         * Sets the height of the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param rowHeight - The height of the row to set, in points.
         * @param heightRule - The rule for determining the height of the specified rows.
         */
        setHeight(rowHeight: number, heightRule: Word.RowHeightRule): void;
        /**
         * Sets the height of the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param rowHeight - The height of the row to set, in points.
         * @param heightRule - The rule for determining the height of the specified rows.
         */
        setHeight(rowHeight: number, heightRule: "Auto" | "AtLeast" | "Exactly"): void;
        /**
         * Sets the width of the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param columnWidth - The width of the row to set, in points.
         * @param rulerStyle - The ruler style to apply.
         */
        setWidth(columnWidth: number, rulerStyle: Word.RulerStyle): void;
        /**
         * Sets the width of the cells in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param columnWidth - The width of the row to set, in points.
         * @param rulerStyle - The ruler style to apply.
         */
        setWidth(columnWidth: number, rulerStyle: "None" | "Proportional" | "FirstColumn" | "SameWidth"): void;
        /**
         * Splits this range of table cells.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for splitting the table cells.
         */
        split(options?: Word.TableCellCollectionSplitOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableCellCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TableCellCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableCellCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TableCellCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableCellCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableCellCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableCellCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableCellCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TableCellCollectionData;
    }
    /**
     * Specifies the border style.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    export class TableBorder extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the table border color.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        color: string;
        /**
         * Specifies the type of the table border.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        type: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
        /**
         * Specifies the width, in points, of the table border. Not applicable to table border types that have fixed widths.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        width: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TableBorderUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TableBorder): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TableBorderLoadOptions): Word.TableBorder;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TableBorder;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TableBorder;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TableBorder;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TableBorder;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TableBorder` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TableBorderData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TableBorderData;
    }
    /**
     * Represents a document template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class Template extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlockEntryCollection` object that represents the collection of building block entries in the template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly buildingBlockEntries: Word.BuildingBlockEntryCollection;
        /**
         * Returns a `BuildingBlockTypeItemCollection` object that represents the collection of building block types that are contained in the template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly buildingBlockTypes: Word.BuildingBlockTypeItemCollection;
        /**
         * Returns a `ListTemplateCollection` object that represents all the list templates in the template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly listTemplates: Word.ListTemplateCollection;
        /**
         * Specifies the East Asian language to use when breaking lines of text in the document or template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        farEastLineBreakLanguage: Word.FarEastLineBreakLanguageId | "TraditionalChinese" | "Japanese" | "Korean" | "SimplifiedChinese";
        /**
         * Specifies the line break control level for the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        farEastLineBreakLevel: Word.FarEastLineBreakLevel | "Normal" | "Strict" | "Custom";
        /**
         * Returns the name of the template, including the drive or Web path.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly fullName: string;
        /**
         * Specifies whether the spelling and grammar checker ignores documents based on this template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hasNoProofing: boolean;
        /**
         * Specifies the character spacing adjustment for the template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        justificationMode: Word.JustificationMode | "Expand" | "Compress" | "CompressKana";
        /**
         * Specifies if Microsoft Word kerns half-width Latin characters and punctuation marks in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        kerningByAlgorithm: boolean;
        /**
         * Specifies a `LanguageId` value that represents the language in the template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageId: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Specifies an East Asian language for the language in the template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageIdFarEast: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Returns only the name of the document template (excluding any path or other location information).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly name: string;
        /**
         * Specifies the kinsoku characters after which Microsoft Word will not break a line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        noLineBreakAfter: string;
        /**
         * Specifies the kinsoku characters before which Microsoft Word will not break a line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        noLineBreakBefore: string;
        /**
         * Returns the path to the document template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly path: string;
        /**
         * Specifies `true` if the template has not changed since it was last saved, `false` if Microsoft Word displays a prompt to save changes when the document is closed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        saved: boolean;
        /**
         * Returns the template type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly type: Word.TemplateType | "Normal" | "Global" | "Attached";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TemplateUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Template): void;
        /**
         * Saves the template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        save(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TemplateLoadOptions): Word.Template;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Template;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Template;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Template;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Template;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Template` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TemplateData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TemplateData;
    }
    /**
     * Contains a collection of {@link Word.Template} objects that represent all the templates that are currently available.
                This collection includes open templates, templates attached to open documents, and global templates loaded in the **Templates and Add-ins** dialog box.
                To learn how to access this dialog in the Word UI, see {@link https://support.microsoft.com/office/2479fe53-f849-4394-88bb-2a6e2a39479d | Load or unload a template or add-in program}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class TemplateCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Template[];
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets a `Template` object by its index in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param index - The index of the item to retrieve.
         */
        getItemAt(index: number): Word.Template;
        /**
         * Imports the building blocks for all templates into Microsoft Word.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        importBuildingBlocks(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TemplateCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TemplateCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TemplateCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TemplateCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TemplateCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TemplateCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TemplateCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TemplateCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TemplateCollectionData;
    }
    /**
     * Represents a tracked change in a Word document.
     *
     * @remarks
     * [Api set: WordApi 1.6]
     */
    export class TrackedChange extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the author of the tracked change.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        readonly author: string;
        /**
         * Gets the date of the tracked change.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        readonly date: Date;
        /**
         * Gets the text of the tracked change.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        readonly text: string;
        /**
         * Gets the type of the tracked change.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        readonly type: Word.TrackedChangeType | "None" | "Added" | "Deleted" | "Formatted";
        /**
         * Accepts the tracked change.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        accept(): void;
        /**
         * Gets the next tracked change. Throws an `ItemNotFound` error if this tracked change is the last one.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        getNext(): Word.TrackedChange;
        /**
         * Gets the next tracked change. If this tracked change is the last one, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        getNextOrNullObject(): Word.TrackedChange;
        /**
         * Gets the range of the tracked change.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         *
         * @param rangeLocation - Optional. Specifies the part of the tracked change to get the range for. If not specified, the whole range of the tracked change is returned.
         */
        getRange(rangeLocation?: Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end | "Whole" | "Start" | "End"): Word.Range;
        /**
         * Rejects the tracked change.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        reject(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TrackedChangeLoadOptions): Word.TrackedChange;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TrackedChange;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TrackedChange;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TrackedChange;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TrackedChange;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TrackedChange` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TrackedChangeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TrackedChangeData;
    }
    /**
     * Contains a collection of {@link Word.TrackedChange} objects.
     *
     * @remarks
     * [Api set: WordApi 1.6]
     */
    export class TrackedChangeCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TrackedChange[];
        /**
         * Accepts all the tracked changes in the collection.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        acceptAll(): void;
        /**
         * Gets the first TrackedChange in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        getFirst(): Word.TrackedChange;
        /**
         * Gets the first TrackedChange in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        getFirstOrNullObject(): Word.TrackedChange;
        /**
         * Rejects all the tracked changes in the collection.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        rejectAll(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TrackedChangeCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TrackedChangeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TrackedChangeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TrackedChangeCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TrackedChangeCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TrackedChangeCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TrackedChangeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TrackedChangeCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TrackedChangeCollectionData;
    }
    /**
     * Contains the view attributes (such as show all, field shading, and table gridlines) for a window or pane.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class View extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the instance of a `RevisionsFilter` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly revisionsFilter: Word.RevisionsFilter;
        /**
         * Specifies whether all nonprinting characters are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areAllNonprintingCharactersDisplayed: boolean;
        /**
         * Gets whether background colors and images are shown when the document is displayed in print layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areBackgroundsDisplayed: boolean;
        /**
         * Gets whether square brackets are displayed at the beginning and end of each bookmark.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areBookmarksIndicated: boolean;
        /**
         * Specifies whether Microsoft Word displays the comments in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areCommentsDisplayed: boolean;
        /**
         * Specifies whether Microsoft Word displays connecting lines from the text to the revision and comment balloons.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areConnectingLinesToRevisionsBalloonDisplayed: boolean;
        /**
         * Gets whether crop marks are shown in the corners of pages to indicate where margins are located.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areCropMarksDisplayed: boolean;
        /**
         * Gets whether objects created with the drawing tools are displayed in print layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areDrawingsDisplayed: boolean;
        /**
         * Specifies whether shading is applied to the ranges in the document that users have permission to modify.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areEditableRangesShaded: boolean;
        /**
         * Specifies whether field codes are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areFieldCodesDisplayed: boolean;
        /**
         * Specifies whether Microsoft Word displays formatting changes made to the document with Track Changes enabled.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areFormatChangesDisplayed: boolean;
        /**
         * Specifies whether handwritten ink annotations are shown or hidden.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areInkAnnotationsDisplayed: boolean;
        /**
         * Specifies whether Microsoft Word displays insertions and deletions made to the document with Track Changes enabled.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areInsertionsAndDeletionsDisplayed: boolean;
        /**
         * Gets whether lines wrap at the right edge of the document window rather than at the right margin or the right column boundary.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areLinesWrappedToWindow: boolean;
        /**
         * Gets whether object anchors are displayed next to items that can be positioned in print layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areObjectAnchorsDisplayed: boolean;
        /**
         * Gets whether Microsoft Word displays optional line breaks.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areOptionalBreaksDisplayed: boolean;
        /**
         * Gets whether optional hyphens are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areOptionalHyphensDisplayed: boolean;
        /**
         * Gets whether other authors' presence should be visible in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areOtherAuthorsVisible: boolean;
        /**
         * Gets whether the top and bottom margins and the gray area between pages in the document are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly arePageBoundariesDisplayed: boolean;
        /**
         * Gets whether paragraph marks are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areParagraphsMarksDisplayed: boolean;
        /**
         * Gets whether blank boxes are displayed as placeholders for pictures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly arePicturePlaceholdersDisplayed: boolean;
        /**
         * Specifies whether Microsoft Word displays revisions and comments made to the document with Track Changes enabled.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areRevisionsAndCommentsDisplayed: boolean;
        /**
         * Gets whether space characters are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areSpacesIndicated: boolean;
        /**
         * Specifies whether table gridlines are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        areTableGridlinesDisplayed: boolean;
        /**
         * Gets whether tab characters are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areTabsDisplayed: boolean;
        /**
         * Gets whether dotted lines are displayed around page margins, text columns, objects, and frames in print layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly areTextBoundariesDisplayed: boolean;
        /**
         * Specifies the column width in Reading mode.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        columnWidth: Word.ColumnWidth | "Narrow" | "Default" | "Wide";
        /**
         * Gets on-screen shading for fields.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly fieldShading: Word.FieldShading | "Never" | "Always" | "WhenSelected";
        /**
         * Specifies whether all the text in a window is displayed in the same sans-serif font with minimal formatting to speed up display.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isDraft: boolean;
        /**
         * Specifies whether only the first line of body text is shown in outline view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isFirstLineOnlyDisplayed: boolean;
        /**
         * Specifies whether character formatting is visible in outline view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isFormatDisplayed: boolean;
        /**
         * Specifies whether the window is in full-screen view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isFullScreen: boolean;
        /**
         * Gets whether text formatted as hidden text is displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isHiddenTextDisplayed: boolean;
        /**
         * Gets whether highlight formatting is displayed and printed with the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isHighlightingDisplayed: boolean;
        /**
         * Specifies whether the document is in conflict mode view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isInConflictMode: boolean;
        /**
         * Specifies whether Microsoft Word is in Panning mode.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isInPanning: boolean;
        /**
         * Specifies whether the document is being viewed in reading layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isInReadingLayout: boolean;
        /**
         * Specifies whether mail merge data is displayed instead of mail merge fields.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isMailMergeDataView: boolean;
        /**
         * Specifies whether the text in the document is visible when the header and footer areas are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isMainTextLayerVisible: boolean;
        /**
         * Specifies whether the pointer is displayed as a magnifying glass in print preview.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isPointerShownAsMagnifier: boolean;
        /**
         * Specifies whether pages displayed in reading layout view are displayed using the same layout as printed pages.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isReadingLayoutActualView: boolean;
        /**
         * Specifies whether XML tags are visible in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isXmlMarkupVisible: boolean;
        /**
         * Specifies the display mode for tracked changes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        markupMode: Word.RevisionsMode | "Balloon" | "Inline" | "Mixed";
        /**
         * Specifies the page color in Reading mode.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pageColor: Word.PageColor | "None" | "Sepia" | "Inverse";
        /**
         * Specifies the page movement type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pageMovementType: Word.PageMovementType | "Vertical" | "SideToSide";
        /**
         * Specifies whether margins are visible or hidden when the document is viewed in Full Screen Reading view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readingLayoutTruncateMargins: Word.ReadingLayoutMargin | "Automatic" | "Suppress" | "Full";
        /**
         * Gets whether Word displays revision balloons in the left or right margin in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly revisionsBalloonSide: Word.RevisionsBalloonMargin | "Left" | "Right";
        /**
         * Specifies the width of the revision balloons.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        revisionsBalloonWidth: number;
        /**
         * Specifies how Microsoft Word measures the width of revision balloons.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        revisionsBalloonWidthType: Word.RevisionsBalloonWidthType | "Percent" | "Points";
        /**
         * Specifies the document element displayed in print layout view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        seekView: Word.SeekView | "MainDocument" | "PrimaryHeader" | "FirstPageHeader" | "EvenPagesHeader" | "PrimaryFooter" | "FirstPageFooter" | "EvenPagesFooter" | "Footnotes" | "Endnotes" | "CurrentPageHeader" | "CurrentPageFooter";
        /**
         * Specifies the active window pane.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        splitSpecial: Word.SpecialPane | "None" | "PrimaryHeader" | "FirstPageHeader" | "EvenPagesHeader" | "PrimaryFooter" | "FirstPageFooter" | "EvenPagesFooter" | "Footnotes" | "Endnotes" | "FootnoteContinuationNotice" | "FootnoteContinuationSeparator" | "FootnoteSeparator" | "EndnoteContinuationNotice" | "EndnoteContinuationSeparator" | "EndnoteSeparator" | "Comments" | "CurrentPageHeader" | "CurrentPageFooter" | "Revisions" | "RevisionsHoriz" | "RevisionsVert";
        /**
         * Specifies the view type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        type: Word.ViewType | "Normal" | "Outline" | "Print" | "PrintPreview" | "Master" | "Web" | "Reading" | "Conflict";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ViewUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.View): void;
        /**
         * Collapses all the headings in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        collapseAllHeadings(): void;
        /**
         * Collapses the text under the selection or the specified range by one heading level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - A `Range` object that specifies the range to collapse.
         */
        collapseOutline(range: Word.Range): void;
        /**
         * Expands all the headings in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        expandAllHeadings(): void;
        /**
         * Expands the text under the selection by one heading level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - A `Range` object that specifies the range to expand.
         */
        expandOutline(range: Word.Range): void;
        /**
         * Moves to the next header or footer, depending on whether a header or footer is displayed in the view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        nextHeaderFooter(): void;
        /**
         * Moves to the previous header or footer, depending on whether a header or footer is displayed in the view.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        previousHeaderFooter(): void;
        /**
         * Switches between showing all text (headings and body text) and showing only headings.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        showAllHeadings(): void;
        /**
         * Shows all headings up to the specified heading level and hides subordinate headings and body text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param level - The heading level to show.
         */
        showHeading(level: number): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ViewLoadOptions): Word.View;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.View;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.View;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.View;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.View;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.View` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ViewData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ViewData;
    }
    /**
     * Represents a shape in the header, footer, or document body. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class Shape extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Represents the `Body` object of the shape. Only applies to text boxes and geometric shapes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly body: Word.Body;
        /**
         * Gets the canvas associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `canvas`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly canvas: Word.Canvas;
        /**
         * Returns the fill formatting of the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly fill: Word.ShapeFill;
        /**
         * Gets the top-level parent canvas shape of this child shape. It will be null if it isn't a child shape of a canvas.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly parentCanvas: Word.Shape;
        /**
         * Gets the top-level parent group shape of this child shape. It will be null if it isn't a child shape of a group.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly parentGroup: Word.Shape;
        /**
         * Gets the shape group associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `groupShape`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly shapeGroup: Word.ShapeGroup;
        /**
         * Gets the `TextFrame` object of the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly textFrame: Word.TextFrame;
        /**
         * Returns the text wrap formatting of the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly textWrap: Word.ShapeTextWrap;
        /**
         * Specifies whether a given shape can overlap other shapes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        allowOverlap: boolean;
        /**
         * Specifies a string that represents the alternative text associated with the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        altTextDescription: string;
        /**
         * The geometric shape type of the shape. It will be null if isn't a geometric shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        geometricShapeType: Word.GeometricShapeType | "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus";
        /**
         * The height, in points, of the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        height: number;
        /**
         * The percentage of shape height to vertical relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        heightRelative: number;
        /**
         * Gets an integer that represents the shape identifier.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly id: number;
        /**
         * Check whether this shape is a child of a group shape or a canvas shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly isChild: boolean;
        /**
         * The distance, in points, from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        left: number;
        /**
         * The relative left position as a percentage from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline or child shape, it will return 0 and can't be set.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftRelative: number;
        /**
         * Specifies if the aspect ratio of this shape is locked.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        lockAspectRatio: boolean;
        /**
         * The name of the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        name: string;
        /**
         * The relative horizontal position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        relativeHorizontalPosition: Word.RelativeHorizontalPosition | "Margin" | "Page" | "Column" | "Character" | "LeftMargin" | "RightMargin" | "InsideMargin" | "OutsideMargin";
        /**
         * The relative horizontal size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        relativeHorizontalSize: Word.RelativeSize | "Margin" | "Page" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
        /**
         * The relative vertical position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeVerticalPosition}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        relativeVerticalPosition: Word.RelativeVerticalPosition | "Margin" | "Page" | "Paragraph" | "Line" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
        /**
         * The relative vertical size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        relativeVerticalSize: Word.RelativeSize | "Margin" | "Page" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
        /**
         * Specifies the rotation, in degrees, of the shape. Not applicable to Canvas shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rotation: number;
        /**
         * The distance, in points, from the top edge of the shape to the vertical relative position (see {@link Word.RelativeVerticalPosition}). For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        top: number;
        /**
         * The relative top position as a percentage from the top edge of the shape to the vertical relative position, see {@link Word.RelativeVerticalPosition}. For an inline or child shape, it will return 0 and can't be set.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        topRelative: number;
        /**
         * Gets the shape type. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly type: Word.ShapeType | "Unsupported" | "TextBox" | "GeometricShape" | "Group" | "Picture" | "Canvas";
        /**
         * Specifies if the shape is visible. Not applicable to inline shapes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        visible: boolean;
        /**
         * The width, in points, of the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        width: number;
        /**
         * The percentage of shape width to horizontal relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        widthRelative: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ShapeUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Shape): void;
        /**
         * Deletes the shape and its content.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        delete(): void;
        /**
         * Moves the shape horizontally by the number of points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param distance - Specifies how far the shape is to be moved horizontally, in points. Use a positive value to move the shape right. Use a negative value to move the shape left.
         */
        moveHorizontally(distance: number): void;
        /**
         * Moves the shape vertically by the number of points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param distance - Specifies how far the shape is to be moved vertically, in points. Use a positive value to move the shape up. Use a negative value to move the shape down.
         */
        moveVertically(distance: number): void;
        /**
         * Scales the height of the shape by a specified factor. For images, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures are always scaled relative to their current height.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param scaleFactor - Specifies the ratio between the height of the shape after you resize it and the current or original height.
         * @param scaleType - Specifies whether the shape is scaled relative to its original or current size. The original size scaling option only works for images.
         * @param scaleFrom - Optional. Specifies which part of the shape retains its position when the shape is scaled. If omitted, it represents that the shape's upper left corner retains its position.
         */
        scaleHeight(scaleFactor: number, scaleType: Word.ShapeScaleType, scaleFrom?: Word.ShapeScaleFrom): void;
        /**
         * Scales the height of the shape by a specified factor. For images, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures are always scaled relative to their current height.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param scaleFactor - Specifies the ratio between the height of the shape after you resize it and the current or original height.
         * @param scaleType - Specifies whether the shape is scaled relative to its original or current size. The original size scaling option only works for images.
         * @param scaleFrom - Optional. Specifies which part of the shape retains its position when the shape is scaled. If omitted, it represents that the shape's upper left corner retains its position.
         */
        scaleHeight(scaleFactor: number, scaleType: "CurrentSize" | "OriginalSize", scaleFrom?: "ScaleFromTopLeft" | "ScaleFromMiddle" | "ScaleFromBottomRight"): void;
        /**
         * Scales the width of the shape by a specified factor. For images, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures are always scaled relative to their current height.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param scaleFactor - Specifies the ratio between the width of the shape after you resize it and the current or original width.
         * @param scaleType - Specifies whether the shape is scaled relative to its original or current size. The original size scaling option only works for images.
         * @param scaleFrom - Optional. Specifies which part of the shape retains its position when the shape is scaled. If omitted, it represents that the shape's upper left corner retains its position.
         */
        scaleWidth(scaleFactor: number, scaleType: Word.ShapeScaleType, scaleFrom?: Word.ShapeScaleFrom): void;
        /**
         * Scales the width of the shape by a specified factor. For images, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures are always scaled relative to their current height.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param scaleFactor - Specifies the ratio between the width of the shape after you resize it and the current or original width.
         * @param scaleType - Specifies whether the shape is scaled relative to its original or current size. The original size scaling option only works for images.
         * @param scaleFrom - Optional. Specifies which part of the shape retains its position when the shape is scaled. If omitted, it represents that the shape's upper left corner retains its position.
         */
        scaleWidth(scaleFactor: number, scaleType: "CurrentSize" | "OriginalSize", scaleFrom?: "ScaleFromTopLeft" | "ScaleFromMiddle" | "ScaleFromBottomRight"): void;
        /**
         * Selects the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param selectMultipleShapes - Optional. Whether to select multiple floating shapes. The default value is `false`.
         */
        select(selectMultipleShapes?: boolean): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ShapeLoadOptions): Word.Shape;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Shape;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Shape;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Shape;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Shape;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Shape` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShapeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ShapeData;
    }
    /**
     * Represents a shape group in the document. To get the corresponding {@link Word.Shape} object, use `ShapeGroup.shape`.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class ShapeGroup extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the `Shape` object associated with the group.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly shape: Word.Shape;
        /**
         * Gets the collection of `Shape` objects. Currently, only text boxes, geometric shapes, and pictures are supported.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly shapes: Word.ShapeCollection;
        /**
         * Gets an integer that represents the shape group identifier.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly id: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ShapeGroupUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ShapeGroup): void;
        /**
         * Ungroups any grouped shapes in the specified shape group.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        ungroup(): Word.ShapeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ShapeGroupLoadOptions): Word.ShapeGroup;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ShapeGroup;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ShapeGroup;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ShapeGroup;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ShapeGroup;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ShapeGroup` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShapeGroupData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ShapeGroupData;
    }
    /**
     * Represents a canvas in the document. To get the corresponding {@link Word.Shape} object, use `Canvas.shape`.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class Canvas extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the `Shape` object associated with the canvas.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly shape: Word.Shape;
        /**
         * Gets the collection of {@link Word.Shape} objects. Currently, only text boxes, pictures, and geometric shapes are supported.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly shapes: Word.ShapeCollection;
        /**
         * Gets an integer that represents the canvas identifier.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly id: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.CanvasUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Canvas): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.CanvasLoadOptions): Word.Canvas;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Canvas;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Canvas;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Canvas;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Canvas;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Canvas` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.CanvasData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.CanvasData;
    }
    /**
     * Contains a collection of {@link Word.Shape} objects. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class ShapeCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Shape[];
        /**
         * Gets the shapes that have the specified geometric types. Only applied to geometric shapes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param types - An array of geometric shape subtypes.
         */
        getByGeometricTypes(types: Word.GeometricShapeType[]): Word.ShapeCollection;
        /**
         * Gets a shape by its identifier. Throws an `ItemNotFound` error if there isn't a shape with the identifier in this collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param id - A shape identifier.
         */
        getById(id: number): Word.Shape;
        /**
         * Gets a shape by its identifier. If there isn't a shape with the identifier in this collection, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param id - A shape identifier.
         */
        getByIdOrNullObject(id: number): Word.Shape;
        /**
         * Gets the shapes by the identifiers.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param ids - An array of shape identifiers.
         */
        getByIds(ids: number[]): Word.ShapeCollection;
        /**
         * Gets the shapes that have the specified names.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param names - An array of shape names.
         */
        getByNames(names: string[]): Word.ShapeCollection;
        /**
         * Gets the shapes that have the specified types.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param types - An array of shape types.
         */
        getByTypes(types: Word.ShapeType[]): Word.ShapeCollection;
        /**
         * Gets the first shape in this collection. Throws an `ItemNotFound` error if this collection is empty.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getFirst(): Word.Shape;
        /**
         * Gets the first shape in this collection. If this collection is empty, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        getFirstOrNullObject(): Word.Shape;
        /**
         * Groups floating shapes in this collection, inline shapes will be skipped. Returns a `Shape` object that represents the new group of shapes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        group(): Word.Shape;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ShapeCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ShapeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ShapeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ShapeCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ShapeCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ShapeCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ShapeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShapeCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ShapeCollectionData;
    }
    /**
     * Represents the fill formatting of a {@link Word.Shape} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class ShapeFill extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the shape fill background color. You can provide the value in the '#RRGGBB' format or the color name.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        backgroundColor: string;
        /**
         * Specifies the shape fill foreground color. You can provide the value in the '#RRGGBB' format or the color name.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        foregroundColor: string;
        /**
         * Specifies the transparency percentage of the fill as a value from 0.0 (opaque) through 1.0 (clear). Returns `null` if the shape type does not support transparency or the shape fill has inconsistent transparency, such as with a gradient fill type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        transparency: number;
        /**
         * Returns the fill type of the shape. See `Word.ShapeFillType` for details.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly type: Word.ShapeFillType | "NoFill" | "Solid" | "Gradient" | "Pattern" | "Picture" | "Texture" | "Mixed";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ShapeFillUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ShapeFill): void;
        /**
         * Clears the fill formatting of this shape and sets it to `Word.ShapeFillType.noFill`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        clear(): void;
        /**
         * Sets the fill formatting of the shape to a uniform color. This changes the fill type to `Word.ShapeFillType.solid`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         *
         * @param color - A string that represents the fill foreground color. You can provide the value in the '#RRGGBB' format or the color name.
         */
        setSolidColor(color: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ShapeFillLoadOptions): Word.ShapeFill;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ShapeFill;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ShapeFill;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ShapeFill;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ShapeFill;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ShapeFill` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShapeFillData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ShapeFillData;
    }
    /**
     * Represents the text frame of a {@link Word.Shape} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class TextFrame extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the automatic sizing settings for the text frame. A text frame can be set to automatically fit the text to the text frame, to automatically fit the text frame to the text, or not perform any automatic sizing.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        autoSizeSetting: Word.ShapeAutoSize | "None" | "TextToFitShape" | "ShapeToFitText" | "Mixed";
        /**
         * Specifies the bottom margin, in points, of the text frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bottomMargin: number;
        /**
         * Returns `true` if the text frame contains text, otherwise, `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        readonly hasText: boolean;
        /**
         * Specifies the left margin, in points, of the text frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftMargin: number;
        /**
         * Specifies whether the text in the text frame shouldn't rotate when the shape is rotated.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        noTextRotation: boolean;
        /**
         * Specifies the angle to which the text is oriented for the text frame. See `Word.ShapeTextOrientation` for details.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        orientation: Word.ShapeTextOrientation | "None" | "Horizontal" | "EastAsianVertical" | "Vertical270" | "Vertical" | "EastAsianHorizontalRotated" | "Mixed";
        /**
         * Specifies the right margin, in points, of the text frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rightMargin: number;
        /**
         * Specifies the top margin, in points, of the text frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        topMargin: number;
        /**
         * Specifies the vertical alignment of the text frame. See `Word.ShapeTextVerticalAlignment` for details.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        verticalAlignment: Word.ShapeTextVerticalAlignment | "Top" | "Middle" | "Bottom";
        /**
         * Determines whether lines break automatically to fit text inside the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        wordWrap: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TextFrameUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TextFrame): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TextFrameLoadOptions): Word.TextFrame;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TextFrame;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TextFrame;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TextFrame;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TextFrame;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TextFrame` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TextFrameData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TextFrameData;
    }
    /**
     * Represents all the properties for wrapping text around a {@link Word.Shape}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    export class ShapeTextWrap extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the distance (in points) between the document text and the bottom edge of the text-free area surrounding the specified shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bottomDistance: number;
        /**
         * Specifies the distance (in points) between the document text and the left edge of the text-free area surrounding the specified shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftDistance: number;
        /**
         * Specifies the distance (in points) between the document text and the right edge of the text-free area surrounding the specified shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rightDistance: number;
        /**
         * Specifies whether the document text should wrap on both sides of the specified shape, on either the left or right side only, or on the side of the shape that's farthest from the page margin.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        side: Word.ShapeTextWrapSide | "None" | "Both" | "Left" | "Right" | "Largest";
        /**
         * Specifies the distance (in points) between the document text and the top edge of the text-free area surrounding the specified shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        topDistance: number;
        /**
         * Specifies the text wrap type around the shape. See `Word.ShapeTextWrapType` for details.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        type: Word.ShapeTextWrapType | "Inline" | "Square" | "Tight" | "Through" | "TopBottom" | "Behind" | "Front";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ShapeTextWrapUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ShapeTextWrap): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ShapeTextWrapLoadOptions): Word.ShapeTextWrap;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ShapeTextWrap;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ShapeTextWrap;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ShapeTextWrap;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ShapeTextWrap;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ShapeTextWrap` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShapeTextWrapData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ShapeTextWrapData;
    }
    /**
     * Represents a single reviewer of a document in which changes have been tracked. The `Reviewer` object is a member of the {@link Word.ReviewerCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class Reviewer extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies if the `Reviewer` object is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isVisible: boolean;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ReviewerUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Reviewer): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ReviewerLoadOptions): Word.Reviewer;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Reviewer;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Reviewer;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Reviewer;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Reviewer;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Reviewer` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ReviewerData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ReviewerData;
    }
    /**
     * A collection of {@link Word.Reviewer} objects that represents the reviewers of one or more documents. The `ReviewerCollection` object contains the names of all reviewers who have reviewed documents opened or edited on a computer.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class ReviewerCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Reviewer[];
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ReviewerCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ReviewerCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ReviewerCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ReviewerCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ReviewerCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ReviewerCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ReviewerCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ReviewerCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ReviewerCollectionData;
    }
    /**
     * Represents the current settings related to the display of reviewers' comments and revision marks in the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class RevisionsFilter extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the `ReviewerCollection` object that represents the collection of reviewers of one or more documents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly reviewers: Word.ReviewerCollection;
        /**
         * Specifies a `RevisionsMarkup` value that represents the extent of reviewer markup displayed in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        markup: Word.RevisionsMarkup | "None" | "Simple" | "All";
        /**
         * Specifies a `RevisionsView` value that represents globally whether Word displays the original version of the document or the final version, which might have revisions and formatting changes applied.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        view: Word.RevisionsView | "Final" | "Original";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.RevisionsFilterUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.RevisionsFilter): void;
        /**
         * Shows or hides all revisions in the document that contain comments and tracked changes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        toggleShowAllReviewers(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.RevisionsFilterLoadOptions): Word.RevisionsFilter;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.RevisionsFilter;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.RevisionsFilter;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.RevisionsFilter;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.RevisionsFilter;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.RevisionsFilter` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RevisionsFilterData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.RevisionsFilterData;
    }
    /**
     * Represents a single item in a {@link Word.RepeatingSectionContentControl}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class RepeatingSectionItem extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns the range of this repeating section item, excluding the start and end tags.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.RepeatingSectionItemUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.RepeatingSectionItem): void;
        /**
         * Deletes this `RepeatingSectionItem` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Adds a repeating section item after this item and returns the new item.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        insertItemAfter(): Word.RepeatingSectionItem;
        /**
         * Adds a repeating section item before this item and returns the new item.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        insertItemBefore(): Word.RepeatingSectionItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.RepeatingSectionItemLoadOptions): Word.RepeatingSectionItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.RepeatingSectionItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.RepeatingSectionItem;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.RepeatingSectionItem;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.RepeatingSectionItem;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.RepeatingSectionItem` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RepeatingSectionItemData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.RepeatingSectionItemData;
    }
    /**
     * Represents a collection of {@link Word.RepeatingSectionItem} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class RepeatingSectionItemCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns an individual repeating section item.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param index - The index of the item to retrieve.
         * @returns A `RepeatingSectionItem` object representing the item at the specified index.
         */
        getItemAt(index: number): Word.RepeatingSectionItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.RepeatingSectionItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.RepeatingSectionItemCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.RepeatingSectionItemCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.RepeatingSectionItemCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.RepeatingSectionItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RepeatingSectionItemCollectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     * Represents a single tracked change in a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class Revision extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `Range` object that represents the range of text that was moved from one place to another in the document with tracked changes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly movedRange: Word.Range;
        /**
         * Gets a `Range` object that represents the portion of the document that's contained within a revision mark.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Gets the name of the user who made the tracked change.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly author: string;
        /**
         * Gets the date and time when the tracked change was made.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly date: Date;
        /**
         * Gets the description of tracked formatting changes in the revision.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly formatDescription: string;
        /**
         * Gets a number that represents the position of this item in a collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly index: number;
        /**
         * Gets the revision type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly type: Word.RevisionType | "None" | "Insert" | "Delete" | "Property" | "ParagraphNumber" | "DisplayField" | "Reconcile" | "Conflict" | "Style" | "Replace" | "ParagraphProperty" | "TableProperty" | "SectionProperty" | "StyleDefinition" | "MovedFrom" | "MovedTo" | "CellInsertion" | "CellDeletion" | "CellMerge" | "CellSplit" | "ConflictInsert" | "ConflictDelete";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.RevisionUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Revision): void;
        /**
         * Accepts the tracked change, removes the revision mark, and incorporates the change into the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        accept(): void;
        /**
         * Rejects the tracked change. The revision marks are removed, leaving the original text intact.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reject(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.RevisionLoadOptions): Word.Revision;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Revision;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Revision;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Revision;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Revision;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Revision` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RevisionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.RevisionData;
    }
    /**
     * A collection of {@link Word.Revision} objects that represent the changes marked with revision marks in a range or document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class RevisionCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Revision[];
        /**
         * Accepts all the tracked changes in the document or range, removes all revision marks, and incorporates the changes into the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        acceptAll(): void;
        /**
         * Rejects all the tracked changes in the document or range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rejectAll(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.RevisionCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.RevisionCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.RevisionCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.RevisionCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.RevisionCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.RevisionCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.RevisionCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RevisionCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.RevisionCollectionData;
    }
    /**
     * Represents the `DatePickerContentControl` object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class DatePickerContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly placeholderText: Word.BuildingBlock;
        /**
         * Gets a `Range` object that represents the contents of the content control in the active document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Gets an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xmlMapping: Word.XmlMapping;
        /**
         * Specifies the appearance of the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
        /**
         * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        color: string;
        /**
         * Specifies a `CalendarType` value that represents the calendar type for the date picker content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dateCalendarType: Word.CalendarType | "Western" | "Arabic" | "Hebrew" | "Taiwan" | "Japan" | "Thai" | "Korean" | "SakaEra" | "TranslitEnglish" | "TranslitFrench" | "Umalqura";
        /**
         * Specifies the format in which dates are displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dateDisplayFormat: string;
        /**
         * Specifies a `LanguageId` that represents the language format for the date displayed in the date picker content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dateDisplayLocale: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Specifies a `ContentControlDateStorageFormat` value that represents the format for storage and retrieval of dates when the date picker content control is bound to the XML data store of the active document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dateStorageFormat: Word.ContentControlDateStorageFormat | "Text" | "Date" | "DateTime";
        /**
         * Gets the identification for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly id: string;
        /**
         * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isTemporary: boolean;
        /**
         * Specifies the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly level: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
        /**
         * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContentControl: boolean;
        /**
         * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContents: boolean;
        /**
         * Gets whether the placeholder text for the content control is being displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly showingPlaceholderText: boolean;
        /**
         * Specifies a tag to identify the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tag: string;
        /**
         * Specifies the title for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        title: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.DatePickerContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.DatePickerContentControl): void;
        /**
         * Copies the content control from the active document to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        copy(): void;
        /**
         * Removes the content control from the active document and moves the content control to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cut(): void;
        /**
         * Deletes this content control and the contents of the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param deleteContents - Optional. If `true`, deletes the contents as well.
         */
        delete(deleteContents?: boolean): void;
        /**
         * Sets the placeholder text that displays in the content control until a user enters their own text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. The options for configuring the content control's placeholder text.
         */
        setPlaceholderText(options?: Word.ContentControlPlaceholderOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.DatePickerContentControlLoadOptions): Word.DatePickerContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.DatePickerContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.DatePickerContentControl;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.DatePickerContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.DatePickerContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.DatePickerContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DatePickerContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.DatePickerContentControlData;
    }
    /**
     * Represents the `PictureContentControl` object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class PictureContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly placeholderText: Word.BuildingBlock;
        /**
         * Returns a `Range` object that represents the contents of the content control in the active document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xmlMapping: Word.XmlMapping;
        /**
         * Specifies the appearance of the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
        /**
         * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        color: string;
        /**
         * Returns the identification for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly id: string;
        /**
         * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isTemporary: boolean;
        /**
         * Returns the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly level: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
        /**
         * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContentControl: boolean;
        /**
         * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContents: boolean;
        /**
         * Returns whether the placeholder text for the content control is being displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly showingPlaceholderText: boolean;
        /**
         * Specifies a tag to identify the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tag: string;
        /**
         * Specifies the title for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        title: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.PictureContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.PictureContentControl): void;
        /**
         * Copies the content control from the active document to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        copy(): void;
        /**
         * Removes the content control from the active document and moves the content control to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cut(): void;
        /**
         * Deletes the content control and optionally its contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param deleteContents - Optional. Decides whether to delete the contents of the content control.
         */
        delete(deleteContents?: boolean): void;
        /**
         * Sets the placeholder text that displays in the content control until a user enters their own text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. The options for configuring the content control's placeholder text.
         */
        setPlaceholderText(options?: Word.ContentControlPlaceholderOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.PictureContentControlLoadOptions): Word.PictureContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.PictureContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.PictureContentControl;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.PictureContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.PictureContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.PictureContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.PictureContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.PictureContentControlData;
    }
    /**
     * Represents the `GroupContentControl` object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class GroupContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly placeholderText: Word.BuildingBlock;
        /**
         * Gets a `Range` object that represents the contents of the content control in the active document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Gets an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xmlMapping: Word.XmlMapping;
        /**
         * Specifies the appearance of the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
        /**
         * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        color: string;
        /**
         * Returns the identification for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly id: string;
        /**
         * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isTemporary: boolean;
        /**
         * Gets the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly level: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
        /**
         * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContentControl: boolean;
        /**
         * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContents: boolean;
        /**
         * Returns whether the placeholder text for the content control is being displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly showingPlaceholderText: boolean;
        /**
         * Specifies a tag to identify the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tag: string;
        /**
         * Specifies the title for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        title: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.GroupContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.GroupContentControl): void;
        /**
         * Copies the content control from the active document to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        copy(): void;
        /**
         * Removes the content control from the active document and moves the content control to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cut(): void;
        /**
         * Deletes the content control and optionally its contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param deleteContents - Optional. Whether to delete the contents inside the control.
         */
        delete(deleteContents: boolean): void;
        /**
         * Sets the placeholder text that displays in the content control until a user enters their own text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. The options for configuring the content control's placeholder text.
         */
        setPlaceholderText(options?: Word.ContentControlPlaceholderOptions): void;
        /**
         * Removes the group content control from the document so that its child content controls are no longer nested and can be freely edited.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        ungroup(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.GroupContentControlLoadOptions): Word.GroupContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.GroupContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.GroupContentControl;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.GroupContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.GroupContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.GroupContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.GroupContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.GroupContentControlData;
    }
    /**
     * The options that define what placeholder to be used in the content control.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface ContentControlPlaceholderOptions {
        /**
         * If provided, specifies the `BuildingBlock` object to use as placeholder.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        buildingBlock?: Word.BuildingBlock;
        /**
         * If provided, specifies the `Range` object to use as placeholder.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        range?: Word.Range;
        /**
         * If provided, specifies the text to use as placeholder.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        text?: string;
    }
    /**
     * Represents the `BuildingBlockGalleryContentControl` object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class BuildingBlockGalleryContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly placeholderText: Word.BuildingBlock;
        /**
         * Returns a `Range` object that represents the contents of the content control in the active document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xmlMapping: Word.XmlMapping;
        /**
         * Specifies the appearance of the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
        /**
         * Specifies the category for the building block content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        buildingBlockCategory: string;
        /**
         * Specifies a `BuildingBlockType` value that represents the type of building block for the building block content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        buildingBlockType: Word.BuildingBlockType | "QuickParts" | "CoverPage" | "Equations" | "Footers" | "Headers" | "PageNumber" | "Tables" | "Watermarks" | "AutoText" | "TextBox" | "PageNumberTop" | "PageNumberBottom" | "PageNumberPage" | "TableOfContents" | "CustomQuickParts" | "CustomCoverPage" | "CustomEquations" | "CustomFooters" | "CustomHeaders" | "CustomPageNumber" | "CustomTables" | "CustomWatermarks" | "CustomAutoText" | "CustomTextBox" | "CustomPageNumberTop" | "CustomPageNumberBottom" | "CustomPageNumberPage" | "CustomTableOfContents" | "Custom1" | "Custom2" | "Custom3" | "Custom4" | "Custom5" | "Bibliography" | "CustomBibliography";
        /**
         * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        color: string;
        /**
         * Gets the identification for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly id: string;
        /**
         * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isTemporary: boolean;
        /**
         * Gets the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly level: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
        /**
         * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContentControl: boolean;
        /**
         * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContents: boolean;
        /**
         * Gets if the placeholder text for the content control is being displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly showingPlaceholderText: boolean;
        /**
         * Specifies a tag to identify the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tag: string;
        /**
         * Specifies the title for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        title: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.BuildingBlockGalleryContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.BuildingBlockGalleryContentControl): void;
        /**
         * Copies the content control from the active document to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        copy(): void;
        /**
         * Removes the content control from the active document and moves the content control to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cut(): void;
        /**
         * Deletes the content control and optionally its contents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param deleteContents - Optional. Whether to delete the contents inside the control.
         */
        delete(deleteContents?: boolean): void;
        /**
         * Sets the placeholder text that displays in the content control until a user enters their own text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. The options for configuring the content control's placeholder text.
         */
        setPlaceholderText(options?: Word.ContentControlPlaceholderOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BuildingBlockGalleryContentControlLoadOptions): Word.BuildingBlockGalleryContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BuildingBlockGalleryContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.BuildingBlockGalleryContentControl;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BuildingBlockGalleryContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BuildingBlockGalleryContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BuildingBlockGalleryContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BuildingBlockGalleryContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BuildingBlockGalleryContentControlData;
    }
    /**
     * Represents the `RepeatingSectionContentControl` object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class RepeatingSectionContentControl extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly placeholderText: Word.BuildingBlock;
        /**
         * Gets a `Range` object that represents the contents of the content control in the active document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Returns the collection of repeating section items in this repeating section content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly repeatingSectionItems: Word.RepeatingSectionItemCollection;
        /**
         * Specifies whether users can add or remove sections from this repeating section content control by using the user interface.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        allowInsertDeleteSection: boolean;
        /**
         * Specifies the appearance of the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
        /**
         * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        color: string;
        /**
         * Returns the identification for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly id: string;
        /**
         * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isTemporary: boolean;
        /**
         * Returns the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly level: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
        /**
         * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContentControl: boolean;
        /**
         * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockContents: boolean;
        /**
         * Specifies the name of the repeating section items used in the context menu associated with this repeating section content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        repeatingSectionItemTitle: string;
        /**
         * Returns whether the placeholder text for the content control is being displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly showingPlaceholderText: boolean;
        /**
         * Specifies a tag to identify the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tag: string;
        /**
         * Specifies the title for the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        title: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.RepeatingSectionContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.RepeatingSectionContentControl): void;
        /**
         * Copies the content control from the active document to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        copy(): void;
        /**
         * Removes the content control from the active document and moves the content control to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cut(): void;
        /**
         * Deletes the content control and the contents of the content control.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param deleteContents - Optional. Whether to delete the contents inside the control.
         */
        delete(deleteContents?: boolean): void;
        /**
         * Sets the placeholder text that displays in the content control until a user enters their own text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. The options for configuring the content control's placeholder text.
         */
        setPlaceholderText(options?: Word.ContentControlPlaceholderOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.RepeatingSectionContentControlLoadOptions): Word.RepeatingSectionContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.RepeatingSectionContentControl;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.RepeatingSectionContentControl;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.RepeatingSectionContentControl;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.RepeatingSectionContentControl;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.RepeatingSectionContentControl` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RepeatingSectionContentControlData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.RepeatingSectionContentControlData;
    }
    /**
     * Represents one of the readability statistics for the document or range.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class ReadabilityStatistic extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns the name of the readability statistic.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly name: string;
        /**
         * Returns the value of the grammar statistic.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly value: number;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ReadabilityStatisticLoadOptions): Word.ReadabilityStatistic;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ReadabilityStatistic;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ReadabilityStatistic;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ReadabilityStatistic;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ReadabilityStatistic;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ReadabilityStatistic` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ReadabilityStatisticData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ReadabilityStatisticData;
    }
    /**
     * Represents a collection of {@link Word.ReadabilityStatistic} objects for the document or range.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class ReadabilityStatisticCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.ReadabilityStatistic[];
        /**
         * Gets the readability statistic at the specified index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param index - The zero-based index of the item to retrieve.
         */
        getItemAt(index: number): Word.ReadabilityStatistic;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ReadabilityStatisticCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ReadabilityStatisticCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ReadabilityStatisticCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ReadabilityStatisticCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ReadabilityStatisticCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ReadabilityStatisticCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ReadabilityStatisticCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ReadabilityStatisticCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ReadabilityStatisticCollectionData;
    }
    /**
     * Represents the settings for saving a Word document as a webpage.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class WebSettings extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies whether PNG is allowed as an image format when saving a document as a webpage. Default is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        allowPng: boolean;
        /**
         * Specifies the document encoding (code page or character set) to be used by the web browser when viewing the saved document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        encoding: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
        /**
         * Gets the folder suffix used when saving a document as a webpage with long file names and supporting files in a separate folder.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly folderSuffix: string;
        /**
         * Specifies whether supporting files are organized in a separate folder when saving the document as a webpage. Default is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        organizeInFolder: boolean;
        /**
         * Specifies the density (pixels per inch) of graphics images and table cells on a webpage.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pixelsPerInch: number;
        /**
         * Specifies whether cascading style sheets (CSS) are used for font formatting when viewing a saved document in a web browser. Default is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        relyOnCSS: boolean;
        /**
         * Specifies whether image files are not generated from drawing objects when saving a document as a webpage. Default is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        relyOnVectorMarkupLanguage: boolean;
        /**
         * Specifies the ideal minimum screen size (width by height, in pixels) for viewing the saved document in a web browser.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        screenSize: Word.ScreenSize | "Size544x376" | "Size640x480" | "Size720x512" | "Size800x600" | "Size1024x768" | "Size1152x882" | "Size1152x900" | "Size1280x1024" | "Size1600x1200" | "Size1800x1440" | "Size1920x1200";
        /**
         * Specifies the target browser for documents viewed in a web browser.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        targetBrowser: Word.TargetBrowser | "V3" | "V4" | "Ie4" | "Ie5" | "Ie6";
        /**
         * Specifies whether long file names are used when saving the document as a webpage. Default is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useLongFileNames: boolean;
        /**
         * Sets the folder suffix for the specified document to the default suffix for the language support you have selected or installed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useDefaultFolderSuffix(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.WebSettingsLoadOptions): Word.WebSettings;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.WebSettings;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.WebSettings;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.WebSettings;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.WebSettings;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.WebSettings` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.WebSettingsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.WebSettingsData;
    }
    /**
     * Represents the collection of {@link Word.XmlNode} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class XmlNodeCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.XmlNode[];
        /**
         * Returns an individual `XmlNode` object in a collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param index - The index of the item to retrieve.
         */
        getItemAt(index: number): Word.XmlNode;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.XmlNodeCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.XmlNodeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.XmlNodeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.XmlNodeCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.XmlNodeCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.XmlNodeCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.XmlNodeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.XmlNodeCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.XmlNodeCollectionData;
    }
    /**
     * Provides configuration options for the {@link Word.XmlNode | XmlNode.setValidationError} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface XmlNodeSetValidationErrorOptions {
        /**
         * If provided, specifies whether the validation error should be cleared automatically. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clearedAutomatically?: boolean;
        /**
         * If provided, specifies the error text to display for the validation error.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        errorText?: string;
    }
    /**
     * Represents a single XML node applied to the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class XmlNode extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the attributes for this XML node. Returns `null` if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly attributes: Word.XmlNodeCollection;
        /**
         * Gets the child elements of this XML node. Returns an empty collection if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly childNodes: Word.XmlNodeCollection;
        /**
         * Gets the first child node if this is a parent node. Returns `null` if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly firstChild: Word.XmlNode;
        /**
         * Gets the last child node if this is a parent node. Returns `null` if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly lastChild: Word.XmlNode;
        /**
         * Gets the next element in the document that's at the same level as this XML node. Returns `null` if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly nextSibling: Word.XmlNode;
        /**
         * Gets the parent document of this XML node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly ownerDocument: Word.Document;
        /**
         * Gets the parent element of this XML node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly parentNode: Word.XmlNode;
        /**
         * Gets the previous element in the document that's at the same level as this XML node. Returns `null` if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly previousSibling: Word.XmlNode;
        /**
         * Gets the portion of a document that is contained in this XML node. Returns `null` if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Gets the name of the element without any prefix.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly baseName: string;
        /**
         * Gets whether this XML node has child nodes. Always returns `false` for attribute nodes since they cannot have children.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly hasChildNodes: boolean;
        /**
         * Gets whether this XML element is part of a paragraph, is a paragraph, or is contained within a table cell or contains a table row. Returns `null` if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly level: Word.XmlNodeLevel | "Inline" | "Paragraph" | "Row" | "Cell";
        /**
         * Gets the Uniform Resource Identifier (URI) of the schema namespace for this XML node.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly namespaceUri: string;
        /**
         * Specifies the text displayed for this element if it contains no text. Only applies to element nodes, not attribute nodes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        placeholderText: string;
        /**
         * Specifies the text contained within the XML element. Returns an empty string if the node type is `attribute`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        text: string;
        /**
         * Gets the description for a validation error on this `XmlNode` object. May not be meaningful for attribute nodes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly validationErrorText: string;
        /**
         * Gets whether this element is valid according to the attached schema. May not be meaningful for attribute nodes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly validationStatus: Word.XmlValidationStatus | "Ok" | "Custom";
        /**
         * Copies this XML node, excluding XML markup, to the Clipboard. For attribute nodes, copies only the attribute value as text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        copy(): void;
        /**
         * Removes this XML node from the document and places it on the Clipboard. For attribute nodes, removes the attribute from its parent element and copies only the attribute value as text to the clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cut(): void;
        /**
         * Deletes the XML node from the XML document. For element nodes, removes the entire element and its content; for attribute nodes, removes the attribute from its parent element.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Removes a child element from this XML node. This method has no effect if the node type is `attribute` (since attribute nodes have no child elements).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param childElement - The child element to remove.
         */
        removeChild(childElement: Word.XmlNode): void;
        /**
         * Returns all the child elements that match the XPath parameter, in the order in which they appear within this XML node. Returns `null` if the node type is `attribute` (since attribute nodes have no child elements to search).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param xPath - The XPath expression to evaluate.
         * @param options - Optional. Configuration options for the XPath search.
         * @returns A collection of XML nodes that match the XPath expression.
         */
        selectNodes(xPath: string, options?: Word.SelectNodesOptions): Word.XmlNodeCollection;
        /**
         * Returns the first child element that matches the XPath parameter within this XML node. Returns `null` if the node type is `attribute` (since attribute nodes have no child elements to search).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param xPath - The XPath expression to evaluate.
         * @param options - Optional. Configuration options for the XPath search.
         * @returns The first XML node that matches the XPath expression, or `null` if no match is found.
         */
        selectSingleNode(xPath: string, options?: Word.SelectSingleNodeOptions): Word.XmlNode;
        /**
         * Changes the validation error text displayed to a user for this XML node and whether to force Word to report the node as invalid. May not be meaningful for attribute nodes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param status - The validation status to set.
         * @param options - Optional. Configuration options for setting the validation error.
         */
        setValidationError(status: Word.XmlValidationStatus, options?: Word.XmlNodeSetValidationErrorOptions): void;
        /**
         * Changes the validation error text displayed to a user for this XML node and whether to force Word to report the node as invalid. May not be meaningful for attribute nodes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param status - The validation status to set.
         * @param options - Optional. Configuration options for setting the validation error.
         */
        setValidationError(status: "Ok" | "Custom", options?: Word.XmlNodeSetValidationErrorOptions): void;
        /**
         * Validates this XML node against the XML schemas that are attached to the document. May not be meaningful for attribute nodes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        validate(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.XmlNodeLoadOptions): Word.XmlNode;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.XmlNode;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.XmlNode;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.XmlNode;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.XmlNode;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.XmlNode` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.XmlNodeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.XmlNodeData;
    }
    /**
     * Specifies the type of an XML node.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum XmlNodeType {
        /**
         * Element node.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        element = "Element",
        /**
         * Attribute node.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        attribute = "Attribute",
    }
    /**
     * Specifies the validation status of an XML node.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum XmlValidationStatus {
        /**
         * The node is valid.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ok = "Ok",
        /**
         * The node has a custom (user-defined) validation error.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        custom = "Custom",
    }
    /**
     * Specifies the level of an XML node.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum XmlNodeLevel {
        /**
         * Inline node level.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        inline = "Inline",
        /**
         * Paragraph node level.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        paragraph = "Paragraph",
        /**
         * Row node level.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        row = "Row",
        /**
         * Cell node level.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cell = "Cell",
    }
    /**
     * Specifies which Quick Style set to apply to the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ApplyQuickStyleSet {
        /**
         * Resets the Quick Style to the style set in use when the document was opened.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sessionStart = "SessionStart",
        /**
         * Resets the Quick Style to the style set from the template, if any.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        template = "Template",
    }
    /**
     * Provides configuration options for the {@link Word.XmlNode | XmlNode.selectNodes} and {@link Word.Document| Document.selectNodes} methods.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectNodesOptions {
        /**
         * If provided, specifies whether to skip text nodes in the search. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fastSearchSkippingTextNodes?: boolean;
        /**
         * If provided, specifies the prefix mapping for the XPath expression. The default value is "" (empty string).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        prefixMapping?: string;
    }
    /**
     * Provides configuration options for the {@link Word.XmlNode | XmlNode.selectSingleNode} and {@link Word.Document| Document.selectSingleNode} methods.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectSingleNodeOptions {
        /**
         * If provided, specifies whether to skip text nodes in the search. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fastSearchSkippingTextNodes?: boolean;
        /**
         * If provided, specifies the prefix mapping for the XPath expression. The default value is "" (empty string).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        prefixMapping?: string;
    }
    /**
     * Specifies the screen size for web page preview and HTML export optimization.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ScreenSize {
        /**
         * Screen resolution 544x376 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size544x376 = "Size544x376",
        /**
         * Screen resolution 640x480 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size640x480 = "Size640x480",
        /**
         * Screen resolution 720x512 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size720x512 = "Size720x512",
        /**
         * Screen resolution 800x600 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size800x600 = "Size800x600",
        /**
         * Screen resolution 1024x768 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size1024x768 = "Size1024x768",
        /**
         * Screen resolution 1152x882 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size1152x882 = "Size1152x882",
        /**
         * Screen resolution 1152x900 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size1152x900 = "Size1152x900",
        /**
         * Screen resolution 1280x1024 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size1280x1024 = "Size1280x1024",
        /**
         * Screen resolution 1600x1200 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size1600x1200 = "Size1600x1200",
        /**
         * Screen resolution 1800x1440 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size1800x1440 = "Size1800x1440",
        /**
         * Screen resolution 1920x1200 pixels.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        size1920x1200 = "Size1920x1200",
    }
    /**
     * Specifies the target web browser for HTML export and web page optimization.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TargetBrowser {
        /**
         * Browser version 3.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        v3 = "V3",
        /**
         * Browser version 4.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        v4 = "V4",
        /**
         * Microsoft Internet Explorer 4.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ie4 = "Ie4",
        /**
         * Microsoft Internet Explorer 5.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ie5 = "Ie5",
        /**
         * Microsoft Internet Explorer 6.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ie6 = "Ie6",
    }
    /**
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class HtmlDivision extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        readonly htmlDivisions: Word.HtmlDivisionCollection;
        /**
         * Gets a `Range` object that represents the portion of a document that's contained in this HTML division.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Specifies the left indent value (in points) for this HTML division.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        leftIndent: number;
        /**
         * Specifies the right indent (in points) for this HTML division.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rightIndent: number;
        /**
         * Specifies the amount of spacing (in points) after this HTML division.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        spaceAfter: number;
        /**
         * Specifies the spacing (in points) before this HTML division.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        spaceBefore: number;
        /**
         * Deletes this HTML division.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Returns an `HtmlDivision` object that represents a parent division of the current HTML division.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param levelsUp - Optional. The number of levels to go up to retrieve the parent division.
         */
        htmlDivisionParent(levelsUp?: number): Word.HtmlDivision;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.HtmlDivisionLoadOptions): Word.HtmlDivision;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.HtmlDivision;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.HtmlDivision;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.HtmlDivision;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.HtmlDivision;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.HtmlDivision` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.HtmlDivisionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.HtmlDivisionData;
    }
    /**
     * Represents a collection of {@link Word.HtmlDivision} objects in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class HtmlDivisionCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.HtmlDivision[];
        /**
         * Returns an `HtmlDivision` object from the collection based on the specified index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param index - The index of the item to retrieve.
         */
        getItemAt(index: number): Word.HtmlDivision;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.HtmlDivisionCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.HtmlDivisionCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.HtmlDivisionCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.HtmlDivisionCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.HtmlDivisionCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.HtmlDivisionCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.HtmlDivisionCollectionData;
    }
    /**
     * Calendar types.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum CalendarType {
        /**
         * Western calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        western = "Western",
        /**
         * Arabic calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabic = "Arabic",
        /**
         * Hebrew calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hebrew = "Hebrew",
        /**
         * Taiwan calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        taiwan = "Taiwan",
        /**
         * Japanese calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        japan = "Japan",
        /**
         * Thai calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thai = "Thai",
        /**
         * Korean calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        korean = "Korean",
        /**
         * Saka Era calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sakaEra = "SakaEra",
        /**
         * Transliterated English calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        translitEnglish = "TranslitEnglish",
        /**
         * Transliterated French calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        translitFrench = "TranslitFrench",
        /**
         * Umm al-Qura calendar type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        umalqura = "Umalqura",
    }
    /**
     * Date storage formats for {@link Word.DatePickerContentControl}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ContentControlDateStorageFormat {
        /**
         * Stores the date as text.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        text = "Text",
        /**
         * Stores the date as a date object.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        date = "Date",
        /**
         * Stores the date as a date-time object.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dateTime = "DateTime",
    }
    /**
     * Represents a frame. The `Frame` object is a member of the {@link Word.FrameCollection} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class Frame extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BorderUniversalCollection` object that represents all the borders for the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Returns a `Range` object that represents the portion of the document that's contained within the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly range: Word.Range;
        /**
         * Returns a `ShadingUniversal` object that refers to the shading formatting for the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Specifies the height (in points) of the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        height: number;
        /**
         * Specifies a `FrameSizeRule` value that represents the rule for determining the height of the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        heightRule: Word.FrameSizeRule | "Auto" | "AtLeast" | "Exact";
        /**
         * Specifies the horizontal distance between the frame and the surrounding text, in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        horizontalDistanceFromText: number;
        /**
         * Specifies the horizontal distance between the edge of the frame and the item specified by the `relativeHorizontalPosition` property.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        horizontalPosition: number;
        /**
         * Specifies if the frame is locked.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lockAnchor: boolean;
        /**
         * Specifies the relative horizontal position of the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        relativeHorizontalPosition: Word.RelativeHorizontalPosition | "Margin" | "Page" | "Column" | "Character" | "LeftMargin" | "RightMargin" | "InsideMargin" | "OutsideMargin";
        /**
         * Specifies the relative vertical position of the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        relativeVerticalPosition: Word.RelativeVerticalPosition | "Margin" | "Page" | "Paragraph" | "Line" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
        /**
         * Specifies if document text wraps around the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textWrap: boolean;
        /**
         * Specifies the vertical distance (in points) between the frame and the surrounding text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        verticalDistanceFromText: number;
        /**
         * Specifies the vertical distance between the edge of the frame and the item specified by the `relativeVerticalPosition` property.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        verticalPosition: number;
        /**
         * Specifies the width (in points) of the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        width: number;
        /**
         * Specifies the rule used to determine the width of the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        widthRule: Word.FrameSizeRule | "Auto" | "AtLeast" | "Exact";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.FrameUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Frame): void;
        /**
         * Copies the frame to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        copy(): void;
        /**
         * Removes the frame from the document and places it on the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cut(): void;
        /**
         * Deletes the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Selects the frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        select(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.FrameLoadOptions): Word.Frame;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Frame;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Frame;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Frame;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Frame;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Frame` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.FrameData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.FrameData;
    }
    /**
     * Represents the collection of {@link Word.Frame} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class FrameCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Frame[];
        /**
         * Returns a `Frame` object that represents a new frame added to a range, selection, or document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param range - The range where the frame will be added.
         * @returns A `Frame` object that represents the new frame.
         */
        add(range: Word.Range): Word.Frame;
        /**
         * Deletes the `FrameCollection` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Gets a `Frame` object by its index in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param index - The location of a `Frame` object.
         */
        getItem(index: number): Word.Frame;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.FrameCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.FrameCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.FrameCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.FrameCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.FrameCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.FrameCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.FrameCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.FrameCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.FrameCollectionData;
    }
    /**
     * Represents a document library version.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class DocumentLibraryVersion extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets any optional comments associated with this version of the shared document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly comments: string;
        /**
         * Gets the date and time at which this version of the shared document was last saved to the server.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly modified: any;
        /**
         * Gets the name of the user who last saved this version of the shared document to the server.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly modifiedBy: string;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.DocumentLibraryVersionLoadOptions): Word.DocumentLibraryVersion;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.DocumentLibraryVersion;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.DocumentLibraryVersion;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.DocumentLibraryVersion;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.DocumentLibraryVersion;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.DocumentLibraryVersion` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DocumentLibraryVersionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.DocumentLibraryVersionData;
    }
    /**
     * Represents the collection of {@link Word.DocumentLibraryVersion} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class DocumentLibraryVersionCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.DocumentLibraryVersion[];
        /**
         * Gets a `DocumentLibraryVersion` object by its index in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param index - The location of a `DocumentLibraryVersion` object.
         */
        getItem(index: number): Word.DocumentLibraryVersion;
        /**
         * Returns whether the document library in which the active document is saved on the server is configured to create a backup copy, or version, each time the file is edited on the website.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isVersioningEnabled(): OfficeExtension.ClientResult<boolean>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.DocumentLibraryVersionCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.DocumentLibraryVersionCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.DocumentLibraryVersionCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.DocumentLibraryVersionCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.DocumentLibraryVersionCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.DocumentLibraryVersionCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.DocumentLibraryVersionCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DocumentLibraryVersionCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.DocumentLibraryVersionCollectionData;
    }
    /**
     * Represents the possible change tracking modes.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    enum ChangeTrackingMode {
        /**
         * ChangeTracking is turned off.
         * @remarks
         * [Api set: WordApi 1.4]
         */
        off = "Off",
        /**
         * ChangeTracking is turned on for everyone.
         * @remarks
         * [Api set: WordApi 1.4]
         */
        trackAll = "TrackAll",
        /**
         * Tracking is turned on for my changes only.
         * @remarks
         * [Api set: WordApi 1.4]
         */
        trackMineOnly = "TrackMineOnly",
    }
    /**
     * Specify the current version or the original version of the text.
     *
     * @remarks
     * [Api set: WordApi 1.4]
     */
    enum ChangeTrackingVersion {
        /**
         * @remarks
         * [Api set: WordApi 1.4]
         */
        original = "Original",
        /**
         * @remarks
         * [Api set: WordApi 1.4]
         */
        current = "Current",
    }
    /**
     * Specify the track state when ChangeTracking is on.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum ChangeTrackingState {
        /**
         * @remarks
         * [Api set: WordApi 1.5]
         */
        unknown = "Unknown",
        /**
         * @remarks
         * [Api set: WordApi 1.5]
         */
        normal = "Normal",
        /**
         * @remarks
         * [Api set: WordApi 1.5]
         */
        added = "Added",
        /**
         * @remarks
         * [Api set: WordApi 1.5]
         */
        deleted = "Deleted",
    }
    /**
     * TrackedChange type.
     *
     * @remarks
     * [Api set: WordApi 1.6]
     */
    enum TrackedChangeType {
        /**
         * No revision.
         * @remarks
         * [Api set: WordApi 1.6]
         */
        none = "None",
        /**
         * Add change.
         * @remarks
         * [Api set: WordApi 1.6]
         */
        added = "Added",
        /**
         * Delete change.
         * @remarks
         * [Api set: WordApi 1.6]
         */
        deleted = "Deleted",
        /**
         * Format change.
         * @remarks
         * [Api set: WordApi 1.6]
         */
        formatted = "Formatted",
    }
    /**
     * Note item type.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum NoteItemType {
        /**
         * Footnote type.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        footnote = "Footnote",
        /**
         * Endnote type.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        endnote = "Endnote",
    }
    /**
     * Provides information about the type of a raised event.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum EventType {
        /**
         * ContentControlDeleted represents the event that the content control has been deleted.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        contentControlDeleted = "ContentControlDeleted",
        /**
         * ContentControlSelectionChanged represents the event that the selection in the content control has been changed.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        contentControlSelectionChanged = "ContentControlSelectionChanged",
        /**
         * ContentControlDataChanged represents the event that the data in the content control have been changed.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        contentControlDataChanged = "ContentControlDataChanged",
        /**
         * ContentControlAdded represents the event a content control has been added to the document.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        contentControlAdded = "ContentControlAdded",
        /**
         * Represents that a content control has been entered.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        contentControlEntered = "ContentControlEntered",
        /**
         * Represents that a content control has been exited.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        contentControlExited = "ContentControlExited",
        /**
         * Represents that one or more new paragraphs were added.
         * @remarks
         * [Api set: WordApi 1.6]
         */
        paragraphAdded = "ParagraphAdded",
        /**
         * Represents that one or more paragraphs were changed.
         * @remarks
         * [Api set: WordApi 1.6]
         */
        paragraphChanged = "ParagraphChanged",
        /**
         * Represents that one or more paragraphs were deleted.
         * @remarks
         * [Api set: WordApi 1.6]
         */
        paragraphDeleted = "ParagraphDeleted",
        /**
         * Represents that an annotation was clicked (or selected with **Alt+Down**) in the document.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        annotationClicked = "AnnotationClicked",
        /**
         * Represents that an annotation was hovered over in the document.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        annotationHovered = "AnnotationHovered",
        /**
         * Represents that one or more annotations were added in the document.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        annotationInserted = "AnnotationInserted",
        /**
         * Represents that one or more annotations were deleted from the document.
         * @remarks
         * [Api set: WordApi 1.7]
         */
        annotationRemoved = "AnnotationRemoved",
        /**
         * Represents an action in the annotation pop-up.
         * @remarks
         * [Api set: WordApi 1.8]
         */
        annotationPopupAction = "AnnotationPopupAction",
    }
    /**
     * An enum that specifies an event's source. It can be local or remote (through coauthoring).
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum EventSource {
        /**
         * Local source.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        local = "Local",
        /**
         * Remote source.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        remote = "Remote",
    }
    /**
     * Provides information about the content control that raised the `contentControlAdded` event.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export interface ContentControlAddedEventArgs {
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        eventType: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the content control IDs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ids: number[];
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        source: Word.EventSource | "Local" | "Remote";
    }
    /**
     * Provides information about the content control that raised the `contentControlDataChanged` event.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export interface ContentControlDataChangedEventArgs {
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        eventType: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the content control IDs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ids: number[];
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        source: Word.EventSource | "Local" | "Remote";
    }
    /**
     * Provides information about the content control that raised the `contentControlDeleted` event.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export interface ContentControlDeletedEventArgs {
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        eventType: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the content control IDs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ids: number[];
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        source: Word.EventSource | "Local" | "Remote";
    }
    /**
     * Provides information about the content control that raised the `contentControlEntered` event.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export interface ContentControlEnteredEventArgs {
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        eventType: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the content control IDs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ids: number[];
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        source: Word.EventSource | "Local" | "Remote";
    }
    /**
     * Provides information about the content control that raised the `contentControlExited` event.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export interface ContentControlExitedEventArgs {
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        eventType: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the content control IDs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ids: number[];
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        source: Word.EventSource | "Local" | "Remote";
    }
    /**
     * Represents a dropped capital letter in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class DropCap extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets the distance (in points) between the dropped capital letter and the paragraph text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly distanceFromText: number;
        /**
         * Gets the name of the font for the dropped capital letter.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly fontName: string;
        /**
         * Gets the height (in lines) of the dropped capital letter.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly linesToDrop: number;
        /**
         * Gets the position of the dropped capital letter.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly position: Word.DropPosition | "None" | "Normal" | "Margin";
        /**
         * Removes the dropped capital letter formatting.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clear(): void;
        /**
         * Formats the first character in the specified paragraph as a dropped capital letter.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        enable(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.DropCapLoadOptions): Word.DropCap;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.DropCap;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.DropCap;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.DropCap;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.DropCap;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.DropCap` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.DropCapData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.DropCapData;
    }
    /**
     * Provides information about the content control that raised the `contentControlSelectionChanged` event.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    export interface ContentControlSelectionChangedEventArgs {
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        eventType: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the content control IDs.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ids: number[];
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        source: Word.EventSource | "Local" | "Remote";
    }
    /**
     * Provides information about the paragraphs that raised the `paragraphAdded` event.
     *
     * @remarks
     * [Api set: WordApi 1.6]
     */
    export interface ParagraphAddedEventArgs {
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        source: Word.EventSource | "Local" | "Remote";
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        type: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the unique IDs of the involved paragraphs. IDs are in standard 8-4-4-4-12 GUID format without curly braces and differ across sessions and coauthors.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        uniqueLocalIds: string[];
    }
    /**
     * Provides information about the paragraphs that raised the `paragraphChanged` event.
     *
     * @remarks
     * [Api set: WordApi 1.6]
     */
    export interface ParagraphChangedEventArgs {
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        source: Word.EventSource | "Local" | "Remote";
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        type: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the unique IDs of the involved paragraphs. IDs are in standard 8-4-4-4-12 GUID format without curly braces and differ across sessions and coauthors.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        uniqueLocalIds: string[];
    }
    /**
     * Provides information about the paragraphs that raised the `paragraphDeleted` event.
     *
     * @remarks
     * [Api set: WordApi 1.6]
     */
    export interface ParagraphDeletedEventArgs {
        /**
         * The source of the event. It can be local or remote (through coauthoring).
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        source: Word.EventSource | "Local" | "Remote";
        /**
         * The event type. See `Word.EventType` for details.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        type: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" | "ContentControlDataChanged" | "ContentControlAdded" | "ContentControlEntered" | "ContentControlExited" | "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" | "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
        /**
         * Gets the unique IDs of the involved paragraphs. IDs are in standard 8-4-4-4-12 GUID format without curly braces and differ across sessions and coauthors.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        uniqueLocalIds: string[];
    }
    /**
     * Specifies supported content control types and subtypes.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    enum ContentControlType {
        /**
         * Unknown content control type.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        unknown = "Unknown",
        /**
         * Rich text content control subtype containing inline elements.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        richTextInline = "RichTextInline",
        /**
         * Rich text content control subtype containing paragraphs.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        richTextParagraphs = "RichTextParagraphs",
        /**
         * Rich text content control subtype containing a whole cell.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        richTextTableCell = "RichTextTableCell",
        /**
         * Rich text content control subtype containing a whole row.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        richTextTableRow = "RichTextTableRow",
        /**
         * Rich text content control subtype containing a whole table.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        richTextTable = "RichTextTable",
        /**
         * Plain text content control subtype containing inline elements.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        plainTextInline = "PlainTextInline",
        /**
         * Plain text content control subtype containing paragraphs.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        plainTextParagraph = "PlainTextParagraph",
        /**
         * Picture content control (type and subtype).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        picture = "Picture",
        /**
         * Building block gallery content control (type and subtype).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        buildingBlockGallery = "BuildingBlockGallery",
        /**
         * Check box content control (type and subtype).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        checkBox = "CheckBox",
        /**
         * Combo box content control (type and subtype).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        comboBox = "ComboBox",
        /**
         * Dropdown list content control (type and subtype).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dropDownList = "DropDownList",
        /**
         * Date picker content control (type and subtype).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        datePicker = "DatePicker",
        /**
         * Repeating section content control (type and subtype).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        repeatingSection = "RepeatingSection",
        /**
         * Rich text content control type.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        richText = "RichText",
        /**
         * Plain text content control type.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        plainText = "PlainText",
        /**
         * Group content control type.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        group = "Group",
    }
    /**
     * Represents the content control appearance.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    enum ContentControlAppearance {
        /**
         * Represents a content control shown as a shaded rectangle or bounding box (with optional title).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        boundingBox = "BoundingBox",
        /**
         * Represents a content control shown as start and end markers.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        tags = "Tags",
        /**
         * Represents a content control that isn't shown.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        hidden = "Hidden",
    }
    /**
     * Represents the content control level type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ContentControlLevel {
        /**
         * Represents an inline content control.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        inline = "Inline",
        /**
         * Represents a paragraph-level content control.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        paragraph = "Paragraph",
        /**
         * Represents a row-level content control.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        row = "Row",
        /**
         * Represents a cell-level content control.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cell = "Cell",
    }
    /**
     * Represents the supported styles for underline format.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    enum UnderlineType {
        /**
         * @remarks
         * [Api set: WordApi 1.1]
         */
        mixed = "Mixed",
        /**
         * No underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        none = "None",
        /**
         * Warning: hidden has been deprecated.
         * @deprecated Hidden is no longer supported.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        hidden = "Hidden",
        /**
         * Warning: dotLine has been deprecated.
         * @deprecated DotLine is no longer supported.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dotLine = "DotLine",
        /**
         * A single underline. This is the default value.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        single = "Single",
        /**
         * Only underline individual words.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        word = "Word",
        /**
         * A double underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        double = "Double",
        /**
         * A single thick underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        thick = "Thick",
        /**
         * A dotted underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dotted = "Dotted",
        /**
         * A heavy dotted underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dottedHeavy = "DottedHeavy",
        /**
         * A single dash underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dashLine = "DashLine",
        /**
         * A heavy dash underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dashLineHeavy = "DashLineHeavy",
        /**
         * A long dash underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dashLineLong = "DashLineLong",
        /**
         * A long heavy dash underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dashLineLongHeavy = "DashLineLongHeavy",
        /**
         * An alternating dot-dash underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dotDashLine = "DotDashLine",
        /**
         * A heavy dot-dash underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        dotDashLineHeavy = "DotDashLineHeavy",
        /**
         * An alternating dot-dot-dash underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        twoDotDashLine = "TwoDotDashLine",
        /**
         * An alternating heavy dot-dot-dash underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        twoDotDashLineHeavy = "TwoDotDashLineHeavy",
        /**
         * A single wavy underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        wave = "Wave",
        /**
         * A heavy wavy underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        waveHeavy = "WaveHeavy",
        /**
         * A double wavy underline.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        waveDouble = "WaveDouble",
    }
    /**
     * Specifies the form of a break.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    enum BreakType {
        /**
         * Page break at the insertion point.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        page = "Page",
        /**
         * Warning: next has been deprecated. Use sectionNext instead.
         * @deprecated Use sectionNext instead.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        next = "Next",
        /**
         * Section break on next page.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        sectionNext = "SectionNext",
        /**
         * New section without a corresponding page break.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        sectionContinuous = "SectionContinuous",
        /**
         * Section break with the next section beginning on the next even-numbered page. If the section break falls on an even-numbered page, Word leaves the next odd-numbered page blank.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        sectionEven = "SectionEven",
        /**
         * Section break with the next section beginning on the next odd-numbered page. If the section break falls on an odd-numbered page, Word leaves the next even-numbered page blank.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        sectionOdd = "SectionOdd",
        /**
         * Line break.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        line = "Line",
    }
    /**
     * Represents the insertion location type.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     *
     * To be used with an API call, such as `obj.insertSomething(newStuff, location);`.
     * If the location is `before` or `after`, the new content will be outside of the modified object.
     * If the location is `start` or `end`, the new content will be included as part of the modified object.
     */
    enum InsertLocation {
        /**
         * Add content before the contents of the calling object.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        before = "Before",
        /**
         * Add content after the contents of the calling object.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        after = "After",
        /**
         * Prepend content to the contents of the calling object.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        start = "Start",
        /**
         * Append content to the contents of the calling object.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        end = "End",
        /**
         * Replace the contents of the current object.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        replace = "Replace",
    }
    /**
     * Represents the horizontal alignment of text.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    enum Alignment {
        /**
         * Mixed horizontal alignment.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        mixed = "Mixed",
        /**
         * Unknown alignment.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        unknown = "Unknown",
        /**
         * Alignment to the left.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        left = "Left",
        /**
         * Alignment to the center.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        centered = "Centered",
        /**
         * Alignment to the right.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        right = "Right",
        /**
         * Fully justified alignment.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        justified = "Justified",
    }
    /**
     * Represents the type of header or footer.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    enum HeaderFooterType {
        /**
         * Returns the header or footer on all pages of a section, but excludes the first page or even pages if they are different.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        primary = "Primary",
        /**
         * Returns the header or footer on the first page of a section.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        firstPage = "FirstPage",
        /**
         * Returns all headers or footers on even-numbered pages of a section.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        evenPages = "EvenPages",
    }
    /**
     * Represents the types of `Body` objects.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum BodyType {
        /**
         * Unknown body type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        unknown = "Unknown",
        /**
         * Main document body.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        mainDoc = "MainDoc",
        /**
         * Section body.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        section = "Section",
        /**
         * Header body.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        header = "Header",
        /**
         * Footer body.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        footer = "Footer",
        /**
         * Table cell body.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        tableCell = "TableCell",
        /**
         * Footnote body.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        footnote = "Footnote",
        /**
         * Endnote body.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        endnote = "Endnote",
        /**
         * Note body e.g., endnote, footnote.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        noteItem = "NoteItem",
    }
    /**
     * Represents where the cursor (insertion point) is set in the document after a selection.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    enum SelectionMode {
        /**
         * The entire range is selected.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        select = "Select",
        /**
         * The cursor is at the beginning of the selection (just before the start of the selected range).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        start = "Start",
        /**
         * The cursor is at the end of the selection (just after the end of the selected range).
         * @remarks
         * [Api set: WordApi 1.1]
         */
        end = "End",
    }
    /**
     * Represents image format type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    enum ImageFormat {
        /**
         * Unsupported image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        unsupported = "Unsupported",
        /**
         * Undefined image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        undefined = "Undefined",
        /**
         * Bitmap image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        bmp = "Bmp",
        /**
         * JPEG image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        jpeg = "Jpeg",
        /**
         * GIF image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        gif = "Gif",
        /**
         * TIFF image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        tiff = "Tiff",
        /**
         * PNG image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        png = "Png",
        /**
         * Icon image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        icon = "Icon",
        /**
         * Exif image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        exif = "Exif",
        /**
         * Windows Metafile image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        wmf = "Wmf",
        /**
         * Enhanced Metafile image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        emf = "Emf",
        /**
         * PICT image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pict = "Pict",
        /**
         * PDF image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pdf = "Pdf",
        /**
         * SVG image format.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        svg = "Svg",
    }
    /**
     * Represents the location of a range. You can get range by calling getRange on different objects such as {@link Word.Paragraph} and {@link Word.ContentControl}.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum RangeLocation {
        /**
         * The object's whole range. If the object is a paragraph content control or table content control, the EOP or Table characters after the content control are also included.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        whole = "Whole",
        /**
         * The starting point of the object. For content control, it's the point after the opening tag.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        start = "Start",
        /**
         * The ending point of the object. For paragraph, it's the point before the EOP (end of paragraph). For content control, it's the point before the closing tag.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        end = "End",
        /**
         * For content control only. It's the point before the opening tag.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        before = "Before",
        /**
         * The point after the object. If the object is a paragraph content control or table content control, it's the point after the EOP or Table characters.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        after = "After",
        /**
         * The range between `start` and `end`.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        content = "Content",
    }
    /**
     * Represents the relationship of the location of this instance to another range.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum LocationRelation {
        /**
         * Indicates that this instance and the range are in different subdocuments.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        unrelated = "Unrelated",
        /**
         * Indicates that this instance and the range represent the same range.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        equal = "Equal",
        /**
         * Indicates that this instance contains the range and that it shares the same start character. The range doesn't share the same end character as this instance.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        containsStart = "ContainsStart",
        /**
         * Indicates that this instance contains the range and that it shares the same end character. The range doesn't share the same start character as this instance.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        containsEnd = "ContainsEnd",
        /**
         * Indicates that this instance contains the range, with the exception of the start and end character of this instance.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        contains = "Contains",
        /**
         * Indicates that this instance is inside the range and that it shares the same start character. The range doesn't share the same end character as this instance.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        insideStart = "InsideStart",
        /**
         * Indicates that this instance is inside the range and that it shares the same end character. The range doesn't share the same start character as this instance.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        insideEnd = "InsideEnd",
        /**
         * Indicates that this instance is inside the range. The range doesn't share the same start and end characters as this instance.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        inside = "Inside",
        /**
         * Indicates that this instance occurs before, and is adjacent to, the range.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        adjacentBefore = "AdjacentBefore",
        /**
         * Indicates that this instance starts before the range and overlaps the range's first character.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        overlapsBefore = "OverlapsBefore",
        /**
         * Indicates that this instance occurs before the range.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        before = "Before",
        /**
         * Indicates that this instance occurs after, and is adjacent to, the range.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        adjacentAfter = "AdjacentAfter",
        /**
         * Indicates that this instance starts inside the range and overlaps the range’s last character.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        overlapsAfter = "OverlapsAfter",
        /**
         * Indicates that this instance occurs after the range.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        after = "After",
    }
    /**
     * Represents the location of a {@link Word.Border | border}.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum BorderLocation {
        /**
         * Top border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        top = "Top",
        /**
         * Left border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        left = "Left",
        /**
         * Bottom border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        bottom = "Bottom",
        /**
         * Right border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        right = "Right",
        /**
         * Inside horizontal border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        insideHorizontal = "InsideHorizontal",
        /**
         * Inside vertical border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        insideVertical = "InsideVertical",
        /**
         * Inside border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        inside = "Inside",
        /**
         * Outside border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        outside = "Outside",
        /**
         * All borders.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        all = "All",
    }
    /**
     * Represents the location of cell padding.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum CellPaddingLocation {
        /**
         * Padding at the top of the cell.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        top = "Top",
        /**
         * Padding at the left of the cell.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        left = "Left",
        /**
         * Padding at the bottom of the cell.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        bottom = "Bottom",
        /**
         * Padding at the right of the cell.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        right = "Right",
    }
    /**
     * Represents the width of a style's border.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    enum BorderWidth {
        /**
         * None width.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        none = "None",
        /**
         * 0.25 point.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt025 = "Pt025",
        /**
         * 0.50 point.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt050 = "Pt050",
        /**
         * 0.75 point.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt075 = "Pt075",
        /**
         * 1.00 point. This is the default.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt100 = "Pt100",
        /**
         * 1.50 points.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt150 = "Pt150",
        /**
         * 2.25 points.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt225 = "Pt225",
        /**
         * 3.00 points.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt300 = "Pt300",
        /**
         * 4.50 points.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt450 = "Pt450",
        /**
         * 6.00 points.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pt600 = "Pt600",
        /**
         * Mixed width.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        mixed = "Mixed",
    }
    /**
     * The {@link Word.Border | border} types.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum BorderType {
        /**
         * Mixed border type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        mixed = "Mixed",
        /**
         * No border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        none = "None",
        /**
         * Single border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        single = "Single",
        /**
         * Double border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        double = "Double",
        /**
         * Dotted border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        dotted = "Dotted",
        /**
         * Dashed border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        dashed = "Dashed",
        /**
         * Dot-dashed border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        dotDashed = "DotDashed",
        /**
         * Double dot-dashed border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        dot2Dashed = "Dot2Dashed",
        /**
         * Triple border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        triple = "Triple",
        /**
         * Thin-thick small border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thinThickSmall = "ThinThickSmall",
        /**
         * Thick-thin small border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thickThinSmall = "ThickThinSmall",
        /**
         * Thin-thick-thin small border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thinThickThinSmall = "ThinThickThinSmall",
        /**
         * Thin-thick medium border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thinThickMed = "ThinThickMed",
        /**
         * Thick-thin medium border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thickThinMed = "ThickThinMed",
        /**
         * Thin-thick-thin medium border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thinThickThinMed = "ThinThickThinMed",
        /**
         * Thin-thick large border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thinThickLarge = "ThinThickLarge",
        /**
         * Thick-thin large border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thickThinLarge = "ThickThinLarge",
        /**
         * Thin-thick-thin large border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        thinThickThinLarge = "ThinThickThinLarge",
        /**
         * Wave border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        wave = "Wave",
        /**
         * Double wave border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        doubleWave = "DoubleWave",
        /**
         * Dashed small border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        dashedSmall = "DashedSmall",
        /**
         * Dash-dot-stroked border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        dashDotStroked = "DashDotStroked",
        /**
         * 3D Emboss border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        threeDEmboss = "ThreeDEmboss",
        /**
         * 3D Engrave border.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        threeDEngrave = "ThreeDEngrave",
    }
    /**
     * Represents the vertical alignment of text.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum VerticalAlignment {
        /**
         * Mixed vertical alignment.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        mixed = "Mixed",
        /**
         * Top vertical alignment.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        top = "Top",
        /**
         * Center vertical alignment.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        center = "Center",
        /**
         * Bottom vertical alignment.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        bottom = "Bottom",
    }
    /**
     * Represents the type of list level.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum ListLevelType {
        /**
         * Represents the bullet type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        bullet = "Bullet",
        /**
         * Represents the numbering type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        number = "Number",
        /**
         * Represents the picture type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        picture = "Picture",
    }
    /**
     * Represents the bullet style in a list.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum ListBullet {
        /**
         * Represents custom bullet.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        custom = "Custom",
        /**
         * Represents solid bullet.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        solid = "Solid",
        /**
         * Represents hollow bullet.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        hollow = "Hollow",
        /**
         * Represents square bullet.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        square = "Square",
        /**
         * Represents diamond bullet.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        diamonds = "Diamonds",
        /**
         * Represents arrow bullet.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        arrow = "Arrow",
        /**
         * Represents checkmark bullet.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        checkmark = "Checkmark",
    }
    /**
     * Represents the numbering style in a list.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum ListNumbering {
        /**
         * Represents no numbering.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        none = "None",
        /**
         * Represents Arabic numbering.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        arabic = "Arabic",
        /**
         * Represents upper Roman numeral numbering.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        upperRoman = "UpperRoman",
        /**
         * Represents lower Roman numeral numbering.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        lowerRoman = "LowerRoman",
        /**
         * Represents upper letter numbering.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        upperLetter = "UpperLetter",
        /**
         * Represents lower letter numbering.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        lowerLetter = "LowerLetter",
    }
    /**
     * Represents the built-in style in a Word document.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     *
     * Important: This enum was renamed from `Style` to `BuiltInStyleName` in WordApi 1.5.
     */
    enum BuiltInStyleName {
        /**
         * Mixed styles or other style not in this list.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        other = "Other",
        /**
         * Reset character and paragraph style to default.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        normal = "Normal",
        /**
         * Heading 1 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading1 = "Heading1",
        /**
         * Heading 2 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading2 = "Heading2",
        /**
         * Heading 3 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading3 = "Heading3",
        /**
         * Heading 4 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading4 = "Heading4",
        /**
         * Heading 5 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading5 = "Heading5",
        /**
         * Heading 6 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading6 = "Heading6",
        /**
         * Heading 7 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading7 = "Heading7",
        /**
         * Heading 8 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading8 = "Heading8",
        /**
         * Heading 9 style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        heading9 = "Heading9",
        /**
         * Table-of-content level 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc1 = "Toc1",
        /**
         * Table-of-content level 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc2 = "Toc2",
        /**
         * Table-of-content level 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc3 = "Toc3",
        /**
         * Table-of-content level 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc4 = "Toc4",
        /**
         * Table-of-content level 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc5 = "Toc5",
        /**
         * Table-of-content level 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc6 = "Toc6",
        /**
         * Table-of-content level 7.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc7 = "Toc7",
        /**
         * Table-of-content level 8.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc8 = "Toc8",
        /**
         * Table-of-content level 9.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        toc9 = "Toc9",
        /**
         * Footnote text style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        footnoteText = "FootnoteText",
        /**
         * Header style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        header = "Header",
        /**
         * Footer style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        footer = "Footer",
        /**
         * Caption style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        caption = "Caption",
        /**
         * Footnote reference style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        footnoteReference = "FootnoteReference",
        /**
         * Endnote reference style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        endnoteReference = "EndnoteReference",
        /**
         * Endnote text style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        endnoteText = "EndnoteText",
        /**
         * Title style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        title = "Title",
        /**
         * Subtitle style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        subtitle = "Subtitle",
        /**
         * Hyperlink style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        hyperlink = "Hyperlink",
        /**
         * Strong style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        strong = "Strong",
        /**
         * Emphasis style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        emphasis = "Emphasis",
        /**
         * No spacing style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        noSpacing = "NoSpacing",
        /**
         * List paragraph style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listParagraph = "ListParagraph",
        /**
         * Quote style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        quote = "Quote",
        /**
         * Intense quote style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        intenseQuote = "IntenseQuote",
        /**
         * Subtle emphasis style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        subtleEmphasis = "SubtleEmphasis",
        /**
         * Intense emphasis style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        intenseEmphasis = "IntenseEmphasis",
        /**
         * Subtle reference style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        subtleReference = "SubtleReference",
        /**
         * Intense reference style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        intenseReference = "IntenseReference",
        /**
         * Book title style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        bookTitle = "BookTitle",
        /**
         * Bibliography style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        bibliography = "Bibliography",
        /**
         * Table-of-content heading.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        tocHeading = "TocHeading",
        /**
         * Table grid style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        tableGrid = "TableGrid",
        /**
         * Plain table style 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        plainTable1 = "PlainTable1",
        /**
         * Plain table style 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        plainTable2 = "PlainTable2",
        /**
         * Plain table style 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        plainTable3 = "PlainTable3",
        /**
         * Plain table style 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        plainTable4 = "PlainTable4",
        /**
         * Plain table style 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        plainTable5 = "PlainTable5",
        /**
         * Table grid light style.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        tableGridLight = "TableGridLight",
        /**
         * Grid table light style 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable1Light = "GridTable1Light",
        /**
         * Grid table light style 1, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable1Light_Accent1 = "GridTable1Light_Accent1",
        /**
         * Grid table light style 1, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable1Light_Accent2 = "GridTable1Light_Accent2",
        /**
         * Grid table light style 1, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable1Light_Accent3 = "GridTable1Light_Accent3",
        /**
         * Grid table light style 1, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable1Light_Accent4 = "GridTable1Light_Accent4",
        /**
         * Grid table light style 1, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable1Light_Accent5 = "GridTable1Light_Accent5",
        /**
         * Grid table light style 1, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable1Light_Accent6 = "GridTable1Light_Accent6",
        /**
         * Grid table style 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable2 = "GridTable2",
        /**
         * Grid table style 2, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable2_Accent1 = "GridTable2_Accent1",
        /**
         * Grid table style 2, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable2_Accent2 = "GridTable2_Accent2",
        /**
         * Grid table style 2, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable2_Accent3 = "GridTable2_Accent3",
        /**
         * Grid table style 2, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable2_Accent4 = "GridTable2_Accent4",
        /**
         * Grid table style 2, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable2_Accent5 = "GridTable2_Accent5",
        /**
         * Grid table style 2, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable2_Accent6 = "GridTable2_Accent6",
        /**
         * Grid table style 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable3 = "GridTable3",
        /**
         * Grid table style 3, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable3_Accent1 = "GridTable3_Accent1",
        /**
         * Grid table style 3, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable3_Accent2 = "GridTable3_Accent2",
        /**
         * Grid table style 3, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable3_Accent3 = "GridTable3_Accent3",
        /**
         * Grid table style 3, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable3_Accent4 = "GridTable3_Accent4",
        /**
         * Grid table style 3, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable3_Accent5 = "GridTable3_Accent5",
        /**
         * Grid table style 3, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable3_Accent6 = "GridTable3_Accent6",
        /**
         * Grid table style 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable4 = "GridTable4",
        /**
         * Grid table style 4, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable4_Accent1 = "GridTable4_Accent1",
        /**
         * Grid table style 4, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable4_Accent2 = "GridTable4_Accent2",
        /**
         * Grid table style 4, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable4_Accent3 = "GridTable4_Accent3",
        /**
         * Grid table style 4, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable4_Accent4 = "GridTable4_Accent4",
        /**
         * Grid table style 4, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable4_Accent5 = "GridTable4_Accent5",
        /**
         * Grid table style 4, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable4_Accent6 = "GridTable4_Accent6",
        /**
         * Grid table dark style 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable5Dark = "GridTable5Dark",
        /**
         * Grid table dark style 5, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable5Dark_Accent1 = "GridTable5Dark_Accent1",
        /**
         * Grid table dark style 5, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable5Dark_Accent2 = "GridTable5Dark_Accent2",
        /**
         * Grid table dark style 5, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable5Dark_Accent3 = "GridTable5Dark_Accent3",
        /**
         * Grid table dark style 5, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable5Dark_Accent4 = "GridTable5Dark_Accent4",
        /**
         * Grid table dark style 5, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable5Dark_Accent5 = "GridTable5Dark_Accent5",
        /**
         * Grid table dark style 5, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable5Dark_Accent6 = "GridTable5Dark_Accent6",
        /**
         * Grid table colorful style 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable6Colorful = "GridTable6Colorful",
        /**
         * Grid table colorful style 6, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable6Colorful_Accent1 = "GridTable6Colorful_Accent1",
        /**
         * Grid table colorful style 6, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable6Colorful_Accent2 = "GridTable6Colorful_Accent2",
        /**
         * Grid table colorful style 6, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable6Colorful_Accent3 = "GridTable6Colorful_Accent3",
        /**
         * Grid table colorful style 6, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable6Colorful_Accent4 = "GridTable6Colorful_Accent4",
        /**
         * Grid table colorful style 6, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable6Colorful_Accent5 = "GridTable6Colorful_Accent5",
        /**
         * Grid table colorful style 6, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable6Colorful_Accent6 = "GridTable6Colorful_Accent6",
        /**
         * Grid table colorful style 7.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable7Colorful = "GridTable7Colorful",
        /**
         * Grid table colorful style 7, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable7Colorful_Accent1 = "GridTable7Colorful_Accent1",
        /**
         * Grid table colorful style 7, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable7Colorful_Accent2 = "GridTable7Colorful_Accent2",
        /**
         * Grid table colorful style 7, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable7Colorful_Accent3 = "GridTable7Colorful_Accent3",
        /**
         * Grid table colorful style 7, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable7Colorful_Accent4 = "GridTable7Colorful_Accent4",
        /**
         * Grid table colorful style 7, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable7Colorful_Accent5 = "GridTable7Colorful_Accent5",
        /**
         * Grid table colorful style 7, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        gridTable7Colorful_Accent6 = "GridTable7Colorful_Accent6",
        /**
         * List table light style 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable1Light = "ListTable1Light",
        /**
         * List table light style 1, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable1Light_Accent1 = "ListTable1Light_Accent1",
        /**
         * List table light style 1, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable1Light_Accent2 = "ListTable1Light_Accent2",
        /**
         * List table light style 1, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable1Light_Accent3 = "ListTable1Light_Accent3",
        /**
         * List table light style 1, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable1Light_Accent4 = "ListTable1Light_Accent4",
        /**
         * List table light style 1, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable1Light_Accent5 = "ListTable1Light_Accent5",
        /**
         * List table light style 1, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable1Light_Accent6 = "ListTable1Light_Accent6",
        /**
         * List table style 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable2 = "ListTable2",
        /**
         * List table style 2, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable2_Accent1 = "ListTable2_Accent1",
        /**
         * List table style 2, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable2_Accent2 = "ListTable2_Accent2",
        /**
         * List table style 2, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable2_Accent3 = "ListTable2_Accent3",
        /**
         * List table style 2, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable2_Accent4 = "ListTable2_Accent4",
        /**
         * List table style 2, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable2_Accent5 = "ListTable2_Accent5",
        /**
         * List table style 2, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable2_Accent6 = "ListTable2_Accent6",
        /**
         * List table style 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable3 = "ListTable3",
        /**
         * List table style 3, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable3_Accent1 = "ListTable3_Accent1",
        /**
         * List table style 3, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable3_Accent2 = "ListTable3_Accent2",
        /**
         * List table style 3, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable3_Accent3 = "ListTable3_Accent3",
        /**
         * List table style 3, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable3_Accent4 = "ListTable3_Accent4",
        /**
         * List table style 3, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable3_Accent5 = "ListTable3_Accent5",
        /**
         * List table style 3, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable3_Accent6 = "ListTable3_Accent6",
        /**
         * List table style 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable4 = "ListTable4",
        /**
         * List table style 4, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable4_Accent1 = "ListTable4_Accent1",
        /**
         * List table style 4, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable4_Accent2 = "ListTable4_Accent2",
        /**
         * List table style 4, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable4_Accent3 = "ListTable4_Accent3",
        /**
         * List table style 4, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable4_Accent4 = "ListTable4_Accent4",
        /**
         * List table style 4, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable4_Accent5 = "ListTable4_Accent5",
        /**
         * List table style 4, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable4_Accent6 = "ListTable4_Accent6",
        /**
         * List table dark style 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable5Dark = "ListTable5Dark",
        /**
         * List table dark style 5, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable5Dark_Accent1 = "ListTable5Dark_Accent1",
        /**
         * List table dark style 5, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable5Dark_Accent2 = "ListTable5Dark_Accent2",
        /**
         * List table dark style 5, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable5Dark_Accent3 = "ListTable5Dark_Accent3",
        /**
         * List table dark style 5, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable5Dark_Accent4 = "ListTable5Dark_Accent4",
        /**
         * List table dark style 5, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable5Dark_Accent5 = "ListTable5Dark_Accent5",
        /**
         * List table dark style 5, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable5Dark_Accent6 = "ListTable5Dark_Accent6",
        /**
         * List table colorful style 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable6Colorful = "ListTable6Colorful",
        /**
         * List table colorful style 6, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable6Colorful_Accent1 = "ListTable6Colorful_Accent1",
        /**
         * List table colorful style 6, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable6Colorful_Accent2 = "ListTable6Colorful_Accent2",
        /**
         * List table colorful style 6, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable6Colorful_Accent3 = "ListTable6Colorful_Accent3",
        /**
         * List table colorful style 6, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable6Colorful_Accent4 = "ListTable6Colorful_Accent4",
        /**
         * List table colorful style 6, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable6Colorful_Accent5 = "ListTable6Colorful_Accent5",
        /**
         * List table colorful style 6, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable6Colorful_Accent6 = "ListTable6Colorful_Accent6",
        /**
         * List table colorful style 7.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable7Colorful = "ListTable7Colorful",
        /**
         * List table colorful style 7, accent 1.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable7Colorful_Accent1 = "ListTable7Colorful_Accent1",
        /**
         * List table colorful style 7, accent 2.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable7Colorful_Accent2 = "ListTable7Colorful_Accent2",
        /**
         * List table colorful style 7, accent 3.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable7Colorful_Accent3 = "ListTable7Colorful_Accent3",
        /**
         * List table colorful style 7, accent 4.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable7Colorful_Accent4 = "ListTable7Colorful_Accent4",
        /**
         * List table colorful style 7, accent 5.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable7Colorful_Accent5 = "ListTable7Colorful_Accent5",
        /**
         * List table colorful style 7, accent 6.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        listTable7Colorful_Accent6 = "ListTable7Colorful_Accent6",
    }
    /**
     * Represents the document property type.
     *
     * @remarks
     * [Api set: WordApi 1.3]
     */
    enum DocumentPropertyType {
        /**
         * Represents a string type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        string = "String",
        /**
         * Represents a number type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        number = "Number",
        /**
         * Represents a date type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        date = "Date",
        /**
         * Represents a Boolean type.
         * @remarks
         * [Api set: WordApi 1.3]
         */
        boolean = "Boolean",
    }
    /**
     * Specifies the type of item to print from a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum PrintOutItem {
        /**
         * Represents printing the document content.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentContent = "DocumentContent",
        /**
         * Represents printing the document properties.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        properties = "Properties",
        /**
         * Represents printing the comments.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        comments = "Comments",
        /**
         * Represents printing the markup.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        markup = "Markup",
        /**
         * Represents printing the styles.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        styles = "Styles",
        /**
         * Represents printing the AutoText entries.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        autoTextEntries = "AutoTextEntries",
        /**
         * Represents printing the key assignments.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        keyAssignments = "KeyAssignments",
        /**
         * Represents printing the envelope.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        envelope = "Envelope",
        /**
         * Represents printing the document with markup.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentWithMarkup = "DocumentWithMarkup",
    }
    /**
     * Specifies which pages to print based on odd or even page numbers.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum PrintOutPages {
        /**
         * Represents printing all pages.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        all = "All",
        /**
         * Represents printing only odd-numbered pages.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oddOnly = "OddOnly",
        /**
         * Represents printing only even-numbered pages.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenOnly = "EvenOnly",
    }
    /**
     * Specifies the range of content to print from a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum PrintOutRange {
        /**
         * Represents printing the entire document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        allDocument = "AllDocument",
        /**
         * Represents printing the current selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selection = "Selection",
        /**
         * Represents printing the current page.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        currentPage = "CurrentPage",
        /**
         * Represents printing a range from one page to another.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fromTo = "FromTo",
        /**
         * Represents printing specific ranges of pages.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rangeOfPages = "RangeOfPages",
    }
    /**
     * Specifies the export format for a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ExportFormat {
        /**
         * PDF export format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pdf = "Pdf",
        /**
         * XPS export format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xps = "Xps",
    }
    /**
     * Specifies the export item type for a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ExportItem {
        /**
         * Exports document content only.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentContent = "DocumentContent",
        /**
         * Exports document with markup (annotations).
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentWithMarkup = "DocumentWithMarkup",
    }
    /**
     * Specifies the optimization target for document export.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ExportOptimizeFor {
        /**
         * Optimizes for print.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        print = "Print",
        /**
         * Optimizes for on-screen display.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        onScreen = "OnScreen",
    }
    /**
     * Specifies the range to export from a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ExportRange {
        /**
         * Exports the entire document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        allDocument = "AllDocument",
        /**
         * Exports the current selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selection = "Selection",
        /**
         * Exports the current page.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        currentPage = "CurrentPage",
        /**
         * Exports a specific range of pages.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fromTo = "FromTo",
    }
    /**
     * Specifies the type of bookmarks to create during export.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ExportCreateBookmarks {
        /**
         * Do not create bookmarks.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Creates bookmarks from headings.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        headings = "Headings",
        /**
         * Creates bookmarks from Word bookmarks.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        wordBookmarks = "WordBookmarks",
    }
    /**
     * Specifies the source of formatting to use during document operations.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum UseFormattingFrom {
        /**
         * Represents using formatting from the current document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        current = "Current",
        /**
         * Represents using formatting from the selected document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selected = "Selected",
        /**
         * Represents prompting the user for formatting preferences.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        prompt = "Prompt",
    }
    /**
     * Indicates the auto macros that can run automatically in Word.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum AutoMacro {
        /**
         * Indicates that the macro runs automatically when Word starts.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        startWord = "StartWord",
        /**
         * Indicates that the macro runs automatically when a new document is created.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        new = "New",
        /**
         * Indicates that the macro runs automatically when the document is opened.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        open = "Open",
        /**
         * Indicates that the macro runs automatically when the document is closed.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        close = "Close",
        /**
         * Indicates that the macro runs automatically when the document is saved.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        exit = "Exit",
        /**
         * Indicates that the macro runs automatically when the document is synchronized.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sync = "Sync",
    }
    /**
     * Document statistic types.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum StatisticType {
        /**
         * Words in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        words = "Words",
        /**
         * Lines in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lines = "Lines",
        /**
         * Pages in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pages = "Pages",
        /**
         * Characters in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        characters = "Characters",
        /**
         * Paragraphs in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        paragraphs = "Paragraphs",
        /**
         * Characters including spaces.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        charactersWithSpaces = "CharactersWithSpaces",
        /**
         * Far East (DBCS) characters.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        farEastCharacters = "FarEastCharacters",
    }
    /**
     * Specifies the type of document information to remove.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum RemoveDocInfoType {
        /**
         * Comments in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        comments = "Comments",
        /**
         * Revisions in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        revisions = "Revisions",
        /**
         * Versions in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        versions = "Versions",
        /**
         * Personal information in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        removePersonalInformation = "RemovePersonalInformation",
        /**
         * Email header in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        emailHeader = "EmailHeader",
        /**
         * Routing slip in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        routingSlip = "RoutingSlip",
        /**
         * Send for review information in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sendForReview = "SendForReview",
        /**
         * Document properties.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentProperties = "DocumentProperties",
        /**
         * Template information.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        template = "Template",
        /**
         * Document workspace properties.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentWorkspace = "DocumentWorkspace",
        /**
         * Ink annotations in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        inkAnnotations = "InkAnnotations",
        /**
         * Document server properties.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentServerProperties = "DocumentServerProperties",
        /**
         * Document management policy.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentManagementPolicy = "DocumentManagementPolicy",
        /**
         * Content type information.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        contentType = "ContentType",
        /**
         * Taskpane web extensions.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        taskpaneWebExtensions = "TaskpaneWebExtensions",
        /**
         * At mentions in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        atMentions = "AtMentions",
        /**
         * Document tasks.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentTasks = "DocumentTasks",
        /**
         * Document intelligence information.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentIntelligence = "DocumentIntelligence",
        /**
         * Comment reactions in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        commentReactions = "CommentReactions",
        /**
         * All document information types.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        all = "All",
    }
    /**
     * Specifies the version type for document check-in operations.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum CheckInVersionType {
        /**
         * Represents a minor version check-in.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        minor = "Minor",
        /**
         * Represents a major version check-in.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        major = "Major",
        /**
         * Represents an overwrite version check-in.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        overwrite = "Overwrite",
    }
    /**
     * Specifies the target document for merge operations.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum MergeTarget {
        /**
         * Represents merging into the selected document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selected = "Selected",
        /**
         * Represents merging into the current document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        current = "Current",
        /**
         * Represents merging into a new document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        new = "New",
    }
    /**
     * Specifies the type of document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum DocumentType {
        /**
         * Represents a standard document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        document = "Document",
        /**
         * Represents a document template.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        template = "Template",
        /**
         * Represents a frameset document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        frameset = "Frameset",
    }
    /**
     * Specifies the kind or purpose of a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum DocumentKind {
        /**
         * Represents a document with no specified kind.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        notSpecified = "NotSpecified",
        /**
         * Represents a letter document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        letter = "Letter",
        /**
         * Represents an email document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        email = "Email",
    }
    /**
     * Represents the file format to use when saving a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum FileSaveFormat {
        /**
         * Represents Microsoft Office Word 97 - 2003 binary file format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        document = "Document",
        /**
         * Represents Word template format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        template = "Template",
        /**
         * Represents Microsoft Windows text format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        text = "Text",
        /**
         * Represents Windows text format with line breaks preserved.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        textLineBreaks = "TextLineBreaks",
        /**
         * Represents Microsoft DOS text format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        dosText = "DosText",
        /**
         * Represents Microsoft DOS text with line breaks preserved.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        dosTextLineBreaks = "DosTextLineBreaks",
        /**
         * Represents Rich Text Format (RTF).
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rtf = "Rtf",
        /**
         * Represents Unicode text format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unicodeText = "UnicodeText",
        /**
         * Represents standard HTML format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        html = "Html",
        /**
         * Represents Web archive format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        webArchive = "WebArchive",
        /**
         * Represents filtered HTML format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        filteredHtml = "FilteredHtml",
        /**
         * Represents Extensible Markup Language (XML) format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xml = "Xml",
        /**
         * Represents XML document format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xmlDocument = "XmlDocument",
        /**
         * Represents XML document format with macros enabled.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xmlDocumentMacroEnabled = "XmlDocumentMacroEnabled",
        /**
         * Represents XML template format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xmlTemplate = "XmlTemplate",
        /**
         * Represents XML template format with macros enabled.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xmlTemplateMacroEnabled = "XmlTemplateMacroEnabled",
        /**
         * Represents Word default document file format. For Word, this is the DOCX format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        documentDefault = "DocumentDefault",
        /**
         * Represents PDF format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pdf = "Pdf",
        /**
         * Represents XPS format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        xps = "Xps",
        /**
         * Represents Open XML file format saved as a single XML file.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        flatXml = "FlatXml",
        /**
         * Represents Open XML file format with macros enabled saved as a single XML file.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        flatXmlMacroEnabled = "FlatXmlMacroEnabled",
        /**
         * Represents Open XML template format saved as a single XML file.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        flatXmlTemplate = "FlatXmlTemplate",
        /**
         * Represents Open XML template format with macros enabled saved as a single XML file.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        flatXmlTemplateMacroEnabled = "FlatXmlTemplateMacroEnabled",
        /**
         * Represents OpenDocument Text format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        openDocumentText = "OpenDocumentText",
        /**
         * Represents Strict Open XML document format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        strictOpenXmlDocument = "StrictOpenXmlDocument",
    }
    /**
     * Specifies the protection type for a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ProtectionType {
        /**
         * No protection is applied to the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        noProtection = "NoProtection",
        /**
         * Only revisions are allowed in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        allowOnlyRevisions = "AllowOnlyRevisions",
        /**
         * Only comments are allowed in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        allowOnlyComments = "AllowOnlyComments",
        /**
         * Only form fields are allowed in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        allowOnlyFormFields = "AllowOnlyFormFields",
        /**
         * Only reading is allowed in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        allowOnlyReading = "AllowOnlyReading",
    }
    /**
     * Represents how Word marks line and paragraph breaks in text files.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum LineEndingType {
        /**
         * Represents carriage return and line feed (Windows standard).
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        crlf = "Crlf",
        /**
         * Represents carriage return only (Mac classic standard).
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        crOnly = "CrOnly",
        /**
         * Represents line feed only (Unix/Linux standard).
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lfOnly = "LfOnly",
        /**
         * Represents line feed and carriage return.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lfcr = "Lfcr",
        /**
         * Represents line separator and paragraph separator.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lsps = "Lsps",
    }
    /**
     * Specifies the document encoding types.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum DocumentEncoding {
        /**
         * Thai encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        thai = "Thai",
        /**
         * Japanese Shift Japanese Industrial Standards (Shift JIS) encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        japaneseShiftJis = "JapaneseShiftJis",
        /**
         * Simplified Chinese Guojia Biaozhun Kuozhan (GBK, which means "National Standard Extended" in Chinese) encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        simplifiedChineseGbk = "SimplifiedChineseGbk",
        /**
         * Korean encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        korean = "Korean",
        /**
         * Traditional Chinese Big5 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        traditionalChineseBig5 = "TraditionalChineseBig5",
        /**
         * Unicode Little Endian encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unicodeLittleEndian = "UnicodeLittleEndian",
        /**
         * Unicode Big Endian encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unicodeBigEndian = "UnicodeBigEndian",
        /**
         * Central European encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        centralEuropean = "CentralEuropean",
        /**
         * Cyrillic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cyrillic = "Cyrillic",
        /**
         * Western encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        western = "Western",
        /**
         * Greek encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        greek = "Greek",
        /**
         * Turkish encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        turkish = "Turkish",
        /**
         * Hebrew encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hebrew = "Hebrew",
        /**
         * Arabic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arabic = "Arabic",
        /**
         * Baltic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        baltic = "Baltic",
        /**
         * Vietnamese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        vietnamese = "Vietnamese",
        /**
         * Auto detect encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        autoDetect = "AutoDetect",
        /**
         * Japanese auto detect encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        japaneseAutoDetect = "JapaneseAutoDetect",
        /**
         * Simplified Chinese auto detect encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        simplifiedChineseAutoDetect = "SimplifiedChineseAutoDetect",
        /**
         * Korean auto detect encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        koreanAutoDetect = "KoreanAutoDetect",
        /**
         * Traditional Chinese auto detect encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        traditionalChineseAutoDetect = "TraditionalChineseAutoDetect",
        /**
         * Cyrillic auto detect encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cyrillicAutoDetect = "CyrillicAutoDetect",
        /**
         * Greek auto detect encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        greekAutoDetect = "GreekAutoDetect",
        /**
         * Arabic auto detect encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arabicAutoDetect = "ArabicAutoDetect",
        /**
         * ISO 8859-1 Latin1 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88591Latin1 = "Iso88591Latin1",
        /**
         * ISO 8859-2 Central Europe encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88592CentralEurope = "Iso88592CentralEurope",
        /**
         * ISO 8859-3 Latin3 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88593Latin3 = "Iso88593Latin3",
        /**
         * ISO 8859-4 Baltic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88594Baltic = "Iso88594Baltic",
        /**
         * ISO 8859-5 Cyrillic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88595Cyrillic = "Iso88595Cyrillic",
        /**
         * ISO 8859-6 Arabic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88596Arabic = "Iso88596Arabic",
        /**
         * ISO 8859-7 Greek encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88597Greek = "Iso88597Greek",
        /**
         * ISO 8859-8 Hebrew encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88598Hebrew = "Iso88598Hebrew",
        /**
         * ISO 8859-9 Turkish encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88599Turkish = "Iso88599Turkish",
        /**
         * ISO 8859-15 Latin9 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso885915Latin9 = "Iso885915Latin9",
        /**
         * ISO 8859-8 Hebrew logical encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso88598HebrewLogical = "Iso88598HebrewLogical",
        /**
         * ISO 2022-JP no halfwidth katakana encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso2022JpNoHalfwidthKatakana = "Iso2022JpNoHalfwidthKatakana",
        /**
         * ISO 2022-JP JIS X 0202-1984 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso2022JpJisX02021984 = "Iso2022JpJisX02021984",
        /**
         * ISO 2022-JP JIS X 0201-1989 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso2022JpJisX02011989 = "Iso2022JpJisX02011989",
        /**
         * ISO 2022-KR encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso2022Kr = "Iso2022Kr",
        /**
         * ISO 2022-CN Traditional Chinese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso2022CnTraditionalChinese = "Iso2022CnTraditionalChinese",
        /**
         * ISO 2022-CN Simplified Chinese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso2022CnSimplifiedChinese = "Iso2022CnSimplifiedChinese",
        /**
         * Mac Roman encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macRoman = "MacRoman",
        /**
         * Mac Japanese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macJapanese = "MacJapanese",
        /**
         * Mac Traditional Chinese Big5 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macTraditionalChineseBig5 = "MacTraditionalChineseBig5",
        /**
         * Mac Korean encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macKorean = "MacKorean",
        /**
         * Mac Arabic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macArabic = "MacArabic",
        /**
         * Mac Hebrew encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macHebrew = "MacHebrew",
        /**
         * Mac Greek1 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macGreek1 = "MacGreek1",
        /**
         * Mac Cyrillic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macCyrillic = "MacCyrillic",
        /**
         * Mac Simplified Chinese GB2312 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macSimplifiedChineseGb2312 = "MacSimplifiedChineseGb2312",
        /**
         * Mac Romania encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macRomania = "MacRomania",
        /**
         * Mac Ukraine encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macUkraine = "MacUkraine",
        /**
         * Mac Latin2 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macLatin2 = "MacLatin2",
        /**
         * Mac Icelandic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macIcelandic = "MacIcelandic",
        /**
         * Mac Turkish encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macTurkish = "MacTurkish",
        /**
         * Mac Croatia encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        macCroatia = "MacCroatia",
        /**
         * EBCDIC US-Canada encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicUsCanada = "EbcdicUsCanada",
        /**
         * EBCDIC International encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicInternational = "EbcdicInternational",
        /**
         * EBCDIC Multilingual ROECE Latin2 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicMultilingualRoeceLatin2 = "EbcdicMultilingualRoeceLatin2",
        /**
         * EBCDIC Greek Modern encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicGreekModern = "EbcdicGreekModern",
        /**
         * EBCDIC Turkish Latin5 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicTurkishLatin5 = "EbcdicTurkishLatin5",
        /**
         * EBCDIC Germany encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicGermany = "EbcdicGermany",
        /**
         * EBCDIC Denmark-Norway encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicDenmarkNorway = "EbcdicDenmarkNorway",
        /**
         * EBCDIC Finland-Sweden encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicFinlandSweden = "EbcdicFinlandSweden",
        /**
         * EBCDIC Italy encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicItaly = "EbcdicItaly",
        /**
         * EBCDIC Latin America-Spain encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicLatinAmericaSpain = "EbcdicLatinAmericaSpain",
        /**
         * EBCDIC United Kingdom encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicUnitedKingdom = "EbcdicUnitedKingdom",
        /**
         * EBCDIC Japanese Katakana Extended encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicJapaneseKatakanaExtended = "EbcdicJapaneseKatakanaExtended",
        /**
         * EBCDIC France encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicFrance = "EbcdicFrance",
        /**
         * EBCDIC Arabic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicArabic = "EbcdicArabic",
        /**
         * EBCDIC Greek encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicGreek = "EbcdicGreek",
        /**
         * EBCDIC Hebrew encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicHebrew = "EbcdicHebrew",
        /**
         * EBCDIC Korean Extended encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicKoreanExtended = "EbcdicKoreanExtended",
        /**
         * EBCDIC Thai encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicThai = "EbcdicThai",
        /**
         * EBCDIC Icelandic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicIcelandic = "EbcdicIcelandic",
        /**
         * EBCDIC Turkish encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicTurkish = "EbcdicTurkish",
        /**
         * EBCDIC Russian encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicRussian = "EbcdicRussian",
        /**
         * EBCDIC Serbian-Bulgarian encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicSerbianBulgarian = "EbcdicSerbianBulgarian",
        /**
         * EBCDIC Japanese Katakana Extended and Japanese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicJapaneseKatakanaExtendedAndJapanese = "EbcdicJapaneseKatakanaExtendedAndJapanese",
        /**
         * EBCDIC US-Canada and Japanese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicUsCanadaAndJapanese = "EbcdicUsCanadaAndJapanese",
        /**
         * EBCDIC Korean Extended and Korean encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicKoreanExtendedAndKorean = "EbcdicKoreanExtendedAndKorean",
        /**
         * EBCDIC Simplified Chinese Extended and Simplified Chinese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicSimplifiedChineseExtendedAndSimplifiedChinese = "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese",
        /**
         * EBCDIC US-Canada and Traditional Chinese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicUsCanadaAndTraditionalChinese = "EbcdicUsCanadaAndTraditionalChinese",
        /**
         * EBCDIC Japanese Latin Extended and Japanese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ebcdicJapaneseLatinExtendedAndJapanese = "EbcdicJapaneseLatinExtendedAndJapanese",
        /**
         * OEM United States encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemUnitedStates = "OemUnitedStates",
        /**
         * OEM Greek 437G encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemGreek437G = "OemGreek437G",
        /**
         * OEM Baltic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemBaltic = "OemBaltic",
        /**
         * OEM Multilingual Latin I encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemMultilingualLatinI = "OemMultilingualLatinI",
        /**
         * OEM Multilingual Latin II encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemMultilingualLatinIi = "OemMultilingualLatinIi",
        /**
         * OEM Cyrillic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemCyrillic = "OemCyrillic",
        /**
         * OEM Turkish encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemTurkish = "OemTurkish",
        /**
         * OEM Portuguese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemPortuguese = "OemPortuguese",
        /**
         * OEM Icelandic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemIcelandic = "OemIcelandic",
        /**
         * OEM Hebrew encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemHebrew = "OemHebrew",
        /**
         * OEM Canadian French encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemCanadianFrench = "OemCanadianFrench",
        /**
         * OEM Arabic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemArabic = "OemArabic",
        /**
         * OEM Nordic encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemNordic = "OemNordic",
        /**
         * OEM Cyrillic II encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemCyrillicIi = "OemCyrillicIi",
        /**
         * OEM Modern Greek encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oemModernGreek = "OemModernGreek",
        /**
         * EUC Japanese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        eucJapanese = "EucJapanese",
        /**
         * EUC Chinese Simplified Chinese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        eucChineseSimplifiedChinese = "EucChineseSimplifiedChinese",
        /**
         * EUC Korean encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        eucKorean = "EucKorean",
        /**
         * EUC Taiwanese Traditional Chinese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        eucTaiwaneseTraditionalChinese = "EucTaiwaneseTraditionalChinese",
        /**
         * ISCII Devanagari encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiDevanagari = "IsciiDevanagari",
        /**
         * ISCII Bengali encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiBengali = "IsciiBengali",
        /**
         * ISCII Tamil encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiTamil = "IsciiTamil",
        /**
         * ISCII Telugu encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiTelugu = "IsciiTelugu",
        /**
         * ISCII Assamese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiAssamese = "IsciiAssamese",
        /**
         * ISCII Oriya encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiOriya = "IsciiOriya",
        /**
         * ISCII Kannada encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiKannada = "IsciiKannada",
        /**
         * ISCII Malayalam encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiMalayalam = "IsciiMalayalam",
        /**
         * ISCII Gujarati encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiGujarati = "IsciiGujarati",
        /**
         * ISCII Punjabi encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isciiPunjabi = "IsciiPunjabi",
        /**
         * Arabic ASMO encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arabicAsmo = "ArabicAsmo",
        /**
         * Arabic Transparent ASMO encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        arabicTransparentAsmo = "ArabicTransparentAsmo",
        /**
         * Korean Johab encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        koreanJohab = "KoreanJohab",
        /**
         * Taiwan CNS encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        taiwanCns = "TaiwanCns",
        /**
         * Taiwan TCA encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        taiwanTca = "TaiwanTca",
        /**
         * Taiwan Eten encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        taiwanEten = "TaiwanEten",
        /**
         * Taiwan IBM5550 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        taiwanIbm5550 = "TaiwanIbm5550",
        /**
         * Taiwan TeleText encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        taiwanTeleText = "TaiwanTeleText",
        /**
         * Taiwan Wang encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        taiwanWang = "TaiwanWang",
        /**
         * IA5 IRV encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ia5Irv = "Ia5Irv",
        /**
         * IA5 German encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ia5German = "Ia5German",
        /**
         * IA5 Swedish encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ia5Swedish = "Ia5Swedish",
        /**
         * IA5 Norwegian encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ia5Norwegian = "Ia5Norwegian",
        /**
         * US ASCII encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        usaAscii = "UsaAscii",
        /**
         * T61 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        t61 = "T61",
        /**
         * ISO 6937 Non-Spacing Accent encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        iso6937NonSpacingAccent = "Iso6937NonSpacingAccent",
        /**
         * KOI8-R encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        koi8R = "Koi8R",
        /**
         * Ext Alpha Lowercase encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        extAlphaLowercase = "ExtAlphaLowercase",
        /**
         * KOI8-U encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        koi8U = "Koi8U",
        /**
         * Europa3 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        europa3 = "Europa3",
        /**
         * HZ GB Simplified Chinese encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hzGbSimplifiedChinese = "HzGbSimplifiedChinese",
        /**
         * Simplified Chinese GB18030 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        simplifiedChineseGb18030 = "SimplifiedChineseGb18030",
        /**
         * UTF-7 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        utf7 = "Utf7",
        /**
         * UTF-8 encoding.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        utf8 = "Utf8",
    }
    /**
     * Specifies the compatibility mode that Word uses when opening the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum CompatibilityMode {
        /**
         * Word 2003 compatibility mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        word2003 = "Word2003",
        /**
         * Word 2007 compatibility mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        word2007 = "Word2007",
        /**
         * Word 2010 compatibility mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        word2010 = "Word2010",
        /**
         * Word 2013 compatibility mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        word2013 = "Word2013",
        /**
         * Current Word version compatibility mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        current = "Current",
    }
    /**
     * Represents the type of style.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum StyleType {
        /**
         * Represents that the style is a character style.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        character = "Character",
        /**
         * Represents that the style is a list style. Currently supported on desktop.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        list = "List",
        /**
         * Represents that the style is a paragraph style.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        paragraph = "Paragraph",
        /**
         * Represents that the style is a table style.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        table = "Table",
    }
    /**
     * Represents the outline levels.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum OutlineLevel {
        /**
         * Represents outline level 1.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel1 = "OutlineLevel1",
        /**
         * Represents outline level 2.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel2 = "OutlineLevel2",
        /**
         * Represents outline level 3.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel3 = "OutlineLevel3",
        /**
         * Represents outline level 4.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel4 = "OutlineLevel4",
        /**
         * Represents outline level 5.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel5 = "OutlineLevel5",
        /**
         * Represents outline level 6.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel6 = "OutlineLevel6",
        /**
         * Represents outline level 7.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel7 = "OutlineLevel7",
        /**
         * Represents outline level 8.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel8 = "OutlineLevel8",
        /**
         * Represents outline level 9.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevel9 = "OutlineLevel9",
        /**
         * Represents outline level body text, not an outline level.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        outlineLevelBodyText = "OutlineLevelBodyText",
    }
    /**
     * Specifies the close behavior for `Document.close`.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum CloseBehavior {
        /**
         * Saves the changes before closing the document.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        save = "Save",
        /**
         * Discard the possible changes when closing the document.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        skipSave = "SkipSave",
    }
    /**
     * Specifies the save behavior for `Document.save`.
     *
     * @remarks
     * [Api set: WordApi 1.1]
     */
    enum SaveBehavior {
        /**
         * Saves the document without prompting the user. If it's a new document,
                    it will be saved with the default name or specified name in the default location.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        save = "Save",
        /**
         * Displays the "Save As" dialog to the user if the document hasn't been saved.
                    Won't take effect if the document was previously saved.
         * @remarks
         * [Api set: WordApi 1.1]
         */
        prompt = "Prompt",
    }
    /**
     * Represents the type of {@link Word.Field} object.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum FieldType {
        /**
         * Represents that the field type is Add-in.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        addin = "Addin",
        /**
         * Represents that the field type is AddressBlock.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        addressBlock = "AddressBlock",
        /**
         * Represents that the field type is Advance.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        advance = "Advance",
        /**
         * Represents that the field type is Ask.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ask = "Ask",
        /**
         * Represents that the field type is Author.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        author = "Author",
        /**
         * Represents that the field type is AutoText.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        autoText = "AutoText",
        /**
         * Represents that the field type is AutoTextList.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        autoTextList = "AutoTextList",
        /**
         * Represents that the field type is Barcode.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        barCode = "BarCode",
        /**
         * Represents that the field type is Bibliography.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        bibliography = "Bibliography",
        /**
         * Represents that the field type is BidiOutline.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        bidiOutline = "BidiOutline",
        /**
         * Represents that the field type is Citation.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        citation = "Citation",
        /**
         * Represents that the field type is Comments.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        comments = "Comments",
        /**
         * Represents that the field type is Compare.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        compare = "Compare",
        /**
         * Represents that the field type is CreateDate.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        createDate = "CreateDate",
        /**
         * Represents that the field type is Data.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        data = "Data",
        /**
         * Represents that the field type is Database.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        database = "Database",
        /**
         * Represents that the field type is Date.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        date = "Date",
        /**
         * Represents that the field type is DisplayBarcode.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        displayBarcode = "DisplayBarcode",
        /**
         * Represents that the field type is DocumentProperty
         * @remarks
         * [Api set: WordApi 1.5]
         */
        docProperty = "DocProperty",
        /**
         * Represents that the field type is DocumentVariable.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        docVariable = "DocVariable",
        /**
         * Represents that the field type is EditTime.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        editTime = "EditTime",
        /**
         * Represents that the field type is Embedded.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        embedded = "Embedded",
        /**
         * Represents that the field type is Equation.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        eq = "EQ",
        /**
         * Represents that the field type is Expression.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        expression = "Expression",
        /**
         * Represents that the field type is FileName.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        fileName = "FileName",
        /**
         * Represents that the field type is FileSize.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        fileSize = "FileSize",
        /**
         * Represents that the field type is FillIn.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        fillIn = "FillIn",
        /**
         * Represents that the field type is FormCheckbox.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        formCheckbox = "FormCheckbox",
        /**
         * Represents that the field type is FormDropdown.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        formDropdown = "FormDropdown",
        /**
         * Represents that the field type is FormText.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        formText = "FormText",
        /**
         * Represents that the field type is GotoButton.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        gotoButton = "GotoButton",
        /**
         * Represents that the field type is GreetingLine.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        greetingLine = "GreetingLine",
        /**
         * Represents that the field type is Hyperlink.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        hyperlink = "Hyperlink",
        /**
         * Represents that the field type is If.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        if = "If",
        /**
         * Represents that the field type is Import.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        import = "Import",
        /**
         * Represents that the field type is Include.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        include = "Include",
        /**
         * Represents that the field type is IncludePicture.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        includePicture = "IncludePicture",
        /**
         * Represents that the field type is IncludeText.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        includeText = "IncludeText",
        /**
         * Represents that the field type is Index.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        index = "Index",
        /**
         * Represents that the field type is Information.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        info = "Info",
        /**
         * Represents that the field type is Keywords.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        keywords = "Keywords",
        /**
         * Represents that the field type is LastSavedBy.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        lastSavedBy = "LastSavedBy",
        /**
         * Represents that the field type is Link.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        link = "Link",
        /**
         * Represents that the field type is ListNumber.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        listNum = "ListNum",
        /**
         * Represents that the field type is MacroButton.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        macroButton = "MacroButton",
        /**
         * Represents that the field type is MergeBarcode.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        mergeBarcode = "MergeBarcode",
        /**
         * Represents that the field type is MergeField.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        mergeField = "MergeField",
        /**
         * Represents that the field type is MergeRecord.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        mergeRec = "MergeRec",
        /**
         * Represents that the field type is MergeSequence.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        mergeSeq = "MergeSeq",
        /**
         * Represents that the field type is Next.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        next = "Next",
        /**
         * Represents that the field type is NextIf.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        nextIf = "NextIf",
        /**
         * Represents that the field type is NoteReference.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        noteRef = "NoteRef",
        /**
         * Represents that the field type is NumberOfCharacters.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        numChars = "NumChars",
        /**
         * Represents that the field type is NumberOfPages.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        numPages = "NumPages",
        /**
         * Represents that the field type is NumberOfWords.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        numWords = "NumWords",
        /**
         * Represents that the field type is ActiveXControl.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ocx = "OCX",
        /**
         * Represents that the field type is Page.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        page = "Page",
        /**
         * Represents that the field type is PageReference.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        pageRef = "PageRef",
        /**
         * Represents that the field type is Print.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        print = "Print",
        /**
         * Represents that the field type is PrintDate.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        printDate = "PrintDate",
        /**
         * Represents that the field type is Private.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        private = "Private",
        /**
         * Represents that the field type is Quote.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        quote = "Quote",
        /**
         * Represents that the field type is ReferencedDocument.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        rd = "RD",
        /**
         * Represents that the field type is Reference.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ref = "Ref",
        /**
         * Represents that the field type is RevisionNumber.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        revNum = "RevNum",
        /**
         * Represents that the field type is SaveDate.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        saveDate = "SaveDate",
        /**
         * Represents that the field type is Section.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        section = "Section",
        /**
         * Represents that the field type is SectionPages.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        sectionPages = "SectionPages",
        /**
         * Represents that the field type is Sequence.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        seq = "Seq",
        /**
         * Represents that the field type is Set.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        set = "Set",
        /**
         * Represents that the field type is Shape.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        shape = "Shape",
        /**
         * Represents that the field type is SkipIf.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        skipIf = "SkipIf",
        /**
         * Represents that the field type is StyleReference.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        styleRef = "StyleRef",
        /**
         * Represents that the field type is Subject.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        subject = "Subject",
        /**
         * Represents that the field type is Subscriber.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        subscriber = "Subscriber",
        /**
         * Represents that the field type is Symbol.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        symbol = "Symbol",
        /**
         * Represents that the field type is TableOfAuthoritiesEntry.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        ta = "TA",
        /**
         * Represents that the field type is TableOfContentsEntry.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        tc = "TC",
        /**
         * Represents that the field type is Template.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        template = "Template",
        /**
         * Represents that the field type is Time.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        time = "Time",
        /**
         * Represents that the field type is Title.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        title = "Title",
        /**
         * Represents that the field type is TableOfAuthorities.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        toa = "TOA",
        /**
         * Represents that the field type is TableOfContents.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        toc = "TOC",
        /**
         * Represents that the field type is UserAddress.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        userAddress = "UserAddress",
        /**
         * Represents that the field type is UserInitials.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        userInitials = "UserInitials",
        /**
         * Represents that the field type is UserName.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        userName = "UserName",
        /**
         * Represents that the field type is IndexEntry.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        xe = "XE",
        /**
         * Represents that the field type is Empty.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        empty = "Empty",
        /**
         * Represents the field types not supported by the Office JavaScript API.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        others = "Others",
        /**
         * Represents that the field type is Undefined.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        undefined = "Undefined",
    }
    /**
     * Represents the kind of {@link Word.Field} object. Indicates how the field works in relation to updating.
     *
     * @remarks
     * [Api set: WordApi 1.5]
     */
    enum FieldKind {
        /**
         * Represents that the field is invalid. For example, a pair of field characters with nothing inside.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        none = "None",
        /**
         * Represents that the field is automatically updated each time it's displayed or each time the page is reformatted, but which can also be manually updated.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        hot = "Hot",
        /**
         * Represents that the field is automatically updated when the source changes or the field can be manually updated.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        warm = "Warm",
        /**
         * Represents that the field doesn't have a result.
         * @remarks
         * [Api set: WordApi 1.5]
         */
        cold = "Cold",
    }
    /**
     * Represents the character inserted after the {@link Word.ListItem | list item} mark.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    enum TrailingCharacter {
        /**
         * A tab is inserted.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        trailingTab = "TrailingTab",
        /**
         * A space is inserted. Default.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        trailingSpace = "TrailingSpace",
        /**
         * No character is inserted.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        trailingNone = "TrailingNone",
    }
    /**
     * Represents the built-in number styles for lists in Word.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    enum ListBuiltInNumberStyle {
        /**
         * No built-in number style.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        none = "None",
        /**
         * Arabic numerals (1, 2, 3, ...).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        arabic = "Arabic",
        /**
         * Uppercase Roman numerals (I, II, III, ...).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        upperRoman = "UpperRoman",
        /**
         * Lowercase Roman numerals (i, ii, iii, ...).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lowerRoman = "LowerRoman",
        /**
         * Uppercase letters (A, B, C, ...).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        upperLetter = "UpperLetter",
        /**
         * Lowercase letters (a, b, c, ...).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lowerLetter = "LowerLetter",
        /**
         * Ordinal numbers (1st, 2nd, 3rd, ...).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        ordinal = "Ordinal",
        /**
         * Cardinal numbers as text (one, two, three, ...).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        cardinalText = "CardinalText",
        /**
         * Ordinal numbers as text (first, second, third, ...).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        ordinalText = "OrdinalText",
        /**
         * Kanji.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        kanji = "Kanji",
        /**
         * Kanji digits.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        kanjiDigit = "KanjiDigit",
        /**
         * Aiueo half width characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        aiueoHalfWidth = "AiueoHalfWidth",
        /**
         * Iroha half width characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        irohaHalfWidth = "IrohaHalfWidth",
        /**
         * Arabic full-width numbers.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        arabicFullWidth = "ArabicFullWidth",
        /**
         * Traditional Kanji characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        kanjiTraditional = "KanjiTraditional",
        /**
         * Traditional Kanji characters (alternative form).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        kanjiTraditional2 = "KanjiTraditional2",
        /**
         * Numbers enclosed in a circle.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        numberInCircle = "NumberInCircle",
        /**
         * Aiueo characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        aiueo = "Aiueo",
        /**
         * Iroha characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        iroha = "Iroha",
        /**
         * Arabic full-width numbers with leading zeros.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        arabicLZ = "ArabicLZ",
        /**
         * Bullet characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        bullet = "Bullet",
        /**
         * Ganada characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        ganada = "Ganada",
        /**
         * Chosung characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        chosung = "Chosung",
        /**
         * GBNum1 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        gbnum1 = "GBNum1",
        /**
         * GBNum2 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        gbnum2 = "GBNum2",
        /**
         * GBNum3 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        gbnum3 = "GBNum3",
        /**
         * GBNum4 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        gbnum4 = "GBNum4",
        /**
         * Zodiac1 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        zodiac1 = "Zodiac1",
        /**
         * Zodiac2 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        zodiac2 = "Zodiac2",
        /**
         * Zodiac3 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        zodiac3 = "Zodiac3",
        /**
         * Traditional Chinese numbers (style 1).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        tradChinNum1 = "TradChinNum1",
        /**
         * Traditional Chinese numbers (style 2).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        tradChinNum2 = "TradChinNum2",
        /**
         * Traditional Chinese numbers (style 3).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        tradChinNum3 = "TradChinNum3",
        /**
         * Traditional Chinese numbers (style 4).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        tradChinNum4 = "TradChinNum4",
        /**
         * Simplified Chinese numbers (style 1).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        simpChinNum1 = "SimpChinNum1",
        /**
         * Simplified Chinese numbers (style 2).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        simpChinNum2 = "SimpChinNum2",
        /**
         * Simplified Chinese numbers (style 3).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        simpChinNum3 = "SimpChinNum3",
        /**
         * Simplified Chinese numbers (style 4).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        simpChinNum4 = "SimpChinNum4",
        /**
         * Hanja read numbers.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hanjaRead = "HanjaRead",
        /**
         * Hanja read digits.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hanjaReadDigit = "HanjaReadDigit",
        /**
         * Hangul characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hangul = "Hangul",
        /**
         * Hanja characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hanja = "Hanja",
        /**
         * Hebrew1 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hebrew1 = "Hebrew1",
        /**
         * Arabic1 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        arabic1 = "Arabic1",
        /**
         * Hebrew2 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hebrew2 = "Hebrew2",
        /**
         * Arabic2 characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        arabic2 = "Arabic2",
        /**
         * Hindi letter style 1.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hindiLetter1 = "HindiLetter1",
        /**
         * Hindi letter style 2.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hindiLetter2 = "HindiLetter2",
        /**
         * Hindi Arabic style.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hindiArabic = "HindiArabic",
        /**
         * Hindi cardinal text.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        hindiCardinalText = "HindiCardinalText",
        /**
         * Thai letter characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        thaiLetter = "ThaiLetter",
        /**
         * Thai Arabic characters.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        thaiArabic = "ThaiArabic",
        /**
         * Thai cardinal text.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        thaiCardinalText = "ThaiCardinalText",
        /**
         * Vietnamese cardinal text.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        vietCardinalText = "VietCardinalText",
        /**
         * Lowercase Russian.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lowercaseRussian = "LowercaseRussian",
        /**
         * Uppercase Russian.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        uppercaseRussian = "UppercaseRussian",
        /**
         * Lowercase Greek.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lowercaseGreek = "LowercaseGreek",
        /**
         * Uppercase Greek.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        uppercaseGreek = "UppercaseGreek",
        /**
         * Arabic numbers with leading zeros (style 2).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        arabicLZ2 = "ArabicLZ2",
        /**
         * Arabic numbers with leading zeros (style 3).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        arabicLZ3 = "ArabicLZ3",
        /**
         * Arabic numbers with leading zeros (style 4).
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        arabicLZ4 = "ArabicLZ4",
        /**
         * Lowercase Turkish.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lowercaseTurkish = "LowercaseTurkish",
        /**
         * Uppercase Turkish.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        uppercaseTurkish = "UppercaseTurkish",
        /**
         * Lowercase Bulgarian.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lowercaseBulgarian = "LowercaseBulgarian",
        /**
         * Uppercase Bulgarian.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        uppercaseBulgarian = "UppercaseBulgarian",
        /**
         * Picture bullet.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        pictureBullet = "PictureBullet",
        /**
         * Legal numbering style.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        legal = "Legal",
        /**
         * Legal numbering style with leading zeros.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        legalLZ = "LegalLZ",
    }
    /**
     * Represents the shading texture. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    enum ShadingTextureType {
        /**
         * Represents dark diagonal-down texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        darkDiagonalDown = "DarkDiagonalDown",
        /**
         * Represents dark diagonal-up texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        darkDiagonalUp = "DarkDiagonalUp",
        /**
         * Represents dark horizontal-cross texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        darkGrid = "DarkGrid",
        /**
         * Represents dark horizontal texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        darkHorizontal = "DarkHorizontal",
        /**
         * Represents dark diagonal-cross texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        darkTrellis = "DarkTrellis",
        /**
         * Represents dark vertical texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        darkVertical = "DarkVertical",
        /**
         * Represents light diagonal-down texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lightDiagonalDown = "LightDiagonalDown",
        /**
         * Represents light diagonal-up texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lightDiagonalUp = "LightDiagonalUp",
        /**
         * Represents light horizontal-cross texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lightGrid = "LightGrid",
        /**
         * Represents light horizontal texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lightHorizontal = "LightHorizontal",
        /**
         * Represents light diagonal-cross texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lightTrellis = "LightTrellis",
        /**
         * Represents light vertical texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        lightVertical = "LightVertical",
        /**
         * Represents that there's no texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        none = "None",
        /**
         * Represents 10 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent10 = "Percent10",
        /**
         * Represents 12.5 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent12Pt5 = "Percent12Pt5",
        /**
         * Represents 15 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent15 = "Percent15",
        /**
         * Represents 20 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent20 = "Percent20",
        /**
         * Represents 25 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent25 = "Percent25",
        /**
         * Represents 30 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent30 = "Percent30",
        /**
         * Represents 35 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent35 = "Percent35",
        /**
         * Represents 37.5 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent37Pt5 = "Percent37Pt5",
        /**
         * Represents 40 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent40 = "Percent40",
        /**
         * Represents 45 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent45 = "Percent45",
        /**
         * Represents 5 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent5 = "Percent5",
        /**
         * Represents 50 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent50 = "Percent50",
        /**
         * Represents 55 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent55 = "Percent55",
        /**
         * Represents 60 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent60 = "Percent60",
        /**
         * Represents 62.5 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent62Pt5 = "Percent62Pt5",
        /**
         * Represents 65 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent65 = "Percent65",
        /**
         * Represents 70 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent70 = "Percent70",
        /**
         * Represents 75 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent75 = "Percent75",
        /**
         * Represents 80 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent80 = "Percent80",
        /**
         * Represents 85 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent85 = "Percent85",
        /**
         * Represents 87.5 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent87Pt5 = "Percent87Pt5",
        /**
         * Represents 90 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent90 = "Percent90",
        /**
         * Represents 95 percent texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        percent95 = "Percent95",
        /**
         * Represents solid texture.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        solid = "Solid",
    }
    /**
     * Specifies the target document for displaying document comparison differences.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    enum CompareTarget {
        /**
         * Places comparison differences in the current document.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        compareTargetCurrent = "CompareTargetCurrent",
        /**
         * Places comparison differences in the target document.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        compareTargetSelected = "CompareTargetSelected",
        /**
         * Places comparison differences in a new document.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        compareTargetNew = "CompareTargetNew",
    }
    /**
     * Specifies how to handle any conflicts, that is, when imported styles have the same name as existing styles in the current document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.1]
     */
    enum ImportedStylesConflictBehavior {
        /**
         * Ignore conflicting imported styles and keep the existing version of those styles in the current document.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        ignore = "Ignore",
        /**
         * Overwrite the existing styles in the current document.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        overwrite = "Overwrite",
        /**
         * Rename conflicting imported styles so that both versions are kept in the current document. For example, if MyStyle already exists in the document, then the imported version could be added as MyStyle1.
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        createNew = "CreateNew",
    }
    /**
     * Represents the shape type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeType {
        /**
         * Unsupported shape type.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        unsupported = "Unsupported",
        /**
         * Text box shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        textBox = "TextBox",
        /**
         * Geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        geometricShape = "GeometricShape",
        /**
         * Group shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        group = "Group",
        /**
         * Picture shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        picture = "Picture",
        /**
         * Canvas shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        canvas = "Canvas",
    }
    /**
     * Represents what the horizontal position of a shape is relative to.
                For more information about margins, see {@link https://support.microsoft.com/office/c95c1ea1-70b1-4dde-a1da-f5aa2042c829 | Change the margins in your Word document}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum RelativeHorizontalPosition {
        /**
         * Relative to margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        margin = "Margin",
        /**
         * Relative to page.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        page = "Page",
        /**
         * Relative to column.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        column = "Column",
        /**
         * Relative to character.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        character = "Character",
        /**
         * Relative to left margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftMargin = "LeftMargin",
        /**
         * Relative to right margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rightMargin = "RightMargin",
        /**
         * Relative to inside margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        insideMargin = "InsideMargin",
        /**
         * Relative to outside margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        outsideMargin = "OutsideMargin",
    }
    /**
     * Represents what the vertical position of a shape is relative to.
                For more information about margins, see {@link https://support.microsoft.com/office/c95c1ea1-70b1-4dde-a1da-f5aa2042c829 | Change the margins in your Word document}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum RelativeVerticalPosition {
        /**
         * Relative to margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        margin = "Margin",
        /**
         * Relative to page.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        page = "Page",
        /**
         * Relative to paragraph.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        paragraph = "Paragraph",
        /**
         * Relative to line.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        line = "Line",
        /**
         * Relative to top margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        topMargin = "TopMargin",
        /**
         * Relative to bottom margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bottomMargin = "BottomMargin",
        /**
         * Relative to inside margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        insideMargin = "InsideMargin",
        /**
         * Relative to outside margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        outsideMargin = "OutsideMargin",
    }
    /**
     * Represents what the horizontal or vertical size of a shape is relative to.
                For more information about margins, see {@link https://support.microsoft.com/office/c95c1ea1-70b1-4dde-a1da-f5aa2042c829 | Change the margins in your Word document}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum RelativeSize {
        /**
         * Relative to margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        margin = "Margin",
        /**
         * Relative to page.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        page = "Page",
        /**
         * Relative to top margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        topMargin = "TopMargin",
        /**
         * Relative to bottom margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bottomMargin = "BottomMargin",
        /**
         * Relative to inside margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        insideMargin = "InsideMargin",
        /**
         * Relative to outside margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        outsideMargin = "OutsideMargin",
    }
    /**
     * Specifies the shape type for a {@link Word.ShapeType | ShapeType.geometricShape} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum GeometricShapeType {
        /**
         * Line inverse geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        lineInverse = "LineInverse",
        /**
         * Triangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        triangle = "Triangle",
        /**
         * Right triangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rightTriangle = "RightTriangle",
        /**
         * Rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rectangle = "Rectangle",
        /**
         * Diamond geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        diamond = "Diamond",
        /**
         * Parallelogram geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        parallelogram = "Parallelogram",
        /**
         * Trapezoid geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        trapezoid = "Trapezoid",
        /**
         * Non-isosceles trapezoid geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        nonIsoscelesTrapezoid = "NonIsoscelesTrapezoid",
        /**
         * Pentagon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        pentagon = "Pentagon",
        /**
         * Hexagon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        hexagon = "Hexagon",
        /**
         * Heptagon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        heptagon = "Heptagon",
        /**
         * Octagon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        octagon = "Octagon",
        /**
         * Decagon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        decagon = "Decagon",
        /**
         * Dodecagon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        dodecagon = "Dodecagon",
        /**
         * Star 4-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star4 = "Star4",
        /**
         * Star 5-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star5 = "Star5",
        /**
         * Star 6-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star6 = "Star6",
        /**
         * Star 7-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star7 = "Star7",
        /**
         * Star 8-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star8 = "Star8",
        /**
         * Star 10-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star10 = "Star10",
        /**
         * Star 12-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star12 = "Star12",
        /**
         * Star 16-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star16 = "Star16",
        /**
         * Star 24-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star24 = "Star24",
        /**
         * Star 32-point geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        star32 = "Star32",
        /**
         * Round rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        roundRectangle = "RoundRectangle",
        /**
         * Round one rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        round1Rectangle = "Round1Rectangle",
        /**
         * Round two same rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        round2SameRectangle = "Round2SameRectangle",
        /**
         * Round two diagonal rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        round2DiagonalRectangle = "Round2DiagonalRectangle",
        /**
         * Snip round rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        snipRoundRectangle = "SnipRoundRectangle",
        /**
         * Snip one rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        snip1Rectangle = "Snip1Rectangle",
        /**
         * Snip two same rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        snip2SameRectangle = "Snip2SameRectangle",
        /**
         * Snip two diagonal rectangle geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        snip2DiagonalRectangle = "Snip2DiagonalRectangle",
        /**
         * Plaque geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        plaque = "Plaque",
        /**
         * Ellipse geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        ellipse = "Ellipse",
        /**
         * Teardrop geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        teardrop = "Teardrop",
        /**
         * Home plate geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        homePlate = "HomePlate",
        /**
         * Chevron geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        chevron = "Chevron",
        /**
         * Pie wedge geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        pieWedge = "PieWedge",
        /**
         * Pie geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        pie = "Pie",
        /**
         * Block arc geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        blockArc = "BlockArc",
        /**
         * Donut geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        donut = "Donut",
        /**
         * No smoking geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        noSmoking = "NoSmoking",
        /**
         * Right arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rightArrow = "RightArrow",
        /**
         * Left arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftArrow = "LeftArrow",
        /**
         * Up arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        upArrow = "UpArrow",
        /**
         * Down arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        downArrow = "DownArrow",
        /**
         * Striped right arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        stripedRightArrow = "StripedRightArrow",
        /**
         * Notched right arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        notchedRightArrow = "NotchedRightArrow",
        /**
         * Bent up arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bentUpArrow = "BentUpArrow",
        /**
         * Left-right arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftRightArrow = "LeftRightArrow",
        /**
         * Up-down arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        upDownArrow = "UpDownArrow",
        /**
         * Left-up arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftUpArrow = "LeftUpArrow",
        /**
         * Left-right-up arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftRightUpArrow = "LeftRightUpArrow",
        /**
         * Quad arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        quadArrow = "QuadArrow",
        /**
         * Left arrow callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftArrowCallout = "LeftArrowCallout",
        /**
         * Right arrow callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rightArrowCallout = "RightArrowCallout",
        /**
         * Up arrow callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        upArrowCallout = "UpArrowCallout",
        /**
         * Down arrow callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        downArrowCallout = "DownArrowCallout",
        /**
         * Left-right arrow callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftRightArrowCallout = "LeftRightArrowCallout",
        /**
         * Up-down arrow callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        upDownArrowCallout = "UpDownArrowCallout",
        /**
         * Quad arrow callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        quadArrowCallout = "QuadArrowCallout",
        /**
         * Bent arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bentArrow = "BentArrow",
        /**
         * U-turn arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        uturnArrow = "UturnArrow",
        /**
         * Circular arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        circularArrow = "CircularArrow",
        /**
         * Left circular arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftCircularArrow = "LeftCircularArrow",
        /**
         * Left-right circular arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftRightCircularArrow = "LeftRightCircularArrow",
        /**
         * Curved right arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        curvedRightArrow = "CurvedRightArrow",
        /**
         * Curved left arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        curvedLeftArrow = "CurvedLeftArrow",
        /**
         * Curved up arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        curvedUpArrow = "CurvedUpArrow",
        /**
         * Curved down arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        curvedDownArrow = "CurvedDownArrow",
        /**
         * Swoosh arrow geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        swooshArrow = "SwooshArrow",
        /**
         * Cube geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        cube = "Cube",
        /**
         * Can geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        can = "Can",
        /**
         * Lightning bolt geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        lightningBolt = "LightningBolt",
        /**
         * Heart geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        heart = "Heart",
        /**
         * Sun geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        sun = "Sun",
        /**
         * Moon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        moon = "Moon",
        /**
         * Smiley face geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        smileyFace = "SmileyFace",
        /**
         * Irregular seal 1 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        irregularSeal1 = "IrregularSeal1",
        /**
         * Irregular seal 2 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        irregularSeal2 = "IrregularSeal2",
        /**
         * Folded corner geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        foldedCorner = "FoldedCorner",
        /**
         * Bevel geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bevel = "Bevel",
        /**
         * Frame geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        frame = "Frame",
        /**
         * Half frame geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        halfFrame = "HalfFrame",
        /**
         * Corner geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        corner = "Corner",
        /**
         * Diagonal stripe geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        diagonalStripe = "DiagonalStripe",
        /**
         * Chord geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        chord = "Chord",
        /**
         * Arc geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        arc = "Arc",
        /**
         * Left bracket geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftBracket = "LeftBracket",
        /**
         * Right bracket geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rightBracket = "RightBracket",
        /**
         * Left brace geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftBrace = "LeftBrace",
        /**
         * Right brace geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        rightBrace = "RightBrace",
        /**
         * Bracket pair geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bracketPair = "BracketPair",
        /**
         * Brace pair geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bracePair = "BracePair",
        /**
         * Callout 1 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        callout1 = "Callout1",
        /**
         * Callout 2 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        callout2 = "Callout2",
        /**
         * Callout 3 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        callout3 = "Callout3",
        /**
         * Accent callout 1 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        accentCallout1 = "AccentCallout1",
        /**
         * Accent callout 2 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        accentCallout2 = "AccentCallout2",
        /**
         * Accent callout 3 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        accentCallout3 = "AccentCallout3",
        /**
         * Border callout 1 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        borderCallout1 = "BorderCallout1",
        /**
         * Border callout 2 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        borderCallout2 = "BorderCallout2",
        /**
         * Border callout 3 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        borderCallout3 = "BorderCallout3",
        /**
         * Accent border callout 1 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        accentBorderCallout1 = "AccentBorderCallout1",
        /**
         * Accent border callout 2 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        accentBorderCallout2 = "AccentBorderCallout2",
        /**
         * Accent border callout 3 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        accentBorderCallout3 = "AccentBorderCallout3",
        /**
         * Wedge rectangle callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        wedgeRectCallout = "WedgeRectCallout",
        /**
         * Wedge rounded rectangle callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        wedgeRRectCallout = "WedgeRRectCallout",
        /**
         * Wedge ellipse callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        wedgeEllipseCallout = "WedgeEllipseCallout",
        /**
         * Cloud callout geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        cloudCallout = "CloudCallout",
        /**
         * Cloud geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        cloud = "Cloud",
        /**
         * Ribbon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        ribbon = "Ribbon",
        /**
         * Ribbon 2 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        ribbon2 = "Ribbon2",
        /**
         * Ellipse ribbon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        ellipseRibbon = "EllipseRibbon",
        /**
         * Ellipse ribbon 2 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        ellipseRibbon2 = "EllipseRibbon2",
        /**
         * Left-right ribbon geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        leftRightRibbon = "LeftRightRibbon",
        /**
         * Vertical scroll geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        verticalScroll = "VerticalScroll",
        /**
         * Horizontal scroll geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        horizontalScroll = "HorizontalScroll",
        /**
         * Wave geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        wave = "Wave",
        /**
         * Double wave geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        doubleWave = "DoubleWave",
        /**
         * Plus geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        plus = "Plus",
        /**
         * Flow chart process geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartProcess = "FlowChartProcess",
        /**
         * Flow chart decision geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartDecision = "FlowChartDecision",
        /**
         * Flow chart input-output geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartInputOutput = "FlowChartInputOutput",
        /**
         * Flow chart predefined process geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartPredefinedProcess = "FlowChartPredefinedProcess",
        /**
         * Flow chart internal storage geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartInternalStorage = "FlowChartInternalStorage",
        /**
         * Flow chart document geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartDocument = "FlowChartDocument",
        /**
         * Flow chart multidocument geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartMultidocument = "FlowChartMultidocument",
        /**
         * Flow chart terminator geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartTerminator = "FlowChartTerminator",
        /**
         * Flow chart preparation geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartPreparation = "FlowChartPreparation",
        /**
         * Flow chart manual input geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartManualInput = "FlowChartManualInput",
        /**
         * Flow chart manual operation geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartManualOperation = "FlowChartManualOperation",
        /**
         * Flow chart connector geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartConnector = "FlowChartConnector",
        /**
         * Flow chart punched card geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartPunchedCard = "FlowChartPunchedCard",
        /**
         * Flow chart punched tape geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartPunchedTape = "FlowChartPunchedTape",
        /**
         * Flow chart summing junction geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartSummingJunction = "FlowChartSummingJunction",
        /**
         * Flow chart OR geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartOr = "FlowChartOr",
        /**
         * Flow chart collate geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartCollate = "FlowChartCollate",
        /**
         * Flow chart sort geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartSort = "FlowChartSort",
        /**
         * Flow chart extract geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartExtract = "FlowChartExtract",
        /**
         * Flow chart merge geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartMerge = "FlowChartMerge",
        /**
         * Flow chart offline storage geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartOfflineStorage = "FlowChartOfflineStorage",
        /**
         * Flow chart online storage geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartOnlineStorage = "FlowChartOnlineStorage",
        /**
         * Flow chart magnetic tape geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartMagneticTape = "FlowChartMagneticTape",
        /**
         * Flow chart magnetic disk geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartMagneticDisk = "FlowChartMagneticDisk",
        /**
         * Flow chart magnetic drum geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartMagneticDrum = "FlowChartMagneticDrum",
        /**
         * Flow chart display geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartDisplay = "FlowChartDisplay",
        /**
         * Flow chart delay geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartDelay = "FlowChartDelay",
        /**
         * Flow chart alternate process geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartAlternateProcess = "FlowChartAlternateProcess",
        /**
         * Flow chart off-page connector geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        flowChartOffpageConnector = "FlowChartOffpageConnector",
        /**
         * Action button blank geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonBlank = "ActionButtonBlank",
        /**
         * Action button home geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonHome = "ActionButtonHome",
        /**
         * Action button help geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonHelp = "ActionButtonHelp",
        /**
         * Action button information geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonInformation = "ActionButtonInformation",
        /**
         * Action button forward next geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonForwardNext = "ActionButtonForwardNext",
        /**
         * Action button back previous geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonBackPrevious = "ActionButtonBackPrevious",
        /**
         * Action button end geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonEnd = "ActionButtonEnd",
        /**
         * Action button beginning geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonBeginning = "ActionButtonBeginning",
        /**
         * Action button return geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonReturn = "ActionButtonReturn",
        /**
         * Action button document geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonDocument = "ActionButtonDocument",
        /**
         * Action button sound geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonSound = "ActionButtonSound",
        /**
         * Action button movie geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        actionButtonMovie = "ActionButtonMovie",
        /**
         * Gear 6 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        gear6 = "Gear6",
        /**
         * Gear 9 geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        gear9 = "Gear9",
        /**
         * Funnel geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        funnel = "Funnel",
        /**
         * Math plus geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mathPlus = "MathPlus",
        /**
         * Math minus geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mathMinus = "MathMinus",
        /**
         * Math multiply geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mathMultiply = "MathMultiply",
        /**
         * Math divide geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mathDivide = "MathDivide",
        /**
         * Math equal geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mathEqual = "MathEqual",
        /**
         * Math not equal geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mathNotEqual = "MathNotEqual",
        /**
         * Corner tabs geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        cornerTabs = "CornerTabs",
        /**
         * Square tabs geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        squareTabs = "SquareTabs",
        /**
         * Plaque tabs geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        plaqueTabs = "PlaqueTabs",
        /**
         * Chart X geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        chartX = "ChartX",
        /**
         * Chart star geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        chartStar = "ChartStar",
        /**
         * Chart plus geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        chartPlus = "ChartPlus",
    }
    /**
     * Specifies a {@link Word.Shape | shape's} fill type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeFillType {
        /**
         * No fill.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        noFill = "NoFill",
        /**
         * Solid fill.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        solid = "Solid",
        /**
         * Gradient fill.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        gradient = "Gradient",
        /**
         * Pattern fill.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        pattern = "Pattern",
        /**
         * Picture fill.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        picture = "Picture",
        /**
         * Texture fill.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        texture = "Texture",
        /**
         * Mixed fill.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mixed = "Mixed",
    }
    /**
     * Specifies the vertical alignment for the text frame in a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeTextVerticalAlignment {
        /**
         * Anchor the text at the top of the bounding rectangle.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        top = "Top",
        /**
         * Anchor the text at the middle of the bounding rectangle.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        middle = "Middle",
        /**
         * Anchor the text at the bottom of the bounding rectangle.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        bottom = "Bottom",
    }
    /**
     * Specifies the orientation for the text frame in a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeTextOrientation {
        /**
         * No orientation, such as in a new geometric shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        none = "None",
        /**
         * Horizontal text.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        horizontal = "Horizontal",
        /**
         * A special version of vertical text, where some fonts are displayed as if rotated.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        eastAsianVertical = "EastAsianVertical",
        /**
         * Determines if all of the text is vertical orientation (each line is 270 degrees rotated clockwise).
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        vertical270 = "Vertical270",
        /**
         * Determines if all of the text is vertical orientation (each line is 90 degrees rotated clockwise).
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        vertical = "Vertical",
        /**
         * A special version of vertical text, where some fonts are displayed as if rotated.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        eastAsianHorizontalRotated = "EastAsianHorizontalRotated",
        /**
         * A combination of automatic orientation is used.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mixed = "Mixed",
    }
    /**
     * Determines the type of automatic sizing allowed.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeAutoSize {
        /**
         * No autosizing.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        none = "None",
        /**
         * The text is adjusted to fit the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        textToFitShape = "TextToFitShape",
        /**
         * The shape is adjusted to fit the text.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        shapeToFitText = "ShapeToFitText",
        /**
         * A combination of automatic sizing schemes are used.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        mixed = "Mixed",
    }
    /**
     * Specifies how to wrap document text around a shape. For more details, see the "Text Wrapping" tab of {@link https://support.microsoft.com/office/a0f53857-b501-46c6-ba8b-68ba51e0e3cc | Layout options}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeTextWrapType {
        /**
         * Places the shape in line with text.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        inline = "Inline",
        /**
         * Wraps text squarely around the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        square = "Square",
        /**
         * Wraps text close to the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        tight = "Tight",
        /**
         * Wraps text around and through the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        through = "Through",
        /**
         * Places text above and below the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        topBottom = "TopBottom",
        /**
         * Places shape behind text.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        behind = "Behind",
        /**
         * Places shape in front of text.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        front = "Front",
    }
    /**
     * Specifies whether the document text should wrap on both sides of the specified shape, on either the left or right side only, or on the side of the shape that's farther from the respective page margin.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeTextWrapSide {
        /**
         * Has no wrap side property, such as those for inline shapes.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        none = "None",
        /**
         * Both left and right sides of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        both = "Both",
        /**
         * Left side of the shape only.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        left = "Left",
        /**
         * Right side of the shape only.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        right = "Right",
        /**
         * Side of the shape that's farther from the respective page margin.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        largest = "Largest",
    }
    /**
     * Specifies the scale size type of a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeScaleType {
        /**
         * Scale from current size of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        currentSize = "CurrentSize",
        /**
         * Scale from original size of the shape. It only works for pictures.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        originalSize = "OriginalSize",
    }
    /**
     * Specifies which part of the shape retains its position when the shape is scaled.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.2]
     */
    enum ShapeScaleFrom {
        /**
         * Scale from the top left corner of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        scaleFromTopLeft = "ScaleFromTopLeft",
        /**
         * Scale from the center of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        scaleFromMiddle = "ScaleFromMiddle",
        /**
         * Scale from the bottom right corner of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        scaleFromBottomRight = "ScaleFromBottomRight",
    }
    /**
     * Represents how Word interprets the rule used to determine the height or width of a {@link Word.Frame}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum FrameSizeRule {
        /**
         * The height or width is set according to the height or width of the item in the frame.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        auto = "Auto",
        /**
         * The height or width is set to a value equal to or greater than the value specified by the `height` property or `width` property.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        atLeast = "AtLeast",
        /**
         * The height or width is set to an exact value specified by the `height` property or `width` property.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        exact = "Exact",
    }
    /**
     * Specifies the {@link Word.BorderUniversal | border } style for an object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum BorderLineStyle {
        /**
         * No line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "None",
        /**
         * Single line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        single = "Single",
        /**
         * Dotted line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dot = "Dot",
        /**
         * Dashed line style with small gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashSmallGap = "DashSmallGap",
        /**
         * Dashed line style with large gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashLargeGap = "DashLargeGap",
        /**
         * Dash-dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashDot = "DashDot",
        /**
         * Dash-dot-dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashDotDot = "DashDotDot",
        /**
         * Double line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        double = "Double",
        /**
         * Triple line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        triple = "Triple",
        /**
         * Thin-thick line style with small gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thinThickSmallGap = "ThinThickSmallGap",
        /**
         * Thick-thin line style with small gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thickThinSmallGap = "ThickThinSmallGap",
        /**
         * Thin-thick-thin line style with small gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thinThickThinSmallGap = "ThinThickThinSmallGap",
        /**
         * Thin-thick line style with medium gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thinThickMedGap = "ThinThickMedGap",
        /**
         * Thick-thin line style with medium gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thickThinMedGap = "ThickThinMedGap",
        /**
         * Thin-thick-thin line style with medium gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thinThickThinMedGap = "ThinThickThinMedGap",
        /**
         * Thin-thick line style with large gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thinThickLargeGap = "ThinThickLargeGap",
        /**
         * Thick-thin line style with large gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thickThinLargeGap = "ThickThinLargeGap",
        /**
         * Thin-thick-thin line style with large gaps.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thinThickThinLargeGap = "ThinThickThinLargeGap",
        /**
         * Single wavy line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        singleWavy = "SingleWavy",
        /**
         * Double wavy line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        doubleWavy = "DoubleWavy",
        /**
         * Dash-dot stroked line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashDotStroked = "DashDotStroked",
        /**
         * Embossed 3D line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        emboss3D = "Emboss3D",
        /**
         * Engraved 3D line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        engrave3D = "Engrave3D",
        /**
         * Outset line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        outset = "Outset",
        /**
         * Inset line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        inset = "Inset",
    }
    /**
     * Specifies the width of an object's {@link Word.BorderUniversal | border}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum LineWidth {
        /**
         * Represents a line width of 0.25 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt025 = "Pt025",
        /**
         * Represents a line width of 0.50 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt050 = "Pt050",
        /**
         * Represents a line width of 0.75 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt075 = "Pt075",
        /**
         * Represents a line width of 1.00 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt100 = "Pt100",
        /**
         * Represents a line width of 1.50 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt150 = "Pt150",
        /**
         * Represents a line width of 2.25 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt225 = "Pt225",
        /**
         * Represents a line width of 3.00 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt300 = "Pt300",
        /**
         * Represents a line width of 4.50 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt450 = "Pt450",
        /**
         * Represents a line width of 6.00 points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pt600 = "Pt600",
    }
    /**
     * Specifies the graphical page border setting of a page.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PageBorderArt {
        /**
         * Represents a border with apple design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        apples = "Apples",
        /**
         * Represents a border with maple muffin design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mapleMuffins = "MapleMuffins",
        /**
         * Represents a border with cake slice design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cakeSlice = "CakeSlice",
        /**
         * Represents a border with candy corn design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        candyCorn = "CandyCorn",
        /**
         * Represents a border with ice cream cone design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        iceCreamCones = "IceCreamCones",
        /**
         * Represents a border with champagne bottle design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        champagneBottle = "ChampagneBottle",
        /**
         * Represents a border with party glass design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        partyGlass = "PartyGlass",
        /**
         * Represents a border with Christmas tree design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        christmasTree = "ChristmasTree",
        /**
         * Represents a border with trees design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        trees = "Trees",
        /**
         * Represents a border with palm trees in color.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        palmsColor = "PalmsColor",
        /**
         * Represents a border with three-color balloons design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        balloons3Colors = "Balloons3Colors",
        /**
         * Represents a border with hot air balloons design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        balloonsHotAir = "BalloonsHotAir",
        /**
         * Represents a border with party favor design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        partyFavor = "PartyFavor",
        /**
         * Represents a border with confetti streamers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        confettiStreamers = "ConfettiStreamers",
        /**
         * Represents a border with hearts design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hearts = "Hearts",
        /**
         * Represents a border with heart balloon design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        heartBalloon = "HeartBalloon",
        /**
         * Represents a border with 3D stars design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        stars3D = "Stars3D",
        /**
         * Represents a border with shadowed stars design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        starsShadowed = "StarsShadowed",
        /**
         * Represents a border with stars design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        stars = "Stars",
        /**
         * Represents a border with sun design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sun = "Sun",
        /**
         * Represents a border with Earth design (variant 2).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        earth2 = "Earth2",
        /**
         * Represents a border with Earth design (variant 1).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        earth1 = "Earth1",
        /**
         * Represents a border with people wearing hats design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        peopleHats = "PeopleHats",
        /**
         * Represents a border with sombrero design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sombrero = "Sombrero",
        /**
         * Represents a border with pencils design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pencils = "Pencils",
        /**
         * Represents a border with packages design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        packages = "Packages",
        /**
         * Represents a border with clocks design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        clocks = "Clocks",
        /**
         * Represents a border with firecrackers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        firecrackers = "Firecrackers",
        /**
         * Represents a border with rings design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rings = "Rings",
        /**
         * Represents a border with map pins design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mapPins = "MapPins",
        /**
         * Represents a border with confetti design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        confetti = "Confetti",
        /**
         * Represents a border with butterfly creatures design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        creaturesButterfly = "CreaturesButterfly",
        /**
         * Represents a border with ladybug creatures design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        creaturesLadyBug = "CreaturesLadyBug",
        /**
         * Represents a border with fish creatures design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        creaturesFish = "CreaturesFish",
        /**
         * Represents a border with birds in flight design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        birdsFlight = "BirdsFlight",
        /**
         * Represents a border with scared cat design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        scaredCat = "ScaredCat",
        /**
         * Represents a border with bats design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bats = "Bats",
        /**
         * Represents a border with roses flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersRoses = "FlowersRoses",
        /**
         * Represents a border with red rose flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersRedRose = "FlowersRedRose",
        /**
         * Represents a border with poinsettias flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        poinsettias = "Poinsettias",
        /**
         * Represents a border with holly design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        holly = "Holly",
        /**
         * Represents a border with tiny flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersTiny = "FlowersTiny",
        /**
         * Represents a border with pansy flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersPansy = "FlowersPansy",
        /**
         * Represents a border with modern 2 flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersModern2 = "FlowersModern2",
        /**
         * Represents a border with modern 1 flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersModern1 = "FlowersModern1",
        /**
         * Represents a border with white flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        whiteFlowers = "WhiteFlowers",
        /**
         * Represents a border with vine design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        vine = "Vine",
        /**
         * Represents a border with daisies flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersDaisies = "FlowersDaisies",
        /**
         * Represents a border with block print flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersBlockPrint = "FlowersBlockPrint",
        /**
         * Represents a border with colored deco arch design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        decoArchColor = "DecoArchColor",
        /**
         * Represents a border with fans design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fans = "Fans",
        /**
         * Represents a border with film design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        film = "Film",
        /**
         * Represents a border with lightning design (variant 1).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lightning1 = "Lightning1",
        /**
         * Represents a border with compass design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        compass = "Compass",
        /**
         * Represents a border with double D design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        doubleD = "DoubleD",
        /**
         * Represents a border with classical wave design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        classicalWave = "ClassicalWave",
        /**
         * Represents a border with shadowed squares design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        shadowedSquares = "ShadowedSquares",
        /**
         * Represents a border with twisted lines design (variant 1).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        twistedLines1 = "TwistedLines1",
        /**
         * Represents a border with waveline design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        waveline = "Waveline",
        /**
         * Represents a border with quadrants design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        quadrants = "Quadrants",
        /**
         * Represents a border with colored checked bar design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        checkedBarColor = "CheckedBarColor",
        /**
         * Represents a border with swirligig design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        swirligig = "Swirligig",
        /**
         * Represents a border with push pin note design (variant 1).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pushPinNote1 = "PushPinNote1",
        /**
         * Represents a border with push pin note design (variant 2).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pushPinNote2 = "PushPinNote2",
        /**
         * Represents a border with pumpkin design (variant 1).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pumpkin1 = "Pumpkin1",
        /**
         * Represents a border with black eggs design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        eggsBlack = "EggsBlack",
        /**
         * Represents a border with cup design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cup = "Cup",
        /**
         * Represents a border with gray heart design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        heartGray = "HeartGray",
        /**
         * Represents a border with gingerbread man design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gingerbreadMan = "GingerbreadMan",
        /**
         * Represents a border with baby pacifier design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        babyPacifier = "BabyPacifier",
        /**
         * Represents a border with baby rattle design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        babyRattle = "BabyRattle",
        /**
         * Represents a border with cabins design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cabins = "Cabins",
        /**
         * Represents a border with funky house design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        houseFunky = "HouseFunky",
        /**
         * Represents a border with black stars design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        starsBlack = "StarsBlack",
        /**
         * Represents a border with snowflakes design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        snowflakes = "Snowflakes",
        /**
         * Represents a border with fancy snowflake design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        snowflakeFancy = "SnowflakeFancy",
        /**
         * Represents a border with skyrocket design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        skyrocket = "Skyrocket",
        /**
         * Represents a border with Seattle design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        seattle = "Seattle",
        /**
         * Represents a border with music notes design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        musicNotes = "MusicNotes",
        /**
         * Represents a border with black palms design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        palmsBlack = "PalmsBlack",
        /**
         * Represents a border with maple leaf design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mapleLeaf = "MapleLeaf",
        /**
         * Represents a border with paper clips design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        paperClips = "PaperClips",
        /**
         * Represents a border with shorebird tracks design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        shorebirdTracks = "ShorebirdTracks",
        /**
         * Represents a border with people design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        people = "People",
        /**
         * Represents a border with people waving design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        peopleWaving = "PeopleWaving",
        /**
         * Represents a border with eclipsing squares design (variant 2).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        eclipsingSquares2 = "EclipsingSquares2",
        /**
         * Represents a border with hypnotic design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hypnotic = "Hypnotic",
        /**
         * Represents a border with gray diamonds design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        diamondsGray = "DiamondsGray",
        /**
         * Represents a border with deco arch design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        decoArch = "DecoArch",
        /**
         * Represents a border with deco blocks design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        decoBlocks = "DecoBlocks",
        /**
         * Represents a border with circles and lines design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        circlesLines = "CirclesLines",
        /**
         * Represents a border with papyrus design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        papyrus = "Papyrus",
        /**
         * Represents a border with woodwork design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        woodwork = "Woodwork",
        /**
         * Represents a border with weaving braid design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        weavingBraid = "WeavingBraid",
        /**
         * Represents a border with weaving ribbon design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        weavingRibbon = "WeavingRibbon",
        /**
         * Represents a border with weaving angles design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        weavingAngles = "WeavingAngles",
        /**
         * Represents a border with arched scallops design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        archedScallops = "ArchedScallops",
        /**
         * Represents a border with safari design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        safari = "Safari",
        /**
         * Represents a border with Celtic knotwork design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        celticKnotwork = "CelticKnotwork",
        /**
         * Represents a border with crazy maze design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        crazyMaze = "CrazyMaze",
        /**
         * Represents a border with eclipsing squares design (variant 1).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        eclipsingSquares1 = "EclipsingSquares1",
        /**
         * Represents a border with birds design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        birds = "Birds",
        /**
         * Represents a border with teacup and flowers design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flowersTeacup = "FlowersTeacup",
        /**
         * Represents a border with northwest design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        northwest = "Northwest",
        /**
         * Represents a border with southwest design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        southwest = "Southwest",
        /**
         * Represents a border with tribal design (variant 6).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tribal6 = "Tribal6",
        /**
         * Represents a border with tribal design (variant 4).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tribal4 = "Tribal4",
        /**
         * Represents a border with tribal design (variant 3).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tribal3 = "Tribal3",
        /**
         * Represents a border with tribal design (variant 2).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tribal2 = "Tribal2",
        /**
         * Represents a border with tribal design (variant 5).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tribal5 = "Tribal5",
        /**
         * Represents a border with X illusions design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        xillusions = "XIllusions",
        /**
         * Represents a border with zany triangles design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        zanyTriangles = "ZanyTriangles",
        /**
         * Represents a border with pyramids design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pyramids = "Pyramids",
        /**
         * Represents a border with pyramids above design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pyramidsAbove = "PyramidsAbove",
        /**
         * Represents a border with gray confetti design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        confettiGrays = "ConfettiGrays",
        /**
         * Represents a border with outline confetti design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        confettiOutline = "ConfettiOutline",
        /**
         * Represents a border with white confetti design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        confettiWhite = "ConfettiWhite",
        /**
         * Represents a border with mosaic design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mosaic = "Mosaic",
        /**
         * Represents a border with lightning design (variant 2).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lightning2 = "Lightning2",
        /**
         * Represents a border with heebie jeebies design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        heebieJeebies = "HeebieJeebies",
        /**
         * Represents a border with light bulb design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lightBulb = "LightBulb",
        /**
         * Represents a border with gradient design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gradient = "Gradient",
        /**
         * Represents a border with triangle party design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        triangleParty = "TriangleParty",
        /**
         * Represents a border with twisted lines design (variant 2).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        twistedLines2 = "TwistedLines2",
        /**
         * Represents a border with moons design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        moons = "Moons",
        /**
         * Represents a border with ovals design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        ovals = "Ovals",
        /**
         * Represents a border with double diamonds design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        doubleDiamonds = "DoubleDiamonds",
        /**
         * Represents a border with chain link design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        chainLink = "ChainLink",
        /**
         * Represents a border with triangles design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        triangles = "Triangles",
        /**
         * Represents a border with tribal design (variant 1).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tribal1 = "Tribal1",
        /**
         * Represents a border with marquee toothed design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        marqueeToothed = "MarqueeToothed",
        /**
         * Represents a border with sharks teeth design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sharksTeeth = "SharksTeeth",
        /**
         * Represents a border with sawtooth design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sawtooth = "Sawtooth",
        /**
         * Represents a border with gray sawtooth design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sawtoothGray = "SawtoothGray",
        /**
         * Represents a border with postage stamp design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        postageStamp = "PostageStamp",
        /**
         * Represents a border with weaving strips design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        weavingStrips = "WeavingStrips",
        /**
         * Represents a border with zigzag design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        zigZag = "ZigZag",
        /**
         * Represents a border with cross stitch design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        crossStitch = "CrossStitch",
        /**
         * Represents a border with gems design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gems = "Gems",
        /**
         * Represents a border with circles and rectangles design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        circlesRectangles = "CirclesRectangles",
        /**
         * Represents a border with corner triangles design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cornerTriangles = "CornerTriangles",
        /**
         * Represents a border with insects creatures design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        creaturesInsects = "CreaturesInsects",
        /**
         * Represents a border with zigzag stitch design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        zigZagStitch = "ZigZagStitch",
        /**
         * Represents a border with checkered design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        checkered = "Checkered",
        /**
         * Represents a border with black checked bar design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        checkedBarBlack = "CheckedBarBlack",
        /**
         * Represents a border with marquee design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        marquee = "Marquee",
        /**
         * Represents a border with basic white dots design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicWhiteDots = "BasicWhiteDots",
        /**
         * Represents a border with basic wide midline design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicWideMidline = "BasicWideMidline",
        /**
         * Represents a border with basic wide outline design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicWideOutline = "BasicWideOutline",
        /**
         * Represents a border with basic wide inline design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicWideInline = "BasicWideInline",
        /**
         * Represents a border with basic thin lines design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicThinLines = "BasicThinLines",
        /**
         * Represents a border with basic white dashes design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicWhiteDashes = "BasicWhiteDashes",
        /**
         * Represents a border with basic white squares design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicWhiteSquares = "BasicWhiteSquares",
        /**
         * Represents a border with basic black squares design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicBlackSquares = "BasicBlackSquares",
        /**
         * Represents a border with basic black dashes design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicBlackDashes = "BasicBlackDashes",
        /**
         * Represents a border with basic black dots design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basicBlackDots = "BasicBlackDots",
        /**
         * Represents a border with top stars design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        starsTop = "StarsTop",
        /**
         * Represents a border with certificate banner design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        certificateBanner = "CertificateBanner",
        /**
         * Represents a border with handmade design (variant 1).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        handmade1 = "Handmade1",
        /**
         * Represents a border with handmade design (variant 2).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        handmade2 = "Handmade2",
        /**
         * Represents a border with torn paper design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tornPaper = "TornPaper",
        /**
         * Represents a border with black torn paper design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tornPaperBlack = "TornPaperBlack",
        /**
         * Represents a border with coupon cutout dashes design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        couponCutoutDashes = "CouponCutoutDashes",
        /**
         * Represents a border with coupon cutout dots design.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        couponCutoutDots = "CouponCutoutDots",
    }
    /**
     * Specifies the preferred unit of measure to use when measuring the width of an item.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PreferredWidthType {
        /**
         * Automatically select the unit of measure to use based on the current selection.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        auto = "Auto",
        /**
         * Measure the current item width using a specified percentage.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent = "Percent",
        /**
         * Measure the current item width using a specified number of points.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        points = "Points",
    }
    /**
     * Specifies the way Word adjusts the table when the left indent is changed.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum RulerStyle {
        /**
         * Adjusts the left edge of row or rows, preserving the width of all columns by shifting them to the left or right. This is the default value.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "None",
        /**
         * Adjusts the left edge of the first column, preserving the position of the right edge of the table by proportionally adjusting the widths of all the cells in the specified row or rows.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        proportional = "Proportional",
        /**
         * Adjusts the left edge of the first column only, preserving the positions of the other columns and the right edge of the table.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        firstColumn = "FirstColumn",
        /**
         * Adjusts the left edge of the first column, preserving the position of the right edge of the table by setting the widths of all the cells in the specified row or rows to the same value.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sameWidth = "SameWidth",
    }
    /**
     * Represents the East Asian language to use when breaking lines of text in the specified document or template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum FarEastLineBreakLanguageId {
        /**
         * Represents Traditional Chinese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        traditionalChinese = "TraditionalChinese",
        /**
         * Represents Japanese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        japanese = "Japanese",
        /**
         * Represents Korean language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        korean = "Korean",
        /**
         * Represents Simplified Chinese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        simplifiedChinese = "SimplifiedChinese",
    }
    /**
     * Represents the level of line breaking to use for East Asian languages in the specified document or template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum FarEastLineBreakLevel {
        /**
         * Represents the normal line break level.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        normal = "Normal",
        /**
         * Represents the strict line break level.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        strict = "Strict",
        /**
         * Represents the custom line break level.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        custom = "Custom",
    }
    /**
     * Specifies the character spacing adjustment for a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum JustificationMode {
        /**
         * Expands the character spacing
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        expand = "Expand",
        /**
         * Compresses the character spacing.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        compress = "Compress",
        /**
         * Compresses the character spacing using rules of the kana syllabaries, Hiragana and Katakana.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        compressKana = "CompressKana",
    }
    /**
     * Specifies the type of template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum TemplateType {
        /**
         * Represents the normal template type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        normal = "Normal",
        /**
         * Represents the global template type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        global = "Global",
        /**
         * Represents the attached template type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        attached = "Attached",
    }
    /**
     * Represents the language ID of a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum LanguageId {
        /**
         * Afrikaans language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        afrikaans = "Afrikaans",
        /**
         * Albanian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        albanian = "Albanian",
        /**
         * Amharic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        amharic = "Amharic",
        /**
         * Arabic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabic = "Arabic",
        /**
         * Arabic Algerian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicAlgeria = "ArabicAlgeria",
        /**
         * Arabic Bahraini language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicBahrain = "ArabicBahrain",
        /**
         * Arabic Egyptian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicEgypt = "ArabicEgypt",
        /**
         * Arabic Iraqi language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicIraq = "ArabicIraq",
        /**
         * Arabic Jordanian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicJordan = "ArabicJordan",
        /**
         * Arabic Kuwaiti language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicKuwait = "ArabicKuwait",
        /**
         * Arabic Lebanese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicLebanon = "ArabicLebanon",
        /**
         * Arabic Libyan language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicLibya = "ArabicLibya",
        /**
         * Arabic Moroccan language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicMorocco = "ArabicMorocco",
        /**
         * Arabic Omani language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicOman = "ArabicOman",
        /**
         * Arabic Qatari language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicQatar = "ArabicQatar",
        /**
         * Arabic Syrian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicSyria = "ArabicSyria",
        /**
         * Arabic Tunisian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicTunisia = "ArabicTunisia",
        /**
         * Arabic United Arab Emirates language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicUAE = "ArabicUAE",
        /**
         * Arabic Yemeni language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        arabicYemen = "ArabicYemen",
        /**
         * Armenian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        armenian = "Armenian",
        /**
         * Assamese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        assamese = "Assamese",
        /**
         * Azerbaijani Cyrillic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        azeriCyrillic = "AzeriCyrillic",
        /**
         * Azerbaijani Latin language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        azeriLatin = "AzeriLatin",
        /**
         * Basque (Basque).
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        basque = "Basque",
        /**
         * Belgian Dutch language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        belgianDutch = "BelgianDutch",
        /**
         * Belgian French language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        belgianFrench = "BelgianFrench",
        /**
         * Bengali language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bengali = "Bengali",
        /**
         * Bulgarian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bulgarian = "Bulgarian",
        /**
         * Burmese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        burmese = "Burmese",
        /**
         * Belarusian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        belarusian = "Belarusian",
        /**
         * Catalan language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        catalan = "Catalan",
        /**
         * Cherokee language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cherokee = "Cherokee",
        /**
         * Chinese Hong Kong SAR language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        chineseHongKongSAR = "ChineseHongKongSAR",
        /**
         * Chinese Macao SAR language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        chineseMacaoSAR = "ChineseMacaoSAR",
        /**
         * Chinese Singapore language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        chineseSingapore = "ChineseSingapore",
        /**
         * Croatian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        croatian = "Croatian",
        /**
         * Czech language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        czech = "Czech",
        /**
         * Danish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        danish = "Danish",
        /**
         * Divehi language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        divehi = "Divehi",
        /**
         * Dutch language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dutch = "Dutch",
        /**
         * Edo language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        edo = "Edo",
        /**
         * Australian English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishAUS = "EnglishAUS",
        /**
         * Belize English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishBelize = "EnglishBelize",
        /**
         * Canadian English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishCanadian = "EnglishCanadian",
        /**
         * Caribbean English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishCaribbean = "EnglishCaribbean",
        /**
         * Indonesian English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishIndonesia = "EnglishIndonesia",
        /**
         * Irish English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishIreland = "EnglishIreland",
        /**
         * Jamaican English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishJamaica = "EnglishJamaica",
        /**
         * New Zealand English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishNewZealand = "EnglishNewZealand",
        /**
         * Filipino English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishPhilippines = "EnglishPhilippines",
        /**
         * South African English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishSouthAfrica = "EnglishSouthAfrica",
        /**
         * Tobago Trinidad English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishTrinidadTobago = "EnglishTrinidadTobago",
        /**
         * United Kingdom English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishUK = "EnglishUK",
        /**
         * United States English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishUS = "EnglishUS",
        /**
         * Zimbabwe English language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        englishZimbabwe = "EnglishZimbabwe",
        /**
         * Estonian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        estonian = "Estonian",
        /**
         * Faeroese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        faeroese = "Faeroese",
        /**
         * Filipino language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        filipino = "Filipino",
        /**
         * Finnish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        finnish = "Finnish",
        /**
         * French language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        french = "French",
        /**
         * French Cameroon language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchCameroon = "FrenchCameroon",
        /**
         * French Canadian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchCanadian = "FrenchCanadian",
        /**
         * French (Congo (DRC)) language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchCongoDRC = "FrenchCongoDRC",
        /**
         * French Cote d'Ivoire language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchCotedIvoire = "FrenchCotedIvoire",
        /**
         * French Haiti language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchHaiti = "FrenchHaiti",
        /**
         * French Luxembourg language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchLuxembourg = "FrenchLuxembourg",
        /**
         * French Mali language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchMali = "FrenchMali",
        /**
         * French Monaco language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchMonaco = "FrenchMonaco",
        /**
         * French Morocco language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchMorocco = "FrenchMorocco",
        /**
         * French Reunion language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchReunion = "FrenchReunion",
        /**
         * French Senegal language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchSenegal = "FrenchSenegal",
        /**
         * French West Indies language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frenchWestIndies = "FrenchWestIndies",
        /**
         * Frisian Netherlands language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        frisianNetherlands = "FrisianNetherlands",
        /**
         * Fulfulde language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fulfulde = "Fulfulde",
        /**
         * Irish (Irish) language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gaelicIreland = "GaelicIreland",
        /**
         * Scottish Gaelic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gaelicScotland = "GaelicScotland",
        /**
         * Galician language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        galician = "Galician",
        /**
         * Georgian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        georgian = "Georgian",
        /**
         * German language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        german = "German",
        /**
         * German Austrian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        germanAustria = "GermanAustria",
        /**
         * German Liechtenstein language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        germanLiechtenstein = "GermanLiechtenstein",
        /**
         * German Luxembourg language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        germanLuxembourg = "GermanLuxembourg",
        /**
         * Greek language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        greek = "Greek",
        /**
         * Guarani language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        guarani = "Guarani",
        /**
         * Gujarati language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gujarati = "Gujarati",
        /**
         * Hausa language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hausa = "Hausa",
        /**
         * Hawaiian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hawaiian = "Hawaiian",
        /**
         * Hebrew language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hebrew = "Hebrew",
        /**
         * Hindi language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hindi = "Hindi",
        /**
         * Hungarian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hungarian = "Hungarian",
        /**
         * Ibibio language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        ibibio = "Ibibio",
        /**
         * Icelandic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        icelandic = "Icelandic",
        /**
         * Igbo language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        igbo = "Igbo",
        /**
         * Indonesian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        indonesian = "Indonesian",
        /**
         * Inuktitut language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        inuktitut = "Inuktitut",
        /**
         * Italian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        italian = "Italian",
        /**
         * Japanese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        japanese = "Japanese",
        /**
         * Kannada language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        kannada = "Kannada",
        /**
         * Kanuri language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        kanuri = "Kanuri",
        /**
         * Kashmiri language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        kashmiri = "Kashmiri",
        /**
         * Kazakh language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        kazakh = "Kazakh",
        /**
         * Khmer language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        khmer = "Khmer",
        /**
         * Kirghiz language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        kirghiz = "Kirghiz",
        /**
         * Konkani language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        konkani = "Konkani",
        /**
         * Korean language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        korean = "Korean",
        /**
         * Kyrgyz language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        kyrgyz = "Kyrgyz",
        /**
         * No specified language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        languageNone = "LanguageNone",
        /**
         * Lao language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lao = "Lao",
        /**
         * Latin language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        latin = "Latin",
        /**
         * Latvian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        latvian = "Latvian",
        /**
         * Lithuanian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lithuanian = "Lithuanian",
        /**
         * Macedonian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        macedonianFYROM = "MacedonianFYROM",
        /**
         * Malayalam language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        malayalam = "Malayalam",
        /**
         * Malay Brunei Darussalam language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        malayBruneiDarussalam = "MalayBruneiDarussalam",
        /**
         * Malaysian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        malaysian = "Malaysian",
        /**
         * Maltese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        maltese = "Maltese",
        /**
         * Manipuri language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        manipuri = "Manipuri",
        /**
         * Marathi language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        marathi = "Marathi",
        /**
         * Mexican Spanish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mexicanSpanish = "MexicanSpanish",
        /**
         * Mongolian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mongolian = "Mongolian",
        /**
         * Nepali language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nepali = "Nepali",
        /**
         * Disables proofing if the language ID identifies a language in which an object is grammatically validated using the Microsoft Word proofing tools.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        noProofing = "NoProofing",
        /**
         * Norwegian Bokmol language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        norwegianBokmol = "NorwegianBokmol",
        /**
         * Norwegian Nynorsk language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        norwegianNynorsk = "NorwegianNynorsk",
        /**
         * Odia (Oriya) language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        oriya = "Oriya",
        /**
         * Oromo language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        oromo = "Oromo",
        /**
         * Pashto language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pashto = "Pashto",
        /**
         * Persian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        persian = "Persian",
        /**
         * Polish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        polish = "Polish",
        /**
         * Portuguese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        portuguese = "Portuguese",
        /**
         * Portuguese (Brazil) language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        portugueseBrazil = "PortugueseBrazil",
        /**
         * Punjabi language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        punjabi = "Punjabi",
        /**
         * Rhaeto Romanic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rhaetoRomanic = "RhaetoRomanic",
        /**
         * Romanian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        romanian = "Romanian",
        /**
         * Romanian Moldova language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        romanianMoldova = "RomanianMoldova",
        /**
         * Russian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        russian = "Russian",
        /**
         * Russian Moldova language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        russianMoldova = "RussianMoldova",
        /**
         * Sami Lappish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        samiLappish = "SamiLappish",
        /**
         * Sanskrit language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sanskrit = "Sanskrit",
        /**
         * Serbian Cyrillic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        serbianCyrillic = "SerbianCyrillic",
        /**
         * Serbian Latin language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        serbianLatin = "SerbianLatin",
        /**
         * Sesotho language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sesotho = "Sesotho",
        /**
         * Simplified Chinese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        simplifiedChinese = "SimplifiedChinese",
        /**
         * Sindhi language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sindhi = "Sindhi",
        /**
         * Sindhi (Pakistan) language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sindhiPakistan = "SindhiPakistan",
        /**
         * Sinhalese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sinhalese = "Sinhalese",
        /**
         * Slovakian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        slovak = "Slovak",
        /**
         * Slovenian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        slovenian = "Slovenian",
        /**
         * Somali language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        somali = "Somali",
        /**
         * Sorbian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sorbian = "Sorbian",
        /**
         * Spanish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanish = "Spanish",
        /**
         * Spanish Argentina language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishArgentina = "SpanishArgentina",
        /**
         * Spanish Bolivian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishBolivia = "SpanishBolivia",
        /**
         * Spanish Chilean language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishChile = "SpanishChile",
        /**
         * Spanish Colombian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishColombia = "SpanishColombia",
        /**
         * Spanish Costa Rican language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishCostaRica = "SpanishCostaRica",
        /**
         * Spanish Dominican Republic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishDominicanRepublic = "SpanishDominicanRepublic",
        /**
         * Spanish Ecuadorian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishEcuador = "SpanishEcuador",
        /**
         * Spanish El Salvadorian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishElSalvador = "SpanishElSalvador",
        /**
         * Spanish Guatemala language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishGuatemala = "SpanishGuatemala",
        /**
         * Spanish Honduran language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishHonduras = "SpanishHonduras",
        /**
         * Spanish Modern Sort language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishModernSort = "SpanishModernSort",
        /**
         * Spanish Nicaraguan language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishNicaragua = "SpanishNicaragua",
        /**
         * Spanish Panamanian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishPanama = "SpanishPanama",
        /**
         * Spanish Paraguayan language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishParaguay = "SpanishParaguay",
        /**
         * Spanish Peruvian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishPeru = "SpanishPeru",
        /**
         * Spanish Puerto Rican language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishPuertoRico = "SpanishPuertoRico",
        /**
         * Spanish Uruguayan language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishUruguay = "SpanishUruguay",
        /**
         * Spanish Venezuelan language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spanishVenezuela = "SpanishVenezuela",
        /**
         * Sutu language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sutu = "Sutu",
        /**
         * Swahili language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        swahili = "Swahili",
        /**
         * Swedish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        swedish = "Swedish",
        /**
         * Swedish Finnish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        swedishFinland = "SwedishFinland",
        /**
         * Swiss French language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        swissFrench = "SwissFrench",
        /**
         * Swiss German language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        swissGerman = "SwissGerman",
        /**
         * Swiss Italian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        swissItalian = "SwissItalian",
        /**
         * Syriac language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        syriac = "Syriac",
        /**
         * Tajik language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tajik = "Tajik",
        /**
         * Tamazight language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tamazight = "Tamazight",
        /**
         * Tamazight Latin language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tamazightLatin = "TamazightLatin",
        /**
         * Tamil language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tamil = "Tamil",
        /**
         * Tatar language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tatar = "Tatar",
        /**
         * Telugu language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        telugu = "Telugu",
        /**
         * Thai language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thai = "Thai",
        /**
         * Tibetan language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tibetan = "Tibetan",
        /**
         * Tigrigna Eritrea language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tigrignaEritrea = "TigrignaEritrea",
        /**
         * Tigrigna Ethiopic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tigrignaEthiopic = "TigrignaEthiopic",
        /**
         * Traditional Chinese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        traditionalChinese = "TraditionalChinese",
        /**
         * Tsonga language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tsonga = "Tsonga",
        /**
         * Tswana language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tswana = "Tswana",
        /**
         * Turkish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        turkish = "Turkish",
        /**
         * Turkmen language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        turkmen = "Turkmen",
        /**
         * Ukrainian language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        ukrainian = "Ukrainian",
        /**
         * Urdu language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        urdu = "Urdu",
        /**
         * Uzbek Cyrillic language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        uzbekCyrillic = "UzbekCyrillic",
        /**
         * Uzbek Latin language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        uzbekLatin = "UzbekLatin",
        /**
         * Venda language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        venda = "Venda",
        /**
         * Vietnamese language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        vietnamese = "Vietnamese",
        /**
         * Welsh language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        welsh = "Welsh",
        /**
         * Xhosa language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        xhosa = "Xhosa",
        /**
         * Yi language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        yi = "Yi",
        /**
         * Yiddish language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        yiddish = "Yiddish",
        /**
         * Yoruba language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        yoruba = "Yoruba",
        /**
         * Zulu language.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        zulu = "Zulu",
    }
    /**
     * Specifies how a building block is inserted into a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum DocPartInsertType {
        /**
         * Inserts the content of the building block.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        content = "Content",
        /**
         * Inserts the building block as a paragraph.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        paragraph = "Paragraph",
        /**
         * Inserts the building block as a page.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        page = "Page",
    }
    /**
     * Specifies the type of building block.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum BuildingBlockType {
        /**
         * Represents Quick Parts building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        quickParts = "QuickParts",
        /**
         * Represents Cover Page building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        coverPage = "CoverPage",
        /**
         * Represents Equations building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        equations = "Equations",
        /**
         * Represents Footers building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        footers = "Footers",
        /**
         * Represents Headers building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        headers = "Headers",
        /**
         * Represents Page Number building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pageNumber = "PageNumber",
        /**
         * Represents Tables building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tables = "Tables",
        /**
         * Represents Watermarks building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        watermarks = "Watermarks",
        /**
         * Represents AutoText building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        autoText = "AutoText",
        /**
         * Represents Text Box building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textBox = "TextBox",
        /**
         * Represents Page Number Top building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pageNumberTop = "PageNumberTop",
        /**
         * Represents Page Number Bottom building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pageNumberBottom = "PageNumberBottom",
        /**
         * Represents Page Number Page building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pageNumberPage = "PageNumberPage",
        /**
         * Represents Table of Contents building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tableOfContents = "TableOfContents",
        /**
         * Represents Custom Quick Parts building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customQuickParts = "CustomQuickParts",
        /**
         * Represents Custom Cover Page building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customCoverPage = "CustomCoverPage",
        /**
         * Represents Custom Equations building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customEquations = "CustomEquations",
        /**
         * Represents Custom Footers building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customFooters = "CustomFooters",
        /**
         * Represents Custom Headers building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customHeaders = "CustomHeaders",
        /**
         * Represents Custom Page Number building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customPageNumber = "CustomPageNumber",
        /**
         * Represents Custom Tables building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customTables = "CustomTables",
        /**
         * Represents Custom Watermarks building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customWatermarks = "CustomWatermarks",
        /**
         * Represents Custom AutoText building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customAutoText = "CustomAutoText",
        /**
         * Represents Custom Text Box building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customTextBox = "CustomTextBox",
        /**
         * Represents Custom Page Number Top building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customPageNumberTop = "CustomPageNumberTop",
        /**
         * Represents Custom Page Number Bottom building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customPageNumberBottom = "CustomPageNumberBottom",
        /**
         * Represents Custom Page Number Page building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customPageNumberPage = "CustomPageNumberPage",
        /**
         * Represents Custom Table of Contents building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customTableOfContents = "CustomTableOfContents",
        /**
         * Represents Custom building block type 1.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        custom1 = "Custom1",
        /**
         * Represents Custom building block type 2.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        custom2 = "Custom2",
        /**
         * Represents Custom building block type 3.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        custom3 = "Custom3",
        /**
         * Represents Custom building block type 4.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        custom4 = "Custom4",
        /**
         * Represents Custom building block type 5.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        custom5 = "Custom5",
        /**
         * Represents Bibliography building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bibliography = "Bibliography",
        /**
         * Represents Custom Bibliography building block type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        customBibliography = "CustomBibliography",
    }
    /**
     * Represents the type of a {@link Word.CustomXmlNode}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum CustomXmlNodeType {
        /**
         * Represents an XML element node.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        element = "element",
        /**
         * Represents an XML attribute node.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        attribute = "attribute",
        /**
         * Represents an XML text node.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        text = "text",
        /**
         * Represents an XML CDATA section node.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cData = "cData",
        /**
         * Represents an XML processing instruction node.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        processingInstruction = "processingInstruction",
        /**
         * Represents an XML comment node.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        comment = "comment",
        /**
         * Represents an XML document node.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        document = "document",
    }
    /**
     * Specifies the type of link.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum LinkType {
        /**
         * OLE object.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ole = "Ole",
        /**
         * Picture.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        picture = "Picture",
        /**
         * Text.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        text = "Text",
        /**
         * Reference library.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reference = "Reference",
        /**
         * Include file.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        include = "Include",
        /**
         * Import file.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        import = "Import",
        /**
         * Dynamic Data Exchange.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        dde = "Dde",
        /**
         * Automatic DDE.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ddeAuto = "DdeAuto",
        /**
         * Microsoft Excel chart.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        chart = "Chart",
    }
    /**
     * Specifies the action associated with the verb that the OLE object should perform.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum OleVerb {
        /**
         * Performs the verb that is invoked when the user double-clicks the object.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        primary = "Primary",
        /**
         * Shows the object to the user for editing or viewing. Use it to show a newly inserted object for initial editing.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        show = "Show",
        /**
         * Opens the object in a separate window.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        open = "Open",
        /**
         * Removes the object's user interface from view.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hide = "Hide",
        /**
         * Activates the object in place and displays any user-interface tools that the object needs, such as menus or toolbars.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        uiActivate = "UiActivate",
        /**
         * Runs the object and installs its window, but doesn't install any user-interface tools.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        inPlaceActivate = "InPlaceActivate",
        /**
         * Forces the object to discard any undo state that it might be maintaining; note that the object remains active, however.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        discardUndoState = "DiscardUndoState",
    }
    /**
     * Represents the list formatting characteristics of a range.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class ListFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `List` object that represents the first formatted list contained in the `ListFormat` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly list: Word.List;
        /**
         * Gets the list template associated with the `ListFormat` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly listTemplate: Word.ListTemplate;
        /**
         * Indicates whether the `ListFormat` object contains a single list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly isSingleList: boolean;
        /**
         * Indicates whether the `ListFormat` object contains a single list template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly isSingleListTemplate: boolean;
        /**
         * Specifies the list level number for the first paragraph for the `ListFormat` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listLevelNumber: number;
        /**
         * Gets the string representation of the list value of the first paragraph in the range for the `ListFormat` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly listString: string;
        /**
         * Gets the type of the list for the `ListFormat` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly listType: Word.ListType | "ListNoNumbering" | "ListListNumOnly" | "ListBullet" | "ListSimpleNumbering" | "ListOutlineNumbering" | "ListMixedNumbering" | "ListPictureBullet";
        /**
         * Gets the numeric value of the the first paragraph in the range for the `ListFormat` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly listValue: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ListFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ListFormat): void;
        /**
         * Adds bullets and formatting to the paragraphs in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param defaultListBehavior - Optional. Specifies the default list behavior. Default is `word97`.
         */
        applyBulletDefault(defaultListBehavior: Word.DefaultListBehavior): void;
        /**
         * Adds bullets and formatting to the paragraphs in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param defaultListBehavior - Optional. Specifies the default list behavior. Default is `word97`.
         */
        applyBulletDefault(defaultListBehavior: "Word97" | "Word2000" | "Word2002"): void;
        /**
         * Applies a list template with a specific level to the paragraphs in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param listTemplate - The list template to apply.
         * @param options - Optional. Options for applying the list template, such as whether to continue the previous list or which part of the list to apply the template to.
         */
        applyListTemplateWithLevel(listTemplate: Word.ListTemplate, options?: Word.ListTemplateApplyOptions): void;
        /**
         * Adds numbering and formatting to the paragraphs in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param defaultListBehavior - Optional. Specifies the default list behavior.
         */
        applyNumberDefault(defaultListBehavior: Word.DefaultListBehavior): void;
        /**
         * Adds numbering and formatting to the paragraphs in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param defaultListBehavior - Optional. Specifies the default list behavior.
         */
        applyNumberDefault(defaultListBehavior: "Word97" | "Word2000" | "Word2002"): void;
        /**
         * Adds outline numbering and formatting to the paragraphs in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param defaultListBehavior - Optional. Specifies the default list behavior.
         */
        applyOutlineNumberDefault(defaultListBehavior: Word.DefaultListBehavior): void;
        /**
         * Adds outline numbering and formatting to the paragraphs in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param defaultListBehavior - Optional. Specifies the default list behavior.
         */
        applyOutlineNumberDefault(defaultListBehavior: "Word97" | "Word2000" | "Word2002"): void;
        /**
         * Determines whether the `ListFormat` object can continue a previous list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param listTemplate - The list template to check.
         * @returns A `Continue` value indicating whether continuation is possible.
         */
        canContinuePreviousList(listTemplate: Word.ListTemplate): OfficeExtension.ClientResult<Word.Continue>;
        /**
         * Converts numbers in the list to plain text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param numberType - Optional. The type of number to convert.
         */
        convertNumbersToText(numberType: Word.NumberType): void;
        /**
         * Converts numbers in the list to plain text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param numberType - Optional. The type of number to convert.
         */
        convertNumbersToText(numberType: "Paragraph" | "ListNum" | "AllNumbers"): void;
        /**
         * Counts the numbered items in the list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. Options for counting numbered items, such as the type of number and the level to count.
         * @returns The number of items.
         */
        countNumberedItems(options?: Word.ListFormatCountNumberedItemsOptions): OfficeExtension.ClientResult<number>;
        /**
         * Indents the list by one level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listIndent(): void;
        /**
         * Outdents the list by one level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listOutdent(): void;
        /**
         * Removes numbering from the list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param numberType - Optional. The type of number to remove.
         */
        removeNumbers(numberType: Word.NumberType): void;
        /**
         * Removes numbering from the list.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param numberType - Optional. The type of number to remove.
         */
        removeNumbers(numberType: "Paragraph" | "ListNum" | "AllNumbers"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ListFormatLoadOptions): Word.ListFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ListFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ListFormatData;
    }
    /**
     * Represents options for counting numbered items in a range.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface ListFormatCountNumberedItemsOptions {
        /**
         * If provided, specifies the level to count. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        level?: number;
        /**
         * If provided, specifies the type of number to count. The default value is `paragraph`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        numberType?: Word.NumberType | "Paragraph" | "ListNum" | "AllNumbers";
    }
    /**
     * Represents options for applying a list template to a range.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface ListTemplateApplyOptions {
        /**
         * If provided, specifies the level to apply in the list template. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        applyLevel?: number;
        /**
         * If provided, specifies which part of the list to apply the template to. The default value is `wholeList`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        applyTo?: Word.ListApplyTo | "WholeList" | "ThisPointForward" | "Selection";
        /**
         * If provided, specifies whether to continue the previous list. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        continuePreviousList?: boolean;
        /**
         * If provided, specifies the default list behavior. The default value is `word97`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        defaultListBehavior?: Word.DefaultListBehavior | "Word97" | "Word2000" | "Word2002";
    }
    /**
     * Represents the fill formatting for a shape or text.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class FillFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `ColorFormat` object that represents the background color for the fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly backgroundColor: Word.ColorFormat;
        /**
         * Returns a `ColorFormat` object that represents the foreground color for the fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly foregroundColor: Word.ColorFormat;
        /**
         * Specifies the angle of the gradient fill. The valid range of values is from 0 to 359.9.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gradientAngle: number;
        /**
         * Gets the gradient color type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly gradientColorType: Word.GradientColorType | "Mixed" | "OneColor" | "TwoColors" | "PresetColors" | "MultiColor";
        /**
         * Returns how dark or light a one-color gradient fill is.
                    A value of 0 means that black is mixed in with the shape's foreground color to form the gradient.
                    A value of 1 means that white is mixed in.
                    Values between 0 and 1 mean that a darker or lighter shade of the foreground color is mixed in.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly gradientDegree: number;
        /**
         * Returns the gradient style for the fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly gradientStyle: Word.GradientStyle | "Mixed" | "Horizontal" | "Vertical" | "DiagonalUp" | "DiagonalDown" | "FromCorner" | "FromTitle" | "FromCenter";
        /**
         * Returns the gradient variant for the fill as an integer value from 1 to 4 for most gradient fills.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly gradientVariant: number;
        /**
         * Specifies if the object, or the formatting applied to it, is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isVisible: boolean;
        /**
         * Returns a `PatternType` value that represents the pattern applied to the fill or line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly pattern: Word.PatternType | "Mixed" | "Percent5" | "Percent10" | "Percent20" | "Percent25" | "Percent30" | "Percent40" | "Percent50" | "Percent60" | "Percent70" | "Percent75" | "Percent80" | "Percent90" | "DarkHorizontal" | "DarkVertical" | "DarkDownwardDiagonal" | "DarkUpwardDiagonal" | "SmallCheckerBoard" | "Trellis" | "LightHorizontal" | "LightVertical" | "LightDownwardDiagonal" | "LightUpwardDiagonal" | "SmallGrid" | "DottedDiamond" | "WideDownwardDiagonal" | "WideUpwardDiagonal" | "DashedUpwardDiagonal" | "DashedDownwardDiagonal" | "NarrowVertical" | "NarrowHorizontal" | "DashedVertical" | "DashedHorizontal" | "LargeConfetti" | "LargeGrid" | "HorizontalBrick" | "LargeCheckerBoard" | "SmallConfetti" | "ZigZag" | "SolidDiamond" | "DiagonalBrick" | "OutlinedDiamond" | "Plaid" | "Sphere" | "Weave" | "DottedGrid" | "Divot" | "Shingle" | "Wave" | "Horizontal" | "Vertical" | "Cross" | "DownwardDiagonal" | "UpwardDiagonal" | "DiagonalCross";
        /**
         * Returns the preset gradient type for the fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly presetGradientType: Word.PresetGradientType | "Mixed" | "EarlySunset" | "LateSunset" | "Nightfall" | "Daybreak" | "Horizon" | "Desert" | "Ocean" | "CalmWater" | "Fire" | "Fog" | "Moss" | "Peacock" | "Wheat" | "Parchment" | "Mahogany" | "Rainbow" | "RainbowII" | "Gold" | "GoldII" | "Brass" | "Chrome" | "ChromeII" | "Silver" | "Sapphire";
        /**
         * Gets the preset texture.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly presetTexture: Word.PresetTexture | "Mixed" | "Papyrus" | "Canvas" | "Denim" | "WovenMat" | "WaterDroplets" | "PaperBag" | "FishFossil" | "Sand" | "GreenMarble" | "WhiteMarble" | "BrownMarble" | "Granite" | "Newsprint" | "RecycledPaper" | "Parchment" | "Stationery" | "BlueTissuePaper" | "PinkTissuePaper" | "PurpleMesh" | "Bouquet" | "Cork" | "Walnut" | "Oak" | "MediumWood";
        /**
         * Specifies whether the fill rotates with the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rotateWithObject: boolean;
        /**
         * Specifies the alignment (the origin of the coordinate grid) for the tiling of the texture fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textureAlignment: Word.TextureAlignment | "Mixed" | "TopLeft" | "Top" | "TopRight" | "Left" | "Center" | "Right" | "BottomLeft" | "Bottom" | "BottomRight";
        /**
         * Specifies the horizontal scaling factor for the texture fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textureHorizontalScale: number;
        /**
         * Returns the name of the custom texture file for the fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly textureName: string;
        /**
         * Specifies the horizontal offset of the texture from the origin in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textureOffsetX: number;
        /**
         * Specifies the vertical offset of the texture.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textureOffsetY: number;
        /**
         * Specifies whether the texture is tiled.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textureTile: boolean;
        /**
         * Returns the texture type for the fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly textureType: Word.TextureType | "Mixed" | "Preset" | "UserDefined";
        /**
         * Specifies the vertical scaling factor for the texture fill as a value between 0.0 and 1.0.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textureVerticalScale: number;
        /**
         * Specifies the degree of transparency of the fill for a shape as a value between 0.0 (opaque) and 1.0 (clear).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        transparency: number;
        /**
         * Gets the fill format type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly type: Word.FillType | "Mixed" | "Solid" | "Patterned" | "Gradient" | "Textured" | "Background" | "Picture";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.FillFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.FillFormat): void;
        /**
         * Sets the fill to a one-color gradient.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param style - The gradient style.
         * @param variant - The gradient variant. Can be a value from 1 to 4.
         * @param degree - The gradient degree. Can be a value from `0.0` (dark) to `1.0` (light).
         */
        setOneColorGradient(style: Word.GradientStyle, variant: number, degree: number): void;
        /**
         * Sets the fill to a one-color gradient.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param style - The gradient style.
         * @param variant - The gradient variant. Can be a value from 1 to 4.
         * @param degree - The gradient degree. Can be a value from `0.0` (dark) to `1.0` (light).
         */
        setOneColorGradient(style: "Mixed" | "Horizontal" | "Vertical" | "DiagonalUp" | "DiagonalDown" | "FromCorner" | "FromTitle" | "FromCenter", variant: number, degree: number): void;
        /**
         * Sets the fill to a pattern.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setPatterned(pattern: Word.PatternType): void;
        /**
         * Sets the fill to a pattern.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setPatterned(pattern: "Mixed" | "Percent5" | "Percent10" | "Percent20" | "Percent25" | "Percent30" | "Percent40" | "Percent50" | "Percent60" | "Percent70" | "Percent75" | "Percent80" | "Percent90" | "DarkHorizontal" | "DarkVertical" | "DarkDownwardDiagonal" | "DarkUpwardDiagonal" | "SmallCheckerBoard" | "Trellis" | "LightHorizontal" | "LightVertical" | "LightDownwardDiagonal" | "LightUpwardDiagonal" | "SmallGrid" | "DottedDiamond" | "WideDownwardDiagonal" | "WideUpwardDiagonal" | "DashedUpwardDiagonal" | "DashedDownwardDiagonal" | "NarrowVertical" | "NarrowHorizontal" | "DashedVertical" | "DashedHorizontal" | "LargeConfetti" | "LargeGrid" | "HorizontalBrick" | "LargeCheckerBoard" | "SmallConfetti" | "ZigZag" | "SolidDiamond" | "DiagonalBrick" | "OutlinedDiamond" | "Plaid" | "Sphere" | "Weave" | "DottedGrid" | "Divot" | "Shingle" | "Wave" | "Horizontal" | "Vertical" | "Cross" | "DownwardDiagonal" | "UpwardDiagonal" | "DiagonalCross"): void;
        /**
         * Sets the fill to a preset gradient.
                    The gradient style.The gradient variant. Can be a value from 1 to 4.The preset gradient type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setPresetGradient(style: Word.GradientStyle, variant: number, presetGradientType: Word.PresetGradientType): void;
        /**
         * Sets the fill to a preset gradient.
                    The gradient style.The gradient variant. Can be a value from 1 to 4.The preset gradient type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setPresetGradient(style: "Mixed" | "Horizontal" | "Vertical" | "DiagonalUp" | "DiagonalDown" | "FromCorner" | "FromTitle" | "FromCenter", variant: number, presetGradientType: "Mixed" | "EarlySunset" | "LateSunset" | "Nightfall" | "Daybreak" | "Horizon" | "Desert" | "Ocean" | "CalmWater" | "Fire" | "Fog" | "Moss" | "Peacock" | "Wheat" | "Parchment" | "Mahogany" | "Rainbow" | "RainbowII" | "Gold" | "GoldII" | "Brass" | "Chrome" | "ChromeII" | "Silver" | "Sapphire"): void;
        /**
         * Sets the fill to a preset texture.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setPresetTextured(presetTexture: Word.PresetTexture): void;
        /**
         * Sets the fill to a preset texture.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setPresetTextured(presetTexture: "Mixed" | "Papyrus" | "Canvas" | "Denim" | "WovenMat" | "WaterDroplets" | "PaperBag" | "FishFossil" | "Sand" | "GreenMarble" | "WhiteMarble" | "BrownMarble" | "Granite" | "Newsprint" | "RecycledPaper" | "Parchment" | "Stationery" | "BlueTissuePaper" | "PinkTissuePaper" | "PurpleMesh" | "Bouquet" | "Cork" | "Walnut" | "Oak" | "MediumWood"): void;
        /**
         * Sets the fill to a two-color gradient.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setTwoColorGradient(style: Word.GradientStyle, variant: number): void;
        /**
         * Sets the fill to a two-color gradient.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setTwoColorGradient(style: "Mixed" | "Horizontal" | "Vertical" | "DiagonalUp" | "DiagonalDown" | "FromCorner" | "FromTitle" | "FromCenter", variant: number): void;
        /**
         * Sets the fill to a uniform color.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        solid(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.FillFormatLoadOptions): Word.FillFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.FillFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.FillFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.FillFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.FillFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.FillFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.FillFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.FillFormatData;
    }
    /**
     * Represents the glow formatting for the font used by the range of text.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class GlowFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `ColorFormat` object that represents the color for a glow effect.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly color: Word.ColorFormat;
        /**
         * Specifies the length of the radius for a glow effect.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        radius: number;
        /**
         * Specifies the degree of transparency for the glow effect as a value between 0.0 (opaque) and 1.0 (clear).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        transparency: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.GlowFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.GlowFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.GlowFormatLoadOptions): Word.GlowFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.GlowFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.GlowFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.GlowFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.GlowFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.GlowFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.GlowFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.GlowFormatData;
    }
    /**
     * Represents line and arrowhead formatting. For a line, the `LineFormat` object contains formatting information for the line itself;
                for a shape with a border, this object contains formatting information for the shape's border.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class LineFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets a `ColorFormat` object that represents the background color for a patterned line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly backgroundColor: Word.ColorFormat;
        /**
         * Gets a `ColorFormat` object that represents the foreground color for the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly foregroundColor: Word.ColorFormat;
        /**
         * Specifies the length of the arrowhead at the beginning of the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        beginArrowheadLength: Word.ArrowheadLength | "Mixed" | "Short" | "Medium" | "Long";
        /**
         * Specifies the style of the arrowhead at the beginning of the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        beginArrowheadStyle: Word.ArrowheadStyle | "Mixed" | "None" | "Triangle" | "Open" | "Stealth" | "Diamond" | "Oval";
        /**
         * Specifies the width of the arrowhead at the beginning of the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        beginArrowheadWidth: Word.ArrowheadWidth | "Mixed" | "Narrow" | "Medium" | "Wide";
        /**
         * Specifies the dash style for the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashStyle: Word.LineDashStyle | "Mixed" | "Solid" | "SquareDot" | "RoundDot" | "Dash" | "DashDot" | "DashDotDot" | "LongDash" | "LongDashDot" | "LongDashDotDot" | "SysDash" | "SysDot" | "SysDashDot";
        /**
         * Specifies the length of the arrowhead at the end of the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        endArrowheadLength: Word.ArrowheadLength | "Mixed" | "Short" | "Medium" | "Long";
        /**
         * Specifies the style of the arrowhead at the end of the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        endArrowheadStyle: Word.ArrowheadStyle | "Mixed" | "None" | "Triangle" | "Open" | "Stealth" | "Diamond" | "Oval";
        /**
         * Specifies the width of the arrowhead at the end of the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        endArrowheadWidth: Word.ArrowheadWidth | "Mixed" | "Narrow" | "Medium" | "Wide";
        /**
         * Specifies if to draw lines inside a shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        insetPen: boolean;
        /**
         * Specifies if the object, or the formatting applied to it, is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isVisible: boolean;
        /**
         * Specifies the pattern applied to the line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pattern: Word.PatternType | "Mixed" | "Percent5" | "Percent10" | "Percent20" | "Percent25" | "Percent30" | "Percent40" | "Percent50" | "Percent60" | "Percent70" | "Percent75" | "Percent80" | "Percent90" | "DarkHorizontal" | "DarkVertical" | "DarkDownwardDiagonal" | "DarkUpwardDiagonal" | "SmallCheckerBoard" | "Trellis" | "LightHorizontal" | "LightVertical" | "LightDownwardDiagonal" | "LightUpwardDiagonal" | "SmallGrid" | "DottedDiamond" | "WideDownwardDiagonal" | "WideUpwardDiagonal" | "DashedUpwardDiagonal" | "DashedDownwardDiagonal" | "NarrowVertical" | "NarrowHorizontal" | "DashedVertical" | "DashedHorizontal" | "LargeConfetti" | "LargeGrid" | "HorizontalBrick" | "LargeCheckerBoard" | "SmallConfetti" | "ZigZag" | "SolidDiamond" | "DiagonalBrick" | "OutlinedDiamond" | "Plaid" | "Sphere" | "Weave" | "DottedGrid" | "Divot" | "Shingle" | "Wave" | "Horizontal" | "Vertical" | "Cross" | "DownwardDiagonal" | "UpwardDiagonal" | "DiagonalCross";
        /**
         * Specifies the line format style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        style: Word.LineFormatStyle | "Mixed" | "Single" | "ThinThin" | "ThinThick" | "ThickThin" | "ThickBetweenThin";
        /**
         * Specifies the degree of transparency of the line as a value between 0.0 (opaque) and 1.0 (clear).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        transparency: number;
        /**
         * Specifies the thickness of the line in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        weight: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.LineFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.LineFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.LineFormatLoadOptions): Word.LineFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.LineFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.LineFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.LineFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.LineFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.LineFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.LineFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.LineFormatData;
    }
    /**
     * Represents the reflection formatting for a shape in Word.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class ReflectionFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the degree of blur effect applied to the `ReflectionFormat` object as a value between 0.0 and 100.0.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        blur: number;
        /**
         * Specifies the amount of separation, in points, of the reflected image from the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        offset: number;
        /**
         * Specifies the size of the reflection as a percentage of the reflected shape from 0 to 100.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        size: number;
        /**
         * Specifies the degree of transparency for the reflection effect as a value between 0.0 (opaque) and 1.0 (clear).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        transparency: number;
        /**
         * Specifies a `ReflectionType` value that represents the type and direction of the lighting for a shape reflection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type: Word.ReflectionType | "Mixed" | "None" | "Type1" | "Type2" | "Type3" | "Type4" | "Type5" | "Type6" | "Type7" | "Type8" | "Type9";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ReflectionFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ReflectionFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ReflectionFormatLoadOptions): Word.ReflectionFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ReflectionFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ReflectionFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ReflectionFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ReflectionFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ReflectionFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ReflectionFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ReflectionFormatData;
    }
    /**
     * Represents the color formatting of a shape or text in Word.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class ColorFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the brightness of a specified shape color. Valid values are from `-1` (darkest) to `1` (lightest), `0` represents neutral.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        brightness: number;
        /**
         * Specifies the theme color for a color format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        objectThemeColor: Word.ThemeColorIndex | "NotThemeColor" | "MainDark1" | "MainLight1" | "MainDark2" | "MainLight2" | "Accent1" | "Accent2" | "Accent3" | "Accent4" | "Accent5" | "Accent6" | "Hyperlink" | "HyperlinkFollowed" | "Background1" | "Text1" | "Background2" | "Text2";
        /**
         * Specifies the red-green-blue (RGB) value of the specified color. You can provide the value in the '#RRGGBB' format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rgb: string;
        /**
         * Specifies the lightening or darkening of a specified shape's color. Valid values are from `-1` (darkest) to `1` (lightest), `0` represents neutral.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tintAndShade: number;
        /**
         * Returns the shape color type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly type: Word.ColorType | "rgb" | "scheme";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ColorFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ColorFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ColorFormatLoadOptions): Word.ColorFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ColorFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ColorFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ColorFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ColorFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ColorFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ColorFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ColorFormatData;
    }
    /**
     * Represents the shadow formatting for a shape or text in Word.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class ShadowFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `ColorFormat` object that represents the foreground color for the fill, line, or shadow.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly foregroundColor: Word.ColorFormat;
        /**
         * Specifies the blur level for a shadow format as a value between 0.0 and 100.0.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        blur: number;
        /**
         * Specifies whether the object or the formatting applied to it is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isVisible: boolean;
        /**
         * Specifies `true` if the shadow of the shape appears filled in and is obscured by the shape, even if the shape has no fill,
                    `false` if the shadow has no fill and the outline of the shadow is visible through the shape if the shape has no fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obscured: boolean;
        /**
         * Specifies the horizontal offset (in points) of the shadow from the shape.
                    A positive value offsets the shadow to the right of the shape; a negative value offsets it to the left.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        offsetX: number;
        /**
         * Specifies the vertical offset (in points) of the shadow from the shape.
                    A positive value offsets the shadow to the top of the shape; a negative value offsets it to the bottom.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        offsetY: number;
        /**
         * Specifies whether to rotate the shadow when rotating the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rotateWithShape: boolean;
        /**
         * Specifies the width of the shadow.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        size: number;
        /**
         * Specifies the type of shadow formatting to apply to a shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        style: Word.ShadowStyle | "Mixed" | "OuterShadow" | "InnerShadow";
        /**
         * Specifies the degree of transparency of the shadow as a value between 0.0 (opaque) and 1.0 (clear).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        transparency: number;
        /**
         * Specifies the shape shadow type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type: Word.ShadowType | "Mixed" | "Type1" | "Type2" | "Type3" | "Type4" | "Type5" | "Type6" | "Type7" | "Type8" | "Type9" | "Type10" | "Type11" | "Type12" | "Type13" | "Type14" | "Type15" | "Type16" | "Type17" | "Type18" | "Type19" | "Type20" | "Type21" | "Type22" | "Type23" | "Type24" | "Type25" | "Type26" | "Type27" | "Type28" | "Type29" | "Type30" | "Type31" | "Type32" | "Type33" | "Type34" | "Type35" | "Type36" | "Type37" | "Type38" | "Type39" | "Type40" | "Type41" | "Type42" | "Type43";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ShadowFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ShadowFormat): void;
        /**
         * Changes the horizontal offset of the shadow by the number of points.
                    Increment The number of points to adjust.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        incrementOffsetX(increment: number): void;
        /**
         * Changes the vertical offset of the shadow by the specified number of points.
                    Increment The number of points to adjust.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        incrementOffsetY(increment: number): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ShadowFormatLoadOptions): Word.ShadowFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ShadowFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ShadowFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ShadowFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ShadowFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ShadowFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ShadowFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ShadowFormatData;
    }
    /**
     * Represents a shape's three-dimensional formatting.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class ThreeDimensionalFormat extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `ColorFormat` object that represents color of the contour of a shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly contourColor: Word.ColorFormat;
        /**
         * Returns a `ColorFormat` object that represents the color of the shape's extrusion.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly extrusionColor: Word.ColorFormat;
        /**
         * Specifies the depth of the bottom bevel.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bevelBottomDepth: number;
        /**
         * Specifies the inset size for the bottom bevel.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bevelBottomInset: number;
        /**
         * Specifies a `BevelType` value that represents the bevel type for the bottom bevel.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bevelBottomType: Word.BevelType | "mixed" | "none" | "relaxedInset" | "circle" | "slope" | "cross" | "angle" | "softRound" | "convex" | "coolSlant" | "divot" | "riblet" | "hardEdge" | "artDeco";
        /**
         * Specifies the depth of the top bevel.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bevelTopDepth: number;
        /**
         * Specifies the inset size for the top bevel.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bevelTopInset: number;
        /**
         * Specifies a `BevelType` value that represents the bevel type for the top bevel.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bevelTopType: Word.BevelType | "mixed" | "none" | "relaxedInset" | "circle" | "slope" | "cross" | "angle" | "softRound" | "convex" | "coolSlant" | "divot" | "riblet" | "hardEdge" | "artDeco";
        /**
         * Specifies the width of the contour of a shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        contourWidth: number;
        /**
         * Specifies the depth of the shape's extrusion.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        depth: number;
        /**
         * Specifies whether the extrusion color is based on the extruded shape's fill (the front face of the extrusion)
                    and automatically changes when the shape's fill changes, or whether the extrusion color is independent of the shape's fill.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        extrusionColorType: Word.ExtrusionColorType | "mixed" | "automatic" | "custom";
        /**
         * Specifies the amount of perspective for a shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fieldOfView: number;
        /**
         * Specifies `true` if the extrusion appears in perspective — that is, if the walls of the extrusion narrow toward a vanishing point,
                    `false` if the extrusion is a parallel, or orthographic, projection — that is, if the walls don't narrow toward a vanishing point.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isPerspective: boolean;
        /**
         * Specifies if the specified object, or the formatting applied to it, is visible.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isVisible: boolean;
        /**
         * Specifies the angle of the lighting.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lightAngle: number;
        /**
         * Returns a `PresetCamera` value that represents the camera presets.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly presetCamera: Word.PresetCamera | "Mixed" | "LegacyObliqueTopLeft" | "LegacyObliqueTop" | "LegacyObliqueTopRight" | "LegacyObliqueLeft" | "LegacyObliqueFront" | "LegacyObliqueRight" | "LegacyObliqueBottomLeft" | "LegacyObliqueBottom" | "LegacyObliqueBottomRight" | "LegacyPerspectiveTopLeft" | "LegacyPerspectiveTop" | "LegacyPerspectiveTopRight" | "LegacyPerspectiveLeft" | "LegacyPerspectiveFront" | "LegacyPerspectiveRight" | "LegacyPerspectiveBottomLeft" | "LegacyPerspectiveBottom" | "LegacyPerspectiveBottomRight" | "OrthographicFront" | "IsometricTopUp" | "IsometricTopDown" | "IsometricBottomUp" | "IsometricBottomDown" | "IsometricLeftUp" | "IsometricLeftDown" | "IsometricRightUp" | "IsometricRightDown" | "IsometricOffAxis1Left" | "IsometricOffAxis1Right" | "IsometricOffAxis1Top" | "IsometricOffAxis2Left" | "IsometricOffAxis2Right" | "IsometricOffAxis2Top" | "IsometricOffAxis3Left" | "IsometricOffAxis3Right" | "IsometricOffAxis3Bottom" | "IsometricOffAxis4Left" | "IsometricOffAxis4Right" | "IsometricOffAxis4Bottom" | "ObliqueTopLeft" | "ObliqueTop" | "ObliqueTopRight" | "ObliqueLeft" | "ObliqueRight" | "ObliqueBottomLeft" | "ObliqueBottom" | "ObliqueBottomRight" | "PerspectiveFront" | "PerspectiveLeft" | "PerspectiveRight" | "PerspectiveAbove" | "PerspectiveBelow" | "PerspectiveAboveLeftFacing" | "PerspectiveAboveRightFacing" | "PerspectiveContrastingLeftFacing" | "PerspectiveContrastingRightFacing" | "PerspectiveHeroicLeftFacing" | "PerspectiveHeroicRightFacing" | "PerspectiveHeroicExtremeLeftFacing" | "PerspectiveHeroicExtremeRightFacing" | "PerspectiveRelaxed" | "PerspectiveRelaxedModerately";
        /**
         * Returns the direction taken by the extrusion's sweep path leading away from the extruded shape (the front face of the extrusion).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly presetExtrusionDirection: Word.PresetExtrusionDirection | "Mixed" | "BottomRight" | "Bottom" | "BottomLeft" | "Right" | "None" | "Left" | "TopRight" | "Top" | "TopLeft";
        /**
         * Specifies a `LightRigType` value that represents the lighting preset.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        presetLighting: Word.LightRigType | "Mixed" | "LegacyFlat1" | "LegacyFlat2" | "LegacyFlat3" | "LegacyFlat4" | "LegacyNormal1" | "LegacyNormal2" | "LegacyNormal3" | "LegacyNormal4" | "LegacyHarsh1" | "LegacyHarsh2" | "LegacyHarsh3" | "LegacyHarsh4" | "ThreePoint" | "Balanced" | "Soft" | "Harsh" | "Flood" | "Contrasting" | "Morning" | "Sunrise" | "Sunset" | "Chilly" | "Freezing" | "Flat" | "TwoPoint" | "Glow" | "BrightRoom";
        /**
         * Specifies the position of the light source relative to the extrusion.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        presetLightingDirection: Word.PresetLightingDirection | "Mixed" | "TopLeft" | "Top" | "TopRight" | "Left" | "None" | "Right" | "BottomLeft" | "Bottom" | "BottomRight";
        /**
         * Specifies the intensity of the extrusion lighting.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        presetLightingSoftness: Word.PresetLightingSoftness | "Mixed" | "Dim" | "Normal" | "Bright";
        /**
         * Specifies the extrusion surface material.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        presetMaterial: Word.PresetMaterial | "Mixed" | "Matte" | "Plastic" | "Metal" | "WireFrame" | "Matte2" | "Plastic2" | "Metal2" | "WarmMatte" | "TranslucentPowder" | "Powder" | "DarkEdge" | "SoftEdge" | "Clear" | "Flat" | "SoftMetal";
        /**
         * Returns the preset extrusion format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly presetThreeDimensionalFormat: Word.PresetThreeDimensionalFormat | "Mixed" | "Format1" | "Format2" | "Format3" | "Format4" | "Format5" | "Format6" | "Format7" | "Format8" | "Format9" | "Format10" | "Format11" | "Format12" | "Format13" | "Format14" | "Format15" | "Format16" | "Format17" | "Format18" | "Format19" | "Format20";
        /**
         * Specifies whether text on a shape rotates with shape. `true` rotates the text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        projectText: boolean;
        /**
         * Specifies the rotation of the extruded shape around the x-axis in degrees.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rotationX: number;
        /**
         * Specifies the rotation of the extruded shape around the y-axis in degrees.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rotationY: number;
        /**
         * Specifies the z-axis rotation of the camera.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rotationZ: number;
        /**
         * Specifies the position on the z-axis for the shape.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        z: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.ThreeDimensionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.ThreeDimensionalFormat): void;
        /**
         * Horizontally rotates a shape on the x-axis.
                    The number of degrees to rotate.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        incrementRotationHorizontal(increment: number): void;
        /**
         * Vertically rotates a shape on the y-axis.
                    The number of degrees to rotate.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        incrementRotationVertical(increment: number): void;
        /**
         * Changes the rotation around the x-axis.
                    The number of degrees to rotate.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        incrementRotationX(increment: number): void;
        /**
         * Changes the rotation around the y-axis.
                    The number of degrees to rotate.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        incrementRotationY(increment: number): void;
        /**
         * Rotates a shape on the z-axis.
                    The number of degrees to rotate.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        incrementRotationZ(increment: number): void;
        /**
         * Resets the extrusion rotation around the x-axis, y-axis, and z-axis to 0.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        resetRotation(): void;
        /**
         * Sets the direction of the extrusion's sweep path.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param presetExtrusionDirection - The preset direction.
         */
        setExtrusionDirection(presetExtrusionDirection: Word.PresetExtrusionDirection): void;
        /**
         * Sets the direction of the extrusion's sweep path.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param presetExtrusionDirection - The preset direction.
         */
        setExtrusionDirection(presetExtrusionDirection: "Mixed" | "BottomRight" | "Bottom" | "BottomLeft" | "Right" | "None" | "Left" | "TopRight" | "Top" | "TopLeft"): void;
        /**
         * Sets the camera preset for the shape.
                    The preset camera type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setPresetCamera(presetCamera: Word.PresetCamera): void;
        /**
         * Sets the camera preset for the shape.
                    The preset camera type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setPresetCamera(presetCamera: "Mixed" | "LegacyObliqueTopLeft" | "LegacyObliqueTop" | "LegacyObliqueTopRight" | "LegacyObliqueLeft" | "LegacyObliqueFront" | "LegacyObliqueRight" | "LegacyObliqueBottomLeft" | "LegacyObliqueBottom" | "LegacyObliqueBottomRight" | "LegacyPerspectiveTopLeft" | "LegacyPerspectiveTop" | "LegacyPerspectiveTopRight" | "LegacyPerspectiveLeft" | "LegacyPerspectiveFront" | "LegacyPerspectiveRight" | "LegacyPerspectiveBottomLeft" | "LegacyPerspectiveBottom" | "LegacyPerspectiveBottomRight" | "OrthographicFront" | "IsometricTopUp" | "IsometricTopDown" | "IsometricBottomUp" | "IsometricBottomDown" | "IsometricLeftUp" | "IsometricLeftDown" | "IsometricRightUp" | "IsometricRightDown" | "IsometricOffAxis1Left" | "IsometricOffAxis1Right" | "IsometricOffAxis1Top" | "IsometricOffAxis2Left" | "IsometricOffAxis2Right" | "IsometricOffAxis2Top" | "IsometricOffAxis3Left" | "IsometricOffAxis3Right" | "IsometricOffAxis3Bottom" | "IsometricOffAxis4Left" | "IsometricOffAxis4Right" | "IsometricOffAxis4Bottom" | "ObliqueTopLeft" | "ObliqueTop" | "ObliqueTopRight" | "ObliqueLeft" | "ObliqueRight" | "ObliqueBottomLeft" | "ObliqueBottom" | "ObliqueBottomRight" | "PerspectiveFront" | "PerspectiveLeft" | "PerspectiveRight" | "PerspectiveAbove" | "PerspectiveBelow" | "PerspectiveAboveLeftFacing" | "PerspectiveAboveRightFacing" | "PerspectiveContrastingLeftFacing" | "PerspectiveContrastingRightFacing" | "PerspectiveHeroicLeftFacing" | "PerspectiveHeroicRightFacing" | "PerspectiveHeroicExtremeLeftFacing" | "PerspectiveHeroicExtremeRightFacing" | "PerspectiveRelaxed" | "PerspectiveRelaxedModerately"): void;
        /**
         * Sets the preset extrusion format.
                    The preset format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setThreeDimensionalFormat(presetThreeDimensionalFormat: Word.PresetThreeDimensionalFormat): void;
        /**
         * Sets the preset extrusion format.
                    The preset format.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setThreeDimensionalFormat(presetThreeDimensionalFormat: "Mixed" | "Format1" | "Format2" | "Format3" | "Format4" | "Format5" | "Format6" | "Format7" | "Format8" | "Format9" | "Format10" | "Format11" | "Format12" | "Format13" | "Format14" | "Format15" | "Format16" | "Format17" | "Format18" | "Format19" | "Format20"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ThreeDimensionalFormatLoadOptions): Word.ThreeDimensionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ThreeDimensionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ThreeDimensionalFormat;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ThreeDimensionalFormat;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ThreeDimensionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ThreeDimensionalFormat` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ThreeDimensionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ThreeDimensionalFormatData;
    }
    /**
     * Specifies the length of the arrowhead at the end of a line.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ArrowheadLength {
        /**
         * Represents a mixed arrowhead length.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a short arrowhead length.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        short = "Short",
        /**
         * Represents a medium arrowhead length.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        medium = "Medium",
        /**
         * Represents a long arrowhead length.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        long = "Long",
    }
    /**
     * Specifies the style of the arrowhead at the end of a line.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ArrowheadStyle {
        /**
         * Represents a mixed arrowhead style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents no arrowhead.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "None",
        /**
         * Represents a triangle arrowhead style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        triangle = "Triangle",
        /**
         * Represents an open arrowhead style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        open = "Open",
        /**
         * Represents a stealth arrowhead style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        stealth = "Stealth",
        /**
         * Represents a diamond arrowhead style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        diamond = "Diamond",
        /**
         * Represents an oval arrowhead style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        oval = "Oval",
    }
    /**
     * Specifies the width of the arrowhead at the end of a line.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ArrowheadWidth {
        /**
         * Represents a mixed arrowhead width.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a narrow arrowhead width.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        narrow = "Narrow",
        /**
         * Represents a medium arrowhead width.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        medium = "Medium",
        /**
         * Represents a wide arrowhead width.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        wide = "Wide",
    }
    /**
     * Indicates the bevel type of a {@link Word.ThreeDimensionalFormat} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum BevelType {
        /**
         * Represents a mixed bevel type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "mixed",
        /**
         * Represents no bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "none",
        /**
         * Represents a relaxed inset bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        relaxedInset = "relaxedInset",
        /**
         * Represents a circle bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        circle = "circle",
        /**
         * Represents a slope bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        slope = "slope",
        /**
         * Represents a cross bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cross = "cross",
        /**
         * Represents an angle bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        angle = "angle",
        /**
         * Represents a soft round bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        softRound = "softRound",
        /**
         * Represents a convex bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        convex = "convex",
        /**
         * Represents a cool slant bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        coolSlant = "coolSlant",
        /**
         * Represents a divot bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        divot = "divot",
        /**
         * Represents a riblet bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        riblet = "riblet",
        /**
         * Represents a hard edge bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hardEdge = "hardEdge",
        /**
         * Represents an art deco bevel.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        artDeco = "artDeco",
    }
    /**
     * Represents color index values in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ColorIndex {
        /**
         * Automatically determines the color.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        auto = "Auto",
        /**
         * Represents the color black.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        black = "Black",
        /**
         * Represents the color blue.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        blue = "Blue",
        /**
         * Represents the color turquoise.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        turquoise = "Turquoise",
        /**
         * Represents a bright green color.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        brightGreen = "BrightGreen",
        /**
         * Represents the color pink.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pink = "Pink",
        /**
         * Represents the color red.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        red = "Red",
        /**
         * Represents the color yellow.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        yellow = "Yellow",
        /**
         * Represents the color white.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        white = "White",
        /**
         * Represents a dark blue color.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        darkBlue = "DarkBlue",
        /**
         * Represents the color teal.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        teal = "Teal",
        /**
         * Represents the color green.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        green = "Green",
        /**
         * Represents the color violet.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        violet = "Violet",
        /**
         * Represents a dark red color.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        darkRed = "DarkRed",
        /**
         * Represents a dark yellow color.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        darkYellow = "DarkYellow",
        /**
         * Represents a gray color with 50% intensity.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gray50 = "Gray50",
        /**
         * Represents a gray color with 25% intensity.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gray25 = "Gray25",
        /**
         * Represents a classic red color.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        classicRed = "ClassicRed",
        /**
         * Represents a classic blue color.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        classicBlue = "ClassicBlue",
        /**
         * Represents a color determined by the author.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        byAuthor = "ByAuthor",
    }
    /**
     * Specifies the color type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ColorType {
        /**
         * Represents an RGB color type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rgb = "rgb",
        /**
         * Represents a scheme color type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        scheme = "scheme",
    }
    /**
     * Specifies whether the formatting from the previous list can be continued.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum Continue {
        /**
         * Formatting cannot continue from the previous list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        disabled = "Disabled",
        /**
         * Formatting can continue from the previous list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        list = "List",
        /**
         * Numbering can be restarted.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        reset = "Reset",
    }
    /**
     * Specifies the default list behavior for a list.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum DefaultListBehavior {
        /**
         * Use formatting compatible with Microsoft Word 97.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        word97 = "Word97",
        /**
         * Use Web-oriented formatting as introduced in Microsoft Word 2000.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        word2000 = "Word2000",
        /**
         * Use formatting compatible with Microsoft Word 2002.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        word2002 = "Word2002",
    }
    /**
     * Specifies the type of emphasis mark to use for a character or designated character string.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum EmphasisMark {
        /**
         * No emphasis mark.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "None",
        /**
         * Emphasis mark over a solid circle.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        overSolidCircle = "OverSolidCircle",
        /**
         * Emphasis mark over a comma.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        overComma = "OverComma",
        /**
         * Emphasis mark over a white circle.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        overWhiteCircle = "OverWhiteCircle",
        /**
         * Emphasis mark under a solid circle.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        underSolidCircle = "UnderSolidCircle",
    }
    /**
     * Specifies whether the extrusion color is based on the extruded shape's fill (the front face of the extrusion)
                and automatically changes when the shape's fill changes, or whether the extrusion color is independent of the shape's fill.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ExtrusionColorType {
        /**
         * Represents a mixed extrusion color type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "mixed",
        /**
         * Represents an automatic extrusion color based on the shape's fill.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        automatic = "automatic",
        /**
         * Represents a custom extrusion color independent of the shape's fill.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        custom = "custom",
    }
    /**
     * Specifies a shape's fill type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum FillType {
        /**
         * Represents a mixed fill type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a solid fill type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        solid = "Solid",
        /**
         * Represents a patterned fill type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        patterned = "Patterned",
        /**
         * Represents a gradient fill type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gradient = "Gradient",
        /**
         * Represents a textured fill type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        textured = "Textured",
        /**
         * Represents a background fill type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        background = "Background",
        /**
         * Represents a picture fill type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        picture = "Picture",
    }
    /**
     * Specifies the type of gradient used in a shape's fill.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum GradientColorType {
        /**
         * Mixed gradient color type. Used when multiple shapes with different gradient types are selected.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Gradient with a single color and varying transparency or brightness.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        oneColor = "OneColor",
        /**
         * Gradient that blends two distinct colors.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        twoColors = "TwoColors",
        /**
         * Gradient that uses a predefined set of colors.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        presetColors = "PresetColors",
        /**
         * Gradient that includes more than two colors, often customized.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        multiColor = "MultiColor",
    }
    /**
     * Specifies the style for a gradient fill.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum GradientStyle {
        /**
         * Represents a mixed gradient style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a horizontal gradient style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        horizontal = "Horizontal",
        /**
         * Represents a vertical gradient style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        vertical = "Vertical",
        /**
         * Represents a diagonal-up gradient style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        diagonalUp = "DiagonalUp",
        /**
         * Represents a diagonal-down gradient style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        diagonalDown = "DiagonalDown",
        /**
         * Represents a gradient style from the corner.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fromCorner = "FromCorner",
        /**
         * Represents a gradient style from the title.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fromTitle = "FromTitle",
        /**
         * Represents a gradient style from the center.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fromCenter = "FromCenter",
    }
    /**
     * Specifies the type of ligature applied to a font.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum Ligature {
        /**
         * No ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "None",
        /**
         * Standard ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        standard = "Standard",
        /**
         * Contextual ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        contextual = "Contextual",
        /**
         * Standard and contextual ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        standardContextual = "StandardContextual",
        /**
         * Historical ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        historical = "Historical",
        /**
         * Standard and historical ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        standardHistorical = "StandardHistorical",
        /**
         * Contextual and historical ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        contextualHistorical = "ContextualHistorical",
        /**
         * Standard, contextual, and historical ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        standardContextualHistorical = "StandardContextualHistorical",
        /**
         * Discretional ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        discretional = "Discretional",
        /**
         * Standard and discretional ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        standardDiscretional = "StandardDiscretional",
        /**
         * Contextual and discretional ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        contextualDiscretional = "ContextualDiscretional",
        /**
         * Standard, contextual, and discretional ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        standardContextualDiscretional = "StandardContextualDiscretional",
        /**
         * Historical and discretional ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        historicalDiscretional = "HistoricalDiscretional",
        /**
         * Standard, historical, and discretional ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        standardHistoricalDiscretional = "StandardHistoricalDiscretional",
        /**
         * Contextual, historical, and discretional ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        contextualHistoricalDiscretional = "ContextualHistoricalDiscretional",
        /**
         * All ligatures applied.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        all = "All",
    }
    /**
     * Indicates the effects lighting for an object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum LightRigType {
        /**
         * Represents a mixed light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents legacy flat light rig type 1.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyFlat1 = "LegacyFlat1",
        /**
         * Represents legacy flat light rig type 2.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyFlat2 = "LegacyFlat2",
        /**
         * Represents legacy flat light rig type 3.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyFlat3 = "LegacyFlat3",
        /**
         * Represents legacy flat light rig type 4.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyFlat4 = "LegacyFlat4",
        /**
         * Represents legacy normal light rig type 1.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyNormal1 = "LegacyNormal1",
        /**
         * Represents legacy normal light rig type 2.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyNormal2 = "LegacyNormal2",
        /**
         * Represents legacy normal light rig type 3.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyNormal3 = "LegacyNormal3",
        /**
         * Represents legacy normal light rig type 4.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyNormal4 = "LegacyNormal4",
        /**
         * Represents legacy harsh light rig type 1.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyHarsh1 = "LegacyHarsh1",
        /**
         * Represents legacy harsh light rig type 2.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyHarsh2 = "LegacyHarsh2",
        /**
         * Represents legacy harsh light rig type 3.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyHarsh3 = "LegacyHarsh3",
        /**
         * Represents legacy harsh light rig type 4.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyHarsh4 = "LegacyHarsh4",
        /**
         * Represents a three-point light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        threePoint = "ThreePoint",
        /**
         * Represents a balanced light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        balanced = "Balanced",
        /**
         * Represents a soft light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        soft = "Soft",
        /**
         * Represents a harsh light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        harsh = "Harsh",
        /**
         * Represents a flood light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flood = "Flood",
        /**
         * Represents a contrasting light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        contrasting = "Contrasting",
        /**
         * Represents a morning light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        morning = "Morning",
        /**
         * Represents a sunrise light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sunrise = "Sunrise",
        /**
         * Represents a sunset light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sunset = "Sunset",
        /**
         * Represents a chilly light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        chilly = "Chilly",
        /**
         * Represents a freezing light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        freezing = "Freezing",
        /**
         * Represents a flat light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flat = "Flat",
        /**
         * Represents a two-point light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        twoPoint = "TwoPoint",
        /**
         * Represents a glow light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        glow = "Glow",
        /**
         * Represents a bright room light rig type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        brightRoom = "BrightRoom",
    }
    /**
     * Specifies the dash style for a line.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum LineDashStyle {
        /**
         * Represents a mixed dash style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a solid line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        solid = "Solid",
        /**
         * Represents a square dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        squareDot = "SquareDot",
        /**
         * Represents a round dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        roundDot = "RoundDot",
        /**
         * Represents a dashed line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dash = "Dash",
        /**
         * Represents a dash-dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashDot = "DashDot",
        /**
         * Represents a dash-dot-dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashDotDot = "DashDotDot",
        /**
         * Represents a long dash line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        longDash = "LongDash",
        /**
         * Represents a long dash-dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        longDashDot = "LongDashDot",
        /**
         * Represents a long dash-dot-dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        longDashDotDot = "LongDashDotDot",
        /**
         * Represents a system dash line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sysDash = "SysDash",
        /**
         * Represents a system dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sysDot = "SysDot",
        /**
         * Represents a system dash-dot line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sysDashDot = "SysDashDot",
    }
    /**
     * Specifies the style for a line.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum LineFormatStyle {
        /**
         * Represents a mixed line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a single line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        single = "Single",
        /**
         * Represents a thin-thin line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thinThin = "ThinThin",
        /**
         * Represents a thin-thick line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thinThick = "ThinThick",
        /**
         * Represents a thick-thin line style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thickThin = "ThickThin",
        /**
         * Represents a thick line between two thin lines style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thickBetweenThin = "ThickBetweenThin",
    }
    /**
     * Specifies the portion of a list to which to apply a list template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ListApplyTo {
        /**
         * Applies the list template to the entire list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        wholeList = "WholeList",
        /**
         * Applies the list template from the cursor insertion point to the end of the list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        thisPointForward = "ThisPointForward",
        /**
         * Applies the list template to the selection.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        selection = "Selection",
    }
    /**
     * Represents the list type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ListType {
        /**
         * List with no bullets, numbering, or outlining.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listNoNumbering = "ListNoNumbering",
        /**
         * ListNum fields that can be used in the body of a paragraph.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listListNumOnly = "ListListNumOnly",
        /**
         * Bulleted list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listBullet = "ListBullet",
        /**
         * Simple numeric list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listSimpleNumbering = "ListSimpleNumbering",
        /**
         * Outlined list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listOutlineNumbering = "ListOutlineNumbering",
        /**
         * Mixed numeric list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listMixedNumbering = "ListMixedNumbering",
        /**
         * Picture bulleted list.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listPictureBullet = "ListPictureBullet",
    }
    /**
     * Specifies the number form setting for an OpenType font.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum NumberForm {
        /**
         * Default number form setting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        default = "Default",
        /**
         * Lining number form setting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lining = "Lining",
        /**
         * Old-style number form setting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        oldStyle = "OldStyle",
    }
    /**
     * Specifies the number spacing setting for an OpenType font.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum NumberSpacing {
        /**
         * Default number spacing setting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        default = "Default",
        /**
         * Proportional number spacing setting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        proportional = "Proportional",
        /**
         * Tabular number spacing setting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tabular = "Tabular",
    }
    /**
     * Specifies the type of numbers in a list.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum NumberType {
        /**
         * Preset numbers you can add to paragraphs by selecting a template in the **Bullets and Numbering** dialog box.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        paragraph = "Paragraph",
        /**
         * Default value for {@link https://support.microsoft.com/office/557541b1-abb2-4959-a9f2-401639c8ff82 | ListNum fields}.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        listNum = "ListNum",
        /**
         * Default value for all other cases.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        allNumbers = "AllNumbers",
    }
    /**
     * Specifies the fill pattern used in a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PatternType {
        /**
         * Represents a mixed pattern type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a 5 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent5 = "Percent5",
        /**
         * Represents a 10 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent10 = "Percent10",
        /**
         * Represents a 20 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent20 = "Percent20",
        /**
         * Represents a 25 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent25 = "Percent25",
        /**
         * Represents a 30 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent30 = "Percent30",
        /**
         * Represents a 40 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent40 = "Percent40",
        /**
         * Represents a 50 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent50 = "Percent50",
        /**
         * Represents a 60 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent60 = "Percent60",
        /**
         * Represents a 70 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent70 = "Percent70",
        /**
         * Represents a 75 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent75 = "Percent75",
        /**
         * Represents an 80 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent80 = "Percent80",
        /**
         * Represents a 90 percent fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        percent90 = "Percent90",
        /**
         * Represents a dark horizontal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        darkHorizontal = "DarkHorizontal",
        /**
         * Represents a dark vertical fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        darkVertical = "DarkVertical",
        /**
         * Represents a dark downward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        darkDownwardDiagonal = "DarkDownwardDiagonal",
        /**
         * Represents a dark upward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        darkUpwardDiagonal = "DarkUpwardDiagonal",
        /**
         * Represents a small checkerboard fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        smallCheckerBoard = "SmallCheckerBoard",
        /**
         * Represents a trellis fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        trellis = "Trellis",
        /**
         * Represents a light horizontal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lightHorizontal = "LightHorizontal",
        /**
         * Represents a light vertical fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lightVertical = "LightVertical",
        /**
         * Represents a light downward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lightDownwardDiagonal = "LightDownwardDiagonal",
        /**
         * Represents a light upward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lightUpwardDiagonal = "LightUpwardDiagonal",
        /**
         * Represents a small grid fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        smallGrid = "SmallGrid",
        /**
         * Represents a dotted diamond fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dottedDiamond = "DottedDiamond",
        /**
         * Represents a wide downward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        wideDownwardDiagonal = "WideDownwardDiagonal",
        /**
         * Represents a wide upward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        wideUpwardDiagonal = "WideUpwardDiagonal",
        /**
         * Represents a dashed upward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashedUpwardDiagonal = "DashedUpwardDiagonal",
        /**
         * Represents a dashed downward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashedDownwardDiagonal = "DashedDownwardDiagonal",
        /**
         * Represents a narrow vertical fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        narrowVertical = "NarrowVertical",
        /**
         * Represents a narrow horizontal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        narrowHorizontal = "NarrowHorizontal",
        /**
         * Represents a dashed vertical fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashedVertical = "DashedVertical",
        /**
         * Represents a dashed horizontal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dashedHorizontal = "DashedHorizontal",
        /**
         * Represents a large confetti fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        largeConfetti = "LargeConfetti",
        /**
         * Represents a large grid fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        largeGrid = "LargeGrid",
        /**
         * Represents a horizontal brick fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        horizontalBrick = "HorizontalBrick",
        /**
         * Represents a large checkerboard fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        largeCheckerBoard = "LargeCheckerBoard",
        /**
         * Represents a small confetti fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        smallConfetti = "SmallConfetti",
        /**
         * Represents a zigzag fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        zigZag = "ZigZag",
        /**
         * Represents a solid diamond fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        solidDiamond = "SolidDiamond",
        /**
         * Represents a diagonal brick fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        diagonalBrick = "DiagonalBrick",
        /**
         * Represents an outlined diamond fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        outlinedDiamond = "OutlinedDiamond",
        /**
         * Represents a plaid fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        plaid = "Plaid",
        /**
         * Represents a sphere fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sphere = "Sphere",
        /**
         * Represents a weave fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        weave = "Weave",
        /**
         * Represents a dotted grid fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dottedGrid = "DottedGrid",
        /**
         * Represents a divot fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        divot = "Divot",
        /**
         * Represents a shingle fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        shingle = "Shingle",
        /**
         * Represents a wave fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        wave = "Wave",
        /**
         * Represents a horizontal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        horizontal = "Horizontal",
        /**
         * Represents a vertical fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        vertical = "Vertical",
        /**
         * Represents a cross fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cross = "Cross",
        /**
         * Represents a downward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        downwardDiagonal = "DownwardDiagonal",
        /**
         * Represents an upward diagonal fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        upwardDiagonal = "UpwardDiagonal",
        /**
         * Represents a diagonal cross fill pattern.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        diagonalCross = "DiagonalCross",
    }
    /**
     * Indicates the effects camera type used by the specified object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PresetCamera {
        /**
         * Represents a mixed camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a legacy oblique top-left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueTopLeft = "LegacyObliqueTopLeft",
        /**
         * Represents a legacy oblique top camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueTop = "LegacyObliqueTop",
        /**
         * Represents a legacy oblique top-right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueTopRight = "LegacyObliqueTopRight",
        /**
         * Represents a legacy oblique left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueLeft = "LegacyObliqueLeft",
        /**
         * Represents a legacy oblique front camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueFront = "LegacyObliqueFront",
        /**
         * Represents a legacy oblique right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueRight = "LegacyObliqueRight",
        /**
         * Represents a legacy oblique bottom-left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueBottomLeft = "LegacyObliqueBottomLeft",
        /**
         * Represents a legacy oblique bottom camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueBottom = "LegacyObliqueBottom",
        /**
         * Represents a legacy oblique bottom-right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyObliqueBottomRight = "LegacyObliqueBottomRight",
        /**
         * Represents a legacy perspective top-left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveTopLeft = "LegacyPerspectiveTopLeft",
        /**
         * Represents a legacy perspective top camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveTop = "LegacyPerspectiveTop",
        /**
         * Represents a legacy perspective top-right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveTopRight = "LegacyPerspectiveTopRight",
        /**
         * Represents a legacy perspective left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveLeft = "LegacyPerspectiveLeft",
        /**
         * Represents a legacy perspective front camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveFront = "LegacyPerspectiveFront",
        /**
         * Represents a legacy perspective right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveRight = "LegacyPerspectiveRight",
        /**
         * Represents a legacy perspective bottom-left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveBottomLeft = "LegacyPerspectiveBottomLeft",
        /**
         * Represents a legacy perspective bottom camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveBottom = "LegacyPerspectiveBottom",
        /**
         * Represents a legacy perspective bottom-right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legacyPerspectiveBottomRight = "LegacyPerspectiveBottomRight",
        /**
         * Represents an orthographic front camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        orthographicFront = "OrthographicFront",
        /**
         * Represents an isometric top-up camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricTopUp = "IsometricTopUp",
        /**
         * Represents an isometric top-down camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricTopDown = "IsometricTopDown",
        /**
         * Represents an isometric bottom-up camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricBottomUp = "IsometricBottomUp",
        /**
         * Represents an isometric bottom-down camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricBottomDown = "IsometricBottomDown",
        /**
         * Represents an isometric left-up camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricLeftUp = "IsometricLeftUp",
        /**
         * Represents an isometric left-down camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricLeftDown = "IsometricLeftDown",
        /**
         * Represents an isometric right-up camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricRightUp = "IsometricRightUp",
        /**
         * Represents an isometric right-down camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricRightDown = "IsometricRightDown",
        /**
         * Represents an isometric off-axis 1 left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis1Left = "IsometricOffAxis1Left",
        /**
         * Represents an isometric off-axis 1 right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis1Right = "IsometricOffAxis1Right",
        /**
         * Represents an isometric off-axis 1 top camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis1Top = "IsometricOffAxis1Top",
        /**
         * Represents an isometric off-axis 2 left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis2Left = "IsometricOffAxis2Left",
        /**
         * Represents an isometric off-axis 2 right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis2Right = "IsometricOffAxis2Right",
        /**
         * Represents an isometric off-axis 2 top camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis2Top = "IsometricOffAxis2Top",
        /**
         * Represents an isometric off-axis 3 left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis3Left = "IsometricOffAxis3Left",
        /**
         * Represents an isometric off-axis 3 right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis3Right = "IsometricOffAxis3Right",
        /**
         * Represents an isometric off-axis 3 bottom camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis3Bottom = "IsometricOffAxis3Bottom",
        /**
         * Represents an isometric off-axis 4 left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis4Left = "IsometricOffAxis4Left",
        /**
         * Represents an isometric off-axis 4 right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis4Right = "IsometricOffAxis4Right",
        /**
         * Represents an isometric off-axis 4 bottom camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isometricOffAxis4Bottom = "IsometricOffAxis4Bottom",
        /**
         * Represents an oblique top-left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obliqueTopLeft = "ObliqueTopLeft",
        /**
         * Represents an oblique top camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obliqueTop = "ObliqueTop",
        /**
         * Represents an oblique top-right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obliqueTopRight = "ObliqueTopRight",
        /**
         * Represents an oblique left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obliqueLeft = "ObliqueLeft",
        /**
         * Represents an oblique right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obliqueRight = "ObliqueRight",
        /**
         * Represents an oblique bottom-left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obliqueBottomLeft = "ObliqueBottomLeft",
        /**
         * Represents an oblique bottom camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obliqueBottom = "ObliqueBottom",
        /**
         * Represents an oblique bottom-right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        obliqueBottomRight = "ObliqueBottomRight",
        /**
         * Represents a perspective front camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveFront = "PerspectiveFront",
        /**
         * Represents a perspective left camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveLeft = "PerspectiveLeft",
        /**
         * Represents a perspective right camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveRight = "PerspectiveRight",
        /**
         * Represents a perspective above camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveAbove = "PerspectiveAbove",
        /**
         * Represents a perspective below camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveBelow = "PerspectiveBelow",
        /**
         * Represents a perspective above-left facing camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveAboveLeftFacing = "PerspectiveAboveLeftFacing",
        /**
         * Represents a perspective above-right facing camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveAboveRightFacing = "PerspectiveAboveRightFacing",
        /**
         * Represents a perspective contrasting-left facing camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveContrastingLeftFacing = "PerspectiveContrastingLeftFacing",
        /**
         * Represents a perspective contrasting-right facing camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveContrastingRightFacing = "PerspectiveContrastingRightFacing",
        /**
         * Represents a perspective heroic-left facing camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveHeroicLeftFacing = "PerspectiveHeroicLeftFacing",
        /**
         * Represents a perspective heroic-right facing camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveHeroicRightFacing = "PerspectiveHeroicRightFacing",
        /**
         * Represents a perspective heroic-extreme left facing camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveHeroicExtremeLeftFacing = "PerspectiveHeroicExtremeLeftFacing",
        /**
         * Represents a perspective heroic-extreme right facing camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveHeroicExtremeRightFacing = "PerspectiveHeroicExtremeRightFacing",
        /**
         * Represents a relaxed perspective camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveRelaxed = "PerspectiveRelaxed",
        /**
         * Represents a moderately relaxed perspective camera type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        perspectiveRelaxedModerately = "PerspectiveRelaxedModerately",
    }
    /**
     * Specifies the direction that the extrusion's sweep path takes away from the extruded shape (the front face of the extrusion).
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PresetExtrusionDirection {
        /**
         * Represents a mixed extrusion direction.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents an extrusion direction to the bottom-right.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottomRight = "BottomRight",
        /**
         * Represents an extrusion direction to the bottom.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottom = "Bottom",
        /**
         * Represents an extrusion direction to the bottom-left.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottomLeft = "BottomLeft",
        /**
         * Represents an extrusion direction to the right.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        right = "Right",
        /**
         * Represents no extrusion direction.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "None",
        /**
         * Represents an extrusion direction to the left.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        left = "Left",
        /**
         * Represents an extrusion direction to the top-right.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        topRight = "TopRight",
        /**
         * Represents an extrusion direction to the top.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        top = "Top",
        /**
         * Represents an extrusion direction to the top-left.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        topLeft = "TopLeft",
    }
    /**
     * Specifies which predefined gradient to use to fill a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PresetGradientType {
        /**
         * Mixed gradient type. Used when multiple shapes with different preset gradients are selected.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * A warm gradient resembling an early sunset.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        earlySunset = "EarlySunset",
        /**
         * A deeper, richer gradient resembling a late sunset.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lateSunset = "LateSunset",
        /**
         * A dark gradient evoking the colors of nightfall.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        nightfall = "Nightfall",
        /**
         * A light gradient representing the colors of daybreak.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        daybreak = "Daybreak",
        /**
         * A gradient that mimics the colors of the horizon.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        horizon = "Horizon",
        /**
         * A warm, sandy gradient inspired by desert tones.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        desert = "Desert",
        /**
         * A cool gradient reflecting ocean hues.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        ocean = "Ocean",
        /**
         * A soft, tranquil gradient resembling calm water.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        calmWater = "CalmWater",
        /**
         * A vivid gradient with fiery tones.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fire = "Fire",
        /**
         * A muted gradient with fog-like softness.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fog = "Fog",
        /**
         * A natural green gradient inspired by moss.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        moss = "Moss",
        /**
         * A vibrant gradient with peacock feather colors.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        peacock = "Peacock",
        /**
         * A light, golden gradient resembling wheat.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        wheat = "Wheat",
        /**
         * A warm, aged paper-like gradient.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        parchment = "Parchment",
        /**
         * A rich, reddish-brown gradient like mahogany wood.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mahogany = "Mahogany",
        /**
         * A colorful gradient resembling a rainbow.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rainbow = "Rainbow",
        /**
         * A variation of the rainbow gradient with different color emphasis.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rainbowII = "RainbowII",
        /**
         * A shiny, metallic gold gradient.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gold = "Gold",
        /**
         * A variation of the gold gradient with different tones.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        goldII = "GoldII",
        /**
         * A metallic gradient resembling brass.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        brass = "Brass",
        /**
         * A sleek, reflective chrome gradient.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        chrome = "Chrome",
        /**
         * A variation of the chrome gradient with alternate highlights.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        chromeII = "ChromeII",
        /**
         * A smooth, metallic silver gradient.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        silver = "Silver",
        /**
         * A deep blue gradient inspired by sapphire.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sapphire = "Sapphire",
    }
    /**
     * Specifies the location of lighting on an extruded (three-dimensional) shape relative to the shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PresetLightingDirection {
        /**
         * Represents a mixed lighting direction.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents lighting from the top-left.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        topLeft = "TopLeft",
        /**
         * Represents lighting from the top.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        top = "Top",
        /**
         * Represents lighting from the top-right.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        topRight = "TopRight",
        /**
         * Represents lighting from the left.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        left = "Left",
        /**
         * Represents no lighting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "None",
        /**
         * Represents lighting from the right.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        right = "Right",
        /**
         * Represents lighting from the bottom-left.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottomLeft = "BottomLeft",
        /**
         * Represents lighting from the bottom.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottom = "Bottom",
        /**
         * Represents lighting from the bottom-right.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottomRight = "BottomRight",
    }
    /**
     * Specifies the intensity of light used on a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PresetLightingSoftness {
        /**
         * Represents a mixed lighting softness.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents dim lighting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dim = "Dim",
        /**
         * Represents normal lighting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        normal = "Normal",
        /**
         * Represents bright lighting.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bright = "Bright",
    }
    /**
     * Specifies the extrusion surface material.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PresetMaterial {
        /**
         * Represents a mixed material type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a matte material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        matte = "Matte",
        /**
         * Represents a plastic material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        plastic = "Plastic",
        /**
         * Represents a metal material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        metal = "Metal",
        /**
         * Represents a wireframe material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        wireFrame = "WireFrame",
        /**
         * Represents a second matte material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        matte2 = "Matte2",
        /**
         * Represents a second plastic material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        plastic2 = "Plastic2",
        /**
         * Represents a second metal material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        metal2 = "Metal2",
        /**
         * Represents a warm matte material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        warmMatte = "WarmMatte",
        /**
         * Represents a translucent powder material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        translucentPowder = "TranslucentPowder",
        /**
         * Represents a powder material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        powder = "Powder",
        /**
         * Represents a dark edge material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        darkEdge = "DarkEdge",
        /**
         * Represents a soft edge material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        softEdge = "SoftEdge",
        /**
         * Represents a clear material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        clear = "Clear",
        /**
         * Represents a flat material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        flat = "Flat",
        /**
         * Represents a soft metal material.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        softMetal = "SoftMetal",
    }
    /**
     * Specifies texture to be used to fill a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PresetTexture {
        /**
         * Represents a mixed texture type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents a papyrus texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        papyrus = "Papyrus",
        /**
         * Represents a canvas texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        canvas = "Canvas",
        /**
         * Represents a denim texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        denim = "Denim",
        /**
         * Represents a woven mat texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        wovenMat = "WovenMat",
        /**
         * Represents a water droplets texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        waterDroplets = "WaterDroplets",
        /**
         * Represents a paper bag texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        paperBag = "PaperBag",
        /**
         * Represents a fish fossil texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fishFossil = "FishFossil",
        /**
         * Represents a sand texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sand = "Sand",
        /**
         * Represents a green marble texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        greenMarble = "GreenMarble",
        /**
         * Represents a white marble texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        whiteMarble = "WhiteMarble",
        /**
         * Represents a brown marble texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        brownMarble = "BrownMarble",
        /**
         * Represents a granite texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        granite = "Granite",
        /**
         * Represents a newsprint texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        newsprint = "Newsprint",
        /**
         * Represents a recycled paper texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        recycledPaper = "RecycledPaper",
        /**
         * Represents a parchment texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        parchment = "Parchment",
        /**
         * Represents a stationery texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        stationery = "Stationery",
        /**
         * Represents a blue tissue paper texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        blueTissuePaper = "BlueTissuePaper",
        /**
         * Represents a pink tissue paper texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pinkTissuePaper = "PinkTissuePaper",
        /**
         * Represents a purple mesh texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        purpleMesh = "PurpleMesh",
        /**
         * Represents a bouquet texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bouquet = "Bouquet",
        /**
         * Represents a cork texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        cork = "Cork",
        /**
         * Represents a walnut texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        walnut = "Walnut",
        /**
         * Represents an oak texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        oak = "Oak",
        /**
         * Represents a medium wood texture.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mediumWood = "MediumWood",
    }
    /**
     * Specifies an extrusion (three-dimensional) format.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PresetThreeDimensionalFormat {
        /**
         * Represents a mixed three-dimensional format.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents three-dimensional format 1.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format1 = "Format1",
        /**
         * Represents three-dimensional format 2.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format2 = "Format2",
        /**
         * Represents three-dimensional format 3.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format3 = "Format3",
        /**
         * Represents three-dimensional format 4.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format4 = "Format4",
        /**
         * Represents three-dimensional format 5.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format5 = "Format5",
        /**
         * Represents three-dimensional format 6.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format6 = "Format6",
        /**
         * Represents three-dimensional format 7.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format7 = "Format7",
        /**
         * Represents three-dimensional format 8.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format8 = "Format8",
        /**
         * Represents three-dimensional format 9.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format9 = "Format9",
        /**
         * Represents three-dimensional format 10.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format10 = "Format10",
        /**
         * Represents three-dimensional format 11.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format11 = "Format11",
        /**
         * Represents three-dimensional format 12.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format12 = "Format12",
        /**
         * Represents three-dimensional format 13.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format13 = "Format13",
        /**
         * Represents three-dimensional format 14.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format14 = "Format14",
        /**
         * Represents three-dimensional format 15.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format15 = "Format15",
        /**
         * Represents three-dimensional format 16.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format16 = "Format16",
        /**
         * Represents three-dimensional format 17.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format17 = "Format17",
        /**
         * Represents three-dimensional format 18.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format18 = "Format18",
        /**
         * Represents three-dimensional format 19.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format19 = "Format19",
        /**
         * Represents three-dimensional format 20.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        format20 = "Format20",
    }
    /**
     * Specifies the type of the {@link Word.ReflectionFormat} object.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ReflectionType {
        /**
         * Represents a mixed reflection type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents no reflection.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        none = "None",
        /**
         * Represents reflection type 1.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type1 = "Type1",
        /**
         * Represents reflection type 2.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type2 = "Type2",
        /**
         * Represents reflection type 3.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type3 = "Type3",
        /**
         * Represents reflection type 4.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type4 = "Type4",
        /**
         * Represents reflection type 5.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type5 = "Type5",
        /**
         * Represents reflection type 6.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type6 = "Type6",
        /**
         * Represents reflection type 7.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type7 = "Type7",
        /**
         * Represents reflection type 8.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type8 = "Type8",
        /**
         * Represents reflection type 9.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type9 = "Type9",
    }
    /**
     * Specifies the type of shadowing effect.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ShadowStyle {
        /**
         * Represents a mixed shadow style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents an outer shadow style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        outerShadow = "OuterShadow",
        /**
         * Represents an inner shadow style.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        innerShadow = "InnerShadow",
    }
    /**
     * Specifies the type of shadow displayed with a shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ShadowType {
        /**
         * Represents a mixed shadow type.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Represents shadow type 1.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type1 = "Type1",
        /**
         * Represents shadow type 2.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type2 = "Type2",
        /**
         * Represents shadow type 3.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type3 = "Type3",
        /**
         * Represents shadow type 4.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type4 = "Type4",
        /**
         * Represents shadow type 5.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type5 = "Type5",
        /**
         * Represents shadow type 6.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type6 = "Type6",
        /**
         * Represents shadow type 7.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type7 = "Type7",
        /**
         * Represents shadow type 8.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type8 = "Type8",
        /**
         * Represents shadow type 9.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type9 = "Type9",
        /**
         * Represents shadow type 10.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type10 = "Type10",
        /**
         * Represents shadow type 11.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type11 = "Type11",
        /**
         * Represents shadow type 12.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type12 = "Type12",
        /**
         * Represents shadow type 13.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type13 = "Type13",
        /**
         * Represents shadow type 14.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type14 = "Type14",
        /**
         * Represents shadow type 15.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type15 = "Type15",
        /**
         * Represents shadow type 16.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type16 = "Type16",
        /**
         * Represents shadow type 17.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type17 = "Type17",
        /**
         * Represents shadow type 18.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type18 = "Type18",
        /**
         * Represents shadow type 19.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type19 = "Type19",
        /**
         * Represents shadow type 20.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type20 = "Type20",
        /**
         * Represents shadow type 21.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type21 = "Type21",
        /**
         * Represents shadow type 22.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type22 = "Type22",
        /**
         * Represents shadow type 23.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type23 = "Type23",
        /**
         * Represents shadow type 24.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type24 = "Type24",
        /**
         * Represents shadow type 25.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type25 = "Type25",
        /**
         * Represents shadow type 26.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type26 = "Type26",
        /**
         * Represents shadow type 27.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type27 = "Type27",
        /**
         * Represents shadow type 28.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type28 = "Type28",
        /**
         * Represents shadow type 29.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type29 = "Type29",
        /**
         * Represents shadow type 30.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type30 = "Type30",
        /**
         * Represents shadow type 31.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type31 = "Type31",
        /**
         * Represents shadow type 32.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type32 = "Type32",
        /**
         * Represents shadow type 33.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type33 = "Type33",
        /**
         * Represents shadow type 34.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type34 = "Type34",
        /**
         * Represents shadow type 35.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type35 = "Type35",
        /**
         * Represents shadow type 36.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type36 = "Type36",
        /**
         * Represents shadow type 37.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type37 = "Type37",
        /**
         * Represents shadow type 38.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type38 = "Type38",
        /**
         * Represents shadow type 39.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type39 = "Type39",
        /**
         * Represents shadow type 40.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type40 = "Type40",
        /**
         * Represents shadow type 41.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type41 = "Type41",
        /**
         * Represents shadow type 42.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type42 = "Type42",
        /**
         * Represents shadow type 43.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        type43 = "Type43",
    }
    /**
     * Specifies the stylistic set to apply to the font.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum StylisticSet {
        /**
         * Default stylistic set.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        default = "Default",
        /**
         * Stylistic set 01.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set01 = "Set01",
        /**
         * Stylistic set 02.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set02 = "Set02",
        /**
         * Stylistic set 03.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set03 = "Set03",
        /**
         * Stylistic set 04.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set04 = "Set04",
        /**
         * Stylistic set 05.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set05 = "Set05",
        /**
         * Stylistic set 06.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set06 = "Set06",
        /**
         * Stylistic set 07.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set07 = "Set07",
        /**
         * Stylistic set 08.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set08 = "Set08",
        /**
         * Stylistic set 09.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set09 = "Set09",
        /**
         * Stylistic set 10.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set10 = "Set10",
        /**
         * Stylistic set 11.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set11 = "Set11",
        /**
         * Stylistic set 12.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set12 = "Set12",
        /**
         * Stylistic set 13.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set13 = "Set13",
        /**
         * Stylistic set 14.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set14 = "Set14",
        /**
         * Stylistic set 15.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set15 = "Set15",
        /**
         * Stylistic set 16.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set16 = "Set16",
        /**
         * Stylistic set 17.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set17 = "Set17",
        /**
         * Stylistic set 18.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set18 = "Set18",
        /**
         * Stylistic set 19.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set19 = "Set19",
        /**
         * Stylistic set 20.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        set20 = "Set20",
    }
    /**
     * Specifies the alignment (the origin of the coordinate grid) for the tiling of the texture fill.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum TextureAlignment {
        /**
         * Mixed texture alignment. Used when multiple shapes with different texture alignments are selected.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * Aligns the texture to the top-left corner of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        topLeft = "TopLeft",
        /**
         * Aligns the texture to the top center of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        top = "Top",
        /**
         * Aligns the texture to the top-right corner of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        topRight = "TopRight",
        /**
         * Aligns the texture to the middle left side of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        left = "Left",
        /**
         * Aligns the texture to the center of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        center = "Center",
        /**
         * Aligns the texture to the middle right side of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        right = "Right",
        /**
         * Aligns the texture to the bottom-left corner of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottomLeft = "BottomLeft",
        /**
         * Aligns the texture to the bottom center of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottom = "Bottom",
        /**
         * Aligns the texture to the bottom-right corner of the shape.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottomRight = "BottomRight",
    }
    /**
     * Specifies the texture type for the selected fill.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum TextureType {
        /**
         * Mixed texture type. Used when multiple shapes with different texture types are selected.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mixed = "Mixed",
        /**
         * A predefined texture selected from the built-in texture gallery.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        preset = "Preset",
        /**
         * A custom texture defined by the user, typically from an image file.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        userDefined = "UserDefined",
    }
    /**
     * Specifies the theme colors for document themes.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum ThemeColorIndex {
        /**
         * Not a theme color. Used when the color is not part of the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        notThemeColor = "NotThemeColor",
        /**
         * The first dark color in the main theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mainDark1 = "MainDark1",
        /**
         * The first light color in the main theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mainLight1 = "MainLight1",
        /**
         * The second dark color in the main theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mainDark2 = "MainDark2",
        /**
         * The second light color in the main theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mainLight2 = "MainLight2",
        /**
         * The first accent color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        accent1 = "Accent1",
        /**
         * The second accent color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        accent2 = "Accent2",
        /**
         * The third accent color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        accent3 = "Accent3",
        /**
         * The fourth accent color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        accent4 = "Accent4",
        /**
         * The fifth accent color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        accent5 = "Accent5",
        /**
         * The sixth accent color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        accent6 = "Accent6",
        /**
         * The color used for hyperlinks.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hyperlink = "Hyperlink",
        /**
         * The color used for followed hyperlinks.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hyperlinkFollowed = "HyperlinkFollowed",
        /**
         * The first background color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        background1 = "Background1",
        /**
         * The first text color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        text1 = "Text1",
        /**
         * The second background color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        background2 = "Background2",
        /**
         * The second text color in the theme.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        text2 = "Text2",
    }
    /**
     * Specifies the hyperlink type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum HyperlinkType {
        /**
         * Represents a hyperlink to a range in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        range = "Range",
        /**
         * Represents a hyperlink to a shape in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        shape = "Shape",
        /**
         * Represents a hyperlink to an inline shape in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        inlineShape = "InlineShape",
    }
    /**
     * Represents the list of available sources attached to the document (in the current list) or the list of sources available in the application (in the master list).
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class Bibliography extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `SourceCollection` object that represents all the sources contained in the bibliography.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly sources: Word.SourceCollection;
        /**
         * Specifies the name of the active style to use for the bibliography.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bibliographyStyle: string;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.BibliographyUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Bibliography): void;
        /**
         * Generates a unique identification tag for a bibliography source and returns a string that represents the tag.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        generateUniqueTag(): OfficeExtension.ClientResult<string>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BibliographyLoadOptions): Word.Bibliography;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Bibliography;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Bibliography;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Bibliography;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Bibliography;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Bibliography` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BibliographyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BibliographyData;
    }
    /**
     * Represents a collection of {@link Word.Source} objects.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class SourceCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Source[];
        /**
         * Adds a new `Source` object to the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param xml - A string containing the XML data for the source.
         * @returns A `Source` object that was added to the collection.
         */
        add(xml: string): Word.Source;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.SourceCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.SourceCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.SourceCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.SourceCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.SourceCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.SourceCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.SourceCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SourceCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.SourceCollectionData;
    }
    /**
     * Represents an individual source, such as a book, journal article, or interview.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class Source extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Gets if the `Source` object has been cited in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly isCited: boolean;
        /**
         * Gets the tag of the source.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly tag: string;
        /**
         * Gets the XML representation of the source.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly xml: string;
        /**
         * Deletes the `Source` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        delete(): void;
        /**
         * Returns the value of a field in the bibliography `Source` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param name - The name of the field to retrieve.
         */
        getFieldByName(name: string): OfficeExtension.ClientResult<string>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.SourceLoadOptions): Word.Source;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Source;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Source;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Source;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Source;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Source` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SourceData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.SourceData;
    }
    /**
     * Represents the page setup settings for a Word document or section.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class PageSetup extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies a `LineNumbering` object that represents the line numbers for the `PageSetup` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lineNumbering: Word.LineNumbering;
        /**
         * Gets a `TextColumnCollection` object that represents the set of text columns for the `PageSetup` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        readonly textColumns: Word.TextColumnCollection;
        /**
         * Specifies whether Microsoft Word prints the document as a booklet.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bookFoldPrinting: boolean;
        /**
         * Specifies the number of pages for each booklet.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bookFoldPrintingSheets: number;
        /**
         * Specifies if Microsoft Word reverses the printing order for book fold printing of bidirectional or Asian language documents.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bookFoldReversePrinting: boolean;
        /**
         * Specifies the distance (in points) between the bottom edge of the page and the bottom boundary of the body text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottomMargin: number;
        /**
         * Specifies the number of characters per line in the document grid.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        charsLine: number;
        /**
         * Specifies whether the first page has a different header and footer.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        differentFirstPageHeaderFooter: boolean;
        /**
         * Specifies the distance between the footer and the bottom of the page in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        footerDistance: number;
        /**
         * Specifies the amount (in points) of extra margin space added to each page in a document or section for binding.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gutter: number;
        /**
         * Specifies on which side the gutter appears in a document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gutterPosition: Word.GutterPosition | "Left" | "Right" | "Top";
        /**
         * Specifies whether Microsoft Word uses gutters for the current document based on a right-to-left language or a left-to-right language.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        gutterStyle: Word.GutterStyle | "Bidirectional" | "Latin";
        /**
         * Specifies the distance between the header and the top of the page in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        headerDistance: number;
        /**
         * Specifies the layout mode for the current document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        layoutMode: Word.LayoutMode | "Default" | "Grid" | "LineGrid" | "Genko";
        /**
         * Specifies the distance (in points) between the left edge of the page and the left boundary of the body text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        leftMargin: number;
        /**
         * Specifies the number of lines per page in the document grid.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        linesPage: number;
        /**
         * Specifies if the inside and outside margins of facing pages are the same width.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        mirrorMargins: boolean;
        /**
         * Specifies whether odd and even pages have different headers and footers.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        oddAndEvenPagesHeaderFooter: boolean;
        /**
         * Specifies the orientation of the page.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        orientation: Word.PageOrientation | "Portrait" | "Landscape";
        /**
         * Specifies the page height in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pageHeight: number;
        /**
         * Specifies the page width in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        pageWidth: number;
        /**
         * Specifies the paper size of the page.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        paperSize: Word.PaperSize | "Size10x14" | "Size11x17" | "Letter" | "LetterSmall" | "Legal" | "Executive" | "A3" | "A4" | "A4Small" | "A5" | "B4" | "B5" | "CSheet" | "DSheet" | "ESheet" | "FanfoldLegalGerman" | "FanfoldStdGerman" | "FanfoldUS" | "Folio" | "Ledger" | "Note" | "Quarto" | "Statement" | "Tabloid" | "Envelope9" | "Envelope10" | "Envelope11" | "Envelope12" | "Envelope14" | "EnvelopeB4" | "EnvelopeB5" | "EnvelopeB6" | "EnvelopeC3" | "EnvelopeC4" | "EnvelopeC5" | "EnvelopeC6" | "EnvelopeC65" | "EnvelopeDL" | "EnvelopeItaly" | "EnvelopeMonarch" | "EnvelopePersonal" | "Custom";
        /**
         * Specifies the distance (in points) between the right edge of the page and the right boundary of the body text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rightMargin: number;
        /**
         * Specifies the reading order and alignment for the specified sections.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sectionDirection: Word.SectionDirection | "RightToLeft" | "LeftToRight";
        /**
         * Specifies the type of section break for the specified object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        sectionStart: Word.SectionStart | "Continuous" | "NewColumn" | "NewPage" | "EvenPage" | "OddPage";
        /**
         * Specifies whether to show the grid.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        showGrid: boolean;
        /**
         * Specifies if endnotes are printed at the end of the next section that doesn't suppress endnotes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        suppressEndnotes: boolean;
        /**
         * Specifies the top margin of the page in points.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        topMargin: number;
        /**
         * Specifies whether to print two pages per sheet.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        twoPagesOnOne: boolean;
        /**
         * Specifies the vertical alignment of text on each page in a document or section.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        verticalAlignment: Word.PageSetupVerticalAlignment | "Top" | "Center" | "Justify" | "Bottom";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.PageSetupUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.PageSetup): void;
        /**
         * Sets the specified page setup formatting as the default for the active document and all new documents based on the active template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        setAsTemplateDefault(): void;
        /**
         * Switches between portrait and landscape page orientations for a document or section.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        togglePortrait(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.PageSetupLoadOptions): Word.PageSetup;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.PageSetup;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.PageSetup;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.PageSetup;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.PageSetup;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.PageSetup` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.PageSetupData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.PageSetupData;
    }
    /**
     * Represents line numbers in the left margin or to the left of each newspaper-style column.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class LineNumbering extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the numeric increment for line numbers.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        countBy: number;
        /**
         * Specifies the distance (in points) between the right edge of line numbers and the left edge of the document text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        distanceFromText: number;
        /**
         * Specifies if line numbering is active for the specified document, section, or sections.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isActive: boolean;
        /**
         * Specifies the way line numbering runs; that is, whether it starts over at the beginning of a new page or section, or runs continuously.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        restartMode: Word.NumberingRule | "RestartContinuous" | "RestartSection" | "RestartPage";
        /**
         * Specifies the starting line number.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        startingNumber: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.LineNumberingUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.LineNumbering): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.LineNumberingLoadOptions): Word.LineNumbering;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.LineNumbering;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.LineNumbering;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.LineNumbering;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.LineNumbering;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.LineNumbering` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.LineNumberingData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.LineNumberingData;
    }
    /**
     * A collection of {@link Word.TextColumn} objects that represent all the columns of text in the document or a section of the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class TextColumnCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.TextColumn[];
        /**
         * Returns a `TextColumn` object that represents a new text column added to a section or document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param options - Optional. Options for configuring the new text column.
         * @returns A `TextColumn` object that represents a new text column added to the document.
         */
        add(options?: Word.TextColumnAddOptions): Word.TextColumn;
        /**
         * Gets the direction in which text flows from one text column to the next.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getFlowDirection(): OfficeExtension.ClientResult<Word.FlowDirection>;
        /**
         * Gets whether vertical lines appear between all the columns in the `TextColumnCollection` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getHasLineBetween(): OfficeExtension.ClientResult<boolean>;
        /**
         * Gets whether text columns are evenly spaced.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        getIsEvenlySpaced(): OfficeExtension.ClientResult<boolean>;
        /**
         * Arranges text into the specified number of text columns.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param numColumns - The number of columns the text is to be arranged into.
         */
        setCount(numColumns: number): void;
        /**
         * Sets the direction in which text flows from one text column to the next.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param value - The flow direction to set.
         */
        setFlowDirection(value: Word.FlowDirection): void;
        /**
         * Sets the direction in which text flows from one text column to the next.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param value - The flow direction to set.
         */
        setFlowDirection(value: "LeftToRight" | "RightToLeft"): void;
        /**
         * Sets whether vertical lines appear between all the columns in the `TextColumnCollection` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param value - `true` to show vertical lines between columns.
         */
        setHasLineBetween(value: boolean): void;
        /**
         * Sets whether text columns are evenly spaced.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         *
         * @param value - `true` to evenly space all the text columns in the document.
         */
        setIsEvenlySpaced(value: boolean): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TextColumnCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.TextColumnCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TextColumnCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.TextColumnCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TextColumnCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TextColumnCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TextColumnCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TextColumnCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.TextColumnCollectionData;
    }
    /**
     * Represents options for a new text column in a document or section of a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export interface TextColumnAddOptions {
        /**
         * If provided, specifies whether to evenly space all the text columns in the document. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        isEvenlySpaced?: boolean;
        /**
         * If provided, specifies the spacing between the text columns in the document, in points.
                    The default value is -1, which means Word will automatically determine the width based on the number of columns and page size.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spacing?: number;
        /**
         * If provided, specifies the width of the new text column in the document, in points.
                    The default value is -1, which means Word will automatically determine the width based on the number of columns and page size.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        width?: number;
    }
    /**
     * Represents a single text column in a section.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    export class TextColumn extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Specifies the amount of spacing (in points) after the specified paragraph or text column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        spaceAfter: number;
        /**
         * Specifies the width, in points, of the specified text columns.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        width: number;
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.TextColumnUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.TextColumn): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.TextColumnLoadOptions): Word.TextColumn;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.TextColumn;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.TextColumn;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.TextColumn;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.TextColumn;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.TextColumn` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.TextColumnData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.TextColumnData;
    }
    /**
     * Specifies the case of the text in the specified range.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum CharacterCase {
        /**
         * Specifies the next case.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        next = "Next",
        /**
         * Specifies lowercase.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lower = "Lower",
        /**
         * Specifies uppercase.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        upper = "Upper",
        /**
         * Specifies title case for each word.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        titleWord = "TitleWord",
        /**
         * Specifies title case for the sentence.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        titleSentence = "TitleSentence",
        /**
         * Specifies toggle case.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        toggle = "Toggle",
        /**
         * Specifies half-width characters.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        halfWidth = "HalfWidth",
        /**
         * Specifies full-width characters.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fullWidth = "FullWidth",
        /**
         * Specifies Katakana characters.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        katakana = "Katakana",
        /**
         * Specifies Hiragana characters.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        hiragana = "Hiragana",
    }
    /**
     * Specifies the character width of the text in the specified range.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum CharacterWidth {
        /**
         * Specifies half-width characters.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        half = "Half",
        /**
         * Specifies full-width characters.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        full = "Full",
    }
    /**
     * Specifies the seek view options in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum SeekView {
        /**
         * Main document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        mainDocument = "MainDocument",
        /**
         * Primary header.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        primaryHeader = "PrimaryHeader",
        /**
         * First page header.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        firstPageHeader = "FirstPageHeader",
        /**
         * Even pages header.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenPagesHeader = "EvenPagesHeader",
        /**
         * Primary footer.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        primaryFooter = "PrimaryFooter",
        /**
         * First page footer.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        firstPageFooter = "FirstPageFooter",
        /**
         * Even pages footer.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenPagesFooter = "EvenPagesFooter",
        /**
         * Footnotes.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnotes = "Footnotes",
        /**
         * Endnotes.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnotes = "Endnotes",
        /**
         * Current page header.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        currentPageHeader = "CurrentPageHeader",
        /**
         * Current page footer.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        currentPageFooter = "CurrentPageFooter",
    }
    /**
     * Specifies the source documents to show.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ShowSourceDocuments {
        /**
         * Specifies that no source documents are shown.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Specifies that the original source document is shown.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        original = "Original",
        /**
         * Specifies that the revised source document is shown.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        revised = "Revised",
        /**
         * Specifies that both the original and revised source documents are shown.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        both = "Both",
    }
    /**
     * Specifies the special pane options in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum SpecialPane {
        /**
         * None.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Primary header.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        primaryHeader = "PrimaryHeader",
        /**
         * First page header.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        firstPageHeader = "FirstPageHeader",
        /**
         * Even pages header.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenPagesHeader = "EvenPagesHeader",
        /**
         * Primary footer.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        primaryFooter = "PrimaryFooter",
        /**
         * First page footer.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        firstPageFooter = "FirstPageFooter",
        /**
         * Even pages footer.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenPagesFooter = "EvenPagesFooter",
        /**
         * Footnotes.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnotes = "Footnotes",
        /**
         * Endnotes.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnotes = "Endnotes",
        /**
         * Footnote continuation notice.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnoteContinuationNotice = "FootnoteContinuationNotice",
        /**
         * Footnote continuation separator.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnoteContinuationSeparator = "FootnoteContinuationSeparator",
        /**
         * Footnote separator.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnoteSeparator = "FootnoteSeparator",
        /**
         * Endnote continuation notice.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnoteContinuationNotice = "EndnoteContinuationNotice",
        /**
         * Endnote continuation separator.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnoteContinuationSeparator = "EndnoteContinuationSeparator",
        /**
         * Endnote separator.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnoteSeparator = "EndnoteSeparator",
        /**
         * Comments.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        comments = "Comments",
        /**
         * Current page header.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        currentPageHeader = "CurrentPageHeader",
        /**
         * Current page footer.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        currentPageFooter = "CurrentPageFooter",
        /**
         * Revisions.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        revisions = "Revisions",
        /**
         * Revisions horizontal.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        revisionsHoriz = "RevisionsHoriz",
        /**
         * Revisions vertical.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        revisionsVert = "RevisionsVert",
    }
    /**
     * Specifies the save options.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum SaveConfiguration {
        /**
         * Specifies not to save changes.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        doNotSaveChanges = "DoNotSaveChanges",
        /**
         * Specifies to save changes.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        saveChanges = "SaveChanges",
        /**
         * Specifies to prompt to save changes.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        promptToSaveChanges = "PromptToSaveChanges",
    }
    /**
     * Specifies the page color options in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum PageColor {
        /**
         * None.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Sepia.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sepia = "Sepia",
        /**
         * Inverse.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        inverse = "Inverse",
    }
    /**
     * Specifies the page movement type in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum PageMovementType {
        /**
         * Vertical.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        vertical = "Vertical",
        /**
         * Side to side.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sideToSide = "SideToSide",
    }
    /**
     * Specifies the margin options in reading layout view in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ReadingLayoutMargin {
        /**
         * Microsoft Word determines automatically whether to show or hide the margins based on the available space.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        automatic = "Automatic",
        /**
         * Hides margins.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        suppress = "Suppress",
        /**
         * Shows margins.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        full = "Full",
    }
    /**
     * Specifies the margin for revision balloons in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum RevisionsBalloonMargin {
        /**
         * Left margin.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        left = "Left",
        /**
         * Right margin.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        right = "Right",
    }
    /**
     * Specifies the width type for revision balloons in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum RevisionsBalloonWidthType {
        /**
         * Balloon width as a percentage.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        percent = "Percent",
        /**
         * Balloon width in points.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        points = "Points",
    }
    /**
     * Specifies the extent of markup visible in the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum RevisionsMarkup {
        /**
         * No markup.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Simple markup.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        simple = "Simple",
        /**
         * All markup.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        all = "All",
    }
    /**
     * Specifies the display mode for tracked changes in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum RevisionsMode {
        /**
         * Balloon.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        balloon = "Balloon",
        /**
         * Inline.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        inline = "Inline",
        /**
         * Mixed.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        mixed = "Mixed",
    }
    /**
     * Specifies whether Word displays the original version of a document or a version with revisions and formatting changes applied.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum RevisionsView {
        /**
         * Final view.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        final = "Final",
        /**
         * Original view.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        original = "Original",
    }
    /**
     * Specifies the revision type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum RevisionType {
        /**
         * No revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Insert revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insert = "Insert",
        /**
         * Delete revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete = "Delete",
        /**
         * Property revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        property = "Property",
        /**
         * Paragraph number revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        paragraphNumber = "ParagraphNumber",
        /**
         * Display field revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        displayField = "DisplayField",
        /**
         * Reconcile revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reconcile = "Reconcile",
        /**
         * Conflict revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        conflict = "Conflict",
        /**
         * Style revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        style = "Style",
        /**
         * Replace revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        replace = "Replace",
        /**
         * Paragraph property revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        paragraphProperty = "ParagraphProperty",
        /**
         * Table property revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableProperty = "TableProperty",
        /**
         * Section property revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sectionProperty = "SectionProperty",
        /**
         * Style definition revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        styleDefinition = "StyleDefinition",
        /**
         * Moved from revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        movedFrom = "MovedFrom",
        /**
         * Moved to revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        movedTo = "MovedTo",
        /**
         * Cell insertion revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cellInsertion = "CellInsertion",
        /**
         * Cell deletion revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cellDeletion = "CellDeletion",
        /**
         * Cell merge revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cellMerge = "CellMerge",
        /**
         * Cell split revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cellSplit = "CellSplit",
        /**
         * Conflict insert revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        conflictInsert = "ConflictInsert",
        /**
         * Conflict delete revision.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        conflictDelete = "ConflictDelete",
    }
    /**
     * Specifies the column width options in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ColumnWidth {
        /**
         * Narrow column width.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        narrow = "Narrow",
        /**
         * Default column width.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        default = "Default",
        /**
         * Wide column width.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        wide = "Wide",
    }
    /**
     * Specifies the field shading options in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum FieldShading {
        /**
         * Never shade fields.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        never = "Never",
        /**
         * Always shade fields.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        always = "Always",
        /**
         * Shade fields when selected.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        whenSelected = "WhenSelected",
    }
    /**
     * Specifies the format for horizontal text set within vertical text.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum HorizontalInVerticalType {
        /**
         * No formatting is applied to the horizontal text.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * The horizontal text is sized to fit in the line of vertical text.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fitInLine = "FitInLine",
        /**
         * The line of vertical text is sized to accommodate the horizontal text.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        resizeLine = "ResizeLine",
    }
    /**
     * Specifies the IME (Input Method Editor) mode.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ImeMode {
        /**
         * Specifies no control over the IME mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        noControl = "NoControl",
        /**
         * Specifies the IME mode is on.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        on = "On",
        /**
         * Specifies the IME mode is off.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        off = "Off",
        /**
         * Specifies the Hiragana IME mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hiragana = "Hiragana",
        /**
         * Specifies the Katakana (double-byte) IME mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        katakana = "Katakana",
        /**
         * Specifies the Katakana (half-width) IME mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        katakanaHalf = "KatakanaHalf",
        /**
         * Specifies the full-width alphanumeric IME mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        alphaFull = "AlphaFull",
        /**
         * Specifies the half-width alphanumeric IME mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        alpha = "Alpha",
        /**
         * Specifies the full-width Hangul IME mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hangulFull = "HangulFull",
        /**
         * Specifies the half-width Hangul IME mode.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hangul = "Hangul",
    }
    /**
     * Specifies the Kana type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum Kana {
        /**
         * Katakana Kana type.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        katakana = "Katakana",
        /**
         * Hiragana Kana type.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        hiragana = "Hiragana",
    }
    /**
     * Specifies the two lines in one type.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TwoLinesInOneType {
        /**
         * No two lines in one.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Two lines in one without brackets.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        noBrackets = "NoBrackets",
        /**
         * Two lines in one with parentheses.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        parentheses = "Parentheses",
        /**
         * Two lines in one with square brackets.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        squareBrackets = "SquareBrackets",
        /**
         * Two lines in one with angle brackets.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        angleBrackets = "AngleBrackets",
        /**
         * Two lines in one with curly brackets.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        curlyBrackets = "CurlyBrackets",
    }
    /**
     * Specifies the view type in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ViewType {
        /**
         * Normal.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        normal = "Normal",
        /**
         * Outline.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outline = "Outline",
        /**
         * Print.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        print = "Print",
        /**
         * Print preview.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        printPreview = "PrintPreview",
        /**
         * Master.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        master = "Master",
        /**
         * Web.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        web = "Web",
        /**
         * Reading.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reading = "Reading",
        /**
         * Conflict.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        conflict = "Conflict",
    }
    /**
     * Represents the state of the window.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum WindowState {
        /**
         * Represents the normal state of the window.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        normal = "Normal",
        /**
         * Represents the maximized state of the window.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        maximize = "Maximize",
        /**
         * Represents the minimized state of the window.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        minimize = "Minimize",
    }
    /**
     * Specifies the type of the window.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum WindowType {
        /**
         * Specifies a document window.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        document = "Document",
        /**
         * Specifies a template window.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        template = "Template",
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.delete} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionDeleteOptions {
        /**
         * If provided, specifies the number of units to be deleted. To delete units after the selection, collapse the selection and use a positive number. To delete units before the selection, collapse the selection and use a negative number. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        count?: number;
        /**
         * If provided, specifies the unit by which the collapsed selection is to be deleted. The default value is `character`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unit?: Word.OperationUnit | "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item";
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.insertDateTime} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionInsertDateTimeOptions {
        /**
         * If provided, specifies the calendar type to use when displaying the date or time. This property may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        calendarType?: Word.CalendarTypeBidirectional | "Gregorian" | "Bidirectional";
        /**
         * If provided, specifies the language in which to display the date or time. This property may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        dateLanguage?: Word.DateLanguage | "Bidirectional" | "Latin";
        /**
         * If provided, specifies the format to be used for displaying the date or time, or both. If this property is omitted, Microsoft Word uses the short-date style from the Windows Control Panel (Regional Settings icon). See {@link https://support.microsoft.com/office/47fbbdc1-52fa-416a-b8d5-ba24d881b698 | Date/Time data type} for format symbols.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        dateTimeFormat?: string;
        /**
         * If provided, specifies whether to insert the specified information as a {@link https://support.microsoft.com/office/6cb8fcef-310a-4646-ae6b-886d88335c90 | TIME field}. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertAsField?: boolean;
        /**
         * If provided, specifies whether to insert the specified information as full-width (double-byte) digits. This property may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertAsFullWidth?: boolean;
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.insertFormula} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionInsertFormulaOptions {
        /**
         * If provided, specifies the mathematical formula you want the {@link https://support.microsoft.com/office/32d5c9de-3516-4ec3-80ed-d1fc2b5bc21d | = (Formula) field} to evaluate.
                     The `formula` property is optional only if the selection is in a cell and there is at least one cell that contains a value above or to the left of the cell that contains the insertion point. If the cells above the insertion point contain values, the inserted field is `{=SUM(ABOVE)}`; if the cells to the left of the insertion point contain values, the inserted field is `{=SUM(LEFT)}`. If both the cells above the insertion point and the cells to the left of it contain values, Microsoft Word uses the following rules to determine which `SUM` function to insert.
                    
                     - If the cell immediately above the insertion point contains a value, Word inserts `{=SUM(ABOVE)}`.
                    
                     - If the cell immediately above the insertion point doesn't contain a value but the cell immediately to the left of the insertion point does, Word inserts `{=SUM(LEFT)}`.
                    
                     - If neither cell immediately above the insertion point nor the cell immediately below it contains a value, Word inserts `{=SUM(ABOVE)}`.
                    
                     - If you don't specify the `formula` property and all the cells above and to the left of the insertion point are empty, using the `= (Formula)` field causes an error.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formula?: string;
        /**
         * If provided, specifies the format for the result of the `= (Formula)` field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        numberFormat?: string;
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.insertSymbol} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionInsertSymbolOptions {
        /**
         * If provided, specifies the font bias for symbols. This argument is useful for setting the correct font bias for East Asian characters. The default value is `default`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bias?: Word.FontBias | "Standard" | "FarEast" | "NoSpecified";
        /**
         * If provided, specifies the name of the font that contains the symbol.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        font?: string;
        /**
         * If provided, specifies whether the character is Unicode. `true` to insert the Unicode character specified by the `characterNumber` property when the `Selection.insertSymbol` method is called; `false` to instead insert the ANSI character specified by the `characterNumber` property. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unicode?: boolean;
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.moveLeft and Selection.moveRight} methods.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionMoveLeftRightOptions {
        /**
         * If provided, specifies the number of units the selection is to be moved. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        count?: number;
        /**
         * If provided, specifies the type of movement. The movement direction (left or right) is according to the calling method. If set to `move`, the selection is collapsed to the endpoint and moved in the appropriate direction. If set to `extend`, the selection is extended in the appropriate direction. The default value is `move`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        extend?: Word.MovementType | "Move" | "Extend";
        /**
         * If provided, specifies the unit by which the selection is to be moved. The default value is `character`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unit?: Word.OperationUnit | "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item";
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.move} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionMoveOptions {
        /**
         * If provided, specifies the number of units by which the range or selection is to be moved. If `count` is a positive number, the object is collapsed to its end position and moved backward in the document by the specified number of units. If `count` is a negative number, the object is collapsed to its start position and moved forward by the specified number of units. The default value is 1. You can also control the collapse direction by using the {@link Word.Selection | Selection.collapse} method before using the `move` method. If the range or selection is in the middle of a unit or isn't collapsed, moving it to the beginning or end of the unit counts as moving it one full unit.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        count?: number;
        /**
         * If provided, specifies the unit by which to move the ending character position. The default value is `character`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unit?: Word.OperationUnit | "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item";
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.moveEnd and Selection.moveStart} methods.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionMoveStartEndOptions {
        /**
         * If provided, specifies the number of units to move. The affected character position (start or end) is according to the calling method. If this number is positive, the position is moved forward in the document. If this number is negative, the position is moved backward. If the affected position encounters the other position, the selection is collapsed and both the start and end positions move together. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        count?: number;
        /**
         * If provided, specifies the unit by which the selection's start or end position (per the calling method) is to be moved. The default value is `character`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unit?: Word.OperationUnit | "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item";
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.moveUp and Selection.moveDown} methods.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionMoveUpDownOptions {
        /**
         * If provided, specifies the number of units the selection is to be moved. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        count?: number;
        /**
         * If provided, specifies the type of movement. The movement direction (up or down) is according to the calling method. If set to `move`, the selection is collapsed to the endpoint and moved in the appropriate direction. If set to `extend`, the selection is extended in the appropriate direction. The default value is `move`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        extend?: Word.MovementType | "Move" | "Extend";
        /**
         * If provided, specifies the unit by which to move the selection. The default value is `line`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unit?: Word.OperationUnit | "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item";
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.next} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionNextOptions {
        /**
         * If provided, specifies the number of units by which you want to move ahead. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        count?: number;
        /**
         * If provided, specifies the type of units by which to move the selection. The default value is `character`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unit?: Word.OperationUnit | "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item";
    }
    /**
     * Represents the options for the {@link Word.Selection | Selection.previous} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface SelectionPreviousOptions {
        /**
         * If provided, specifies the number of units by which you want to move. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        count?: number;
        /**
         * If provided, specifies the type of unit by which to move the selection. The default value is `character`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        unit?: Word.OperationUnit | "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item";
    }
    /**
     * Represents a selected range or the insertion point in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     *
     * Note: {@link Word.Range | Range} objects share many of the same methods and properties as `Selection` objects. Using `Range` objects is preferable for manipulating a document when there isn't a reason to physically change the current selection.
     */
    export class Selection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `BorderUniversalCollection` object that represents all the borders for the objects in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly borders: Word.BorderUniversalCollection;
        /**
         * Returns a `RangeScopedCollection` object that represents each character in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly characters: Word.RangeScopedCollection;
        /**
         * Returns a `CommentCollection` object that represents all the comments in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly comments: Word.CommentCollection;
        /**
         * Returns a `FieldCollection` object that represents all the fields in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly fields: Word.FieldCollection;
        /**
         * Returns the `Font` object that represents the character formatting of the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly font: Word.Font;
        /**
         * Specifies a `Range` object that includes the formatted text in the range or selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formattedText: Word.Range;
        /**
         * Returns a `ParagraphCollection` object that represents all the paragraphs in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly paragraphs: Word.ParagraphCollection;
        /**
         * Returns the `Range` object for the portion of the document contained in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Returns the `SectionCollection` object in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly sections: Word.SectionCollection;
        /**
         * Returns the `RangeScopedCollection` object for each sentence in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly sentences: Word.RangeScopedCollection;
        /**
         * Returns the `ShadingUniversal` object for the shading formatting for the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly shading: Word.ShadingUniversal;
        /**
         * Returns the `TableCollection` object in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly tables: Word.TableCollection;
        /**
         * Returns the tables at the outermost nesting level in the current selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly topLevelTables: Word.TableCollection;
        /**
         * Returns the `RangeScopedCollection` object that represents each word in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly words: Word.RangeScopedCollection;
        /**
         * Specifies the ending character position of the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        end: number;
        /**
         * Specifies the width in which Word fits the text in the current selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fitTextWidth: number;
        /**
         * Returns whether the spelling and grammar checker ignores the selected text.
                    If the selected text contains a mix of proofed and un-proofed content, this API returns `null`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly hasNoProofing: boolean;
        /**
         * Returns whether the selection in the specified window or pane is active.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isActive: boolean;
        /**
         * Specifies whether column selection mode is active.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isColumnSelectModeActive: boolean;
        /**
         * Returns whether the selection is at the end-of-row mark in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isEndOfRowMark: boolean;
        /**
         * Specifies whether Extend mode is active.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isExtendModeActive: boolean;
        /**
         * Returns whether the insertion point is at the end of a line.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isInsertionPointAtEndOfLine: boolean;
        /**
         * Specifies whether the beginning of the selection is active.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        isStartActive: boolean;
        /**
         * Specifies whether Word has detected the language of the selected text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        languageDetected: boolean;
        /**
         * Returns the language for the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly languageId: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Returns the East Asian language for the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly languageIdFarEast: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Returns the language for the selection that isn't classified as an East Asian language.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly languageIdOther: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Specifies the orientation of text in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        orientation: Word.TextOrientation | "Horizontal" | "Upward" | "Downward" | "VerticalFarEast" | "HorizontalRotatedFarEast" | "Vertical";
        /**
         * Specifies the starting character position of the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        start: number;
        /**
         * Returns the number of characters in the story that contains the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly storyLength: number;
        /**
         * Returns the story type for the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly storyType: Word.StoryType | "MainText" | "Footnotes" | "Endnotes" | "Comments" | "TextFrame" | "EvenPagesHeader" | "PrimaryHeader" | "EvenPagesFooter" | "PrimaryFooter" | "FirstPageHeader" | "FirstPageFooter" | "FootnoteSeparator" | "FootnoteContinuationSeparator" | "FootnoteContinuationNotice" | "EndnoteSeparator" | "EndnoteContinuationSeparator" | "EndnoteContinuationNotice";
        /**
         * Specifies the text in the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        text: string;
        /**
         * Returns the selection type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly type: Word.SelectionType | "NoSelection" | "InsertionPoint" | "Normal" | "Frame" | "Column" | "Row" | "Block" | "InlineShape" | "SelectionShape";
        /**
         * Calculates the first mathematical expression within the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         * @returns The result of the calculation.
         */
        calculate(): OfficeExtension.ClientResult<number>;
        /**
         * Cancels a mode such as extend or column select. This is equivalent to pressing the Esc key.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cancelMode(): void;
        /**
         * Removes character formatting applied through character styles.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clearCharacterStyleFormatting(): void;
        /**
         * Removes character and paragraph formatting from the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clearFormatting(): void;
        /**
         * Removes manually applied character formatting from the selected text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clearManualCharacterFormatting(): void;
        /**
         * Removes manually applied paragraph formatting from the selected text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clearManualParagraphFormatting(): void;
        /**
         * Removes all paragraph formatting from the selected text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clearParagraphFormatting(): void;
        /**
         * Removes paragraph formatting applied through paragraph styles.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        clearParagraphStyle(): void;
        /**
         * Collapses the selection to the starting or ending position.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param direction - Optional. Direction to collapse.
         */
        collapse(direction?: Word.CollapseDirection): void;
        /**
         * Collapses the selection to the starting or ending position.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param direction - Optional. Direction to collapse.
         */
        collapse(direction?: "Start" | "End"): void;
        /**
         * Copies the selection to the Clipboard as a picture.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        copyAsPictureToClipboard(): void;
        /**
         * Copies the character formatting of the first character in the selected text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        copyFormat(): void;
        /**
         * Copies the selection to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        copyToClipboard(): void;
        /**
         * Adds a default-sized text box around the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        createTextBox(): void;
        /**
         * Removes the selected content from the document and moves it to the Clipboard.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cut(): void;
        /**
         * Deletes the specified number of characters or words.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for deleting text.
         * @returns The number of characters deleted.
         */
        delete(options?: Word.SelectionDeleteOptions): OfficeExtension.ClientResult<number>;
        /**
         * Analyzes the selected text to determine the language that it's written in.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        detectLanguage(): void;
        /**
         * Expands the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param unit - Optional. The unit to expand.
         * @returns The number of characters added to the range or selection.
         */
        expand(unit?: Word.OperationUnit): OfficeExtension.ClientResult<number>;
        /**
         * Expands the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param unit - Optional. The unit to expand.
         * @returns The number of characters added to the range or selection.
         */
        expand(unit?: "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item"): OfficeExtension.ClientResult<number>;
        /**
         * Expands the selection to include the entire story.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        expandToWholeStory(): void;
        /**
         * Turns on extend mode, or if extend mode is already on, extends the selection to the next larger unit of text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param character - Optional. The character through which the selection is extended. This argument is case-sensitive and must evaluate to a string or an error occurs. Also, if the value of this argument is longer than a single character, Microsoft Word ignores the command entirely.
         */
        extend(character?: Word.OperationUnit): void;
        /**
         * Turns on extend mode, or if extend mode is already on, extends the selection to the next larger unit of text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param character - Optional. The character through which the selection is extended. This argument is case-sensitive and must evaluate to a string or an error occurs. Also, if the value of this argument is longer than a single character, Microsoft Word ignores the command entirely.
         */
        extend(character?: "Character" | "Word" | "Sentence" | "Paragraph" | "Line" | "Story" | "Screen" | "Section" | "Column" | "Row" | "Window" | "Cell" | "CharacterFormat" | "ParagraphFormat" | "Table" | "Item"): void;
        /**
         * Returns a `Range` object that represents the next unit relative to the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for the `next` operation.
         * @returns A `Range` object that represents the next unit relative to the selection.
         */
        getNextRange(options?: Word.SelectionNextOptions): Word.Range;
        /**
         * Returns a `Range` object that represents the previous unit relative to the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for the `previous` operation.
         * @returns A `Range` object that represents the previous unit relative to the selection.
         */
        getPreviousRange(options?: Word.SelectionPreviousOptions): Word.Range;
        /**
         * Returns a `Range` object that refers to the start position of the next item or location specified by the `what` argument and moves the selection to the specified item.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param what - The item type to go to.
         * @returns A `Range` object that refers to the start position of the next item or location specified by the `what` argument.
         */
        goToNext(what: Word.GoToItem): Word.Range;
        /**
         * Returns a `Range` object that refers to the start position of the next item or location specified by the `what` argument and moves the selection to the specified item.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param what - The item type to go to.
         * @returns A `Range` object that refers to the start position of the next item or location specified by the `what` argument.
         */
        goToNext(what: "Bookmark" | "Comment" | "Endnote" | "Field" | "Footnote" | "Graphic" | "Heading" | "Line" | "Page" | "Section" | "Table" | "EmbeddedObject" | "Equation" | "Percent" | "SpellingError" | "GrammaticalError" | "ProofreadingError"): Word.Range;
        /**
         * Returns a `Range` object that refers to the start position of the previous item or location specified by the `what` argument and moves the selection to the specified item.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param what - The item type to go to.
         * @returns A `Range` object that refers to the start position of the previous item or location specified by the `what` argument.
         */
        goToPrevious(what: Word.GoToItem): Word.Range;
        /**
         * Returns a `Range` object that refers to the start position of the previous item or location specified by the `what` argument and moves the selection to the specified item.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param what - The item type to go to.
         * @returns A `Range` object that refers to the start position of the previous item or location specified by the `what` argument.
         */
        goToPrevious(what: "Bookmark" | "Comment" | "Endnote" | "Field" | "Footnote" | "Graphic" | "Heading" | "Line" | "Page" | "Section" | "Table" | "EmbeddedObject" | "Equation" | "Percent" | "SpellingError" | "GrammaticalError" | "ProofreadingError"): Word.Range;
        /**
         * Inserts the specified text at the end of the range or selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param text - Text to insert.
         */
        insertAfter(text: string): void;
        /**
         * Inserts the specified text before the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param text - Text to insert.
         */
        insertBefore(text: string): void;
        /**
         * Adds cells to an existing table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param shiftCells - Optional. Specifies how to insert the cells into the existing columns and rows of the table. The default value is `shiftDown`.
         */
        insertCells(shiftCells?: Word.TableCellInsertionLocation): void;
        /**
         * Adds cells to an existing table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param shiftCells - Optional. Specifies how to insert the cells into the existing columns and rows of the table. The default value is `shiftDown`.
         */
        insertCells(shiftCells?: "ShiftRight" | "ShiftDown" | "ShiftRowDown" | "ShiftColumnRight"): void;
        /**
         * Inserts columns to the left of the column that contains the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertColumnsLeft(): void;
        /**
         * Inserts columns to the right of the current selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertColumnsRight(): void;
        /**
         * Inserts the current date or time, or both, either as text or as a {@link https://support.microsoft.com/office/6cb8fcef-310a-4646-ae6b-886d88335c90 | TIME field}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for inserting the date or time.
         */
        insertDateTime(options?: Word.SelectionInsertDateTimeOptions): void;
        /**
         * Inserts a {@link https://support.microsoft.com/office/32d5c9de-3516-4ec3-80ed-d1fc2b5bc21d | Formula field} at the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for inserting the formula.
         */
        insertFormula(options?: Word.SelectionInsertFormulaOptions): void;
        /**
         * Inserts a new page at the position of the insertion point.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertNewPage(): void;
        /**
         * Inserts a paragraph mark after the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertParagraphAfter(): void;
        /**
         * Inserts a new paragraph before the selection or range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertParagraphBefore(): void;
        /**
         * Inserts a special hidden paragraph mark that allows Word to join paragraphs formatted using different paragraph styles.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertParagraphStyleSeparator(): void;
        /**
         * Inserts rows above the current selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param numRows - Optional. Number of rows to insert.
         */
        insertRowsAbove(numRows: number): void;
        /**
         * Inserts rows below the current selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param numRows - Optional. Number of rows to insert.
         */
        insertRowsBelow(numRows: number): void;
        /**
         * Inserts a symbol in place of the specified selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param characterNumber - The character number of the symbol.
         * @param options - Optional. Options for inserting the symbol.
         */
        insertSymbol(characterNumber: number, options?: Word.SelectionInsertSymbolOptions): void;
        /**
         * Inserts the specified text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param Text - The text to insert.
         */
        insertText(Text: string): void;
        /**
         * Inserts the specified XML into the document at the cursor, replacing any selected text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param xml - The XML string to insert.
         * @param transform - Optional. XSL transform to apply.
         */
        insertXml(xml: string, transform?: string): void;
        /**
         * Returns whether the selection is equal to the specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range to compare.
         * @returns `true` if the selection is equal to the specified range.
         */
        isEqual(range: Word.Range): OfficeExtension.ClientResult<boolean>;
        /**
         * Returns `true` if the selection is contained within the specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range to compare.
         * @returns `true` if the selection is contained within the specified range.
         */
        isInRange(range: Word.Range): OfficeExtension.ClientResult<boolean>;
        /**
         * Returns whether the selection is in the same story as the specified range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range to compare.
         * @returns `true` if the selection is in the same story as the specified range.
         */
        isInStory(range: Word.Range): OfficeExtension.ClientResult<boolean>;
        /**
         * Collapses the selection to its start or end position and then moves the collapsed object by the specified number of units.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for moving the selection.
         * @returns The number of characters by which the selection was moved.
         */
        move(options?: Word.SelectionMoveOptions): OfficeExtension.ClientResult<number>;
        /**
         * Moves the selection down.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for moving down.
         * @returns The number of characters by which the selection was moved.
         */
        moveDown(options?: Word.SelectionMoveUpDownOptions): OfficeExtension.ClientResult<number>;
        /**
         * Moves the ending character position of the range or selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for moving end.
         * @returns The number of characters by which the selection was moved.
         */
        moveEnd(options?: Word.SelectionMoveStartEndOptions): OfficeExtension.ClientResult<number>;
        /**
         * Moves the end position of the selection until any of the specified characters are found in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param characters - Characters to search for. For example. If you specify "a", the selection moves the end position to before the first "a" character.
         * @param count - Optional. Maximum number of characters to search.
         * @returns The number of characters by which the selection was moved.
         */
        moveEndUntil(characters: string, count?: number): OfficeExtension.ClientResult<number>;
        /**
         * Moves the ending character position of the selection while any of the specified characters are found in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param characters - Characters to search for. For example. If you specify "abcd", the selection moves the end position when any letter from "abcd" is found.
         * @param count - Optional. Maximum number of characters to search.
         * @returns The number of characters by which the selection was moved.
         */
        moveEndWhile(characters: string, count?: number): OfficeExtension.ClientResult<number>;
        /**
         * Moves the selection to the left.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for moving left.
         * @returns The number of characters by which the selection was moved.
         */
        moveLeft(options?: Word.SelectionMoveLeftRightOptions): OfficeExtension.ClientResult<number>;
        /**
         * Moves the selection to the right.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for moving right.
         * @returns The number of characters by which the selection was moved.
         */
        moveRight(options?: Word.SelectionMoveLeftRightOptions): OfficeExtension.ClientResult<number>;
        /**
         * Moves the start position of the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for the `moveStart` operation.
         * @returns The number of characters by which the selection was moved.
         */
        moveStart(options?: Word.SelectionMoveStartEndOptions): OfficeExtension.ClientResult<number>;
        /**
         * Moves the start position of the selection until one of the specified characters is found in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param characters - Characters to search for. If you specify "a", the selection moves the start position to before the first "a" character.
         * @param count - Optional. Maximum number of characters to search.
         * @returns The number of characters by which the selection was moved.
         */
        moveStartUntil(characters: string, count?: number): OfficeExtension.ClientResult<number>;
        /**
         * Moves the start position of the selection while any of the specified characters are found in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param characters - Characters to search for. For example. If you specify "abcd", the selection moves the start position when any letter from "abcd" is found.
         * @param count - Optional. Maximum number of characters to search.
         * @returns The number of characters by which the selection was moved.
         */
        moveStartWhile(characters: string, count?: number): OfficeExtension.ClientResult<number>;
        /**
         * Moves the selection until one of the specified characters is found in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param characters - Characters to search for. For example. If you specify "a", the selection moves to the position before the first "a" character.
         * @param count - Optional. Maximum number of characters to search.
         * @returns The number of characters by which the selection was moved.
         */
        moveUntil(characters: string, count?: number): OfficeExtension.ClientResult<number>;
        /**
         * Moves the selection up.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param options - Optional. Options for moving up.
         * @returns The number of characters by which the selection was moved.
         */
        moveUp(options?: Word.SelectionMoveUpDownOptions): OfficeExtension.ClientResult<number>;
        /**
         * Moves the selection while any of the specified characters are found in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param characters - Characters to search for. For example. If you specify "abcd", the selection moves to the position when any letter from "abcd" is found.
         * @param count - Optional. Maximum number of characters to search.
         * @returns The number of characters by which the selection was moved.
         */
        moveWhile(characters: string, count?: number): OfficeExtension.ClientResult<number>;
        /**
         * Selects the next field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         * @returns The next field.
         */
        nextField(): Word.Field;
        /**
         * Moves the selection to the next subdocument.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        nextSubdocument(): void;
        /**
         * Pastes the content from clipboard and formats them as specified.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param type - The format paste type for table cells.
         */
        pasteAndFormat(type: Word.PasteFormatType): void;
        /**
         * Pastes the content from clipboard and formats them as specified.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param type - The format paste type for table cells.
         */
        pasteAndFormat(type: "PasteDefault" | "SingleCellText" | "SingleCellTable" | "ListContinueNumbering" | "ListRestartNumbering" | "TableAppendTable" | "TableInsertAsRows" | "TableOriginalFormatting" | "ChartPicture" | "Chart" | "ChartLinked" | "FormatOriginalFormatting" | "FormatSurroundingFormattingWithEmphasis" | "FormatPlainText" | "TableOverwriteCells" | "ListCombineWithExistingList" | "ListDontMerge" | "UseDestinationStylesRecovery"): void;
        /**
         * Pastes and formats a Microsoft Excel table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param linkedToExcel - Whether the table is linked to Excel.
         * @param wordFormatting - Whether to apply Word formatting.
         * @param rtf - Whether to paste as Rich Text Format (RTF).
         */
        pasteExcelTable(linkedToExcel: boolean, wordFormatting: boolean, rtf: boolean): void;
        /**
         * Applies formatting copied with the `copyFormat` method to the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pasteFormat(): void;
        /**
         * Merges pasted cells into an existing table by inserting the pasted rows between the selected rows.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pasteTableCellsAppendTable(): void;
        /**
         * Pastes a cell or group of cells as a nested table into the selection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pasteTableCellsAsNestedTable(): void;
        /**
         * Selects and returns the previous field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         * @returns The previous field.
         */
        previousField(): Word.Field;
        /**
         * Moves the selection to the previous subdocument.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        previousSubdocument(): void;
        /**
         * Replaces the selection with a new paragraph.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        replaceParagraph(): void;
        /**
         * Selects the current text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        select(): void;
        /**
         * Selects the entire cell containing the current selection when the selection is in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectCell(): void;
        /**
         * Selects the column that contains the insertion point, or selects all columns that contain the selection when the selection is in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectColumn(): void;
        /**
         * Extends the selection forward until text with a different paragraph alignment is encountered.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectCurrentAlignment(): void;
        /**
         * Extends the selection forward until text with a different color is encountered.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectCurrentColor(): void;
        /**
         * Extends the selection forward until text in a different font or font size is encountered.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectCurrentFont(): void;
        /**
         * Extends the selection forward until text with different left or right paragraph indents is encountered.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectCurrentIndent(): void;
        /**
         * Extends the selection forward until a paragraph with different line spacing is encountered.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectCurrentSpacing(): void;
        /**
         * Extends the selection forward until a paragraph with different tab stops is encountered.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectCurrentTabs(): void;
        /**
         * Selects the row that contains the insertion point, or selects all rows that contain the selection when the selection is in a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectRow(): void;
        /**
         * Sets the starting and ending character positions for the selection.
                    Character position values start at the beginning of the story, with the first value being 0. All characters are counted, including nonprinting characters. Hidden characters are counted even if they're not displayed.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param start - The starting character position of the current story.
         * @param end - The ending character position of the current story.
         */
        setRange(start: number, end: number): void;
        /**
         * Shrinks the selection to the next smaller unit of text.
                    The unit progression for this method is as follows: entire document, section, paragraph, sentence, word, insertion point.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        shrink(): void;
        /**
         * Cancels the selection of all but the most recently selected text when the current selection contains multiple, unconnected selections.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        shrinkDiscontiguousSelection(): void;
        /**
         * Inserts an empty paragraph above the first row in the selection.
                    If the selection isn't in the first row of the table, the table is split into two tables. If the selection isn't in a table, an error occurs.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        splitTable(): void;
        /**
         * Switches the selection between a Unicode character and its corresponding hexadecimal value.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        toggleCharacterCode(): void;
        /**
         * Deletes the character preceding the selection (if collapsed) or the insertion point.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        typeBackspace(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.SelectionLoadOptions): Word.Selection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Selection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Selection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Selection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Selection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Selection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.SelectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.SelectionData;
    }
    /**
     * Represents a collection of {@link Word.Range} objects that represents each character, word, or sentence.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class RangeScopedCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Range[];
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.RangeScopedCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.RangeScopedCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.RangeScopedCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.RangeScopedCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.RangeScopedCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.RangeScopedCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.RangeScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.RangeScopedCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.RangeScopedCollectionData;
    }
    /**
     * Specifies the direction in which text flows from one text column to the next.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum FlowDirection {
        /**
         * Text flows from left to right.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        leftToRight = "LeftToRight",
        /**
         * Text flows from right to left.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rightToLeft = "RightToLeft",
    }
    /**
     * Specifies where the gutter appears in the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum GutterPosition {
        /**
         * The gutter appears on the left side of the document.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        left = "Left",
        /**
         * The gutter appears on the right side of the document.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        right = "Right",
        /**
         * The gutter appears at the top of the document.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        top = "Top",
    }
    /**
     * Specifies whether the gutter style should conform to left-to-right text flow or right-to-left text flow.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum GutterStyle {
        /**
         * Gutter style for bidirectional text flow. This is mainly right to left.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bidirectional = "Bidirectional",
        /**
         * Gutter style for Latin text flow. This is mainly left to right.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        latin = "Latin",
    }
    /**
     * Specifies how text is laid out in the layout mode for the current document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum LayoutMode {
        /**
         * Default layout mode.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        default = "Default",
        /**
         * Grid layout mode.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        grid = "Grid",
        /**
         * Line grid layout mode.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        lineGrid = "LineGrid",
        /**
         * Genko layout mode.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        genko = "Genko",
    }
    /**
     * Specifies the numbering rule to apply.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum NumberingRule {
        /**
         * Restart numbering continuously.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        restartContinuous = "RestartContinuous",
        /**
         * Restart numbering at the beginning of each section.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        restartSection = "RestartSection",
        /**
         * Restart numbering at the beginning of each page.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        restartPage = "RestartPage",
    }
    /**
     * Specifies a page layout orientation.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PageOrientation {
        /**
         * Portrait orientation.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        portrait = "Portrait",
        /**
         * Landscape orientation.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        landscape = "Landscape",
    }
    /**
     * Specifies the type of vertical alignment to apply.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PageSetupVerticalAlignment {
        /**
         * Align text to the top.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        top = "Top",
        /**
         * Align text to the center.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        center = "Center",
        /**
         * Justify text vertically.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        justify = "Justify",
        /**
         * Align text to the bottom.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        bottom = "Bottom",
    }
    /**
     * Specifies a paper size.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum PaperSize {
        /**
         * 10x14 paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        size10x14 = "Size10x14",
        /**
         * 11x17 paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        size11x17 = "Size11x17",
        /**
         * Letter paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        letter = "Letter",
        /**
         * Small letter paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        letterSmall = "LetterSmall",
        /**
         * Legal paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        legal = "Legal",
        /**
         * Executive paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        executive = "Executive",
        /**
         * A3 paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        a3 = "A3",
        /**
         * A4 paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        a4 = "A4",
        /**
         * Small A4 paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        a4Small = "A4Small",
        /**
         * A5 paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        a5 = "A5",
        /**
         * B4 paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        b4 = "B4",
        /**
         * B5 paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        b5 = "B5",
        /**
         * C-sheet paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        csheet = "CSheet",
        /**
         * D-sheet paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        dsheet = "DSheet",
        /**
         * E-sheet paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        esheet = "ESheet",
        /**
         * Fanfold legal German paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fanfoldLegalGerman = "FanfoldLegalGerman",
        /**
         * Fanfold standard German paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fanfoldStdGerman = "FanfoldStdGerman",
        /**
         * Fanfold US paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        fanfoldUS = "FanfoldUS",
        /**
         * Folio paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        folio = "Folio",
        /**
         * Ledger paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        ledger = "Ledger",
        /**
         * Note paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        note = "Note",
        /**
         * Quarto paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        quarto = "Quarto",
        /**
         * Statement paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        statement = "Statement",
        /**
         * Tabloid paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        tabloid = "Tabloid",
        /**
         * Envelope size 9.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelope9 = "Envelope9",
        /**
         * Envelope size 10.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelope10 = "Envelope10",
        /**
         * Envelope size 11.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelope11 = "Envelope11",
        /**
         * Envelope size 12.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelope12 = "Envelope12",
        /**
         * Envelope size 14.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelope14 = "Envelope14",
        /**
         * Envelope B4 size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeB4 = "EnvelopeB4",
        /**
         * Envelope B5 size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeB5 = "EnvelopeB5",
        /**
         * Envelope B6 size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeB6 = "EnvelopeB6",
        /**
         * Envelope C3 size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeC3 = "EnvelopeC3",
        /**
         * Envelope C4 size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeC4 = "EnvelopeC4",
        /**
         * Envelope C5 size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeC5 = "EnvelopeC5",
        /**
         * Envelope C6 size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeC6 = "EnvelopeC6",
        /**
         * Envelope C65 size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeC65 = "EnvelopeC65",
        /**
         * Envelope DL size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeDL = "EnvelopeDL",
        /**
         * Envelope Italy size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeItaly = "EnvelopeItaly",
        /**
         * Envelope Monarch size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopeMonarch = "EnvelopeMonarch",
        /**
         * Envelope Personal size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        envelopePersonal = "EnvelopePersonal",
        /**
         * Custom paper size.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        custom = "Custom",
    }
    /**
     * Specifies how Word displays the reading order and alignment for the specified sections.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum SectionDirection {
        /**
         * Right-to-left reading order.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        rightToLeft = "RightToLeft",
        /**
         * Left-to-right reading order.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        leftToRight = "LeftToRight",
    }
    /**
     * Specifies the type of section break for the specified item.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.3]
     */
    enum SectionStart {
        /**
         * Continuous section break.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        continuous = "Continuous",
        /**
         * New column section break.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        newColumn = "NewColumn",
        /**
         * New page section break.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        newPage = "NewPage",
        /**
         * Even page section break.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        evenPage = "EvenPage",
        /**
         * Odd page section break.
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        oddPage = "OddPage",
    }
    /**
     * Specifies how a table is resized to fit its contents or the window.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum AutoFitBehavior {
        /**
         * Disables automatic resizing. The table retains its current size.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fixedSize = "FixedSize",
        /**
         * Automatically resizes the table columns to fit the contents.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        content = "Content",
        /**
         * Automatically resizes the table to fit the window width.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        window = "Window",
    }
    /**
     * Specifies the type of bidirectional calendar to use.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum CalendarTypeBidirectional {
        /**
         * Uses the Gregorian calendar.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        gregorian = "Gregorian",
        /**
         * Uses the Bidirectional calendar.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bidirectional = "Bidirectional",
    }
    /**
     * Specifies the position of a caption relative to the object it describes.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum CaptionPosition {
        /**
         * Places the caption above the selected item.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        above = "Above",
        /**
         * Places the caption below the selected item.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        below = "Below",
    }
    /**
     * Specifies the direction in which to collapse a selection.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum CollapseDirection {
        /**
         * Collapses the selection to the start position.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        start = "Start",
        /**
         * Collapses the selection to the end position.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        end = "End",
    }
    /**
     * Specifies the language to use for date formatting.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum DateLanguage {
        /**
         * Uses the bidirectional date/time format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bidirectional = "Bidirectional",
        /**
         * Uses the latin date/time format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        latin = "Latin",
    }
    /**
     * Specifies the font bias to use when formatting East Asian text.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum FontBias {
        /**
         * Uses the default font bias.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        standard = "Standard",
        /**
         * Uses the font bias for Far East text.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        farEast = "FarEast",
        /**
         * No font bias specified.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        noSpecified = "NoSpecified",
    }
    /**
     * Specifies the direction in which to move when using the {@link Word.Selection | Selection.goTo} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum GoToDirection {
        /**
         * Moves to the first item.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        first = "First",
        /**
         * Moves to the last item.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        last = "Last",
        /**
         * Moves to the next item.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        next = "Next",
        /**
         * Moves to the previous item.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        previous = "Previous",
    }
    /**
     * Specifies the item or location to which to move or extend a {@link Word.Selection | selection}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum GoToItem {
        /**
         * Moves to a bookmark.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bookmark = "Bookmark",
        /**
         * Moves to a comment.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        comment = "Comment",
        /**
         * Moves to a endnote.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnote = "Endnote",
        /**
         * Moves to a field.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        field = "Field",
        /**
         * Moves to a footnote.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnote = "Footnote",
        /**
         * Moves to a graphic.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        graphic = "Graphic",
        /**
         * Moves to a heading.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        heading = "Heading",
        /**
         * Moves to a line.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        line = "Line",
        /**
         * Moves to a page.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        page = "Page",
        /**
         * Moves to a section.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        section = "Section",
        /**
         * Moves to a table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        table = "Table",
        /**
         * Moves to an embedded object.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        embeddedObject = "EmbeddedObject",
        /**
         * Moves to an equation.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        equation = "Equation",
        /**
         * Moves to a percent.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        percent = "Percent",
        /**
         * Moves to a spelling error.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        spellingError = "SpellingError",
        /**
         * Moves to a grammatical error.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grammaticalError = "GrammaticalError",
        /**
         * Moves to a proofreading error.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        proofreadingError = "ProofreadingError",
    }
    /**
     * Specifies the type of movement when navigating through a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum MovementType {
        /**
         * Moves the insertion point or selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        move = "Move",
        /**
         * Extends the selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        extend = "Extend",
    }
    /**
     * Specifies the unit of measurement used in Word operations.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum OperationUnit {
        /**
         * Specifies a character unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        character = "Character",
        /**
         * Specifies a word unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        word = "Word",
        /**
         * Specifies a sentence unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sentence = "Sentence",
        /**
         * Specifies a paragraph unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        paragraph = "Paragraph",
        /**
         * Specifies a line unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        line = "Line",
        /**
         * Specifies a story unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        story = "Story",
        /**
         * Specifies a screen unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        screen = "Screen",
        /**
         * Specifies a section unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        section = "Section",
        /**
         * Specifies a column unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        column = "Column",
        /**
         * Specifies a row unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        row = "Row",
        /**
         * Specifies a window unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        window = "Window",
        /**
         * Specifies a cell unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        cell = "Cell",
        /**
         * Specifies a character format unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        characterFormat = "CharacterFormat",
        /**
         * Specifies a paragraph format unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        paragraphFormat = "ParagraphFormat",
        /**
         * Specifies a table unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        table = "Table",
        /**
         * Specifies an item unit.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        item = "Item",
    }
    /**
     * Specifies the type of formatting when paste to a document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum PasteFormatType {
        /**
         * Uses the default paste behavior.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        pasteDefault = "PasteDefault",
        /**
         * Pastes text into a single cell.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        singleCellText = "SingleCellText",
        /**
         * Pastes a table into a single cell.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        singleCellTable = "SingleCellTable",
        /**
         * Continues numbering from the previous list.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        listContinueNumbering = "ListContinueNumbering",
        /**
         * Restarts numbering for the new list.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        listRestartNumbering = "ListRestartNumbering",
        /**
         * Appends the pasted table to the existing table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableAppendTable = "TableAppendTable",
        /**
         * Inserts the pasted table as new rows.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableInsertAsRows = "TableInsertAsRows",
        /**
         * Inserts the pasted table with its original formatting.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableOriginalFormatting = "TableOriginalFormatting",
        /**
         * Pastes a chart as a picture.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        chartPicture = "ChartPicture",
        /**
         * Pastes a chart as an editable chart.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        chart = "Chart",
        /**
         * Pastes a chart with a link to the source data.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        chartLinked = "ChartLinked",
        /**
         * Applies the original formatting of the pasted content.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formatOriginalFormatting = "FormatOriginalFormatting",
        /**
         * Applies surrounding formatting with emphasis.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formatSurroundingFormattingWithEmphasis = "FormatSurroundingFormattingWithEmphasis",
        /**
         * Pastes content as plain text.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formatPlainText = "FormatPlainText",
        /**
         * Overwrites existing cells with the pasted table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tableOverwriteCells = "TableOverwriteCells",
        /**
         * Combines the pasted list with an existing list.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        listCombineWithExistingList = "ListCombineWithExistingList",
        /**
         * Prevents merging the pasted list with an existing list.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        listDontMerge = "ListDontMerge",
        /**
         * Uses the destination styles for the pasted content.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        useDestinationStylesRecovery = "UseDestinationStylesRecovery",
    }
    /**
     * Specifies the type of reference to insert.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ReferenceType {
        /**
         * Refers to a numbered item in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        numberedItem = "NumberedItem",
        /**
         * Refers to a heading in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        heading = "Heading",
        /**
         * Refers to a bookmark in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bookmark = "Bookmark",
        /**
         * Refers to a footnote in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnote = "Footnote",
        /**
         * Refers to an endnote in the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnote = "Endnote",
    }
    /**
     * Specifies the type of selection in the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum SelectionType {
        /**
         * No selection is made.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        noSelection = "NoSelection",
        /**
         * Represents an insertion point (IP) selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        insertionPoint = "InsertionPoint",
        /**
         * Represents a normal selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        normal = "Normal",
        /**
         * Represents a frame selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        frame = "Frame",
        /**
         * Represents a column selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        column = "Column",
        /**
         * Represents a row selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        row = "Row",
        /**
         * Represents a block selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        block = "Block",
        /**
         * Represents an inline shape selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        inlineShape = "InlineShape",
        /**
         * Represents a shape selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        selectionShape = "SelectionShape",
    }
    /**
     * Specifies the type of field to sort by.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum SortFieldType {
        /**
         * Sorts content alphanumerically.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        alphanumeric = "Alphanumeric",
        /**
         * Sorts content numerically.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        numeric = "Numeric",
        /**
         * Sorts content by date.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        date = "Date",
        /**
         * Sorts content by syllables.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        syllable = "Syllable",
        /**
         * Sorts content using the Japanese JIS standard.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        japanJis = "JapanJis",
        /**
         * Sorts content by stroke count.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        stroke = "Stroke",
        /**
         * Sorts content using the Korean KS standard.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        koreaKs = "KoreaKs",
    }
    /**
     * Specifies the sort order.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum SortOrder {
        /**
         * Sorts in ascending order.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ascending = "Ascending",
        /**
         * Sorts in descending order.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        descending = "Descending",
    }
    /**
     * Specifies where and what type of cells to add to an existing table.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TableCellInsertionLocation {
        /**
         * Inserts new cells to the left of the selected cells.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        shiftRight = "ShiftRight",
        /**
         * Inserts new cells above the selected cells.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        shiftDown = "ShiftDown",
        /**
         * Inserts an entire row above the row that contains the selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        shiftRowDown = "ShiftRowDown",
        /**
         * Inserts an entire column to the left of the column that contains the selection.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        shiftColumnRight = "ShiftColumnRight",
    }
    /**
     * Specifies the orientation of text in a text frame or shape.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TextOrientation {
        /**
         * Text is horizontal.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        horizontal = "Horizontal",
        /**
         * Text is vertical with letters rotated 90 degrees clockwise.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        upward = "Upward",
        /**
         * Text is vertical with letters rotated 90 degrees counterclockwise.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        downward = "Downward",
        /**
         * Text is vertical and reads downward from the top, right to left.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        verticalFarEast = "VerticalFarEast",
        /**
         * Text is horizontal but from right to left to accommodate right-to-left languages.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        horizontalRotatedFarEast = "HorizontalRotatedFarEast",
        /**
         * Text is vertical and reads downward from the top, left to right.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        vertical = "Vertical",
    }
    /**
     * Represents a single bookmark in a document, selection, or range. The `Bookmark` object is a member of the `Bookmark` collection.
                The {@link Word.BookmarkCollection} includes all the bookmarks listed in the **Bookmark** dialog box (**Insert** menu).
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class Bookmark extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `Range` object that represents the portion of the document that's contained in the `Bookmark` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Specifies the ending character position of the bookmark.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        end: number;
        /**
         * Returns `true` if the bookmark is a table column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isColumn: boolean;
        /**
         * Returns `true` if the bookmark is empty.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly isEmpty: boolean;
        /**
         * Returns the name of the `Bookmark` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly name: string;
        /**
         * Specifies the starting character position of the bookmark.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        start: number;
        /**
         * Returns the story type for the bookmark.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly storyType: Word.StoryType | "MainText" | "Footnotes" | "Endnotes" | "Comments" | "TextFrame" | "EvenPagesHeader" | "PrimaryHeader" | "EvenPagesFooter" | "PrimaryFooter" | "FirstPageHeader" | "FirstPageFooter" | "FootnoteSeparator" | "FootnoteContinuationSeparator" | "FootnoteContinuationNotice" | "EndnoteSeparator" | "EndnoteContinuationSeparator" | "EndnoteContinuationNotice";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.BookmarkUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Bookmark): void;
        /**
         * Copies this bookmark to the new bookmark specified in the `name` argument and returns a `Bookmark` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param name - The name of the new bookmark.
         */
        copyTo(name: string): Word.Bookmark;
        /**
         * Deletes the bookmark.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Selects the bookmark.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        select(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BookmarkLoadOptions): Word.Bookmark;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Bookmark;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Bookmark;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Bookmark;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Bookmark;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Bookmark` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BookmarkData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.BookmarkData;
    }
    /**
     * A collection of {@link Word.Bookmark} objects that represent the bookmarks in the specified selection, range, or document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class BookmarkCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Bookmark[];
        /**
         * Determines whether the specified bookmark exists.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param name - A bookmark name than cannot include more than 40 characters or more than one word.
         * @returns `true` if the bookmark exists.
         */
        exists(name: string): OfficeExtension.ClientResult<boolean>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.BookmarkCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.BookmarkCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.BookmarkCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.BookmarkCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.BookmarkCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.BookmarkCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.BookmarkCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BookmarkCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.BookmarkCollectionData;
    }
    /**
     * Specifies the type of story in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum StoryType {
        /**
         * Main text story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        mainText = "MainText",
        /**
         * Footnotes story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnotes = "Footnotes",
        /**
         * Endnotes story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnotes = "Endnotes",
        /**
         * Comments story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        comments = "Comments",
        /**
         * Text frame story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        textFrame = "TextFrame",
        /**
         * Even pages header story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenPagesHeader = "EvenPagesHeader",
        /**
         * Primary header story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        primaryHeader = "PrimaryHeader",
        /**
         * Even pages footer story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenPagesFooter = "EvenPagesFooter",
        /**
         * Primary footer story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        primaryFooter = "PrimaryFooter",
        /**
         * First page header story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        firstPageHeader = "FirstPageHeader",
        /**
         * First page footer story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        firstPageFooter = "FirstPageFooter",
        /**
         * Footnote separator story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnoteSeparator = "FootnoteSeparator",
        /**
         * Footnote continuation separator story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnoteContinuationSeparator = "FootnoteContinuationSeparator",
        /**
         * Footnote continuation notice story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        footnoteContinuationNotice = "FootnoteContinuationNotice",
        /**
         * Endnote separator story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnoteSeparator = "EndnoteSeparator",
        /**
         * Endnote continuation separator story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnoteContinuationSeparator = "EndnoteContinuationSeparator",
        /**
         * Endnote continuation notice story.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        endnoteContinuationNotice = "EndnoteContinuationNotice",
    }
    /**
     * Represents a single index. The `Index` object is a member of the {@link Word.IndexCollection}. The `IndexCollection` includes all the
                indexes in the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class Index extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `Range` object that represents the portion of the document that is contained within the index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly range: Word.Range;
        /**
         * Gets a value that represents how Microsoft Word classifies the first character of entries in the index.
                    See `IndexFilter` for available values.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly filter: Word.IndexFilter | "None" | "Aiueo" | "Akasatana" | "Chosung" | "Low" | "Medium" | "Full";
        /**
         * Gets the text between alphabetical groups (entries that start with the same letter) in the index. Corresponds to
                    the **\h** switch for an {@link https://support.microsoft.com/office/adafcf4a-cb30-43f6-85c7-743da1635d9e | INDEX field}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly headingSeparator: Word.HeadingSeparator | "None" | "BlankLine" | "Letter" | "LetterLow" | "LetterFull";
        /**
         * Gets a `LanguageId` value that represents the sorting language to use for the index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly indexLanguage: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * Gets the number of columns for each page of the index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly numberOfColumns: number;
        /**
         * Specifies if page numbers are aligned with the right margin in the index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly rightAlignPageNumbers: boolean;
        /**
         * Gets if the index contains separate headings for accented letters (for example, words that begin with "À" are under
                    one heading and words that begin with "A" are under another).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly separateAccentedLetterHeadings: boolean;
        /**
         * Specifies the sorting criteria for the index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly sortBy: Word.IndexSortBy | "Stroke" | "Syllable";
        /**
         * Specifies the leader character between entries in the index and their associated page numbers.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tabLeader: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
        /**
         * Gets the index type.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly type: Word.IndexType | "Indent" | "Runin";
        /**
         * Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        set(properties: Interfaces.IndexUpdateData, options?: OfficeExtension.UpdateOptions): void;
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Word.Index): void;
        /**
         * Deletes this index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.IndexLoadOptions): Word.Index;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.Index;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.Index;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.Index;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.Index;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.Index` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.IndexData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.IndexData;
    }
    /**
     * A collection of {@link Word.Index} objects that represents all the indexes in the document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class IndexCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.Index[];
        /**
         * Returns an `Index` object that represents a new index added to the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range where you want the index to appear. The index replaces the range, if the range is not collapsed.
         * @param indexAddOptions - Optional. The options for adding the index.
         */
        add(range: Word.Range, indexAddOptions?: Word.IndexAddOptions): Word.Index;
        /**
         * Gets the `IndexFormat` value that represents the formatting for the indexes in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        getFormat(): OfficeExtension.ClientResult<Word.IndexFormat>;
        /**
         * Inserts an {@link https://support.microsoft.com/office/abaf7c78-6e21-418d-bf8b-f8186d2e4d08 | XE (Index Entry) field} after all instances of the text in the range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param range - The range whose text is marked with an `XE` field throughout the document.
         * @param markAllEntriesOptions - Optional. The options for marking all entries.
         */
        markAllEntries(range: Word.Range, markAllEntriesOptions?: Word.IndexMarkAllEntriesOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.IndexCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.IndexCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.IndexCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.IndexCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.IndexCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.IndexCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.IndexCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.IndexCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.IndexCollectionData;
    }
    /**
     * Represents options for creating an index in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface IndexAddOptions {
        /**
         * If provided, specifies the text between alphabetical groups (entries that start with the same letter) in the index.
                    See `HeadingSeparator` for available values. The default value is `blankLine`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        headingSeparator?: Word.HeadingSeparator | "None" | "BlankLine" | "Letter" | "LetterLow" | "LetterFull";
        /**
         * If provided, specifies the sorting language to be used for the index being added.
                    See `LanguageId` for available values. The default value is the installed language of the Word application.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        indexLanguage?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * If provided, specifies the number of columns for each page of the index.
                    Specifying 0 (zero) sets the number of columns in the index to the same number as in the document. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        numberOfColumns?: number;
        /**
         * If provided, specifies whether the page numbers in the generated index are aligned with the right margin. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rightAlignPageNumbers?: boolean;
        /**
         * If provided, specifies whether to include separate headings for accented letters in the index. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        separateAccentedLetterHeadings?: boolean;
        /**
         * If provided, specifies the sorting criteria to be used for the index being added. Can be either of the following `IndexSortBy` values: `stroke` or `syllable`. The default value is `stroke`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sortBy?: Word.IndexSortBy | "Stroke" | "Syllable";
        /**
         * If provided, specifies whether subentries are on the same line (run-in) as the main entry or on a separate line (indented) from the main entry.
                    Can be either of the following `IndexType` values: `indent` or `runin`. The default value is `indent`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        type?: Word.IndexType | "Indent" | "Runin";
    }
    /**
     * Represents options for marking all index entries in a Word document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface IndexMarkAllEntriesOptions {
        /**
         * If provided, specifies whether to add bold formatting to page numbers for index entries. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bold?: boolean;
        /**
         * If provided, specifies the bookmark name that marks the range of pages you want to appear in the index. If this property is omitted, the number of the page that contains the `XE` field appears in the index. The default value is "".
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bookmarkName?: string;
        /**
         * If provided, specifies the cross-reference that will appear in the index. The default value is "".
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        crossReference?: string;
        /**
         * If provided, specifies the name of the `AutoText` entry that contains the text for a cross-reference (if this property is specified, `crossReference` is ignored). The default value is "".
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        crossReferenceAutoText?: string;
        /**
         * If provided, specifies the text you want to appear in the index, in the form `MainEntry[:Subentry]`. The default value is "".
                    Either this property or `entryAutoText` must be provided.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        entry?: string;
        /**
         * If provided, specifies the `AutoText` entry that contains the text you want to appear in the index (if this property is specified, `entry` is ignored). The default value is "".
                    Either this property or `entry` must be provided.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        entryAutoText?: string;
        /**
         * If provided, specifies whether to add italic formatting to page numbers for index entries. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        italic?: boolean;
    }
    /**
     * Specifies the type of separator to use for headings.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum HeadingSeparator {
        /**
         * No separator is used for headings.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * A blank line is used as a separator for headings.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        blankLine = "BlankLine",
        /**
         * A single letter is used as a separator for headings.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        letter = "Letter",
        /**
         * A lowercase letter is used as a separator for headings.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        letterLow = "LetterLow",
        /**
         * A full-width letter is used as a separator for headings.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        letterFull = "LetterFull",
    }
    /**
     * Represents the position of a dropped capital letter.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum DropPosition {
        /**
         * Represents that there's no dropped capital letter.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Represents a normal dropped capital letter.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        normal = "Normal",
        /**
         * Represents a dropped capital letter in the margin.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        margin = "Margin",
    }
    /**
     * Represents the alignment of a tab stop.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TabAlignment {
        /**
         * Represents that the tab stop is aligned to the left.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        left = "Left",
        /**
         * Represents that the tab stop is aligned to the center.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        center = "Center",
        /**
         * Represents that the tab stop is aligned to the right.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        right = "Right",
        /**
         * Represents that the tab stop is aligned to the decimal point.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        decimal = "Decimal",
        /**
         * Represents that the tab stop is aligned to the bar.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bar = "Bar",
        /**
         * Represents that the tab stop is aligned to the list.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list = "List",
    }
    /**
     * Specifies the filter type for an index.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum IndexFilter {
        /**
         * No filter is applied.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Aiueo filter is applied.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        aiueo = "Aiueo",
        /**
         * Akasatana filter is applied.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        akasatana = "Akasatana",
        /**
         * Chosung filter is applied.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        chosung = "Chosung",
        /**
         * Low filter is applied.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        low = "Low",
        /**
         * Medium filter is applied.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        medium = "Medium",
        /**
         * Full filter is applied.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        full = "Full",
    }
    /**
     * Specifies the format for an index.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum IndexFormat {
        /**
         * Template format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        template = "Template",
        /**
         * Classic format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        classic = "Classic",
        /**
         * Fancy format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fancy = "Fancy",
        /**
         * Modern format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        modern = "Modern",
        /**
         * Bulleted format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bulleted = "Bulleted",
        /**
         * Formal format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formal = "Formal",
        /**
         * Simple format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        simple = "Simple",
    }
    /**
     * Specifies how an index is sorted.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum IndexSortBy {
        /**
         * Sort by stroke.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        stroke = "Stroke",
        /**
         * Sort by syllable.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        syllable = "Syllable",
    }
    /**
     * Specifies the type of index to create.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum IndexType {
        /**
         * Creates an indented index.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        indent = "Indent",
        /**
         * Creates a run-in index.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        runin = "Runin",
    }
    /**
     * Specifies the tab leader style.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TabLeader {
        /**
         * Spaces are used as the tab leader.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        spaces = "Spaces",
        /**
         * Dots are used as the tab leader.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        dots = "Dots",
        /**
         * Dashes are used as the tab leader.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        dashes = "Dashes",
        /**
         * Lines are used as the tab leader.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lines = "Lines",
        /**
         * Heavy lines are used as the tab leader.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        heavy = "Heavy",
        /**
         * Middle dots are used as the tab leader.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        middleDot = "MiddleDot",
    }
    /**
     * Specifies the area of a table to which to apply special style formatting.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ConditionCode {
        /**
         * Applies formatting to the first row in a table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        firstRow = "FirstRow",
        /**
         * Applies formatting to the last row in a table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lastRow = "LastRow",
        /**
         * Applies formatting to odd-numbered rows.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oddRowBanding = "OddRowBanding",
        /**
         * Applies formatting to even-numbered rows.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenRowBanding = "EvenRowBanding",
        /**
         * Applies formatting to the first column in a table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        firstColumn = "FirstColumn",
        /**
         * Applies formatting to the last column in a table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        lastColumn = "LastColumn",
        /**
         * Applies formatting to odd-numbered columns.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        oddColumnBanding = "OddColumnBanding",
        /**
         * Applies formatting to even-numbered columns.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        evenColumnBanding = "EvenColumnBanding",
        /**
         * Applies formatting to the last cell in the first row.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        topRightCell = "TopRightCell",
        /**
         * Applies formatting to the first cell in the first row.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        topLeftCell = "TopLeftCell",
        /**
         * Applies formatting to the last cell in the table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bottomRightCell = "BottomRightCell",
        /**
         * Applies formatting to first cell in the last row of the table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bottomLeftCell = "BottomLeftCell",
    }
    /**
     * Specifies a range of cells to be deleted from a table in a delete cells action or the behavior of the remaining cells after the deletion has occurred.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum DeleteCells {
        /**
         * Shift remaining cells left in the row where the deletion occurred after a cell or range of cells has been deleted.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        shiftLeft = "ShiftLeft",
        /**
         * Shift remaining cells up in the column where the deletion occurred after a cell or range of cells has been deleted.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        shiftUp = "ShiftUp",
        /**
         * Delete the entire row of cells from the table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        entireRow = "EntireRow",
        /**
         * Delete the entire column of cells from the table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        entireColumn = "EntireColumn",
    }
    /**
     * Specifies the rule for determining the height of the specified cells or rows.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum RowHeightRule {
        /**
         * The row height is adjusted to accommodate the tallest value in the row.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        auto = "Auto",
        /**
         * The row height is set to a minimum value.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        atLeast = "AtLeast",
        /**
         * The row height is set to an exact value.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        exactly = "Exactly",
    }
    /**
     * Specifies the direction in which Microsoft Word orders cells in the specified table or row.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TableDirection {
        /**
         * The table is arranged with the first column in the rightmost position.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        rightToLeft = "RightToLeft",
        /**
         * The table is arranged with the first column in the leftmost position.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        leftToRight = "LeftToRight",
    }
    /**
     * Specifies the character used to separate fields in a table.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TableFieldSeparator {
        /**
         * Uses the paragraph marker.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        paragraph = "Paragraph",
        /**
         * Uses the tab.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        tab = "Tab",
        /**
         * Uses the comma.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        comma = "Comma",
        /**
         * Uses the default list separator.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        defaultListSeparator = "DefaultListSeparator",
    }
    /**
     * Specifies the table format to apply.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum TableFormatType {
        /**
         * Applies no formatting to the table.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Applies the Simple1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        simple1 = "Simple1",
        /**
         * Applies the Simple2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        simple2 = "Simple2",
        /**
         * Applies the Simple3 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        simple3 = "Simple3",
        /**
         * Applies the Classic1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        classic1 = "Classic1",
        /**
         * Applies the Classic2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        classic2 = "Classic2",
        /**
         * Applies the Classic3 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        classic3 = "Classic3",
        /**
         * Applies the Classic4 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        classic4 = "Classic4",
        /**
         * Applies the Colorful1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        colorful1 = "Colorful1",
        /**
         * Applies the Colorful2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        colorful2 = "Colorful2",
        /**
         * Applies the Colorful3 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        colorful3 = "Colorful3",
        /**
         * Applies the Columns1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        columns1 = "Columns1",
        /**
         * Applies the Columns2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        columns2 = "Columns2",
        /**
         * Applies the Columns3 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        columns3 = "Columns3",
        /**
         * Applies the Columns4 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        columns4 = "Columns4",
        /**
         * Applies the Columns5 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        columns5 = "Columns5",
        /**
         * Applies the Grid1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grid1 = "Grid1",
        /**
         * Applies the Grid2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grid2 = "Grid2",
        /**
         * Applies the Grid3 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grid3 = "Grid3",
        /**
         * Applies the Grid4 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grid4 = "Grid4",
        /**
         * Applies the Grid5 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grid5 = "Grid5",
        /**
         * Applies the Grid6 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grid6 = "Grid6",
        /**
         * Applies the Grid7 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grid7 = "Grid7",
        /**
         * Applies the Grid8 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        grid8 = "Grid8",
        /**
         * Applies the List1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list1 = "List1",
        /**
         * Applies the List2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list2 = "List2",
        /**
         * Applies the List3 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list3 = "List3",
        /**
         * Applies the List4 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list4 = "List4",
        /**
         * Applies the List5 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list5 = "List5",
        /**
         * Applies the List6 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list6 = "List6",
        /**
         * Applies the List7 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list7 = "List7",
        /**
         * Applies the List8 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        list8 = "List8",
        /**
         * Applies the 3D Effects1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        threeDEffects1 = "ThreeDEffects1",
        /**
         * Applies the 3D Effects2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        threeDEffects2 = "ThreeDEffects2",
        /**
         * Applies the 3D Effects3 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        threeDEffects3 = "ThreeDEffects3",
        /**
         * Applies the Contemporary table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        contemporary = "Contemporary",
        /**
         * Applies the Elegant table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        elegant = "Elegant",
        /**
         * Applies the Professional table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        professional = "Professional",
        /**
         * Applies the Subtle1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        subtle1 = "Subtle1",
        /**
         * Applies the Subtle2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        subtle2 = "Subtle2",
        /**
         * Applies the Web1 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        web1 = "Web1",
        /**
         * Applies the Web2 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        web2 = "Web2",
        /**
         * Applies the Web3 table format.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        web3 = "Web3",
    }
    /**
     * Represents the options for the {@link Word.Table | Table.autoFormat} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableAutoFormatOptions {
        /**
         * If provided, specifies whether to apply borders of the specified format. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        applyBorders?: boolean;
        /**
         * If provided, specifies whether to apply color of the specified format. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        applyColor?: boolean;
        /**
         * If provided, specifies whether to apply first column formatting of the specified format. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        applyFirstColumn?: boolean;
        /**
         * If provided, specifies whether to apply font of the specified format. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        applyFont?: boolean;
        /**
         * If provided, specifies whether to apply heading row formatting of the specified format. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        applyHeadingRows?: boolean;
        /**
         * If provided, specifies whether to apply last column formatting of the specified format. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        applyLastColumn?: boolean;
        /**
         * If provided, specifies whether to apply last row formatting of the specified format. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        applyLastRow?: boolean;
        /**
         * If provided, specifies whether to apply shading of the specified format. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        applyShading?: boolean;
        /**
         * If provided, specifies whether to decrease the width of the table columns as much as possible without changing the way text wraps in the cells. The default value is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        autoFit?: boolean;
        /**
         * If provided, specifies the format to apply. The default value is `simple1`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        format?: Word.TableFormatType | "None" | "Simple1" | "Simple2" | "Simple3" | "Classic1" | "Classic2" | "Classic3" | "Classic4" | "Colorful1" | "Colorful2" | "Colorful3" | "Columns1" | "Columns2" | "Columns3" | "Columns4" | "Columns5" | "Grid1" | "Grid2" | "Grid3" | "Grid4" | "Grid5" | "Grid6" | "Grid7" | "Grid8" | "List1" | "List2" | "List3" | "List4" | "List5" | "List6" | "List7" | "List8" | "ThreeDEffects1" | "ThreeDEffects2" | "ThreeDEffects3" | "Contemporary" | "Elegant" | "Professional" | "Subtle1" | "Subtle2" | "Web1" | "Web2" | "Web3";
    }
    /**
     * Represents the options for the {@link Word.TableCellCollection | TableCellCollection.split} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableCellCollectionSplitOptions {
        /**
         * If provided, specifies whether to merge the cells with one another before splitting them. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        mergeBeforeSplit?: boolean;
        /**
         * If provided, specifies the number of columns that the group of cells is to be split into. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        numColumns?: number;
        /**
         * If provided, specifies the number of rows that the group of cells is to be split into. The default value is 1.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        numRows?: number;
    }
    /**
     * Represents the options for the {@link Word.TableCell | TableCell.formula} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableCellFormulaOptions {
        /**
         * If provided, specifies the mathematical formula you want the = (Formula) field to evaluate. Spreadsheet-type references to table cells are valid. For example, "=SUM(A4:C4)" specifies the first three values in the fourth row. For more information about the = (Formula) field, see {@link https://support.microsoft.com/office/32d5c9de-3516-4ec3-80ed-d1fc2b5bc21d | Field codes: = (Formula) field}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        formula?: string;
        /**
         * If provided, specifies a format for the result of the {@link https://support.microsoft.com/office/32d5c9de-3516-4ec3-80ed-d1fc2b5bc21d | = (Formula) field}. For information about the types of formats you can apply, see the Numeric Picture (#) field switch.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        numFormat?: string;
    }
    /**
     * Represents the options for the {@link Word.Table | Table.convertToText}, {@link Word.TableRow | TableRow.convertToText}, and {@link Word.TableRowCollection | TableRowCollection.convertToText} methods.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableConvertToTextOptions {
        /**
         * If provided, specifies whether to convert the nested tables to text. This property is ignored if the `separator` property isn't set to `paragraph`. The default is `true`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        nestedTables?: boolean;
        /**
         * If provided, specifies the character that delimits the converted columns (paragraph marks delimit the converted rows). The default is `tab`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        separator?: Word.TableFieldSeparator | "Paragraph" | "Tab" | "Comma" | "DefaultListSeparator";
    }
    /**
     * Represents the options for the {@link Word.Table | Table.sort} method.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export interface TableSortOptions {
        /**
         * If provided, specifies whether to use bidirectional sort. `true` means to sort based on right-to-left language rules. This property may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bidirectionalSort?: boolean;
        /**
         * If provided, specifies whether sorting is case-sensitive. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        caseSensitive?: boolean;
        /**
         * If provided, specifies whether to exclude the header row from the sort operation. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        excludeHeader?: boolean;
        /**
         * If provided, specifies the first field to sort by. Microsoft Word sorts by `fieldNumber`, then by `fieldNumber2`, and finally by `fieldNumber3`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fieldNumber?: string;
        /**
         * If provided, specifies the second field to sort by.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fieldNumber2?: string;
        /**
         * If provided, specifies the third field to sort by.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        fieldNumber3?: string;
        /**
         * If provided, specifies whether to ignore Arabic character alef lam when sorting right-to-left language text. This property may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ignoreArabicThe?: boolean;
        /**
         * If provided, specifies whether to ignore bidirectional control characters when sorting right-to-left language text. This property may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ignoreDiacritics?: boolean;
        /**
         * If provided, specifies whether to ignore Hebrew characters when sorting right-to-left language text. This property may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ignoreHebrew?: boolean;
        /**
         * If provided, specifies whether to ignore kashida when sorting right-to-left language text. This property may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed. The default value is `false`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ignoreKashida?: boolean;
        /**
         * If provided, specifies the sorting language.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        languageId?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        /**
         * If provided, specifies the type of the first field to sort by. The default value is `alphanumeric`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sortFieldType?: Word.SortFieldType | "Alphanumeric" | "Numeric" | "Date" | "Syllable" | "JapanJis" | "Stroke" | "KoreaKs";
        /**
         * If provided, specifies the type of the second field to sort by. The default value is `alphanumeric`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sortFieldType2?: Word.SortFieldType | "Alphanumeric" | "Numeric" | "Date" | "Syllable" | "JapanJis" | "Stroke" | "KoreaKs";
        /**
         * If provided, specifies the type of the third field to sort by. The default value is `alphanumeric`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sortFieldType3?: Word.SortFieldType | "Alphanumeric" | "Numeric" | "Date" | "Syllable" | "JapanJis" | "Stroke" | "KoreaKs";
        /**
         * If provided, specifies the sort order of the first field to sort by. The default value is `ascending`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sortOrder?: Word.SortOrder | "Ascending" | "Descending";
        /**
         * If provided, specifies the sort order of the second field to sort by. The default value is `ascending`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sortOrder2?: Word.SortOrder | "Ascending" | "Descending";
        /**
         * If provided, specifies the sort order of the third field to sort by. The default value is `ascending`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        sortOrder3?: Word.SortOrder | "Ascending" | "Descending";
    }
    /**
     * Represents a list of the names of all the available fonts.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class FontNameCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns the number of items in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        getCount(): OfficeExtension.ClientResult<number>;
        /**
         * Gets the font name at the specified index.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param index - The zero-based index of the item to retrieve.
         */
        getItemAt(index: number): OfficeExtension.ClientResult<string>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.FontNameCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.FontNameCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.FontNameCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.FontNameCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.FontNameCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.FontNameCollectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     * Contains a collection of {@link Word.ListTemplate} objects in a document, list template gallery, or document template.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class ListTemplateCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.ListTemplate[];
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        load(options?: Word.Interfaces.ListTemplateCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ListTemplateCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListTemplateCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ListTemplateCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListTemplateCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListTemplateCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListTemplateCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListTemplateCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ListTemplateCollectionData;
    }
    /**
     * Represents a gallery of list templates of the same {@link Word.ListTemplateGalleryType}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class ListTemplateGallery extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Returns a `ListTemplateCollection` object that represents all the list templates for the specified list gallery.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        readonly listTemplates: Word.ListTemplateCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListTemplateGallery;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Word.ListTemplateGallery;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListTemplateGallery;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListTemplateGallery;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListTemplateGallery` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListTemplateGalleryData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): Word.Interfaces.ListTemplateGalleryData;
    }
    /**
     * Contains a collection of {@link Word.ListTemplateGallery} objects available through the three bullets-and-numbering buttons on the **Home** tab (see {@link https://support.microsoft.com/office/6c06ef65-27ad-4893-80c9-0b944cb81f5f | Define new bullets, numbers, and multilevel lists} for how to access in the Word UI).
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    export class ListTemplateGalleryCollection extends OfficeExtension.ClientObject {
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Word.ListTemplateGallery[];
        /**
         * Gets a `ListTemplateGallery` object by its type in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param type - The type of list template gallery to retrieve.
         */
        getByType(type: Word.ListTemplateGalleryType): Word.ListTemplateGallery;
        /**
         * Gets a `ListTemplateGallery` object by its type in the collection.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * @param type - The type of list template gallery to retrieve.
         */
        getByType(type: "Bullets" | "Number" | "OutlineNumbered"): Word.ListTemplateGallery;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Word.ListTemplateGalleryCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ListTemplateGalleryCollection;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.add(thisObject)}. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the object to the tracked object collection when the object was first created. If this object is part of a collection, you should also track the parent collection.
         */
        track(): Word.ListTemplateGalleryCollection;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for {@link https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member | context.trackedObjects.remove(thisObject)}. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Word.ListTemplateGalleryCollection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that's passed to it.)
        * Whereas the original `Word.ListTemplateGalleryCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ListTemplateGalleryCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        toJSON(): Word.Interfaces.ListTemplateGalleryCollectionData;
    }
    /**
     * Describes the types of list template galleries available.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum ListTemplateGalleryType {
        /**
         * Represents the bullet list gallery.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        bullets = "Bullets",
        /**
         * Represents the number list gallery.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        number = "Number",
        /**
         * Represents the outline number list gallery.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        outlineNumbered = "OutlineNumbered",
    }
    /**
     * Represents the types of {@link Word.CoauthoringLock | coauthoring locks}.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum CoauthoringLockType {
        /**
         * Reserved for future use.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        none = "None",
        /**
         * Represents that the lock is a reservation.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        reservation = "Reservation",
        /**
         * Represents that the lock is ephemeral.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        ephemeral = "Ephemeral",
        /**
         * Represents that the lock has changed.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        changed = "Changed",
    }
    /**
     * Represents the classes of users who can edit authorized portions of a protected (read-only) document.
     *
     * @remarks
     * [Api set: WordApiDesktop 1.4]
     */
    enum EditorType {
        /**
         * Represents the current user of the document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        current = "Current",
        /**
         * Represents the Editors group for documents that use Information Rights Management.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        editors = "Editors",
        /**
         * Represents all users who open a document.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        everyone = "Everyone",
        /**
         * Represents the Owners group for documents that use Information Rights Management.
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        owners = "Owners",
    }
    enum ErrorCodes {
        accessDenied = "AccessDenied",
        generalException = "GeneralException",
        invalidArgument = "InvalidArgument",
        itemNotFound = "ItemNotFound",
        notAllowed = "NotAllowed",
        notImplemented = "NotImplemented",
        searchDialogIsOpen = "SearchDialogIsOpen",
        searchStringInvalidOrTooLong = "SearchStringInvalidOrTooLong",
    }
    export namespace Interfaces {
        /**
        * Provides ways to load properties of only a subset of members of a collection.
        */
        export interface CollectionLoadOptions {
            /**
            * Specify the number of items in the queried collection to be included in the result.
            */
            $top?: number;
            /**
            * Specify the number of items in the collection that are to be skipped and not included in the result. If `top` is specified, the selection of result will start after skipping the specified number of items.
            */
            $skip?: number;
        }
        /** An interface for updating data on the `Editor` object, for use in `editor.set({ ... })`. */
        export interface EditorUpdateData {
            /**
            * Gets a `Range` object that represents the next range that the editor has permissions to modify.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            nextRange?: Word.Interfaces.RangeUpdateData;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `Editor` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeUpdateData;
        }
        /** An interface for updating data on the `ConflictCollection` object, for use in `conflictCollection.set({ ... })`. */
        export interface ConflictCollectionUpdateData {
            items?: Word.Interfaces.ConflictData[];
        }
        /** An interface for updating data on the `Conflict` object, for use in `conflict.set({ ... })`. */
        export interface ConflictUpdateData {
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `Conflict` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeUpdateData;
        }
        /** An interface for updating data on the `AnnotationCollection` object, for use in `annotationCollection.set({ ... })`. */
        export interface AnnotationCollectionUpdateData {
            items?: Word.Interfaces.AnnotationData[];
        }
        /** An interface for updating data on the `Application` object, for use in `application.set({ ... })`. */
        export interface ApplicationUpdateData {
            /**
            * Returns a `Bibliography` object that represents the bibliography reference sources stored in Microsoft Word.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            bibliography?: Word.Interfaces.BibliographyUpdateData;
            /**
             * Specifies if Microsoft Word automatically detects the language you are using as you type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            checkLanguage?: boolean;
        }
        /** An interface for updating data on the `Body` object, for use in `body.set({ ... })`. */
        export interface BodyUpdateData {
            /**
            * Gets the text format of the body. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontUpdateData;
            /**
             * Specifies the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: string;
            /**
             * Specifies the built-in style name for the body. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
        }
        /** An interface for updating data on the `Border` object, for use in `border.set({ ... })`. */
        export interface BorderUpdateData {
            /**
             * Specifies the color for the border. Color is specified in ‘#RRGGBB’ format or by using the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            color?: string;
            /**
             * Specifies the border type for the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            type?: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
            /**
             * Specifies whether the border is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            visible?: boolean;
            /**
             * Specifies the width for the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            width?: Word.BorderWidth | "None" | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600" | "Mixed";
        }
        /** An interface for updating data on the `BorderUniversal` object, for use in `borderUniversal.set({ ... })`. */
        export interface BorderUniversalUpdateData {
            /**
             * Specifies the graphical page-border design for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            artStyle?: Word.PageBorderArt | "Apples" | "MapleMuffins" | "CakeSlice" | "CandyCorn" | "IceCreamCones" | "ChampagneBottle" | "PartyGlass" | "ChristmasTree" | "Trees" | "PalmsColor" | "Balloons3Colors" | "BalloonsHotAir" | "PartyFavor" | "ConfettiStreamers" | "Hearts" | "HeartBalloon" | "Stars3D" | "StarsShadowed" | "Stars" | "Sun" | "Earth2" | "Earth1" | "PeopleHats" | "Sombrero" | "Pencils" | "Packages" | "Clocks" | "Firecrackers" | "Rings" | "MapPins" | "Confetti" | "CreaturesButterfly" | "CreaturesLadyBug" | "CreaturesFish" | "BirdsFlight" | "ScaredCat" | "Bats" | "FlowersRoses" | "FlowersRedRose" | "Poinsettias" | "Holly" | "FlowersTiny" | "FlowersPansy" | "FlowersModern2" | "FlowersModern1" | "WhiteFlowers" | "Vine" | "FlowersDaisies" | "FlowersBlockPrint" | "DecoArchColor" | "Fans" | "Film" | "Lightning1" | "Compass" | "DoubleD" | "ClassicalWave" | "ShadowedSquares" | "TwistedLines1" | "Waveline" | "Quadrants" | "CheckedBarColor" | "Swirligig" | "PushPinNote1" | "PushPinNote2" | "Pumpkin1" | "EggsBlack" | "Cup" | "HeartGray" | "GingerbreadMan" | "BabyPacifier" | "BabyRattle" | "Cabins" | "HouseFunky" | "StarsBlack" | "Snowflakes" | "SnowflakeFancy" | "Skyrocket" | "Seattle" | "MusicNotes" | "PalmsBlack" | "MapleLeaf" | "PaperClips" | "ShorebirdTracks" | "People" | "PeopleWaving" | "EclipsingSquares2" | "Hypnotic" | "DiamondsGray" | "DecoArch" | "DecoBlocks" | "CirclesLines" | "Papyrus" | "Woodwork" | "WeavingBraid" | "WeavingRibbon" | "WeavingAngles" | "ArchedScallops" | "Safari" | "CelticKnotwork" | "CrazyMaze" | "EclipsingSquares1" | "Birds" | "FlowersTeacup" | "Northwest" | "Southwest" | "Tribal6" | "Tribal4" | "Tribal3" | "Tribal2" | "Tribal5" | "XIllusions" | "ZanyTriangles" | "Pyramids" | "PyramidsAbove" | "ConfettiGrays" | "ConfettiOutline" | "ConfettiWhite" | "Mosaic" | "Lightning2" | "HeebieJeebies" | "LightBulb" | "Gradient" | "TriangleParty" | "TwistedLines2" | "Moons" | "Ovals" | "DoubleDiamonds" | "ChainLink" | "Triangles" | "Tribal1" | "MarqueeToothed" | "SharksTeeth" | "Sawtooth" | "SawtoothGray" | "PostageStamp" | "WeavingStrips" | "ZigZag" | "CrossStitch" | "Gems" | "CirclesRectangles" | "CornerTriangles" | "CreaturesInsects" | "ZigZagStitch" | "Checkered" | "CheckedBarBlack" | "Marquee" | "BasicWhiteDots" | "BasicWideMidline" | "BasicWideOutline" | "BasicWideInline" | "BasicThinLines" | "BasicWhiteDashes" | "BasicWhiteSquares" | "BasicBlackSquares" | "BasicBlackDashes" | "BasicBlackDots" | "StarsTop" | "CertificateBanner" | "Handmade1" | "Handmade2" | "TornPaper" | "TornPaperBlack" | "CouponCutoutDashes" | "CouponCutoutDots";
            /**
             * Specifies the width (in points) of the graphical page border specified in the `artStyle` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            artWidth?: number;
            /**
             * Specifies the color for the `BorderUniversal` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Specifies the color for the `BorderUniversal` or {@link Word.Font} object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies whether the border is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the line style of the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lineStyle?: Word.BorderLineStyle | "None" | "Single" | "Dot" | "DashSmallGap" | "DashLargeGap" | "DashDot" | "DashDotDot" | "Double" | "Triple" | "ThinThickSmallGap" | "ThickThinSmallGap" | "ThinThickThinSmallGap" | "ThinThickMedGap" | "ThickThinMedGap" | "ThinThickThinMedGap" | "ThinThickLargeGap" | "ThickThinLargeGap" | "ThinThickThinLargeGap" | "SingleWavy" | "DoubleWavy" | "DashDotStroked" | "Emboss3D" | "Engrave3D" | "Outset" | "Inset";
            /**
             * Specifies the line width of an object's border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lineWidth?: Word.LineWidth | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600";
        }
        /** An interface for updating data on the `BorderCollection` object, for use in `borderCollection.set({ ... })`. */
        export interface BorderCollectionUpdateData {
            /**
             * Specifies the 24-bit color of the inside borders. Color is specified in '#RRGGBB' format or by using the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            insideBorderColor?: string;
            /**
             * Specifies the border type of the inside borders.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            insideBorderType?: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
            /**
             * Specifies the width of the inside borders.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            insideBorderWidth?: Word.BorderWidth | "None" | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600" | "Mixed";
            /**
             * Specifies the 24-bit color of the outside borders. Color is specified in '#RRGGBB' format or by using the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            outsideBorderColor?: string;
            /**
             * Specifies the border type of the outside borders.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            outsideBorderType?: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
            /**
             * Specifies the width of the outside borders.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            outsideBorderWidth?: Word.BorderWidth | "None" | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600" | "Mixed";
            items?: Word.Interfaces.BorderData[];
        }
        /** An interface for updating data on the `BorderUniversalCollection` object, for use in `borderUniversalCollection.set({ ... })`. */
        export interface BorderUniversalCollectionUpdateData {
            items?: Word.Interfaces.BorderUniversalData[];
        }
        /** An interface for updating data on the `Break` object, for use in `break.set({ ... })`. */
        export interface BreakUpdateData {
            /**
            * Returns a `Range` object that represents the portion of the document that's contained in the break.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
        }
        /** An interface for updating data on the `BreakCollection` object, for use in `breakCollection.set({ ... })`. */
        export interface BreakCollectionUpdateData {
            items?: Word.Interfaces.BreakData[];
        }
        /** An interface for updating data on the `BuildingBlock` object, for use in `buildingBlock.set({ ... })`. */
        export interface BuildingBlockUpdateData {
            /**
             * Specifies the description for the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            description?: string;
            /**
             * Specifies a `DocPartInsertType` value that represents how to insert the contents of the building block into the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            insertType?: Word.DocPartInsertType | "Content" | "Paragraph" | "Page";
            /**
             * Specifies the name of the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: string;
            /**
             * Specifies the contents of the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            value?: string;
        }
        /** An interface for updating data on the `CheckboxContentControl` object, for use in `checkboxContentControl.set({ ... })`. */
        export interface CheckboxContentControlUpdateData {
            /**
             * Specifies the current state of the checkbox.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            isChecked?: boolean;
        }
        /** An interface for updating data on the `CoauthoringLock` object, for use in `coauthoringLock.set({ ... })`. */
        export interface CoauthoringLockUpdateData {
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringLock` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeUpdateData;
        }
        /** An interface for updating data on the `CoauthoringLockCollection` object, for use in `coauthoringLockCollection.set({ ... })`. */
        export interface CoauthoringLockCollectionUpdateData {
            items?: Word.Interfaces.CoauthoringLockData[];
        }
        /** An interface for updating data on the `CoauthorCollection` object, for use in `coauthorCollection.set({ ... })`. */
        export interface CoauthorCollectionUpdateData {
            items?: Word.Interfaces.CoauthorData[];
        }
        /** An interface for updating data on the `CoauthoringUpdate` object, for use in `coauthoringUpdate.set({ ... })`. */
        export interface CoauthoringUpdateUpdateData {
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringUpdate` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeUpdateData;
        }
        /** An interface for updating data on the `CoauthoringUpdateCollection` object, for use in `coauthoringUpdateCollection.set({ ... })`. */
        export interface CoauthoringUpdateCollectionUpdateData {
            items?: Word.Interfaces.CoauthoringUpdateData[];
        }
        /** An interface for updating data on the `Comment` object, for use in `comment.set({ ... })`. */
        export interface CommentUpdateData {
            /**
            * Specifies the comment's content range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            contentRange?: Word.Interfaces.CommentContentRangeUpdateData;
            /**
             * Specifies the comment's content as plain text.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            content?: string;
            /**
             * Specifies the comment thread's status. Setting to `true` resolves the comment thread. Getting a value of `true` means that the comment thread is resolved.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            resolved?: boolean;
        }
        /** An interface for updating data on the `CommentCollection` object, for use in `commentCollection.set({ ... })`. */
        export interface CommentCollectionUpdateData {
            items?: Word.Interfaces.CommentData[];
        }
        /** An interface for updating data on the `CommentContentRange` object, for use in `commentContentRange.set({ ... })`. */
        export interface CommentContentRangeUpdateData {
            /**
             * Specifies a value that indicates whether the comment text is bold.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            bold?: boolean;
            /**
             * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            hyperlink?: string;
            /**
             * Specifies a value that indicates whether the comment text is italicized.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            italic?: boolean;
            /**
             * Specifies a value that indicates whether the comment text has a strikethrough.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            strikeThrough?: boolean;
            /**
             * Specifies a value that indicates the comment text's underline type. `none` if the comment text isn't underlined.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            underline?: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";
        }
        /** An interface for updating data on the `CommentReply` object, for use in `commentReply.set({ ... })`. */
        export interface CommentReplyUpdateData {
            /**
            * Specifies the commentReply's content range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            contentRange?: Word.Interfaces.CommentContentRangeUpdateData;
            /**
            * Gets the parent comment of this reply.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentComment?: Word.Interfaces.CommentUpdateData;
            /**
             * Specifies the comment reply's content. The string is plain text.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            content?: string;
        }
        /** An interface for updating data on the `CommentReplyCollection` object, for use in `commentReplyCollection.set({ ... })`. */
        export interface CommentReplyCollectionUpdateData {
            items?: Word.Interfaces.CommentReplyData[];
        }
        /** An interface for updating data on the `ConditionalStyle` object, for use in `conditionalStyle.set({ ... })`. */
        export interface ConditionalStyleUpdateData {
            /**
             * Specifies the amount of space (in points) to add below the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bottomPadding?: number;
            /**
             * Specifies the amount of space (in points) to add to the left of the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftPadding?: number;
            /**
             * Specifies the amount of space (in points) to add to the right of the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightPadding?: number;
            /**
             * Specifies the amount of space (in points) to add above the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            topPadding?: number;
        }
        /** An interface for updating data on the `XmlMapping` object, for use in `xmlMapping.set({ ... })`. */
        export interface XmlMappingUpdateData {
            /**
            * Returns a `CustomXmlNode` object that represents the custom XML node in the data store that the content control in the document maps to.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            customXmlNode?: Word.Interfaces.CustomXmlNodeUpdateData;
            /**
            * Returns a `CustomXmlPart` object that represents the custom XML part to which the content control in the document maps.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            customXmlPart?: Word.Interfaces.CustomXmlPartUpdateData;
        }
        /** An interface for updating data on the `CustomXmlPrefixMappingCollection` object, for use in `customXmlPrefixMappingCollection.set({ ... })`. */
        export interface CustomXmlPrefixMappingCollectionUpdateData {
            items?: Word.Interfaces.CustomXmlPrefixMappingData[];
        }
        /** An interface for updating data on the `CustomXmlSchemaCollection` object, for use in `customXmlSchemaCollection.set({ ... })`. */
        export interface CustomXmlSchemaCollectionUpdateData {
            items?: Word.Interfaces.CustomXmlSchemaData[];
        }
        /** An interface for updating data on the `CustomXmlNodeCollection` object, for use in `customXmlNodeCollection.set({ ... })`. */
        export interface CustomXmlNodeCollectionUpdateData {
            items?: Word.Interfaces.CustomXmlNodeData[];
        }
        /** An interface for updating data on the `CustomXmlNode` object, for use in `customXmlNode.set({ ... })`. */
        export interface CustomXmlNodeUpdateData {
            /**
            * Gets a `CustomXmlNode` object corresponding to the first child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            firstChild?: Word.Interfaces.CustomXmlNodeUpdateData;
            /**
            * Gets a `CustomXmlNode` object corresponding to the last child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            lastChild?: Word.Interfaces.CustomXmlNodeUpdateData;
            /**
            * Gets the next sibling node (element, comment, or processing instruction) of the current node. If the node is the last sibling at its level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            nextSibling?: Word.Interfaces.CustomXmlNodeUpdateData;
            /**
            * Gets the object representing the part associated with this node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            ownerPart?: Word.Interfaces.CustomXmlPartUpdateData;
            /**
            * Gets the parent element node of the current node. If the current node is at the root level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            parentNode?: Word.Interfaces.CustomXmlNodeUpdateData;
            /**
            * Gets the previous sibling node (element, comment, or processing instruction) of the current node. If the current node is the first sibling at its level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            previousSibling?: Word.Interfaces.CustomXmlNodeUpdateData;
            /**
             * Specifies the value of the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nodeValue?: string;
            /**
             * Specifies the text for the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            text?: string;
        }
        /** An interface for updating data on the `ContentControl` object, for use in `contentControl.set({ ... })`. */
        export interface ContentControlUpdateData {
            /**
            * Gets the building block gallery-related data if the content control's {@link Word.ContentControlType} is `buildingBlockGallery`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            buildingBlockGalleryContentControl?: Word.Interfaces.BuildingBlockGalleryContentControlUpdateData;
            /**
            * Gets the data of the content control when its type is `checkBox`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApi 1.7]
            */
            checkboxContentControl?: Word.Interfaces.CheckboxContentControlUpdateData;
            /**
            * Gets the date picker-related data if the content control's {@link Word.ContentControlType} is `datePicker`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            datePickerContentControl?: Word.Interfaces.DatePickerContentControlUpdateData;
            /**
            * Gets the text format of the content control. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontUpdateData;
            /**
            * Gets the group-related data if the content control's {@link Word.ContentControlType} is `group`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            groupContentControl?: Word.Interfaces.GroupContentControlUpdateData;
            /**
            * Gets the picture-related data if the content control's {@link Word.ContentControlType} is `picture`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pictureContentControl?: Word.Interfaces.PictureContentControlUpdateData;
            /**
            * Gets the repeating section-related data if the content control's {@link Word.ContentControlType} is `repeatingSection`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            repeatingSectionContentControl?: Word.Interfaces.RepeatingSectionContentControlUpdateData;
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingUpdateData;
            /**
             * Specifies the appearance of the content control. The value can be `boundingBox`, `tags`, or `hidden`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies a value that indicates whether the user can delete the content control. Mutually exclusive with `removeWhenEdited`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            cannotDelete?: boolean;
            /**
             * Specifies a value that indicates whether the user can edit the contents of the content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            cannotEdit?: boolean;
            /**
             * Specifies the color of the content control. Color is specified in '#RRGGBB' format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            color?: string;
            /**
             * Specifies the placeholder text of the content control. Dimmed text will be displayed when the content control is empty.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            placeholderText?: string;
            /**
             * Specifies a value that indicates whether the content control is removed after it's edited. Mutually exclusive with `cannotDelete`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            removeWhenEdited?: boolean;
            /**
             * Specifies the style name for the content control. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the `styleBuiltIn` property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: string;
            /**
             * Specifies the built-in style name for the content control. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the `style` property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
            /**
             * Specifies a tag to identify a content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            tag?: string;
            /**
             * Specifies the title for a content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            title?: string;
        }
        /** An interface for updating data on the `ContentControlCollection` object, for use in `contentControlCollection.set({ ... })`. */
        export interface ContentControlCollectionUpdateData {
            items?: Word.Interfaces.ContentControlData[];
        }
        /** An interface for updating data on the `ContentControlListItem` object, for use in `contentControlListItem.set({ ... })`. */
        export interface ContentControlListItemUpdateData {
            /**
             * Specifies the display text of a list item for a dropdown list or combo box content control.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            displayText?: string;
            /**
             * Specifies the index location of a content control list item in the collection of list items.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            index?: number;
            /**
             * Specifies the programmatic value of a list item for a dropdown list or combo box content control.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            value?: string;
        }
        /** An interface for updating data on the `ContentControlListItemCollection` object, for use in `contentControlListItemCollection.set({ ... })`. */
        export interface ContentControlListItemCollectionUpdateData {
            items?: Word.Interfaces.ContentControlListItemData[];
        }
        /** An interface for updating data on the `CustomProperty` object, for use in `customProperty.set({ ... })`. */
        export interface CustomPropertyUpdateData {
            /**
             * Specifies the value of the custom property. Note that even though Word on the web and the docx file format allow these properties to be arbitrarily long, the desktop version of Word will truncate string values to 255 16-bit chars (possibly creating invalid unicode by breaking up a surrogate pair).
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            value?: any;
        }
        /** An interface for updating data on the `CustomPropertyCollection` object, for use in `customPropertyCollection.set({ ... })`. */
        export interface CustomPropertyCollectionUpdateData {
            items?: Word.Interfaces.CustomPropertyData[];
        }
        /** An interface for updating data on the `CustomXmlPart` object, for use in `customXmlPart.set({ ... })`. */
        export interface CustomXmlPartUpdateData {
            /**
            * Gets the root element of a bound region of data in the document. If the region is empty, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            documentElement?: Word.Interfaces.CustomXmlNodeUpdateData;
        }
        /** An interface for updating data on the `CustomXmlPartCollection` object, for use in `customXmlPartCollection.set({ ... })`. */
        export interface CustomXmlPartCollectionUpdateData {
            items?: Word.Interfaces.CustomXmlPartData[];
        }
        /** An interface for updating data on the `CustomXmlPartScopedCollection` object, for use in `customXmlPartScopedCollection.set({ ... })`. */
        export interface CustomXmlPartScopedCollectionUpdateData {
            items?: Word.Interfaces.CustomXmlPartData[];
        }
        /** An interface for updating data on the `Document` object, for use in `document.set({ ... })`. */
        export interface DocumentUpdateData {
            /**
            * Gets the active window for the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            activeWindow?: Word.Interfaces.WindowUpdateData;
            /**
            * Returns a `Bibliography` object that represents the bibliography references contained within the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            bibliography?: Word.Interfaces.BibliographyUpdateData;
            /**
            * Gets the `Body` object of the main document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            body?: Word.Interfaces.BodyUpdateData;
            /**
            * Returns a `PageSetup` object that's associated with the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pageSetup?: Word.Interfaces.PageSetupUpdateData;
            /**
            * Gets the properties of the document.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            properties?: Word.Interfaces.DocumentPropertiesUpdateData;
            /**
             * Specifies whether grammatical errors are marked by a wavy green line in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areGrammaticalErrorsShown?: boolean;
            /**
             * Specifies whether to use the default math settings when creating new equations.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areMathDefaultsUsed?: boolean;
            /**
             * Specifies whether to disable features introduced after a specified version.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areNewerFeaturesDisabled?: boolean;
            /**
             * Specifies whether Microsoft Word underlines spelling errors in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areSpellingErrorsShown?: boolean;
            /**
             * Specifies whether the styles in this document are updated to match the styles in the attached template each time the document is opened.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areStylesUpdatedOnOpen?: boolean;
            /**
             * Specifies whether Microsoft Word embeds TrueType fonts in the document when it's saved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTrueTypeFontsEmbedded?: boolean;
            /**
             * Specifies if automatic hyphenation is turned on for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            autoHyphenation?: boolean;
            /**
             * Specifies if the edits in the document are automatically saved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            autoSaveOn?: boolean;
            /**
             * Specifies the ChangeTracking mode.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            changeTrackingMode?: Word.ChangeTrackingMode | "Off" | "TrackAll" | "TrackMineOnly";
            /**
             * Specifies the maximum number of consecutive lines that can end with hyphens.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            consecutiveHyphensLimit?: number;
            /**
             * Specifies the interval (in points) between the default tab stops in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            defaultTabStop?: number;
            /**
             * Specifies the browser frame for displaying a webpage via hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            defaultTargetFrame?: string;
            /**
             * Specifies whether Word should not embed common system fonts.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            doNotEmbedSystemFonts?: boolean;
            /**
             * Specifies the name of the algorithm encryption provider that Microsoft Word uses when encrypting documents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            encryptionProvider?: string;
            /**
             * Specifies the East Asian language used for line breaking.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            farEastLineBreakLanguage?: Word.FarEastLineBreakLanguageId | "TraditionalChinese" | "Japanese" | "Korean" | "SimplifiedChinese";
            /**
             * Specifies the line break control level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            farEastLineBreakLevel?: Word.FarEastLineBreakLevel | "Normal" | "Strict" | "Custom";
            /**
             * Specifies whether Word shows the next heading level when the previous is used.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formattingIsNextLevelShown?: boolean;
            /**
             * Specifies whether to show user-defined styles.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formattingIsUserStyleNameShown?: boolean;
            /**
             * Specifies the horizontal space between invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridDistanceHorizontal?: number;
            /**
             * Specifies the vertical space between invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridDistanceVertical?: number;
            /**
             * Specifies whether the character grid starts from the upper-left corner of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridIsOriginFromMargin?: boolean;
            /**
             * Specifies the horizontal origin point for the invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridOriginHorizontal?: number;
            /**
             * Specifies the vertical origin point for the invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridOriginVertical?: number;
            /**
             * Specifies the interval for horizontal character gridlines in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridSpaceBetweenHorizontalLines?: number;
            /**
             * Specifies the interval for vertical character gridlines in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridSpaceBetweenVerticalLines?: number;
            /**
             * Specifies whether words in all capital letters can be hyphenated.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hyphenateCaps?: boolean;
            /**
             * Specifies the width of the hyphenation zone, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hyphenationZone?: number;
            /**
             * Specifies whether automatic formatting options override formatting restrictions.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isAutoFormatOverrideOn?: boolean;
            /**
             * Specifies whether charts in the active document use cell-reference data-point tracking.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isChartDataPointTracked?: boolean;
            /**
             * Specifies whether the compatibility option specified by the `type` property is enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isCompatible?: boolean;
            /**
             * Specifies whether the document is final.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFinal?: boolean;
            /**
             * Specifies whether Microsoft Word saves a subset of the embedded TrueType fonts with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFontsSubsetSaved?: boolean;
            /**
             * Specifies whether Microsoft Word prints onto a preprinted form only the data entered in the corresponding online form.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormsDataPrinted?: boolean;
            /**
             * Specifies whether Microsoft Word saves the data entered in a form as a tab-delimited record for use in a database.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormsDataSaved?: boolean;
            /**
             * Specifies whether a grammar check has been run on the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isGrammarChecked?: boolean;
            /**
             * Specifies whether Word kerns half-width Latin characters and punctuation marks.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isKerningByAlgorithm?: boolean;
            /**
             * Specifies whether to embed speech and handwriting data.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLinguisticDataEmbedded?: boolean;
            /**
             * Specifies whether Word optimizes the document for Word 97.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isOptimizedForWord97?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/0250c02b-060f-4986-88a4-36cec2a9665f | PRINT field} instructions (such as PostScript commands) in the document are to be printed on top of text and graphics when a PostScript printer is used.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPostScriptPrintedOverText?: boolean;
            /**
             * Specifies whether users can change the Quick Style set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isQuickStyleSetLocked?: boolean;
            /**
             * Specifies whether Microsoft Word displays a message box whenever a user opens the document, suggesting that it be opened as read-only.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isReadOnlyRecommended?: boolean;
            /**
             * Specifies whether AutoShapes or East Asian characters are automatically aligned with an invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSnappedToGrid?: boolean;
            /**
             * Specifies whether AutoShapes or East Asian characters align with invisible gridlines through other shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSnappedToShapes?: boolean;
            /**
             * Specifies whether spelling has been checked throughout the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSpellingChecked?: boolean;
            /**
             * Specifies whether formatting restrictions are enforced in a protected document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isStyleEnforced?: boolean;
            /**
             * Specifies whether users can change the document theme.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isThemeLocked?: boolean;
            /**
             * Specifies whether the document was created or opened by the user.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isUserControl?: boolean;
            /**
             * Specifies the character spacing adjustment.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            justificationMode?: Word.JustificationMode | "Expand" | "Compress" | "CompressKana";
            /**
             * Specifies the format type that Microsoft Word uses when automatically formatting the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            kind?: Word.DocumentKind | "NotSpecified" | "Letter" | "Email";
            /**
             * Specifies whether Microsoft Word has detected the language of the document text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageDetected?: boolean;
            /**
             * Specifies the kinsoku characters after which Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            noLineBreakAfter?: string;
            /**
             * Specifies the kinsoku characters before which Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            noLineBreakBefore?: string;
            /**
             * Sets a password that must be supplied to open the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            password?: string;
            /**
             * Specifies whether revision marks are printed with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            printRevisions?: boolean;
            /**
             * Specifies the width of pages in reading layout view when frozen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutSizeX?: number;
            /**
             * Specifies the height of pages in reading layout view when frozen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutSizeY?: number;
            /**
             * Specifies whether pages in reading layout view are frozen for handwritten markup.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingModeIsLayoutFrozen?: boolean;
            /**
             * Specifies whether Word removes user information upon saving.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            removePersonalInformationOnSave?: boolean;
            /**
             * Specifies the encoding used when saving the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            saveEncoding?: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
            /**
             * Specifies the encoding for saving as encoded text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            textEncoding?: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
            /**
             * Specifies how Word marks line and paragraph breaks in text files.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            textLineEnding?: Word.LineEndingType | "Crlf" | "CrOnly" | "LfOnly" | "Lfcr" | "Lsps";
            /**
             * Specifies whether to track formatting changes when change tracking is on.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackFormatting?: boolean;
            /**
             * Specifies whether to mark moved text when Track Changes is on.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackMoves?: boolean;
            /**
             * Specifies whether changes are tracked in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackRevisions?: boolean;
            /**
             * Specifies whether to remove or store date and time metadata for tracked changes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackedChangesAreDateAndTimeRemoved?: boolean;
            /**
             * Sets a password for saving changes to the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            writePassword?: string;
            /**
             * Specifies whether error messages are generated from built-in Word messages or MSXML (Microsoft XML).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlAreAdvancedErrorsShown?: boolean;
            /**
             * Specifies whether to save a document through an Extensible Stylesheet Language Transformation (XSLT).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlIsXsltUsedWhenSaving?: boolean;
            /**
             * Specifies the path and file name for the XSLT to apply when saving a document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlSaveThroughXslt?: string;
        }
        /** An interface for updating data on the `DocumentCreated` object, for use in `documentCreated.set({ ... })`. */
        export interface DocumentCreatedUpdateData {
            /**
            * Gets the `Body` object of the document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.3]
            */
            body?: Word.Interfaces.BodyUpdateData;
            /**
            * Gets the properties of the document.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.3]
            */
            properties?: Word.Interfaces.DocumentPropertiesUpdateData;
        }
        /** An interface for updating data on the `DocumentProperties` object, for use in `documentProperties.set({ ... })`. */
        export interface DocumentPropertiesUpdateData {
            /**
             * Specifies the author of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            author?: string;
            /**
             * Specifies the category of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            category?: string;
            /**
             * Specifies the Comments field in the metadata of the document. These have no connection to comments by users made in the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            comments?: string;
            /**
             * Specifies the company of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            company?: string;
            /**
             * Specifies the format of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            format?: string;
            /**
             * Specifies the keywords of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            keywords?: string;
            /**
             * Specifies the manager of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            manager?: string;
            /**
             * Specifies the subject of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            subject?: string;
            /**
             * Specifies the title of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            title?: string;
        }
        /** An interface for updating data on the `Field` object, for use in `field.set({ ... })`. */
        export interface FieldUpdateData {
            /**
            * Gets the field's result data.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            result?: Word.Interfaces.RangeUpdateData;
            /**
             * Specifies the field's code instruction.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             *
             * Note: The ability to set the code was introduced in WordApi 1.5.
             */
            code?: string;
            /**
             * Specifies data in a field of `addin` type. If the field isn't an `addin` type, it's `null` and it will throw a general exception when code attempts to set it.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            data?: string;
            /**
             * Specifies whether the field is locked. `true` if the field is locked, `false` otherwise.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            locked?: boolean;
            /**
             * Specifies whether the field codes are displayed for the specified field. `true` if the field codes are displayed, `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            showCodes?: boolean;
        }
        /** An interface for updating data on the `FieldCollection` object, for use in `fieldCollection.set({ ... })`. */
        export interface FieldCollectionUpdateData {
            items?: Word.Interfaces.FieldData[];
        }
        /** An interface for updating data on the `Font` object, for use in `font.set({ ... })`. */
        export interface FontUpdateData {
            /**
            * Returns a `FillFormat` object that contains fill formatting properties for the font used by the range of text.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            fill?: Word.Interfaces.FillFormatUpdateData;
            /**
            * Returns a `GlowFormat` object that represents the glow formatting for the font used by the range of text.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            glow?: Word.Interfaces.GlowFormatUpdateData;
            /**
            * Returns a `LineFormat` object that specifies the formatting for a line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            line?: Word.Interfaces.LineFormatUpdateData;
            /**
            * Returns a `ReflectionFormat` object that represents the reflection formatting for a shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            reflection?: Word.Interfaces.ReflectionFormatUpdateData;
            /**
            * Returns a `ColorFormat` object that represents the color for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            textColor?: Word.Interfaces.ColorFormatUpdateData;
            /**
            * Returns a `ShadowFormat` object that specifies the shadow formatting for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            textShadow?: Word.Interfaces.ShadowFormatUpdateData;
            /**
            * Returns a `ThreeDimensionalFormat` object that contains 3-dimensional (3D) effect formatting properties for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            threeDimensionalFormat?: Word.Interfaces.ThreeDimensionalFormatUpdateData;
            /**
             * Specifies whether the font is formatted as all capital letters, which makes lowercase letters appear as uppercase letters. The possible values are as follows:
                        
                        - `true`: All the text has the **All Caps** attribute.
                        
                        - `false`: None of the text has the **All Caps** attribute.
                        
                        - `null`: Returned if some, but not all, of the text has the **All Caps** attribute.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            allCaps?: boolean;
            /**
             * Specifies whether the font is bold. `true` if the font is formatted as bold, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            bold?: boolean;
            /**
             * Specifies whether the font is formatted as bold in a right-to-left language document. The possible values are as follows:
                        
                        - `true`: All the text is bold.
                        
                        - `false`: None of the text is bold.
                        
                        - `null`: Returned if some, but not all, of the text is bold.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            boldBidirectional?: boolean;
            /**
             * Specifies the color for the font. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            color?: string;
            /**
             * Specifies a `ColorIndex` value that represents the color for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies the color for the `Font` object in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndexBidirectional?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies whether contextual alternates are enabled for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            contextualAlternates?: boolean;
            /**
             * Specifies the color to be used for diacritics for the `Font` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            diacriticColor?: string;
            /**
             * Specifies whether Microsoft Word ignores the number of characters per line for the corresponding `Font` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            disableCharacterSpaceGrid?: boolean;
            /**
             * Specifies whether the font has a double strikethrough. `true` if the font is formatted as double strikethrough text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            doubleStrikeThrough?: boolean;
            /**
             * Specifies whether the font is formatted as embossed. The possible values are as follows:
                        
                        - `true`: All the text is embossed.
                        
                        - `false`: None of the text is embossed.
                        
                        - `null`: Returned if some, but not all, of the text is embossed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emboss?: boolean;
            /**
             * Specifies an `EmphasisMark` value that represents the emphasis mark for a character or designated character string.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emphasisMark?: Word.EmphasisMark | "None" | "OverSolidCircle" | "OverComma" | "OverWhiteCircle" | "UnderSolidCircle";
            /**
             * Specifies whether the font is formatted as engraved. The possible values are as follows:
                        
                        - `true`: All the text is engraved.
                        
                        - `false`: None of the text is engraved.
                        
                        - `null`: Returned if some, but not all, of the text is engraved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            engrave?: boolean;
            /**
             * Specifies whether the font is tagged as hidden. `true` if the font is formatted as hidden text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            hidden?: boolean;
            /**
             * Specifies the highlight color. To set it, use a value either in the '#RRGGBB' format or the color name. To remove highlight color, set it to `null`. The returned highlight color can be in the '#RRGGBB' format, an empty string for mixed highlight colors, or `null` for no highlight color. Note: Only the default highlight colors are available in Office for Windows Desktop. These are "Yellow", "Lime", "Turquoise", "Pink", "Blue", "Red", "DarkBlue", "Teal", "Green", "Purple", "DarkRed", "Olive", "Gray", "LightGray", and "Black". When the add-in runs in Office for Windows Desktop, any other color is converted to the closest color when applied to the font.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            highlightColor?: string;
            /**
             * Specifies whether the font is italicized. `true` if the font is italicized, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            italic?: boolean;
            /**
             * Specifies whether the font is italicized in a right-to-left language document. The possible values are as follows:
                        
                        - `true`: All the text is italicized.
                        
                        - `false`: None of the text is italicized.
                        
                        - `null`: Returned if some, but not all, of the text is italicized.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            italicBidirectional?: boolean;
            /**
             * Specifies the minimum font size for which Microsoft Word will adjust kerning automatically.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            kerning?: number;
            /**
             * Specifies the ligature setting for the `Font` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            ligature?: Word.Ligature | "None" | "Standard" | "Contextual" | "StandardContextual" | "Historical" | "StandardHistorical" | "ContextualHistorical" | "StandardContextualHistorical" | "Discretional" | "StandardDiscretional" | "ContextualDiscretional" | "StandardContextualDiscretional" | "HistoricalDiscretional" | "StandardHistoricalDiscretional" | "ContextualHistoricalDiscretional" | "All";
            /**
             * Specifies the name of the font.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            name?: string;
            /**
             * Specifies the font used for Latin text (characters with character codes from 0 (zero) through 127).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameAscii?: string;
            /**
             * Specifies the font name in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameBidirectional?: string;
            /**
             * Specifies the East Asian font name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameFarEast?: string;
            /**
             * Specifies the font used for characters with codes from 128 through 255.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameOther?: string;
            /**
             * Specifies the number form setting for an OpenType font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            numberForm?: Word.NumberForm | "Default" | "Lining" | "OldStyle";
            /**
             * Specifies the number spacing setting for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            numberSpacing?: Word.NumberSpacing | "Default" | "Proportional" | "Tabular";
            /**
             * Specifies if the font is formatted as outlined. The possible values are as follows:
                        
                        - `true`: All the text is outlined.
                        
                        - `false`: None of the text is outlined.
                        
                        - `null`: Returned if some, but not all, of the text is outlined.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            outline?: boolean;
            /**
             * Specifies the position of text (in points) relative to the base line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            position?: number;
            /**
             * Specifies the scaling percentage applied to the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            scaling?: number;
            /**
             * Specifies if the font is formatted as shadowed. The possible values are as follows:
                        
                        - `true`: All the text is shadowed.
                        
                        - `false`: None of the text is shadowed.
                        
                        - `null`: Returned if some, but not all, of the text is shadowed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            shadow?: boolean;
            /**
             * Specifies the font size in points.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            size?: number;
            /**
             * Specifies the font size in points for right-to-left text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sizeBidirectional?: number;
            /**
             * Specifies whether the font is formatted as small caps, which makes lowercase letters appear as small uppercase letters. The possible values are as follows:
                        
                        - `true`: All the text has the **Small Caps** attribute.
                        
                        - `false`: None of the text has the **Small Caps** attribute.
                        
                        - `null`: Returned if some, but not all, of the text has the **Small Caps** attribute.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            smallCaps?: boolean;
            /**
             * Specifies the spacing between characters.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            spacing?: number;
            /**
             * Specifies whether the font has a strikethrough. `true` if the font is formatted as strikethrough text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            strikeThrough?: boolean;
            /**
             * Specifies the stylistic set for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            stylisticSet?: Word.StylisticSet | "Default" | "Set01" | "Set02" | "Set03" | "Set04" | "Set05" | "Set06" | "Set07" | "Set08" | "Set09" | "Set10" | "Set11" | "Set12" | "Set13" | "Set14" | "Set15" | "Set16" | "Set17" | "Set18" | "Set19" | "Set20";
            /**
             * Specifies whether the font is a subscript. `true` if the font is formatted as subscript, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            subscript?: boolean;
            /**
             * Specifies whether the font is a superscript. `true` if the font is formatted as superscript, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            superscript?: boolean;
            /**
             * Specifies the font's underline type. `none` if the font isn't underlined.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            underline?: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";
            /**
             * Specifies the color of the underline for the `Font` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            underlineColor?: string;
        }
        /** An interface for updating data on the `HeadingStyle` object, for use in `headingStyle.set({ ... })`. */
        export interface HeadingStyleUpdateData {
            /**
             * Specifies the level for the heading style in a table of contents or table of figures. Must be a value from 1 to 9.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            level?: number;
            /**
             * Specifies the name of style for a heading.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
        }
        /** An interface for updating data on the `HeadingStyleCollection` object, for use in `headingStyleCollection.set({ ... })`. */
        export interface HeadingStyleCollectionUpdateData {
            items?: Word.Interfaces.HeadingStyleData[];
        }
        /** An interface for updating data on the `Hyperlink` object, for use in `hyperlink.set({ ... })`. */
        export interface HyperlinkUpdateData {
            /**
            * Returns a `Range` object that represents the portion of the document that's contained within the hyperlink.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
             * Specifies the address (for example, a file name or URL) of the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            address?: string;
            /**
             * Specifies the text string for the hyperlink's subject line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emailSubject?: string;
            /**
             * Specifies the text that appears as a ScreenTip when the mouse pointer is positioned over the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            screenTip?: string;
            /**
             * Specifies a named location in the destination of the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            subAddress?: string;
            /**
             * Specifies the name of the frame or window in which to load the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            target?: string;
            /**
             * Specifies the hyperlink's visible text in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textToDisplay?: string;
        }
        /** An interface for updating data on the `HyperlinkCollection` object, for use in `hyperlinkCollection.set({ ... })`. */
        export interface HyperlinkCollectionUpdateData {
            items?: Word.Interfaces.HyperlinkData[];
        }
        /** An interface for updating data on the `InlinePicture` object, for use in `inlinePicture.set({ ... })`. */
        export interface InlinePictureUpdateData {
            /**
             * Specifies a string that represents the alternative text associated with the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            altTextDescription?: string;
            /**
             * Specifies a string that contains the title for the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            altTextTitle?: string;
            /**
             * Specifies a number that describes the height of the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            height?: number;
            /**
             * Specifies a hyperlink on the image. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            hyperlink?: string;
            /**
             * Specifies a value that indicates whether the inline image retains its original proportions when you resize it.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lockAspectRatio?: boolean;
            /**
             * Specifies a number that describes the width of the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            width?: number;
        }
        /** An interface for updating data on the `InlinePictureCollection` object, for use in `inlinePictureCollection.set({ ... })`. */
        export interface InlinePictureCollectionUpdateData {
            items?: Word.Interfaces.InlinePictureData[];
        }
        /** An interface for updating data on the `LinkFormat` object, for use in `linkFormat.set({ ... })`. */
        export interface LinkFormatUpdateData {
            /**
             * Specifies if the link is updated automatically when the container file is opened or when the source file is changed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isAutoUpdated?: boolean;
            /**
             * Specifies if a `Field`, `InlineShape`, or `Shape` object is locked to prevent automatic updating.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLocked?: boolean;
            /**
             * Specifies if the linked picture is saved with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPictureSavedWithDocument?: boolean;
            /**
             * Specifies the path and name of the source file for the linked OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sourceFullName?: string;
        }
        /** An interface for updating data on the `ListCollection` object, for use in `listCollection.set({ ... })`. */
        export interface ListCollectionUpdateData {
            items?: Word.Interfaces.ListData[];
        }
        /** An interface for updating data on the `ListItem` object, for use in `listItem.set({ ... })`. */
        export interface ListItemUpdateData {
            /**
             * Specifies the level of the item in the list.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            level?: number;
        }
        /** An interface for updating data on the `ListLevel` object, for use in `listLevel.set({ ... })`. */
        export interface ListLevelUpdateData {
            /**
            * Gets a `Font` object that represents the character formatting of the `ListLevel` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            font?: Word.Interfaces.FontUpdateData;
            /**
             * Specifies the horizontal alignment of the list level. The value can be `left`, `centered`, or `right`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the name of the style that's linked to the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            linkedStyle?: string;
            /**
             * Specifies the number format for the list level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberFormat?: string;
            /**
             * Specifies the position (in points) of the number or bullet for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberPosition?: number;
            /**
             * Specifies the number style for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberStyle?: Word.ListBuiltInNumberStyle | "None" | "Arabic" | "UpperRoman" | "LowerRoman" | "UpperLetter" | "LowerLetter" | "Ordinal" | "CardinalText" | "OrdinalText" | "Kanji" | "KanjiDigit" | "AiueoHalfWidth" | "IrohaHalfWidth" | "ArabicFullWidth" | "KanjiTraditional" | "KanjiTraditional2" | "NumberInCircle" | "Aiueo" | "Iroha" | "ArabicLZ" | "Bullet" | "Ganada" | "Chosung" | "GBNum1" | "GBNum2" | "GBNum3" | "GBNum4" | "Zodiac1" | "Zodiac2" | "Zodiac3" | "TradChinNum1" | "TradChinNum2" | "TradChinNum3" | "TradChinNum4" | "SimpChinNum1" | "SimpChinNum2" | "SimpChinNum3" | "SimpChinNum4" | "HanjaRead" | "HanjaReadDigit" | "Hangul" | "Hanja" | "Hebrew1" | "Arabic1" | "Hebrew2" | "Arabic2" | "HindiLetter1" | "HindiLetter2" | "HindiArabic" | "HindiCardinalText" | "ThaiLetter" | "ThaiArabic" | "ThaiCardinalText" | "VietCardinalText" | "LowercaseRussian" | "UppercaseRussian" | "LowercaseGreek" | "UppercaseGreek" | "ArabicLZ2" | "ArabicLZ3" | "ArabicLZ4" | "LowercaseTurkish" | "UppercaseTurkish" | "LowercaseBulgarian" | "UppercaseBulgarian" | "PictureBullet" | "Legal" | "LegalLZ";
            /**
             * Specifies the list level that must appear before it restarts numbering at 1.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            resetOnHigher?: number;
            /**
             * Specifies the starting number for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            startAt?: number;
            /**
             * Specifies the tab position for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            tabPosition?: number;
            /**
             * Specifies the position (in points) for the second line of wrapping text for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            textPosition?: number;
            /**
             * Specifies the character inserted after the number for the list level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            trailingCharacter?: Word.TrailingCharacter | "TrailingTab" | "TrailingSpace" | "TrailingNone";
        }
        /** An interface for updating data on the `ListLevelCollection` object, for use in `listLevelCollection.set({ ... })`. */
        export interface ListLevelCollectionUpdateData {
            items?: Word.Interfaces.ListLevelData[];
        }
        /** An interface for updating data on the `ListTemplate` object, for use in `listTemplate.set({ ... })`. */
        export interface ListTemplateUpdateData {
            /**
             * Specifies the name of the list template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
            /**
             * Specifies whether the list template is outline numbered.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            outlineNumbered?: boolean;
        }
        /** An interface for updating data on the `NoteItem` object, for use in `noteItem.set({ ... })`. */
        export interface NoteItemUpdateData {
            /**
            * Represents the body object of the note item. It's the portion of the text within the footnote or endnote.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            body?: Word.Interfaces.BodyUpdateData;
            /**
            * Represents a footnote or endnote reference in the main document.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            reference?: Word.Interfaces.RangeUpdateData;
        }
        /** An interface for updating data on the `NoteItemCollection` object, for use in `noteItemCollection.set({ ... })`. */
        export interface NoteItemCollectionUpdateData {
            items?: Word.Interfaces.NoteItemData[];
        }
        /** An interface for updating data on the `OleFormat` object, for use in `oleFormat.set({ ... })`. */
        export interface OleFormatUpdateData {
            /**
             * Specifies the class type for the specified OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            classType?: string;
            /**
             * Specifies the icon that is used when the `displayAsIcon` property is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconIndex?: number;
            /**
             * Specifies the text displayed below the icon for the OLE object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconLabel?: string;
            /**
             * Specifies the program file in which the icon for the OLE object is stored.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconName?: string;
            /**
             * Specifies whether formatting done in Microsoft Word to the linked OLE object is preserved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormattingPreservedOnUpdate?: boolean;
        }
        /** An interface for updating data on the `PageCollection` object, for use in `pageCollection.set({ ... })`. */
        export interface PageCollectionUpdateData {
            items?: Word.Interfaces.PageData[];
        }
        /** An interface for updating data on the `PaneCollection` object, for use in `paneCollection.set({ ... })`. */
        export interface PaneCollectionUpdateData {
            items?: Word.Interfaces.PaneData[];
        }
        /** An interface for updating data on the `Window` object, for use in `window.set({ ... })`. */
        export interface WindowUpdateData {
            /**
            * Gets the next document window in the collection of open document windows.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            next?: Word.Interfaces.WindowUpdateData;
            /**
            * Gets the previous document window in the collection open document windows.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            previous?: Word.Interfaces.WindowUpdateData;
            /**
             * Specifies whether rulers are displayed for the window or pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areRulersDisplayed?: boolean;
            /**
             * Specifies whether thumbnail images of the pages in a document are displayed along the left side of the Microsoft Word document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areThumbnailsDisplayed?: boolean;
            /**
             * Specifies the caption text for the window that is displayed in the title bar of the document or application window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            caption?: string;
            /**
             * Specifies the horizontal scroll position as a percentage of the document width.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalPercentScrolled?: number;
            /**
             * Specifies the default start-up mode for the Japanese Input Method Editor (IME).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            imeMode?: Word.ImeMode | "NoControl" | "On" | "Off" | "Hiragana" | "Katakana" | "KatakanaHalf" | "AlphaFull" | "Alpha" | "HangulFull" | "Hangul";
            /**
             * Specifies whether the document map is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDocumentMapVisible?: boolean;
            /**
             * Specifies whether the email message header is visible in the document window. The default value is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEnvelopeVisible?: boolean;
            /**
             * Specifies whether a horizontal scroll bar is displayed for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isHorizontalScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the vertical scroll bar appears on the left side of the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLeftScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the vertical ruler appears on the right side of the document window in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isRightRulerDisplayed?: boolean;
            /**
             * Specifies whether the window is split into multiple panes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSplit?: boolean;
            /**
             * Specifies whether a vertical ruler is displayed for the window or pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVerticalRulerDisplayed?: boolean;
            /**
             * Specifies whether a vertical scroll bar is displayed for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVerticalScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the window is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVisible?: boolean;
            /**
             * Specifies how Microsoft Word displays source documents after a compare and merge process.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showSourceDocuments?: Word.ShowSourceDocuments | "None" | "Original" | "Revised" | "Both";
            /**
             * Specifies the vertical split percentage for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            splitVertical?: number;
            /**
             * Specifies the width of the style area in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            styleAreaWidth?: number;
            /**
             * Specifies the vertical scroll position as a percentage of the document length.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            verticalPercentScrolled?: number;
        }
        /** An interface for updating data on the `WindowCollection` object, for use in `windowCollection.set({ ... })`. */
        export interface WindowCollectionUpdateData {
            items?: Word.Interfaces.WindowData[];
        }
        /** An interface for updating data on the `Paragraph` object, for use in `paragraph.set({ ... })`. */
        export interface ParagraphUpdateData {
            /**
            * Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontUpdateData;
            /**
            * Gets the ListItem for the paragraph. Throws an `ItemNotFound` error if the paragraph isn't part of a list.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listItem?: Word.Interfaces.ListItemUpdateData;
            /**
            * Gets the ListItem for the paragraph. If the paragraph isn't part of a list, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listItemOrNullObject?: Word.Interfaces.ListItemUpdateData;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the paragraph.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalUpdateData;
            /**
             * Specifies the alignment for a paragraph. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            firstLineIndent?: number;
            /**
             * Specifies the left indent value, in points, for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            leftIndent?: number;
            /**
             * Specifies the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineSpacing?: number;
            /**
             * Specifies the amount of spacing, in grid lines, after the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineUnitAfter?: number;
            /**
             * Specifies the amount of spacing, in grid lines, before the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineUnitBefore?: number;
            /**
             * Specifies the outline level for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            outlineLevel?: number;
            /**
             * Specifies the right indent value, in points, for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            rightIndent?: number;
            /**
             * Specifies the spacing, in points, after the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            spaceAfter?: number;
            /**
             * Specifies the spacing, in points, before the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            spaceBefore?: number;
            /**
             * Specifies the style name for the paragraph. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: string;
            /**
             * Specifies the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
        }
        /** An interface for updating data on the `ParagraphCollection` object, for use in `paragraphCollection.set({ ... })`. */
        export interface ParagraphCollectionUpdateData {
            items?: Word.Interfaces.ParagraphData[];
        }
        /** An interface for updating data on the `ParagraphFormat` object, for use in `paragraphFormat.set({ ... })`. */
        export interface ParagraphFormatUpdateData {
            /**
             * Specifies the alignment for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the value (in points) for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            firstLineIndent?: number;
            /**
             * Specifies whether all lines in the specified paragraphs remain on the same page when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            keepTogether?: boolean;
            /**
             * Specifies whether the specified paragraph remains on the same page as the paragraph that follows it when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            keepWithNext?: boolean;
            /**
             * Specifies the left indent.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            leftIndent?: number;
            /**
             * Specifies the line spacing (in points) for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineSpacing?: number;
            /**
             * Specifies the amount of spacing (in gridlines) after the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineUnitAfter?: number;
            /**
             * Specifies the amount of spacing (in gridlines) before the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineUnitBefore?: number;
            /**
             * Specifies whether left and right indents are the same width.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            mirrorIndents?: boolean;
            /**
             * Specifies the outline level for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            outlineLevel?: Word.OutlineLevel | "OutlineLevel1" | "OutlineLevel2" | "OutlineLevel3" | "OutlineLevel4" | "OutlineLevel5" | "OutlineLevel6" | "OutlineLevel7" | "OutlineLevel8" | "OutlineLevel9" | "OutlineLevelBodyText";
            /**
             * Specifies the right indent (in points) for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            rightIndent?: number;
            /**
             * Specifies the amount of spacing (in points) after the specified paragraph or text column.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            spaceAfter?: number;
            /**
             * Specifies the spacing (in points) before the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            spaceBefore?: number;
            /**
             * Specifies whether the first and last lines in the specified paragraph remain on the same page as the rest of the paragraph when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            widowControl?: boolean;
        }
        /** An interface for updating data on the `Range` object, for use in `range.set({ ... })`. */
        export interface RangeUpdateData {
            /**
            * Gets the text format of the range. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontUpdateData;
            /**
            * Returns a `ListFormat` object that represents all the list formatting characteristics of the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            listFormat?: Word.Interfaces.ListFormatUpdateData;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalUpdateData;
            /**
             * Specifies a `CharacterCase` value that represents the case of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            case?: Word.CharacterCase | "Next" | "Lower" | "Upper" | "TitleWord" | "TitleSentence" | "Toggle" | "HalfWidth" | "FullWidth" | "Katakana" | "Hiragana";
            /**
             * Specifies the character width of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            characterWidth?: Word.CharacterWidth | "Half" | "Full";
            /**
             * Specifies if the range contains combined characters.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            combineCharacters?: boolean;
            /**
             * Specifies the ending character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: number;
            /**
             * Specifies the width (in the current measurement units) in which Microsoft Word fits the text in the current selection or range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fitTextWidth?: number;
            /**
             * Specifies if a grammar check has been run on the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            grammarChecked?: boolean;
            /**
             * Specifies the proofing status (spelling and grammar checking) of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * Specifies the formatting for horizontal text set within vertical text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalInVertical?: Word.HorizontalInVerticalType | "None" | "FitInLine" | "ResizeLine";
            /**
             * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            hyperlink?: string;
            /**
             * Specifies the ID for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: string;
            /**
             * Specifies whether the range of Japanese language text is hiragana or katakana.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            kana?: Word.Kana | "Katakana" | "Hiragana";
            /**
             * Specifies whether Microsoft Word has detected the language of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageDetected?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies an East Asian language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies a language for the range that isn't classified as an East Asian language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdOther?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies if all nonprinting characters (such as hidden text, tab marks, space marks, and paragraph marks) are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showAll?: boolean;
            /**
             * Specifies if spelling has been checked throughout the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spellingChecked?: boolean;
            /**
             * Specifies the starting character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: number;
            /**
             * Specifies the style name for the range. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: string;
            /**
             * Specifies the built-in style name for the range. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
            /**
             * Specifies whether Microsoft Word sets two lines of text in one and specifies the characters that enclose the text, if any.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            twoLinesInOne?: Word.TwoLinesInOneType | "None" | "NoBrackets" | "Parentheses" | "SquareBrackets" | "AngleBrackets" | "CurlyBrackets";
        }
        /** An interface for updating data on the `RangeCollection` object, for use in `rangeCollection.set({ ... })`. */
        export interface RangeCollectionUpdateData {
            items?: Word.Interfaces.RangeData[];
        }
        /** An interface for updating data on the `SearchOptions` object, for use in `searchOptions.set({ ... })`. */
        export interface SearchOptionsUpdateData {
            /**
             * If provided, specifies whether to ignore all punctuation characters between words. The default is `false`. Corresponds to the _Ignore punctuation characters_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            ignorePunct?: boolean;
            /**
             * If provided, specifies whether to ignore all whitespace between words. The default is `false`. Corresponds to the _Ignore white-space characters_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            ignoreSpace?: boolean;
            /**
             * If provided, specifies whether to perform a case sensitive search. The default is `false`. Corresponds to the _Match case_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchCase?: boolean;
            /**
             * If provided, specifies whether to match words that begin with the search string. The default is `false`. Corresponds to the _Match prefix_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchPrefix?: boolean;
            /**
             * If provided, specifies whether to match words that end with the search string. The default is `false`. Corresponds to the _Match suffix_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchSuffix?: boolean;
            /**
             * If provided, specifies whether to find only entire words, not text that's part of a larger word. The default is `false`. Corresponds to the _Find whole words only_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchWholeWord?: boolean;
            /**
             * If provided, specifies whether the search will be performed using special search operators. The default is `false`. Corresponds to the _Use wildcards_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchWildcards?: boolean;
        }
        /** An interface for updating data on the `Section` object, for use in `section.set({ ... })`. */
        export interface SectionUpdateData {
            /**
            * Gets the `Body` object of the section. This doesn't include the header, footer, and other section metadata.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            body?: Word.Interfaces.BodyUpdateData;
            /**
            * Returns a `PageSetup` object that's associated with the section.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pageSetup?: Word.Interfaces.PageSetupUpdateData;
            /**
             * Specifies if the section is protected for forms.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            protectedForForms?: boolean;
        }
        /** An interface for updating data on the `SectionCollection` object, for use in `sectionCollection.set({ ... })`. */
        export interface SectionCollectionUpdateData {
            items?: Word.Interfaces.SectionData[];
        }
        /** An interface for updating data on the `Setting` object, for use in `setting.set({ ... })`. */
        export interface SettingUpdateData {
            /**
             * Specifies the value of the setting.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            value?: any;
        }
        /** An interface for updating data on the `SettingCollection` object, for use in `settingCollection.set({ ... })`. */
        export interface SettingCollectionUpdateData {
            items?: Word.Interfaces.SettingData[];
        }
        /** An interface for updating data on the `StyleCollection` object, for use in `styleCollection.set({ ... })`. */
        export interface StyleCollectionUpdateData {
            items?: Word.Interfaces.StyleData[];
        }
        /** An interface for updating data on the `Style` object, for use in `style.set({ ... })`. */
        export interface StyleUpdateData {
            /**
            * Specifies a `BorderCollection` object that represents all the borders for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            borders?: Word.Interfaces.BorderCollectionUpdateData;
            /**
            * Gets a `Font` object that represents the character formatting of the style.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            font?: Word.Interfaces.FontUpdateData;
            /**
            * Returns a `Frame` object that represents the frame formatting for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            frame?: Word.Interfaces.FrameUpdateData;
            /**
            * Specifies a link between a paragraph and a character style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            linkStyle?: Word.Interfaces.StyleUpdateData;
            /**
            * Gets a `ListTemplate` object that represents the list formatting for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            listTemplate?: Word.Interfaces.ListTemplateUpdateData;
            /**
            * Gets a `ParagraphFormat` object that represents the paragraph settings for the style.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            paragraphFormat?: Word.Interfaces.ParagraphFormatUpdateData;
            /**
            * Gets a `Shading` object that represents the shading for the style. Not applicable to a style of `List` type.
            *
            * @remarks
            * [Api set: WordApi 1.6]
            */
            shading?: Word.Interfaces.ShadingUpdateData;
            /**
            * Gets a `TableStyle` object representing style properties that can be applied to a table.
            *
            * @remarks
            * [Api set: WordApi 1.6]
            */
            tableStyle?: Word.Interfaces.TableStyleUpdateData;
            /**
             * Specifies whether the style is automatically redefined based on the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            automaticallyUpdate?: boolean;
            /**
             * Specifies the name of an existing style to use as the base formatting of another style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             *
             * Note: The ability to set `baseStyle` was introduced in WordApi 1.6.
             */
            baseStyle?: string;
            /**
             * Specifies whether the spelling and grammar checker ignores text formatted with this style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasProofing?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies an East Asian language for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies whether the style cannot be changed or edited.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            locked?: boolean;
            /**
             * Specifies the name of the style to be applied automatically to a new paragraph that is inserted after a paragraph formatted with the style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             *
             * Note: The ability to set `nextParagraphStyle` was introduced in WordApi 1.6.
             */
            nextParagraphStyle?: string;
            /**
             * Specifies whether to remove spacing between paragraphs that are formatted using the same style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noSpaceBetweenParagraphsOfSameStyle?: boolean;
            /**
             * Specifies the priority.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            priority?: number;
            /**
             * Specifies whether the style corresponds to an available quick style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            quickStyle?: boolean;
            /**
             * Specifies whether the style is made visible as a recommended style in the Styles gallery and in the Styles task pane in Microsoft Word after it's used in the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            unhideWhenUsed?: boolean;
            /**
             * Specifies whether the style is visible as a recommended style in the Styles gallery and in the Styles task pane.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            visibility?: boolean;
        }
        /** An interface for updating data on the `Shading` object, for use in `shading.set({ ... })`. */
        export interface ShadingUpdateData {
            /**
             * Specifies the color for the background of the object. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            backgroundPatternColor?: string;
            /**
             * Specifies the color for the foreground of the object. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            foregroundPatternColor?: string;
            /**
             * Specifies the shading texture of the object. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            texture?: Word.ShadingTextureType | "DarkDiagonalDown" | "DarkDiagonalUp" | "DarkGrid" | "DarkHorizontal" | "DarkTrellis" | "DarkVertical" | "LightDiagonalDown" | "LightDiagonalUp" | "LightGrid" | "LightHorizontal" | "LightTrellis" | "LightVertical" | "None" | "Percent10" | "Percent12Pt5" | "Percent15" | "Percent20" | "Percent25" | "Percent30" | "Percent35" | "Percent37Pt5" | "Percent40" | "Percent45" | "Percent5" | "Percent50" | "Percent55" | "Percent60" | "Percent62Pt5" | "Percent65" | "Percent70" | "Percent75" | "Percent80" | "Percent85" | "Percent87Pt5" | "Percent90" | "Percent95" | "Solid";
        }
        /** An interface for updating data on the `ShadingUniversal` object, for use in `shadingUniversal.set({ ... })`. */
        export interface ShadingUniversalUpdateData {
            /**
             * Specifies the color that's applied to the background of the `ShadingUniversal` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            backgroundPatternColor?: string;
            /**
             * Specifies the color that's applied to the background of the `ShadingUniversal` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            backgroundPatternColorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies the color that's applied to the foreground of the `ShadingUniversal` object. This color is applied to the dots and lines in the shading pattern. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            foregroundPatternColor?: string;
            /**
             * Specifies the color that's applied to the foreground of the `ShadingUniversal` object. This color is applied to the dots and lines in the shading pattern.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            foregroundPatternColorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies the shading texture of the object. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            texture?: Word.ShadingTextureType | "DarkDiagonalDown" | "DarkDiagonalUp" | "DarkGrid" | "DarkHorizontal" | "DarkTrellis" | "DarkVertical" | "LightDiagonalDown" | "LightDiagonalUp" | "LightGrid" | "LightHorizontal" | "LightTrellis" | "LightVertical" | "None" | "Percent10" | "Percent12Pt5" | "Percent15" | "Percent20" | "Percent25" | "Percent30" | "Percent35" | "Percent37Pt5" | "Percent40" | "Percent45" | "Percent5" | "Percent50" | "Percent55" | "Percent60" | "Percent62Pt5" | "Percent65" | "Percent70" | "Percent75" | "Percent80" | "Percent85" | "Percent87Pt5" | "Percent90" | "Percent95" | "Solid";
        }
        /** An interface for updating data on the `Table` object, for use in `table.set({ ... })`. */
        export interface TableUpdateData {
            /**
            * Gets the font. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            font?: Word.Interfaces.FontUpdateData;
            /**
             * Specifies the alignment of the table against the page column. The value can be `left`, `centered`, or `right`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the description of the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            description?: string;
            /**
             * Specifies the number of header rows.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            headerRowCount?: number;
            /**
             * Specifies the horizontal alignment of every cell in the table. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: string;
            /**
             * Specifies the style name for the table. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            style?: string;
            /**
             * Specifies whether the table has banded columns.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBandedColumns?: boolean;
            /**
             * Specifies whether the table has banded rows.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBandedRows?: boolean;
            /**
             * Specifies the built-in style name for the table. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
            /**
             * Specifies whether the table has a first column with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleFirstColumn?: boolean;
            /**
             * Specifies whether the table has a last column with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleLastColumn?: boolean;
            /**
             * Specifies whether the table has a total (last) row with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleTotalRow?: boolean;
            /**
             * Specifies the title of the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            title?: string;
            /**
             * Specifies the text values in the table, as a 2D JavaScript array.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            values?: string[][];
            /**
             * Specifies the vertical alignment of every cell in the table. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
            /**
             * Specifies the width of the table in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: number;
        }
        /** An interface for updating data on the `TableStyle` object, for use in `tableStyle.set({ ... })`. */
        export interface TableStyleUpdateData {
            /**
             * Specifies the table's alignment against the page margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies whether lines in tables formatted with a style break across pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            allowBreakAcrossPage?: boolean;
            /**
             * Specifies the amount of space to add between the contents and the bottom borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            bottomCellMargin?: number;
            /**
             * Specifies the spacing (in points) between the cells in a table style.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            cellSpacing?: number;
            /**
             * Specifies the number of columns in the banding when a style specifies odd- or even-column banding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            columnStripe?: number;
            /**
             * Specifies whether Microsoft Word allows to break the specified table across pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isBreakAcrossPagesAllowed?: boolean;
            /**
             * Specifies the amount of space to add between the contents and the left borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            leftCellMargin?: number;
            /**
             * Specifies the left indent value (in points) for the rows in the table style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftIndent?: number;
            /**
             * Specifies the amount of space to add between the contents and the right borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            rightCellMargin?: number;
            /**
             * Specifies the number of rows to include in the banding when the style specifies odd- or even-row banding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rowStripe?: number;
            /**
             * Specifies the direction in which Microsoft Word orders cells in the table style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableDirection?: Word.TableDirection | "RightToLeft" | "LeftToRight";
            /**
             * Specifies the amount of space to add between the contents and the top borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            topCellMargin?: number;
        }
        /** An interface for updating data on the `TabStopCollection` object, for use in `tabStopCollection.set({ ... })`. */
        export interface TabStopCollectionUpdateData {
            items?: Word.Interfaces.TabStopData[];
        }
        /** An interface for updating data on the `TableCollection` object, for use in `tableCollection.set({ ... })`. */
        export interface TableCollectionUpdateData {
            items?: Word.Interfaces.TableData[];
        }
        /** An interface for updating data on the `TableColumn` object, for use in `tableColumn.set({ ... })`. */
        export interface TableColumnUpdateData {
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the column.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalUpdateData;
            /**
             * Specifies the preferred width (in points or as a percentage of the window width) for the column.
                        The unit of measurement can be specified by the `preferredWidthType` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            preferredWidth?: number;
            /**
             * Specifies the preferred unit of measurement to use for the width of the table column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            preferredWidthType?: Word.PreferredWidthType | "Auto" | "Percent" | "Points";
            /**
             * Specifies the width of the column, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: number;
        }
        /** An interface for updating data on the `TableColumnCollection` object, for use in `tableColumnCollection.set({ ... })`. */
        export interface TableColumnCollectionUpdateData {
            items?: Word.Interfaces.TableColumnData[];
        }
        /** An interface for updating data on the `TableOfAuthorities` object, for use in `tableOfAuthorities.set({ ... })`. */
        export interface TableOfAuthoritiesUpdateData {
            /**
             * Specifies the name of the bookmark from which to collect table of authorities entries.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bookmark?: string;
            /**
             * Specifies the category of entries to be included in the table of authorities.
                        Values 0 through 16 correspond to the items listed in the Category box of the Table of Authorities dialog. To learn how to access this through the Word UI, see {@link https://support.microsoft.com/office/ddd126ae-52bc-4299-9558-06dd0e4fe8c0 | Create a table of authorities}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            category?: number;
            /**
             * Specifies a separator of up to five characters. This appears between the table of authorities entry and its page number.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            entrySeparator?: string;
            /**
             * Specifies whether the category name for a group of entries appears in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isCategoryHeaderIncluded?: boolean;
            /**
             * Specifies whether the entries in the table of authorities are displayed with their formatting in the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEntryFormattingKept?: boolean;
            /**
             * Specifies whether references to the same authority that are repeated on five or more pages are replaced with "Passim".
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPassimUsed?: boolean;
            /**
             * Specifies a separator of up to five characters. This appears between individual page references in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageNumberSeparator?: string;
            /**
             * Specifies a separator of up to five characters. This appears between ranges of pages in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageRangeSeparator?: string;
            /**
             * Specifies the {@link https://support.microsoft.com/office/062a387b-dfc9-4ef8-8235-29ee113d59be | Sequence (SEQ) field} identifier for the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sequenceName?: string;
            /**
             * Specifies a separator of up to five characters. This appears between the sequence number and the page number in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sequenceSeparator?: string;
            /**
             * Specifies the leader character that appears between entries and their associated page numbers in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
        }
        /** An interface for updating data on the `TableOfAuthoritiesCollection` object, for use in `tableOfAuthoritiesCollection.set({ ... })`. */
        export interface TableOfAuthoritiesCollectionUpdateData {
            items?: Word.Interfaces.TableOfAuthoritiesData[];
        }
        /** An interface for updating data on the `TableOfAuthoritiesCategoryCollection` object, for use in `tableOfAuthoritiesCategoryCollection.set({ ... })`. */
        export interface TableOfAuthoritiesCategoryCollectionUpdateData {
            items?: Word.Interfaces.TableOfAuthoritiesCategoryData[];
        }
        /** An interface for updating data on the `TableOfContents` object, for use in `tableOfContents.set({ ... })`. */
        export interface TableOfContentsUpdateData {
            /**
             * Specifies whether built-in heading styles are used for the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBuiltInHeadingStylesUsed?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldsUsed?: boolean;
            /**
             * Specifies whether entries in the table of contents should be formatted as hyperlinks when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areHyperlinksUsedOnWeb?: boolean;
            /**
             * Specifies whether the page numbers in the table of contents should be hidden when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersHiddenOnWeb?: boolean;
            /**
             * Specifies whether page numbers are included in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersIncluded?: boolean;
            /**
             * Specifies whether page numbers are aligned with the right margin in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersRightAligned?: boolean;
            /**
             * Specifies the ending heading level for the table of contents. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            lowerHeadingLevel?: number;
            /**
             * Specifies the character between entries and their page numbers in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
            /**
             * Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableId?: string;
            /**
             * Specifies the starting heading level for the table of contents. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            upperHeadingLevel?: number;
        }
        /** An interface for updating data on the `TableOfContentsCollection` object, for use in `tableOfContentsCollection.set({ ... })`. */
        export interface TableOfContentsCollectionUpdateData {
            items?: Word.Interfaces.TableOfContentsData[];
        }
        /** An interface for updating data on the `TableOfFigures` object, for use in `tableOfFigures.set({ ... })`. */
        export interface TableOfFiguresUpdateData {
            /**
             * Specifies whether built-in heading styles are used for the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBuiltInHeadingStylesUsed?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldsUsed?: boolean;
            /**
             * Specifies whether entries in the table of figures should be formatted as hyperlinks when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areHyperlinksUsedOnWeb?: boolean;
            /**
             * Specifies whether the page numbers in the table of figures should be hidden when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersHiddenOnWeb?: boolean;
            /**
             * Specifies whether page numbers are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersIncluded?: boolean;
            /**
             * Specifies whether page numbers are aligned with the right margin in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersRightAligned?: boolean;
            /**
             * Specifies the label that identifies the items to be included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            captionLabel?: string;
            /**
             * Specifies whether the caption label and caption number are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLabelIncluded?: boolean;
            /**
             * Specifies the ending heading level for the table of figures. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            lowerHeadingLevel?: number;
            /**
             * Specifies the character between entries and their page numbers in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
            /**
             * Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableId?: string;
            /**
             * Specifies the starting heading level for the table of figures. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            upperHeadingLevel?: number;
        }
        /** An interface for updating data on the `TableOfFiguresCollection` object, for use in `tableOfFiguresCollection.set({ ... })`. */
        export interface TableOfFiguresCollectionUpdateData {
            items?: Word.Interfaces.TableOfFiguresData[];
        }
        /** An interface for updating data on the `TableRow` object, for use in `tableRow.set({ ... })`. */
        export interface TableRowUpdateData {
            /**
            * Gets the font. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            font?: Word.Interfaces.FontUpdateData;
            /**
             * Specifies the horizontal alignment of every cell in the row. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the preferred height of the row in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            preferredHeight?: number;
            /**
             * Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: string;
            /**
             * Specifies the text values in the row, as a 2D JavaScript array.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            values?: string[][];
            /**
             * Specifies the vertical alignment of the cells in the row. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
        }
        /** An interface for updating data on the `TableRowCollection` object, for use in `tableRowCollection.set({ ... })`. */
        export interface TableRowCollectionUpdateData {
            items?: Word.Interfaces.TableRowData[];
        }
        /** An interface for updating data on the `TableCell` object, for use in `tableCell.set({ ... })`. */
        export interface TableCellUpdateData {
            /**
            * Gets the `Body` object of the cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            body?: Word.Interfaces.BodyUpdateData;
            /**
             * Specifies the width of the cell's column in points. This is applicable to uniform tables.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            columnWidth?: number;
            /**
             * Specifies the horizontal alignment of the cell. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the shading color of the cell. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: string;
            /**
             * Specifies the text of the cell.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            value?: string;
            /**
             * Specifies the vertical alignment of the cell. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
        }
        /** An interface for updating data on the `TableCellCollection` object, for use in `tableCellCollection.set({ ... })`. */
        export interface TableCellCollectionUpdateData {
            items?: Word.Interfaces.TableCellData[];
        }
        /** An interface for updating data on the `TableBorder` object, for use in `tableBorder.set({ ... })`. */
        export interface TableBorderUpdateData {
            /**
             * Specifies the table border color.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            color?: string;
            /**
             * Specifies the type of the table border.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            type?: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
            /**
             * Specifies the width, in points, of the table border. Not applicable to table border types that have fixed widths.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: number;
        }
        /** An interface for updating data on the `Template` object, for use in `template.set({ ... })`. */
        export interface TemplateUpdateData {
            /**
             * Specifies the East Asian language to use when breaking lines of text in the document or template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            farEastLineBreakLanguage?: Word.FarEastLineBreakLanguageId | "TraditionalChinese" | "Japanese" | "Korean" | "SimplifiedChinese";
            /**
             * Specifies the line break control level for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            farEastLineBreakLevel?: Word.FarEastLineBreakLevel | "Normal" | "Strict" | "Custom";
            /**
             * Specifies whether the spelling and grammar checker ignores documents based on this template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * Specifies the character spacing adjustment for the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            justificationMode?: Word.JustificationMode | "Expand" | "Compress" | "CompressKana";
            /**
             * Specifies if Microsoft Word kerns half-width Latin characters and punctuation marks in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            kerningByAlgorithm?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language in the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies an East Asian language for the language in the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies the kinsoku characters after which Microsoft Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noLineBreakAfter?: string;
            /**
             * Specifies the kinsoku characters before which Microsoft Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noLineBreakBefore?: string;
            /**
             * Specifies `true` if the template has not changed since it was last saved, `false` if Microsoft Word displays a prompt to save changes when the document is closed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            saved?: boolean;
        }
        /** An interface for updating data on the `TemplateCollection` object, for use in `templateCollection.set({ ... })`. */
        export interface TemplateCollectionUpdateData {
            items?: Word.Interfaces.TemplateData[];
        }
        /** An interface for updating data on the `TrackedChangeCollection` object, for use in `trackedChangeCollection.set({ ... })`. */
        export interface TrackedChangeCollectionUpdateData {
            items?: Word.Interfaces.TrackedChangeData[];
        }
        /** An interface for updating data on the `View` object, for use in `view.set({ ... })`. */
        export interface ViewUpdateData {
            /**
             * Specifies whether all nonprinting characters are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areAllNonprintingCharactersDisplayed?: boolean;
            /**
             * Gets whether background colors and images are shown when the document is displayed in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBackgroundsDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays the comments in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areCommentsDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays connecting lines from the text to the revision and comment balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areConnectingLinesToRevisionsBalloonDisplayed?: boolean;
            /**
             * Specifies whether shading is applied to the ranges in the document that users have permission to modify.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areEditableRangesShaded?: boolean;
            /**
             * Specifies whether field codes are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldCodesDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays formatting changes made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFormatChangesDisplayed?: boolean;
            /**
             * Specifies whether handwritten ink annotations are shown or hidden.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areInkAnnotationsDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays insertions and deletions made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areInsertionsAndDeletionsDisplayed?: boolean;
            /**
             * Gets whether other authors' presence should be visible in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areOtherAuthorsVisible?: boolean;
            /**
             * Specifies whether Microsoft Word displays revisions and comments made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areRevisionsAndCommentsDisplayed?: boolean;
            /**
             * Specifies whether table gridlines are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTableGridlinesDisplayed?: boolean;
            /**
             * Specifies the column width in Reading mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            columnWidth?: Word.ColumnWidth | "Narrow" | "Default" | "Wide";
            /**
             * Specifies whether all the text in a window is displayed in the same sans-serif font with minimal formatting to speed up display.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDraft?: boolean;
            /**
             * Specifies whether only the first line of body text is shown in outline view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFirstLineOnlyDisplayed?: boolean;
            /**
             * Specifies whether character formatting is visible in outline view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormatDisplayed?: boolean;
            /**
             * Specifies whether the window is in full-screen view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFullScreen?: boolean;
            /**
             * Specifies whether the document is in conflict mode view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInConflictMode?: boolean;
            /**
             * Specifies whether Microsoft Word is in Panning mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInPanning?: boolean;
            /**
             * Specifies whether the document is being viewed in reading layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInReadingLayout?: boolean;
            /**
             * Specifies whether mail merge data is displayed instead of mail merge fields.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMailMergeDataView?: boolean;
            /**
             * Specifies whether the text in the document is visible when the header and footer areas are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMainTextLayerVisible?: boolean;
            /**
             * Specifies whether the pointer is displayed as a magnifying glass in print preview.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPointerShownAsMagnifier?: boolean;
            /**
             * Specifies whether pages displayed in reading layout view are displayed using the same layout as printed pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isReadingLayoutActualView?: boolean;
            /**
             * Specifies whether XML tags are visible in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isXmlMarkupVisible?: boolean;
            /**
             * Specifies the display mode for tracked changes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            markupMode?: Word.RevisionsMode | "Balloon" | "Inline" | "Mixed";
            /**
             * Specifies the page color in Reading mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageColor?: Word.PageColor | "None" | "Sepia" | "Inverse";
            /**
             * Specifies the page movement type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageMovementType?: Word.PageMovementType | "Vertical" | "SideToSide";
            /**
             * Specifies whether margins are visible or hidden when the document is viewed in Full Screen Reading view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutTruncateMargins?: Word.ReadingLayoutMargin | "Automatic" | "Suppress" | "Full";
            /**
             * Specifies the width of the revision balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisionsBalloonWidth?: number;
            /**
             * Specifies how Microsoft Word measures the width of revision balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisionsBalloonWidthType?: Word.RevisionsBalloonWidthType | "Percent" | "Points";
            /**
             * Specifies the document element displayed in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            seekView?: Word.SeekView | "MainDocument" | "PrimaryHeader" | "FirstPageHeader" | "EvenPagesHeader" | "PrimaryFooter" | "FirstPageFooter" | "EvenPagesFooter" | "Footnotes" | "Endnotes" | "CurrentPageHeader" | "CurrentPageFooter";
            /**
             * Specifies the active window pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            splitSpecial?: Word.SpecialPane | "None" | "PrimaryHeader" | "FirstPageHeader" | "EvenPagesHeader" | "PrimaryFooter" | "FirstPageFooter" | "EvenPagesFooter" | "Footnotes" | "Endnotes" | "FootnoteContinuationNotice" | "FootnoteContinuationSeparator" | "FootnoteSeparator" | "EndnoteContinuationNotice" | "EndnoteContinuationSeparator" | "EndnoteSeparator" | "Comments" | "CurrentPageHeader" | "CurrentPageFooter" | "Revisions" | "RevisionsHoriz" | "RevisionsVert";
            /**
             * Specifies the view type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.ViewType | "Normal" | "Outline" | "Print" | "PrintPreview" | "Master" | "Web" | "Reading" | "Conflict";
        }
        /** An interface for updating data on the `Shape` object, for use in `shape.set({ ... })`. */
        export interface ShapeUpdateData {
            /**
            * Represents the `Body` object of the shape. Only applies to text boxes and geometric shapes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            body?: Word.Interfaces.BodyUpdateData;
            /**
            * Gets the canvas associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `canvas`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            canvas?: Word.Interfaces.CanvasUpdateData;
            /**
            * Returns the fill formatting of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            fill?: Word.Interfaces.ShapeFillUpdateData;
            /**
            * Gets the top-level parent canvas shape of this child shape. It will be null if it isn't a child shape of a canvas.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            parentCanvas?: Word.Interfaces.ShapeUpdateData;
            /**
            * Gets the top-level parent group shape of this child shape. It will be null if it isn't a child shape of a group.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            parentGroup?: Word.Interfaces.ShapeUpdateData;
            /**
            * Gets the shape group associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `groupShape`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shapeGroup?: Word.Interfaces.ShapeGroupUpdateData;
            /**
            * Gets the `TextFrame` object of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            textFrame?: Word.Interfaces.TextFrameUpdateData;
            /**
            * Returns the text wrap formatting of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            textWrap?: Word.Interfaces.ShapeTextWrapUpdateData;
            /**
             * Specifies whether a given shape can overlap other shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            allowOverlap?: boolean;
            /**
             * Specifies a string that represents the alternative text associated with the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            altTextDescription?: string;
            /**
             * The geometric shape type of the shape. It will be null if isn't a geometric shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            geometricShapeType?: Word.GeometricShapeType | "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus";
            /**
             * The height, in points, of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            height?: number;
            /**
             * The percentage of shape height to vertical relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            heightRelative?: number;
            /**
             * The distance, in points, from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            left?: number;
            /**
             * The relative left position as a percentage from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline or child shape, it will return 0 and can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftRelative?: number;
            /**
             * Specifies if the aspect ratio of this shape is locked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            lockAspectRatio?: boolean;
            /**
             * The name of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            name?: string;
            /**
             * The relative horizontal position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeHorizontalPosition?: Word.RelativeHorizontalPosition | "Margin" | "Page" | "Column" | "Character" | "LeftMargin" | "RightMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * The relative horizontal size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeHorizontalSize?: Word.RelativeSize | "Margin" | "Page" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * The relative vertical position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeVerticalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeVerticalPosition?: Word.RelativeVerticalPosition | "Margin" | "Page" | "Paragraph" | "Line" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * The relative vertical size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeVerticalSize?: Word.RelativeSize | "Margin" | "Page" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * Specifies the rotation, in degrees, of the shape. Not applicable to Canvas shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rotation?: number;
            /**
             * The distance, in points, from the top edge of the shape to the vertical relative position (see {@link Word.RelativeVerticalPosition}). For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            top?: number;
            /**
             * The relative top position as a percentage from the top edge of the shape to the vertical relative position, see {@link Word.RelativeVerticalPosition}. For an inline or child shape, it will return 0 and can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topRelative?: number;
            /**
             * Specifies if the shape is visible. Not applicable to inline shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            visible?: boolean;
            /**
             * The width, in points, of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            width?: number;
            /**
             * The percentage of shape width to horizontal relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            widthRelative?: number;
        }
        /** An interface for updating data on the `ShapeGroup` object, for use in `shapeGroup.set({ ... })`. */
        export interface ShapeGroupUpdateData {
            /**
            * Gets the `Shape` object associated with the group.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shape?: Word.Interfaces.ShapeUpdateData;
        }
        /** An interface for updating data on the `Canvas` object, for use in `canvas.set({ ... })`. */
        export interface CanvasUpdateData {
            /**
            * Gets the `Shape` object associated with the canvas.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shape?: Word.Interfaces.ShapeUpdateData;
        }
        /** An interface for updating data on the `ShapeCollection` object, for use in `shapeCollection.set({ ... })`. */
        export interface ShapeCollectionUpdateData {
            items?: Word.Interfaces.ShapeData[];
        }
        /** An interface for updating data on the `ShapeFill` object, for use in `shapeFill.set({ ... })`. */
        export interface ShapeFillUpdateData {
            /**
             * Specifies the shape fill background color. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            backgroundColor?: string;
            /**
             * Specifies the shape fill foreground color. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            foregroundColor?: string;
            /**
             * Specifies the transparency percentage of the fill as a value from 0.0 (opaque) through 1.0 (clear). Returns `null` if the shape type does not support transparency or the shape fill has inconsistent transparency, such as with a gradient fill type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            transparency?: number;
        }
        /** An interface for updating data on the `TextFrame` object, for use in `textFrame.set({ ... })`. */
        export interface TextFrameUpdateData {
            /**
             * Specifies the automatic sizing settings for the text frame. A text frame can be set to automatically fit the text to the text frame, to automatically fit the text frame to the text, or not perform any automatic sizing.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            autoSizeSetting?: Word.ShapeAutoSize | "None" | "TextToFitShape" | "ShapeToFitText" | "Mixed";
            /**
             * Specifies the bottom margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            bottomMargin?: number;
            /**
             * Specifies the left margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftMargin?: number;
            /**
             * Specifies whether the text in the text frame shouldn't rotate when the shape is rotated.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            noTextRotation?: boolean;
            /**
             * Specifies the angle to which the text is oriented for the text frame. See `Word.ShapeTextOrientation` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            orientation?: Word.ShapeTextOrientation | "None" | "Horizontal" | "EastAsianVertical" | "Vertical270" | "Vertical" | "EastAsianHorizontalRotated" | "Mixed";
            /**
             * Specifies the right margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rightMargin?: number;
            /**
             * Specifies the top margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topMargin?: number;
            /**
             * Specifies the vertical alignment of the text frame. See `Word.ShapeTextVerticalAlignment` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            verticalAlignment?: Word.ShapeTextVerticalAlignment | "Top" | "Middle" | "Bottom";
            /**
             * Determines whether lines break automatically to fit text inside the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            wordWrap?: boolean;
        }
        /** An interface for updating data on the `ShapeTextWrap` object, for use in `shapeTextWrap.set({ ... })`. */
        export interface ShapeTextWrapUpdateData {
            /**
             * Specifies the distance (in points) between the document text and the bottom edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            bottomDistance?: number;
            /**
             * Specifies the distance (in points) between the document text and the left edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftDistance?: number;
            /**
             * Specifies the distance (in points) between the document text and the right edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rightDistance?: number;
            /**
             * Specifies whether the document text should wrap on both sides of the specified shape, on either the left or right side only, or on the side of the shape that's farthest from the page margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            side?: Word.ShapeTextWrapSide | "None" | "Both" | "Left" | "Right" | "Largest";
            /**
             * Specifies the distance (in points) between the document text and the top edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topDistance?: number;
            /**
             * Specifies the text wrap type around the shape. See `Word.ShapeTextWrapType` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            type?: Word.ShapeTextWrapType | "Inline" | "Square" | "Tight" | "Through" | "TopBottom" | "Behind" | "Front";
        }
        /** An interface for updating data on the `Reviewer` object, for use in `reviewer.set({ ... })`. */
        export interface ReviewerUpdateData {
            /**
             * Specifies if the `Reviewer` object is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVisible?: boolean;
        }
        /** An interface for updating data on the `ReviewerCollection` object, for use in `reviewerCollection.set({ ... })`. */
        export interface ReviewerCollectionUpdateData {
            items?: Word.Interfaces.ReviewerData[];
        }
        /** An interface for updating data on the `RevisionsFilter` object, for use in `revisionsFilter.set({ ... })`. */
        export interface RevisionsFilterUpdateData {
            /**
             * Specifies a `RevisionsMarkup` value that represents the extent of reviewer markup displayed in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            markup?: Word.RevisionsMarkup | "None" | "Simple" | "All";
            /**
             * Specifies a `RevisionsView` value that represents globally whether Word displays the original version of the document or the final version, which might have revisions and formatting changes applied.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            view?: Word.RevisionsView | "Final" | "Original";
        }
        /** An interface for updating data on the `RepeatingSectionItem` object, for use in `repeatingSectionItem.set({ ... })`. */
        export interface RepeatingSectionItemUpdateData {
            /**
            * Returns the range of this repeating section item, excluding the start and end tags.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
        }
        /** An interface for updating data on the `Revision` object, for use in `revision.set({ ... })`. */
        export interface RevisionUpdateData {
            /**
            * Gets a `Range` object that represents the range of text that was moved from one place to another in the document with tracked changes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            movedRange?: Word.Interfaces.RangeUpdateData;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained within a revision mark.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeUpdateData;
        }
        /** An interface for updating data on the `RevisionCollection` object, for use in `revisionCollection.set({ ... })`. */
        export interface RevisionCollectionUpdateData {
            items?: Word.Interfaces.RevisionData[];
        }
        /** An interface for updating data on the `DatePickerContentControl` object, for use in `datePickerContentControl.set({ ... })`. */
        export interface DatePickerContentControlUpdateData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockUpdateData;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
            * Gets an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingUpdateData;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Specifies a `CalendarType` value that represents the calendar type for the date picker content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateCalendarType?: Word.CalendarType | "Western" | "Arabic" | "Hebrew" | "Taiwan" | "Japan" | "Thai" | "Korean" | "SakaEra" | "TranslitEnglish" | "TranslitFrench" | "Umalqura";
            /**
             * Specifies the format in which dates are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateDisplayFormat?: string;
            /**
             * Specifies a `LanguageId` that represents the language format for the date displayed in the date picker content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateDisplayLocale?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies a `ContentControlDateStorageFormat` value that represents the format for storage and retrieval of dates when the date picker content control is bound to the XML data store of the active document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateStorageFormat?: Word.ContentControlDateStorageFormat | "Text" | "Date" | "DateTime";
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface for updating data on the `PictureContentControl` object, for use in `pictureContentControl.set({ ... })`. */
        export interface PictureContentControlUpdateData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockUpdateData;
            /**
            * Returns a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingUpdateData;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface for updating data on the `GroupContentControl` object, for use in `groupContentControl.set({ ... })`. */
        export interface GroupContentControlUpdateData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockUpdateData;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
            * Gets an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingUpdateData;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface for updating data on the `BuildingBlockGalleryContentControl` object, for use in `buildingBlockGalleryContentControl.set({ ... })`. */
        export interface BuildingBlockGalleryContentControlUpdateData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockUpdateData;
            /**
            * Returns a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingUpdateData;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the category for the building block content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            buildingBlockCategory?: string;
            /**
             * Specifies a `BuildingBlockType` value that represents the type of building block for the building block content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            buildingBlockType?: Word.BuildingBlockType | "QuickParts" | "CoverPage" | "Equations" | "Footers" | "Headers" | "PageNumber" | "Tables" | "Watermarks" | "AutoText" | "TextBox" | "PageNumberTop" | "PageNumberBottom" | "PageNumberPage" | "TableOfContents" | "CustomQuickParts" | "CustomCoverPage" | "CustomEquations" | "CustomFooters" | "CustomHeaders" | "CustomPageNumber" | "CustomTables" | "CustomWatermarks" | "CustomAutoText" | "CustomTextBox" | "CustomPageNumberTop" | "CustomPageNumberBottom" | "CustomPageNumberPage" | "CustomTableOfContents" | "Custom1" | "Custom2" | "Custom3" | "Custom4" | "Custom5" | "Bibliography" | "CustomBibliography";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface for updating data on the `RepeatingSectionContentControl` object, for use in `repeatingSectionContentControl.set({ ... })`. */
        export interface RepeatingSectionContentControlUpdateData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockUpdateData;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
             * Specifies whether users can add or remove sections from this repeating section content control by using the user interface.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            allowInsertDeleteSection?: boolean;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Specifies the name of the repeating section items used in the context menu associated with this repeating section content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            repeatingSectionItemTitle?: string;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface for updating data on the `ReadabilityStatisticCollection` object, for use in `readabilityStatisticCollection.set({ ... })`. */
        export interface ReadabilityStatisticCollectionUpdateData {
            items?: Word.Interfaces.ReadabilityStatisticData[];
        }
        /** An interface for updating data on the `WebSettings` object, for use in `webSettings.set({ ... })`. */
        export interface WebSettingsUpdateData {
            /**
             * Specifies whether PNG is allowed as an image format when saving a document as a webpage. Default is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            allowPng?: boolean;
            /**
             * Specifies the document encoding (code page or character set) to be used by the web browser when viewing the saved document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            encoding?: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
            /**
             * Specifies whether supporting files are organized in a separate folder when saving the document as a webpage. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            organizeInFolder?: boolean;
            /**
             * Specifies the density (pixels per inch) of graphics images and table cells on a webpage.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pixelsPerInch?: number;
            /**
             * Specifies whether cascading style sheets (CSS) are used for font formatting when viewing a saved document in a web browser. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            relyOnCSS?: boolean;
            /**
             * Specifies whether image files are not generated from drawing objects when saving a document as a webpage. Default is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            relyOnVectorMarkupLanguage?: boolean;
            /**
             * Specifies the ideal minimum screen size (width by height, in pixels) for viewing the saved document in a web browser.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            screenSize?: Word.ScreenSize | "Size544x376" | "Size640x480" | "Size720x512" | "Size800x600" | "Size1024x768" | "Size1152x882" | "Size1152x900" | "Size1280x1024" | "Size1600x1200" | "Size1800x1440" | "Size1920x1200";
            /**
             * Specifies the target browser for documents viewed in a web browser.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            targetBrowser?: Word.TargetBrowser | "V3" | "V4" | "Ie4" | "Ie5" | "Ie6";
            /**
             * Specifies whether long file names are used when saving the document as a webpage. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            useLongFileNames?: boolean;
        }
        /** An interface for updating data on the `XmlNodeCollection` object, for use in `xmlNodeCollection.set({ ... })`. */
        export interface XmlNodeCollectionUpdateData {
            items?: Word.Interfaces.XmlNodeData[];
        }
        /** An interface for updating data on the `XmlNode` object, for use in `xmlNode.set({ ... })`. */
        export interface XmlNodeUpdateData {
            /**
             * Specifies the text displayed for this element if it contains no text. Only applies to element nodes, not attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            placeholderText?: string;
            /**
             * Specifies the text contained within the XML element. Returns an empty string if the node type is `attribute`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            text?: string;
        }
        /** An interface for updating data on the `HtmlDivision` object, for use in `htmlDivision.set({ ... })`. */
        export interface HtmlDivisionUpdateData {
            /**
             * Specifies the left indent value (in points) for this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftIndent?: number;
            /**
             * Specifies the right indent (in points) for this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightIndent?: number;
            /**
             * Specifies the amount of spacing (in points) after this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spaceAfter?: number;
            /**
             * Specifies the spacing (in points) before this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spaceBefore?: number;
        }
        /** An interface for updating data on the `HtmlDivisionCollection` object, for use in `htmlDivisionCollection.set({ ... })`. */
        export interface HtmlDivisionCollectionUpdateData {
            items?: Word.Interfaces.HtmlDivisionData[];
        }
        /** An interface for updating data on the `Frame` object, for use in `frame.set({ ... })`. */
        export interface FrameUpdateData {
            /**
            * Returns a `Range` object that represents the portion of the document that's contained within the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalUpdateData;
            /**
             * Specifies the height (in points) of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            height?: number;
            /**
             * Specifies a `FrameSizeRule` value that represents the rule for determining the height of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            heightRule?: Word.FrameSizeRule | "Auto" | "AtLeast" | "Exact";
            /**
             * Specifies the horizontal distance between the frame and the surrounding text, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            horizontalDistanceFromText?: number;
            /**
             * Specifies the horizontal distance between the edge of the frame and the item specified by the `relativeHorizontalPosition` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            horizontalPosition?: number;
            /**
             * Specifies if the frame is locked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockAnchor?: boolean;
            /**
             * Specifies the relative horizontal position of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            relativeHorizontalPosition?: Word.RelativeHorizontalPosition | "Margin" | "Page" | "Column" | "Character" | "LeftMargin" | "RightMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * Specifies the relative vertical position of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            relativeVerticalPosition?: Word.RelativeVerticalPosition | "Margin" | "Page" | "Paragraph" | "Line" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * Specifies if document text wraps around the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textWrap?: boolean;
            /**
             * Specifies the vertical distance (in points) between the frame and the surrounding text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalDistanceFromText?: number;
            /**
             * Specifies the vertical distance between the edge of the frame and the item specified by the `relativeVerticalPosition` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalPosition?: number;
            /**
             * Specifies the width (in points) of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: number;
            /**
             * Specifies the rule used to determine the width of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            widthRule?: Word.FrameSizeRule | "Auto" | "AtLeast" | "Exact";
        }
        /** An interface for updating data on the `FrameCollection` object, for use in `frameCollection.set({ ... })`. */
        export interface FrameCollectionUpdateData {
            items?: Word.Interfaces.FrameData[];
        }
        /** An interface for updating data on the `DocumentLibraryVersionCollection` object, for use in `documentLibraryVersionCollection.set({ ... })`. */
        export interface DocumentLibraryVersionCollectionUpdateData {
            items?: Word.Interfaces.DocumentLibraryVersionData[];
        }
        /** An interface for updating data on the `ListFormat` object, for use in `listFormat.set({ ... })`. */
        export interface ListFormatUpdateData {
            /**
            * Gets the list template associated with the `ListFormat` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            listTemplate?: Word.Interfaces.ListTemplateUpdateData;
            /**
             * Specifies the list level number for the first paragraph for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listLevelNumber?: number;
        }
        /** An interface for updating data on the `FillFormat` object, for use in `fillFormat.set({ ... })`. */
        export interface FillFormatUpdateData {
            /**
            * Returns a `ColorFormat` object that represents the background color for the fill.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            backgroundColor?: Word.Interfaces.ColorFormatUpdateData;
            /**
            * Returns a `ColorFormat` object that represents the foreground color for the fill.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatUpdateData;
            /**
             * Specifies the angle of the gradient fill. The valid range of values is from 0 to 359.9.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientAngle?: number;
            /**
             * Specifies if the object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies whether the fill rotates with the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotateWithObject?: boolean;
            /**
             * Specifies the alignment (the origin of the coordinate grid) for the tiling of the texture fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureAlignment?: Word.TextureAlignment | "Mixed" | "TopLeft" | "Top" | "TopRight" | "Left" | "Center" | "Right" | "BottomLeft" | "Bottom" | "BottomRight";
            /**
             * Specifies the horizontal scaling factor for the texture fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureHorizontalScale?: number;
            /**
             * Specifies the horizontal offset of the texture from the origin in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureOffsetX?: number;
            /**
             * Specifies the vertical offset of the texture.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureOffsetY?: number;
            /**
             * Specifies whether the texture is tiled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureTile?: boolean;
            /**
             * Specifies the vertical scaling factor for the texture fill as a value between 0.0 and 1.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureVerticalScale?: number;
            /**
             * Specifies the degree of transparency of the fill for a shape as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
        }
        /** An interface for updating data on the `GlowFormat` object, for use in `glowFormat.set({ ... })`. */
        export interface GlowFormatUpdateData {
            /**
            * Returns a `ColorFormat` object that represents the color for a glow effect.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            color?: Word.Interfaces.ColorFormatUpdateData;
            /**
             * Specifies the length of the radius for a glow effect.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            radius?: number;
            /**
             * Specifies the degree of transparency for the glow effect as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
        }
        /** An interface for updating data on the `LineFormat` object, for use in `lineFormat.set({ ... })`. */
        export interface LineFormatUpdateData {
            /**
            * Gets a `ColorFormat` object that represents the background color for a patterned line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            backgroundColor?: Word.Interfaces.ColorFormatUpdateData;
            /**
            * Gets a `ColorFormat` object that represents the foreground color for the line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatUpdateData;
            /**
             * Specifies the length of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadLength?: Word.ArrowheadLength | "Mixed" | "Short" | "Medium" | "Long";
            /**
             * Specifies the style of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadStyle?: Word.ArrowheadStyle | "Mixed" | "None" | "Triangle" | "Open" | "Stealth" | "Diamond" | "Oval";
            /**
             * Specifies the width of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadWidth?: Word.ArrowheadWidth | "Mixed" | "Narrow" | "Medium" | "Wide";
            /**
             * Specifies the dash style for the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dashStyle?: Word.LineDashStyle | "Mixed" | "Solid" | "SquareDot" | "RoundDot" | "Dash" | "DashDot" | "DashDotDot" | "LongDash" | "LongDashDot" | "LongDashDotDot" | "SysDash" | "SysDot" | "SysDashDot";
            /**
             * Specifies the length of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadLength?: Word.ArrowheadLength | "Mixed" | "Short" | "Medium" | "Long";
            /**
             * Specifies the style of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadStyle?: Word.ArrowheadStyle | "Mixed" | "None" | "Triangle" | "Open" | "Stealth" | "Diamond" | "Oval";
            /**
             * Specifies the width of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadWidth?: Word.ArrowheadWidth | "Mixed" | "Narrow" | "Medium" | "Wide";
            /**
             * Specifies if to draw lines inside a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            insetPen?: boolean;
            /**
             * Specifies if the object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the pattern applied to the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pattern?: Word.PatternType | "Mixed" | "Percent5" | "Percent10" | "Percent20" | "Percent25" | "Percent30" | "Percent40" | "Percent50" | "Percent60" | "Percent70" | "Percent75" | "Percent80" | "Percent90" | "DarkHorizontal" | "DarkVertical" | "DarkDownwardDiagonal" | "DarkUpwardDiagonal" | "SmallCheckerBoard" | "Trellis" | "LightHorizontal" | "LightVertical" | "LightDownwardDiagonal" | "LightUpwardDiagonal" | "SmallGrid" | "DottedDiamond" | "WideDownwardDiagonal" | "WideUpwardDiagonal" | "DashedUpwardDiagonal" | "DashedDownwardDiagonal" | "NarrowVertical" | "NarrowHorizontal" | "DashedVertical" | "DashedHorizontal" | "LargeConfetti" | "LargeGrid" | "HorizontalBrick" | "LargeCheckerBoard" | "SmallConfetti" | "ZigZag" | "SolidDiamond" | "DiagonalBrick" | "OutlinedDiamond" | "Plaid" | "Sphere" | "Weave" | "DottedGrid" | "Divot" | "Shingle" | "Wave" | "Horizontal" | "Vertical" | "Cross" | "DownwardDiagonal" | "UpwardDiagonal" | "DiagonalCross";
            /**
             * Specifies the line format style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            style?: Word.LineFormatStyle | "Mixed" | "Single" | "ThinThin" | "ThinThick" | "ThickThin" | "ThickBetweenThin";
            /**
             * Specifies the degree of transparency of the line as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
            /**
             * Specifies the thickness of the line in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            weight?: number;
        }
        /** An interface for updating data on the `ReflectionFormat` object, for use in `reflectionFormat.set({ ... })`. */
        export interface ReflectionFormatUpdateData {
            /**
             * Specifies the degree of blur effect applied to the `ReflectionFormat` object as a value between 0.0 and 100.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            blur?: number;
            /**
             * Specifies the amount of separation, in points, of the reflected image from the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offset?: number;
            /**
             * Specifies the size of the reflection as a percentage of the reflected shape from 0 to 100.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            size?: number;
            /**
             * Specifies the degree of transparency for the reflection effect as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
            /**
             * Specifies a `ReflectionType` value that represents the type and direction of the lighting for a shape reflection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: Word.ReflectionType | "Mixed" | "None" | "Type1" | "Type2" | "Type3" | "Type4" | "Type5" | "Type6" | "Type7" | "Type8" | "Type9";
        }
        /** An interface for updating data on the `ColorFormat` object, for use in `colorFormat.set({ ... })`. */
        export interface ColorFormatUpdateData {
            /**
             * Specifies the brightness of a specified shape color. Valid values are from `-1` (darkest) to `1` (lightest), `0` represents neutral.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            brightness?: number;
            /**
             * Specifies the theme color for a color format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            objectThemeColor?: Word.ThemeColorIndex | "NotThemeColor" | "MainDark1" | "MainLight1" | "MainDark2" | "MainLight2" | "Accent1" | "Accent2" | "Accent3" | "Accent4" | "Accent5" | "Accent6" | "Hyperlink" | "HyperlinkFollowed" | "Background1" | "Text1" | "Background2" | "Text2";
            /**
             * Specifies the red-green-blue (RGB) value of the specified color. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rgb?: string;
            /**
             * Specifies the lightening or darkening of a specified shape's color. Valid values are from `-1` (darkest) to `1` (lightest), `0` represents neutral.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tintAndShade?: number;
        }
        /** An interface for updating data on the `ShadowFormat` object, for use in `shadowFormat.set({ ... })`. */
        export interface ShadowFormatUpdateData {
            /**
            * Returns a `ColorFormat` object that represents the foreground color for the fill, line, or shadow.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatUpdateData;
            /**
             * Specifies the blur level for a shadow format as a value between 0.0 and 100.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            blur?: number;
            /**
             * Specifies whether the object or the formatting applied to it is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies `true` if the shadow of the shape appears filled in and is obscured by the shape, even if the shape has no fill,
                        `false` if the shadow has no fill and the outline of the shadow is visible through the shape if the shape has no fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            obscured?: boolean;
            /**
             * Specifies the horizontal offset (in points) of the shadow from the shape.
                        A positive value offsets the shadow to the right of the shape; a negative value offsets it to the left.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offsetX?: number;
            /**
             * Specifies the vertical offset (in points) of the shadow from the shape.
                        A positive value offsets the shadow to the top of the shape; a negative value offsets it to the bottom.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offsetY?: number;
            /**
             * Specifies whether to rotate the shadow when rotating the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotateWithShape?: boolean;
            /**
             * Specifies the width of the shadow.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            size?: number;
            /**
             * Specifies the type of shadow formatting to apply to a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            style?: Word.ShadowStyle | "Mixed" | "OuterShadow" | "InnerShadow";
            /**
             * Specifies the degree of transparency of the shadow as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
            /**
             * Specifies the shape shadow type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: Word.ShadowType | "Mixed" | "Type1" | "Type2" | "Type3" | "Type4" | "Type5" | "Type6" | "Type7" | "Type8" | "Type9" | "Type10" | "Type11" | "Type12" | "Type13" | "Type14" | "Type15" | "Type16" | "Type17" | "Type18" | "Type19" | "Type20" | "Type21" | "Type22" | "Type23" | "Type24" | "Type25" | "Type26" | "Type27" | "Type28" | "Type29" | "Type30" | "Type31" | "Type32" | "Type33" | "Type34" | "Type35" | "Type36" | "Type37" | "Type38" | "Type39" | "Type40" | "Type41" | "Type42" | "Type43";
        }
        /** An interface for updating data on the `ThreeDimensionalFormat` object, for use in `threeDimensionalFormat.set({ ... })`. */
        export interface ThreeDimensionalFormatUpdateData {
            /**
            * Returns a `ColorFormat` object that represents color of the contour of a shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            contourColor?: Word.Interfaces.ColorFormatUpdateData;
            /**
            * Returns a `ColorFormat` object that represents the color of the shape's extrusion.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            extrusionColor?: Word.Interfaces.ColorFormatUpdateData;
            /**
             * Specifies the depth of the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomDepth?: number;
            /**
             * Specifies the inset size for the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomInset?: number;
            /**
             * Specifies a `BevelType` value that represents the bevel type for the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomType?: Word.BevelType | "mixed" | "none" | "relaxedInset" | "circle" | "slope" | "cross" | "angle" | "softRound" | "convex" | "coolSlant" | "divot" | "riblet" | "hardEdge" | "artDeco";
            /**
             * Specifies the depth of the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopDepth?: number;
            /**
             * Specifies the inset size for the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopInset?: number;
            /**
             * Specifies a `BevelType` value that represents the bevel type for the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopType?: Word.BevelType | "mixed" | "none" | "relaxedInset" | "circle" | "slope" | "cross" | "angle" | "softRound" | "convex" | "coolSlant" | "divot" | "riblet" | "hardEdge" | "artDeco";
            /**
             * Specifies the width of the contour of a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            contourWidth?: number;
            /**
             * Specifies the depth of the shape's extrusion.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            depth?: number;
            /**
             * Specifies whether the extrusion color is based on the extruded shape's fill (the front face of the extrusion)
                        and automatically changes when the shape's fill changes, or whether the extrusion color is independent of the shape's fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            extrusionColorType?: Word.ExtrusionColorType | "mixed" | "automatic" | "custom";
            /**
             * Specifies the amount of perspective for a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            fieldOfView?: number;
            /**
             * Specifies `true` if the extrusion appears in perspective — that is, if the walls of the extrusion narrow toward a vanishing point,
                        `false` if the extrusion is a parallel, or orthographic, projection — that is, if the walls don't narrow toward a vanishing point.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isPerspective?: boolean;
            /**
             * Specifies if the specified object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the angle of the lighting.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lightAngle?: number;
            /**
             * Specifies a `LightRigType` value that represents the lighting preset.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLighting?: Word.LightRigType | "Mixed" | "LegacyFlat1" | "LegacyFlat2" | "LegacyFlat3" | "LegacyFlat4" | "LegacyNormal1" | "LegacyNormal2" | "LegacyNormal3" | "LegacyNormal4" | "LegacyHarsh1" | "LegacyHarsh2" | "LegacyHarsh3" | "LegacyHarsh4" | "ThreePoint" | "Balanced" | "Soft" | "Harsh" | "Flood" | "Contrasting" | "Morning" | "Sunrise" | "Sunset" | "Chilly" | "Freezing" | "Flat" | "TwoPoint" | "Glow" | "BrightRoom";
            /**
             * Specifies the position of the light source relative to the extrusion.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLightingDirection?: Word.PresetLightingDirection | "Mixed" | "TopLeft" | "Top" | "TopRight" | "Left" | "None" | "Right" | "BottomLeft" | "Bottom" | "BottomRight";
            /**
             * Specifies the intensity of the extrusion lighting.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLightingSoftness?: Word.PresetLightingSoftness | "Mixed" | "Dim" | "Normal" | "Bright";
            /**
             * Specifies the extrusion surface material.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetMaterial?: Word.PresetMaterial | "Mixed" | "Matte" | "Plastic" | "Metal" | "WireFrame" | "Matte2" | "Plastic2" | "Metal2" | "WarmMatte" | "TranslucentPowder" | "Powder" | "DarkEdge" | "SoftEdge" | "Clear" | "Flat" | "SoftMetal";
            /**
             * Specifies whether text on a shape rotates with shape. `true` rotates the text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            projectText?: boolean;
            /**
             * Specifies the rotation of the extruded shape around the x-axis in degrees.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationX?: number;
            /**
             * Specifies the rotation of the extruded shape around the y-axis in degrees.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationY?: number;
            /**
             * Specifies the z-axis rotation of the camera.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationZ?: number;
            /**
             * Specifies the position on the z-axis for the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            z?: number;
        }
        /** An interface for updating data on the `Bibliography` object, for use in `bibliography.set({ ... })`. */
        export interface BibliographyUpdateData {
            /**
             * Specifies the name of the active style to use for the bibliography.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bibliographyStyle?: string;
        }
        /** An interface for updating data on the `SourceCollection` object, for use in `sourceCollection.set({ ... })`. */
        export interface SourceCollectionUpdateData {
            items?: Word.Interfaces.SourceData[];
        }
        /** An interface for updating data on the `PageSetup` object, for use in `pageSetup.set({ ... })`. */
        export interface PageSetupUpdateData {
            /**
            * Specifies a `LineNumbering` object that represents the line numbers for the `PageSetup` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            lineNumbering?: Word.Interfaces.LineNumberingUpdateData;
            /**
             * Specifies whether Microsoft Word prints the document as a booklet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldPrinting?: boolean;
            /**
             * Specifies the number of pages for each booklet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldPrintingSheets?: number;
            /**
             * Specifies if Microsoft Word reverses the printing order for book fold printing of bidirectional or Asian language documents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldReversePrinting?: boolean;
            /**
             * Specifies the distance (in points) between the bottom edge of the page and the bottom boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bottomMargin?: number;
            /**
             * Specifies the number of characters per line in the document grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            charsLine?: number;
            /**
             * Specifies whether the first page has a different header and footer.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            differentFirstPageHeaderFooter?: boolean;
            /**
             * Specifies the distance between the footer and the bottom of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            footerDistance?: number;
            /**
             * Specifies the amount (in points) of extra margin space added to each page in a document or section for binding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutter?: number;
            /**
             * Specifies on which side the gutter appears in a document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutterPosition?: Word.GutterPosition | "Left" | "Right" | "Top";
            /**
             * Specifies whether Microsoft Word uses gutters for the current document based on a right-to-left language or a left-to-right language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutterStyle?: Word.GutterStyle | "Bidirectional" | "Latin";
            /**
             * Specifies the distance between the header and the top of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            headerDistance?: number;
            /**
             * Specifies the layout mode for the current document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            layoutMode?: Word.LayoutMode | "Default" | "Grid" | "LineGrid" | "Genko";
            /**
             * Specifies the distance (in points) between the left edge of the page and the left boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            leftMargin?: number;
            /**
             * Specifies the number of lines per page in the document grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            linesPage?: number;
            /**
             * Specifies if the inside and outside margins of facing pages are the same width.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            mirrorMargins?: boolean;
            /**
             * Specifies whether odd and even pages have different headers and footers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            oddAndEvenPagesHeaderFooter?: boolean;
            /**
             * Specifies the orientation of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            orientation?: Word.PageOrientation | "Portrait" | "Landscape";
            /**
             * Specifies the page height in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageHeight?: number;
            /**
             * Specifies the page width in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageWidth?: number;
            /**
             * Specifies the paper size of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            paperSize?: Word.PaperSize | "Size10x14" | "Size11x17" | "Letter" | "LetterSmall" | "Legal" | "Executive" | "A3" | "A4" | "A4Small" | "A5" | "B4" | "B5" | "CSheet" | "DSheet" | "ESheet" | "FanfoldLegalGerman" | "FanfoldStdGerman" | "FanfoldUS" | "Folio" | "Ledger" | "Note" | "Quarto" | "Statement" | "Tabloid" | "Envelope9" | "Envelope10" | "Envelope11" | "Envelope12" | "Envelope14" | "EnvelopeB4" | "EnvelopeB5" | "EnvelopeB6" | "EnvelopeC3" | "EnvelopeC4" | "EnvelopeC5" | "EnvelopeC6" | "EnvelopeC65" | "EnvelopeDL" | "EnvelopeItaly" | "EnvelopeMonarch" | "EnvelopePersonal" | "Custom";
            /**
             * Specifies the distance (in points) between the right edge of the page and the right boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rightMargin?: number;
            /**
             * Specifies the reading order and alignment for the specified sections.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sectionDirection?: Word.SectionDirection | "RightToLeft" | "LeftToRight";
            /**
             * Specifies the type of section break for the specified object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sectionStart?: Word.SectionStart | "Continuous" | "NewColumn" | "NewPage" | "EvenPage" | "OddPage";
            /**
             * Specifies whether to show the grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showGrid?: boolean;
            /**
             * Specifies if endnotes are printed at the end of the next section that doesn't suppress endnotes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            suppressEndnotes?: boolean;
            /**
             * Specifies the top margin of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            topMargin?: number;
            /**
             * Specifies whether to print two pages per sheet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            twoPagesOnOne?: boolean;
            /**
             * Specifies the vertical alignment of text on each page in a document or section.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalAlignment?: Word.PageSetupVerticalAlignment | "Top" | "Center" | "Justify" | "Bottom";
        }
        /** An interface for updating data on the `LineNumbering` object, for use in `lineNumbering.set({ ... })`. */
        export interface LineNumberingUpdateData {
            /**
             * Specifies the numeric increment for line numbers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            countBy?: number;
            /**
             * Specifies the distance (in points) between the right edge of line numbers and the left edge of the document text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            distanceFromText?: number;
            /**
             * Specifies if line numbering is active for the specified document, section, or sections.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isActive?: boolean;
            /**
             * Specifies the way line numbering runs; that is, whether it starts over at the beginning of a new page or section, or runs continuously.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            restartMode?: Word.NumberingRule | "RestartContinuous" | "RestartSection" | "RestartPage";
            /**
             * Specifies the starting line number.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            startingNumber?: number;
        }
        /** An interface for updating data on the `TextColumnCollection` object, for use in `textColumnCollection.set({ ... })`. */
        export interface TextColumnCollectionUpdateData {
            items?: Word.Interfaces.TextColumnData[];
        }
        /** An interface for updating data on the `TextColumn` object, for use in `textColumn.set({ ... })`. */
        export interface TextColumnUpdateData {
            /**
             * Specifies the amount of spacing (in points) after the specified paragraph or text column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            spaceAfter?: number;
            /**
             * Specifies the width, in points, of the specified text columns.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: number;
        }
        /** An interface for updating data on the `Selection` object, for use in `selection.set({ ... })`. */
        export interface SelectionUpdateData {
            /**
             * Specifies the ending character position of the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: number;
            /**
             * Specifies the width in which Word fits the text in the current selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fitTextWidth?: number;
            /**
             * Specifies whether column selection mode is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isColumnSelectModeActive?: boolean;
            /**
             * Specifies whether Extend mode is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isExtendModeActive?: boolean;
            /**
             * Specifies whether the beginning of the selection is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isStartActive?: boolean;
            /**
             * Specifies whether Word has detected the language of the selected text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageDetected?: boolean;
            /**
             * Specifies the orientation of text in the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            orientation?: Word.TextOrientation | "Horizontal" | "Upward" | "Downward" | "VerticalFarEast" | "HorizontalRotatedFarEast" | "Vertical";
            /**
             * Specifies the starting character position of the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: number;
            /**
             * Specifies the text in the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            text?: string;
        }
        /** An interface for updating data on the `RangeScopedCollection` object, for use in `rangeScopedCollection.set({ ... })`. */
        export interface RangeScopedCollectionUpdateData {
            items?: Word.Interfaces.RangeData[];
        }
        /** An interface for updating data on the `Bookmark` object, for use in `bookmark.set({ ... })`. */
        export interface BookmarkUpdateData {
            /**
            * Returns a `Range` object that represents the portion of the document that's contained in the `Bookmark` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
             * Specifies the ending character position of the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: number;
            /**
             * Specifies the starting character position of the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: number;
        }
        /** An interface for updating data on the `BookmarkCollection` object, for use in `bookmarkCollection.set({ ... })`. */
        export interface BookmarkCollectionUpdateData {
            items?: Word.Interfaces.BookmarkData[];
        }
        /** An interface for updating data on the `Index` object, for use in `index.set({ ... })`. */
        export interface IndexUpdateData {
            /**
            * Returns a `Range` object that represents the portion of the document that is contained within the index.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeUpdateData;
            /**
             * Specifies the leader character between entries in the index and their associated page numbers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
        }
        /** An interface for updating data on the `IndexCollection` object, for use in `indexCollection.set({ ... })`. */
        export interface IndexCollectionUpdateData {
            items?: Word.Interfaces.IndexData[];
        }
        /** An interface for updating data on the `ListTemplateCollection` object, for use in `listTemplateCollection.set({ ... })`. */
        export interface ListTemplateCollectionUpdateData {
            items?: Word.Interfaces.ListTemplateData[];
        }
        /** An interface for updating data on the `ListTemplateGalleryCollection` object, for use in `listTemplateGalleryCollection.set({ ... })`. */
        export interface ListTemplateGalleryCollectionUpdateData {
            items?: Word.Interfaces.ListTemplateGalleryData[];
        }
        /** An interface describing the data returned by calling `editor.toJSON()`. */
        export interface EditorData {
            /**
            * Gets a `Range` object that represents the next range that the editor has permissions to modify.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            nextRange?: Word.Interfaces.RangeData;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `Editor` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Gets the identifier for the `Editor` object when the parent document is saved as a webpage.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: string;
            /**
             * Gets the name of the editor.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
        }
        /** An interface describing the data returned by calling `conflictCollection.toJSON()`. */
        export interface ConflictCollectionData {
            items?: Word.Interfaces.ConflictData[];
        }
        /** An interface describing the data returned by calling `conflict.toJSON()`. */
        export interface ConflictData {
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `Conflict` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Gets the `RevisionType` for the `Conflict` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.RevisionType | "None" | "Insert" | "Delete" | "Property" | "ParagraphNumber" | "DisplayField" | "Reconcile" | "Conflict" | "Style" | "Replace" | "ParagraphProperty" | "TableProperty" | "SectionProperty" | "StyleDefinition" | "MovedFrom" | "MovedTo" | "CellInsertion" | "CellDeletion" | "CellMerge" | "CellSplit" | "ConflictInsert" | "ConflictDelete";
        }
        /** An interface describing the data returned by calling `critiqueAnnotation.toJSON()`. */
        export interface CritiqueAnnotationData {
            /**
             * Gets the critique that was passed when the annotation was inserted.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            critique?: Word.Critique;
        }
        /** An interface describing the data returned by calling `annotation.toJSON()`. */
        export interface AnnotationData {
            /**
             * Gets the unique identifier, which is meant to be used for easier tracking of `Annotation` objects.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            id?: string;
            /**
             * Gets the state of the annotation.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            state?: Word.AnnotationState | "Created" | "Accepted" | "Rejected";
        }
        /** An interface describing the data returned by calling `annotationCollection.toJSON()`. */
        export interface AnnotationCollectionData {
            items?: Word.Interfaces.AnnotationData[];
        }
        /** An interface describing the data returned by calling `application.toJSON()`. */
        export interface ApplicationData {
            /**
            * Returns a `Bibliography` object that represents the bibliography reference sources stored in Microsoft Word.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            bibliography?: Word.Interfaces.BibliographyData;
            /**
            * Returns a `ListTemplateGalleryCollection` object that represents all the list template galleries in Microsoft Word.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            listTemplateGalleries?: Word.Interfaces.ListTemplateGalleryData[];
            /**
             * Specifies if Microsoft Word automatically detects the language you are using as you type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            checkLanguage?: boolean;
            /**
             * Gets a `LanguageId` value that represents the language selected for the Microsoft Word user interface.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            language?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
        }
        /** An interface describing the data returned by calling `body.toJSON()`. */
        export interface BodyData {
            /**
            * Gets the collection of rich text content control objects in the body.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            contentControls?: Word.Interfaces.ContentControlData[];
            /**
            * Gets the collection of `Field` objects in the body.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            fields?: Word.Interfaces.FieldData[];
            /**
            * Gets the text format of the body. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontData;
            /**
            * Gets the collection of `InlinePicture` objects in the body. The collection doesn't include floating images.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            inlinePictures?: Word.Interfaces.InlinePictureData[];
            /**
            * Gets the collection of `List` objects in the body.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            lists?: Word.Interfaces.ListData[];
            /**
            * Gets the collection of `Paragraph` objects in the body.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            *
            * Important: Paragraphs in tables aren't returned for requirement sets 1.1 and 1.2. From requirement set 1.3, paragraphs in tables are also returned.
            */
            paragraphs?: Word.Interfaces.ParagraphData[];
            /**
            * Gets the collection of `Shape` objects in the body, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            *
            * Important: Be aware that with time, additional types of shapes may be supported. Therefore, your add-in should request and handle specific types of shapes.
            */
            shapes?: Word.Interfaces.ShapeData[];
            /**
            * Gets the collection of `Table` objects in the body.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            tables?: Word.Interfaces.TableData[];
            /**
             * Specifies the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: string;
            /**
             * Specifies the built-in style name for the body. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
            /**
             * Gets the text of the body. Use the insertText method to insert text.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: string;
            /**
             * Gets the type of the body. The type can be `mainDoc`, `section`, `header`, `footer`, or `tableCell`. Additional types `footnote`, `endnote`, and `noteItem` are supported in WordApi 1.5 and later.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            type?: Word.BodyType | "Unknown" | "MainDoc" | "Section" | "Header" | "Footer" | "TableCell" | "Footnote" | "Endnote" | "NoteItem";
        }
        /** An interface describing the data returned by calling `border.toJSON()`. */
        export interface BorderData {
            /**
             * Specifies the color for the border. Color is specified in ‘#RRGGBB’ format or by using the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            color?: string;
            /**
             * Gets the location of the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            location?: Word.BorderLocation | "Top" | "Left" | "Bottom" | "Right" | "InsideHorizontal" | "InsideVertical" | "Inside" | "Outside" | "All";
            /**
             * Specifies the border type for the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            type?: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
            /**
             * Specifies whether the border is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            visible?: boolean;
            /**
             * Specifies the width for the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            width?: Word.BorderWidth | "None" | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600" | "Mixed";
        }
        /** An interface describing the data returned by calling `borderUniversal.toJSON()`. */
        export interface BorderUniversalData {
            /**
             * Specifies the graphical page-border design for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            artStyle?: Word.PageBorderArt | "Apples" | "MapleMuffins" | "CakeSlice" | "CandyCorn" | "IceCreamCones" | "ChampagneBottle" | "PartyGlass" | "ChristmasTree" | "Trees" | "PalmsColor" | "Balloons3Colors" | "BalloonsHotAir" | "PartyFavor" | "ConfettiStreamers" | "Hearts" | "HeartBalloon" | "Stars3D" | "StarsShadowed" | "Stars" | "Sun" | "Earth2" | "Earth1" | "PeopleHats" | "Sombrero" | "Pencils" | "Packages" | "Clocks" | "Firecrackers" | "Rings" | "MapPins" | "Confetti" | "CreaturesButterfly" | "CreaturesLadyBug" | "CreaturesFish" | "BirdsFlight" | "ScaredCat" | "Bats" | "FlowersRoses" | "FlowersRedRose" | "Poinsettias" | "Holly" | "FlowersTiny" | "FlowersPansy" | "FlowersModern2" | "FlowersModern1" | "WhiteFlowers" | "Vine" | "FlowersDaisies" | "FlowersBlockPrint" | "DecoArchColor" | "Fans" | "Film" | "Lightning1" | "Compass" | "DoubleD" | "ClassicalWave" | "ShadowedSquares" | "TwistedLines1" | "Waveline" | "Quadrants" | "CheckedBarColor" | "Swirligig" | "PushPinNote1" | "PushPinNote2" | "Pumpkin1" | "EggsBlack" | "Cup" | "HeartGray" | "GingerbreadMan" | "BabyPacifier" | "BabyRattle" | "Cabins" | "HouseFunky" | "StarsBlack" | "Snowflakes" | "SnowflakeFancy" | "Skyrocket" | "Seattle" | "MusicNotes" | "PalmsBlack" | "MapleLeaf" | "PaperClips" | "ShorebirdTracks" | "People" | "PeopleWaving" | "EclipsingSquares2" | "Hypnotic" | "DiamondsGray" | "DecoArch" | "DecoBlocks" | "CirclesLines" | "Papyrus" | "Woodwork" | "WeavingBraid" | "WeavingRibbon" | "WeavingAngles" | "ArchedScallops" | "Safari" | "CelticKnotwork" | "CrazyMaze" | "EclipsingSquares1" | "Birds" | "FlowersTeacup" | "Northwest" | "Southwest" | "Tribal6" | "Tribal4" | "Tribal3" | "Tribal2" | "Tribal5" | "XIllusions" | "ZanyTriangles" | "Pyramids" | "PyramidsAbove" | "ConfettiGrays" | "ConfettiOutline" | "ConfettiWhite" | "Mosaic" | "Lightning2" | "HeebieJeebies" | "LightBulb" | "Gradient" | "TriangleParty" | "TwistedLines2" | "Moons" | "Ovals" | "DoubleDiamonds" | "ChainLink" | "Triangles" | "Tribal1" | "MarqueeToothed" | "SharksTeeth" | "Sawtooth" | "SawtoothGray" | "PostageStamp" | "WeavingStrips" | "ZigZag" | "CrossStitch" | "Gems" | "CirclesRectangles" | "CornerTriangles" | "CreaturesInsects" | "ZigZagStitch" | "Checkered" | "CheckedBarBlack" | "Marquee" | "BasicWhiteDots" | "BasicWideMidline" | "BasicWideOutline" | "BasicWideInline" | "BasicThinLines" | "BasicWhiteDashes" | "BasicWhiteSquares" | "BasicBlackSquares" | "BasicBlackDashes" | "BasicBlackDots" | "StarsTop" | "CertificateBanner" | "Handmade1" | "Handmade2" | "TornPaper" | "TornPaperBlack" | "CouponCutoutDashes" | "CouponCutoutDots";
            /**
             * Specifies the width (in points) of the graphical page border specified in the `artStyle` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            artWidth?: number;
            /**
             * Specifies the color for the `BorderUniversal` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Specifies the color for the `BorderUniversal` or {@link Word.Font} object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Returns `true` if an inside border can be applied to the specified object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            inside?: boolean;
            /**
             * Specifies whether the border is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the line style of the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lineStyle?: Word.BorderLineStyle | "None" | "Single" | "Dot" | "DashSmallGap" | "DashLargeGap" | "DashDot" | "DashDotDot" | "Double" | "Triple" | "ThinThickSmallGap" | "ThickThinSmallGap" | "ThinThickThinSmallGap" | "ThinThickMedGap" | "ThickThinMedGap" | "ThinThickThinMedGap" | "ThinThickLargeGap" | "ThickThinLargeGap" | "ThinThickThinLargeGap" | "SingleWavy" | "DoubleWavy" | "DashDotStroked" | "Emboss3D" | "Engrave3D" | "Outset" | "Inset";
            /**
             * Specifies the line width of an object's border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lineWidth?: Word.LineWidth | "Pt025" | "Pt050" | "Pt075" | "Pt100" | "Pt150" | "Pt225" | "Pt300" | "Pt450" | "Pt600";
        }
        /** An interface describing the data returned by calling `borderCollection.toJSON()`. */
        export interface BorderCollectionData {
            items?: Word.Interfaces.BorderData[];
        }
        /** An interface describing the data returned by calling `borderUniversalCollection.toJSON()`. */
        export interface BorderUniversalCollectionData {
            items?: Word.Interfaces.BorderUniversalData[];
        }
        /** An interface describing the data returned by calling `break.toJSON()`. */
        export interface BreakData {
            /**
            * Returns a `Range` object that represents the portion of the document that's contained in the break.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Returns the page number on which the break occurs.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageIndex?: number;
        }
        /** An interface describing the data returned by calling `breakCollection.toJSON()`. */
        export interface BreakCollectionData {
            items?: Word.Interfaces.BreakData[];
        }
        /** An interface describing the data returned by calling `buildingBlock.toJSON()`. */
        export interface BuildingBlockData {
            /**
             * Specifies the description for the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            description?: string;
            /**
             * Returns the internal identification number for the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: string;
            /**
             * Returns the position of this building block in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            index?: number;
            /**
             * Specifies a `DocPartInsertType` value that represents how to insert the contents of the building block into the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            insertType?: Word.DocPartInsertType | "Content" | "Paragraph" | "Page";
            /**
             * Specifies the name of the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: string;
            /**
             * Specifies the contents of the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            value?: string;
        }
        /** An interface describing the data returned by calling `buildingBlockCategory.toJSON()`. */
        export interface BuildingBlockCategoryData {
            /**
             * Returns the position of the `BuildingBlockCategory` object in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            index?: number;
            /**
             * Returns the name of the `BuildingBlockCategory` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: string;
        }
        /** An interface describing the data returned by calling `buildingBlockTypeItem.toJSON()`. */
        export interface BuildingBlockTypeItemData {
            /**
             * Returns the position of an item in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            index?: number;
            /**
             * Returns the localized name of a building block type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: string;
        }
        /** An interface describing the data returned by calling `checkboxContentControl.toJSON()`. */
        export interface CheckboxContentControlData {
            /**
             * Specifies the current state of the checkbox.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            isChecked?: boolean;
        }
        /** An interface describing the data returned by calling `coauthoringLock.toJSON()`. */
        export interface CoauthoringLockData {
            /**
            * Gets the owner of the lock.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            owner?: Word.Interfaces.CoauthorData;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringLock` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Gets a `CoauthoringLockType` value that represents the lock type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.CoauthoringLockType | "None" | "Reservation" | "Ephemeral" | "Changed";
        }
        /** An interface describing the data returned by calling `coauthoringLockCollection.toJSON()`. */
        export interface CoauthoringLockCollectionData {
            items?: Word.Interfaces.CoauthoringLockData[];
        }
        /** An interface describing the data returned by calling `coauthor.toJSON()`. */
        export interface CoauthorData {
            /**
            * Gets a `CoauthoringLockCollection` object that represents the locks in the document that are associated with this coauthor.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            locks?: Word.Interfaces.CoauthoringLockData[];
            /**
             * Gets the email address of the coauthor.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            emailAddress?: string;
            /**
             * Gets the unique identifier for the `Coauthor` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: string;
            /**
             * Gets whether this author represents the current user.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMe?: boolean;
            /**
             * Gets the display name of the coauthor.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
        }
        /** An interface describing the data returned by calling `coauthorCollection.toJSON()`. */
        export interface CoauthorCollectionData {
            items?: Word.Interfaces.CoauthorData[];
        }
        /** An interface describing the data returned by calling `coauthoring.toJSON()`. */
        export interface CoauthoringData {
            /**
            * Gets a `CoauthorCollection` object that represents all the coauthors currently editing the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            authors?: Word.Interfaces.CoauthorData[];
            /**
            * Gets a `ConflictCollection` object that represents all the conflicts in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            conflicts?: Word.Interfaces.ConflictData[];
            /**
            * Gets a `CoauthoringLockCollection` object that represents the locks in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            locks?: Word.Interfaces.CoauthoringLockData[];
            /**
            * Gets a `Coauthor` object that represents the current user.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            me?: Word.Interfaces.CoauthorData;
            /**
            * Gets a `CoauthoringUpdateCollection` object that represents the most recent updates that were merged into the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            updates?: Word.Interfaces.CoauthoringUpdateData[];
            /**
             * Gets whether this document can be coauthored.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            canCoauthor?: boolean;
            /**
             * Gets whether the document can be automatically merged.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            canMerge?: boolean;
            /**
             * Gets whether the document has pending updates that have not been accepted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pendingUpdates?: boolean;
        }
        /** An interface describing the data returned by calling `coauthoringUpdate.toJSON()`. */
        export interface CoauthoringUpdateData {
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringUpdate` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeData;
        }
        /** An interface describing the data returned by calling `coauthoringUpdateCollection.toJSON()`. */
        export interface CoauthoringUpdateCollectionData {
            items?: Word.Interfaces.CoauthoringUpdateData[];
        }
        /** An interface describing the data returned by calling `comment.toJSON()`. */
        export interface CommentData {
            /**
            * Specifies the comment's content range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            contentRange?: Word.Interfaces.CommentContentRangeData;
            /**
            * Gets the collection of reply objects associated with the comment.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            replies?: Word.Interfaces.CommentReplyData[];
            /**
             * Gets the email of the comment's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorEmail?: string;
            /**
             * Gets the name of the comment's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorName?: string;
            /**
             * Specifies the comment's content as plain text.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            content?: string;
            /**
             * Gets the creation date of the comment.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            creationDate?: Date;
            /**
             * Gets the ID of the comment.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: string;
            /**
             * Specifies the comment thread's status. Setting to `true` resolves the comment thread. Getting a value of `true` means that the comment thread is resolved.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            resolved?: boolean;
        }
        /** An interface describing the data returned by calling `commentCollection.toJSON()`. */
        export interface CommentCollectionData {
            items?: Word.Interfaces.CommentData[];
        }
        /** An interface describing the data returned by calling `commentContentRange.toJSON()`. */
        export interface CommentContentRangeData {
            /**
             * Specifies a value that indicates whether the comment text is bold.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            bold?: boolean;
            /**
             * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            hyperlink?: string;
            /**
             * Checks whether the range length is zero.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            isEmpty?: boolean;
            /**
             * Specifies a value that indicates whether the comment text is italicized.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            italic?: boolean;
            /**
             * Specifies a value that indicates whether the comment text has a strikethrough.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            strikeThrough?: boolean;
            /**
             * Gets the text of the comment range.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            text?: string;
            /**
             * Specifies a value that indicates the comment text's underline type. `none` if the comment text isn't underlined.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            underline?: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";
        }
        /** An interface describing the data returned by calling `commentReply.toJSON()`. */
        export interface CommentReplyData {
            /**
            * Specifies the commentReply's content range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            contentRange?: Word.Interfaces.CommentContentRangeData;
            /**
            * Gets the parent comment of this reply.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentComment?: Word.Interfaces.CommentData;
            /**
             * Gets the email of the comment reply's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorEmail?: string;
            /**
             * Gets the name of the comment reply's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorName?: string;
            /**
             * Specifies the comment reply's content. The string is plain text.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            content?: string;
            /**
             * Gets the creation date of the comment reply.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            creationDate?: Date;
            /**
             * Gets the ID of the comment reply.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: string;
        }
        /** An interface describing the data returned by calling `commentReplyCollection.toJSON()`. */
        export interface CommentReplyCollectionData {
            items?: Word.Interfaces.CommentReplyData[];
        }
        /** An interface describing the data returned by calling `conditionalStyle.toJSON()`. */
        export interface ConditionalStyleData {
            /**
             * Specifies the amount of space (in points) to add below the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bottomPadding?: number;
            /**
             * Specifies the amount of space (in points) to add to the left of the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftPadding?: number;
            /**
             * Specifies the amount of space (in points) to add to the right of the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightPadding?: number;
            /**
             * Specifies the amount of space (in points) to add above the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            topPadding?: number;
        }
        /** An interface describing the data returned by calling `xmlMapping.toJSON()`. */
        export interface XmlMappingData {
            /**
            * Returns a `CustomXmlNode` object that represents the custom XML node in the data store that the content control in the document maps to.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            customXmlNode?: Word.Interfaces.CustomXmlNodeData;
            /**
            * Returns a `CustomXmlPart` object that represents the custom XML part to which the content control in the document maps.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            customXmlPart?: Word.Interfaces.CustomXmlPartData;
            /**
             * Returns whether the content control in the document is mapped to an XML node in the document's XML data store.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isMapped?: boolean;
            /**
             * Returns the prefix mappings used to evaluate the XPath for the current XML mapping.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            prefixMappings?: string;
            /**
             * Returns the XPath for the XML mapping, which evaluates to the currently mapped XML node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xpath?: string;
        }
        /** An interface describing the data returned by calling `customXmlPrefixMappingCollection.toJSON()`. */
        export interface CustomXmlPrefixMappingCollectionData {
            items?: Word.Interfaces.CustomXmlPrefixMappingData[];
        }
        /** An interface describing the data returned by calling `customXmlPrefixMapping.toJSON()`. */
        export interface CustomXmlPrefixMappingData {
            /**
             * Gets the unique address identifier for the namespace of the `CustomXmlPrefixMapping` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: string;
            /**
             * Gets the prefix for the `CustomXmlPrefixMapping` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            prefix?: string;
        }
        /** An interface describing the data returned by calling `customXmlSchema.toJSON()`. */
        export interface CustomXmlSchemaData {
            /**
             * Gets the location of the schema on a computer.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            location?: string;
            /**
             * Gets the unique address identifier for the namespace of the `CustomXmlSchema` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: string;
        }
        /** An interface describing the data returned by calling `customXmlSchemaCollection.toJSON()`. */
        export interface CustomXmlSchemaCollectionData {
            items?: Word.Interfaces.CustomXmlSchemaData[];
        }
        /** An interface describing the data returned by calling `customXmlNodeCollection.toJSON()`. */
        export interface CustomXmlNodeCollectionData {
            items?: Word.Interfaces.CustomXmlNodeData[];
        }
        /** An interface describing the data returned by calling `customXmlNode.toJSON()`. */
        export interface CustomXmlNodeData {
            /**
            * Gets a `CustomXmlNodeCollection` object representing the attributes of the current element in the current node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            attributes?: Word.Interfaces.CustomXmlNodeData[];
            /**
            * Gets a `CustomXmlNodeCollection` object containing all of the child elements of the current node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            childNodes?: Word.Interfaces.CustomXmlNodeData[];
            /**
            * Gets a `CustomXmlNode` object corresponding to the first child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            firstChild?: Word.Interfaces.CustomXmlNodeData;
            /**
            * Gets a `CustomXmlNode` object corresponding to the last child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            lastChild?: Word.Interfaces.CustomXmlNodeData;
            /**
            * Gets the next sibling node (element, comment, or processing instruction) of the current node. If the node is the last sibling at its level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            nextSibling?: Word.Interfaces.CustomXmlNodeData;
            /**
            * Gets the object representing the part associated with this node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            ownerPart?: Word.Interfaces.CustomXmlPartData;
            /**
            * Gets the parent element node of the current node. If the current node is at the root level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            parentNode?: Word.Interfaces.CustomXmlNodeData;
            /**
            * Gets the previous sibling node (element, comment, or processing instruction) of the current node. If the current node is the first sibling at its level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            previousSibling?: Word.Interfaces.CustomXmlNodeData;
            /**
             * Gets the base name of the node without the namespace prefix, if one exists.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            baseName?: string;
            /**
             * Gets the unique address identifier for the namespace of the node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: string;
            /**
             * Gets the type of the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nodeType?: Word.CustomXmlNodeType | "element" | "attribute" | "text" | "cData" | "processingInstruction" | "comment" | "document";
            /**
             * Specifies the value of the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nodeValue?: string;
            /**
             * Specifies the text for the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            text?: string;
            /**
             * Gets a string with the canonicalized XPath for the current node. If the node is no longer in the Document Object Model (DOM), the property returns an error message.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xpath?: string;
            /**
             * Gets the XML representation of the current node and its children.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: string;
        }
        /** An interface describing the data returned by calling `contentControl.toJSON()`. */
        export interface ContentControlData {
            /**
            * Gets the building block gallery-related data if the content control's {@link Word.ContentControlType} is `buildingBlockGallery`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            buildingBlockGalleryContentControl?: Word.Interfaces.BuildingBlockGalleryContentControlData;
            /**
            * Gets the data of the content control when its type is `checkBox`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApi 1.7]
            */
            checkboxContentControl?: Word.Interfaces.CheckboxContentControlData;
            /**
            * Gets the data of the content control when its type is `comboBox`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApi 1.9]
            */
            comboBoxContentControl?: Word.Interfaces.ComboBoxContentControlData;
            /**
            * Gets the collection of `ContentControl` objects in the content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            contentControls?: Word.Interfaces.ContentControlData[];
            /**
            * Gets the date picker-related data if the content control's {@link Word.ContentControlType} is `datePicker`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            datePickerContentControl?: Word.Interfaces.DatePickerContentControlData;
            /**
            * Gets the data of the content control when its type is `dropDownList`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApi 1.9]
            */
            dropDownListContentControl?: Word.Interfaces.DropDownListContentControlData;
            /**
            * Gets the collection of `Field` objects in the content control.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            fields?: Word.Interfaces.FieldData[];
            /**
            * Gets the text format of the content control. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontData;
            /**
            * Gets the group-related data if the content control's {@link Word.ContentControlType} is `group`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            groupContentControl?: Word.Interfaces.GroupContentControlData;
            /**
            * Gets the collection of `InlinePicture` objects in the content control. The collection doesn't include floating images.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            inlinePictures?: Word.Interfaces.InlinePictureData[];
            /**
            * Gets the collection of `List` objects in the content control.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            lists?: Word.Interfaces.ListData[];
            /**
            * Gets the collection of `Paragraph` objects in the content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            *
            * Important: For requirement sets 1.1 and 1.2, paragraphs in tables wholly contained within this content control aren't returned. From requirement set 1.3, paragraphs in such tables are also returned.
            */
            paragraphs?: Word.Interfaces.ParagraphData[];
            /**
            * Gets the picture-related data if the content control's {@link Word.ContentControlType} is `picture`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pictureContentControl?: Word.Interfaces.PictureContentControlData;
            /**
            * Gets the repeating section-related data if the content control's {@link Word.ContentControlType} is `repeatingSection`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            repeatingSectionContentControl?: Word.Interfaces.RepeatingSectionContentControlData;
            /**
            * Gets the collection of `Table` objects in the content control.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            tables?: Word.Interfaces.TableData[];
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingData;
            /**
             * Specifies the appearance of the content control. The value can be `boundingBox`, `tags`, or `hidden`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies a value that indicates whether the user can delete the content control. Mutually exclusive with `removeWhenEdited`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            cannotDelete?: boolean;
            /**
             * Specifies a value that indicates whether the user can edit the contents of the content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            cannotEdit?: boolean;
            /**
             * Specifies the color of the content control. Color is specified in '#RRGGBB' format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            color?: string;
            /**
             * Gets an integer that represents the content control identifier.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            id?: number;
            /**
             * Specifies the placeholder text of the content control. Dimmed text will be displayed when the content control is empty.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            placeholderText?: string;
            /**
             * Specifies a value that indicates whether the content control is removed after it's edited. Mutually exclusive with `cannotDelete`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            removeWhenEdited?: boolean;
            /**
             * Specifies the style name for the content control. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the `styleBuiltIn` property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: string;
            /**
             * Specifies the built-in style name for the content control. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the `style` property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
            /**
             * Gets the content control subtype. The subtype can be `richTextInline`, `richTextParagraphs`, `richTextTableCell`, `richTextTableRow` and `richTextTable` for rich text content controls, `plainTextInline` and `plainTextParagraph` for plain text content controls, `checkBox` for checkbox content controls, `dropDownList` for dropdown list content controls, `comboBox` for combo box content controls, `buildingBlockGallery` for building block gallery content controls, `datePicker` for date picker content controls, `repeatingSection` for repeating section content controls, `picture` for picture content controls, and `group` for group content controls.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            subtype?: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText" | "Group";
            /**
             * Specifies a tag to identify a content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            tag?: string;
            /**
             * Gets the text of the content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: string;
            /**
             * Specifies the title for a content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            title?: string;
            /**
             * Gets the content control type. Only rich text, plain text, check box, dropdown list, combo box, building block gallery, date picker, repeating section, picture, and group content controls are supported currently.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            type?: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText" | "Group";
        }
        /** An interface describing the data returned by calling `contentControlCollection.toJSON()`. */
        export interface ContentControlCollectionData {
            items?: Word.Interfaces.ContentControlData[];
        }
        /** An interface describing the data returned by calling `contentControlListItem.toJSON()`. */
        export interface ContentControlListItemData {
            /**
             * Specifies the display text of a list item for a dropdown list or combo box content control.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            displayText?: string;
            /**
             * Specifies the index location of a content control list item in the collection of list items.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            index?: number;
            /**
             * Specifies the programmatic value of a list item for a dropdown list or combo box content control.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            value?: string;
        }
        /** An interface describing the data returned by calling `contentControlListItemCollection.toJSON()`. */
        export interface ContentControlListItemCollectionData {
            items?: Word.Interfaces.ContentControlListItemData[];
        }
        /** An interface describing the data returned by calling `customProperty.toJSON()`. */
        export interface CustomPropertyData {
            /**
             * Gets the key of the custom property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            key?: string;
            /**
             * Gets the value type of the custom property. Possible values are: String, Number, Date, Boolean.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            type?: Word.DocumentPropertyType | "String" | "Number" | "Date" | "Boolean";
            /**
             * Specifies the value of the custom property. Note that even though Word on the web and the docx file format allow these properties to be arbitrarily long, the desktop version of Word will truncate string values to 255 16-bit chars (possibly creating invalid unicode by breaking up a surrogate pair).
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            value?: any;
        }
        /** An interface describing the data returned by calling `customPropertyCollection.toJSON()`. */
        export interface CustomPropertyCollectionData {
            items?: Word.Interfaces.CustomPropertyData[];
        }
        /** An interface describing the data returned by calling `customXmlPart.toJSON()`. */
        export interface CustomXmlPartData {
            /**
            * Gets the root element of a bound region of data in the document. If the region is empty, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            documentElement?: Word.Interfaces.CustomXmlNodeData;
            /**
            * Gets the set of namespace prefix mappings used against the current `CustomXmlPart` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            namespaceManager?: Word.Interfaces.CustomXmlPrefixMappingData[];
            /**
            * Specifies a `CustomXmlSchemaCollection` object representing the set of schemas attached to a bound region of data in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            schemaCollection?: Word.Interfaces.CustomXmlSchemaData[];
            /**
             * Gets a value that indicates whether the `CustomXmlPart` is built-in.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            builtIn?: boolean;
            /**
             * Gets the ID of the custom XML part.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: string;
            /**
             * Gets the namespace URI of the custom XML part.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            namespaceUri?: string;
            /**
             * Gets the XML representation of the current `CustomXmlPart` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: string;
        }
        /** An interface describing the data returned by calling `customXmlPartCollection.toJSON()`. */
        export interface CustomXmlPartCollectionData {
            items?: Word.Interfaces.CustomXmlPartData[];
        }
        /** An interface describing the data returned by calling `customXmlPartScopedCollection.toJSON()`. */
        export interface CustomXmlPartScopedCollectionData {
            items?: Word.Interfaces.CustomXmlPartData[];
        }
        /** An interface describing the data returned by calling `document.toJSON()`. */
        export interface DocumentData {
            /**
            * Gets the active window for the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            activeWindow?: Word.Interfaces.WindowData;
            /**
            * Returns a `Bibliography` object that represents the bibliography references contained within the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            bibliography?: Word.Interfaces.BibliographyData;
            /**
            * Gets the `Body` object of the main document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            body?: Word.Interfaces.BodyData;
            /**
            * Gets a `Coauthoring` object for managing coauthoring in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            coauthoring?: Word.Interfaces.CoauthoringData;
            /**
            * Gets the collection of `ContentControl` objects in the document. This includes content controls in the body of the document, headers, footers, textboxes, etc.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            contentControls?: Word.Interfaces.ContentControlData[];
            /**
            * Gets the custom XML parts in the document.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            customXmlParts?: Word.Interfaces.CustomXmlPartData[];
            /**
            * Returns a `DocumentLibraryVersionCollection` object that represents the collection of versions of a shared document that has versioning enabled and that's stored in a document library on a server.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            documentLibraryVersions?: Word.Interfaces.DocumentLibraryVersionData[];
            /**
            * Returns a `FrameCollection` object that represents all the frames in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            frames?: Word.Interfaces.FrameData[];
            /**
            * Returns a `HyperlinkCollection` object that represents all the hyperlinks in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            hyperlinks?: Word.Interfaces.HyperlinkData[];
            /**
            * Returns a `ListTemplateCollection` object that represents all the list templates in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            listTemplates?: Word.Interfaces.ListTemplateData[];
            /**
            * Returns a `PageSetup` object that's associated with the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pageSetup?: Word.Interfaces.PageSetupData;
            /**
            * Gets the properties of the document.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            properties?: Word.Interfaces.DocumentPropertiesData;
            /**
            * Gets the collection of `Section` objects in the document.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            sections?: Word.Interfaces.SectionData[];
            /**
            * Returns a `Selection` object that represents the current selection in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            selection?: Word.Interfaces.SelectionData;
            /**
            * Gets the add-in's settings in the document.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            settings?: Word.Interfaces.SettingData[];
            /**
            * Gets the collection of `Word.Window` objects for the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            windows?: Word.Interfaces.WindowData[];
            /**
             * Gets the name of the active theme and formatting options.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            activeTheme?: string;
            /**
             * Gets the display name of the active theme.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            activeThemeDisplayName?: string;
            /**
             * Gets whether Word encrypts file properties for password-protected documents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFilePropertiesPasswordEncrypted?: boolean;
            /**
             * Specifies whether grammatical errors are marked by a wavy green line in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areGrammaticalErrorsShown?: boolean;
            /**
             * Specifies whether to use the default math settings when creating new equations.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areMathDefaultsUsed?: boolean;
            /**
             * Specifies whether to disable features introduced after a specified version.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areNewerFeaturesDisabled?: boolean;
            /**
             * Specifies whether Microsoft Word underlines spelling errors in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areSpellingErrorsShown?: boolean;
            /**
             * Specifies whether the styles in this document are updated to match the styles in the attached template each time the document is opened.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areStylesUpdatedOnOpen?: boolean;
            /**
             * Specifies whether Microsoft Word embeds TrueType fonts in the document when it's saved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTrueTypeFontsEmbedded?: boolean;
            /**
             * Specifies if automatic hyphenation is turned on for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            autoHyphenation?: boolean;
            /**
             * Specifies if the edits in the document are automatically saved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            autoSaveOn?: boolean;
            /**
             * Specifies the ChangeTracking mode.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            changeTrackingMode?: Word.ChangeTrackingMode | "Off" | "TrackAll" | "TrackMineOnly";
            /**
             * Gets the code name for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            codeName?: string;
            /**
             * Gets the compatibility mode that Word uses when opening the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            compatibilityMode?: Word.CompatibilityMode | "Word2003" | "Word2007" | "Word2010" | "Word2013" | "Current";
            /**
             * Specifies the maximum number of consecutive lines that can end with hyphens.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            consecutiveHyphensLimit?: number;
            /**
             * Gets a random number that Word assigns to changes in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            currentRsid?: number;
            /**
             * Specifies the interval (in points) between the default tab stops in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            defaultTabStop?: number;
            /**
             * Specifies the browser frame for displaying a webpage via hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            defaultTargetFrame?: string;
            /**
             * Specifies whether Word should not embed common system fonts.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            doNotEmbedSystemFonts?: boolean;
            /**
             * Specifies the name of the algorithm encryption provider that Microsoft Word uses when encrypting documents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            encryptionProvider?: string;
            /**
             * Specifies the East Asian language used for line breaking.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            farEastLineBreakLanguage?: Word.FarEastLineBreakLanguageId | "TraditionalChinese" | "Japanese" | "Korean" | "SimplifiedChinese";
            /**
             * Specifies the line break control level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            farEastLineBreakLevel?: Word.FarEastLineBreakLevel | "Normal" | "Strict" | "Custom";
            /**
             * Specifies whether Word shows the next heading level when the previous is used.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formattingIsNextLevelShown?: boolean;
            /**
             * Specifies whether to show user-defined styles.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formattingIsUserStyleNameShown?: boolean;
            /**
             * Gets the name of a document, including the path.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fullName?: string;
            /**
             * Specifies the horizontal space between invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridDistanceHorizontal?: number;
            /**
             * Specifies the vertical space between invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridDistanceVertical?: number;
            /**
             * Specifies whether the character grid starts from the upper-left corner of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridIsOriginFromMargin?: boolean;
            /**
             * Specifies the horizontal origin point for the invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridOriginHorizontal?: number;
            /**
             * Specifies the vertical origin point for the invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridOriginVertical?: number;
            /**
             * Specifies the interval for horizontal character gridlines in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridSpaceBetweenHorizontalLines?: number;
            /**
             * Specifies the interval for vertical character gridlines in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridSpaceBetweenVerticalLines?: number;
            /**
             * Gets whether a password is required to open the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasPassword?: boolean;
            /**
             * Gets whether the document has an attached Microsoft Visual Basic for Applications project.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasVbProject?: boolean;
            /**
             * Specifies whether words in all capital letters can be hyphenated.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hyphenateCaps?: boolean;
            /**
             * Specifies the width of the hyphenation zone, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hyphenationZone?: number;
            /**
             * Specifies whether automatic formatting options override formatting restrictions.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isAutoFormatOverrideOn?: boolean;
            /**
             * Specifies whether charts in the active document use cell-reference data-point tracking.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isChartDataPointTracked?: boolean;
            /**
             * Specifies whether the compatibility option specified by the `type` property is enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isCompatible?: boolean;
            /**
             * Specifies whether the document is final.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFinal?: boolean;
            /**
             * Specifies whether Microsoft Word saves a subset of the embedded TrueType fonts with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFontsSubsetSaved?: boolean;
            /**
             * Specifies whether Microsoft Word prints onto a preprinted form only the data entered in the corresponding online form.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormsDataPrinted?: boolean;
            /**
             * Specifies whether Microsoft Word saves the data entered in a form as a tab-delimited record for use in a database.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormsDataSaved?: boolean;
            /**
             * Specifies whether a grammar check has been run on the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isGrammarChecked?: boolean;
            /**
             * Gets whether the most recent firing of the `Application.DocumentBeforeSave` event was the result of an automatic save by the document or a manual save by the user.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInAutoSave?: boolean;
            /**
             * Gets whether the document is in form design mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInFormsDesign?: boolean;
            /**
             * Specifies whether Word kerns half-width Latin characters and punctuation marks.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isKerningByAlgorithm?: boolean;
            /**
             * Specifies whether to embed speech and handwriting data.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLinguisticDataEmbedded?: boolean;
            /**
             * Gets whether this document is a master document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMasterDocument?: boolean;
            /**
             * Specifies whether Word optimizes the document for Word 97.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isOptimizedForWord97?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/0250c02b-060f-4986-88a4-36cec2a9665f | PRINT field} instructions (such as PostScript commands) in the document are to be printed on top of text and graphics when a PostScript printer is used.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPostScriptPrintedOverText?: boolean;
            /**
             * Specifies whether users can change the Quick Style set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isQuickStyleSetLocked?: boolean;
            /**
             * Gets whether changes to the document cannot be saved to the original document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isReadOnly?: boolean;
            /**
             * Specifies whether Microsoft Word displays a message box whenever a user opens the document, suggesting that it be opened as read-only.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isReadOnlyRecommended?: boolean;
            /**
             * Specifies whether AutoShapes or East Asian characters are automatically aligned with an invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSnappedToGrid?: boolean;
            /**
             * Specifies whether AutoShapes or East Asian characters align with invisible gridlines through other shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSnappedToShapes?: boolean;
            /**
             * Specifies whether spelling has been checked throughout the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSpellingChecked?: boolean;
            /**
             * Specifies whether formatting restrictions are enforced in a protected document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isStyleEnforced?: boolean;
            /**
             * Gets whether this document is a subdocument of a master document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSubdocument?: boolean;
            /**
             * Specifies whether users can change the document theme.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isThemeLocked?: boolean;
            /**
             * Specifies whether the document was created or opened by the user.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isUserControl?: boolean;
            /**
             * Gets whether the VBA project is digitally signed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVbaSigned?: boolean;
            /**
             * Gets whether the document is protected with a write password.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isWriteReserved?: boolean;
            /**
             * Specifies the character spacing adjustment.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            justificationMode?: Word.JustificationMode | "Expand" | "Compress" | "CompressKana";
            /**
             * Specifies the format type that Microsoft Word uses when automatically formatting the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            kind?: Word.DocumentKind | "NotSpecified" | "Letter" | "Email";
            /**
             * Specifies whether Microsoft Word has detected the language of the document text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageDetected?: boolean;
            /**
             * Specifies the kinsoku characters after which Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            noLineBreakAfter?: string;
            /**
             * Specifies the kinsoku characters before which Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            noLineBreakBefore?: string;
            /**
             * Gets the encoding used to open the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            openEncoding?: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
            /**
             * Gets the title of the original document after legal-blackline comparison.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            originalDocumentTitle?: string;
            /**
             * Sets a password that must be supplied to open the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            password?: string;
            /**
             * Gets the algorithm used for password encryption.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            passwordEncryptionAlgorithm?: string;
            /**
             * Gets the key length used for password encryption.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            passwordEncryptionKeyLength?: number;
            /**
             * Gets the name of the password encryption provider.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            passwordEncryptionProvider?: string;
            /**
             * Gets the disk or the web path to the document (excludes the document name).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            path?: string;
            /**
             * Specifies whether revision marks are printed with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            printRevisions?: boolean;
            /**
             * Gets the protection type for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            protectionType?: Word.ProtectionType | "NoProtection" | "AllowOnlyRevisions" | "AllowOnlyComments" | "AllowOnlyFormFields" | "AllowOnlyReading";
            /**
             * Specifies the width of pages in reading layout view when frozen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutSizeX?: number;
            /**
             * Specifies the height of pages in reading layout view when frozen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutSizeY?: number;
            /**
             * Specifies whether pages in reading layout view are frozen for handwritten markup.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingModeIsLayoutFrozen?: boolean;
            /**
             * Specifies whether Word removes user information upon saving.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            removePersonalInformationOnSave?: boolean;
            /**
             * Gets the title of the revised document after legal-blackline comparison.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisedDocumentTitle?: string;
            /**
             * Specifies the encoding used when saving the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            saveEncoding?: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
            /**
             * Gets the file format of the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            saveFormat?: Word.FileSaveFormat | "Document" | "Template" | "Text" | "TextLineBreaks" | "DosText" | "DosTextLineBreaks" | "Rtf" | "UnicodeText" | "Html" | "WebArchive" | "FilteredHtml" | "Xml" | "XmlDocument" | "XmlDocumentMacroEnabled" | "XmlTemplate" | "XmlTemplateMacroEnabled" | "DocumentDefault" | "Pdf" | "Xps" | "FlatXml" | "FlatXmlMacroEnabled" | "FlatXmlTemplate" | "FlatXmlTemplateMacroEnabled" | "OpenDocumentText" | "StrictOpenXmlDocument";
            /**
             * Indicates whether the changes in the document have been saved. A value of `true` indicates that the document hasn't changed since it was saved.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            saved?: boolean;
            /**
             * Specifies the encoding for saving as encoded text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            textEncoding?: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
            /**
             * Specifies how Word marks line and paragraph breaks in text files.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            textLineEnding?: Word.LineEndingType | "Crlf" | "CrOnly" | "LfOnly" | "Lfcr" | "Lsps";
            /**
             * Specifies whether to track formatting changes when change tracking is on.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackFormatting?: boolean;
            /**
             * Specifies whether to mark moved text when Track Changes is on.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackMoves?: boolean;
            /**
             * Specifies whether changes are tracked in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackRevisions?: boolean;
            /**
             * Specifies whether to remove or store date and time metadata for tracked changes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackedChangesAreDateAndTimeRemoved?: boolean;
            /**
             * Gets the document type (template or document).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.DocumentType | "Document" | "Template" | "Frameset";
            /**
             * Sets a password for saving changes to the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            writePassword?: string;
            /**
             * Specifies whether error messages are generated from built-in Word messages or MSXML (Microsoft XML).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlAreAdvancedErrorsShown?: boolean;
            /**
             * Specifies whether to save a document through an Extensible Stylesheet Language Transformation (XSLT).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlIsXsltUsedWhenSaving?: boolean;
            /**
             * Specifies the path and file name for the XSLT to apply when saving a document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlSaveThroughXslt?: string;
        }
        /** An interface describing the data returned by calling `documentCreated.toJSON()`. */
        export interface DocumentCreatedData {
            /**
            * Gets the `Body` object of the document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.3]
            */
            body?: Word.Interfaces.BodyData;
            /**
            * Gets the collection of `ContentControl` objects in the document. This includes content controls in the body of the document, headers, footers, textboxes, etc.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.3]
            */
            contentControls?: Word.Interfaces.ContentControlData[];
            /**
            * Gets the custom XML parts in the document.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.4]
            */
            customXmlParts?: Word.Interfaces.CustomXmlPartData[];
            /**
            * Gets the properties of the document.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.3]
            */
            properties?: Word.Interfaces.DocumentPropertiesData;
            /**
            * Gets the collection of `Section` objects in the document.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.3]
            */
            sections?: Word.Interfaces.SectionData[];
            /**
            * Gets the add-in's settings in the document.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.4]
            */
            settings?: Word.Interfaces.SettingData[];
            /**
             * Indicates whether the changes in the document have been saved. A value of `true` indicates that the document hasn't changed since it was saved.
             *
             * @remarks
             * [Api set: WordApiHiddenDocument 1.3]
             */
            saved?: boolean;
        }
        /** An interface describing the data returned by calling `documentProperties.toJSON()`. */
        export interface DocumentPropertiesData {
            /**
            * Gets the collection of custom properties of the document.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            customProperties?: Word.Interfaces.CustomPropertyData[];
            /**
             * Gets the application name of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            applicationName?: string;
            /**
             * Specifies the author of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            author?: string;
            /**
             * Specifies the category of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            category?: string;
            /**
             * Specifies the Comments field in the metadata of the document. These have no connection to comments by users made in the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            comments?: string;
            /**
             * Specifies the company of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            company?: string;
            /**
             * Gets the creation date of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            creationDate?: Date;
            /**
             * Specifies the format of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            format?: string;
            /**
             * Specifies the keywords of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            keywords?: string;
            /**
             * Gets the last author of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            lastAuthor?: string;
            /**
             * Gets the last print date of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            lastPrintDate?: Date;
            /**
             * Gets the last save time of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            lastSaveTime?: Date;
            /**
             * Specifies the manager of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            manager?: string;
            /**
             * Gets the revision number of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            revisionNumber?: string;
            /**
             * Gets security settings of the document. Some are access restrictions on the file on disk. Others are Document Protection settings. Some possible values are 0 = File on disk is read/write; 1 = Protect Document: File is encrypted and requires a password to open; 2 = Protect Document: Always Open as Read-Only; 3 = Protect Document: Both #1 and #2; 4 = File on disk is read-only; 5 = Both #1 and #4; 6 = Both #2 and #4; 7 = All of #1, #2, and #4; 8 = Protect Document: Restrict Edit to read-only; 9 = Both #1 and #8; 10 = Both #2 and #8; 11 = All of #1, #2, and #8; 12 = Both #4 and #8; 13 = All of #1, #4, and #8; 14 = All of #2, #4, and #8; 15 = All of #1, #2, #4, and #8.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            security?: number;
            /**
             * Specifies the subject of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            subject?: string;
            /**
             * Gets the template of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            template?: string;
            /**
             * Specifies the title of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            title?: string;
        }
        /** An interface describing the data returned by calling `dropDownListContentControl.toJSON()`. */
        export interface DropDownListContentControlData {
        }
        /** An interface describing the data returned by calling `comboBoxContentControl.toJSON()`. */
        export interface ComboBoxContentControlData {
        }
        /** An interface describing the data returned by calling `field.toJSON()`. */
        export interface FieldData {
            /**
            * Gets the field's result data.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            result?: Word.Interfaces.RangeData;
            /**
             * Specifies the field's code instruction.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             *
             * Note: The ability to set the code was introduced in WordApi 1.5.
             */
            code?: string;
            /**
             * Specifies data in a field of `addin` type. If the field isn't an `addin` type, it's `null` and it will throw a general exception when code attempts to set it.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            data?: string;
            /**
             * Gets the field's kind.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            kind?: Word.FieldKind | "None" | "Hot" | "Warm" | "Cold";
            /**
             * Specifies whether the field is locked. `true` if the field is locked, `false` otherwise.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            locked?: boolean;
            /**
             * Specifies whether the field codes are displayed for the specified field. `true` if the field codes are displayed, `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            showCodes?: boolean;
            /**
             * Gets the field's type.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: Word.FieldType | "Addin" | "AddressBlock" | "Advance" | "Ask" | "Author" | "AutoText" | "AutoTextList" | "BarCode" | "Bibliography" | "BidiOutline" | "Citation" | "Comments" | "Compare" | "CreateDate" | "Data" | "Database" | "Date" | "DisplayBarcode" | "DocProperty" | "DocVariable" | "EditTime" | "Embedded" | "EQ" | "Expression" | "FileName" | "FileSize" | "FillIn" | "FormCheckbox" | "FormDropdown" | "FormText" | "GotoButton" | "GreetingLine" | "Hyperlink" | "If" | "Import" | "Include" | "IncludePicture" | "IncludeText" | "Index" | "Info" | "Keywords" | "LastSavedBy" | "Link" | "ListNum" | "MacroButton" | "MergeBarcode" | "MergeField" | "MergeRec" | "MergeSeq" | "Next" | "NextIf" | "NoteRef" | "NumChars" | "NumPages" | "NumWords" | "OCX" | "Page" | "PageRef" | "Print" | "PrintDate" | "Private" | "Quote" | "RD" | "Ref" | "RevNum" | "SaveDate" | "Section" | "SectionPages" | "Seq" | "Set" | "Shape" | "SkipIf" | "StyleRef" | "Subject" | "Subscriber" | "Symbol" | "TA" | "TC" | "Template" | "Time" | "Title" | "TOA" | "TOC" | "UserAddress" | "UserInitials" | "UserName" | "XE" | "Empty" | "Others" | "Undefined";
        }
        /** An interface describing the data returned by calling `fieldCollection.toJSON()`. */
        export interface FieldCollectionData {
            items?: Word.Interfaces.FieldData[];
        }
        /** An interface describing the data returned by calling `font.toJSON()`. */
        export interface FontData {
            /**
            * Returns a `BorderUniversalCollection` object that represents all the borders for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            borders?: Word.Interfaces.BorderUniversalData[];
            /**
            * Returns a `FillFormat` object that contains fill formatting properties for the font used by the range of text.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            fill?: Word.Interfaces.FillFormatData;
            /**
            * Returns a `GlowFormat` object that represents the glow formatting for the font used by the range of text.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            glow?: Word.Interfaces.GlowFormatData;
            /**
            * Returns a `LineFormat` object that specifies the formatting for a line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            line?: Word.Interfaces.LineFormatData;
            /**
            * Returns a `ReflectionFormat` object that represents the reflection formatting for a shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            reflection?: Word.Interfaces.ReflectionFormatData;
            /**
            * Returns a `ColorFormat` object that represents the color for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            textColor?: Word.Interfaces.ColorFormatData;
            /**
            * Returns a `ShadowFormat` object that specifies the shadow formatting for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            textShadow?: Word.Interfaces.ShadowFormatData;
            /**
            * Returns a `ThreeDimensionalFormat` object that contains 3-dimensional (3D) effect formatting properties for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            threeDimensionalFormat?: Word.Interfaces.ThreeDimensionalFormatData;
            /**
             * Specifies whether the font is formatted as all capital letters, which makes lowercase letters appear as uppercase letters. The possible values are as follows:
                        
                        - `true`: All the text has the **All Caps** attribute.
                        
                        - `false`: None of the text has the **All Caps** attribute.
                        
                        - `null`: Returned if some, but not all, of the text has the **All Caps** attribute.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            allCaps?: boolean;
            /**
             * Specifies whether the font is bold. `true` if the font is formatted as bold, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            bold?: boolean;
            /**
             * Specifies whether the font is formatted as bold in a right-to-left language document. The possible values are as follows:
                        
                        - `true`: All the text is bold.
                        
                        - `false`: None of the text is bold.
                        
                        - `null`: Returned if some, but not all, of the text is bold.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            boldBidirectional?: boolean;
            /**
             * Specifies the color for the font. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            color?: string;
            /**
             * Specifies a `ColorIndex` value that represents the color for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies the color for the `Font` object in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndexBidirectional?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies whether contextual alternates are enabled for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            contextualAlternates?: boolean;
            /**
             * Specifies the color to be used for diacritics for the `Font` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            diacriticColor?: string;
            /**
             * Specifies whether Microsoft Word ignores the number of characters per line for the corresponding `Font` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            disableCharacterSpaceGrid?: boolean;
            /**
             * Specifies whether the font has a double strikethrough. `true` if the font is formatted as double strikethrough text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            doubleStrikeThrough?: boolean;
            /**
             * Specifies whether the font is formatted as embossed. The possible values are as follows:
                        
                        - `true`: All the text is embossed.
                        
                        - `false`: None of the text is embossed.
                        
                        - `null`: Returned if some, but not all, of the text is embossed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emboss?: boolean;
            /**
             * Specifies an `EmphasisMark` value that represents the emphasis mark for a character or designated character string.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emphasisMark?: Word.EmphasisMark | "None" | "OverSolidCircle" | "OverComma" | "OverWhiteCircle" | "UnderSolidCircle";
            /**
             * Specifies whether the font is formatted as engraved. The possible values are as follows:
                        
                        - `true`: All the text is engraved.
                        
                        - `false`: None of the text is engraved.
                        
                        - `null`: Returned if some, but not all, of the text is engraved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            engrave?: boolean;
            /**
             * Specifies whether the font is tagged as hidden. `true` if the font is formatted as hidden text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            hidden?: boolean;
            /**
             * Specifies the highlight color. To set it, use a value either in the '#RRGGBB' format or the color name. To remove highlight color, set it to `null`. The returned highlight color can be in the '#RRGGBB' format, an empty string for mixed highlight colors, or `null` for no highlight color. Note: Only the default highlight colors are available in Office for Windows Desktop. These are "Yellow", "Lime", "Turquoise", "Pink", "Blue", "Red", "DarkBlue", "Teal", "Green", "Purple", "DarkRed", "Olive", "Gray", "LightGray", and "Black". When the add-in runs in Office for Windows Desktop, any other color is converted to the closest color when applied to the font.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            highlightColor?: string;
            /**
             * Specifies whether the font is italicized. `true` if the font is italicized, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            italic?: boolean;
            /**
             * Specifies whether the font is italicized in a right-to-left language document. The possible values are as follows:
                        
                        - `true`: All the text is italicized.
                        
                        - `false`: None of the text is italicized.
                        
                        - `null`: Returned if some, but not all, of the text is italicized.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            italicBidirectional?: boolean;
            /**
             * Specifies the minimum font size for which Microsoft Word will adjust kerning automatically.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            kerning?: number;
            /**
             * Specifies the ligature setting for the `Font` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            ligature?: Word.Ligature | "None" | "Standard" | "Contextual" | "StandardContextual" | "Historical" | "StandardHistorical" | "ContextualHistorical" | "StandardContextualHistorical" | "Discretional" | "StandardDiscretional" | "ContextualDiscretional" | "StandardContextualDiscretional" | "HistoricalDiscretional" | "StandardHistoricalDiscretional" | "ContextualHistoricalDiscretional" | "All";
            /**
             * Specifies the name of the font.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            name?: string;
            /**
             * Specifies the font used for Latin text (characters with character codes from 0 (zero) through 127).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameAscii?: string;
            /**
             * Specifies the font name in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameBidirectional?: string;
            /**
             * Specifies the East Asian font name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameFarEast?: string;
            /**
             * Specifies the font used for characters with codes from 128 through 255.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameOther?: string;
            /**
             * Specifies the number form setting for an OpenType font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            numberForm?: Word.NumberForm | "Default" | "Lining" | "OldStyle";
            /**
             * Specifies the number spacing setting for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            numberSpacing?: Word.NumberSpacing | "Default" | "Proportional" | "Tabular";
            /**
             * Specifies if the font is formatted as outlined. The possible values are as follows:
                        
                        - `true`: All the text is outlined.
                        
                        - `false`: None of the text is outlined.
                        
                        - `null`: Returned if some, but not all, of the text is outlined.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            outline?: boolean;
            /**
             * Specifies the position of text (in points) relative to the base line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            position?: number;
            /**
             * Specifies the scaling percentage applied to the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            scaling?: number;
            /**
             * Specifies if the font is formatted as shadowed. The possible values are as follows:
                        
                        - `true`: All the text is shadowed.
                        
                        - `false`: None of the text is shadowed.
                        
                        - `null`: Returned if some, but not all, of the text is shadowed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            shadow?: boolean;
            /**
             * Specifies the font size in points.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            size?: number;
            /**
             * Specifies the font size in points for right-to-left text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sizeBidirectional?: number;
            /**
             * Specifies whether the font is formatted as small caps, which makes lowercase letters appear as small uppercase letters. The possible values are as follows:
                        
                        - `true`: All the text has the **Small Caps** attribute.
                        
                        - `false`: None of the text has the **Small Caps** attribute.
                        
                        - `null`: Returned if some, but not all, of the text has the **Small Caps** attribute.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            smallCaps?: boolean;
            /**
             * Specifies the spacing between characters.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            spacing?: number;
            /**
             * Specifies whether the font has a strikethrough. `true` if the font is formatted as strikethrough text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            strikeThrough?: boolean;
            /**
             * Specifies the stylistic set for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            stylisticSet?: Word.StylisticSet | "Default" | "Set01" | "Set02" | "Set03" | "Set04" | "Set05" | "Set06" | "Set07" | "Set08" | "Set09" | "Set10" | "Set11" | "Set12" | "Set13" | "Set14" | "Set15" | "Set16" | "Set17" | "Set18" | "Set19" | "Set20";
            /**
             * Specifies whether the font is a subscript. `true` if the font is formatted as subscript, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            subscript?: boolean;
            /**
             * Specifies whether the font is a superscript. `true` if the font is formatted as superscript, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            superscript?: boolean;
            /**
             * Specifies the font's underline type. `none` if the font isn't underlined.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            underline?: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";
            /**
             * Specifies the color of the underline for the `Font` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            underlineColor?: string;
        }
        /** An interface describing the data returned by calling `headingStyle.toJSON()`. */
        export interface HeadingStyleData {
            /**
             * Specifies the level for the heading style in a table of contents or table of figures. Must be a value from 1 to 9.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            level?: number;
            /**
             * Specifies the name of style for a heading.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
        }
        /** An interface describing the data returned by calling `headingStyleCollection.toJSON()`. */
        export interface HeadingStyleCollectionData {
            items?: Word.Interfaces.HeadingStyleData[];
        }
        /** An interface describing the data returned by calling `hyperlink.toJSON()`. */
        export interface HyperlinkData {
            /**
            * Returns a `Range` object that represents the portion of the document that's contained within the hyperlink.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Specifies the address (for example, a file name or URL) of the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            address?: string;
            /**
             * Specifies the text string for the hyperlink's subject line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emailSubject?: string;
            /**
             * Returns `true` if extra information is required to resolve the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isExtraInfoRequired?: boolean;
            /**
             * Returns the name of the `Hyperlink` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: string;
            /**
             * Specifies the text that appears as a ScreenTip when the mouse pointer is positioned over the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            screenTip?: string;
            /**
             * Specifies a named location in the destination of the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            subAddress?: string;
            /**
             * Specifies the name of the frame or window in which to load the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            target?: string;
            /**
             * Specifies the hyperlink's visible text in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textToDisplay?: string;
            /**
             * Returns the hyperlink type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: Word.HyperlinkType | "Range" | "Shape" | "InlineShape";
        }
        /** An interface describing the data returned by calling `hyperlinkCollection.toJSON()`. */
        export interface HyperlinkCollectionData {
            items?: Word.Interfaces.HyperlinkData[];
        }
        /** An interface describing the data returned by calling `inlinePicture.toJSON()`. */
        export interface InlinePictureData {
            /**
             * Specifies a string that represents the alternative text associated with the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            altTextDescription?: string;
            /**
             * Specifies a string that contains the title for the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            altTextTitle?: string;
            /**
             * Specifies a number that describes the height of the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            height?: number;
            /**
             * Specifies a hyperlink on the image. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            hyperlink?: string;
            /**
             * Gets the format of the inline image.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            imageFormat?: Word.ImageFormat | "Unsupported" | "Undefined" | "Bmp" | "Jpeg" | "Gif" | "Tiff" | "Png" | "Icon" | "Exif" | "Wmf" | "Emf" | "Pict" | "Pdf" | "Svg";
            /**
             * Specifies a value that indicates whether the inline image retains its original proportions when you resize it.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lockAspectRatio?: boolean;
            /**
             * Specifies a number that describes the width of the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            width?: number;
        }
        /** An interface describing the data returned by calling `inlinePictureCollection.toJSON()`. */
        export interface InlinePictureCollectionData {
            items?: Word.Interfaces.InlinePictureData[];
        }
        /** An interface describing the data returned by calling `linkFormat.toJSON()`. */
        export interface LinkFormatData {
            /**
             * Specifies if the link is updated automatically when the container file is opened or when the source file is changed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isAutoUpdated?: boolean;
            /**
             * Specifies if a `Field`, `InlineShape`, or `Shape` object is locked to prevent automatic updating.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLocked?: boolean;
            /**
             * Specifies if the linked picture is saved with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPictureSavedWithDocument?: boolean;
            /**
             * Specifies the path and name of the source file for the linked OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sourceFullName?: string;
            /**
             * Gets the name of the source file for the linked OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sourceName?: string;
            /**
             * Gets the path of the source file for the linked OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sourcePath?: string;
            /**
             * Gets the link type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.LinkType | "Ole" | "Picture" | "Text" | "Reference" | "Include" | "Import" | "Dde" | "DdeAuto" | "Chart";
        }
        /** An interface describing the data returned by calling `list.toJSON()`. */
        export interface ListData {
            /**
            * Gets paragraphs in the list.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            paragraphs?: Word.Interfaces.ParagraphData[];
            /**
             * Gets the list's ID.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            id?: number;
            /**
             * Checks whether each of the 9 levels exists in the list. `true` indicates the level exists, which means there's at least one list item at that level.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            levelExistences?: boolean[];
            /**
             * Gets all 9 level types in the list. Each type can be `bullet`, `number`, or `picture`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            levelTypes?: Word.ListLevelType[];
        }
        /** An interface describing the data returned by calling `listCollection.toJSON()`. */
        export interface ListCollectionData {
            items?: Word.Interfaces.ListData[];
        }
        /** An interface describing the data returned by calling `listItem.toJSON()`. */
        export interface ListItemData {
            /**
             * Specifies the level of the item in the list.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            level?: number;
            /**
             * Gets the list item bullet, number, or picture as a string.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            listString?: string;
            /**
             * Gets the list item order number in relation to its siblings.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            siblingIndex?: number;
        }
        /** An interface describing the data returned by calling `listLevel.toJSON()`. */
        export interface ListLevelData {
            /**
            * Gets a `Font` object that represents the character formatting of the `ListLevel` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            font?: Word.Interfaces.FontData;
            /**
             * Specifies the horizontal alignment of the list level. The value can be `left`, `centered`, or `right`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the name of the style that's linked to the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            linkedStyle?: string;
            /**
             * Specifies the number format for the list level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberFormat?: string;
            /**
             * Specifies the position (in points) of the number or bullet for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberPosition?: number;
            /**
             * Specifies the number style for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberStyle?: Word.ListBuiltInNumberStyle | "None" | "Arabic" | "UpperRoman" | "LowerRoman" | "UpperLetter" | "LowerLetter" | "Ordinal" | "CardinalText" | "OrdinalText" | "Kanji" | "KanjiDigit" | "AiueoHalfWidth" | "IrohaHalfWidth" | "ArabicFullWidth" | "KanjiTraditional" | "KanjiTraditional2" | "NumberInCircle" | "Aiueo" | "Iroha" | "ArabicLZ" | "Bullet" | "Ganada" | "Chosung" | "GBNum1" | "GBNum2" | "GBNum3" | "GBNum4" | "Zodiac1" | "Zodiac2" | "Zodiac3" | "TradChinNum1" | "TradChinNum2" | "TradChinNum3" | "TradChinNum4" | "SimpChinNum1" | "SimpChinNum2" | "SimpChinNum3" | "SimpChinNum4" | "HanjaRead" | "HanjaReadDigit" | "Hangul" | "Hanja" | "Hebrew1" | "Arabic1" | "Hebrew2" | "Arabic2" | "HindiLetter1" | "HindiLetter2" | "HindiArabic" | "HindiCardinalText" | "ThaiLetter" | "ThaiArabic" | "ThaiCardinalText" | "VietCardinalText" | "LowercaseRussian" | "UppercaseRussian" | "LowercaseGreek" | "UppercaseGreek" | "ArabicLZ2" | "ArabicLZ3" | "ArabicLZ4" | "LowercaseTurkish" | "UppercaseTurkish" | "LowercaseBulgarian" | "UppercaseBulgarian" | "PictureBullet" | "Legal" | "LegalLZ";
            /**
             * Specifies the list level that must appear before it restarts numbering at 1.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            resetOnHigher?: number;
            /**
             * Specifies the starting number for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            startAt?: number;
            /**
             * Specifies the tab position for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            tabPosition?: number;
            /**
             * Specifies the position (in points) for the second line of wrapping text for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            textPosition?: number;
            /**
             * Specifies the character inserted after the number for the list level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            trailingCharacter?: Word.TrailingCharacter | "TrailingTab" | "TrailingSpace" | "TrailingNone";
        }
        /** An interface describing the data returned by calling `listLevelCollection.toJSON()`. */
        export interface ListLevelCollectionData {
            items?: Word.Interfaces.ListLevelData[];
        }
        /** An interface describing the data returned by calling `listTemplate.toJSON()`. */
        export interface ListTemplateData {
            /**
            * Gets a `ListLevelCollection` object that represents all the levels for the list template.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            listLevels?: Word.Interfaces.ListLevelData[];
            /**
             * Specifies the name of the list template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
            /**
             * Specifies whether the list template is outline numbered.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            outlineNumbered?: boolean;
        }
        /** An interface describing the data returned by calling `noteItem.toJSON()`. */
        export interface NoteItemData {
            /**
            * Represents the body object of the note item. It's the portion of the text within the footnote or endnote.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            body?: Word.Interfaces.BodyData;
            /**
            * Represents a footnote or endnote reference in the main document.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            reference?: Word.Interfaces.RangeData;
            /**
             * Represents the note item type: footnote or endnote.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: Word.NoteItemType | "Footnote" | "Endnote";
        }
        /** An interface describing the data returned by calling `noteItemCollection.toJSON()`. */
        export interface NoteItemCollectionData {
            items?: Word.Interfaces.NoteItemData[];
        }
        /** An interface describing the data returned by calling `oleFormat.toJSON()`. */
        export interface OleFormatData {
            /**
             * Specifies the class type for the specified OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            classType?: string;
            /**
             * Specifies the icon that is used when the `displayAsIcon` property is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconIndex?: number;
            /**
             * Specifies the text displayed below the icon for the OLE object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconLabel?: string;
            /**
             * Specifies the program file in which the icon for the OLE object is stored.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconName?: string;
            /**
             * Gets the path of the file in which the icon for the OLE object is stored.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconPath?: string;
            /**
             * Gets whether the specified object is displayed as an icon.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDisplayedAsIcon?: boolean;
            /**
             * Specifies whether formatting done in Microsoft Word to the linked OLE object is preserved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormattingPreservedOnUpdate?: boolean;
            /**
             * Gets a string that's used to identify the portion of the source file that's being linked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            label?: string;
            /**
             * Gets the programmatic identifier (`ProgId`) for the specified OLE object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            progId?: string;
        }
        /** An interface describing the data returned by calling `page.toJSON()`. */
        export interface PageData {
            /**
            * Gets a `BreakCollection` object that represents the breaks on the page.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            breaks?: Word.Interfaces.BreakData[];
            /**
             * Gets the height, in points, of the paper defined in the Page Setup dialog box.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            height?: number;
            /**
             * Gets the index of the page. The page index is 1-based and independent of the user's custom page numbering.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            index?: number;
            /**
             * Gets the width, in points, of the paper defined in the Page Setup dialog box.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            width?: number;
        }
        /** An interface describing the data returned by calling `pageCollection.toJSON()`. */
        export interface PageCollectionData {
            items?: Word.Interfaces.PageData[];
        }
        /** An interface describing the data returned by calling `pane.toJSON()`. */
        export interface PaneData {
            /**
            * Gets the collection of pages in the pane.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            pages?: Word.Interfaces.PageData[];
            /**
            * Gets the `PageCollection` shown in the viewport of the pane. If a page is partially visible in the pane, the whole page is returned.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            pagesEnclosingViewport?: Word.Interfaces.PageData[];
        }
        /** An interface describing the data returned by calling `paneCollection.toJSON()`. */
        export interface PaneCollectionData {
            items?: Word.Interfaces.PaneData[];
        }
        /** An interface describing the data returned by calling `window.toJSON()`. */
        export interface WindowData {
            /**
            * Gets the next document window in the collection of open document windows.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            next?: Word.Interfaces.WindowData;
            /**
            * Gets the previous document window in the collection open document windows.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            previous?: Word.Interfaces.WindowData;
            /**
             * Specifies whether rulers are displayed for the window or pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areRulersDisplayed?: boolean;
            /**
             * Specifies whether comments, footnotes, endnotes, and hyperlinks are displayed as tips.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areScreenTipsDisplayed?: boolean;
            /**
             * Specifies whether thumbnail images of the pages in a document are displayed along the left side of the Microsoft Word document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areThumbnailsDisplayed?: boolean;
            /**
             * Specifies the caption text for the window that is displayed in the title bar of the document or application window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            caption?: string;
            /**
             * Specifies the height of the window (in points).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            height?: number;
            /**
             * Specifies the horizontal scroll position as a percentage of the document width.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalPercentScrolled?: number;
            /**
             * Specifies the default start-up mode for the Japanese Input Method Editor (IME).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            imeMode?: Word.ImeMode | "NoControl" | "On" | "Off" | "Hiragana" | "Katakana" | "KatakanaHalf" | "AlphaFull" | "Alpha" | "HangulFull" | "Hangul";
            /**
             * Gets the position of an item in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            index?: number;
            /**
             * Specifies whether the window is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isActive?: boolean;
            /**
             * Specifies whether the document map is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDocumentMapVisible?: boolean;
            /**
             * Specifies whether the email message header is visible in the document window. The default value is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEnvelopeVisible?: boolean;
            /**
             * Specifies whether a horizontal scroll bar is displayed for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isHorizontalScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the vertical scroll bar appears on the left side of the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLeftScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the vertical ruler appears on the right side of the document window in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isRightRulerDisplayed?: boolean;
            /**
             * Specifies whether the window is split into multiple panes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSplit?: boolean;
            /**
             * Specifies whether a vertical ruler is displayed for the window or pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVerticalRulerDisplayed?: boolean;
            /**
             * Specifies whether a vertical scroll bar is displayed for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVerticalScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the window is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVisible?: boolean;
            /**
             * Specifies the horizontal position of the window, measured in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            left?: number;
            /**
             * Specifies how Microsoft Word displays source documents after a compare and merge process.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showSourceDocuments?: Word.ShowSourceDocuments | "None" | "Original" | "Revised" | "Both";
            /**
             * Specifies the vertical split percentage for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            splitVertical?: number;
            /**
             * Specifies the width of the style area in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            styleAreaWidth?: number;
            /**
             * Specifies the vertical position of the document window, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            top?: number;
            /**
             * Gets the window type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.WindowType | "Document" | "Template";
            /**
             * Gets the height (in points) of the active working area in the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            usableHeight?: number;
            /**
             * Gets the width (in points) of the active working area in the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            usableWidth?: number;
            /**
             * Specifies the vertical scroll position as a percentage of the document length.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            verticalPercentScrolled?: number;
            /**
             * Specifies the width of the document window, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            width?: number;
            /**
             * Gets an integer that represents the position of the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            windowNumber?: number;
        }
        /** An interface describing the data returned by calling `windowCollection.toJSON()`. */
        export interface WindowCollectionData {
            items?: Word.Interfaces.WindowData[];
        }
        /** An interface describing the data returned by calling `paragraph.toJSON()`. */
        export interface ParagraphData {
            /**
            * Returns a `BorderUniversalCollection` object that represents all the borders for the paragraph.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            borders?: Word.Interfaces.BorderUniversalData[];
            /**
            * Gets the collection of fields in the paragraph.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            fields?: Word.Interfaces.FieldData[];
            /**
            * Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontData;
            /**
            * Gets the collection of `InlinePicture` objects in the paragraph. The collection doesn't include floating images.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            inlinePictures?: Word.Interfaces.InlinePictureData[];
            /**
            * Gets the ListItem for the paragraph. Throws an `ItemNotFound` error if the paragraph isn't part of a list.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listItem?: Word.Interfaces.ListItemData;
            /**
            * Gets the ListItem for the paragraph. If the paragraph isn't part of a list, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listItemOrNullObject?: Word.Interfaces.ListItemData;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the paragraph.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalData;
            /**
            * Gets the collection of `Shape` objects anchored in the paragraph, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            *
            * Important: Be aware that with time, additional types of shapes may be supported. Therefore, your add-in should request and handle specific types of shapes.
            */
            shapes?: Word.Interfaces.ShapeData[];
            /**
             * Specifies the alignment for a paragraph. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            firstLineIndent?: number;
            /**
             * Indicates the paragraph is the last one inside its parent body.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isLastParagraph?: boolean;
            /**
             * Checks whether the paragraph is a list item.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isListItem?: boolean;
            /**
             * Specifies the left indent value, in points, for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            leftIndent?: number;
            /**
             * Specifies the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineSpacing?: number;
            /**
             * Specifies the amount of spacing, in grid lines, after the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineUnitAfter?: number;
            /**
             * Specifies the amount of spacing, in grid lines, before the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineUnitBefore?: number;
            /**
             * Specifies the outline level for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            outlineLevel?: number;
            /**
             * Specifies the right indent value, in points, for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            rightIndent?: number;
            /**
             * Specifies the spacing, in points, after the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            spaceAfter?: number;
            /**
             * Specifies the spacing, in points, before the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            spaceBefore?: number;
            /**
             * Specifies the style name for the paragraph. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: string;
            /**
             * Specifies the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
            /**
             * Gets the level of the paragraph's table. It returns 0 if the paragraph isn't in a table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            tableNestingLevel?: number;
            /**
             * Gets the text of the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: string;
            /**
             * Gets a string that represents the paragraph identifier in the current session. ID is in standard 8-4-4-4-12 GUID format without curly braces and differs across sessions and coauthors.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            uniqueLocalId?: string;
        }
        /** An interface describing the data returned by calling `paragraphCollection.toJSON()`. */
        export interface ParagraphCollectionData {
            items?: Word.Interfaces.ParagraphData[];
        }
        /** An interface describing the data returned by calling `paragraphFormat.toJSON()`. */
        export interface ParagraphFormatData {
            /**
             * Specifies the alignment for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the value (in points) for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            firstLineIndent?: number;
            /**
             * Specifies whether all lines in the specified paragraphs remain on the same page when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            keepTogether?: boolean;
            /**
             * Specifies whether the specified paragraph remains on the same page as the paragraph that follows it when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            keepWithNext?: boolean;
            /**
             * Specifies the left indent.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            leftIndent?: number;
            /**
             * Specifies the line spacing (in points) for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineSpacing?: number;
            /**
             * Specifies the amount of spacing (in gridlines) after the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineUnitAfter?: number;
            /**
             * Specifies the amount of spacing (in gridlines) before the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineUnitBefore?: number;
            /**
             * Specifies whether left and right indents are the same width.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            mirrorIndents?: boolean;
            /**
             * Specifies the outline level for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            outlineLevel?: Word.OutlineLevel | "OutlineLevel1" | "OutlineLevel2" | "OutlineLevel3" | "OutlineLevel4" | "OutlineLevel5" | "OutlineLevel6" | "OutlineLevel7" | "OutlineLevel8" | "OutlineLevel9" | "OutlineLevelBodyText";
            /**
             * Specifies the right indent (in points) for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            rightIndent?: number;
            /**
             * Specifies the amount of spacing (in points) after the specified paragraph or text column.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            spaceAfter?: number;
            /**
             * Specifies the spacing (in points) before the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            spaceBefore?: number;
            /**
             * Specifies whether the first and last lines in the specified paragraph remain on the same page as the rest of the paragraph when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            widowControl?: boolean;
        }
        /** An interface describing the data returned by calling `range.toJSON()`. */
        export interface RangeData {
            /**
            * Returns a `BorderUniversalCollection` object that represents all the borders for the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            borders?: Word.Interfaces.BorderUniversalData[];
            /**
            * Returns a `ConflictCollection` object that contains all the {@link Word.Conflict} objects in the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            conflicts?: Word.Interfaces.ConflictData[];
            /**
            * Gets the collection of `Field` objects in the range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            fields?: Word.Interfaces.FieldData[];
            /**
            * Gets the text format of the range. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontData;
            /**
            * Gets a `FrameCollection` object that represents all the frames in the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            frames?: Word.Interfaces.FrameData[];
            /**
            * Returns a `HyperlinkCollection` object that represents all the hyperlinks in the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            hyperlinks?: Word.Interfaces.HyperlinkData[];
            /**
            * Gets the collection of `InlinePicture` objects in the range.
            *
            * @remarks
            * [Api set: WordApi 1.2]
            */
            inlinePictures?: Word.Interfaces.InlinePictureData[];
            /**
            * Returns a `ListFormat` object that represents all the list formatting characteristics of the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            listFormat?: Word.Interfaces.ListFormatData;
            /**
            * Gets the collection of pages in the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            pages?: Word.Interfaces.PageData[];
            /**
            * Gets the collection of sections in the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            sections?: Word.Interfaces.SectionData[];
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalData;
            /**
            * Gets the collection of `Shape` objects anchored in the range, including both inline and floating shapes. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            *
            * Important: Be aware that with time, additional types of shapes may be supported. Therefore, your add-in should request and handle specific types of shapes.
            */
            shapes?: Word.Interfaces.ShapeData[];
            /**
            * Gets a `TableColumnCollection` object that represents all the table columns in the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            tableColumns?: Word.Interfaces.TableColumnData[];
            /**
             * Specifies whether the range is formatted as bold.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bold?: boolean;
            /**
             * Specifies whether the range is formatted as bold in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            boldBidirectional?: boolean;
            /**
             * Specifies a `CharacterCase` value that represents the case of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            case?: Word.CharacterCase | "Next" | "Lower" | "Upper" | "TitleWord" | "TitleSentence" | "Toggle" | "HalfWidth" | "FullWidth" | "Katakana" | "Hiragana";
            /**
             * Specifies the character width of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            characterWidth?: Word.CharacterWidth | "Half" | "Full";
            /**
             * Specifies if the range contains combined characters.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            combineCharacters?: boolean;
            /**
             * Specifies if Microsoft Word ignores the number of characters per line for the corresponding `Range` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            disableCharacterSpaceGrid?: boolean;
            /**
             * Specifies the emphasis mark for a character or designated character string.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            emphasisMark?: Word.EmphasisMark | "None" | "OverSolidCircle" | "OverComma" | "OverWhiteCircle" | "UnderSolidCircle";
            /**
             * Specifies the ending character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: number;
            /**
             * Specifies the width (in the current measurement units) in which Microsoft Word fits the text in the current selection or range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fitTextWidth?: number;
            /**
             * Specifies if a grammar check has been run on the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            grammarChecked?: boolean;
            /**
             * Specifies the proofing status (spelling and grammar checking) of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * Specifies the highlight color for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            highlightColorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies the formatting for horizontal text set within vertical text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalInVertical?: Word.HorizontalInVerticalType | "None" | "FitInLine" | "ResizeLine";
            /**
             * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            hyperlink?: string;
            /**
             * Specifies the ID for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: string;
            /**
             * Checks whether the range length is zero.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isEmpty?: boolean;
            /**
             * Gets if the range is collapsed and is located at the end-of-row mark in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEndOfRowMark?: boolean;
            /**
             * Gets whether the text in the range is visible on the screen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isTextVisibleOnScreen?: boolean;
            /**
             * Specifies if the font or range is formatted as italic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            italic?: boolean;
            /**
             * Specifies if the font or range is formatted as italic (right-to-left languages).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            italicBidirectional?: boolean;
            /**
             * Specifies whether the range of Japanese language text is hiragana or katakana.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            kana?: Word.Kana | "Katakana" | "Hiragana";
            /**
             * Specifies whether Microsoft Word has detected the language of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageDetected?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies an East Asian language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies a language for the range that isn't classified as an East Asian language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdOther?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies if all nonprinting characters (such as hidden text, tab marks, space marks, and paragraph marks) are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showAll?: boolean;
            /**
             * Specifies if spelling has been checked throughout the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spellingChecked?: boolean;
            /**
             * Specifies the starting character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: number;
            /**
             * Gets the number of characters in the story that contains the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyLength?: number;
            /**
             * Gets the story type for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: Word.StoryType | "MainText" | "Footnotes" | "Endnotes" | "Comments" | "TextFrame" | "EvenPagesHeader" | "PrimaryHeader" | "EvenPagesFooter" | "PrimaryFooter" | "FirstPageHeader" | "FirstPageFooter" | "FootnoteSeparator" | "FootnoteContinuationSeparator" | "FootnoteContinuationNotice" | "EndnoteSeparator" | "EndnoteContinuationSeparator" | "EndnoteContinuationNotice";
            /**
             * Specifies the style name for the range. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: string;
            /**
             * Specifies the built-in style name for the range. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
            /**
             * Gets the text of the range.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: string;
            /**
             * Specifies whether Microsoft Word sets two lines of text in one and specifies the characters that enclose the text, if any.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            twoLinesInOne?: Word.TwoLinesInOneType | "None" | "NoBrackets" | "Parentheses" | "SquareBrackets" | "AngleBrackets" | "CurlyBrackets";
        }
        /** An interface describing the data returned by calling `rangeCollection.toJSON()`. */
        export interface RangeCollectionData {
            items?: Word.Interfaces.RangeData[];
        }
        /** An interface describing the data returned by calling `searchOptions.toJSON()`. */
        export interface SearchOptionsData {
            /**
             * If provided, specifies whether to ignore all punctuation characters between words. The default is `false`. Corresponds to the _Ignore punctuation characters_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            ignorePunct?: boolean;
            /**
             * If provided, specifies whether to ignore all whitespace between words. The default is `false`. Corresponds to the _Ignore white-space characters_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            ignoreSpace?: boolean;
            /**
             * If provided, specifies whether to perform a case sensitive search. The default is `false`. Corresponds to the _Match case_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchCase?: boolean;
            /**
             * If provided, specifies whether to match words that begin with the search string. The default is `false`. Corresponds to the _Match prefix_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchPrefix?: boolean;
            /**
             * If provided, specifies whether to match words that end with the search string. The default is `false`. Corresponds to the _Match suffix_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchSuffix?: boolean;
            /**
             * If provided, specifies whether to find only entire words, not text that's part of a larger word. The default is `false`. Corresponds to the _Find whole words only_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchWholeWord?: boolean;
            /**
             * If provided, specifies whether the search will be performed using special search operators. The default is `false`. Corresponds to the _Use wildcards_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchWildcards?: boolean;
        }
        /** An interface describing the data returned by calling `section.toJSON()`. */
        export interface SectionData {
            /**
            * Gets the `Body` object of the section. This doesn't include the header, footer, and other section metadata.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            body?: Word.Interfaces.BodyData;
            /**
            * Returns a `BorderUniversalCollection` object that represents all the borders in the section.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            borders?: Word.Interfaces.BorderUniversalData[];
            /**
            * Returns a `PageSetup` object that's associated with the section.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pageSetup?: Word.Interfaces.PageSetupData;
            /**
             * Specifies if the section is protected for forms.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            protectedForForms?: boolean;
        }
        /** An interface describing the data returned by calling `sectionCollection.toJSON()`. */
        export interface SectionCollectionData {
            items?: Word.Interfaces.SectionData[];
        }
        /** An interface describing the data returned by calling `setting.toJSON()`. */
        export interface SettingData {
            /**
             * Gets the key of the setting.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            key?: string;
            /**
             * Specifies the value of the setting.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            value?: any;
        }
        /** An interface describing the data returned by calling `settingCollection.toJSON()`. */
        export interface SettingCollectionData {
            items?: Word.Interfaces.SettingData[];
        }
        /** An interface describing the data returned by calling `styleCollection.toJSON()`. */
        export interface StyleCollectionData {
            items?: Word.Interfaces.StyleData[];
        }
        /** An interface describing the data returned by calling `style.toJSON()`. */
        export interface StyleData {
            /**
            * Specifies a `BorderCollection` object that represents all the borders for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            borders?: Word.Interfaces.BorderData[];
            /**
            * Gets a `Font` object that represents the character formatting of the style.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            font?: Word.Interfaces.FontData;
            /**
            * Returns a `Frame` object that represents the frame formatting for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            frame?: Word.Interfaces.FrameData;
            /**
            * Specifies a link between a paragraph and a character style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            linkStyle?: Word.Interfaces.StyleData;
            /**
            * Gets a `ListTemplate` object that represents the list formatting for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            listTemplate?: Word.Interfaces.ListTemplateData;
            /**
            * Gets a `ParagraphFormat` object that represents the paragraph settings for the style.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            paragraphFormat?: Word.Interfaces.ParagraphFormatData;
            /**
            * Gets a `Shading` object that represents the shading for the style. Not applicable to a style of `List` type.
            *
            * @remarks
            * [Api set: WordApi 1.6]
            */
            shading?: Word.Interfaces.ShadingData;
            /**
            * Gets a `TableStyle` object representing style properties that can be applied to a table.
            *
            * @remarks
            * [Api set: WordApi 1.6]
            */
            tableStyle?: Word.Interfaces.TableStyleData;
            /**
             * Specifies whether the style is automatically redefined based on the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            automaticallyUpdate?: boolean;
            /**
             * Specifies the name of an existing style to use as the base formatting of another style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             *
             * Note: The ability to set `baseStyle` was introduced in WordApi 1.6.
             */
            baseStyle?: string;
            /**
             * Gets whether the style is a built-in style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            builtIn?: boolean;
            /**
             * Specifies whether the spelling and grammar checker ignores text formatted with this style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasProofing?: boolean;
            /**
             * Gets whether the style is a built-in style that has been modified or applied in the document or a new style that has been created in the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            inUse?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies an East Asian language for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Gets whether the style is a linked style that can be used for both paragraph and character formatting.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            linked?: boolean;
            /**
             * Returns the list level for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listLevelNumber?: number;
            /**
             * Specifies whether the style cannot be changed or edited.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            locked?: boolean;
            /**
             * Gets the name of the style in the language of the user.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            nameLocal?: string;
            /**
             * Specifies the name of the style to be applied automatically to a new paragraph that is inserted after a paragraph formatted with the style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             *
             * Note: The ability to set `nextParagraphStyle` was introduced in WordApi 1.6.
             */
            nextParagraphStyle?: string;
            /**
             * Specifies whether to remove spacing between paragraphs that are formatted using the same style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noSpaceBetweenParagraphsOfSameStyle?: boolean;
            /**
             * Specifies the priority.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            priority?: number;
            /**
             * Specifies whether the style corresponds to an available quick style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            quickStyle?: boolean;
            /**
             * Gets the style type.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: Word.StyleType | "Character" | "List" | "Paragraph" | "Table";
            /**
             * Specifies whether the style is made visible as a recommended style in the Styles gallery and in the Styles task pane in Microsoft Word after it's used in the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            unhideWhenUsed?: boolean;
            /**
             * Specifies whether the style is visible as a recommended style in the Styles gallery and in the Styles task pane.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            visibility?: boolean;
        }
        /** An interface describing the data returned by calling `shading.toJSON()`. */
        export interface ShadingData {
            /**
             * Specifies the color for the background of the object. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            backgroundPatternColor?: string;
            /**
             * Specifies the color for the foreground of the object. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            foregroundPatternColor?: string;
            /**
             * Specifies the shading texture of the object. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            texture?: Word.ShadingTextureType | "DarkDiagonalDown" | "DarkDiagonalUp" | "DarkGrid" | "DarkHorizontal" | "DarkTrellis" | "DarkVertical" | "LightDiagonalDown" | "LightDiagonalUp" | "LightGrid" | "LightHorizontal" | "LightTrellis" | "LightVertical" | "None" | "Percent10" | "Percent12Pt5" | "Percent15" | "Percent20" | "Percent25" | "Percent30" | "Percent35" | "Percent37Pt5" | "Percent40" | "Percent45" | "Percent5" | "Percent50" | "Percent55" | "Percent60" | "Percent62Pt5" | "Percent65" | "Percent70" | "Percent75" | "Percent80" | "Percent85" | "Percent87Pt5" | "Percent90" | "Percent95" | "Solid";
        }
        /** An interface describing the data returned by calling `shadingUniversal.toJSON()`. */
        export interface ShadingUniversalData {
            /**
             * Specifies the color that's applied to the background of the `ShadingUniversal` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            backgroundPatternColor?: string;
            /**
             * Specifies the color that's applied to the background of the `ShadingUniversal` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            backgroundPatternColorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies the color that's applied to the foreground of the `ShadingUniversal` object. This color is applied to the dots and lines in the shading pattern. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            foregroundPatternColor?: string;
            /**
             * Specifies the color that's applied to the foreground of the `ShadingUniversal` object. This color is applied to the dots and lines in the shading pattern.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            foregroundPatternColorIndex?: Word.ColorIndex | "Auto" | "Black" | "Blue" | "Turquoise" | "BrightGreen" | "Pink" | "Red" | "Yellow" | "White" | "DarkBlue" | "Teal" | "Green" | "Violet" | "DarkRed" | "DarkYellow" | "Gray50" | "Gray25" | "ClassicRed" | "ClassicBlue" | "ByAuthor";
            /**
             * Specifies the shading texture of the object. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            texture?: Word.ShadingTextureType | "DarkDiagonalDown" | "DarkDiagonalUp" | "DarkGrid" | "DarkHorizontal" | "DarkTrellis" | "DarkVertical" | "LightDiagonalDown" | "LightDiagonalUp" | "LightGrid" | "LightHorizontal" | "LightTrellis" | "LightVertical" | "None" | "Percent10" | "Percent12Pt5" | "Percent15" | "Percent20" | "Percent25" | "Percent30" | "Percent35" | "Percent37Pt5" | "Percent40" | "Percent45" | "Percent5" | "Percent50" | "Percent55" | "Percent60" | "Percent62Pt5" | "Percent65" | "Percent70" | "Percent75" | "Percent80" | "Percent85" | "Percent87Pt5" | "Percent90" | "Percent95" | "Solid";
        }
        /** An interface describing the data returned by calling `table.toJSON()`. */
        export interface TableData {
            /**
            * Gets the collection of `Field` objects in the table.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            fields?: Word.Interfaces.FieldData[];
            /**
            * Gets the font. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            font?: Word.Interfaces.FontData;
            /**
            * Gets all of the table rows.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            rows?: Word.Interfaces.TableRowData[];
            /**
            * Gets the child tables nested one level deeper.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            tables?: Word.Interfaces.TableData[];
            /**
             * Specifies the alignment of the table against the page column. The value can be `left`, `centered`, or `right`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies the description of the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            description?: string;
            /**
             * Specifies the number of header rows.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            headerRowCount?: number;
            /**
             * Specifies the horizontal alignment of every cell in the table. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Indicates whether all of the table rows are uniform.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isUniform?: boolean;
            /**
             * Gets the nesting level of the table. Top-level tables have level 1.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            nestingLevel?: number;
            /**
             * Gets the number of rows in the table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowCount?: number;
            /**
             * Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: string;
            /**
             * Specifies the style name for the table. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            style?: string;
            /**
             * Specifies whether the table has banded columns.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBandedColumns?: boolean;
            /**
             * Specifies whether the table has banded rows.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBandedRows?: boolean;
            /**
             * Specifies the built-in style name for the table. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
            /**
             * Specifies whether the table has a first column with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleFirstColumn?: boolean;
            /**
             * Specifies whether the table has a last column with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleLastColumn?: boolean;
            /**
             * Specifies whether the table has a total (last) row with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleTotalRow?: boolean;
            /**
             * Specifies the title of the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            title?: string;
            /**
             * Specifies the text values in the table, as a 2D JavaScript array.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            values?: string[][];
            /**
             * Specifies the vertical alignment of every cell in the table. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
            /**
             * Specifies the width of the table in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: number;
        }
        /** An interface describing the data returned by calling `tableStyle.toJSON()`. */
        export interface TableStyleData {
            /**
             * Specifies the table's alignment against the page margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            alignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Specifies whether lines in tables formatted with a style break across pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            allowBreakAcrossPage?: boolean;
            /**
             * Specifies the amount of space to add between the contents and the bottom borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            bottomCellMargin?: number;
            /**
             * Specifies the spacing (in points) between the cells in a table style.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            cellSpacing?: number;
            /**
             * Specifies the number of columns in the banding when a style specifies odd- or even-column banding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            columnStripe?: number;
            /**
             * Specifies whether Microsoft Word allows to break the specified table across pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isBreakAcrossPagesAllowed?: boolean;
            /**
             * Specifies the amount of space to add between the contents and the left borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            leftCellMargin?: number;
            /**
             * Specifies the left indent value (in points) for the rows in the table style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftIndent?: number;
            /**
             * Specifies the amount of space to add between the contents and the right borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            rightCellMargin?: number;
            /**
             * Specifies the number of rows to include in the banding when the style specifies odd- or even-row banding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rowStripe?: number;
            /**
             * Specifies the direction in which Microsoft Word orders cells in the table style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableDirection?: Word.TableDirection | "RightToLeft" | "LeftToRight";
            /**
             * Specifies the amount of space to add between the contents and the top borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            topCellMargin?: number;
        }
        /** An interface describing the data returned by calling `tabStop.toJSON()`. */
        export interface TabStopData {
            /**
             * Gets a `TabAlignment` value that represents the alignment for the tab stop.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            alignment?: Word.TabAlignment | "Left" | "Center" | "Right" | "Decimal" | "Bar" | "List";
            /**
             * Gets whether this tab stop is a custom tab stop.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            customTab?: boolean;
            /**
             * Gets a `TabLeader` value that represents the leader for this `TabStop` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
            /**
             * Gets the position of the tab stop relative to the left margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            position?: number;
        }
        /** An interface describing the data returned by calling `tabStopCollection.toJSON()`. */
        export interface TabStopCollectionData {
            items?: Word.Interfaces.TabStopData[];
        }
        /** An interface describing the data returned by calling `tableCollection.toJSON()`. */
        export interface TableCollectionData {
            items?: Word.Interfaces.TableData[];
        }
        /** An interface describing the data returned by calling `tableColumn.toJSON()`. */
        export interface TableColumnData {
            /**
            * Returns a `BorderUniversalCollection` object that represents all the borders for the table column.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            borders?: Word.Interfaces.BorderUniversalData[];
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the column.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalData;
            /**
             * Returns the position of this column in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            columnIndex?: number;
            /**
             * Returns `true` if the column or row is the first one in the table; `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isFirst?: boolean;
            /**
             * Returns `true` if the column or row is the last one in the table; `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isLast?: boolean;
            /**
             * Returns the nesting level of the column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nestingLevel?: number;
            /**
             * Specifies the preferred width (in points or as a percentage of the window width) for the column.
                        The unit of measurement can be specified by the `preferredWidthType` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            preferredWidth?: number;
            /**
             * Specifies the preferred unit of measurement to use for the width of the table column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            preferredWidthType?: Word.PreferredWidthType | "Auto" | "Percent" | "Points";
            /**
             * Specifies the width of the column, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: number;
        }
        /** An interface describing the data returned by calling `tableColumnCollection.toJSON()`. */
        export interface TableColumnCollectionData {
            items?: Word.Interfaces.TableColumnData[];
        }
        /** An interface describing the data returned by calling `tableOfAuthorities.toJSON()`. */
        export interface TableOfAuthoritiesData {
            /**
             * Specifies the name of the bookmark from which to collect table of authorities entries.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bookmark?: string;
            /**
             * Specifies the category of entries to be included in the table of authorities.
                        Values 0 through 16 correspond to the items listed in the Category box of the Table of Authorities dialog. To learn how to access this through the Word UI, see {@link https://support.microsoft.com/office/ddd126ae-52bc-4299-9558-06dd0e4fe8c0 | Create a table of authorities}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            category?: number;
            /**
             * Specifies a separator of up to five characters. This appears between the table of authorities entry and its page number.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            entrySeparator?: string;
            /**
             * Specifies whether the category name for a group of entries appears in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isCategoryHeaderIncluded?: boolean;
            /**
             * Specifies whether the entries in the table of authorities are displayed with their formatting in the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEntryFormattingKept?: boolean;
            /**
             * Specifies whether references to the same authority that are repeated on five or more pages are replaced with "Passim".
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPassimUsed?: boolean;
            /**
             * Specifies a separator of up to five characters. This appears between individual page references in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageNumberSeparator?: string;
            /**
             * Specifies a separator of up to five characters. This appears between ranges of pages in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageRangeSeparator?: string;
            /**
             * Specifies the {@link https://support.microsoft.com/office/062a387b-dfc9-4ef8-8235-29ee113d59be | Sequence (SEQ) field} identifier for the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sequenceName?: string;
            /**
             * Specifies a separator of up to five characters. This appears between the sequence number and the page number in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sequenceSeparator?: string;
            /**
             * Specifies the leader character that appears between entries and their associated page numbers in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
        }
        /** An interface describing the data returned by calling `tableOfAuthoritiesCollection.toJSON()`. */
        export interface TableOfAuthoritiesCollectionData {
            items?: Word.Interfaces.TableOfAuthoritiesData[];
        }
        /** An interface describing the data returned by calling `tableOfAuthoritiesCategory.toJSON()`. */
        export interface TableOfAuthoritiesCategoryData {
            /**
             * Specifies the name of this table of authorities category.
                        Changing the name of the category doesn't change the index in the collection. The value for {@link Word.TableOfAuthorities | TableOfAuthorities.category} will remain the same.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
        }
        /** An interface describing the data returned by calling `tableOfAuthoritiesCategoryCollection.toJSON()`. */
        export interface TableOfAuthoritiesCategoryCollectionData {
            items?: Word.Interfaces.TableOfAuthoritiesCategoryData[];
        }
        /** An interface describing the data returned by calling `tableOfContents.toJSON()`. */
        export interface TableOfContentsData {
            /**
             * Specifies whether built-in heading styles are used for the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBuiltInHeadingStylesUsed?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldsUsed?: boolean;
            /**
             * Specifies whether entries in the table of contents should be formatted as hyperlinks when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areHyperlinksUsedOnWeb?: boolean;
            /**
             * Specifies whether the page numbers in the table of contents should be hidden when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersHiddenOnWeb?: boolean;
            /**
             * Specifies whether page numbers are included in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersIncluded?: boolean;
            /**
             * Specifies whether page numbers are aligned with the right margin in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersRightAligned?: boolean;
            /**
             * Specifies the ending heading level for the table of contents. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            lowerHeadingLevel?: number;
            /**
             * Specifies the character between entries and their page numbers in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
            /**
             * Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableId?: string;
            /**
             * Specifies the starting heading level for the table of contents. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            upperHeadingLevel?: number;
        }
        /** An interface describing the data returned by calling `tableOfContentsCollection.toJSON()`. */
        export interface TableOfContentsCollectionData {
            items?: Word.Interfaces.TableOfContentsData[];
        }
        /** An interface describing the data returned by calling `tableOfFigures.toJSON()`. */
        export interface TableOfFiguresData {
            /**
             * Specifies whether built-in heading styles are used for the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBuiltInHeadingStylesUsed?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldsUsed?: boolean;
            /**
             * Specifies whether entries in the table of figures should be formatted as hyperlinks when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areHyperlinksUsedOnWeb?: boolean;
            /**
             * Specifies whether the page numbers in the table of figures should be hidden when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersHiddenOnWeb?: boolean;
            /**
             * Specifies whether page numbers are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersIncluded?: boolean;
            /**
             * Specifies whether page numbers are aligned with the right margin in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersRightAligned?: boolean;
            /**
             * Specifies the label that identifies the items to be included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            captionLabel?: string;
            /**
             * Specifies whether the caption label and caption number are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLabelIncluded?: boolean;
            /**
             * Specifies the ending heading level for the table of figures. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            lowerHeadingLevel?: number;
            /**
             * Specifies the character between entries and their page numbers in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
            /**
             * Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableId?: string;
            /**
             * Specifies the starting heading level for the table of figures. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            upperHeadingLevel?: number;
        }
        /** An interface describing the data returned by calling `tableOfFiguresCollection.toJSON()`. */
        export interface TableOfFiguresCollectionData {
            items?: Word.Interfaces.TableOfFiguresData[];
        }
        /** An interface describing the data returned by calling `tableRow.toJSON()`. */
        export interface TableRowData {
            /**
            * Gets cells.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            cells?: Word.Interfaces.TableCellData[];
            /**
            * Gets the collection of `Field` objects in the table row.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            fields?: Word.Interfaces.FieldData[];
            /**
            * Gets the font. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            font?: Word.Interfaces.FontData;
            /**
             * Gets the number of cells in the row.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            cellCount?: number;
            /**
             * Specifies the horizontal alignment of every cell in the row. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Checks whether the row is a header row. To set the number of header rows, use `headerRowCount` on the `Table` object.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isHeader?: boolean;
            /**
             * Specifies the preferred height of the row in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            preferredHeight?: number;
            /**
             * Gets the index of the row in its parent table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowIndex?: number;
            /**
             * Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: string;
            /**
             * Specifies the text values in the row, as a 2D JavaScript array.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            values?: string[][];
            /**
             * Specifies the vertical alignment of the cells in the row. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
        }
        /** An interface describing the data returned by calling `tableRowCollection.toJSON()`. */
        export interface TableRowCollectionData {
            items?: Word.Interfaces.TableRowData[];
        }
        /** An interface describing the data returned by calling `tableCell.toJSON()`. */
        export interface TableCellData {
            /**
            * Gets the `Body` object of the cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            body?: Word.Interfaces.BodyData;
            /**
             * Gets the index of the cell in its row.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            cellIndex?: number;
            /**
             * Specifies the width of the cell's column in points. This is applicable to uniform tables.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            columnWidth?: number;
            /**
             * Specifies the horizontal alignment of the cell. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";
            /**
             * Gets the index of the cell's row in the table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowIndex?: number;
            /**
             * Specifies the shading color of the cell. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: string;
            /**
             * Specifies the text of the cell.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            value?: string;
            /**
             * Specifies the vertical alignment of the cell. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: Word.VerticalAlignment | "Mixed" | "Top" | "Center" | "Bottom";
            /**
             * Gets the width of the cell in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: number;
        }
        /** An interface describing the data returned by calling `tableCellCollection.toJSON()`. */
        export interface TableCellCollectionData {
            items?: Word.Interfaces.TableCellData[];
        }
        /** An interface describing the data returned by calling `tableBorder.toJSON()`. */
        export interface TableBorderData {
            /**
             * Specifies the table border color.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            color?: string;
            /**
             * Specifies the type of the table border.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            type?: Word.BorderType | "Mixed" | "None" | "Single" | "Double" | "Dotted" | "Dashed" | "DotDashed" | "Dot2Dashed" | "Triple" | "ThinThickSmall" | "ThickThinSmall" | "ThinThickThinSmall" | "ThinThickMed" | "ThickThinMed" | "ThinThickThinMed" | "ThinThickLarge" | "ThickThinLarge" | "ThinThickThinLarge" | "Wave" | "DoubleWave" | "DashedSmall" | "DashDotStroked" | "ThreeDEmboss" | "ThreeDEngrave";
            /**
             * Specifies the width, in points, of the table border. Not applicable to table border types that have fixed widths.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: number;
        }
        /** An interface describing the data returned by calling `template.toJSON()`. */
        export interface TemplateData {
            /**
             * Specifies the East Asian language to use when breaking lines of text in the document or template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            farEastLineBreakLanguage?: Word.FarEastLineBreakLanguageId | "TraditionalChinese" | "Japanese" | "Korean" | "SimplifiedChinese";
            /**
             * Specifies the line break control level for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            farEastLineBreakLevel?: Word.FarEastLineBreakLevel | "Normal" | "Strict" | "Custom";
            /**
             * Returns the name of the template, including the drive or Web path.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            fullName?: string;
            /**
             * Specifies whether the spelling and grammar checker ignores documents based on this template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * Specifies the character spacing adjustment for the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            justificationMode?: Word.JustificationMode | "Expand" | "Compress" | "CompressKana";
            /**
             * Specifies if Microsoft Word kerns half-width Latin characters and punctuation marks in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            kerningByAlgorithm?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language in the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies an East Asian language for the language in the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Returns only the name of the document template (excluding any path or other location information).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: string;
            /**
             * Specifies the kinsoku characters after which Microsoft Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noLineBreakAfter?: string;
            /**
             * Specifies the kinsoku characters before which Microsoft Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noLineBreakBefore?: string;
            /**
             * Returns the path to the document template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            path?: string;
            /**
             * Specifies `true` if the template has not changed since it was last saved, `false` if Microsoft Word displays a prompt to save changes when the document is closed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            saved?: boolean;
            /**
             * Returns the template type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: Word.TemplateType | "Normal" | "Global" | "Attached";
        }
        /** An interface describing the data returned by calling `templateCollection.toJSON()`. */
        export interface TemplateCollectionData {
            items?: Word.Interfaces.TemplateData[];
        }
        /** An interface describing the data returned by calling `trackedChange.toJSON()`. */
        export interface TrackedChangeData {
            /**
             * Gets the author of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            author?: string;
            /**
             * Gets the date of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            date?: Date;
            /**
             * Gets the text of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            text?: string;
            /**
             * Gets the type of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            type?: Word.TrackedChangeType | "None" | "Added" | "Deleted" | "Formatted";
        }
        /** An interface describing the data returned by calling `trackedChangeCollection.toJSON()`. */
        export interface TrackedChangeCollectionData {
            items?: Word.Interfaces.TrackedChangeData[];
        }
        /** An interface describing the data returned by calling `view.toJSON()`. */
        export interface ViewData {
            /**
             * Specifies whether all nonprinting characters are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areAllNonprintingCharactersDisplayed?: boolean;
            /**
             * Gets whether background colors and images are shown when the document is displayed in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBackgroundsDisplayed?: boolean;
            /**
             * Gets whether square brackets are displayed at the beginning and end of each bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBookmarksIndicated?: boolean;
            /**
             * Specifies whether Microsoft Word displays the comments in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areCommentsDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays connecting lines from the text to the revision and comment balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areConnectingLinesToRevisionsBalloonDisplayed?: boolean;
            /**
             * Gets whether crop marks are shown in the corners of pages to indicate where margins are located.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areCropMarksDisplayed?: boolean;
            /**
             * Gets whether objects created with the drawing tools are displayed in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areDrawingsDisplayed?: boolean;
            /**
             * Specifies whether shading is applied to the ranges in the document that users have permission to modify.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areEditableRangesShaded?: boolean;
            /**
             * Specifies whether field codes are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldCodesDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays formatting changes made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFormatChangesDisplayed?: boolean;
            /**
             * Specifies whether handwritten ink annotations are shown or hidden.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areInkAnnotationsDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays insertions and deletions made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areInsertionsAndDeletionsDisplayed?: boolean;
            /**
             * Gets whether lines wrap at the right edge of the document window rather than at the right margin or the right column boundary.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areLinesWrappedToWindow?: boolean;
            /**
             * Gets whether object anchors are displayed next to items that can be positioned in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areObjectAnchorsDisplayed?: boolean;
            /**
             * Gets whether Microsoft Word displays optional line breaks.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areOptionalBreaksDisplayed?: boolean;
            /**
             * Gets whether optional hyphens are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areOptionalHyphensDisplayed?: boolean;
            /**
             * Gets whether other authors' presence should be visible in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areOtherAuthorsVisible?: boolean;
            /**
             * Gets whether the top and bottom margins and the gray area between pages in the document are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageBoundariesDisplayed?: boolean;
            /**
             * Gets whether paragraph marks are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areParagraphsMarksDisplayed?: boolean;
            /**
             * Gets whether blank boxes are displayed as placeholders for pictures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePicturePlaceholdersDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays revisions and comments made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areRevisionsAndCommentsDisplayed?: boolean;
            /**
             * Gets whether space characters are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areSpacesIndicated?: boolean;
            /**
             * Specifies whether table gridlines are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTableGridlinesDisplayed?: boolean;
            /**
             * Gets whether tab characters are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTabsDisplayed?: boolean;
            /**
             * Gets whether dotted lines are displayed around page margins, text columns, objects, and frames in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTextBoundariesDisplayed?: boolean;
            /**
             * Specifies the column width in Reading mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            columnWidth?: Word.ColumnWidth | "Narrow" | "Default" | "Wide";
            /**
             * Gets on-screen shading for fields.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fieldShading?: Word.FieldShading | "Never" | "Always" | "WhenSelected";
            /**
             * Specifies whether all the text in a window is displayed in the same sans-serif font with minimal formatting to speed up display.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDraft?: boolean;
            /**
             * Specifies whether only the first line of body text is shown in outline view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFirstLineOnlyDisplayed?: boolean;
            /**
             * Specifies whether character formatting is visible in outline view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormatDisplayed?: boolean;
            /**
             * Specifies whether the window is in full-screen view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFullScreen?: boolean;
            /**
             * Gets whether text formatted as hidden text is displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isHiddenTextDisplayed?: boolean;
            /**
             * Gets whether highlight formatting is displayed and printed with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isHighlightingDisplayed?: boolean;
            /**
             * Specifies whether the document is in conflict mode view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInConflictMode?: boolean;
            /**
             * Specifies whether Microsoft Word is in Panning mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInPanning?: boolean;
            /**
             * Specifies whether the document is being viewed in reading layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInReadingLayout?: boolean;
            /**
             * Specifies whether mail merge data is displayed instead of mail merge fields.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMailMergeDataView?: boolean;
            /**
             * Specifies whether the text in the document is visible when the header and footer areas are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMainTextLayerVisible?: boolean;
            /**
             * Specifies whether the pointer is displayed as a magnifying glass in print preview.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPointerShownAsMagnifier?: boolean;
            /**
             * Specifies whether pages displayed in reading layout view are displayed using the same layout as printed pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isReadingLayoutActualView?: boolean;
            /**
             * Specifies whether XML tags are visible in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isXmlMarkupVisible?: boolean;
            /**
             * Specifies the display mode for tracked changes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            markupMode?: Word.RevisionsMode | "Balloon" | "Inline" | "Mixed";
            /**
             * Specifies the page color in Reading mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageColor?: Word.PageColor | "None" | "Sepia" | "Inverse";
            /**
             * Specifies the page movement type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageMovementType?: Word.PageMovementType | "Vertical" | "SideToSide";
            /**
             * Specifies whether margins are visible or hidden when the document is viewed in Full Screen Reading view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutTruncateMargins?: Word.ReadingLayoutMargin | "Automatic" | "Suppress" | "Full";
            /**
             * Gets whether Word displays revision balloons in the left or right margin in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisionsBalloonSide?: Word.RevisionsBalloonMargin | "Left" | "Right";
            /**
             * Specifies the width of the revision balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisionsBalloonWidth?: number;
            /**
             * Specifies how Microsoft Word measures the width of revision balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisionsBalloonWidthType?: Word.RevisionsBalloonWidthType | "Percent" | "Points";
            /**
             * Specifies the document element displayed in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            seekView?: Word.SeekView | "MainDocument" | "PrimaryHeader" | "FirstPageHeader" | "EvenPagesHeader" | "PrimaryFooter" | "FirstPageFooter" | "EvenPagesFooter" | "Footnotes" | "Endnotes" | "CurrentPageHeader" | "CurrentPageFooter";
            /**
             * Specifies the active window pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            splitSpecial?: Word.SpecialPane | "None" | "PrimaryHeader" | "FirstPageHeader" | "EvenPagesHeader" | "PrimaryFooter" | "FirstPageFooter" | "EvenPagesFooter" | "Footnotes" | "Endnotes" | "FootnoteContinuationNotice" | "FootnoteContinuationSeparator" | "FootnoteSeparator" | "EndnoteContinuationNotice" | "EndnoteContinuationSeparator" | "EndnoteSeparator" | "Comments" | "CurrentPageHeader" | "CurrentPageFooter" | "Revisions" | "RevisionsHoriz" | "RevisionsVert";
            /**
             * Specifies the view type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.ViewType | "Normal" | "Outline" | "Print" | "PrintPreview" | "Master" | "Web" | "Reading" | "Conflict";
        }
        /** An interface describing the data returned by calling `shape.toJSON()`. */
        export interface ShapeData {
            /**
            * Represents the `Body` object of the shape. Only applies to text boxes and geometric shapes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            body?: Word.Interfaces.BodyData;
            /**
            * Gets the canvas associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `canvas`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            canvas?: Word.Interfaces.CanvasData;
            /**
            * Returns the fill formatting of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            fill?: Word.Interfaces.ShapeFillData;
            /**
            * Gets the top-level parent canvas shape of this child shape. It will be null if it isn't a child shape of a canvas.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            parentCanvas?: Word.Interfaces.ShapeData;
            /**
            * Gets the top-level parent group shape of this child shape. It will be null if it isn't a child shape of a group.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            parentGroup?: Word.Interfaces.ShapeData;
            /**
            * Gets the shape group associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `groupShape`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shapeGroup?: Word.Interfaces.ShapeGroupData;
            /**
            * Gets the `TextFrame` object of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            textFrame?: Word.Interfaces.TextFrameData;
            /**
            * Returns the text wrap formatting of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            textWrap?: Word.Interfaces.ShapeTextWrapData;
            /**
             * Specifies whether a given shape can overlap other shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            allowOverlap?: boolean;
            /**
             * Specifies a string that represents the alternative text associated with the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            altTextDescription?: string;
            /**
             * The geometric shape type of the shape. It will be null if isn't a geometric shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            geometricShapeType?: Word.GeometricShapeType | "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus";
            /**
             * The height, in points, of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            height?: number;
            /**
             * The percentage of shape height to vertical relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            heightRelative?: number;
            /**
             * Gets an integer that represents the shape identifier.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            id?: number;
            /**
             * Check whether this shape is a child of a group shape or a canvas shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            isChild?: boolean;
            /**
             * The distance, in points, from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            left?: number;
            /**
             * The relative left position as a percentage from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline or child shape, it will return 0 and can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftRelative?: number;
            /**
             * Specifies if the aspect ratio of this shape is locked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            lockAspectRatio?: boolean;
            /**
             * The name of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            name?: string;
            /**
             * The relative horizontal position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeHorizontalPosition?: Word.RelativeHorizontalPosition | "Margin" | "Page" | "Column" | "Character" | "LeftMargin" | "RightMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * The relative horizontal size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeHorizontalSize?: Word.RelativeSize | "Margin" | "Page" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * The relative vertical position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeVerticalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeVerticalPosition?: Word.RelativeVerticalPosition | "Margin" | "Page" | "Paragraph" | "Line" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * The relative vertical size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeVerticalSize?: Word.RelativeSize | "Margin" | "Page" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * Specifies the rotation, in degrees, of the shape. Not applicable to Canvas shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rotation?: number;
            /**
             * The distance, in points, from the top edge of the shape to the vertical relative position (see {@link Word.RelativeVerticalPosition}). For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            top?: number;
            /**
             * The relative top position as a percentage from the top edge of the shape to the vertical relative position, see {@link Word.RelativeVerticalPosition}. For an inline or child shape, it will return 0 and can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topRelative?: number;
            /**
             * Gets the shape type. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            type?: Word.ShapeType | "Unsupported" | "TextBox" | "GeometricShape" | "Group" | "Picture" | "Canvas";
            /**
             * Specifies if the shape is visible. Not applicable to inline shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            visible?: boolean;
            /**
             * The width, in points, of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            width?: number;
            /**
             * The percentage of shape width to horizontal relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            widthRelative?: number;
        }
        /** An interface describing the data returned by calling `shapeGroup.toJSON()`. */
        export interface ShapeGroupData {
            /**
            * Gets the `Shape` object associated with the group.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shape?: Word.Interfaces.ShapeData;
            /**
            * Gets the collection of `Shape` objects. Currently, only text boxes, geometric shapes, and pictures are supported.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shapes?: Word.Interfaces.ShapeData[];
            /**
             * Gets an integer that represents the shape group identifier.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            id?: number;
        }
        /** An interface describing the data returned by calling `canvas.toJSON()`. */
        export interface CanvasData {
            /**
            * Gets the `Shape` object associated with the canvas.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shape?: Word.Interfaces.ShapeData;
            /**
            * Gets the collection of {@link Word.Shape} objects. Currently, only text boxes, pictures, and geometric shapes are supported.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shapes?: Word.Interfaces.ShapeData[];
            /**
             * Gets an integer that represents the canvas identifier.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            id?: number;
        }
        /** An interface describing the data returned by calling `shapeCollection.toJSON()`. */
        export interface ShapeCollectionData {
            items?: Word.Interfaces.ShapeData[];
        }
        /** An interface describing the data returned by calling `shapeFill.toJSON()`. */
        export interface ShapeFillData {
            /**
             * Specifies the shape fill background color. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            backgroundColor?: string;
            /**
             * Specifies the shape fill foreground color. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            foregroundColor?: string;
            /**
             * Specifies the transparency percentage of the fill as a value from 0.0 (opaque) through 1.0 (clear). Returns `null` if the shape type does not support transparency or the shape fill has inconsistent transparency, such as with a gradient fill type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            transparency?: number;
            /**
             * Returns the fill type of the shape. See `Word.ShapeFillType` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            type?: Word.ShapeFillType | "NoFill" | "Solid" | "Gradient" | "Pattern" | "Picture" | "Texture" | "Mixed";
        }
        /** An interface describing the data returned by calling `textFrame.toJSON()`. */
        export interface TextFrameData {
            /**
             * Specifies the automatic sizing settings for the text frame. A text frame can be set to automatically fit the text to the text frame, to automatically fit the text frame to the text, or not perform any automatic sizing.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            autoSizeSetting?: Word.ShapeAutoSize | "None" | "TextToFitShape" | "ShapeToFitText" | "Mixed";
            /**
             * Specifies the bottom margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            bottomMargin?: number;
            /**
             * Returns `true` if the text frame contains text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            hasText?: boolean;
            /**
             * Specifies the left margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftMargin?: number;
            /**
             * Specifies whether the text in the text frame shouldn't rotate when the shape is rotated.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            noTextRotation?: boolean;
            /**
             * Specifies the angle to which the text is oriented for the text frame. See `Word.ShapeTextOrientation` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            orientation?: Word.ShapeTextOrientation | "None" | "Horizontal" | "EastAsianVertical" | "Vertical270" | "Vertical" | "EastAsianHorizontalRotated" | "Mixed";
            /**
             * Specifies the right margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rightMargin?: number;
            /**
             * Specifies the top margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topMargin?: number;
            /**
             * Specifies the vertical alignment of the text frame. See `Word.ShapeTextVerticalAlignment` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            verticalAlignment?: Word.ShapeTextVerticalAlignment | "Top" | "Middle" | "Bottom";
            /**
             * Determines whether lines break automatically to fit text inside the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            wordWrap?: boolean;
        }
        /** An interface describing the data returned by calling `shapeTextWrap.toJSON()`. */
        export interface ShapeTextWrapData {
            /**
             * Specifies the distance (in points) between the document text and the bottom edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            bottomDistance?: number;
            /**
             * Specifies the distance (in points) between the document text and the left edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftDistance?: number;
            /**
             * Specifies the distance (in points) between the document text and the right edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rightDistance?: number;
            /**
             * Specifies whether the document text should wrap on both sides of the specified shape, on either the left or right side only, or on the side of the shape that's farthest from the page margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            side?: Word.ShapeTextWrapSide | "None" | "Both" | "Left" | "Right" | "Largest";
            /**
             * Specifies the distance (in points) between the document text and the top edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topDistance?: number;
            /**
             * Specifies the text wrap type around the shape. See `Word.ShapeTextWrapType` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            type?: Word.ShapeTextWrapType | "Inline" | "Square" | "Tight" | "Through" | "TopBottom" | "Behind" | "Front";
        }
        /** An interface describing the data returned by calling `reviewer.toJSON()`. */
        export interface ReviewerData {
            /**
             * Specifies if the `Reviewer` object is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVisible?: boolean;
        }
        /** An interface describing the data returned by calling `reviewerCollection.toJSON()`. */
        export interface ReviewerCollectionData {
            items?: Word.Interfaces.ReviewerData[];
        }
        /** An interface describing the data returned by calling `revisionsFilter.toJSON()`. */
        export interface RevisionsFilterData {
            /**
             * Specifies a `RevisionsMarkup` value that represents the extent of reviewer markup displayed in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            markup?: Word.RevisionsMarkup | "None" | "Simple" | "All";
            /**
             * Specifies a `RevisionsView` value that represents globally whether Word displays the original version of the document or the final version, which might have revisions and formatting changes applied.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            view?: Word.RevisionsView | "Final" | "Original";
        }
        /** An interface describing the data returned by calling `repeatingSectionItem.toJSON()`. */
        export interface RepeatingSectionItemData {
            /**
            * Returns the range of this repeating section item, excluding the start and end tags.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
        }
        /** An interface describing the data returned by calling `revision.toJSON()`. */
        export interface RevisionData {
            /**
            * Gets a `Range` object that represents the range of text that was moved from one place to another in the document with tracked changes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            movedRange?: Word.Interfaces.RangeData;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained within a revision mark.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Gets the name of the user who made the tracked change.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            author?: string;
            /**
             * Gets the date and time when the tracked change was made.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            date?: Date;
            /**
             * Gets the description of tracked formatting changes in the revision.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formatDescription?: string;
            /**
             * Gets a number that represents the position of this item in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            index?: number;
            /**
             * Gets the revision type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.RevisionType | "None" | "Insert" | "Delete" | "Property" | "ParagraphNumber" | "DisplayField" | "Reconcile" | "Conflict" | "Style" | "Replace" | "ParagraphProperty" | "TableProperty" | "SectionProperty" | "StyleDefinition" | "MovedFrom" | "MovedTo" | "CellInsertion" | "CellDeletion" | "CellMerge" | "CellSplit" | "ConflictInsert" | "ConflictDelete";
        }
        /** An interface describing the data returned by calling `revisionCollection.toJSON()`. */
        export interface RevisionCollectionData {
            items?: Word.Interfaces.RevisionData[];
        }
        /** An interface describing the data returned by calling `datePickerContentControl.toJSON()`. */
        export interface DatePickerContentControlData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockData;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
            /**
            * Gets an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingData;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Specifies a `CalendarType` value that represents the calendar type for the date picker content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateCalendarType?: Word.CalendarType | "Western" | "Arabic" | "Hebrew" | "Taiwan" | "Japan" | "Thai" | "Korean" | "SakaEra" | "TranslitEnglish" | "TranslitFrench" | "Umalqura";
            /**
             * Specifies the format in which dates are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateDisplayFormat?: string;
            /**
             * Specifies a `LanguageId` that represents the language format for the date displayed in the date picker content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateDisplayLocale?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies a `ContentControlDateStorageFormat` value that represents the format for storage and retrieval of dates when the date picker content control is bound to the XML data store of the active document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateStorageFormat?: Word.ContentControlDateStorageFormat | "Text" | "Date" | "DateTime";
            /**
             * Gets the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Specifies the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Gets whether the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface describing the data returned by calling `pictureContentControl.toJSON()`. */
        export interface PictureContentControlData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockData;
            /**
            * Returns a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingData;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Returns the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Returns the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Returns whether the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface describing the data returned by calling `groupContentControl.toJSON()`. */
        export interface GroupContentControlData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockData;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
            /**
            * Gets an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingData;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Returns the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Gets the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Returns whether the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface describing the data returned by calling `buildingBlockGalleryContentControl.toJSON()`. */
        export interface BuildingBlockGalleryContentControlData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockData;
            /**
            * Returns a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingData;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the category for the building block content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            buildingBlockCategory?: string;
            /**
             * Specifies a `BuildingBlockType` value that represents the type of building block for the building block content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            buildingBlockType?: Word.BuildingBlockType | "QuickParts" | "CoverPage" | "Equations" | "Footers" | "Headers" | "PageNumber" | "Tables" | "Watermarks" | "AutoText" | "TextBox" | "PageNumberTop" | "PageNumberBottom" | "PageNumberPage" | "TableOfContents" | "CustomQuickParts" | "CustomCoverPage" | "CustomEquations" | "CustomFooters" | "CustomHeaders" | "CustomPageNumber" | "CustomTables" | "CustomWatermarks" | "CustomAutoText" | "CustomTextBox" | "CustomPageNumberTop" | "CustomPageNumberBottom" | "CustomPageNumberPage" | "CustomTableOfContents" | "Custom1" | "Custom2" | "Custom3" | "Custom4" | "Custom5" | "Bibliography" | "CustomBibliography";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Gets the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Gets the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Gets if the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface describing the data returned by calling `repeatingSectionContentControl.toJSON()`. */
        export interface RepeatingSectionContentControlData {
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockData;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Specifies whether users can add or remove sections from this repeating section content control by using the user interface.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            allowInsertDeleteSection?: boolean;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: string;
            /**
             * Returns the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: string;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Returns the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: Word.ContentControlLevel | "Inline" | "Paragraph" | "Row" | "Cell";
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Specifies the name of the repeating section items used in the context menu associated with this repeating section content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            repeatingSectionItemTitle?: string;
            /**
             * Returns whether the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: string;
        }
        /** An interface describing the data returned by calling `readabilityStatistic.toJSON()`. */
        export interface ReadabilityStatisticData {
            /**
             * Returns the name of the readability statistic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
            /**
             * Returns the value of the grammar statistic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            value?: number;
        }
        /** An interface describing the data returned by calling `readabilityStatisticCollection.toJSON()`. */
        export interface ReadabilityStatisticCollectionData {
            items?: Word.Interfaces.ReadabilityStatisticData[];
        }
        /** An interface describing the data returned by calling `webSettings.toJSON()`. */
        export interface WebSettingsData {
            /**
             * Specifies whether PNG is allowed as an image format when saving a document as a webpage. Default is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            allowPng?: boolean;
            /**
             * Specifies the document encoding (code page or character set) to be used by the web browser when viewing the saved document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            encoding?: Word.DocumentEncoding | "Thai" | "JapaneseShiftJis" | "SimplifiedChineseGbk" | "Korean" | "TraditionalChineseBig5" | "UnicodeLittleEndian" | "UnicodeBigEndian" | "CentralEuropean" | "Cyrillic" | "Western" | "Greek" | "Turkish" | "Hebrew" | "Arabic" | "Baltic" | "Vietnamese" | "AutoDetect" | "JapaneseAutoDetect" | "SimplifiedChineseAutoDetect" | "KoreanAutoDetect" | "TraditionalChineseAutoDetect" | "CyrillicAutoDetect" | "GreekAutoDetect" | "ArabicAutoDetect" | "Iso88591Latin1" | "Iso88592CentralEurope" | "Iso88593Latin3" | "Iso88594Baltic" | "Iso88595Cyrillic" | "Iso88596Arabic" | "Iso88597Greek" | "Iso88598Hebrew" | "Iso88599Turkish" | "Iso885915Latin9" | "Iso88598HebrewLogical" | "Iso2022JpNoHalfwidthKatakana" | "Iso2022JpJisX02021984" | "Iso2022JpJisX02011989" | "Iso2022Kr" | "Iso2022CnTraditionalChinese" | "Iso2022CnSimplifiedChinese" | "MacRoman" | "MacJapanese" | "MacTraditionalChineseBig5" | "MacKorean" | "MacArabic" | "MacHebrew" | "MacGreek1" | "MacCyrillic" | "MacSimplifiedChineseGb2312" | "MacRomania" | "MacUkraine" | "MacLatin2" | "MacIcelandic" | "MacTurkish" | "MacCroatia" | "EbcdicUsCanada" | "EbcdicInternational" | "EbcdicMultilingualRoeceLatin2" | "EbcdicGreekModern" | "EbcdicTurkishLatin5" | "EbcdicGermany" | "EbcdicDenmarkNorway" | "EbcdicFinlandSweden" | "EbcdicItaly" | "EbcdicLatinAmericaSpain" | "EbcdicUnitedKingdom" | "EbcdicJapaneseKatakanaExtended" | "EbcdicFrance" | "EbcdicArabic" | "EbcdicGreek" | "EbcdicHebrew" | "EbcdicKoreanExtended" | "EbcdicThai" | "EbcdicIcelandic" | "EbcdicTurkish" | "EbcdicRussian" | "EbcdicSerbianBulgarian" | "EbcdicJapaneseKatakanaExtendedAndJapanese" | "EbcdicUsCanadaAndJapanese" | "EbcdicKoreanExtendedAndKorean" | "EbcdicSimplifiedChineseExtendedAndSimplifiedChinese" | "EbcdicUsCanadaAndTraditionalChinese" | "EbcdicJapaneseLatinExtendedAndJapanese" | "OemUnitedStates" | "OemGreek437G" | "OemBaltic" | "OemMultilingualLatinI" | "OemMultilingualLatinIi" | "OemCyrillic" | "OemTurkish" | "OemPortuguese" | "OemIcelandic" | "OemHebrew" | "OemCanadianFrench" | "OemArabic" | "OemNordic" | "OemCyrillicIi" | "OemModernGreek" | "EucJapanese" | "EucChineseSimplifiedChinese" | "EucKorean" | "EucTaiwaneseTraditionalChinese" | "IsciiDevanagari" | "IsciiBengali" | "IsciiTamil" | "IsciiTelugu" | "IsciiAssamese" | "IsciiOriya" | "IsciiKannada" | "IsciiMalayalam" | "IsciiGujarati" | "IsciiPunjabi" | "ArabicAsmo" | "ArabicTransparentAsmo" | "KoreanJohab" | "TaiwanCns" | "TaiwanTca" | "TaiwanEten" | "TaiwanIbm5550" | "TaiwanTeleText" | "TaiwanWang" | "Ia5Irv" | "Ia5German" | "Ia5Swedish" | "Ia5Norwegian" | "UsaAscii" | "T61" | "Iso6937NonSpacingAccent" | "Koi8R" | "ExtAlphaLowercase" | "Koi8U" | "Europa3" | "HzGbSimplifiedChinese" | "SimplifiedChineseGb18030" | "Utf7" | "Utf8";
            /**
             * Gets the folder suffix used when saving a document as a webpage with long file names and supporting files in a separate folder.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            folderSuffix?: string;
            /**
             * Specifies whether supporting files are organized in a separate folder when saving the document as a webpage. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            organizeInFolder?: boolean;
            /**
             * Specifies the density (pixels per inch) of graphics images and table cells on a webpage.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pixelsPerInch?: number;
            /**
             * Specifies whether cascading style sheets (CSS) are used for font formatting when viewing a saved document in a web browser. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            relyOnCSS?: boolean;
            /**
             * Specifies whether image files are not generated from drawing objects when saving a document as a webpage. Default is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            relyOnVectorMarkupLanguage?: boolean;
            /**
             * Specifies the ideal minimum screen size (width by height, in pixels) for viewing the saved document in a web browser.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            screenSize?: Word.ScreenSize | "Size544x376" | "Size640x480" | "Size720x512" | "Size800x600" | "Size1024x768" | "Size1152x882" | "Size1152x900" | "Size1280x1024" | "Size1600x1200" | "Size1800x1440" | "Size1920x1200";
            /**
             * Specifies the target browser for documents viewed in a web browser.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            targetBrowser?: Word.TargetBrowser | "V3" | "V4" | "Ie4" | "Ie5" | "Ie6";
            /**
             * Specifies whether long file names are used when saving the document as a webpage. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            useLongFileNames?: boolean;
        }
        /** An interface describing the data returned by calling `xmlNodeCollection.toJSON()`. */
        export interface XmlNodeCollectionData {
            items?: Word.Interfaces.XmlNodeData[];
        }
        /** An interface describing the data returned by calling `xmlNode.toJSON()`. */
        export interface XmlNodeData {
            /**
             * Gets the name of the element without any prefix.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            baseName?: string;
            /**
             * Gets whether this XML node has child nodes. Always returns `false` for attribute nodes since they cannot have children.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasChildNodes?: boolean;
            /**
             * Gets whether this XML element is part of a paragraph, is a paragraph, or is contained within a table cell or contains a table row. Returns `null` if the node type is `attribute`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            level?: Word.XmlNodeLevel | "Inline" | "Paragraph" | "Row" | "Cell";
            /**
             * Gets the Uniform Resource Identifier (URI) of the schema namespace for this XML node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            namespaceUri?: string;
            /**
             * Specifies the text displayed for this element if it contains no text. Only applies to element nodes, not attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            placeholderText?: string;
            /**
             * Specifies the text contained within the XML element. Returns an empty string if the node type is `attribute`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            text?: string;
            /**
             * Gets the description for a validation error on this `XmlNode` object. May not be meaningful for attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            validationErrorText?: string;
            /**
             * Gets whether this element is valid according to the attached schema. May not be meaningful for attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            validationStatus?: Word.XmlValidationStatus | "Ok" | "Custom";
        }
        /** An interface describing the data returned by calling `htmlDivision.toJSON()`. */
        export interface HtmlDivisionData {
            /**
             * Specifies the left indent value (in points) for this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftIndent?: number;
            /**
             * Specifies the right indent (in points) for this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightIndent?: number;
            /**
             * Specifies the amount of spacing (in points) after this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spaceAfter?: number;
            /**
             * Specifies the spacing (in points) before this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spaceBefore?: number;
        }
        /** An interface describing the data returned by calling `htmlDivisionCollection.toJSON()`. */
        export interface HtmlDivisionCollectionData {
            items?: Word.Interfaces.HtmlDivisionData[];
        }
        /** An interface describing the data returned by calling `frame.toJSON()`. */
        export interface FrameData {
            /**
            * Returns a `BorderUniversalCollection` object that represents all the borders for the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            borders?: Word.Interfaces.BorderUniversalData[];
            /**
            * Returns a `Range` object that represents the portion of the document that's contained within the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeData;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalData;
            /**
             * Specifies the height (in points) of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            height?: number;
            /**
             * Specifies a `FrameSizeRule` value that represents the rule for determining the height of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            heightRule?: Word.FrameSizeRule | "Auto" | "AtLeast" | "Exact";
            /**
             * Specifies the horizontal distance between the frame and the surrounding text, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            horizontalDistanceFromText?: number;
            /**
             * Specifies the horizontal distance between the edge of the frame and the item specified by the `relativeHorizontalPosition` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            horizontalPosition?: number;
            /**
             * Specifies if the frame is locked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockAnchor?: boolean;
            /**
             * Specifies the relative horizontal position of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            relativeHorizontalPosition?: Word.RelativeHorizontalPosition | "Margin" | "Page" | "Column" | "Character" | "LeftMargin" | "RightMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * Specifies the relative vertical position of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            relativeVerticalPosition?: Word.RelativeVerticalPosition | "Margin" | "Page" | "Paragraph" | "Line" | "TopMargin" | "BottomMargin" | "InsideMargin" | "OutsideMargin";
            /**
             * Specifies if document text wraps around the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textWrap?: boolean;
            /**
             * Specifies the vertical distance (in points) between the frame and the surrounding text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalDistanceFromText?: number;
            /**
             * Specifies the vertical distance between the edge of the frame and the item specified by the `relativeVerticalPosition` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalPosition?: number;
            /**
             * Specifies the width (in points) of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: number;
            /**
             * Specifies the rule used to determine the width of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            widthRule?: Word.FrameSizeRule | "Auto" | "AtLeast" | "Exact";
        }
        /** An interface describing the data returned by calling `frameCollection.toJSON()`. */
        export interface FrameCollectionData {
            items?: Word.Interfaces.FrameData[];
        }
        /** An interface describing the data returned by calling `documentLibraryVersion.toJSON()`. */
        export interface DocumentLibraryVersionData {
            /**
             * Gets any optional comments associated with this version of the shared document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            comments?: string;
            /**
             * Gets the date and time at which this version of the shared document was last saved to the server.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            modified?: any;
            /**
             * Gets the name of the user who last saved this version of the shared document to the server.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            modifiedBy?: string;
        }
        /** An interface describing the data returned by calling `documentLibraryVersionCollection.toJSON()`. */
        export interface DocumentLibraryVersionCollectionData {
            items?: Word.Interfaces.DocumentLibraryVersionData[];
        }
        /** An interface describing the data returned by calling `dropCap.toJSON()`. */
        export interface DropCapData {
            /**
             * Gets the distance (in points) between the dropped capital letter and the paragraph text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            distanceFromText?: number;
            /**
             * Gets the name of the font for the dropped capital letter.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fontName?: string;
            /**
             * Gets the height (in lines) of the dropped capital letter.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            linesToDrop?: number;
            /**
             * Gets the position of the dropped capital letter.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            position?: Word.DropPosition | "None" | "Normal" | "Margin";
        }
        /** An interface describing the data returned by calling `listFormat.toJSON()`. */
        export interface ListFormatData {
            /**
            * Returns a `List` object that represents the first formatted list contained in the `ListFormat` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            list?: Word.Interfaces.ListData;
            /**
            * Gets the list template associated with the `ListFormat` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            listTemplate?: Word.Interfaces.ListTemplateData;
            /**
             * Indicates whether the `ListFormat` object contains a single list.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isSingleList?: boolean;
            /**
             * Indicates whether the `ListFormat` object contains a single list template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isSingleListTemplate?: boolean;
            /**
             * Specifies the list level number for the first paragraph for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listLevelNumber?: number;
            /**
             * Gets the string representation of the list value of the first paragraph in the range for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listString?: string;
            /**
             * Gets the type of the list for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listType?: Word.ListType | "ListNoNumbering" | "ListListNumOnly" | "ListBullet" | "ListSimpleNumbering" | "ListOutlineNumbering" | "ListMixedNumbering" | "ListPictureBullet";
            /**
             * Gets the numeric value of the the first paragraph in the range for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listValue?: number;
        }
        /** An interface describing the data returned by calling `fillFormat.toJSON()`. */
        export interface FillFormatData {
            /**
            * Returns a `ColorFormat` object that represents the background color for the fill.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            backgroundColor?: Word.Interfaces.ColorFormatData;
            /**
            * Returns a `ColorFormat` object that represents the foreground color for the fill.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatData;
            /**
             * Specifies the angle of the gradient fill. The valid range of values is from 0 to 359.9.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientAngle?: number;
            /**
             * Gets the gradient color type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientColorType?: Word.GradientColorType | "Mixed" | "OneColor" | "TwoColors" | "PresetColors" | "MultiColor";
            /**
             * Returns how dark or light a one-color gradient fill is.
                        A value of 0 means that black is mixed in with the shape's foreground color to form the gradient.
                        A value of 1 means that white is mixed in.
                        Values between 0 and 1 mean that a darker or lighter shade of the foreground color is mixed in.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientDegree?: number;
            /**
             * Returns the gradient style for the fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientStyle?: Word.GradientStyle | "Mixed" | "Horizontal" | "Vertical" | "DiagonalUp" | "DiagonalDown" | "FromCorner" | "FromTitle" | "FromCenter";
            /**
             * Returns the gradient variant for the fill as an integer value from 1 to 4 for most gradient fills.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientVariant?: number;
            /**
             * Specifies if the object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Returns a `PatternType` value that represents the pattern applied to the fill or line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pattern?: Word.PatternType | "Mixed" | "Percent5" | "Percent10" | "Percent20" | "Percent25" | "Percent30" | "Percent40" | "Percent50" | "Percent60" | "Percent70" | "Percent75" | "Percent80" | "Percent90" | "DarkHorizontal" | "DarkVertical" | "DarkDownwardDiagonal" | "DarkUpwardDiagonal" | "SmallCheckerBoard" | "Trellis" | "LightHorizontal" | "LightVertical" | "LightDownwardDiagonal" | "LightUpwardDiagonal" | "SmallGrid" | "DottedDiamond" | "WideDownwardDiagonal" | "WideUpwardDiagonal" | "DashedUpwardDiagonal" | "DashedDownwardDiagonal" | "NarrowVertical" | "NarrowHorizontal" | "DashedVertical" | "DashedHorizontal" | "LargeConfetti" | "LargeGrid" | "HorizontalBrick" | "LargeCheckerBoard" | "SmallConfetti" | "ZigZag" | "SolidDiamond" | "DiagonalBrick" | "OutlinedDiamond" | "Plaid" | "Sphere" | "Weave" | "DottedGrid" | "Divot" | "Shingle" | "Wave" | "Horizontal" | "Vertical" | "Cross" | "DownwardDiagonal" | "UpwardDiagonal" | "DiagonalCross";
            /**
             * Returns the preset gradient type for the fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetGradientType?: Word.PresetGradientType | "Mixed" | "EarlySunset" | "LateSunset" | "Nightfall" | "Daybreak" | "Horizon" | "Desert" | "Ocean" | "CalmWater" | "Fire" | "Fog" | "Moss" | "Peacock" | "Wheat" | "Parchment" | "Mahogany" | "Rainbow" | "RainbowII" | "Gold" | "GoldII" | "Brass" | "Chrome" | "ChromeII" | "Silver" | "Sapphire";
            /**
             * Gets the preset texture.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetTexture?: Word.PresetTexture | "Mixed" | "Papyrus" | "Canvas" | "Denim" | "WovenMat" | "WaterDroplets" | "PaperBag" | "FishFossil" | "Sand" | "GreenMarble" | "WhiteMarble" | "BrownMarble" | "Granite" | "Newsprint" | "RecycledPaper" | "Parchment" | "Stationery" | "BlueTissuePaper" | "PinkTissuePaper" | "PurpleMesh" | "Bouquet" | "Cork" | "Walnut" | "Oak" | "MediumWood";
            /**
             * Specifies whether the fill rotates with the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotateWithObject?: boolean;
            /**
             * Specifies the alignment (the origin of the coordinate grid) for the tiling of the texture fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureAlignment?: Word.TextureAlignment | "Mixed" | "TopLeft" | "Top" | "TopRight" | "Left" | "Center" | "Right" | "BottomLeft" | "Bottom" | "BottomRight";
            /**
             * Specifies the horizontal scaling factor for the texture fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureHorizontalScale?: number;
            /**
             * Returns the name of the custom texture file for the fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureName?: string;
            /**
             * Specifies the horizontal offset of the texture from the origin in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureOffsetX?: number;
            /**
             * Specifies the vertical offset of the texture.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureOffsetY?: number;
            /**
             * Specifies whether the texture is tiled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureTile?: boolean;
            /**
             * Returns the texture type for the fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureType?: Word.TextureType | "Mixed" | "Preset" | "UserDefined";
            /**
             * Specifies the vertical scaling factor for the texture fill as a value between 0.0 and 1.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureVerticalScale?: number;
            /**
             * Specifies the degree of transparency of the fill for a shape as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
            /**
             * Gets the fill format type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: Word.FillType | "Mixed" | "Solid" | "Patterned" | "Gradient" | "Textured" | "Background" | "Picture";
        }
        /** An interface describing the data returned by calling `glowFormat.toJSON()`. */
        export interface GlowFormatData {
            /**
            * Returns a `ColorFormat` object that represents the color for a glow effect.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            color?: Word.Interfaces.ColorFormatData;
            /**
             * Specifies the length of the radius for a glow effect.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            radius?: number;
            /**
             * Specifies the degree of transparency for the glow effect as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
        }
        /** An interface describing the data returned by calling `lineFormat.toJSON()`. */
        export interface LineFormatData {
            /**
            * Gets a `ColorFormat` object that represents the background color for a patterned line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            backgroundColor?: Word.Interfaces.ColorFormatData;
            /**
            * Gets a `ColorFormat` object that represents the foreground color for the line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatData;
            /**
             * Specifies the length of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadLength?: Word.ArrowheadLength | "Mixed" | "Short" | "Medium" | "Long";
            /**
             * Specifies the style of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadStyle?: Word.ArrowheadStyle | "Mixed" | "None" | "Triangle" | "Open" | "Stealth" | "Diamond" | "Oval";
            /**
             * Specifies the width of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadWidth?: Word.ArrowheadWidth | "Mixed" | "Narrow" | "Medium" | "Wide";
            /**
             * Specifies the dash style for the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dashStyle?: Word.LineDashStyle | "Mixed" | "Solid" | "SquareDot" | "RoundDot" | "Dash" | "DashDot" | "DashDotDot" | "LongDash" | "LongDashDot" | "LongDashDotDot" | "SysDash" | "SysDot" | "SysDashDot";
            /**
             * Specifies the length of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadLength?: Word.ArrowheadLength | "Mixed" | "Short" | "Medium" | "Long";
            /**
             * Specifies the style of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadStyle?: Word.ArrowheadStyle | "Mixed" | "None" | "Triangle" | "Open" | "Stealth" | "Diamond" | "Oval";
            /**
             * Specifies the width of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadWidth?: Word.ArrowheadWidth | "Mixed" | "Narrow" | "Medium" | "Wide";
            /**
             * Specifies if to draw lines inside a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            insetPen?: boolean;
            /**
             * Specifies if the object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the pattern applied to the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pattern?: Word.PatternType | "Mixed" | "Percent5" | "Percent10" | "Percent20" | "Percent25" | "Percent30" | "Percent40" | "Percent50" | "Percent60" | "Percent70" | "Percent75" | "Percent80" | "Percent90" | "DarkHorizontal" | "DarkVertical" | "DarkDownwardDiagonal" | "DarkUpwardDiagonal" | "SmallCheckerBoard" | "Trellis" | "LightHorizontal" | "LightVertical" | "LightDownwardDiagonal" | "LightUpwardDiagonal" | "SmallGrid" | "DottedDiamond" | "WideDownwardDiagonal" | "WideUpwardDiagonal" | "DashedUpwardDiagonal" | "DashedDownwardDiagonal" | "NarrowVertical" | "NarrowHorizontal" | "DashedVertical" | "DashedHorizontal" | "LargeConfetti" | "LargeGrid" | "HorizontalBrick" | "LargeCheckerBoard" | "SmallConfetti" | "ZigZag" | "SolidDiamond" | "DiagonalBrick" | "OutlinedDiamond" | "Plaid" | "Sphere" | "Weave" | "DottedGrid" | "Divot" | "Shingle" | "Wave" | "Horizontal" | "Vertical" | "Cross" | "DownwardDiagonal" | "UpwardDiagonal" | "DiagonalCross";
            /**
             * Specifies the line format style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            style?: Word.LineFormatStyle | "Mixed" | "Single" | "ThinThin" | "ThinThick" | "ThickThin" | "ThickBetweenThin";
            /**
             * Specifies the degree of transparency of the line as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
            /**
             * Specifies the thickness of the line in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            weight?: number;
        }
        /** An interface describing the data returned by calling `reflectionFormat.toJSON()`. */
        export interface ReflectionFormatData {
            /**
             * Specifies the degree of blur effect applied to the `ReflectionFormat` object as a value between 0.0 and 100.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            blur?: number;
            /**
             * Specifies the amount of separation, in points, of the reflected image from the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offset?: number;
            /**
             * Specifies the size of the reflection as a percentage of the reflected shape from 0 to 100.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            size?: number;
            /**
             * Specifies the degree of transparency for the reflection effect as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
            /**
             * Specifies a `ReflectionType` value that represents the type and direction of the lighting for a shape reflection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: Word.ReflectionType | "Mixed" | "None" | "Type1" | "Type2" | "Type3" | "Type4" | "Type5" | "Type6" | "Type7" | "Type8" | "Type9";
        }
        /** An interface describing the data returned by calling `colorFormat.toJSON()`. */
        export interface ColorFormatData {
            /**
             * Specifies the brightness of a specified shape color. Valid values are from `-1` (darkest) to `1` (lightest), `0` represents neutral.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            brightness?: number;
            /**
             * Specifies the theme color for a color format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            objectThemeColor?: Word.ThemeColorIndex | "NotThemeColor" | "MainDark1" | "MainLight1" | "MainDark2" | "MainLight2" | "Accent1" | "Accent2" | "Accent3" | "Accent4" | "Accent5" | "Accent6" | "Hyperlink" | "HyperlinkFollowed" | "Background1" | "Text1" | "Background2" | "Text2";
            /**
             * Specifies the red-green-blue (RGB) value of the specified color. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rgb?: string;
            /**
             * Specifies the lightening or darkening of a specified shape's color. Valid values are from `-1` (darkest) to `1` (lightest), `0` represents neutral.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tintAndShade?: number;
            /**
             * Returns the shape color type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: Word.ColorType | "rgb" | "scheme";
        }
        /** An interface describing the data returned by calling `shadowFormat.toJSON()`. */
        export interface ShadowFormatData {
            /**
            * Returns a `ColorFormat` object that represents the foreground color for the fill, line, or shadow.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatData;
            /**
             * Specifies the blur level for a shadow format as a value between 0.0 and 100.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            blur?: number;
            /**
             * Specifies whether the object or the formatting applied to it is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies `true` if the shadow of the shape appears filled in and is obscured by the shape, even if the shape has no fill,
                        `false` if the shadow has no fill and the outline of the shadow is visible through the shape if the shape has no fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            obscured?: boolean;
            /**
             * Specifies the horizontal offset (in points) of the shadow from the shape.
                        A positive value offsets the shadow to the right of the shape; a negative value offsets it to the left.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offsetX?: number;
            /**
             * Specifies the vertical offset (in points) of the shadow from the shape.
                        A positive value offsets the shadow to the top of the shape; a negative value offsets it to the bottom.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offsetY?: number;
            /**
             * Specifies whether to rotate the shadow when rotating the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotateWithShape?: boolean;
            /**
             * Specifies the width of the shadow.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            size?: number;
            /**
             * Specifies the type of shadow formatting to apply to a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            style?: Word.ShadowStyle | "Mixed" | "OuterShadow" | "InnerShadow";
            /**
             * Specifies the degree of transparency of the shadow as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: number;
            /**
             * Specifies the shape shadow type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: Word.ShadowType | "Mixed" | "Type1" | "Type2" | "Type3" | "Type4" | "Type5" | "Type6" | "Type7" | "Type8" | "Type9" | "Type10" | "Type11" | "Type12" | "Type13" | "Type14" | "Type15" | "Type16" | "Type17" | "Type18" | "Type19" | "Type20" | "Type21" | "Type22" | "Type23" | "Type24" | "Type25" | "Type26" | "Type27" | "Type28" | "Type29" | "Type30" | "Type31" | "Type32" | "Type33" | "Type34" | "Type35" | "Type36" | "Type37" | "Type38" | "Type39" | "Type40" | "Type41" | "Type42" | "Type43";
        }
        /** An interface describing the data returned by calling `threeDimensionalFormat.toJSON()`. */
        export interface ThreeDimensionalFormatData {
            /**
            * Returns a `ColorFormat` object that represents color of the contour of a shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            contourColor?: Word.Interfaces.ColorFormatData;
            /**
            * Returns a `ColorFormat` object that represents the color of the shape's extrusion.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            extrusionColor?: Word.Interfaces.ColorFormatData;
            /**
             * Specifies the depth of the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomDepth?: number;
            /**
             * Specifies the inset size for the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomInset?: number;
            /**
             * Specifies a `BevelType` value that represents the bevel type for the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomType?: Word.BevelType | "mixed" | "none" | "relaxedInset" | "circle" | "slope" | "cross" | "angle" | "softRound" | "convex" | "coolSlant" | "divot" | "riblet" | "hardEdge" | "artDeco";
            /**
             * Specifies the depth of the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopDepth?: number;
            /**
             * Specifies the inset size for the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopInset?: number;
            /**
             * Specifies a `BevelType` value that represents the bevel type for the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopType?: Word.BevelType | "mixed" | "none" | "relaxedInset" | "circle" | "slope" | "cross" | "angle" | "softRound" | "convex" | "coolSlant" | "divot" | "riblet" | "hardEdge" | "artDeco";
            /**
             * Specifies the width of the contour of a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            contourWidth?: number;
            /**
             * Specifies the depth of the shape's extrusion.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            depth?: number;
            /**
             * Specifies whether the extrusion color is based on the extruded shape's fill (the front face of the extrusion)
                        and automatically changes when the shape's fill changes, or whether the extrusion color is independent of the shape's fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            extrusionColorType?: Word.ExtrusionColorType | "mixed" | "automatic" | "custom";
            /**
             * Specifies the amount of perspective for a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            fieldOfView?: number;
            /**
             * Specifies `true` if the extrusion appears in perspective — that is, if the walls of the extrusion narrow toward a vanishing point,
                        `false` if the extrusion is a parallel, or orthographic, projection — that is, if the walls don't narrow toward a vanishing point.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isPerspective?: boolean;
            /**
             * Specifies if the specified object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the angle of the lighting.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lightAngle?: number;
            /**
             * Returns a `PresetCamera` value that represents the camera presets.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetCamera?: Word.PresetCamera | "Mixed" | "LegacyObliqueTopLeft" | "LegacyObliqueTop" | "LegacyObliqueTopRight" | "LegacyObliqueLeft" | "LegacyObliqueFront" | "LegacyObliqueRight" | "LegacyObliqueBottomLeft" | "LegacyObliqueBottom" | "LegacyObliqueBottomRight" | "LegacyPerspectiveTopLeft" | "LegacyPerspectiveTop" | "LegacyPerspectiveTopRight" | "LegacyPerspectiveLeft" | "LegacyPerspectiveFront" | "LegacyPerspectiveRight" | "LegacyPerspectiveBottomLeft" | "LegacyPerspectiveBottom" | "LegacyPerspectiveBottomRight" | "OrthographicFront" | "IsometricTopUp" | "IsometricTopDown" | "IsometricBottomUp" | "IsometricBottomDown" | "IsometricLeftUp" | "IsometricLeftDown" | "IsometricRightUp" | "IsometricRightDown" | "IsometricOffAxis1Left" | "IsometricOffAxis1Right" | "IsometricOffAxis1Top" | "IsometricOffAxis2Left" | "IsometricOffAxis2Right" | "IsometricOffAxis2Top" | "IsometricOffAxis3Left" | "IsometricOffAxis3Right" | "IsometricOffAxis3Bottom" | "IsometricOffAxis4Left" | "IsometricOffAxis4Right" | "IsometricOffAxis4Bottom" | "ObliqueTopLeft" | "ObliqueTop" | "ObliqueTopRight" | "ObliqueLeft" | "ObliqueRight" | "ObliqueBottomLeft" | "ObliqueBottom" | "ObliqueBottomRight" | "PerspectiveFront" | "PerspectiveLeft" | "PerspectiveRight" | "PerspectiveAbove" | "PerspectiveBelow" | "PerspectiveAboveLeftFacing" | "PerspectiveAboveRightFacing" | "PerspectiveContrastingLeftFacing" | "PerspectiveContrastingRightFacing" | "PerspectiveHeroicLeftFacing" | "PerspectiveHeroicRightFacing" | "PerspectiveHeroicExtremeLeftFacing" | "PerspectiveHeroicExtremeRightFacing" | "PerspectiveRelaxed" | "PerspectiveRelaxedModerately";
            /**
             * Returns the direction taken by the extrusion's sweep path leading away from the extruded shape (the front face of the extrusion).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetExtrusionDirection?: Word.PresetExtrusionDirection | "Mixed" | "BottomRight" | "Bottom" | "BottomLeft" | "Right" | "None" | "Left" | "TopRight" | "Top" | "TopLeft";
            /**
             * Specifies a `LightRigType` value that represents the lighting preset.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLighting?: Word.LightRigType | "Mixed" | "LegacyFlat1" | "LegacyFlat2" | "LegacyFlat3" | "LegacyFlat4" | "LegacyNormal1" | "LegacyNormal2" | "LegacyNormal3" | "LegacyNormal4" | "LegacyHarsh1" | "LegacyHarsh2" | "LegacyHarsh3" | "LegacyHarsh4" | "ThreePoint" | "Balanced" | "Soft" | "Harsh" | "Flood" | "Contrasting" | "Morning" | "Sunrise" | "Sunset" | "Chilly" | "Freezing" | "Flat" | "TwoPoint" | "Glow" | "BrightRoom";
            /**
             * Specifies the position of the light source relative to the extrusion.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLightingDirection?: Word.PresetLightingDirection | "Mixed" | "TopLeft" | "Top" | "TopRight" | "Left" | "None" | "Right" | "BottomLeft" | "Bottom" | "BottomRight";
            /**
             * Specifies the intensity of the extrusion lighting.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLightingSoftness?: Word.PresetLightingSoftness | "Mixed" | "Dim" | "Normal" | "Bright";
            /**
             * Specifies the extrusion surface material.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetMaterial?: Word.PresetMaterial | "Mixed" | "Matte" | "Plastic" | "Metal" | "WireFrame" | "Matte2" | "Plastic2" | "Metal2" | "WarmMatte" | "TranslucentPowder" | "Powder" | "DarkEdge" | "SoftEdge" | "Clear" | "Flat" | "SoftMetal";
            /**
             * Returns the preset extrusion format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetThreeDimensionalFormat?: Word.PresetThreeDimensionalFormat | "Mixed" | "Format1" | "Format2" | "Format3" | "Format4" | "Format5" | "Format6" | "Format7" | "Format8" | "Format9" | "Format10" | "Format11" | "Format12" | "Format13" | "Format14" | "Format15" | "Format16" | "Format17" | "Format18" | "Format19" | "Format20";
            /**
             * Specifies whether text on a shape rotates with shape. `true` rotates the text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            projectText?: boolean;
            /**
             * Specifies the rotation of the extruded shape around the x-axis in degrees.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationX?: number;
            /**
             * Specifies the rotation of the extruded shape around the y-axis in degrees.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationY?: number;
            /**
             * Specifies the z-axis rotation of the camera.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationZ?: number;
            /**
             * Specifies the position on the z-axis for the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            z?: number;
        }
        /** An interface describing the data returned by calling `bibliography.toJSON()`. */
        export interface BibliographyData {
            /**
            * Returns a `SourceCollection` object that represents all the sources contained in the bibliography.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            sources?: Word.Interfaces.SourceData[];
            /**
             * Specifies the name of the active style to use for the bibliography.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bibliographyStyle?: string;
        }
        /** An interface describing the data returned by calling `sourceCollection.toJSON()`. */
        export interface SourceCollectionData {
            items?: Word.Interfaces.SourceData[];
        }
        /** An interface describing the data returned by calling `source.toJSON()`. */
        export interface SourceData {
            /**
             * Gets if the `Source` object has been cited in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isCited?: boolean;
            /**
             * Gets the tag of the source.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: string;
            /**
             * Gets the XML representation of the source.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: string;
        }
        /** An interface describing the data returned by calling `pageSetup.toJSON()`. */
        export interface PageSetupData {
            /**
            * Specifies a `LineNumbering` object that represents the line numbers for the `PageSetup` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            lineNumbering?: Word.Interfaces.LineNumberingData;
            /**
            * Gets a `TextColumnCollection` object that represents the set of text columns for the `PageSetup` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            textColumns?: Word.Interfaces.TextColumnData[];
            /**
             * Specifies whether Microsoft Word prints the document as a booklet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldPrinting?: boolean;
            /**
             * Specifies the number of pages for each booklet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldPrintingSheets?: number;
            /**
             * Specifies if Microsoft Word reverses the printing order for book fold printing of bidirectional or Asian language documents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldReversePrinting?: boolean;
            /**
             * Specifies the distance (in points) between the bottom edge of the page and the bottom boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bottomMargin?: number;
            /**
             * Specifies the number of characters per line in the document grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            charsLine?: number;
            /**
             * Specifies whether the first page has a different header and footer.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            differentFirstPageHeaderFooter?: boolean;
            /**
             * Specifies the distance between the footer and the bottom of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            footerDistance?: number;
            /**
             * Specifies the amount (in points) of extra margin space added to each page in a document or section for binding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutter?: number;
            /**
             * Specifies on which side the gutter appears in a document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutterPosition?: Word.GutterPosition | "Left" | "Right" | "Top";
            /**
             * Specifies whether Microsoft Word uses gutters for the current document based on a right-to-left language or a left-to-right language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutterStyle?: Word.GutterStyle | "Bidirectional" | "Latin";
            /**
             * Specifies the distance between the header and the top of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            headerDistance?: number;
            /**
             * Specifies the layout mode for the current document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            layoutMode?: Word.LayoutMode | "Default" | "Grid" | "LineGrid" | "Genko";
            /**
             * Specifies the distance (in points) between the left edge of the page and the left boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            leftMargin?: number;
            /**
             * Specifies the number of lines per page in the document grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            linesPage?: number;
            /**
             * Specifies if the inside and outside margins of facing pages are the same width.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            mirrorMargins?: boolean;
            /**
             * Specifies whether odd and even pages have different headers and footers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            oddAndEvenPagesHeaderFooter?: boolean;
            /**
             * Specifies the orientation of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            orientation?: Word.PageOrientation | "Portrait" | "Landscape";
            /**
             * Specifies the page height in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageHeight?: number;
            /**
             * Specifies the page width in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageWidth?: number;
            /**
             * Specifies the paper size of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            paperSize?: Word.PaperSize | "Size10x14" | "Size11x17" | "Letter" | "LetterSmall" | "Legal" | "Executive" | "A3" | "A4" | "A4Small" | "A5" | "B4" | "B5" | "CSheet" | "DSheet" | "ESheet" | "FanfoldLegalGerman" | "FanfoldStdGerman" | "FanfoldUS" | "Folio" | "Ledger" | "Note" | "Quarto" | "Statement" | "Tabloid" | "Envelope9" | "Envelope10" | "Envelope11" | "Envelope12" | "Envelope14" | "EnvelopeB4" | "EnvelopeB5" | "EnvelopeB6" | "EnvelopeC3" | "EnvelopeC4" | "EnvelopeC5" | "EnvelopeC6" | "EnvelopeC65" | "EnvelopeDL" | "EnvelopeItaly" | "EnvelopeMonarch" | "EnvelopePersonal" | "Custom";
            /**
             * Specifies the distance (in points) between the right edge of the page and the right boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rightMargin?: number;
            /**
             * Specifies the reading order and alignment for the specified sections.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sectionDirection?: Word.SectionDirection | "RightToLeft" | "LeftToRight";
            /**
             * Specifies the type of section break for the specified object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sectionStart?: Word.SectionStart | "Continuous" | "NewColumn" | "NewPage" | "EvenPage" | "OddPage";
            /**
             * Specifies whether to show the grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showGrid?: boolean;
            /**
             * Specifies if endnotes are printed at the end of the next section that doesn't suppress endnotes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            suppressEndnotes?: boolean;
            /**
             * Specifies the top margin of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            topMargin?: number;
            /**
             * Specifies whether to print two pages per sheet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            twoPagesOnOne?: boolean;
            /**
             * Specifies the vertical alignment of text on each page in a document or section.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalAlignment?: Word.PageSetupVerticalAlignment | "Top" | "Center" | "Justify" | "Bottom";
        }
        /** An interface describing the data returned by calling `lineNumbering.toJSON()`. */
        export interface LineNumberingData {
            /**
             * Specifies the numeric increment for line numbers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            countBy?: number;
            /**
             * Specifies the distance (in points) between the right edge of line numbers and the left edge of the document text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            distanceFromText?: number;
            /**
             * Specifies if line numbering is active for the specified document, section, or sections.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isActive?: boolean;
            /**
             * Specifies the way line numbering runs; that is, whether it starts over at the beginning of a new page or section, or runs continuously.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            restartMode?: Word.NumberingRule | "RestartContinuous" | "RestartSection" | "RestartPage";
            /**
             * Specifies the starting line number.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            startingNumber?: number;
        }
        /** An interface describing the data returned by calling `textColumnCollection.toJSON()`. */
        export interface TextColumnCollectionData {
            items?: Word.Interfaces.TextColumnData[];
        }
        /** An interface describing the data returned by calling `textColumn.toJSON()`. */
        export interface TextColumnData {
            /**
             * Specifies the amount of spacing (in points) after the specified paragraph or text column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            spaceAfter?: number;
            /**
             * Specifies the width, in points, of the specified text columns.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: number;
        }
        /** An interface describing the data returned by calling `selection.toJSON()`. */
        export interface SelectionData {
            /**
             * Specifies the ending character position of the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: number;
            /**
             * Specifies the width in which Word fits the text in the current selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fitTextWidth?: number;
            /**
             * Returns whether the spelling and grammar checker ignores the selected text.
                        If the selected text contains a mix of proofed and un-proofed content, this API returns `null`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasNoProofing?: boolean;
            /**
             * Returns whether the selection in the specified window or pane is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isActive?: boolean;
            /**
             * Specifies whether column selection mode is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isColumnSelectModeActive?: boolean;
            /**
             * Returns whether the selection is at the end-of-row mark in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEndOfRowMark?: boolean;
            /**
             * Specifies whether Extend mode is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isExtendModeActive?: boolean;
            /**
             * Returns whether the insertion point is at the end of a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInsertionPointAtEndOfLine?: boolean;
            /**
             * Specifies whether the beginning of the selection is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isStartActive?: boolean;
            /**
             * Specifies whether Word has detected the language of the selected text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageDetected?: boolean;
            /**
             * Returns the language for the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageId?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Returns the East Asian language for the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageIdFarEast?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Returns the language for the selection that isn't classified as an East Asian language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageIdOther?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Specifies the orientation of text in the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            orientation?: Word.TextOrientation | "Horizontal" | "Upward" | "Downward" | "VerticalFarEast" | "HorizontalRotatedFarEast" | "Vertical";
            /**
             * Specifies the starting character position of the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: number;
            /**
             * Returns the number of characters in the story that contains the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyLength?: number;
            /**
             * Returns the story type for the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: Word.StoryType | "MainText" | "Footnotes" | "Endnotes" | "Comments" | "TextFrame" | "EvenPagesHeader" | "PrimaryHeader" | "EvenPagesFooter" | "PrimaryFooter" | "FirstPageHeader" | "FirstPageFooter" | "FootnoteSeparator" | "FootnoteContinuationSeparator" | "FootnoteContinuationNotice" | "EndnoteSeparator" | "EndnoteContinuationSeparator" | "EndnoteContinuationNotice";
            /**
             * Specifies the text in the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            text?: string;
            /**
             * Returns the selection type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.SelectionType | "NoSelection" | "InsertionPoint" | "Normal" | "Frame" | "Column" | "Row" | "Block" | "InlineShape" | "SelectionShape";
        }
        /** An interface describing the data returned by calling `rangeScopedCollection.toJSON()`. */
        export interface RangeScopedCollectionData {
            items?: Word.Interfaces.RangeData[];
        }
        /** An interface describing the data returned by calling `bookmark.toJSON()`. */
        export interface BookmarkData {
            /**
            * Returns a `Range` object that represents the portion of the document that's contained in the `Bookmark` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Specifies the ending character position of the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: number;
            /**
             * Returns `true` if the bookmark is a table column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isColumn?: boolean;
            /**
             * Returns `true` if the bookmark is empty.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEmpty?: boolean;
            /**
             * Returns the name of the `Bookmark` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: string;
            /**
             * Specifies the starting character position of the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: number;
            /**
             * Returns the story type for the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: Word.StoryType | "MainText" | "Footnotes" | "Endnotes" | "Comments" | "TextFrame" | "EvenPagesHeader" | "PrimaryHeader" | "EvenPagesFooter" | "PrimaryFooter" | "FirstPageHeader" | "FirstPageFooter" | "FootnoteSeparator" | "FootnoteContinuationSeparator" | "FootnoteContinuationNotice" | "EndnoteSeparator" | "EndnoteContinuationSeparator" | "EndnoteContinuationNotice";
        }
        /** An interface describing the data returned by calling `bookmarkCollection.toJSON()`. */
        export interface BookmarkCollectionData {
            items?: Word.Interfaces.BookmarkData[];
        }
        /** An interface describing the data returned by calling `index.toJSON()`. */
        export interface IndexData {
            /**
            * Returns a `Range` object that represents the portion of the document that is contained within the index.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeData;
            /**
             * Gets a value that represents how Microsoft Word classifies the first character of entries in the index.
                        See `IndexFilter` for available values.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            filter?: Word.IndexFilter | "None" | "Aiueo" | "Akasatana" | "Chosung" | "Low" | "Medium" | "Full";
            /**
             * Gets the text between alphabetical groups (entries that start with the same letter) in the index. Corresponds to
                        the **\h** switch for an {@link https://support.microsoft.com/office/adafcf4a-cb30-43f6-85c7-743da1635d9e | INDEX field}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            headingSeparator?: Word.HeadingSeparator | "None" | "BlankLine" | "Letter" | "LetterLow" | "LetterFull";
            /**
             * Gets a `LanguageId` value that represents the sorting language to use for the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            indexLanguage?: Word.LanguageId | "Afrikaans" | "Albanian" | "Amharic" | "Arabic" | "ArabicAlgeria" | "ArabicBahrain" | "ArabicEgypt" | "ArabicIraq" | "ArabicJordan" | "ArabicKuwait" | "ArabicLebanon" | "ArabicLibya" | "ArabicMorocco" | "ArabicOman" | "ArabicQatar" | "ArabicSyria" | "ArabicTunisia" | "ArabicUAE" | "ArabicYemen" | "Armenian" | "Assamese" | "AzeriCyrillic" | "AzeriLatin" | "Basque" | "BelgianDutch" | "BelgianFrench" | "Bengali" | "Bulgarian" | "Burmese" | "Belarusian" | "Catalan" | "Cherokee" | "ChineseHongKongSAR" | "ChineseMacaoSAR" | "ChineseSingapore" | "Croatian" | "Czech" | "Danish" | "Divehi" | "Dutch" | "Edo" | "EnglishAUS" | "EnglishBelize" | "EnglishCanadian" | "EnglishCaribbean" | "EnglishIndonesia" | "EnglishIreland" | "EnglishJamaica" | "EnglishNewZealand" | "EnglishPhilippines" | "EnglishSouthAfrica" | "EnglishTrinidadTobago" | "EnglishUK" | "EnglishUS" | "EnglishZimbabwe" | "Estonian" | "Faeroese" | "Filipino" | "Finnish" | "French" | "FrenchCameroon" | "FrenchCanadian" | "FrenchCongoDRC" | "FrenchCotedIvoire" | "FrenchHaiti" | "FrenchLuxembourg" | "FrenchMali" | "FrenchMonaco" | "FrenchMorocco" | "FrenchReunion" | "FrenchSenegal" | "FrenchWestIndies" | "FrisianNetherlands" | "Fulfulde" | "GaelicIreland" | "GaelicScotland" | "Galician" | "Georgian" | "German" | "GermanAustria" | "GermanLiechtenstein" | "GermanLuxembourg" | "Greek" | "Guarani" | "Gujarati" | "Hausa" | "Hawaiian" | "Hebrew" | "Hindi" | "Hungarian" | "Ibibio" | "Icelandic" | "Igbo" | "Indonesian" | "Inuktitut" | "Italian" | "Japanese" | "Kannada" | "Kanuri" | "Kashmiri" | "Kazakh" | "Khmer" | "Kirghiz" | "Konkani" | "Korean" | "Kyrgyz" | "LanguageNone" | "Lao" | "Latin" | "Latvian" | "Lithuanian" | "MacedonianFYROM" | "Malayalam" | "MalayBruneiDarussalam" | "Malaysian" | "Maltese" | "Manipuri" | "Marathi" | "MexicanSpanish" | "Mongolian" | "Nepali" | "NoProofing" | "NorwegianBokmol" | "NorwegianNynorsk" | "Oriya" | "Oromo" | "Pashto" | "Persian" | "Polish" | "Portuguese" | "PortugueseBrazil" | "Punjabi" | "RhaetoRomanic" | "Romanian" | "RomanianMoldova" | "Russian" | "RussianMoldova" | "SamiLappish" | "Sanskrit" | "SerbianCyrillic" | "SerbianLatin" | "Sesotho" | "SimplifiedChinese" | "Sindhi" | "SindhiPakistan" | "Sinhalese" | "Slovak" | "Slovenian" | "Somali" | "Sorbian" | "Spanish" | "SpanishArgentina" | "SpanishBolivia" | "SpanishChile" | "SpanishColombia" | "SpanishCostaRica" | "SpanishDominicanRepublic" | "SpanishEcuador" | "SpanishElSalvador" | "SpanishGuatemala" | "SpanishHonduras" | "SpanishModernSort" | "SpanishNicaragua" | "SpanishPanama" | "SpanishParaguay" | "SpanishPeru" | "SpanishPuertoRico" | "SpanishUruguay" | "SpanishVenezuela" | "Sutu" | "Swahili" | "Swedish" | "SwedishFinland" | "SwissFrench" | "SwissGerman" | "SwissItalian" | "Syriac" | "Tajik" | "Tamazight" | "TamazightLatin" | "Tamil" | "Tatar" | "Telugu" | "Thai" | "Tibetan" | "TigrignaEritrea" | "TigrignaEthiopic" | "TraditionalChinese" | "Tsonga" | "Tswana" | "Turkish" | "Turkmen" | "Ukrainian" | "Urdu" | "UzbekCyrillic" | "UzbekLatin" | "Venda" | "Vietnamese" | "Welsh" | "Xhosa" | "Yi" | "Yiddish" | "Yoruba" | "Zulu";
            /**
             * Gets the number of columns for each page of the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            numberOfColumns?: number;
            /**
             * Specifies if page numbers are aligned with the right margin in the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightAlignPageNumbers?: boolean;
            /**
             * Gets if the index contains separate headings for accented letters (for example, words that begin with "À" are under
                        one heading and words that begin with "A" are under another).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            separateAccentedLetterHeadings?: boolean;
            /**
             * Specifies the sorting criteria for the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sortBy?: Word.IndexSortBy | "Stroke" | "Syllable";
            /**
             * Specifies the leader character between entries in the index and their associated page numbers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: Word.TabLeader | "Spaces" | "Dots" | "Dashes" | "Lines" | "Heavy" | "MiddleDot";
            /**
             * Gets the index type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: Word.IndexType | "Indent" | "Runin";
        }
        /** An interface describing the data returned by calling `indexCollection.toJSON()`. */
        export interface IndexCollectionData {
            items?: Word.Interfaces.IndexData[];
        }
        /** An interface describing the data returned by calling `listTemplateCollection.toJSON()`. */
        export interface ListTemplateCollectionData {
            items?: Word.Interfaces.ListTemplateData[];
        }
        /** An interface describing the data returned by calling `listTemplateGallery.toJSON()`. */
        export interface ListTemplateGalleryData {
        }
        /** An interface describing the data returned by calling `listTemplateGalleryCollection.toJSON()`. */
        export interface ListTemplateGalleryCollectionData {
            items?: Word.Interfaces.ListTemplateGalleryData[];
        }
        /**
         * Represents a user with permissions to edit authorized portions of a protected (read-only) Word document. To learn more, see {@link https://support.microsoft.com/office/187ed01c-8795-43e1-9fd0-c9fca419dadf | Allow changes to parts of a protected Word document}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface EditorLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `Range` object that represents the next range that the editor has permissions to modify.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            nextRange?: Word.Interfaces.RangeLoadOptions;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `Editor` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Gets the identifier for the `Editor` object when the parent document is saved as a webpage.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: boolean;
            /**
             * Gets the name of the editor.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
        }
        /**
         * Represents the coauthoring conflicts in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ConflictCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets a `Range` object that represents the portion of the document that's contained in the `Conflict` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the `RevisionType` for the `Conflict` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Represents a coauthoring conflict in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ConflictLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `Conflict` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Gets the `RevisionType` for the `Conflict` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Represents an annotation wrapper around critique displayed in the document.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        export interface CritiqueAnnotationLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the range of text that is annotated.
            *
            * @remarks
            * [Api set: WordApi 1.7]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Gets the critique that was passed when the annotation was inserted.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            critique?: boolean;
        }
        /**
         * Represents an annotation attached to a paragraph.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        export interface AnnotationLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the `CritiqueAnnotation` object.
            *
            * @remarks
            * [Api set: WordApi 1.7]
            */
            critiqueAnnotation?: Word.Interfaces.CritiqueAnnotationLoadOptions;
            /**
             * Gets the unique identifier, which is meant to be used for easier tracking of `Annotation` objects.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            id?: boolean;
            /**
             * Gets the state of the annotation.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            state?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Annotation} objects.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        export interface AnnotationCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the `CritiqueAnnotation` object.
            *
            * @remarks
            * [Api set: WordApi 1.7]
            */
            critiqueAnnotation?: Word.Interfaces.CritiqueAnnotationLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the unique identifier, which is meant to be used for easier tracking of `Annotation` objects.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the state of the annotation.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            state?: boolean;
        }
        /**
         * Represents the `Application` object.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface ApplicationLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `Bibliography` object that represents the bibliography reference sources stored in Microsoft Word.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            bibliography?: Word.Interfaces.BibliographyLoadOptions;
            /**
             * Specifies if Microsoft Word automatically detects the language you are using as you type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            checkLanguage?: boolean;
            /**
             * Gets a `LanguageId` value that represents the language selected for the Microsoft Word user interface.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            language?: boolean;
        }
        /**
         * Represents the body of a document or a section.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface BodyLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the text format of the body. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Gets the parent body of the body. For example, a table cell body's parent body could be a header. Throws an `ItemNotFound` error if there isn't a parent body.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the parent body of the body. For example, a table cell body's parent body could be a header. If there isn't a parent body, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBodyOrNullObject?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the content control that contains the body. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the content control that contains the body. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the parent section of the body. Throws an `ItemNotFound` error if there isn't a parent section.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentSection?: Word.Interfaces.SectionLoadOptions;
            /**
            * Gets the parent section of the body. If there isn't a parent section, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentSectionOrNullObject?: Word.Interfaces.SectionLoadOptions;
            /**
             * Specifies the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: boolean;
            /**
             * Specifies the built-in style name for the body. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * Gets the text of the body. Use the insertText method to insert text.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: boolean;
            /**
             * Gets the type of the body. The type can be `mainDoc`, `section`, `header`, `footer`, or `tableCell`. Additional types `footnote`, `endnote`, and `noteItem` are supported in WordApi 1.5 and later.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            type?: boolean;
        }
        /**
         * Represents the `Border` object for text, a paragraph, or a table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        export interface BorderLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the color for the border. Color is specified in ‘#RRGGBB’ format or by using the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            color?: boolean;
            /**
             * Gets the location of the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            location?: boolean;
            /**
             * Specifies the border type for the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            type?: boolean;
            /**
             * Specifies whether the border is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            visible?: boolean;
            /**
             * Specifies the width for the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            width?: boolean;
        }
        /**
         * Represents the `BorderUniversal` object, which manages borders for a range, paragraph, table, or frame.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BorderUniversalLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the graphical page-border design for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            artStyle?: boolean;
            /**
             * Specifies the width (in points) of the graphical page border specified in the `artStyle` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            artWidth?: boolean;
            /**
             * Specifies the color for the `BorderUniversal` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: boolean;
            /**
             * Specifies the color for the `BorderUniversal` or {@link Word.Font} object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndex?: boolean;
            /**
             * Returns `true` if an inside border can be applied to the specified object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            inside?: boolean;
            /**
             * Specifies whether the border is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the line style of the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lineStyle?: boolean;
            /**
             * Specifies the line width of an object's border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lineWidth?: boolean;
        }
        /**
         * Represents the collection of border styles.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        export interface BorderCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the color for the border. Color is specified in ‘#RRGGBB’ format or by using the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            color?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the location of the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            location?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the border type for the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            type?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the border is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            visible?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width for the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            width?: boolean;
        }
        /**
         * Represents the collection of {@link Word.BorderUniversal} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BorderUniversalCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the graphical page-border design for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            artStyle?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width (in points) of the graphical page border specified in the `artStyle` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            artWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the color for the `BorderUniversal` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the color for the `BorderUniversal` or {@link Word.Font} object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndex?: boolean;
            /**
             * For EACH ITEM in the collection: Returns `true` if an inside border can be applied to the specified object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            inside?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the border is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the line style of the border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lineStyle?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the line width of an object's border.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lineWidth?: boolean;
        }
        /**
         * Represents a break in a Word document. This could be a page, column, or section break.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BreakLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `Range` object that represents the portion of the document that's contained in the break.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Returns the page number on which the break occurs.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageIndex?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Break} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BreakCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Returns a `Range` object that represents the portion of the document that's contained in the break.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Returns the page number on which the break occurs.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageIndex?: boolean;
        }
        /**
         * Represents a building block in a template. A building block is pre-built content, similar to autotext, that may contain text, images, and formatting.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BuildingBlockLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `BuildingBlockCategory` object that represents the category for the building block.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            category?: Word.Interfaces.BuildingBlockCategoryLoadOptions;
            /**
            * Returns a `BuildingBlockTypeItem` object that represents the type for the building block.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            type?: Word.Interfaces.BuildingBlockTypeItemLoadOptions;
            /**
             * Specifies the description for the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            description?: boolean;
            /**
             * Returns the internal identification number for the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: boolean;
            /**
             * Returns the position of this building block in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            index?: boolean;
            /**
             * Specifies a `DocPartInsertType` value that represents how to insert the contents of the building block into the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            insertType?: boolean;
            /**
             * Specifies the name of the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: boolean;
            /**
             * Specifies the contents of the building block.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            value?: boolean;
        }
        /**
         * Represents a category of building blocks in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BuildingBlockCategoryLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `BuildingBlockTypeItem` object that represents the type of building block for the building block category.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            type?: Word.Interfaces.BuildingBlockTypeItemLoadOptions;
            /**
             * Returns the position of the `BuildingBlockCategory` object in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            index?: boolean;
            /**
             * Returns the name of the `BuildingBlockCategory` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: boolean;
        }
        /**
         * Represents a type of building block in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BuildingBlockTypeItemLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Returns the position of an item in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            index?: boolean;
            /**
             * Returns the localized name of a building block type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: boolean;
        }
        /**
         * The data specific to content controls of type CheckBox.
         *
         * @remarks
         * [Api set: WordApi 1.7]
         */
        export interface CheckboxContentControlLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the current state of the checkbox.
             *
             * @remarks
             * [Api set: WordApi 1.7]
             */
            isChecked?: boolean;
        }
        /**
         * Represents a coauthoring lock in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface CoauthoringLockLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the owner of the lock.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            owner?: Word.Interfaces.CoauthorLoadOptions;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringLock` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Gets a `CoauthoringLockType` value that represents the lock type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Represents a collection of coauthoring locks in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface CoauthoringLockCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the owner of the lock.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            owner?: Word.Interfaces.CoauthorLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringLock` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets a `CoauthoringLockType` value that represents the lock type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Represents a coauthor in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface CoauthorLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the email address of the coauthor.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            emailAddress?: boolean;
            /**
             * Gets the unique identifier for the `Coauthor` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: boolean;
            /**
             * Gets whether this author represents the current user.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMe?: boolean;
            /**
             * Gets the display name of the coauthor.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Coauthor} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface CoauthorCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the email address of the coauthor.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            emailAddress?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the unique identifier for the `Coauthor` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether this author represents the current user.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMe?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the display name of the coauthor.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
        }
        /**
         * Represents the `Coauthoring` object. This tracks the updates, changes, conflicts, and other interactions in the document done through coauthoring.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface CoauthoringLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `Coauthor` object that represents the current user.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            me?: Word.Interfaces.CoauthorLoadOptions;
            /**
             * Gets whether this document can be coauthored.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            canCoauthor?: boolean;
            /**
             * Gets whether the document can be automatically merged.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            canMerge?: boolean;
            /**
             * Gets whether the document has pending updates that have not been accepted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pendingUpdates?: boolean;
        }
        /**
         * Represents a coauthoring update in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface CoauthoringUpdateLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringUpdate` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
        }
        /**
         * Contains a collection of {@link Word.CoauthoringUpdate} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface CoauthoringUpdateCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets a `Range` object that represents the portion of the document that's contained in the `CoauthoringUpdate` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
        }
        /**
         * Represents a comment in the document.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface CommentLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Specifies the comment's content range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            contentRange?: Word.Interfaces.CommentContentRangeLoadOptions;
            /**
             * Gets the email of the comment's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorEmail?: boolean;
            /**
             * Gets the name of the comment's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorName?: boolean;
            /**
             * Specifies the comment's content as plain text.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            content?: boolean;
            /**
             * Gets the creation date of the comment.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            creationDate?: boolean;
            /**
             * Gets the ID of the comment.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: boolean;
            /**
             * Specifies the comment thread's status. Setting to `true` resolves the comment thread. Getting a value of `true` means that the comment thread is resolved.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            resolved?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Comment} objects.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface CommentCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Specifies the comment's content range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            contentRange?: Word.Interfaces.CommentContentRangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the email of the comment's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorEmail?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the name of the comment's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorName?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the comment's content as plain text.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            content?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the creation date of the comment.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            creationDate?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the ID of the comment.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the comment thread's status. Setting to `true` resolves the comment thread. Getting a value of `true` means that the comment thread is resolved.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            resolved?: boolean;
        }
        /**
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface CommentContentRangeLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies a value that indicates whether the comment text is bold.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            bold?: boolean;
            /**
             * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            hyperlink?: boolean;
            /**
             * Checks whether the range length is zero.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            isEmpty?: boolean;
            /**
             * Specifies a value that indicates whether the comment text is italicized.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            italic?: boolean;
            /**
             * Specifies a value that indicates whether the comment text has a strikethrough.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            strikeThrough?: boolean;
            /**
             * Gets the text of the comment range.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            text?: boolean;
            /**
             * Specifies a value that indicates the comment text's underline type. `none` if the comment text isn't underlined.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            underline?: boolean;
        }
        /**
         * Represents a comment reply in the document.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface CommentReplyLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Specifies the commentReply's content range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            contentRange?: Word.Interfaces.CommentContentRangeLoadOptions;
            /**
            * Gets the parent comment of this reply.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentComment?: Word.Interfaces.CommentLoadOptions;
            /**
             * Gets the email of the comment reply's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorEmail?: boolean;
            /**
             * Gets the name of the comment reply's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorName?: boolean;
            /**
             * Specifies the comment reply's content. The string is plain text.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            content?: boolean;
            /**
             * Gets the creation date of the comment reply.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            creationDate?: boolean;
            /**
             * Gets the ID of the comment reply.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: boolean;
        }
        /**
         * Contains a collection of {@link Word.CommentReply} objects. Represents all comment replies in one comment thread.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface CommentReplyCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Specifies the commentReply's content range.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            contentRange?: Word.Interfaces.CommentContentRangeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent comment of this reply.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentComment?: Word.Interfaces.CommentLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the email of the comment reply's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorEmail?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the name of the comment reply's author.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            authorName?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the comment reply's content. The string is plain text.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            content?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the creation date of the comment reply.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            creationDate?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the ID of the comment reply.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: boolean;
        }
        /**
         * Represents special formatting applied to specified areas of a table when the selected table is formatted with a specified table style.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ConditionalStyleLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `Font` object that represents the font formatting for the conditional style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Returns a `ParagraphFormat` object that represents the paragraph formatting for the conditional style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            paragraphFormat?: Word.Interfaces.ParagraphFormatLoadOptions;
            /**
            * Returns a `ShadingUniversal` object that represents the shading of the conditional style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Specifies the amount of space (in points) to add below the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bottomPadding?: boolean;
            /**
             * Specifies the amount of space (in points) to add to the left of the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftPadding?: boolean;
            /**
             * Specifies the amount of space (in points) to add to the right of the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightPadding?: boolean;
            /**
             * Specifies the amount of space (in points) to add above the contents of a single cell or all the cells in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            topPadding?: boolean;
        }
        /**
         * Represents the XML mapping on a {@link Word.ContentControl} object between custom XML and that content control. An XML mapping is a link between the text in a content control and an XML element in the custom XML data store for this document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface XmlMappingLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `CustomXmlNode` object that represents the custom XML node in the data store that the content control in the document maps to.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            customXmlNode?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * Returns a `CustomXmlPart` object that represents the custom XML part to which the content control in the document maps.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            customXmlPart?: Word.Interfaces.CustomXmlPartLoadOptions;
            /**
             * Returns whether the content control in the document is mapped to an XML node in the document's XML data store.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isMapped?: boolean;
            /**
             * Returns the prefix mappings used to evaluate the XPath for the current XML mapping.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            prefixMappings?: boolean;
            /**
             * Returns the XPath for the XML mapping, which evaluates to the currently mapped XML node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xpath?: boolean;
        }
        /**
         * Represents a collection of {@link Word.CustomXmlPrefixMapping} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface CustomXmlPrefixMappingCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the unique address identifier for the namespace of the `CustomXmlPrefixMapping` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the prefix for the `CustomXmlPrefixMapping` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            prefix?: boolean;
        }
        /**
         * Represents a `CustomXmlPrefixMapping` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface CustomXmlPrefixMappingLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the unique address identifier for the namespace of the `CustomXmlPrefixMapping` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: boolean;
            /**
             * Gets the prefix for the `CustomXmlPrefixMapping` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            prefix?: boolean;
        }
        /**
         * Represents a schema in a {@link Word.CustomXmlSchemaCollection} object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface CustomXmlSchemaLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the location of the schema on a computer.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            location?: boolean;
            /**
             * Gets the unique address identifier for the namespace of the `CustomXmlSchema` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: boolean;
        }
        /**
         * Represents a collection of {@link Word.CustomXmlSchema} objects attached to a data stream.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface CustomXmlSchemaCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the location of the schema on a computer.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            location?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the unique address identifier for the namespace of the `CustomXmlSchema` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: boolean;
        }
        /**
         * Contains a collection of {@link Word.CustomXmlNode} objects representing the XML nodes in a document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface CustomXmlNodeCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets a `CustomXmlNode` object corresponding to the first child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            firstChild?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets a `CustomXmlNode` object corresponding to the last child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            lastChild?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the next sibling node (element, comment, or processing instruction) of the current node. If the node is the last sibling at its level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            nextSibling?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the object representing the part associated with this node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            ownerPart?: Word.Interfaces.CustomXmlPartLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent element node of the current node. If the current node is at the root level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            parentNode?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the previous sibling node (element, comment, or processing instruction) of the current node. If the current node is the first sibling at its level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            previousSibling?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the base name of the node without the namespace prefix, if one exists.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            baseName?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the unique address identifier for the namespace of the node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the type of the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nodeType?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the value of the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nodeValue?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the text for the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            text?: boolean;
            /**
             * For EACH ITEM in the collection: Gets a string with the canonicalized XPath for the current node. If the node is no longer in the Document Object Model (DOM), the property returns an error message.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xpath?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the XML representation of the current node and its children.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: boolean;
        }
        /**
         * Represents an XML node in a tree in the document. The `CustomXmlNode` object is a member of the {@link Word.CustomXmlNodeCollection} object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface CustomXmlNodeLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `CustomXmlNode` object corresponding to the first child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            firstChild?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * Gets a `CustomXmlNode` object corresponding to the last child element of the current node. If the node has no child elements (or if it isn't of type {@link Word.CustomXmlNodeType | CustomXmlNodeType.element}), the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            lastChild?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * Gets the next sibling node (element, comment, or processing instruction) of the current node. If the node is the last sibling at its level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            nextSibling?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * Gets the object representing the part associated with this node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            ownerPart?: Word.Interfaces.CustomXmlPartLoadOptions;
            /**
            * Gets the parent element node of the current node. If the current node is at the root level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            parentNode?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
            * Gets the previous sibling node (element, comment, or processing instruction) of the current node. If the current node is the first sibling at its level, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            previousSibling?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
             * Gets the base name of the node without the namespace prefix, if one exists.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            baseName?: boolean;
            /**
             * Gets the unique address identifier for the namespace of the node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            namespaceUri?: boolean;
            /**
             * Gets the type of the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nodeType?: boolean;
            /**
             * Specifies the value of the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nodeValue?: boolean;
            /**
             * Specifies the text for the current node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            text?: boolean;
            /**
             * Gets a string with the canonicalized XPath for the current node. If the node is no longer in the Document Object Model (DOM), the property returns an error message.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xpath?: boolean;
            /**
             * Gets the XML representation of the current node and its children.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: boolean;
        }
        /**
         * Represents a content control. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain contents such as images, tables, or paragraphs of formatted text. Currently, only rich text, plain text, checkbox, dropdown list, and combo box content controls are supported.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface ContentControlLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the building block gallery-related data if the content control's {@link Word.ContentControlType} is `buildingBlockGallery`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            buildingBlockGalleryContentControl?: Word.Interfaces.BuildingBlockGalleryContentControlLoadOptions;
            /**
            * Gets the data of the content control when its type is `checkBox`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApi 1.7]
            */
            checkboxContentControl?: Word.Interfaces.CheckboxContentControlLoadOptions;
            /**
            * Gets the date picker-related data if the content control's {@link Word.ContentControlType} is `datePicker`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            datePickerContentControl?: Word.Interfaces.DatePickerContentControlLoadOptions;
            /**
            * Gets the text format of the content control. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Gets the group-related data if the content control's {@link Word.ContentControlType} is `group`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            groupContentControl?: Word.Interfaces.GroupContentControlLoadOptions;
            /**
            * Gets the parent body of the content control.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the content control that contains the content control. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the content control that contains the content control. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the table that contains the content control. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * Gets the table cell that contains the content control. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table cell that contains the content control. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table that contains the content control. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * Gets the picture-related data if the content control's {@link Word.ContentControlType} is `picture`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pictureContentControl?: Word.Interfaces.PictureContentControlLoadOptions;
            /**
            * Gets the repeating section-related data if the content control's {@link Word.ContentControlType} is `repeatingSection`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            repeatingSectionContentControl?: Word.Interfaces.RepeatingSectionContentControlLoadOptions;
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingLoadOptions;
            /**
             * Specifies the appearance of the content control. The value can be `boundingBox`, `tags`, or `hidden`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            appearance?: boolean;
            /**
             * Specifies a value that indicates whether the user can delete the content control. Mutually exclusive with `removeWhenEdited`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            cannotDelete?: boolean;
            /**
             * Specifies a value that indicates whether the user can edit the contents of the content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            cannotEdit?: boolean;
            /**
             * Specifies the color of the content control. Color is specified in '#RRGGBB' format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            color?: boolean;
            /**
             * Gets an integer that represents the content control identifier.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            id?: boolean;
            /**
             * Specifies the placeholder text of the content control. Dimmed text will be displayed when the content control is empty.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            placeholderText?: boolean;
            /**
             * Specifies a value that indicates whether the content control is removed after it's edited. Mutually exclusive with `cannotDelete`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            removeWhenEdited?: boolean;
            /**
             * Specifies the style name for the content control. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the `styleBuiltIn` property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: boolean;
            /**
             * Specifies the built-in style name for the content control. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the `style` property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * Gets the content control subtype. The subtype can be `richTextInline`, `richTextParagraphs`, `richTextTableCell`, `richTextTableRow` and `richTextTable` for rich text content controls, `plainTextInline` and `plainTextParagraph` for plain text content controls, `checkBox` for checkbox content controls, `dropDownList` for dropdown list content controls, `comboBox` for combo box content controls, `buildingBlockGallery` for building block gallery content controls, `datePicker` for date picker content controls, `repeatingSection` for repeating section content controls, `picture` for picture content controls, and `group` for group content controls.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            subtype?: boolean;
            /**
             * Specifies a tag to identify a content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            tag?: boolean;
            /**
             * Gets the text of the content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: boolean;
            /**
             * Specifies the title for a content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            title?: boolean;
            /**
             * Gets the content control type. Only rich text, plain text, check box, dropdown list, combo box, building block gallery, date picker, repeating section, picture, and group content controls are supported currently.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            type?: boolean;
        }
        /**
         * Contains a collection of {@link Word.ContentControl} objects. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain contents such as images, tables, or paragraphs of formatted text. Currently, only rich text, plain text, checkbox, dropdown list, and combo box content controls are supported.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface ContentControlCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the building block gallery-related data if the content control's {@link Word.ContentControlType} is `buildingBlockGallery`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            buildingBlockGalleryContentControl?: Word.Interfaces.BuildingBlockGalleryContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the data of the content control when its type is `checkBox`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApi 1.7]
            */
            checkboxContentControl?: Word.Interfaces.CheckboxContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the date picker-related data if the content control's {@link Word.ContentControlType} is `datePicker`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            datePickerContentControl?: Word.Interfaces.DatePickerContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the text format of the content control. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the group-related data if the content control's {@link Word.ContentControlType} is `group`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            groupContentControl?: Word.Interfaces.GroupContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent body of the content control.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the content control. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the content control. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the content control. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the content control. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the content control. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the content control. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the picture-related data if the content control's {@link Word.ContentControlType} is `picture`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pictureContentControl?: Word.Interfaces.PictureContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the repeating section-related data if the content control's {@link Word.ContentControlType} is `repeatingSection`. It's `null` otherwise.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            repeatingSectionContentControl?: Word.Interfaces.RepeatingSectionContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the appearance of the content control. The value can be `boundingBox`, `tags`, or `hidden`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            appearance?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a value that indicates whether the user can delete the content control. Mutually exclusive with `removeWhenEdited`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            cannotDelete?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a value that indicates whether the user can edit the contents of the content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            cannotEdit?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the color of the content control. Color is specified in '#RRGGBB' format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            color?: boolean;
            /**
             * For EACH ITEM in the collection: Gets an integer that represents the content control identifier.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the placeholder text of the content control. Dimmed text will be displayed when the content control is empty.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            placeholderText?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a value that indicates whether the content control is removed after it's edited. Mutually exclusive with `cannotDelete`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            removeWhenEdited?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the style name for the content control. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the `styleBuiltIn` property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the built-in style name for the content control. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the `style` property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the content control subtype. The subtype can be `richTextInline`, `richTextParagraphs`, `richTextTableCell`, `richTextTableRow` and `richTextTable` for rich text content controls, `plainTextInline` and `plainTextParagraph` for plain text content controls, `checkBox` for checkbox content controls, `dropDownList` for dropdown list content controls, `comboBox` for combo box content controls, `buildingBlockGallery` for building block gallery content controls, `datePicker` for date picker content controls, `repeatingSection` for repeating section content controls, `picture` for picture content controls, and `group` for group content controls.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            subtype?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a tag to identify a content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            tag?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the text of the content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the title for a content control.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            title?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the content control type. Only rich text, plain text, check box, dropdown list, combo box, building block gallery, date picker, repeating section, picture, and group content controls are supported currently.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            type?: boolean;
        }
        /**
         * Represents a list item in a dropdown list or combo box content control.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        export interface ContentControlListItemLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the display text of a list item for a dropdown list or combo box content control.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            displayText?: boolean;
            /**
             * Specifies the index location of a content control list item in the collection of list items.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            index?: boolean;
            /**
             * Specifies the programmatic value of a list item for a dropdown list or combo box content control.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            value?: boolean;
        }
        /**
         * Contains a collection of {@link Word.ContentControlListItem} objects that represent the items in a dropdown list or combo box content control.
         *
         * @remarks
         * [Api set: WordApi 1.9]
         */
        export interface ContentControlListItemCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the display text of a list item for a dropdown list or combo box content control.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            displayText?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the index location of a content control list item in the collection of list items.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            index?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the programmatic value of a list item for a dropdown list or combo box content control.
             *
             * @remarks
             * [Api set: WordApi 1.9]
             */
            value?: boolean;
        }
        /**
         * Represents a custom property.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface CustomPropertyLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the key of the custom property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            key?: boolean;
            /**
             * Gets the value type of the custom property. Possible values are: String, Number, Date, Boolean.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            type?: boolean;
            /**
             * Specifies the value of the custom property. Note that even though Word on the web and the docx file format allow these properties to be arbitrarily long, the desktop version of Word will truncate string values to 255 16-bit chars (possibly creating invalid unicode by breaking up a surrogate pair).
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            value?: boolean;
        }
        /**
         * Contains the collection of {@link Word.CustomProperty} objects.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface CustomPropertyCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the key of the custom property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            key?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the value type of the custom property. Possible values are: String, Number, Date, Boolean.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            type?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the value of the custom property. Note that even though Word on the web and the docx file format allow these properties to be arbitrarily long, the desktop version of Word will truncate string values to 255 16-bit chars (possibly creating invalid unicode by breaking up a surrogate pair).
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            value?: boolean;
        }
        /**
         * Represents a custom XML part.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface CustomXmlPartLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the root element of a bound region of data in the document. If the region is empty, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            documentElement?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
             * Gets a value that indicates whether the `CustomXmlPart` is built-in.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            builtIn?: boolean;
            /**
             * Gets the ID of the custom XML part.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: boolean;
            /**
             * Gets the namespace URI of the custom XML part.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            namespaceUri?: boolean;
            /**
             * Gets the XML representation of the current `CustomXmlPart` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: boolean;
        }
        /**
         * Contains the collection of {@link Word.CustomXmlPart} objects.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface CustomXmlPartCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the root element of a bound region of data in the document. If the region is empty, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            documentElement?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets a value that indicates whether the `CustomXmlPart` is built-in.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            builtIn?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the ID of the custom XML part.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the namespace URI of the custom XML part.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            namespaceUri?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the XML representation of the current `CustomXmlPart` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: boolean;
        }
        /**
         * Contains the collection of {@link Word.CustomXmlPart} objects with a specific namespace.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface CustomXmlPartScopedCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the root element of a bound region of data in the document. If the region is empty, the property returns `Nothing`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            documentElement?: Word.Interfaces.CustomXmlNodeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets a value that indicates whether the `CustomXmlPart` is built-in.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            builtIn?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the ID of the custom XML part.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the namespace URI of the custom XML part.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            namespaceUri?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the XML representation of the current `CustomXmlPart` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: boolean;
        }
        /**
         * The `Document` object is the top level object. A `Document` object contains one or more sections, content controls, and the body that contains the contents of the document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface DocumentLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the active window for the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            activeWindow?: Word.Interfaces.WindowLoadOptions;
            /**
            * Specifies a `Template` object that represents the template attached to the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            attachedTemplate?: Word.Interfaces.TemplateLoadOptions;
            /**
            * Gets a `Shape` object that represents the background image for the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            background?: Word.Interfaces.ShapeLoadOptions;
            /**
            * Returns a `Bibliography` object that represents the bibliography references contained within the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            bibliography?: Word.Interfaces.BibliographyLoadOptions;
            /**
            * Gets the `Body` object of the main document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets a `DocumentProperties` object that represents all the built-in document properties for the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            builtInDocumentProperties?: Word.Interfaces.DocumentPropertiesLoadOptions;
            /**
            * Gets a `Coauthoring` object for managing coauthoring in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            coauthoring?: Word.Interfaces.CoauthoringLoadOptions;
            /**
            * Gets a `Range` object that represents the main document story.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            content?: Word.Interfaces.RangeLoadOptions;
            /**
            * Gets a `DocumentProperties` collection that represents all the custom document properties for the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            customDocumentProperties?: Word.Interfaces.DocumentPropertiesLoadOptions;
            /**
            * Returns a `PageSetup` object that's associated with the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pageSetup?: Word.Interfaces.PageSetupLoadOptions;
            /**
            * Gets the properties of the document.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            properties?: Word.Interfaces.DocumentPropertiesLoadOptions;
            /**
            * Returns a `Selection` object that represents the current selection in the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            selection?: Word.Interfaces.SelectionLoadOptions;
            /**
            * Gets the `WebSettings` object for webpage-related attributes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            webSettings?: Word.Interfaces.WebSettingsLoadOptions;
            /**
             * Gets the name of the active theme and formatting options.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            activeTheme?: boolean;
            /**
             * Gets the display name of the active theme.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            activeThemeDisplayName?: boolean;
            /**
             * Gets whether Word encrypts file properties for password-protected documents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFilePropertiesPasswordEncrypted?: boolean;
            /**
             * Specifies whether grammatical errors are marked by a wavy green line in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areGrammaticalErrorsShown?: boolean;
            /**
             * Specifies whether to use the default math settings when creating new equations.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areMathDefaultsUsed?: boolean;
            /**
             * Specifies whether to disable features introduced after a specified version.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areNewerFeaturesDisabled?: boolean;
            /**
             * Specifies whether Microsoft Word underlines spelling errors in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areSpellingErrorsShown?: boolean;
            /**
             * Specifies whether the styles in this document are updated to match the styles in the attached template each time the document is opened.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areStylesUpdatedOnOpen?: boolean;
            /**
             * Specifies whether Microsoft Word embeds TrueType fonts in the document when it's saved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTrueTypeFontsEmbedded?: boolean;
            /**
             * Specifies if automatic hyphenation is turned on for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            autoHyphenation?: boolean;
            /**
             * Specifies if the edits in the document are automatically saved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            autoSaveOn?: boolean;
            /**
             * Specifies the ChangeTracking mode.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            changeTrackingMode?: boolean;
            /**
             * Gets the code name for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            codeName?: boolean;
            /**
             * Gets the compatibility mode that Word uses when opening the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            compatibilityMode?: boolean;
            /**
             * Specifies the maximum number of consecutive lines that can end with hyphens.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            consecutiveHyphensLimit?: boolean;
            /**
             * Gets a random number that Word assigns to changes in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            currentRsid?: boolean;
            /**
             * Specifies the interval (in points) between the default tab stops in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            defaultTabStop?: boolean;
            /**
             * Specifies the browser frame for displaying a webpage via hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            defaultTargetFrame?: boolean;
            /**
             * Specifies whether Word should not embed common system fonts.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            doNotEmbedSystemFonts?: boolean;
            /**
             * Specifies the name of the algorithm encryption provider that Microsoft Word uses when encrypting documents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            encryptionProvider?: boolean;
            /**
             * Specifies the East Asian language used for line breaking.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            farEastLineBreakLanguage?: boolean;
            /**
             * Specifies the line break control level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            farEastLineBreakLevel?: boolean;
            /**
             * Specifies whether Word shows the next heading level when the previous is used.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formattingIsNextLevelShown?: boolean;
            /**
             * Specifies whether to show user-defined styles.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formattingIsUserStyleNameShown?: boolean;
            /**
             * Gets the name of a document, including the path.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fullName?: boolean;
            /**
             * Specifies the horizontal space between invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridDistanceHorizontal?: boolean;
            /**
             * Specifies the vertical space between invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridDistanceVertical?: boolean;
            /**
             * Specifies whether the character grid starts from the upper-left corner of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridIsOriginFromMargin?: boolean;
            /**
             * Specifies the horizontal origin point for the invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridOriginHorizontal?: boolean;
            /**
             * Specifies the vertical origin point for the invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridOriginVertical?: boolean;
            /**
             * Specifies the interval for horizontal character gridlines in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridSpaceBetweenHorizontalLines?: boolean;
            /**
             * Specifies the interval for vertical character gridlines in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            gridSpaceBetweenVerticalLines?: boolean;
            /**
             * Gets whether a password is required to open the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasPassword?: boolean;
            /**
             * Gets whether the document has an attached Microsoft Visual Basic for Applications project.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasVbProject?: boolean;
            /**
             * Specifies whether words in all capital letters can be hyphenated.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hyphenateCaps?: boolean;
            /**
             * Specifies the width of the hyphenation zone, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hyphenationZone?: boolean;
            /**
             * Specifies whether automatic formatting options override formatting restrictions.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isAutoFormatOverrideOn?: boolean;
            /**
             * Specifies whether charts in the active document use cell-reference data-point tracking.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isChartDataPointTracked?: boolean;
            /**
             * Specifies whether the compatibility option specified by the `type` property is enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isCompatible?: boolean;
            /**
             * Specifies whether the document is final.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFinal?: boolean;
            /**
             * Specifies whether Microsoft Word saves a subset of the embedded TrueType fonts with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFontsSubsetSaved?: boolean;
            /**
             * Specifies whether Microsoft Word prints onto a preprinted form only the data entered in the corresponding online form.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormsDataPrinted?: boolean;
            /**
             * Specifies whether Microsoft Word saves the data entered in a form as a tab-delimited record for use in a database.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormsDataSaved?: boolean;
            /**
             * Specifies whether a grammar check has been run on the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isGrammarChecked?: boolean;
            /**
             * Gets whether the most recent firing of the `Application.DocumentBeforeSave` event was the result of an automatic save by the document or a manual save by the user.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInAutoSave?: boolean;
            /**
             * Gets whether the document is in form design mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInFormsDesign?: boolean;
            /**
             * Specifies whether Word kerns half-width Latin characters and punctuation marks.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isKerningByAlgorithm?: boolean;
            /**
             * Specifies whether to embed speech and handwriting data.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLinguisticDataEmbedded?: boolean;
            /**
             * Gets whether this document is a master document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMasterDocument?: boolean;
            /**
             * Specifies whether Word optimizes the document for Word 97.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isOptimizedForWord97?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/0250c02b-060f-4986-88a4-36cec2a9665f | PRINT field} instructions (such as PostScript commands) in the document are to be printed on top of text and graphics when a PostScript printer is used.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPostScriptPrintedOverText?: boolean;
            /**
             * Specifies whether users can change the Quick Style set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isQuickStyleSetLocked?: boolean;
            /**
             * Gets whether changes to the document cannot be saved to the original document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isReadOnly?: boolean;
            /**
             * Specifies whether Microsoft Word displays a message box whenever a user opens the document, suggesting that it be opened as read-only.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isReadOnlyRecommended?: boolean;
            /**
             * Specifies whether AutoShapes or East Asian characters are automatically aligned with an invisible grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSnappedToGrid?: boolean;
            /**
             * Specifies whether AutoShapes or East Asian characters align with invisible gridlines through other shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSnappedToShapes?: boolean;
            /**
             * Specifies whether spelling has been checked throughout the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSpellingChecked?: boolean;
            /**
             * Specifies whether formatting restrictions are enforced in a protected document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isStyleEnforced?: boolean;
            /**
             * Gets whether this document is a subdocument of a master document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSubdocument?: boolean;
            /**
             * Specifies whether users can change the document theme.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isThemeLocked?: boolean;
            /**
             * Specifies whether the document was created or opened by the user.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isUserControl?: boolean;
            /**
             * Gets whether the VBA project is digitally signed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVbaSigned?: boolean;
            /**
             * Gets whether the document is protected with a write password.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isWriteReserved?: boolean;
            /**
             * Specifies the character spacing adjustment.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            justificationMode?: boolean;
            /**
             * Specifies the format type that Microsoft Word uses when automatically formatting the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            kind?: boolean;
            /**
             * Specifies whether Microsoft Word has detected the language of the document text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageDetected?: boolean;
            /**
             * Specifies the kinsoku characters after which Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            noLineBreakAfter?: boolean;
            /**
             * Specifies the kinsoku characters before which Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            noLineBreakBefore?: boolean;
            /**
             * Gets the encoding used to open the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            openEncoding?: boolean;
            /**
             * Gets the title of the original document after legal-blackline comparison.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            originalDocumentTitle?: boolean;
            /**
             * Sets a password that must be supplied to open the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            password?: boolean;
            /**
             * Gets the algorithm used for password encryption.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            passwordEncryptionAlgorithm?: boolean;
            /**
             * Gets the key length used for password encryption.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            passwordEncryptionKeyLength?: boolean;
            /**
             * Gets the name of the password encryption provider.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            passwordEncryptionProvider?: boolean;
            /**
             * Gets the disk or the web path to the document (excludes the document name).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            path?: boolean;
            /**
             * Specifies whether revision marks are printed with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            printRevisions?: boolean;
            /**
             * Gets the protection type for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            protectionType?: boolean;
            /**
             * Specifies the width of pages in reading layout view when frozen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutSizeX?: boolean;
            /**
             * Specifies the height of pages in reading layout view when frozen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutSizeY?: boolean;
            /**
             * Specifies whether pages in reading layout view are frozen for handwritten markup.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingModeIsLayoutFrozen?: boolean;
            /**
             * Specifies whether Word removes user information upon saving.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            removePersonalInformationOnSave?: boolean;
            /**
             * Gets the title of the revised document after legal-blackline comparison.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisedDocumentTitle?: boolean;
            /**
             * Specifies the encoding used when saving the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            saveEncoding?: boolean;
            /**
             * Gets the file format of the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            saveFormat?: boolean;
            /**
             * Indicates whether the changes in the document have been saved. A value of `true` indicates that the document hasn't changed since it was saved.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            saved?: boolean;
            /**
             * Specifies the encoding for saving as encoded text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            textEncoding?: boolean;
            /**
             * Specifies how Word marks line and paragraph breaks in text files.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            textLineEnding?: boolean;
            /**
             * Specifies whether to track formatting changes when change tracking is on.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackFormatting?: boolean;
            /**
             * Specifies whether to mark moved text when Track Changes is on.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackMoves?: boolean;
            /**
             * Specifies whether changes are tracked in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackRevisions?: boolean;
            /**
             * Specifies whether to remove or store date and time metadata for tracked changes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            trackedChangesAreDateAndTimeRemoved?: boolean;
            /**
             * Gets the document type (template or document).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
            /**
             * Sets a password for saving changes to the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            writePassword?: boolean;
            /**
             * Specifies whether error messages are generated from built-in Word messages or MSXML (Microsoft XML).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlAreAdvancedErrorsShown?: boolean;
            /**
             * Specifies whether to save a document through an Extensible Stylesheet Language Transformation (XSLT).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlIsXsltUsedWhenSaving?: boolean;
            /**
             * Specifies the path and file name for the XSLT to apply when saving a document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            xmlSaveThroughXslt?: boolean;
        }
        /**
         * The `DocumentCreated` object is the top level object created by `Application.createDocument`. A `DocumentCreated` object is a special `Document` object.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface DocumentCreatedLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the `Body` object of the document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.3]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the properties of the document.
            *
            * @remarks
            * [Api set: WordApiHiddenDocument 1.3]
            */
            properties?: Word.Interfaces.DocumentPropertiesLoadOptions;
            /**
             * Indicates whether the changes in the document have been saved. A value of `true` indicates that the document hasn't changed since it was saved.
             *
             * @remarks
             * [Api set: WordApiHiddenDocument 1.3]
             */
            saved?: boolean;
        }
        /**
         * Represents document properties.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface DocumentPropertiesLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the application name of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            applicationName?: boolean;
            /**
             * Specifies the author of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            author?: boolean;
            /**
             * Specifies the category of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            category?: boolean;
            /**
             * Specifies the Comments field in the metadata of the document. These have no connection to comments by users made in the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            comments?: boolean;
            /**
             * Specifies the company of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            company?: boolean;
            /**
             * Gets the creation date of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            creationDate?: boolean;
            /**
             * Specifies the format of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            format?: boolean;
            /**
             * Specifies the keywords of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            keywords?: boolean;
            /**
             * Gets the last author of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            lastAuthor?: boolean;
            /**
             * Gets the last print date of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            lastPrintDate?: boolean;
            /**
             * Gets the last save time of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            lastSaveTime?: boolean;
            /**
             * Specifies the manager of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            manager?: boolean;
            /**
             * Gets the revision number of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            revisionNumber?: boolean;
            /**
             * Gets security settings of the document. Some are access restrictions on the file on disk. Others are Document Protection settings. Some possible values are 0 = File on disk is read/write; 1 = Protect Document: File is encrypted and requires a password to open; 2 = Protect Document: Always Open as Read-Only; 3 = Protect Document: Both #1 and #2; 4 = File on disk is read-only; 5 = Both #1 and #4; 6 = Both #2 and #4; 7 = All of #1, #2, and #4; 8 = Protect Document: Restrict Edit to read-only; 9 = Both #1 and #8; 10 = Both #2 and #8; 11 = All of #1, #2, and #8; 12 = Both #4 and #8; 13 = All of #1, #4, and #8; 14 = All of #2, #4, and #8; 15 = All of #1, #2, #4, and #8.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            security?: boolean;
            /**
             * Specifies the subject of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            subject?: boolean;
            /**
             * Gets the template of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            template?: boolean;
            /**
             * Specifies the title of the document.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            title?: boolean;
        }
        /**
         * Represents a field.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * Important: To learn more about which fields can be inserted, see the `Word.Range.insertField` API introduced in requirement set 1.5.
         * Support for managing fields is similar to what's available in the Word UI. However, the Word UI on the web primarily only supports fields as read-only (see {@link https://support.microsoft.com/office/d8f46094-13c3-4966-98c3-259748f3caf1 | Field codes in Word for the web}).
         * To learn more about Word UI clients that more fully support fields, see the product list at the beginning of {@link https://support.microsoft.com/office/c429bbb0-8669-48a7-bd24-bab6ba6b06bb | Insert, edit, and view fields in Word}.
         */
        export interface FieldLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `LinkFormat` object that represents the link options of the field.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            linkFormat?: Word.Interfaces.LinkFormatLoadOptions;
            /**
            * Gets an `OleFormat` object that represents the OLE characteristics (other than linking) for the field.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            oleFormat?: Word.Interfaces.OleFormatLoadOptions;
            /**
            * Gets the parent body of the field.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the content control that contains the field. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the content control that contains the field. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the table that contains the field. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * Gets the table cell that contains the field. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table cell that contains the field. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table that contains the field. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * Gets the field's result data.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            result?: Word.Interfaces.RangeLoadOptions;
            /**
             * Specifies the field's code instruction.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             *
             * Note: The ability to set the code was introduced in WordApi 1.5.
             */
            code?: boolean;
            /**
             * Specifies data in a field of `addin` type. If the field isn't an `addin` type, it's `null` and it will throw a general exception when code attempts to set it.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            data?: boolean;
            /**
             * Gets the field's kind.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            kind?: boolean;
            /**
             * Specifies whether the field is locked. `true` if the field is locked, `false` otherwise.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            locked?: boolean;
            /**
             * Specifies whether the field codes are displayed for the specified field. `true` if the field codes are displayed, `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            showCodes?: boolean;
            /**
             * Gets the field's type.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Field} objects.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         *
         * Important: To learn more about which fields can be inserted, see the `Word.Range.insertField` API introduced in requirement set 1.5.
         * Support for managing fields is similar to what's available in the Word UI. However, the Word UI on the web primarily only supports fields as read-only (see {@link https://support.microsoft.com/office/d8f46094-13c3-4966-98c3-259748f3caf1 | Field codes in Word for the web}).
         * To learn more about Word UI clients that more fully support fields, see the product list at the beginning of {@link https://support.microsoft.com/office/c429bbb0-8669-48a7-bd24-bab6ba6b06bb | Insert, edit, and view fields in Word}.
         */
        export interface FieldCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets a `LinkFormat` object that represents the link options of the field.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            linkFormat?: Word.Interfaces.LinkFormatLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets an `OleFormat` object that represents the OLE characteristics (other than linking) for the field.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            oleFormat?: Word.Interfaces.OleFormatLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent body of the field.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the field. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the field. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the field. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the field. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the field. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the field. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the field's result data.
            *
            * @remarks
            * [Api set: WordApi 1.4]
            */
            result?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the field's code instruction.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             *
             * Note: The ability to set the code was introduced in WordApi 1.5.
             */
            code?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies data in a field of `addin` type. If the field isn't an `addin` type, it's `null` and it will throw a general exception when code attempts to set it.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            data?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the field's kind.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            kind?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the field is locked. `true` if the field is locked, `false` otherwise.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            locked?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the field codes are displayed for the specified field. `true` if the field codes are displayed, `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            showCodes?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the field's type.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: boolean;
        }
        /**
         * Represents a font.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface FontLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `FillFormat` object that contains fill formatting properties for the font used by the range of text.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            fill?: Word.Interfaces.FillFormatLoadOptions;
            /**
            * Returns a `GlowFormat` object that represents the glow formatting for the font used by the range of text.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            glow?: Word.Interfaces.GlowFormatLoadOptions;
            /**
            * Returns a `LineFormat` object that specifies the formatting for a line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            line?: Word.Interfaces.LineFormatLoadOptions;
            /**
            * Returns a `ReflectionFormat` object that represents the reflection formatting for a shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            reflection?: Word.Interfaces.ReflectionFormatLoadOptions;
            /**
            * Returns a `ColorFormat` object that represents the color for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            textColor?: Word.Interfaces.ColorFormatLoadOptions;
            /**
            * Returns a `ShadowFormat` object that specifies the shadow formatting for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            textShadow?: Word.Interfaces.ShadowFormatLoadOptions;
            /**
            * Returns a `ThreeDimensionalFormat` object that contains 3-dimensional (3D) effect formatting properties for the font.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            threeDimensionalFormat?: Word.Interfaces.ThreeDimensionalFormatLoadOptions;
            /**
             * Specifies whether the font is formatted as all capital letters, which makes lowercase letters appear as uppercase letters. The possible values are as follows:
                        
                        - `true`: All the text has the **All Caps** attribute.
                        
                        - `false`: None of the text has the **All Caps** attribute.
                        
                        - `null`: Returned if some, but not all, of the text has the **All Caps** attribute.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            allCaps?: boolean;
            /**
             * Specifies whether the font is bold. `true` if the font is formatted as bold, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            bold?: boolean;
            /**
             * Specifies whether the font is formatted as bold in a right-to-left language document. The possible values are as follows:
                        
                        - `true`: All the text is bold.
                        
                        - `false`: None of the text is bold.
                        
                        - `null`: Returned if some, but not all, of the text is bold.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            boldBidirectional?: boolean;
            /**
             * Specifies the color for the font. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            color?: boolean;
            /**
             * Specifies a `ColorIndex` value that represents the color for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndex?: boolean;
            /**
             * Specifies the color for the `Font` object in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            colorIndexBidirectional?: boolean;
            /**
             * Specifies whether contextual alternates are enabled for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            contextualAlternates?: boolean;
            /**
             * Specifies the color to be used for diacritics for the `Font` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            diacriticColor?: boolean;
            /**
             * Specifies whether Microsoft Word ignores the number of characters per line for the corresponding `Font` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            disableCharacterSpaceGrid?: boolean;
            /**
             * Specifies whether the font has a double strikethrough. `true` if the font is formatted as double strikethrough text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            doubleStrikeThrough?: boolean;
            /**
             * Specifies whether the font is formatted as embossed. The possible values are as follows:
                        
                        - `true`: All the text is embossed.
                        
                        - `false`: None of the text is embossed.
                        
                        - `null`: Returned if some, but not all, of the text is embossed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emboss?: boolean;
            /**
             * Specifies an `EmphasisMark` value that represents the emphasis mark for a character or designated character string.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emphasisMark?: boolean;
            /**
             * Specifies whether the font is formatted as engraved. The possible values are as follows:
                        
                        - `true`: All the text is engraved.
                        
                        - `false`: None of the text is engraved.
                        
                        - `null`: Returned if some, but not all, of the text is engraved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            engrave?: boolean;
            /**
             * Specifies whether the font is tagged as hidden. `true` if the font is formatted as hidden text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            hidden?: boolean;
            /**
             * Specifies the highlight color. To set it, use a value either in the '#RRGGBB' format or the color name. To remove highlight color, set it to `null`. The returned highlight color can be in the '#RRGGBB' format, an empty string for mixed highlight colors, or `null` for no highlight color. Note: Only the default highlight colors are available in Office for Windows Desktop. These are "Yellow", "Lime", "Turquoise", "Pink", "Blue", "Red", "DarkBlue", "Teal", "Green", "Purple", "DarkRed", "Olive", "Gray", "LightGray", and "Black". When the add-in runs in Office for Windows Desktop, any other color is converted to the closest color when applied to the font.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            highlightColor?: boolean;
            /**
             * Specifies whether the font is italicized. `true` if the font is italicized, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            italic?: boolean;
            /**
             * Specifies whether the font is italicized in a right-to-left language document. The possible values are as follows:
                        
                        - `true`: All the text is italicized.
                        
                        - `false`: None of the text is italicized.
                        
                        - `null`: Returned if some, but not all, of the text is italicized.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            italicBidirectional?: boolean;
            /**
             * Specifies the minimum font size for which Microsoft Word will adjust kerning automatically.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            kerning?: boolean;
            /**
             * Specifies the ligature setting for the `Font` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            ligature?: boolean;
            /**
             * Specifies the name of the font.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            name?: boolean;
            /**
             * Specifies the font used for Latin text (characters with character codes from 0 (zero) through 127).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameAscii?: boolean;
            /**
             * Specifies the font name in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameBidirectional?: boolean;
            /**
             * Specifies the East Asian font name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameFarEast?: boolean;
            /**
             * Specifies the font used for characters with codes from 128 through 255.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nameOther?: boolean;
            /**
             * Specifies the number form setting for an OpenType font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            numberForm?: boolean;
            /**
             * Specifies the number spacing setting for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            numberSpacing?: boolean;
            /**
             * Specifies if the font is formatted as outlined. The possible values are as follows:
                        
                        - `true`: All the text is outlined.
                        
                        - `false`: None of the text is outlined.
                        
                        - `null`: Returned if some, but not all, of the text is outlined.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            outline?: boolean;
            /**
             * Specifies the position of text (in points) relative to the base line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            position?: boolean;
            /**
             * Specifies the scaling percentage applied to the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            scaling?: boolean;
            /**
             * Specifies if the font is formatted as shadowed. The possible values are as follows:
                        
                        - `true`: All the text is shadowed.
                        
                        - `false`: None of the text is shadowed.
                        
                        - `null`: Returned if some, but not all, of the text is shadowed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            shadow?: boolean;
            /**
             * Specifies the font size in points.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            size?: boolean;
            /**
             * Specifies the font size in points for right-to-left text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sizeBidirectional?: boolean;
            /**
             * Specifies whether the font is formatted as small caps, which makes lowercase letters appear as small uppercase letters. The possible values are as follows:
                        
                        - `true`: All the text has the **Small Caps** attribute.
                        
                        - `false`: None of the text has the **Small Caps** attribute.
                        
                        - `null`: Returned if some, but not all, of the text has the **Small Caps** attribute.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            smallCaps?: boolean;
            /**
             * Specifies the spacing between characters.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            spacing?: boolean;
            /**
             * Specifies whether the font has a strikethrough. `true` if the font is formatted as strikethrough text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            strikeThrough?: boolean;
            /**
             * Specifies the stylistic set for the font.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            stylisticSet?: boolean;
            /**
             * Specifies whether the font is a subscript. `true` if the font is formatted as subscript, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            subscript?: boolean;
            /**
             * Specifies whether the font is a superscript. `true` if the font is formatted as superscript, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            superscript?: boolean;
            /**
             * Specifies the font's underline type. `none` if the font isn't underlined.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            underline?: boolean;
            /**
             * Specifies the color of the underline for the `Font` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            underlineColor?: boolean;
        }
        /**
         * Represents a heading style used in a table of contents or table of figures.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface HeadingStyleLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the level for the heading style in a table of contents or table of figures. Must be a value from 1 to 9.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            level?: boolean;
            /**
             * Specifies the name of style for a heading.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
        }
        /**
         * Represents a collection of {@link Word.HeadingStyle} objects in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface HeadingStyleCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the level for the heading style in a table of contents or table of figures. Must be a value from 1 to 9.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            level?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the name of style for a heading.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
        }
        /**
         * Represents a hyperlink in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface HyperlinkLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `Range` object that represents the portion of the document that's contained within the hyperlink.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Specifies the address (for example, a file name or URL) of the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            address?: boolean;
            /**
             * Specifies the text string for the hyperlink's subject line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emailSubject?: boolean;
            /**
             * Returns `true` if extra information is required to resolve the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isExtraInfoRequired?: boolean;
            /**
             * Returns the name of the `Hyperlink` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: boolean;
            /**
             * Specifies the text that appears as a ScreenTip when the mouse pointer is positioned over the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            screenTip?: boolean;
            /**
             * Specifies a named location in the destination of the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            subAddress?: boolean;
            /**
             * Specifies the name of the frame or window in which to load the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            target?: boolean;
            /**
             * Specifies the hyperlink's visible text in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textToDisplay?: boolean;
            /**
             * Returns the hyperlink type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Hyperlink} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface HyperlinkCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Returns a `Range` object that represents the portion of the document that's contained within the hyperlink.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the address (for example, a file name or URL) of the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            address?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the text string for the hyperlink's subject line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            emailSubject?: boolean;
            /**
             * For EACH ITEM in the collection: Returns `true` if extra information is required to resolve the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isExtraInfoRequired?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the name of the `Hyperlink` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the text that appears as a ScreenTip when the mouse pointer is positioned over the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            screenTip?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a named location in the destination of the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            subAddress?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the name of the frame or window in which to load the hyperlink.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            target?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the hyperlink's visible text in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textToDisplay?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the hyperlink type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: boolean;
        }
        /**
         * Represents an inline picture.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface InlinePictureLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the parent paragraph that contains the inline image.
            *
            * @remarks
            * [Api set: WordApi 1.2]
            */
            paragraph?: Word.Interfaces.ParagraphLoadOptions;
            /**
            * Gets the content control that contains the inline image. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the content control that contains the inline image. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the table that contains the inline image. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * Gets the table cell that contains the inline image. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table cell that contains the inline image. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table that contains the inline image. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
             * Specifies a string that represents the alternative text associated with the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            altTextDescription?: boolean;
            /**
             * Specifies a string that contains the title for the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            altTextTitle?: boolean;
            /**
             * Specifies a number that describes the height of the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            height?: boolean;
            /**
             * Specifies a hyperlink on the image. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            hyperlink?: boolean;
            /**
             * Gets the format of the inline image.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            imageFormat?: boolean;
            /**
             * Specifies a value that indicates whether the inline image retains its original proportions when you resize it.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lockAspectRatio?: boolean;
            /**
             * Specifies a number that describes the width of the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            width?: boolean;
        }
        /**
         * Contains a collection of {@link Word.InlinePicture} objects.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface InlinePictureCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the parent paragraph that contains the inline image.
            *
            * @remarks
            * [Api set: WordApi 1.2]
            */
            paragraph?: Word.Interfaces.ParagraphLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the inline image. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the inline image. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the inline image. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the inline image. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the inline image. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the inline image. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies a string that represents the alternative text associated with the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            altTextDescription?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a string that contains the title for the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            altTextTitle?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a number that describes the height of the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            height?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a hyperlink on the image. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            hyperlink?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the format of the inline image.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            imageFormat?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a value that indicates whether the inline image retains its original proportions when you resize it.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lockAspectRatio?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a number that describes the width of the inline image.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            width?: boolean;
        }
        /**
         * Represents the linking characteristics for an OLE object or picture.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface LinkFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies if the link is updated automatically when the container file is opened or when the source file is changed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isAutoUpdated?: boolean;
            /**
             * Specifies if a `Field`, `InlineShape`, or `Shape` object is locked to prevent automatic updating.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLocked?: boolean;
            /**
             * Specifies if the linked picture is saved with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPictureSavedWithDocument?: boolean;
            /**
             * Specifies the path and name of the source file for the linked OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sourceFullName?: boolean;
            /**
             * Gets the name of the source file for the linked OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sourceName?: boolean;
            /**
             * Gets the path of the source file for the linked OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sourcePath?: boolean;
            /**
             * Gets the link type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Paragraph} objects.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface ListLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the list's ID.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            id?: boolean;
            /**
             * Checks whether each of the 9 levels exists in the list. `true` indicates the level exists, which means there's at least one list item at that level.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            levelExistences?: boolean;
            /**
             * Gets all 9 level types in the list. Each type can be `bullet`, `number`, or `picture`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            levelTypes?: boolean;
        }
        /**
         * Contains a collection of {@link Word.List} objects.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface ListCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the list's ID.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Checks whether each of the 9 levels exists in the list. `true` indicates the level exists, which means there's at least one list item at that level.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            levelExistences?: boolean;
            /**
             * For EACH ITEM in the collection: Gets all 9 level types in the list. Each type can be `bullet`, `number`, or `picture`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            levelTypes?: boolean;
        }
        /**
         * Represents the paragraph list item format.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface ListItemLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the level of the item in the list.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            level?: boolean;
            /**
             * Gets the list item bullet, number, or picture as a string.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            listString?: boolean;
            /**
             * Gets the list item order number in relation to its siblings.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            siblingIndex?: boolean;
        }
        /**
         * Represents a list level.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        export interface ListLevelLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `Font` object that represents the character formatting of the `ListLevel` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
             * Specifies the horizontal alignment of the list level. The value can be `left`, `centered`, or `right`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            alignment?: boolean;
            /**
             * Specifies the name of the style that's linked to the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            linkedStyle?: boolean;
            /**
             * Specifies the number format for the list level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberFormat?: boolean;
            /**
             * Specifies the position (in points) of the number or bullet for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberPosition?: boolean;
            /**
             * Specifies the number style for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberStyle?: boolean;
            /**
             * Specifies the list level that must appear before it restarts numbering at 1.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            resetOnHigher?: boolean;
            /**
             * Specifies the starting number for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            startAt?: boolean;
            /**
             * Specifies the tab position for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            tabPosition?: boolean;
            /**
             * Specifies the position (in points) for the second line of wrapping text for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            textPosition?: boolean;
            /**
             * Specifies the character inserted after the number for the list level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            trailingCharacter?: boolean;
        }
        /**
         * Contains a collection of {@link Word.ListLevel} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        export interface ListLevelCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets a `Font` object that represents the character formatting of the `ListLevel` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the horizontal alignment of the list level. The value can be `left`, `centered`, or `right`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            alignment?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the name of the style that's linked to the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            linkedStyle?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the number format for the list level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberFormat?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the position (in points) of the number or bullet for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberPosition?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the number style for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            numberStyle?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the list level that must appear before it restarts numbering at 1.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            resetOnHigher?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the starting number for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            startAt?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the tab position for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            tabPosition?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the position (in points) for the second line of wrapping text for the `ListLevel` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            textPosition?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the character inserted after the number for the list level.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            trailingCharacter?: boolean;
        }
        /**
         * Represents a list template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.1]
         */
        export interface ListTemplateLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the name of the list template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
            /**
             * Specifies whether the list template is outline numbered.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            outlineNumbered?: boolean;
        }
        /**
         * Represents a footnote or endnote.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        export interface NoteItemLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Represents the body object of the note item. It's the portion of the text within the footnote or endnote.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * Represents a footnote or endnote reference in the main document.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            reference?: Word.Interfaces.RangeLoadOptions;
            /**
             * Represents the note item type: footnote or endnote.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: boolean;
        }
        /**
         * Contains a collection of {@link Word.NoteItem} objects.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        export interface NoteItemCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Represents the body object of the note item. It's the portion of the text within the footnote or endnote.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Represents a footnote or endnote reference in the main document.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            reference?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Represents the note item type: footnote or endnote.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: boolean;
        }
        /**
         * Represents the OLE characteristics (other than linking) for an OLE object, ActiveX control, or field.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface OleFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the class type for the specified OLE object, picture, or field.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            classType?: boolean;
            /**
             * Specifies the icon that is used when the `displayAsIcon` property is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconIndex?: boolean;
            /**
             * Specifies the text displayed below the icon for the OLE object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconLabel?: boolean;
            /**
             * Specifies the program file in which the icon for the OLE object is stored.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconName?: boolean;
            /**
             * Gets the path of the file in which the icon for the OLE object is stored.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            iconPath?: boolean;
            /**
             * Gets whether the specified object is displayed as an icon.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDisplayedAsIcon?: boolean;
            /**
             * Specifies whether formatting done in Microsoft Word to the linked OLE object is preserved.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormattingPreservedOnUpdate?: boolean;
            /**
             * Gets a string that's used to identify the portion of the source file that's being linked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            label?: boolean;
            /**
             * Gets the programmatic identifier (`ProgId`) for the specified OLE object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            progId?: boolean;
        }
        /**
         * Represents a page in the document. `Page` objects manage the page layout and content.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface PageLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the height, in points, of the paper defined in the Page Setup dialog box.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            height?: boolean;
            /**
             * Gets the index of the page. The page index is 1-based and independent of the user's custom page numbering.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            index?: boolean;
            /**
             * Gets the width, in points, of the paper defined in the Page Setup dialog box.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            width?: boolean;
        }
        /**
         * Represents the collection of {@link Word.Page} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface PageCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the height, in points, of the paper defined in the Page Setup dialog box.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            height?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the index of the page. The page index is 1-based and independent of the user's custom page numbering.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            index?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the width, in points, of the paper defined in the Page Setup dialog box.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            width?: boolean;
        }
        /**
         * Represents a window pane. The `Pane` object is a member of the pane collection. The pane collection includes all the window panes for a single window.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface PaneLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `Selection` object that represents the current selection in the pane.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            selection?: Word.Interfaces.SelectionLoadOptions;
        }
        /**
         * Represents the collection of {@link Word.Pane} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface PaneCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Returns a `Selection` object that represents the current selection in the pane.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            selection?: Word.Interfaces.SelectionLoadOptions;
        }
        /**
         * Represents the window that displays the document. A window can be split to contain multiple reading panes.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface WindowLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the active pane in the window.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            activePane?: Word.Interfaces.PaneLoadOptions;
            /**
            * Gets the next document window in the collection of open document windows.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            next?: Word.Interfaces.WindowLoadOptions;
            /**
            * Gets the previous document window in the collection open document windows.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            previous?: Word.Interfaces.WindowLoadOptions;
            /**
            * Gets the `View` object that represents the view for the window.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            view?: Word.Interfaces.ViewLoadOptions;
            /**
             * Specifies whether rulers are displayed for the window or pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areRulersDisplayed?: boolean;
            /**
             * Specifies whether comments, footnotes, endnotes, and hyperlinks are displayed as tips.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areScreenTipsDisplayed?: boolean;
            /**
             * Specifies whether thumbnail images of the pages in a document are displayed along the left side of the Microsoft Word document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areThumbnailsDisplayed?: boolean;
            /**
             * Specifies the caption text for the window that is displayed in the title bar of the document or application window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            caption?: boolean;
            /**
             * Specifies the height of the window (in points).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            height?: boolean;
            /**
             * Specifies the horizontal scroll position as a percentage of the document width.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalPercentScrolled?: boolean;
            /**
             * Specifies the default start-up mode for the Japanese Input Method Editor (IME).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            imeMode?: boolean;
            /**
             * Gets the position of an item in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            index?: boolean;
            /**
             * Specifies whether the window is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isActive?: boolean;
            /**
             * Specifies whether the document map is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDocumentMapVisible?: boolean;
            /**
             * Specifies whether the email message header is visible in the document window. The default value is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEnvelopeVisible?: boolean;
            /**
             * Specifies whether a horizontal scroll bar is displayed for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isHorizontalScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the vertical scroll bar appears on the left side of the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLeftScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the vertical ruler appears on the right side of the document window in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isRightRulerDisplayed?: boolean;
            /**
             * Specifies whether the window is split into multiple panes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSplit?: boolean;
            /**
             * Specifies whether a vertical ruler is displayed for the window or pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVerticalRulerDisplayed?: boolean;
            /**
             * Specifies whether a vertical scroll bar is displayed for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVerticalScrollBarDisplayed?: boolean;
            /**
             * Specifies whether the window is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVisible?: boolean;
            /**
             * Specifies the horizontal position of the window, measured in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            left?: boolean;
            /**
             * Specifies how Microsoft Word displays source documents after a compare and merge process.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showSourceDocuments?: boolean;
            /**
             * Specifies the vertical split percentage for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            splitVertical?: boolean;
            /**
             * Specifies the width of the style area in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            styleAreaWidth?: boolean;
            /**
             * Specifies the vertical position of the document window, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            top?: boolean;
            /**
             * Gets the window type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
            /**
             * Gets the height (in points) of the active working area in the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            usableHeight?: boolean;
            /**
             * Gets the width (in points) of the active working area in the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            usableWidth?: boolean;
            /**
             * Specifies the vertical scroll position as a percentage of the document length.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            verticalPercentScrolled?: boolean;
            /**
             * Specifies the width of the document window, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            width?: boolean;
            /**
             * Gets an integer that represents the position of the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            windowNumber?: boolean;
        }
        /**
         * Represents the collection of {@link Word.Window} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface WindowCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the active pane in the window.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            activePane?: Word.Interfaces.PaneLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the next document window in the collection of open document windows.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            next?: Word.Interfaces.WindowLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the previous document window in the collection open document windows.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            previous?: Word.Interfaces.WindowLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the `View` object that represents the view for the window.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            view?: Word.Interfaces.ViewLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies whether rulers are displayed for the window or pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areRulersDisplayed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether comments, footnotes, endnotes, and hyperlinks are displayed as tips.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areScreenTipsDisplayed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether thumbnail images of the pages in a document are displayed along the left side of the Microsoft Word document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areThumbnailsDisplayed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the caption text for the window that is displayed in the title bar of the document or application window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            caption?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the height of the window (in points).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            height?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the horizontal scroll position as a percentage of the document width.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalPercentScrolled?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the default start-up mode for the Japanese Input Method Editor (IME).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            imeMode?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the position of an item in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            index?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the window is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isActive?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the document map is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDocumentMapVisible?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the email message header is visible in the document window. The default value is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEnvelopeVisible?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether a horizontal scroll bar is displayed for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isHorizontalScrollBarDisplayed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the vertical scroll bar appears on the left side of the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLeftScrollBarDisplayed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the vertical ruler appears on the right side of the document window in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isRightRulerDisplayed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the window is split into multiple panes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isSplit?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether a vertical ruler is displayed for the window or pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVerticalRulerDisplayed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether a vertical scroll bar is displayed for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVerticalScrollBarDisplayed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the window is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVisible?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the horizontal position of the window, measured in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            left?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies how Microsoft Word displays source documents after a compare and merge process.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showSourceDocuments?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the vertical split percentage for the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            splitVertical?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width of the style area in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            styleAreaWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the vertical position of the document window, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            top?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the window type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the height (in points) of the active working area in the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            usableHeight?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the width (in points) of the active working area in the document window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            usableWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the vertical scroll position as a percentage of the document length.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            verticalPercentScrolled?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width of the document window, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            width?: boolean;
            /**
             * For EACH ITEM in the collection: Gets an integer that represents the position of the window.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            windowNumber?: boolean;
        }
        /**
         * Represents a single paragraph in a selection, range, content control, or document body.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface ParagraphLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Gets the List to which this paragraph belongs. Throws an `ItemNotFound` error if the paragraph isn't in a list.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            list?: Word.Interfaces.ListLoadOptions;
            /**
            * Gets the ListItem for the paragraph. Throws an `ItemNotFound` error if the paragraph isn't part of a list.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listItem?: Word.Interfaces.ListItemLoadOptions;
            /**
            * Gets the ListItem for the paragraph. If the paragraph isn't part of a list, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listItemOrNullObject?: Word.Interfaces.ListItemLoadOptions;
            /**
            * Gets the List to which this paragraph belongs. If the paragraph isn't in a list, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listOrNullObject?: Word.Interfaces.ListLoadOptions;
            /**
            * Gets the parent body of the paragraph.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the content control that contains the paragraph. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the content control that contains the paragraph. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the table that contains the paragraph. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * Gets the table cell that contains the paragraph. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table cell that contains the paragraph. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table that contains the paragraph. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the paragraph.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Specifies the alignment for a paragraph. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            alignment?: boolean;
            /**
             * Specifies the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            firstLineIndent?: boolean;
            /**
             * Indicates the paragraph is the last one inside its parent body.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isLastParagraph?: boolean;
            /**
             * Checks whether the paragraph is a list item.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isListItem?: boolean;
            /**
             * Specifies the left indent value, in points, for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            leftIndent?: boolean;
            /**
             * Specifies the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineSpacing?: boolean;
            /**
             * Specifies the amount of spacing, in grid lines, after the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineUnitAfter?: boolean;
            /**
             * Specifies the amount of spacing, in grid lines, before the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineUnitBefore?: boolean;
            /**
             * Specifies the outline level for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            outlineLevel?: boolean;
            /**
             * Specifies the right indent value, in points, for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            rightIndent?: boolean;
            /**
             * Specifies the spacing, in points, after the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            spaceAfter?: boolean;
            /**
             * Specifies the spacing, in points, before the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            spaceBefore?: boolean;
            /**
             * Specifies the style name for the paragraph. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: boolean;
            /**
             * Specifies the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * Gets the level of the paragraph's table. It returns 0 if the paragraph isn't in a table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            tableNestingLevel?: boolean;
            /**
             * Gets the text of the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: boolean;
            /**
             * Gets a string that represents the paragraph identifier in the current session. ID is in standard 8-4-4-4-12 GUID format without curly braces and differs across sessions and coauthors.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            uniqueLocalId?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Paragraph} objects.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface ParagraphCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the List to which this paragraph belongs. Throws an `ItemNotFound` error if the paragraph isn't in a list.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            list?: Word.Interfaces.ListLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the ListItem for the paragraph. Throws an `ItemNotFound` error if the paragraph isn't part of a list.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listItem?: Word.Interfaces.ListItemLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the ListItem for the paragraph. If the paragraph isn't part of a list, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listItemOrNullObject?: Word.Interfaces.ListItemLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the List to which this paragraph belongs. If the paragraph isn't in a list, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            listOrNullObject?: Word.Interfaces.ListLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent body of the paragraph.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the paragraph. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the paragraph. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the paragraph. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the paragraph. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the paragraph. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the paragraph. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns a `ShadingUniversal` object that refers to the shading formatting for the paragraph.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the alignment for a paragraph. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            alignment?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            firstLineIndent?: boolean;
            /**
             * For EACH ITEM in the collection: Indicates the paragraph is the last one inside its parent body.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isLastParagraph?: boolean;
            /**
             * For EACH ITEM in the collection: Checks whether the paragraph is a list item.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isListItem?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the left indent value, in points, for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            leftIndent?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineSpacing?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the amount of spacing, in grid lines, after the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineUnitAfter?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the amount of spacing, in grid lines, before the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            lineUnitBefore?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the outline level for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            outlineLevel?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the right indent value, in points, for the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            rightIndent?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the spacing, in points, after the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            spaceAfter?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the spacing, in points, before the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            spaceBefore?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the style name for the paragraph. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the level of the paragraph's table. It returns 0 if the paragraph isn't in a table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            tableNestingLevel?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the text of the paragraph.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: boolean;
            /**
             * For EACH ITEM in the collection: Gets a string that represents the paragraph identifier in the current session. ID is in standard 8-4-4-4-12 GUID format without curly braces and differs across sessions and coauthors.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            uniqueLocalId?: boolean;
        }
        /**
         * Represents a style of paragraph in a document.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        export interface ParagraphFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the alignment for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            alignment?: boolean;
            /**
             * Specifies the value (in points) for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            firstLineIndent?: boolean;
            /**
             * Specifies whether all lines in the specified paragraphs remain on the same page when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            keepTogether?: boolean;
            /**
             * Specifies whether the specified paragraph remains on the same page as the paragraph that follows it when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            keepWithNext?: boolean;
            /**
             * Specifies the left indent.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            leftIndent?: boolean;
            /**
             * Specifies the line spacing (in points) for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineSpacing?: boolean;
            /**
             * Specifies the amount of spacing (in gridlines) after the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineUnitAfter?: boolean;
            /**
             * Specifies the amount of spacing (in gridlines) before the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            lineUnitBefore?: boolean;
            /**
             * Specifies whether left and right indents are the same width.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            mirrorIndents?: boolean;
            /**
             * Specifies the outline level for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            outlineLevel?: boolean;
            /**
             * Specifies the right indent (in points) for the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            rightIndent?: boolean;
            /**
             * Specifies the amount of spacing (in points) after the specified paragraph or text column.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            spaceAfter?: boolean;
            /**
             * Specifies the spacing (in points) before the specified paragraphs.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            spaceBefore?: boolean;
            /**
             * Specifies whether the first and last lines in the specified paragraph remain on the same page as the rest of the paragraph when Microsoft Word repaginates the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            widowControl?: boolean;
        }
        /**
         * Represents a contiguous area in a document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface RangeLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the text format of the range. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Returns a `ListFormat` object that represents all the list formatting characteristics of the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            listFormat?: Word.Interfaces.ListFormatLoadOptions;
            /**
            * Gets the parent body of the range.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the currently supported content control that contains the range. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the currently supported content control that contains the range. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the table that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * Gets the table cell that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table cell that contains the range. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table that contains the range. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Specifies whether the range is formatted as bold.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bold?: boolean;
            /**
             * Specifies whether the range is formatted as bold in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            boldBidirectional?: boolean;
            /**
             * Specifies a `CharacterCase` value that represents the case of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            case?: boolean;
            /**
             * Specifies the character width of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            characterWidth?: boolean;
            /**
             * Specifies if the range contains combined characters.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            combineCharacters?: boolean;
            /**
             * Specifies if Microsoft Word ignores the number of characters per line for the corresponding `Range` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            disableCharacterSpaceGrid?: boolean;
            /**
             * Specifies the emphasis mark for a character or designated character string.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            emphasisMark?: boolean;
            /**
             * Specifies the ending character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: boolean;
            /**
             * Specifies the width (in the current measurement units) in which Microsoft Word fits the text in the current selection or range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fitTextWidth?: boolean;
            /**
             * Specifies if a grammar check has been run on the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            grammarChecked?: boolean;
            /**
             * Specifies the proofing status (spelling and grammar checking) of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * Specifies the highlight color for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            highlightColorIndex?: boolean;
            /**
             * Specifies the formatting for horizontal text set within vertical text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalInVertical?: boolean;
            /**
             * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            hyperlink?: boolean;
            /**
             * Specifies the ID for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: boolean;
            /**
             * Checks whether the range length is zero.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isEmpty?: boolean;
            /**
             * Gets if the range is collapsed and is located at the end-of-row mark in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEndOfRowMark?: boolean;
            /**
             * Gets whether the text in the range is visible on the screen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isTextVisibleOnScreen?: boolean;
            /**
             * Specifies if the font or range is formatted as italic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            italic?: boolean;
            /**
             * Specifies if the font or range is formatted as italic (right-to-left languages).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            italicBidirectional?: boolean;
            /**
             * Specifies whether the range of Japanese language text is hiragana or katakana.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            kana?: boolean;
            /**
             * Specifies whether Microsoft Word has detected the language of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageDetected?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: boolean;
            /**
             * Specifies an East Asian language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: boolean;
            /**
             * Specifies a language for the range that isn't classified as an East Asian language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdOther?: boolean;
            /**
             * Specifies if all nonprinting characters (such as hidden text, tab marks, space marks, and paragraph marks) are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showAll?: boolean;
            /**
             * Specifies if spelling has been checked throughout the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spellingChecked?: boolean;
            /**
             * Specifies the starting character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: boolean;
            /**
             * Gets the number of characters in the story that contains the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyLength?: boolean;
            /**
             * Gets the story type for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: boolean;
            /**
             * Specifies the style name for the range. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: boolean;
            /**
             * Specifies the built-in style name for the range. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * Gets the text of the range.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: boolean;
            /**
             * Specifies whether Microsoft Word sets two lines of text in one and specifies the characters that enclose the text, if any.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            twoLinesInOne?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Range} objects.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface RangeCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the text format of the range. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns a `ListFormat` object that represents all the list formatting characteristics of the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            listFormat?: Word.Interfaces.ListFormatLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent body of the range.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the currently supported content control that contains the range. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the currently supported content control that contains the range. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the range. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the range. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns a `ShadingUniversal` object that refers to the shading formatting for the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies whether the range is formatted as bold.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bold?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the range is formatted as bold in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            boldBidirectional?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a `CharacterCase` value that represents the case of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            case?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the character width of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            characterWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the range contains combined characters.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            combineCharacters?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if Microsoft Word ignores the number of characters per line for the corresponding `Range` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            disableCharacterSpaceGrid?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the emphasis mark for a character or designated character string.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            emphasisMark?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the ending character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width (in the current measurement units) in which Microsoft Word fits the text in the current selection or range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fitTextWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if a grammar check has been run on the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            grammarChecked?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the proofing status (spelling and grammar checking) of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the highlight color for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            highlightColorIndex?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the formatting for horizontal text set within vertical text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalInVertical?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            hyperlink?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the ID for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Checks whether the range length is zero.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isEmpty?: boolean;
            /**
             * For EACH ITEM in the collection: Gets if the range is collapsed and is located at the end-of-row mark in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEndOfRowMark?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether the text in the range is visible on the screen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isTextVisibleOnScreen?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the font or range is formatted as italic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            italic?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the font or range is formatted as italic (right-to-left languages).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            italicBidirectional?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the range of Japanese language text is hiragana or katakana.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            kana?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether Microsoft Word has detected the language of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageDetected?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a `LanguageId` value that represents the language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies an East Asian language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a language for the range that isn't classified as an East Asian language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdOther?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if all nonprinting characters (such as hidden text, tab marks, space marks, and paragraph marks) are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showAll?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if spelling has been checked throughout the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spellingChecked?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the starting character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the number of characters in the story that contains the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyLength?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the story type for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the style name for the range. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the built-in style name for the range. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the text of the range.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether Microsoft Word sets two lines of text in one and specifies the characters that enclose the text, if any.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            twoLinesInOne?: boolean;
        }
        /**
         * Specifies the options to be included in a search operation.
                    To learn more about how to use search options in the Word JavaScript APIs, read {@link https://learn.microsoft.com/office/dev/add-ins/word/search-option-guidance | Use search options to find text in your Word add-in}.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface SearchOptionsLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * If provided, specifies whether to ignore all punctuation characters between words. The default is `false`. Corresponds to the _Ignore punctuation characters_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            ignorePunct?: boolean;
            /**
             * If provided, specifies whether to ignore all whitespace between words. The default is `false`. Corresponds to the _Ignore white-space characters_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            ignoreSpace?: boolean;
            /**
             * If provided, specifies whether to perform a case sensitive search. The default is `false`. Corresponds to the _Match case_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchCase?: boolean;
            /**
             * If provided, specifies whether to match words that begin with the search string. The default is `false`. Corresponds to the _Match prefix_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchPrefix?: boolean;
            /**
             * If provided, specifies whether to match words that end with the search string. The default is `false`. Corresponds to the _Match suffix_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchSuffix?: boolean;
            /**
             * If provided, specifies whether to find only entire words, not text that's part of a larger word. The default is `false`. Corresponds to the _Find whole words only_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchWholeWord?: boolean;
            /**
             * If provided, specifies whether the search will be performed using special search operators. The default is `false`. Corresponds to the _Use wildcards_ check box in the **Find and Replace** dialog box.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            matchWildcards?: boolean;
        }
        /**
         * Represents a section in a Word document.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface SectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the `Body` object of the section. This doesn't include the header, footer, and other section metadata.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * Returns a `PageSetup` object that's associated with the section.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pageSetup?: Word.Interfaces.PageSetupLoadOptions;
            /**
             * Specifies if the section is protected for forms.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            protectedForForms?: boolean;
        }
        /**
         * Contains the collection of the document's {@link Word.Section} objects.
         *
         * @remarks
         * [Api set: WordApi 1.1]
         */
        export interface SectionCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the `Body` object of the section. This doesn't include the header, footer, and other section metadata.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns a `PageSetup` object that's associated with the section.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            pageSetup?: Word.Interfaces.PageSetupLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies if the section is protected for forms.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            protectedForForms?: boolean;
        }
        /**
         * Represents a setting of the add-in.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface SettingLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the key of the setting.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            key?: boolean;
            /**
             * Specifies the value of the setting.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            value?: boolean;
        }
        /**
         * Contains the collection of {@link Word.Setting} objects.
         *
         * @remarks
         * [Api set: WordApi 1.4]
         */
        export interface SettingCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the key of the setting.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            key?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the value of the setting.
             *
             * @remarks
             * [Api set: WordApi 1.4]
             */
            value?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Style} objects.
         *
         * @remarks
         * [Api set: WordApi 1.5]
         */
        export interface StyleCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Specifies a `BorderCollection` object that represents all the borders for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            borders?: Word.Interfaces.BorderCollectionLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets a `Font` object that represents the character formatting of the style.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns a `Frame` object that represents the frame formatting for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            frame?: Word.Interfaces.FrameLoadOptions;
            /**
            * For EACH ITEM in the collection: Specifies a link between a paragraph and a character style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            linkStyle?: Word.Interfaces.StyleLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets a `ListTemplate` object that represents the list formatting for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            listTemplate?: Word.Interfaces.ListTemplateLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets a `ParagraphFormat` object that represents the paragraph settings for the style.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            paragraphFormat?: Word.Interfaces.ParagraphFormatLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets a `Shading` object that represents the shading for the style. Not applicable to a style of `List` type.
            *
            * @remarks
            * [Api set: WordApi 1.6]
            */
            shading?: Word.Interfaces.ShadingLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets a `TableStyle` object representing style properties that can be applied to a table.
            *
            * @remarks
            * [Api set: WordApi 1.6]
            */
            tableStyle?: Word.Interfaces.TableStyleLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies whether the style is automatically redefined based on the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            automaticallyUpdate?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the name of an existing style to use as the base formatting of another style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             *
             * Note: The ability to set `baseStyle` was introduced in WordApi 1.6.
             */
            baseStyle?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether the style is a built-in style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            builtIn?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the spelling and grammar checker ignores text formatted with this style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasProofing?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether the style is a built-in style that has been modified or applied in the document or a new style that has been created in the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            inUse?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a `LanguageId` value that represents the language for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies an East Asian language for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether the style is a linked style that can be used for both paragraph and character formatting.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            linked?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the list level for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listLevelNumber?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the style cannot be changed or edited.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            locked?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the name of the style in the language of the user.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            nameLocal?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the name of the style to be applied automatically to a new paragraph that is inserted after a paragraph formatted with the style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             *
             * Note: The ability to set `nextParagraphStyle` was introduced in WordApi 1.6.
             */
            nextParagraphStyle?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether to remove spacing between paragraphs that are formatted using the same style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noSpaceBetweenParagraphsOfSameStyle?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the priority.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            priority?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the style corresponds to an available quick style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            quickStyle?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the style type.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the style is made visible as a recommended style in the Styles gallery and in the Styles task pane in Microsoft Word after it's used in the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            unhideWhenUsed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the style is visible as a recommended style in the Styles gallery and in the Styles task pane.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            visibility?: boolean;
        }
        /**
         * Represents a style in a Word document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface StyleLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Specifies a `BorderCollection` object that represents all the borders for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            borders?: Word.Interfaces.BorderCollectionLoadOptions;
            /**
            * Gets a `Font` object that represents the character formatting of the style.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Returns a `Frame` object that represents the frame formatting for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            frame?: Word.Interfaces.FrameLoadOptions;
            /**
            * Specifies a link between a paragraph and a character style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            linkStyle?: Word.Interfaces.StyleLoadOptions;
            /**
            * Gets a `ListTemplate` object that represents the list formatting for the style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.1]
            */
            listTemplate?: Word.Interfaces.ListTemplateLoadOptions;
            /**
            * Gets a `ParagraphFormat` object that represents the paragraph settings for the style.
            *
            * @remarks
            * [Api set: WordApi 1.5]
            */
            paragraphFormat?: Word.Interfaces.ParagraphFormatLoadOptions;
            /**
            * Gets a `Shading` object that represents the shading for the style. Not applicable to a style of `List` type.
            *
            * @remarks
            * [Api set: WordApi 1.6]
            */
            shading?: Word.Interfaces.ShadingLoadOptions;
            /**
            * Gets a `TableStyle` object representing style properties that can be applied to a table.
            *
            * @remarks
            * [Api set: WordApi 1.6]
            */
            tableStyle?: Word.Interfaces.TableStyleLoadOptions;
            /**
             * Specifies whether the style is automatically redefined based on the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            automaticallyUpdate?: boolean;
            /**
             * Specifies the name of an existing style to use as the base formatting of another style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             *
             * Note: The ability to set `baseStyle` was introduced in WordApi 1.6.
             */
            baseStyle?: boolean;
            /**
             * Gets whether the style is a built-in style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            builtIn?: boolean;
            /**
             * Specifies whether the spelling and grammar checker ignores text formatted with this style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasProofing?: boolean;
            /**
             * Gets whether the style is a built-in style that has been modified or applied in the document or a new style that has been created in the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            inUse?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: boolean;
            /**
             * Specifies an East Asian language for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: boolean;
            /**
             * Gets whether the style is a linked style that can be used for both paragraph and character formatting.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            linked?: boolean;
            /**
             * Returns the list level for the style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listLevelNumber?: boolean;
            /**
             * Specifies whether the style cannot be changed or edited.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            locked?: boolean;
            /**
             * Gets the name of the style in the language of the user.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            nameLocal?: boolean;
            /**
             * Specifies the name of the style to be applied automatically to a new paragraph that is inserted after a paragraph formatted with the style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             *
             * Note: The ability to set `nextParagraphStyle` was introduced in WordApi 1.6.
             */
            nextParagraphStyle?: boolean;
            /**
             * Specifies whether to remove spacing between paragraphs that are formatted using the same style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noSpaceBetweenParagraphsOfSameStyle?: boolean;
            /**
             * Specifies the priority.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            priority?: boolean;
            /**
             * Specifies whether the style corresponds to an available quick style.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            quickStyle?: boolean;
            /**
             * Gets the style type.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            type?: boolean;
            /**
             * Specifies whether the style is made visible as a recommended style in the Styles gallery and in the Styles task pane in Microsoft Word after it's used in the document.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            unhideWhenUsed?: boolean;
            /**
             * Specifies whether the style is visible as a recommended style in the Styles gallery and in the Styles task pane.
             *
             * @remarks
             * [Api set: WordApi 1.5]
             */
            visibility?: boolean;
        }
        /**
         * Represents the `Shading` object.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        export interface ShadingLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the color for the background of the object. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            backgroundPatternColor?: boolean;
            /**
             * Specifies the color for the foreground of the object. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            foregroundPatternColor?: boolean;
            /**
             * Specifies the shading texture of the object. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            texture?: boolean;
        }
        /**
         * Represents the `ShadingUniversal` object, which manages shading for a range, paragraph, frame, or table.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface ShadingUniversalLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the color that's applied to the background of the `ShadingUniversal` object. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            backgroundPatternColor?: boolean;
            /**
             * Specifies the color that's applied to the background of the `ShadingUniversal` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            backgroundPatternColorIndex?: boolean;
            /**
             * Specifies the color that's applied to the foreground of the `ShadingUniversal` object. This color is applied to the dots and lines in the shading pattern. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            foregroundPatternColor?: boolean;
            /**
             * Specifies the color that's applied to the foreground of the `ShadingUniversal` object. This color is applied to the dots and lines in the shading pattern.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            foregroundPatternColorIndex?: boolean;
            /**
             * Specifies the shading texture of the object. To learn more about how to apply backgrounds like textures, see {@link https://support.microsoft.com/office/db481e61-7af6-4063-bbcd-b276054a5515 | Add, change, or delete the background color in Word}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            texture?: boolean;
        }
        /**
         * Represents a table in a Word document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface TableLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the font. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Gets the parent body of the table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the content control that contains the table. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the content control that contains the table. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * Gets the table that contains this table. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * Gets the table cell that contains this table. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table cell that contains this table. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * Gets the table that contains this table. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * Returns the `ShadingUniversal` object that represents the shading of the table.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Specifies the alignment of the table against the page column. The value can be `left`, `centered`, or `right`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            alignment?: boolean;
            /**
             * Specifies the description of the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            description?: boolean;
            /**
             * Specifies the number of header rows.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            headerRowCount?: boolean;
            /**
             * Specifies the horizontal alignment of every cell in the table. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: boolean;
            /**
             * Indicates whether all of the table rows are uniform.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isUniform?: boolean;
            /**
             * Gets the nesting level of the table. Top-level tables have level 1.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            nestingLevel?: boolean;
            /**
             * Gets the number of rows in the table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowCount?: boolean;
            /**
             * Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: boolean;
            /**
             * Specifies the style name for the table. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            style?: boolean;
            /**
             * Specifies whether the table has banded columns.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBandedColumns?: boolean;
            /**
             * Specifies whether the table has banded rows.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBandedRows?: boolean;
            /**
             * Specifies the built-in style name for the table. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * Specifies whether the table has a first column with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleFirstColumn?: boolean;
            /**
             * Specifies whether the table has a last column with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleLastColumn?: boolean;
            /**
             * Specifies whether the table has a total (last) row with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleTotalRow?: boolean;
            /**
             * Specifies the title of the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            title?: boolean;
            /**
             * Specifies the text values in the table, as a 2D JavaScript array.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            values?: boolean;
            /**
             * Specifies the vertical alignment of every cell in the table. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: boolean;
            /**
             * Specifies the width of the table in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: boolean;
        }
        /**
         * Represents the `TableStyle` object.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        export interface TableStyleLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the table style.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingLoadOptions;
            /**
             * Specifies the table's alignment against the page margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            alignment?: boolean;
            /**
             * Specifies whether lines in tables formatted with a style break across pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            allowBreakAcrossPage?: boolean;
            /**
             * Specifies the amount of space to add between the contents and the bottom borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            bottomCellMargin?: boolean;
            /**
             * Specifies the spacing (in points) between the cells in a table style.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            cellSpacing?: boolean;
            /**
             * Specifies the number of columns in the banding when a style specifies odd- or even-column banding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            columnStripe?: boolean;
            /**
             * Specifies whether Microsoft Word allows to break the specified table across pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isBreakAcrossPagesAllowed?: boolean;
            /**
             * Specifies the amount of space to add between the contents and the left borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            leftCellMargin?: boolean;
            /**
             * Specifies the left indent value (in points) for the rows in the table style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftIndent?: boolean;
            /**
             * Specifies the amount of space to add between the contents and the right borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            rightCellMargin?: boolean;
            /**
             * Specifies the number of rows to include in the banding when the style specifies odd- or even-row banding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rowStripe?: boolean;
            /**
             * Specifies the direction in which Microsoft Word orders cells in the table style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableDirection?: boolean;
            /**
             * Specifies the amount of space to add between the contents and the top borders of the cells.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            topCellMargin?: boolean;
        }
        /**
         * Represents a tab stop in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TabStopLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the next tab stop in the collection.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            next?: Word.Interfaces.TabStopLoadOptions;
            /**
            * Gets the previous tab stop in the collection.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            previous?: Word.Interfaces.TabStopLoadOptions;
            /**
             * Gets a `TabAlignment` value that represents the alignment for the tab stop.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            alignment?: boolean;
            /**
             * Gets whether this tab stop is a custom tab stop.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            customTab?: boolean;
            /**
             * Gets a `TabLeader` value that represents the leader for this `TabStop` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leader?: boolean;
            /**
             * Gets the position of the tab stop relative to the left margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            position?: boolean;
        }
        /**
         * Represents a collection of {@link Word.TabStop | tab stops} in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TabStopCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the next tab stop in the collection.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            next?: Word.Interfaces.TabStopLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the previous tab stop in the collection.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            previous?: Word.Interfaces.TabStopLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets a `TabAlignment` value that represents the alignment for the tab stop.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            alignment?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether this tab stop is a custom tab stop.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            customTab?: boolean;
            /**
             * For EACH ITEM in the collection: Gets a `TabLeader` value that represents the leader for this `TabStop` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leader?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the position of the tab stop relative to the left margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            position?: boolean;
        }
        /**
         * Contains the collection of the document's {@link Word.Table} objects.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface TableCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the font. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent body of the table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the table. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the content control that contains the table. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains this table. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains this table. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains this table. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains this table. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns the `ShadingUniversal` object that represents the shading of the table.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the alignment of the table against the page column. The value can be `left`, `centered`, or `right`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            alignment?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the description of the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            description?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the number of header rows.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            headerRowCount?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the horizontal alignment of every cell in the table. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: boolean;
            /**
             * For EACH ITEM in the collection: Indicates whether all of the table rows are uniform.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isUniform?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the nesting level of the table. Top-level tables have level 1.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            nestingLevel?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the number of rows in the table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowCount?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the style name for the table. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            style?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the table has banded columns.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBandedColumns?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the table has banded rows.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBandedRows?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the built-in style name for the table. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the table has a first column with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleFirstColumn?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the table has a last column with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleLastColumn?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the table has a total (last) row with a special style.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleTotalRow?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the title of the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            title?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the text values in the table, as a 2D JavaScript array.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            values?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the vertical alignment of every cell in the table. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width of the table in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: boolean;
        }
        /**
         * Represents a table column in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface TableColumnLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the column.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Returns the position of this column in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            columnIndex?: boolean;
            /**
             * Returns `true` if the column or row is the first one in the table; `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isFirst?: boolean;
            /**
             * Returns `true` if the column or row is the last one in the table; `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isLast?: boolean;
            /**
             * Returns the nesting level of the column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nestingLevel?: boolean;
            /**
             * Specifies the preferred width (in points or as a percentage of the window width) for the column.
                        The unit of measurement can be specified by the `preferredWidthType` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            preferredWidth?: boolean;
            /**
             * Specifies the preferred unit of measurement to use for the width of the table column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            preferredWidthType?: boolean;
            /**
             * Specifies the width of the column, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: boolean;
        }
        /**
         * Represents a collection of {@link Word.TableColumn} objects in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface TableColumnCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Returns a `ShadingUniversal` object that refers to the shading formatting for the column.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * For EACH ITEM in the collection: Returns the position of this column in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            columnIndex?: boolean;
            /**
             * For EACH ITEM in the collection: Returns `true` if the column or row is the first one in the table; `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isFirst?: boolean;
            /**
             * For EACH ITEM in the collection: Returns `true` if the column or row is the last one in the table; `false` otherwise.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isLast?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the nesting level of the column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            nestingLevel?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the preferred width (in points or as a percentage of the window width) for the column.
                        The unit of measurement can be specified by the `preferredWidthType` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            preferredWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the preferred unit of measurement to use for the width of the table column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            preferredWidthType?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width of the column, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: boolean;
        }
        /**
         * Represents a table of authorities in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TableOfAuthoritiesLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the portion of a document that is this table of authorities.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Specifies the name of the bookmark from which to collect table of authorities entries.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bookmark?: boolean;
            /**
             * Specifies the category of entries to be included in the table of authorities.
                        Values 0 through 16 correspond to the items listed in the Category box of the Table of Authorities dialog. To learn how to access this through the Word UI, see {@link https://support.microsoft.com/office/ddd126ae-52bc-4299-9558-06dd0e4fe8c0 | Create a table of authorities}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            category?: boolean;
            /**
             * Specifies a separator of up to five characters. This appears between the table of authorities entry and its page number.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            entrySeparator?: boolean;
            /**
             * Specifies whether the category name for a group of entries appears in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isCategoryHeaderIncluded?: boolean;
            /**
             * Specifies whether the entries in the table of authorities are displayed with their formatting in the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEntryFormattingKept?: boolean;
            /**
             * Specifies whether references to the same authority that are repeated on five or more pages are replaced with "Passim".
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPassimUsed?: boolean;
            /**
             * Specifies a separator of up to five characters. This appears between individual page references in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageNumberSeparator?: boolean;
            /**
             * Specifies a separator of up to five characters. This appears between ranges of pages in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageRangeSeparator?: boolean;
            /**
             * Specifies the {@link https://support.microsoft.com/office/062a387b-dfc9-4ef8-8235-29ee113d59be | Sequence (SEQ) field} identifier for the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sequenceName?: boolean;
            /**
             * Specifies a separator of up to five characters. This appears between the sequence number and the page number in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sequenceSeparator?: boolean;
            /**
             * Specifies the leader character that appears between entries and their associated page numbers in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: boolean;
        }
        /**
         * Represents a collection of {@link Word.TableOfAuthorities} objects in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TableOfAuthoritiesCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the portion of a document that is this table of authorities.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the name of the bookmark from which to collect table of authorities entries.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bookmark?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the category of entries to be included in the table of authorities.
                        Values 0 through 16 correspond to the items listed in the Category box of the Table of Authorities dialog. To learn how to access this through the Word UI, see {@link https://support.microsoft.com/office/ddd126ae-52bc-4299-9558-06dd0e4fe8c0 | Create a table of authorities}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            category?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a separator of up to five characters. This appears between the table of authorities entry and its page number.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            entrySeparator?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the category name for a group of entries appears in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isCategoryHeaderIncluded?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the entries in the table of authorities are displayed with their formatting in the table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEntryFormattingKept?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether references to the same authority that are repeated on five or more pages are replaced with "Passim".
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPassimUsed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a separator of up to five characters. This appears between individual page references in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageNumberSeparator?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a separator of up to five characters. This appears between ranges of pages in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageRangeSeparator?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the {@link https://support.microsoft.com/office/062a387b-dfc9-4ef8-8235-29ee113d59be | Sequence (SEQ) field} identifier for the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sequenceName?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a separator of up to five characters. This appears between the sequence number and the page number in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sequenceSeparator?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the leader character that appears between entries and their associated page numbers in the table of authorities.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: boolean;
        }
        /**
         * Represents a category used in a table of authorities.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TableOfAuthoritiesCategoryLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the name of this table of authorities category.
                        Changing the name of the category doesn't change the index in the collection. The value for {@link Word.TableOfAuthorities | TableOfAuthorities.category} will remain the same.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
        }
        /**
         * Represents a collection of {@link Word.TableOfAuthoritiesCategory} objects in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TableOfAuthoritiesCategoryCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the name of this table of authorities category.
                        Changing the name of the category doesn't change the index in the collection. The value for {@link Word.TableOfAuthorities | TableOfAuthorities.category} will remain the same.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
        }
        /**
         * Represents a table of contents in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TableOfContentsLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the portion of a document that is this table of contents.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Specifies whether built-in heading styles are used for the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBuiltInHeadingStylesUsed?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldsUsed?: boolean;
            /**
             * Specifies whether entries in the table of contents should be formatted as hyperlinks when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areHyperlinksUsedOnWeb?: boolean;
            /**
             * Specifies whether the page numbers in the table of contents should be hidden when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersHiddenOnWeb?: boolean;
            /**
             * Specifies whether page numbers are included in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersIncluded?: boolean;
            /**
             * Specifies whether page numbers are aligned with the right margin in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersRightAligned?: boolean;
            /**
             * Specifies the ending heading level for the table of contents. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            lowerHeadingLevel?: boolean;
            /**
             * Specifies the character between entries and their page numbers in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: boolean;
            /**
             * Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableId?: boolean;
            /**
             * Specifies the starting heading level for the table of contents. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            upperHeadingLevel?: boolean;
        }
        /**
         * Represents a collection of {@link Word.TableOfContents} objects in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TableOfContentsCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the portion of a document that is this table of contents.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies whether built-in heading styles are used for the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBuiltInHeadingStylesUsed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldsUsed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether entries in the table of contents should be formatted as hyperlinks when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areHyperlinksUsedOnWeb?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the page numbers in the table of contents should be hidden when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersHiddenOnWeb?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether page numbers are included in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersIncluded?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether page numbers are aligned with the right margin in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersRightAligned?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the ending heading level for the table of contents. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            lowerHeadingLevel?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the character between entries and their page numbers in the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of contents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableId?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the starting heading level for the table of contents. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            upperHeadingLevel?: boolean;
        }
        /**
         * Represents a table of figures in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TableOfFiguresLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the portion of a document that is this table of figures.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Specifies whether built-in heading styles are used for the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBuiltInHeadingStylesUsed?: boolean;
            /**
             * Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldsUsed?: boolean;
            /**
             * Specifies whether entries in the table of figures should be formatted as hyperlinks when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areHyperlinksUsedOnWeb?: boolean;
            /**
             * Specifies whether the page numbers in the table of figures should be hidden when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersHiddenOnWeb?: boolean;
            /**
             * Specifies whether page numbers are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersIncluded?: boolean;
            /**
             * Specifies whether page numbers are aligned with the right margin in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersRightAligned?: boolean;
            /**
             * Specifies the label that identifies the items to be included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            captionLabel?: boolean;
            /**
             * Specifies whether the caption label and caption number are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLabelIncluded?: boolean;
            /**
             * Specifies the ending heading level for the table of figures. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            lowerHeadingLevel?: boolean;
            /**
             * Specifies the character between entries and their page numbers in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: boolean;
            /**
             * Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableId?: boolean;
            /**
             * Specifies the starting heading level for the table of figures. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            upperHeadingLevel?: boolean;
        }
        /**
         * Represents a collection of {@link Word.TableOfFigures} objects in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface TableOfFiguresCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the portion of a document that is this table of figures.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies whether built-in heading styles are used for the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBuiltInHeadingStylesUsed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | Table of Contents Entry (TC) fields} are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldsUsed?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether entries in the table of figures should be formatted as hyperlinks when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areHyperlinksUsedOnWeb?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the page numbers in the table of figures should be hidden when publishing to the web.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersHiddenOnWeb?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether page numbers are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersIncluded?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether page numbers are aligned with the right margin in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageNumbersRightAligned?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the label that identifies the items to be included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            captionLabel?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the caption label and caption number are included in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isLabelIncluded?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the ending heading level for the table of figures. Must be a value from 1 to 9 and greater than `upperHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            lowerHeadingLevel?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the character between entries and their page numbers in the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a one-letter identifier from {@link https://support.microsoft.com/office/01e5dd8a-4730-4bc2-8594-23d7329e25c3 | TC fields} that's used for the table of figures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tableId?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the starting heading level for the table of figures. Must be a value from 1 to 9 and smaller than `lowerHeadingLevel`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            upperHeadingLevel?: boolean;
        }
        /**
         * Represents a row in a Word document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface TableRowLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the font. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Gets parent table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * Returns the `Range` object that represents the table row.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * Returns the `ShadingUniversal` object that represents the shading of the table row.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Gets the number of cells in the row.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            cellCount?: boolean;
            /**
             * Specifies the horizontal alignment of every cell in the row. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: boolean;
            /**
             * Checks whether the row is a header row. To set the number of header rows, use `headerRowCount` on the `Table` object.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isHeader?: boolean;
            /**
             * Specifies the preferred height of the row in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            preferredHeight?: boolean;
            /**
             * Gets the index of the row in its parent table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowIndex?: boolean;
            /**
             * Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: boolean;
            /**
             * Specifies the text values in the row, as a 2D JavaScript array.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            values?: boolean;
            /**
             * Specifies the vertical alignment of the cells in the row. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: boolean;
        }
        /**
         * Contains the collection of the document's {@link Word.TableRow} objects.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface TableRowCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the font. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets parent table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns the `Range` object that represents the table row.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns the `ShadingUniversal` object that represents the shading of the table row.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the number of cells in the row.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            cellCount?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the horizontal alignment of every cell in the row. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: boolean;
            /**
             * For EACH ITEM in the collection: Checks whether the row is a header row. To set the number of header rows, use `headerRowCount` on the `Table` object.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isHeader?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the preferred height of the row in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            preferredHeight?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the index of the row in its parent table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowIndex?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the shading color. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the text values in the row, as a 2D JavaScript array.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            values?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the vertical alignment of the cells in the row. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: boolean;
        }
        /**
         * Represents a table cell in a Word document.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface TableCellLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the `Body` object of the cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * Returns the `TableColumn` object that represents the table column that contains this cell.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            column?: Word.Interfaces.TableColumnLoadOptions;
            /**
            * Gets the parent row of the cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentRow?: Word.Interfaces.TableRowLoadOptions;
            /**
            * Gets the parent table of the cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * Returns the `ShadingUniversal` object that represents the shading of the table cell.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Gets the index of the cell in its row.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            cellIndex?: boolean;
            /**
             * Specifies the width of the cell's column in points. This is applicable to uniform tables.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            columnWidth?: boolean;
            /**
             * Specifies the horizontal alignment of the cell. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: boolean;
            /**
             * Gets the index of the cell's row in the table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowIndex?: boolean;
            /**
             * Specifies the shading color of the cell. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: boolean;
            /**
             * Specifies the text of the cell.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            value?: boolean;
            /**
             * Specifies the vertical alignment of the cell. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: boolean;
            /**
             * Gets the width of the cell in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: boolean;
        }
        /**
         * Contains the collection of the document's {@link Word.TableCell} objects.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface TableCellCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the `Body` object of the cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns the `TableColumn` object that represents the table column that contains this cell.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            column?: Word.Interfaces.TableColumnLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent row of the cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentRow?: Word.Interfaces.TableRowLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent table of the cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns the `ShadingUniversal` object that represents the shading of the table cell.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the index of the cell in its row.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            cellIndex?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width of the cell's column in points. This is applicable to uniform tables.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            columnWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the horizontal alignment of the cell. The value can be `left`, `centered`, `right`, or `justified`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            horizontalAlignment?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the index of the cell's row in the table.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            rowIndex?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the shading color of the cell. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            shadingColor?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the text of the cell.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            value?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the vertical alignment of the cell. The value can be `top`, `center`, or `bottom`.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            verticalAlignment?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the width of the cell in points.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: boolean;
        }
        /**
         * Specifies the border style.
         *
         * @remarks
         * [Api set: WordApi 1.3]
         */
        export interface TableBorderLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the table border color.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            color?: boolean;
            /**
             * Specifies the type of the table border.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            type?: boolean;
            /**
             * Specifies the width, in points, of the table border. Not applicable to table border types that have fixed widths.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            width?: boolean;
        }
        /**
         * Represents a document template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface TemplateLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the East Asian language to use when breaking lines of text in the document or template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            farEastLineBreakLanguage?: boolean;
            /**
             * Specifies the line break control level for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            farEastLineBreakLevel?: boolean;
            /**
             * Returns the name of the template, including the drive or Web path.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            fullName?: boolean;
            /**
             * Specifies whether the spelling and grammar checker ignores documents based on this template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * Specifies the character spacing adjustment for the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            justificationMode?: boolean;
            /**
             * Specifies if Microsoft Word kerns half-width Latin characters and punctuation marks in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            kerningByAlgorithm?: boolean;
            /**
             * Specifies a `LanguageId` value that represents the language in the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: boolean;
            /**
             * Specifies an East Asian language for the language in the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: boolean;
            /**
             * Returns only the name of the document template (excluding any path or other location information).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: boolean;
            /**
             * Specifies the kinsoku characters after which Microsoft Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noLineBreakAfter?: boolean;
            /**
             * Specifies the kinsoku characters before which Microsoft Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noLineBreakBefore?: boolean;
            /**
             * Returns the path to the document template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            path?: boolean;
            /**
             * Specifies `true` if the template has not changed since it was last saved, `false` if Microsoft Word displays a prompt to save changes when the document is closed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            saved?: boolean;
            /**
             * Returns the template type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Template} objects that represent all the templates that are currently available.
                    This collection includes open templates, templates attached to open documents, and global templates loaded in the **Templates and Add-ins** dialog box.
                    To learn how to access this dialog in the Word UI, see {@link https://support.microsoft.com/office/2479fe53-f849-4394-88bb-2a6e2a39479d | Load or unload a template or add-in program}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface TemplateCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the East Asian language to use when breaking lines of text in the document or template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            farEastLineBreakLanguage?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the line break control level for the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            farEastLineBreakLevel?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the name of the template, including the drive or Web path.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            fullName?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the spelling and grammar checker ignores documents based on this template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the character spacing adjustment for the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            justificationMode?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if Microsoft Word kerns half-width Latin characters and punctuation marks in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            kerningByAlgorithm?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a `LanguageId` value that represents the language in the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies an East Asian language for the language in the template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: boolean;
            /**
             * For EACH ITEM in the collection: Returns only the name of the document template (excluding any path or other location information).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            name?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the kinsoku characters after which Microsoft Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noLineBreakAfter?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the kinsoku characters before which Microsoft Word will not break a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            noLineBreakBefore?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the path to the document template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            path?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies `true` if the template has not changed since it was last saved, `false` if Microsoft Word displays a prompt to save changes when the document is closed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            saved?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the template type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: boolean;
        }
        /**
         * Represents a tracked change in a Word document.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        export interface TrackedChangeLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the author of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            author?: boolean;
            /**
             * Gets the date of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            date?: boolean;
            /**
             * Gets the text of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            text?: boolean;
            /**
             * Gets the type of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            type?: boolean;
        }
        /**
         * Contains a collection of {@link Word.TrackedChange} objects.
         *
         * @remarks
         * [Api set: WordApi 1.6]
         */
        export interface TrackedChangeCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the author of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            author?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the date of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            date?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the text of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            text?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the type of the tracked change.
             *
             * @remarks
             * [Api set: WordApi 1.6]
             */
            type?: boolean;
        }
        /**
         * Contains the view attributes (such as show all, field shading, and table gridlines) for a window or pane.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ViewLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the instance of a `RevisionsFilter` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            revisionsFilter?: Word.Interfaces.RevisionsFilterLoadOptions;
            /**
             * Specifies whether all nonprinting characters are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areAllNonprintingCharactersDisplayed?: boolean;
            /**
             * Gets whether background colors and images are shown when the document is displayed in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBackgroundsDisplayed?: boolean;
            /**
             * Gets whether square brackets are displayed at the beginning and end of each bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areBookmarksIndicated?: boolean;
            /**
             * Specifies whether Microsoft Word displays the comments in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areCommentsDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays connecting lines from the text to the revision and comment balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areConnectingLinesToRevisionsBalloonDisplayed?: boolean;
            /**
             * Gets whether crop marks are shown in the corners of pages to indicate where margins are located.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areCropMarksDisplayed?: boolean;
            /**
             * Gets whether objects created with the drawing tools are displayed in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areDrawingsDisplayed?: boolean;
            /**
             * Specifies whether shading is applied to the ranges in the document that users have permission to modify.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areEditableRangesShaded?: boolean;
            /**
             * Specifies whether field codes are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFieldCodesDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays formatting changes made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areFormatChangesDisplayed?: boolean;
            /**
             * Specifies whether handwritten ink annotations are shown or hidden.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areInkAnnotationsDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays insertions and deletions made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areInsertionsAndDeletionsDisplayed?: boolean;
            /**
             * Gets whether lines wrap at the right edge of the document window rather than at the right margin or the right column boundary.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areLinesWrappedToWindow?: boolean;
            /**
             * Gets whether object anchors are displayed next to items that can be positioned in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areObjectAnchorsDisplayed?: boolean;
            /**
             * Gets whether Microsoft Word displays optional line breaks.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areOptionalBreaksDisplayed?: boolean;
            /**
             * Gets whether optional hyphens are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areOptionalHyphensDisplayed?: boolean;
            /**
             * Gets whether other authors' presence should be visible in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areOtherAuthorsVisible?: boolean;
            /**
             * Gets whether the top and bottom margins and the gray area between pages in the document are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePageBoundariesDisplayed?: boolean;
            /**
             * Gets whether paragraph marks are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areParagraphsMarksDisplayed?: boolean;
            /**
             * Gets whether blank boxes are displayed as placeholders for pictures.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            arePicturePlaceholdersDisplayed?: boolean;
            /**
             * Specifies whether Microsoft Word displays revisions and comments made to the document with Track Changes enabled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areRevisionsAndCommentsDisplayed?: boolean;
            /**
             * Gets whether space characters are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areSpacesIndicated?: boolean;
            /**
             * Specifies whether table gridlines are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTableGridlinesDisplayed?: boolean;
            /**
             * Gets whether tab characters are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTabsDisplayed?: boolean;
            /**
             * Gets whether dotted lines are displayed around page margins, text columns, objects, and frames in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            areTextBoundariesDisplayed?: boolean;
            /**
             * Specifies the column width in Reading mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            columnWidth?: boolean;
            /**
             * Gets on-screen shading for fields.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fieldShading?: boolean;
            /**
             * Specifies whether all the text in a window is displayed in the same sans-serif font with minimal formatting to speed up display.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isDraft?: boolean;
            /**
             * Specifies whether only the first line of body text is shown in outline view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFirstLineOnlyDisplayed?: boolean;
            /**
             * Specifies whether character formatting is visible in outline view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFormatDisplayed?: boolean;
            /**
             * Specifies whether the window is in full-screen view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isFullScreen?: boolean;
            /**
             * Gets whether text formatted as hidden text is displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isHiddenTextDisplayed?: boolean;
            /**
             * Gets whether highlight formatting is displayed and printed with the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isHighlightingDisplayed?: boolean;
            /**
             * Specifies whether the document is in conflict mode view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInConflictMode?: boolean;
            /**
             * Specifies whether Microsoft Word is in Panning mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInPanning?: boolean;
            /**
             * Specifies whether the document is being viewed in reading layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInReadingLayout?: boolean;
            /**
             * Specifies whether mail merge data is displayed instead of mail merge fields.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMailMergeDataView?: boolean;
            /**
             * Specifies whether the text in the document is visible when the header and footer areas are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isMainTextLayerVisible?: boolean;
            /**
             * Specifies whether the pointer is displayed as a magnifying glass in print preview.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isPointerShownAsMagnifier?: boolean;
            /**
             * Specifies whether pages displayed in reading layout view are displayed using the same layout as printed pages.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isReadingLayoutActualView?: boolean;
            /**
             * Specifies whether XML tags are visible in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isXmlMarkupVisible?: boolean;
            /**
             * Specifies the display mode for tracked changes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            markupMode?: boolean;
            /**
             * Specifies the page color in Reading mode.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageColor?: boolean;
            /**
             * Specifies the page movement type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pageMovementType?: boolean;
            /**
             * Specifies whether margins are visible or hidden when the document is viewed in Full Screen Reading view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            readingLayoutTruncateMargins?: boolean;
            /**
             * Gets whether Word displays revision balloons in the left or right margin in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisionsBalloonSide?: boolean;
            /**
             * Specifies the width of the revision balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisionsBalloonWidth?: boolean;
            /**
             * Specifies how Microsoft Word measures the width of revision balloons.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            revisionsBalloonWidthType?: boolean;
            /**
             * Specifies the document element displayed in print layout view.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            seekView?: boolean;
            /**
             * Specifies the active window pane.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            splitSpecial?: boolean;
            /**
             * Specifies the view type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Represents a shape in the header, footer, or document body. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface ShapeLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Represents the `Body` object of the shape. Only applies to text boxes and geometric shapes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * Gets the canvas associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `canvas`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            canvas?: Word.Interfaces.CanvasLoadOptions;
            /**
            * Returns the fill formatting of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            fill?: Word.Interfaces.ShapeFillLoadOptions;
            /**
            * Gets the top-level parent canvas shape of this child shape. It will be null if it isn't a child shape of a canvas.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            parentCanvas?: Word.Interfaces.ShapeLoadOptions;
            /**
            * Gets the top-level parent group shape of this child shape. It will be null if it isn't a child shape of a group.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            parentGroup?: Word.Interfaces.ShapeLoadOptions;
            /**
            * Gets the shape group associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `groupShape`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shapeGroup?: Word.Interfaces.ShapeGroupLoadOptions;
            /**
            * Gets the `TextFrame` object of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            textFrame?: Word.Interfaces.TextFrameLoadOptions;
            /**
            * Returns the text wrap formatting of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            textWrap?: Word.Interfaces.ShapeTextWrapLoadOptions;
            /**
             * Specifies whether a given shape can overlap other shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            allowOverlap?: boolean;
            /**
             * Specifies a string that represents the alternative text associated with the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            altTextDescription?: boolean;
            /**
             * The geometric shape type of the shape. It will be null if isn't a geometric shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            geometricShapeType?: boolean;
            /**
             * The height, in points, of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            height?: boolean;
            /**
             * The percentage of shape height to vertical relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            heightRelative?: boolean;
            /**
             * Gets an integer that represents the shape identifier.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            id?: boolean;
            /**
             * Check whether this shape is a child of a group shape or a canvas shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            isChild?: boolean;
            /**
             * The distance, in points, from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            left?: boolean;
            /**
             * The relative left position as a percentage from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline or child shape, it will return 0 and can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftRelative?: boolean;
            /**
             * Specifies if the aspect ratio of this shape is locked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            lockAspectRatio?: boolean;
            /**
             * The name of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            name?: boolean;
            /**
             * The relative horizontal position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeHorizontalPosition?: boolean;
            /**
             * The relative horizontal size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeHorizontalSize?: boolean;
            /**
             * The relative vertical position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeVerticalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeVerticalPosition?: boolean;
            /**
             * The relative vertical size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeVerticalSize?: boolean;
            /**
             * Specifies the rotation, in degrees, of the shape. Not applicable to Canvas shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rotation?: boolean;
            /**
             * The distance, in points, from the top edge of the shape to the vertical relative position (see {@link Word.RelativeVerticalPosition}). For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            top?: boolean;
            /**
             * The relative top position as a percentage from the top edge of the shape to the vertical relative position, see {@link Word.RelativeVerticalPosition}. For an inline or child shape, it will return 0 and can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topRelative?: boolean;
            /**
             * Gets the shape type. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            type?: boolean;
            /**
             * Specifies if the shape is visible. Not applicable to inline shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            visible?: boolean;
            /**
             * The width, in points, of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            width?: boolean;
            /**
             * The percentage of shape width to horizontal relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            widthRelative?: boolean;
        }
        /**
         * Represents a shape group in the document. To get the corresponding {@link Word.Shape} object, use `ShapeGroup.shape`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface ShapeGroupLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the `Shape` object associated with the group.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shape?: Word.Interfaces.ShapeLoadOptions;
            /**
             * Gets an integer that represents the shape group identifier.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            id?: boolean;
        }
        /**
         * Represents a canvas in the document. To get the corresponding {@link Word.Shape} object, use `Canvas.shape`.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface CanvasLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the `Shape` object associated with the canvas.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shape?: Word.Interfaces.ShapeLoadOptions;
            /**
             * Gets an integer that represents the canvas identifier.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            id?: boolean;
        }
        /**
         * Contains a collection of {@link Word.Shape} objects. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface ShapeCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Represents the `Body` object of the shape. Only applies to text boxes and geometric shapes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            body?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the canvas associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `canvas`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            canvas?: Word.Interfaces.CanvasLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns the fill formatting of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            fill?: Word.Interfaces.ShapeFillLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the top-level parent canvas shape of this child shape. It will be null if it isn't a child shape of a canvas.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            parentCanvas?: Word.Interfaces.ShapeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the top-level parent group shape of this child shape. It will be null if it isn't a child shape of a group.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            parentGroup?: Word.Interfaces.ShapeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the shape group associated with the shape. An object with its `isNullObject` property set to `true` will be returned if the shape type isn't `groupShape`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            shapeGroup?: Word.Interfaces.ShapeGroupLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the `TextFrame` object of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            textFrame?: Word.Interfaces.TextFrameLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns the text wrap formatting of the shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.2]
            */
            textWrap?: Word.Interfaces.ShapeTextWrapLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies whether a given shape can overlap other shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            allowOverlap?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a string that represents the alternative text associated with the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            altTextDescription?: boolean;
            /**
             * For EACH ITEM in the collection: The geometric shape type of the shape. It will be null if isn't a geometric shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            geometricShapeType?: boolean;
            /**
             * For EACH ITEM in the collection: The height, in points, of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            height?: boolean;
            /**
             * For EACH ITEM in the collection: The percentage of shape height to vertical relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            heightRelative?: boolean;
            /**
             * For EACH ITEM in the collection: Gets an integer that represents the shape identifier.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Check whether this shape is a child of a group shape or a canvas shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            isChild?: boolean;
            /**
             * For EACH ITEM in the collection: The distance, in points, from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            left?: boolean;
            /**
             * For EACH ITEM in the collection: The relative left position as a percentage from the left side of the shape to the horizontal relative position, see {@link Word.RelativeHorizontalPosition}. For an inline or child shape, it will return 0 and can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftRelative?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the aspect ratio of this shape is locked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            lockAspectRatio?: boolean;
            /**
             * For EACH ITEM in the collection: The name of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            name?: boolean;
            /**
             * For EACH ITEM in the collection: The relative horizontal position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeHorizontalPosition?: boolean;
            /**
             * For EACH ITEM in the collection: The relative horizontal size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeHorizontalSize?: boolean;
            /**
             * For EACH ITEM in the collection: The relative vertical position of the shape. For an inline shape, it can't be set. For details, see {@link Word.RelativeVerticalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeVerticalPosition?: boolean;
            /**
             * For EACH ITEM in the collection: The relative vertical size of the shape. For an inline or child shape, it can't be set. For details, see {@link Word.RelativeHorizontalPosition}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            relativeVerticalSize?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the rotation, in degrees, of the shape. Not applicable to Canvas shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rotation?: boolean;
            /**
             * For EACH ITEM in the collection: The distance, in points, from the top edge of the shape to the vertical relative position (see {@link Word.RelativeVerticalPosition}). For an inline shape, it will return 0 and can't be set. For a child shape in a canvas or group, it's relative to the top left corner.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            top?: boolean;
            /**
             * For EACH ITEM in the collection: The relative top position as a percentage from the top edge of the shape to the vertical relative position, see {@link Word.RelativeVerticalPosition}. For an inline or child shape, it will return 0 and can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topRelative?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the shape type. Currently, only the following shapes are supported: text boxes, geometric shapes, groups, pictures, and canvases.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            type?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the shape is visible. Not applicable to inline shapes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            visible?: boolean;
            /**
             * For EACH ITEM in the collection: The width, in points, of the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            width?: boolean;
            /**
             * For EACH ITEM in the collection: The percentage of shape width to horizontal relative size, see {@link Word.RelativeSize}. For an inline or child shape, it can't be set.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            widthRelative?: boolean;
        }
        /**
         * Represents the fill formatting of a {@link Word.Shape} object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface ShapeFillLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the shape fill background color. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            backgroundColor?: boolean;
            /**
             * Specifies the shape fill foreground color. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            foregroundColor?: boolean;
            /**
             * Specifies the transparency percentage of the fill as a value from 0.0 (opaque) through 1.0 (clear). Returns `null` if the shape type does not support transparency or the shape fill has inconsistent transparency, such as with a gradient fill type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            transparency?: boolean;
            /**
             * Returns the fill type of the shape. See `Word.ShapeFillType` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            type?: boolean;
        }
        /**
         * Represents the text frame of a {@link Word.Shape} object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface TextFrameLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the automatic sizing settings for the text frame. A text frame can be set to automatically fit the text to the text frame, to automatically fit the text frame to the text, or not perform any automatic sizing.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            autoSizeSetting?: boolean;
            /**
             * Specifies the bottom margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            bottomMargin?: boolean;
            /**
             * Returns `true` if the text frame contains text, otherwise, `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            hasText?: boolean;
            /**
             * Specifies the left margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftMargin?: boolean;
            /**
             * Specifies whether the text in the text frame shouldn't rotate when the shape is rotated.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            noTextRotation?: boolean;
            /**
             * Specifies the angle to which the text is oriented for the text frame. See `Word.ShapeTextOrientation` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            orientation?: boolean;
            /**
             * Specifies the right margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rightMargin?: boolean;
            /**
             * Specifies the top margin, in points, of the text frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topMargin?: boolean;
            /**
             * Specifies the vertical alignment of the text frame. See `Word.ShapeTextVerticalAlignment` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            verticalAlignment?: boolean;
            /**
             * Determines whether lines break automatically to fit text inside the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            wordWrap?: boolean;
        }
        /**
         * Represents all the properties for wrapping text around a {@link Word.Shape}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.2]
         */
        export interface ShapeTextWrapLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the distance (in points) between the document text and the bottom edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            bottomDistance?: boolean;
            /**
             * Specifies the distance (in points) between the document text and the left edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            leftDistance?: boolean;
            /**
             * Specifies the distance (in points) between the document text and the right edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            rightDistance?: boolean;
            /**
             * Specifies whether the document text should wrap on both sides of the specified shape, on either the left or right side only, or on the side of the shape that's farthest from the page margin.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            side?: boolean;
            /**
             * Specifies the distance (in points) between the document text and the top edge of the text-free area surrounding the specified shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            topDistance?: boolean;
            /**
             * Specifies the text wrap type around the shape. See `Word.ShapeTextWrapType` for details.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.2]
             */
            type?: boolean;
        }
        /**
         * Represents a single reviewer of a document in which changes have been tracked. The `Reviewer` object is a member of the {@link Word.ReviewerCollection} object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ReviewerLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies if the `Reviewer` object is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVisible?: boolean;
        }
        /**
         * A collection of {@link Word.Reviewer} objects that represents the reviewers of one or more documents. The `ReviewerCollection` object contains the names of all reviewers who have reviewed documents opened or edited on a computer.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ReviewerCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the `Reviewer` object is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isVisible?: boolean;
        }
        /**
         * Represents the current settings related to the display of reviewers' comments and revision marks in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface RevisionsFilterLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies a `RevisionsMarkup` value that represents the extent of reviewer markup displayed in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            markup?: boolean;
            /**
             * Specifies a `RevisionsView` value that represents globally whether Word displays the original version of the document or the final version, which might have revisions and formatting changes applied.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            view?: boolean;
        }
        /**
         * Represents a single item in a {@link Word.RepeatingSectionContentControl}.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface RepeatingSectionItemLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns the range of this repeating section item, excluding the start and end tags.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
        }
        /**
         * Represents a single tracked change in a document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface RevisionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `Range` object that represents the range of text that was moved from one place to another in the document with tracked changes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            movedRange?: Word.Interfaces.RangeLoadOptions;
            /**
            * Gets a `Range` object that represents the portion of the document that's contained within a revision mark.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Gets the name of the user who made the tracked change.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            author?: boolean;
            /**
             * Gets the date and time when the tracked change was made.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            date?: boolean;
            /**
             * Gets the description of tracked formatting changes in the revision.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formatDescription?: boolean;
            /**
             * Gets a number that represents the position of this item in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            index?: boolean;
            /**
             * Gets the revision type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * A collection of {@link Word.Revision} objects that represent the changes marked with revision marks in a range or document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface RevisionCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets a `Range` object that represents the range of text that was moved from one place to another in the document with tracked changes.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            movedRange?: Word.Interfaces.RangeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets a `Range` object that represents the portion of the document that's contained within a revision mark.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the name of the user who made the tracked change.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            author?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the date and time when the tracked change was made.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            date?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the description of tracked formatting changes in the revision.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            formatDescription?: boolean;
            /**
             * For EACH ITEM in the collection: Gets a number that represents the position of this item in a collection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            index?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the revision type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Represents the `DatePickerContentControl` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface DatePickerContentControlLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockLoadOptions;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * Gets an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingLoadOptions;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: boolean;
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: boolean;
            /**
             * Specifies a `CalendarType` value that represents the calendar type for the date picker content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateCalendarType?: boolean;
            /**
             * Specifies the format in which dates are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateDisplayFormat?: boolean;
            /**
             * Specifies a `LanguageId` that represents the language format for the date displayed in the date picker content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateDisplayLocale?: boolean;
            /**
             * Specifies a `ContentControlDateStorageFormat` value that represents the format for storage and retrieval of dates when the date picker content control is bound to the XML data store of the active document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dateStorageFormat?: boolean;
            /**
             * Gets the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: boolean;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Specifies the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Gets whether the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: boolean;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: boolean;
        }
        /**
         * Represents the `PictureContentControl` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface PictureContentControlLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockLoadOptions;
            /**
            * Returns a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingLoadOptions;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: boolean;
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: boolean;
            /**
             * Returns the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: boolean;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Returns the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Returns whether the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: boolean;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: boolean;
        }
        /**
         * Represents the `GroupContentControl` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface GroupContentControlLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockLoadOptions;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * Gets an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingLoadOptions;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: boolean;
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: boolean;
            /**
             * Returns the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: boolean;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Gets the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Returns whether the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: boolean;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: boolean;
        }
        /**
         * Represents the `BuildingBlockGalleryContentControl` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BuildingBlockGalleryContentControlLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockLoadOptions;
            /**
            * Returns a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * Returns an `XmlMapping` object that represents the mapping of the content control to XML data in the data store of the document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            xmlMapping?: Word.Interfaces.XmlMappingLoadOptions;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: boolean;
            /**
             * Specifies the category for the building block content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            buildingBlockCategory?: boolean;
            /**
             * Specifies a `BuildingBlockType` value that represents the type of building block for the building block content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            buildingBlockType?: boolean;
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: boolean;
            /**
             * Gets the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: boolean;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Gets the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Gets if the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: boolean;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: boolean;
        }
        /**
         * Represents the `RepeatingSectionContentControl` object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface RepeatingSectionContentControlLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `BuildingBlock` object that represents the placeholder text for the content control.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            placeholderText?: Word.Interfaces.BuildingBlockLoadOptions;
            /**
            * Gets a `Range` object that represents the contents of the content control in the active document.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Specifies whether users can add or remove sections from this repeating section content control by using the user interface.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            allowInsertDeleteSection?: boolean;
            /**
             * Specifies the appearance of the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            appearance?: boolean;
            /**
             * Specifies the red-green-blue (RGB) value of the color of the content control. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            color?: boolean;
            /**
             * Returns the identification for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            id?: boolean;
            /**
             * Specifies whether to remove the content control from the active document when the user edits the contents of the control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isTemporary?: boolean;
            /**
             * Returns the level of the content control—whether the content control surrounds text, paragraphs, table cells, or table rows; or if it is inline.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            level?: boolean;
            /**
             * Specifies if the content control is locked (can't be deleted). `true` means that the user can't delete it from the active document, `false` means it can be deleted.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContentControl?: boolean;
            /**
             * Specifies if the contents of the content control are locked (not editable). `true` means the user can't edit the contents, `false` means the contents are editable.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockContents?: boolean;
            /**
             * Specifies the name of the repeating section items used in the context menu associated with this repeating section content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            repeatingSectionItemTitle?: boolean;
            /**
             * Returns whether the placeholder text for the content control is being displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showingPlaceholderText?: boolean;
            /**
             * Specifies a tag to identify the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: boolean;
            /**
             * Specifies the title for the content control.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            title?: boolean;
        }
        /**
         * Represents one of the readability statistics for the document or range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ReadabilityStatisticLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Returns the name of the readability statistic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
            /**
             * Returns the value of the grammar statistic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            value?: boolean;
        }
        /**
         * Represents a collection of {@link Word.ReadabilityStatistic} objects for the document or range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ReadabilityStatisticCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the name of the readability statistic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the value of the grammar statistic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            value?: boolean;
        }
        /**
         * Represents the settings for saving a Word document as a webpage.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface WebSettingsLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies whether PNG is allowed as an image format when saving a document as a webpage. Default is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            allowPng?: boolean;
            /**
             * Specifies the document encoding (code page or character set) to be used by the web browser when viewing the saved document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            encoding?: boolean;
            /**
             * Gets the folder suffix used when saving a document as a webpage with long file names and supporting files in a separate folder.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            folderSuffix?: boolean;
            /**
             * Specifies whether supporting files are organized in a separate folder when saving the document as a webpage. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            organizeInFolder?: boolean;
            /**
             * Specifies the density (pixels per inch) of graphics images and table cells on a webpage.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            pixelsPerInch?: boolean;
            /**
             * Specifies whether cascading style sheets (CSS) are used for font formatting when viewing a saved document in a web browser. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            relyOnCSS?: boolean;
            /**
             * Specifies whether image files are not generated from drawing objects when saving a document as a webpage. Default is `false`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            relyOnVectorMarkupLanguage?: boolean;
            /**
             * Specifies the ideal minimum screen size (width by height, in pixels) for viewing the saved document in a web browser.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            screenSize?: boolean;
            /**
             * Specifies the target browser for documents viewed in a web browser.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            targetBrowser?: boolean;
            /**
             * Specifies whether long file names are used when saving the document as a webpage. Default is `true`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            useLongFileNames?: boolean;
        }
        /**
         * Represents the collection of {@link Word.XmlNode} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface XmlNodeCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the first child node if this is a parent node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            firstChild?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the last child node if this is a parent node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            lastChild?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the next element in the document that's at the same level as this XML node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            nextSibling?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent document of this XML node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            ownerDocument?: Word.Interfaces.DocumentLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent element of this XML node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            parentNode?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the previous element in the document that's at the same level as this XML node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            previousSibling?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the portion of a document that is contained in this XML node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets the name of the element without any prefix.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            baseName?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether this XML node has child nodes. Always returns `false` for attribute nodes since they cannot have children.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasChildNodes?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether this XML element is part of a paragraph, is a paragraph, or is contained within a table cell or contains a table row. Returns `null` if the node type is `attribute`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            level?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the Uniform Resource Identifier (URI) of the schema namespace for this XML node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            namespaceUri?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the text displayed for this element if it contains no text. Only applies to element nodes, not attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            placeholderText?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the text contained within the XML element. Returns an empty string if the node type is `attribute`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            text?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the description for a validation error on this `XmlNode` object. May not be meaningful for attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            validationErrorText?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether this element is valid according to the attached schema. May not be meaningful for attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            validationStatus?: boolean;
        }
        /**
         * Represents a single XML node applied to the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface XmlNodeLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets the first child node if this is a parent node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            firstChild?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * Gets the last child node if this is a parent node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            lastChild?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * Gets the next element in the document that's at the same level as this XML node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            nextSibling?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * Gets the parent document of this XML node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            ownerDocument?: Word.Interfaces.DocumentLoadOptions;
            /**
            * Gets the parent element of this XML node.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            parentNode?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * Gets the previous element in the document that's at the same level as this XML node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            previousSibling?: Word.Interfaces.XmlNodeLoadOptions;
            /**
            * Gets the portion of a document that is contained in this XML node. Returns `null` if the node type is `attribute`.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Gets the name of the element without any prefix.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            baseName?: boolean;
            /**
             * Gets whether this XML node has child nodes. Always returns `false` for attribute nodes since they cannot have children.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasChildNodes?: boolean;
            /**
             * Gets whether this XML element is part of a paragraph, is a paragraph, or is contained within a table cell or contains a table row. Returns `null` if the node type is `attribute`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            level?: boolean;
            /**
             * Gets the Uniform Resource Identifier (URI) of the schema namespace for this XML node.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            namespaceUri?: boolean;
            /**
             * Specifies the text displayed for this element if it contains no text. Only applies to element nodes, not attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            placeholderText?: boolean;
            /**
             * Specifies the text contained within the XML element. Returns an empty string if the node type is `attribute`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            text?: boolean;
            /**
             * Gets the description for a validation error on this `XmlNode` object. May not be meaningful for attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            validationErrorText?: boolean;
            /**
             * Gets whether this element is valid according to the attached schema. May not be meaningful for attribute nodes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            validationStatus?: boolean;
        }
        /**
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface HtmlDivisionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `Range` object that represents the portion of a document that's contained in this HTML division.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Specifies the left indent value (in points) for this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftIndent?: boolean;
            /**
             * Specifies the right indent (in points) for this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightIndent?: boolean;
            /**
             * Specifies the amount of spacing (in points) after this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spaceAfter?: boolean;
            /**
             * Specifies the spacing (in points) before this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spaceBefore?: boolean;
        }
        /**
         * Represents a collection of {@link Word.HtmlDivision} objects in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface HtmlDivisionCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets a `Range` object that represents the portion of a document that's contained in this HTML division.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the left indent value (in points) for this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            leftIndent?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the right indent (in points) for this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightIndent?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the amount of spacing (in points) after this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spaceAfter?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the spacing (in points) before this HTML division.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spaceBefore?: boolean;
        }
        /**
         * Represents a frame. The `Frame` object is a member of the {@link Word.FrameCollection} object.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface FrameLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `Range` object that represents the portion of the document that's contained within the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * Returns a `ShadingUniversal` object that refers to the shading formatting for the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Specifies the height (in points) of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            height?: boolean;
            /**
             * Specifies a `FrameSizeRule` value that represents the rule for determining the height of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            heightRule?: boolean;
            /**
             * Specifies the horizontal distance between the frame and the surrounding text, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            horizontalDistanceFromText?: boolean;
            /**
             * Specifies the horizontal distance between the edge of the frame and the item specified by the `relativeHorizontalPosition` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            horizontalPosition?: boolean;
            /**
             * Specifies if the frame is locked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockAnchor?: boolean;
            /**
             * Specifies the relative horizontal position of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            relativeHorizontalPosition?: boolean;
            /**
             * Specifies the relative vertical position of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            relativeVerticalPosition?: boolean;
            /**
             * Specifies if document text wraps around the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textWrap?: boolean;
            /**
             * Specifies the vertical distance (in points) between the frame and the surrounding text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalDistanceFromText?: boolean;
            /**
             * Specifies the vertical distance between the edge of the frame and the item specified by the `relativeVerticalPosition` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalPosition?: boolean;
            /**
             * Specifies the width (in points) of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: boolean;
            /**
             * Specifies the rule used to determine the width of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            widthRule?: boolean;
        }
        /**
         * Represents the collection of {@link Word.Frame} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface FrameCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Returns a `Range` object that represents the portion of the document that's contained within the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns a `ShadingUniversal` object that refers to the shading formatting for the frame.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the height (in points) of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            height?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a `FrameSizeRule` value that represents the rule for determining the height of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            heightRule?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the horizontal distance between the frame and the surrounding text, in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            horizontalDistanceFromText?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the horizontal distance between the edge of the frame and the item specified by the `relativeHorizontalPosition` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            horizontalPosition?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the frame is locked.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lockAnchor?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the relative horizontal position of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            relativeHorizontalPosition?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the relative vertical position of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            relativeVerticalPosition?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if document text wraps around the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textWrap?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the vertical distance (in points) between the frame and the surrounding text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalDistanceFromText?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the vertical distance between the edge of the frame and the item specified by the `relativeVerticalPosition` property.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalPosition?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width (in points) of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the rule used to determine the width of the frame.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            widthRule?: boolean;
        }
        /**
         * Represents a document library version.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface DocumentLibraryVersionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets any optional comments associated with this version of the shared document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            comments?: boolean;
            /**
             * Gets the date and time at which this version of the shared document was last saved to the server.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            modified?: boolean;
            /**
             * Gets the name of the user who last saved this version of the shared document to the server.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            modifiedBy?: boolean;
        }
        /**
         * Represents the collection of {@link Word.DocumentLibraryVersion} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface DocumentLibraryVersionCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets any optional comments associated with this version of the shared document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            comments?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the date and time at which this version of the shared document was last saved to the server.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            modified?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the name of the user who last saved this version of the shared document to the server.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            modifiedBy?: boolean;
        }
        /**
         * Represents a dropped capital letter in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface DropCapLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets the distance (in points) between the dropped capital letter and the paragraph text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            distanceFromText?: boolean;
            /**
             * Gets the name of the font for the dropped capital letter.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fontName?: boolean;
            /**
             * Gets the height (in lines) of the dropped capital letter.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            linesToDrop?: boolean;
            /**
             * Gets the position of the dropped capital letter.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            position?: boolean;
        }
        /**
         * Represents the list formatting characteristics of a range.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface ListFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `List` object that represents the first formatted list contained in the `ListFormat` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            list?: Word.Interfaces.ListLoadOptions;
            /**
            * Gets the list template associated with the `ListFormat` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            listTemplate?: Word.Interfaces.ListTemplateLoadOptions;
            /**
             * Indicates whether the `ListFormat` object contains a single list.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isSingleList?: boolean;
            /**
             * Indicates whether the `ListFormat` object contains a single list template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isSingleListTemplate?: boolean;
            /**
             * Specifies the list level number for the first paragraph for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listLevelNumber?: boolean;
            /**
             * Gets the string representation of the list value of the first paragraph in the range for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listString?: boolean;
            /**
             * Gets the type of the list for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listType?: boolean;
            /**
             * Gets the numeric value of the the first paragraph in the range for the `ListFormat` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            listValue?: boolean;
        }
        /**
         * Represents the fill formatting for a shape or text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface FillFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `ColorFormat` object that represents the background color for the fill.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            backgroundColor?: Word.Interfaces.ColorFormatLoadOptions;
            /**
            * Returns a `ColorFormat` object that represents the foreground color for the fill.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatLoadOptions;
            /**
             * Specifies the angle of the gradient fill. The valid range of values is from 0 to 359.9.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientAngle?: boolean;
            /**
             * Gets the gradient color type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientColorType?: boolean;
            /**
             * Returns how dark or light a one-color gradient fill is.
                        A value of 0 means that black is mixed in with the shape's foreground color to form the gradient.
                        A value of 1 means that white is mixed in.
                        Values between 0 and 1 mean that a darker or lighter shade of the foreground color is mixed in.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientDegree?: boolean;
            /**
             * Returns the gradient style for the fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientStyle?: boolean;
            /**
             * Returns the gradient variant for the fill as an integer value from 1 to 4 for most gradient fills.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gradientVariant?: boolean;
            /**
             * Specifies if the object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Returns a `PatternType` value that represents the pattern applied to the fill or line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pattern?: boolean;
            /**
             * Returns the preset gradient type for the fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetGradientType?: boolean;
            /**
             * Gets the preset texture.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetTexture?: boolean;
            /**
             * Specifies whether the fill rotates with the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotateWithObject?: boolean;
            /**
             * Specifies the alignment (the origin of the coordinate grid) for the tiling of the texture fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureAlignment?: boolean;
            /**
             * Specifies the horizontal scaling factor for the texture fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureHorizontalScale?: boolean;
            /**
             * Returns the name of the custom texture file for the fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureName?: boolean;
            /**
             * Specifies the horizontal offset of the texture from the origin in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureOffsetX?: boolean;
            /**
             * Specifies the vertical offset of the texture.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureOffsetY?: boolean;
            /**
             * Specifies whether the texture is tiled.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureTile?: boolean;
            /**
             * Returns the texture type for the fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureType?: boolean;
            /**
             * Specifies the vertical scaling factor for the texture fill as a value between 0.0 and 1.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            textureVerticalScale?: boolean;
            /**
             * Specifies the degree of transparency of the fill for a shape as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: boolean;
            /**
             * Gets the fill format type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: boolean;
        }
        /**
         * Represents the glow formatting for the font used by the range of text.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface GlowFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `ColorFormat` object that represents the color for a glow effect.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            color?: Word.Interfaces.ColorFormatLoadOptions;
            /**
             * Specifies the length of the radius for a glow effect.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            radius?: boolean;
            /**
             * Specifies the degree of transparency for the glow effect as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: boolean;
        }
        /**
         * Represents line and arrowhead formatting. For a line, the `LineFormat` object contains formatting information for the line itself;
                    for a shape with a border, this object contains formatting information for the shape's border.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface LineFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Gets a `ColorFormat` object that represents the background color for a patterned line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            backgroundColor?: Word.Interfaces.ColorFormatLoadOptions;
            /**
            * Gets a `ColorFormat` object that represents the foreground color for the line.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatLoadOptions;
            /**
             * Specifies the length of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadLength?: boolean;
            /**
             * Specifies the style of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadStyle?: boolean;
            /**
             * Specifies the width of the arrowhead at the beginning of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            beginArrowheadWidth?: boolean;
            /**
             * Specifies the dash style for the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            dashStyle?: boolean;
            /**
             * Specifies the length of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadLength?: boolean;
            /**
             * Specifies the style of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadStyle?: boolean;
            /**
             * Specifies the width of the arrowhead at the end of the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            endArrowheadWidth?: boolean;
            /**
             * Specifies if to draw lines inside a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            insetPen?: boolean;
            /**
             * Specifies if the object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the pattern applied to the line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pattern?: boolean;
            /**
             * Specifies the line format style.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            style?: boolean;
            /**
             * Specifies the degree of transparency of the line as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: boolean;
            /**
             * Specifies the thickness of the line in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            weight?: boolean;
        }
        /**
         * Represents the reflection formatting for a shape in Word.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface ReflectionFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the degree of blur effect applied to the `ReflectionFormat` object as a value between 0.0 and 100.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            blur?: boolean;
            /**
             * Specifies the amount of separation, in points, of the reflected image from the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offset?: boolean;
            /**
             * Specifies the size of the reflection as a percentage of the reflected shape from 0 to 100.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            size?: boolean;
            /**
             * Specifies the degree of transparency for the reflection effect as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: boolean;
            /**
             * Specifies a `ReflectionType` value that represents the type and direction of the lighting for a shape reflection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: boolean;
        }
        /**
         * Represents the color formatting of a shape or text in Word.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface ColorFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the brightness of a specified shape color. Valid values are from `-1` (darkest) to `1` (lightest), `0` represents neutral.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            brightness?: boolean;
            /**
             * Specifies the theme color for a color format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            objectThemeColor?: boolean;
            /**
             * Specifies the red-green-blue (RGB) value of the specified color. You can provide the value in the '#RRGGBB' format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rgb?: boolean;
            /**
             * Specifies the lightening or darkening of a specified shape's color. Valid values are from `-1` (darkest) to `1` (lightest), `0` represents neutral.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tintAndShade?: boolean;
            /**
             * Returns the shape color type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: boolean;
        }
        /**
         * Represents the shadow formatting for a shape or text in Word.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface ShadowFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `ColorFormat` object that represents the foreground color for the fill, line, or shadow.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            foregroundColor?: Word.Interfaces.ColorFormatLoadOptions;
            /**
             * Specifies the blur level for a shadow format as a value between 0.0 and 100.0.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            blur?: boolean;
            /**
             * Specifies whether the object or the formatting applied to it is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies `true` if the shadow of the shape appears filled in and is obscured by the shape, even if the shape has no fill,
                        `false` if the shadow has no fill and the outline of the shadow is visible through the shape if the shape has no fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            obscured?: boolean;
            /**
             * Specifies the horizontal offset (in points) of the shadow from the shape.
                        A positive value offsets the shadow to the right of the shape; a negative value offsets it to the left.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offsetX?: boolean;
            /**
             * Specifies the vertical offset (in points) of the shadow from the shape.
                        A positive value offsets the shadow to the top of the shape; a negative value offsets it to the bottom.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            offsetY?: boolean;
            /**
             * Specifies whether to rotate the shadow when rotating the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotateWithShape?: boolean;
            /**
             * Specifies the width of the shadow.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            size?: boolean;
            /**
             * Specifies the type of shadow formatting to apply to a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            style?: boolean;
            /**
             * Specifies the degree of transparency of the shadow as a value between 0.0 (opaque) and 1.0 (clear).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            transparency?: boolean;
            /**
             * Specifies the shape shadow type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            type?: boolean;
        }
        /**
         * Represents a shape's three-dimensional formatting.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface ThreeDimensionalFormatLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `ColorFormat` object that represents color of the contour of a shape.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            contourColor?: Word.Interfaces.ColorFormatLoadOptions;
            /**
            * Returns a `ColorFormat` object that represents the color of the shape's extrusion.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            extrusionColor?: Word.Interfaces.ColorFormatLoadOptions;
            /**
             * Specifies the depth of the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomDepth?: boolean;
            /**
             * Specifies the inset size for the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomInset?: boolean;
            /**
             * Specifies a `BevelType` value that represents the bevel type for the bottom bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelBottomType?: boolean;
            /**
             * Specifies the depth of the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopDepth?: boolean;
            /**
             * Specifies the inset size for the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopInset?: boolean;
            /**
             * Specifies a `BevelType` value that represents the bevel type for the top bevel.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bevelTopType?: boolean;
            /**
             * Specifies the width of the contour of a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            contourWidth?: boolean;
            /**
             * Specifies the depth of the shape's extrusion.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            depth?: boolean;
            /**
             * Specifies whether the extrusion color is based on the extruded shape's fill (the front face of the extrusion)
                        and automatically changes when the shape's fill changes, or whether the extrusion color is independent of the shape's fill.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            extrusionColorType?: boolean;
            /**
             * Specifies the amount of perspective for a shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            fieldOfView?: boolean;
            /**
             * Specifies `true` if the extrusion appears in perspective — that is, if the walls of the extrusion narrow toward a vanishing point,
                        `false` if the extrusion is a parallel, or orthographic, projection — that is, if the walls don't narrow toward a vanishing point.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isPerspective?: boolean;
            /**
             * Specifies if the specified object, or the formatting applied to it, is visible.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isVisible?: boolean;
            /**
             * Specifies the angle of the lighting.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            lightAngle?: boolean;
            /**
             * Returns a `PresetCamera` value that represents the camera presets.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetCamera?: boolean;
            /**
             * Returns the direction taken by the extrusion's sweep path leading away from the extruded shape (the front face of the extrusion).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetExtrusionDirection?: boolean;
            /**
             * Specifies a `LightRigType` value that represents the lighting preset.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLighting?: boolean;
            /**
             * Specifies the position of the light source relative to the extrusion.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLightingDirection?: boolean;
            /**
             * Specifies the intensity of the extrusion lighting.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetLightingSoftness?: boolean;
            /**
             * Specifies the extrusion surface material.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetMaterial?: boolean;
            /**
             * Returns the preset extrusion format.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            presetThreeDimensionalFormat?: boolean;
            /**
             * Specifies whether text on a shape rotates with shape. `true` rotates the text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            projectText?: boolean;
            /**
             * Specifies the rotation of the extruded shape around the x-axis in degrees.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationX?: boolean;
            /**
             * Specifies the rotation of the extruded shape around the y-axis in degrees.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationY?: boolean;
            /**
             * Specifies the z-axis rotation of the camera.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rotationZ?: boolean;
            /**
             * Specifies the position on the z-axis for the shape.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            z?: boolean;
        }
        /**
         * Represents the list of available sources attached to the document (in the current list) or the list of sources available in the application (in the master list).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface BibliographyLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the name of the active style to use for the bibliography.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bibliographyStyle?: boolean;
        }
        /**
         * Represents a collection of {@link Word.Source} objects.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface SourceCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Gets if the `Source` object has been cited in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isCited?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the tag of the source.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the XML representation of the source.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: boolean;
        }
        /**
         * Represents an individual source, such as a book, journal article, or interview.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface SourceLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Gets if the `Source` object has been cited in the document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isCited?: boolean;
            /**
             * Gets the tag of the source.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            tag?: boolean;
            /**
             * Gets the XML representation of the source.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            xml?: boolean;
        }
        /**
         * Represents the page setup settings for a Word document or section.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface PageSetupLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Specifies a `LineNumbering` object that represents the line numbers for the `PageSetup` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.3]
            */
            lineNumbering?: Word.Interfaces.LineNumberingLoadOptions;
            /**
             * Specifies whether Microsoft Word prints the document as a booklet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldPrinting?: boolean;
            /**
             * Specifies the number of pages for each booklet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldPrintingSheets?: boolean;
            /**
             * Specifies if Microsoft Word reverses the printing order for book fold printing of bidirectional or Asian language documents.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bookFoldReversePrinting?: boolean;
            /**
             * Specifies the distance (in points) between the bottom edge of the page and the bottom boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            bottomMargin?: boolean;
            /**
             * Specifies the number of characters per line in the document grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            charsLine?: boolean;
            /**
             * Specifies whether the first page has a different header and footer.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            differentFirstPageHeaderFooter?: boolean;
            /**
             * Specifies the distance between the footer and the bottom of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            footerDistance?: boolean;
            /**
             * Specifies the amount (in points) of extra margin space added to each page in a document or section for binding.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutter?: boolean;
            /**
             * Specifies on which side the gutter appears in a document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutterPosition?: boolean;
            /**
             * Specifies whether Microsoft Word uses gutters for the current document based on a right-to-left language or a left-to-right language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            gutterStyle?: boolean;
            /**
             * Specifies the distance between the header and the top of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            headerDistance?: boolean;
            /**
             * Specifies the layout mode for the current document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            layoutMode?: boolean;
            /**
             * Specifies the distance (in points) between the left edge of the page and the left boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            leftMargin?: boolean;
            /**
             * Specifies the number of lines per page in the document grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            linesPage?: boolean;
            /**
             * Specifies if the inside and outside margins of facing pages are the same width.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            mirrorMargins?: boolean;
            /**
             * Specifies whether odd and even pages have different headers and footers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            oddAndEvenPagesHeaderFooter?: boolean;
            /**
             * Specifies the orientation of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            orientation?: boolean;
            /**
             * Specifies the page height in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageHeight?: boolean;
            /**
             * Specifies the page width in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            pageWidth?: boolean;
            /**
             * Specifies the paper size of the page.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            paperSize?: boolean;
            /**
             * Specifies the distance (in points) between the right edge of the page and the right boundary of the body text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            rightMargin?: boolean;
            /**
             * Specifies the reading order and alignment for the specified sections.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sectionDirection?: boolean;
            /**
             * Specifies the type of section break for the specified object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            sectionStart?: boolean;
            /**
             * Specifies whether to show the grid.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            showGrid?: boolean;
            /**
             * Specifies if endnotes are printed at the end of the next section that doesn't suppress endnotes.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            suppressEndnotes?: boolean;
            /**
             * Specifies the top margin of the page in points.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            topMargin?: boolean;
            /**
             * Specifies whether to print two pages per sheet.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            twoPagesOnOne?: boolean;
            /**
             * Specifies the vertical alignment of text on each page in a document or section.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            verticalAlignment?: boolean;
        }
        /**
         * Represents line numbers in the left margin or to the left of each newspaper-style column.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface LineNumberingLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the numeric increment for line numbers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            countBy?: boolean;
            /**
             * Specifies the distance (in points) between the right edge of line numbers and the left edge of the document text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            distanceFromText?: boolean;
            /**
             * Specifies if line numbering is active for the specified document, section, or sections.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            isActive?: boolean;
            /**
             * Specifies the way line numbering runs; that is, whether it starts over at the beginning of a new page or section, or runs continuously.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            restartMode?: boolean;
            /**
             * Specifies the starting line number.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            startingNumber?: boolean;
        }
        /**
         * A collection of {@link Word.TextColumn} objects that represent all the columns of text in the document or a section of the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface TextColumnCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the amount of spacing (in points) after the specified paragraph or text column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            spaceAfter?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width, in points, of the specified text columns.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: boolean;
        }
        /**
         * Represents a single text column in a section.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.3]
         */
        export interface TextColumnLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * Specifies the amount of spacing (in points) after the specified paragraph or text column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            spaceAfter?: boolean;
            /**
             * Specifies the width, in points, of the specified text columns.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            width?: boolean;
        }
        /**
         * Represents a selected range or the insertion point in a Word document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         *
         * Note: {@link Word.Range | Range} objects share many of the same methods and properties as `Selection` objects. Using `Range` objects is preferable for manipulating a document when there isn't a reason to physically change the current selection.
         */
        export interface SelectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns the `Font` object that represents the character formatting of the selection.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * Specifies a `Range` object that includes the formatted text in the range or selection.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            formattedText?: Word.Interfaces.RangeLoadOptions;
            /**
            * Returns the `Range` object for the portion of the document contained in the selection.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
            * Returns the `ShadingUniversal` object for the shading formatting for the selection.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * Specifies the ending character position of the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: boolean;
            /**
             * Specifies the width in which Word fits the text in the current selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fitTextWidth?: boolean;
            /**
             * Returns whether the spelling and grammar checker ignores the selected text.
                        If the selected text contains a mix of proofed and un-proofed content, this API returns `null`.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            hasNoProofing?: boolean;
            /**
             * Returns whether the selection in the specified window or pane is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isActive?: boolean;
            /**
             * Specifies whether column selection mode is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isColumnSelectModeActive?: boolean;
            /**
             * Returns whether the selection is at the end-of-row mark in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEndOfRowMark?: boolean;
            /**
             * Specifies whether Extend mode is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isExtendModeActive?: boolean;
            /**
             * Returns whether the insertion point is at the end of a line.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isInsertionPointAtEndOfLine?: boolean;
            /**
             * Specifies whether the beginning of the selection is active.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isStartActive?: boolean;
            /**
             * Specifies whether Word has detected the language of the selected text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageDetected?: boolean;
            /**
             * Returns the language for the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageId?: boolean;
            /**
             * Returns the East Asian language for the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageIdFarEast?: boolean;
            /**
             * Returns the language for the selection that isn't classified as an East Asian language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            languageIdOther?: boolean;
            /**
             * Specifies the orientation of text in the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            orientation?: boolean;
            /**
             * Specifies the starting character position of the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: boolean;
            /**
             * Returns the number of characters in the story that contains the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyLength?: boolean;
            /**
             * Returns the story type for the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: boolean;
            /**
             * Specifies the text in the selection.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            text?: boolean;
            /**
             * Returns the selection type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Represents a collection of {@link Word.Range} objects that represents each character, word, or sentence.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface RangeScopedCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Gets the text format of the range. Use this to get and set font name, size, color, and other properties.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            font?: Word.Interfaces.FontLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns a `ListFormat` object that represents all the list formatting characteristics of the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            listFormat?: Word.Interfaces.ListFormatLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the parent body of the range.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentBody?: Word.Interfaces.BodyLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the currently supported content control that contains the range. Throws an `ItemNotFound` error if there isn't a parent content control.
            *
            * @remarks
            * [Api set: WordApi 1.1]
            */
            parentContentControl?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the currently supported content control that contains the range. If there isn't a parent content control, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentContentControlOrNullObject?: Word.Interfaces.ContentControlLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTable?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the range. Throws an `ItemNotFound` error if it isn't contained in a table cell.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCell?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table cell that contains the range. If it isn't contained in a table cell, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableCellOrNullObject?: Word.Interfaces.TableCellLoadOptions;
            /**
            * For EACH ITEM in the collection: Gets the table that contains the range. If it isn't contained in a table, then this method will return an object with its `isNullObject` property set to `true`. For further information, see {@link https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties | *OrNullObject methods and properties}.
            *
            * @remarks
            * [Api set: WordApi 1.3]
            */
            parentTableOrNullObject?: Word.Interfaces.TableLoadOptions;
            /**
            * For EACH ITEM in the collection: Returns a `ShadingUniversal` object that refers to the shading formatting for the range.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            shading?: Word.Interfaces.ShadingUniversalLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies whether the range is formatted as bold.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            bold?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the range is formatted as bold in a right-to-left language document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            boldBidirectional?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a `CharacterCase` value that represents the case of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            case?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the character width of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            characterWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the range contains combined characters.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            combineCharacters?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if Microsoft Word ignores the number of characters per line for the corresponding `Range` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            disableCharacterSpaceGrid?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the emphasis mark for a character or designated character string.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            emphasisMark?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the ending character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the width (in the current measurement units) in which Microsoft Word fits the text in the current selection or range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            fitTextWidth?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if a grammar check has been run on the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            grammarChecked?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the proofing status (spelling and grammar checking) of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            hasNoProofing?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the highlight color for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            highlightColorIndex?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the formatting for horizontal text set within vertical text.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            horizontalInVertical?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range. Use a '#' to separate the address part from the optional location part.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            hyperlink?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the ID for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            id?: boolean;
            /**
             * For EACH ITEM in the collection: Checks whether the range length is zero.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            isEmpty?: boolean;
            /**
             * For EACH ITEM in the collection: Gets if the range is collapsed and is located at the end-of-row mark in a table.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEndOfRowMark?: boolean;
            /**
             * For EACH ITEM in the collection: Gets whether the text in the range is visible on the screen.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isTextVisibleOnScreen?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the font or range is formatted as italic.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            italic?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if the font or range is formatted as italic (right-to-left languages).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            italicBidirectional?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the range of Japanese language text is hiragana or katakana.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            kana?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether Microsoft Word has detected the language of the text in the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageDetected?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a `LanguageId` value that represents the language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageId?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies an East Asian language for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdFarEast?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies a language for the range that isn't classified as an East Asian language.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.3]
             */
            languageIdOther?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if all nonprinting characters (such as hidden text, tab marks, space marks, and paragraph marks) are displayed.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            showAll?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if spelling has been checked throughout the range or document.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            spellingChecked?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the starting character position of the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the number of characters in the story that contains the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyLength?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the story type for the range.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the style name for the range. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            style?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the built-in style name for the range. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * @remarks
             * [Api set: WordApi 1.3]
             */
            styleBuiltIn?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the text of the range.
             *
             * @remarks
             * [Api set: WordApi 1.1]
             */
            text?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether Microsoft Word sets two lines of text in one and specifies the characters that enclose the text, if any.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            twoLinesInOne?: boolean;
        }
        /**
         * Represents a single bookmark in a document, selection, or range. The `Bookmark` object is a member of the `Bookmark` collection.
                    The {@link Word.BookmarkCollection} includes all the bookmarks listed in the **Bookmark** dialog box (**Insert** menu).
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface BookmarkLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `Range` object that represents the portion of the document that's contained in the `Bookmark` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Specifies the ending character position of the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: boolean;
            /**
             * Returns `true` if the bookmark is a table column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isColumn?: boolean;
            /**
             * Returns `true` if the bookmark is empty.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEmpty?: boolean;
            /**
             * Returns the name of the `Bookmark` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
            /**
             * Specifies the starting character position of the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: boolean;
            /**
             * Returns the story type for the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: boolean;
        }
        /**
         * A collection of {@link Word.Bookmark} objects that represent the bookmarks in the specified selection, range, or document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface BookmarkCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Returns a `Range` object that represents the portion of the document that's contained in the `Bookmark` object.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Specifies the ending character position of the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            end?: boolean;
            /**
             * For EACH ITEM in the collection: Returns `true` if the bookmark is a table column.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isColumn?: boolean;
            /**
             * For EACH ITEM in the collection: Returns `true` if the bookmark is empty.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            isEmpty?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the name of the `Bookmark` object.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the starting character position of the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            start?: boolean;
            /**
             * For EACH ITEM in the collection: Returns the story type for the bookmark.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            storyType?: boolean;
        }
        /**
         * Represents a single index. The `Index` object is a member of the {@link Word.IndexCollection}. The `IndexCollection` includes all the
                    indexes in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface IndexLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * Returns a `Range` object that represents the portion of the document that is contained within the index.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * Gets a value that represents how Microsoft Word classifies the first character of entries in the index.
                        See `IndexFilter` for available values.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            filter?: boolean;
            /**
             * Gets the text between alphabetical groups (entries that start with the same letter) in the index. Corresponds to
                        the **\h** switch for an {@link https://support.microsoft.com/office/adafcf4a-cb30-43f6-85c7-743da1635d9e | INDEX field}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            headingSeparator?: boolean;
            /**
             * Gets a `LanguageId` value that represents the sorting language to use for the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            indexLanguage?: boolean;
            /**
             * Gets the number of columns for each page of the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            numberOfColumns?: boolean;
            /**
             * Specifies if page numbers are aligned with the right margin in the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightAlignPageNumbers?: boolean;
            /**
             * Gets if the index contains separate headings for accented letters (for example, words that begin with "À" are under
                        one heading and words that begin with "A" are under another).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            separateAccentedLetterHeadings?: boolean;
            /**
             * Specifies the sorting criteria for the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sortBy?: boolean;
            /**
             * Specifies the leader character between entries in the index and their associated page numbers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: boolean;
            /**
             * Gets the index type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * A collection of {@link Word.Index} objects that represents all the indexes in the document.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface IndexCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
            * For EACH ITEM in the collection: Returns a `Range` object that represents the portion of the document that is contained within the index.
            *
            * @remarks
            * [Api set: WordApiDesktop 1.4]
            */
            range?: Word.Interfaces.RangeLoadOptions;
            /**
             * For EACH ITEM in the collection: Gets a value that represents how Microsoft Word classifies the first character of entries in the index.
                        See `IndexFilter` for available values.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            filter?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the text between alphabetical groups (entries that start with the same letter) in the index. Corresponds to
                        the **\h** switch for an {@link https://support.microsoft.com/office/adafcf4a-cb30-43f6-85c7-743da1635d9e | INDEX field}.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            headingSeparator?: boolean;
            /**
             * For EACH ITEM in the collection: Gets a `LanguageId` value that represents the sorting language to use for the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            indexLanguage?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the number of columns for each page of the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            numberOfColumns?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies if page numbers are aligned with the right margin in the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            rightAlignPageNumbers?: boolean;
            /**
             * For EACH ITEM in the collection: Gets if the index contains separate headings for accented letters (for example, words that begin with "À" are under
                        one heading and words that begin with "A" are under another).
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            separateAccentedLetterHeadings?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the sorting criteria for the index.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            sortBy?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the leader character between entries in the index and their associated page numbers.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            tabLeader?: boolean;
            /**
             * For EACH ITEM in the collection: Gets the index type.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            type?: boolean;
        }
        /**
         * Contains a collection of {@link Word.ListTemplate} objects in a document, list template gallery, or document template.
         *
         * @remarks
         * [Api set: WordApiDesktop 1.4]
         */
        export interface ListTemplateCollectionLoadOptions {
            /**
              Specifying `$all` for the load options loads all the scalar properties (such as `Range.address`) but not the navigational properties (such as `Range.format.fill.color`).
             */
            $all?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies the name of the list template.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.4]
             */
            name?: boolean;
            /**
             * For EACH ITEM in the collection: Specifies whether the list template is outline numbered.
             *
             * @remarks
             * [Api set: WordApiDesktop 1.1]
             */
            outlineNumbered?: boolean;
        }
    }
}
export declare namespace Word {
    /**
     * The RequestContext object facilitates requests to the Word application. Since the Office add-in and the Word application run in two different processes, the request context is required to get access to the Word object model from the add-in.
     */
    export class RequestContext extends OfficeExtension.ClientRequestContext {
        constructor(url?: string);
        readonly document: Document;
        /** [Api set: WordApi 1.3] **/
		readonly application: Application;
    }
    /**
     * Executes a batch script that performs actions on the Word object model, using the RequestContext of previously created API objects.
     * @param objects - An array of previously created API objects. The array will be validated to make sure that all of the objects share the same context. The batch will use this shared RequestContext, which means that any changes applied to these objects will be picked up by `context.sync()`.
     * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of `context.sync()`). The context parameter facilitates requests to the Word application. Since the Office add-in and the Word application run in two different processes, the RequestContext is required to get access to the Word object model from the add-in.
     */
    export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;
    /**
     * Executes a batch script that performs actions on the Word object model, using the RequestContext of a previously created API object. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.
     * @param object - A previously created API object. The batch will use the same RequestContext as the passed-in object, which means that any changes applied to the object will be picked up by `context.sync()`.
     * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of `context.sync()`). The context parameter facilitates requests to the Word application. Since the Office add-in and the Word application run in two different processes, the RequestContext is required to get access to the Word object model from the add-in.
     */
    export function run<T>(object: OfficeExtension.ClientObject, batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;
    /**
     * Executes a batch script that performs actions on the Word object model, using a new RequestContext. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.
     * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of `context.sync()`). The context parameter facilitates requests to the Word application. Since the Office add-in and the Word application run in two different processes, the RequestContext is required to get access to the Word object model from the add-in.
     */
    export function run<T>(batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;
}


////////////////////////////////////////////////////////////////
//////////////////////// End Word APIs /////////////////////////
////////////////////////////////////////////////////////////////