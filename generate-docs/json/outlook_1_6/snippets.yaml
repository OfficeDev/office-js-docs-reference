'Office.AppointmentCompose#addFileAttachmentAsync:member(1)':
  - |-
    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }

    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        const options = { 'asyncContext': { var1: 1, var2: 2 } };

        const attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    const attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
'Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    base64String =
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });

    ...

    // Set the signature for the current item with inline image.

    const modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          const signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );
'Office.AppointmentCompose#addHandlerAsync:member(1)':
  - >-
    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            const attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged,
    myHandlerFunction, myCallback);
'Office.AppointmentCompose#addItemAttachmentAsync:member(1)':
  - |-
    // The following example adds an existing Outlook item as an attachment
    // with the name `My Attachment`.
    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }

    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        const itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        const options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    const attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
'Office.AppointmentCompose#body:member':
  - >-
    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of an object that is passed as the result
    parameter to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
'Office.AppointmentCompose#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();
'Office.AppointmentCompose#disableClientSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Disable the client signature.

    Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("disableClientSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#end:member':
  - >-
    // The following example sets the end time of an appointment in compose mode
    by

    // using the `setAsync` method of the `Time` object.

    const endTime = new Date("3/14/2015");

    const options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };

    Office.context.mailbox.item.end.setAsync(endTime, options, function(result)
    {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync method.
            console.debug("End Time " + result.asyncContext.verb);
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.end.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment ends: ${result.value}`);
    });


    ...

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      const end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });
'Office.AppointmentCompose#enhancedLocation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      const places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });


    ...

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) =>
    {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });


    ...

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result)
    => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to remove locations. Error message: ${result.error.message}`);
      }
    });
'Office.AppointmentCompose#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    // Gets the attachments of the current message or appointment in compose
    mode.

    const options = { asyncContext: { currentItem: item } };

    // The getAttachmentsAsync call can only be used in compose mode.

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
      if (result.status === Office.AsyncResultStatus.Failed) {
        console.log(result.error.message);
        return;
      }

      if (result.value.length <= 0) {
        console.log("Mail item has no attachments.");
        return;
      }

      for (let i = 0; i < result.value.length; i++) {
        // Log the attachment type and its contents to the console.
        result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
      }
    }
'Office.AppointmentCompose#getAttachmentsAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (let i = 0; i < result.value.length; i++) {
                    const attachment = result.value[i];
                    console.log("ID: " + attachment.id + "\n" +
                        "Name: " + attachment.name + "\n" +
                        "Size: " + attachment.size + "\n" +
                        "isInline: " + attachment.isInline);
                    switch (attachment.attachmentType) {
                        case Office.MailboxEnums.AttachmentType.Cloud:
                            console.log("Attachment type: Attachment is stored in a cloud location.");
                            break;
                        case Office.MailboxEnums.AttachmentType.File:
                            console.log("Attachment type: Attachment is a file.");
                            break;
                        case Office.MailboxEnums.AttachmentType.Item:
                            console.log("Attachment type: Attachment is an Exchange item.");
                            break;
                    }
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });
'Office.AppointmentCompose#getInitializationContextAsync:member(1)':
  - |-
    // Get the initialization context (if present).
    Office.context.mailbox.item.getInitializationContextAsync((asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            if (asyncResult.value.length > 0) {
                // The value is a string, parse to an object.
                const context = JSON.parse(asyncResult.value);
                // Do something with context.
            } else {
                // Empty context, treat as no context.
            }
        } else {
            // Handle the error.
        }
    });
'Office.AppointmentCompose#getItemIdAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.AppointmentCompose#getSelectedDataAsync:member(1)':
  - |-
    // Get selected data.
    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };

    function getCallback(asyncResult) {
        const text = asyncResult.value.data;
        const prop = asyncResult.value.sourceProperty;

        console.log("Selected text in " + prop + ": " + text);
    }
'Office.AppointmentCompose#getSelectedDataAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const text = asyncResult.value.data;
        const prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.AppointmentCompose#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.AppointmentCompose#isAllDayEvent:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Is this an all-day event? " + asyncResult.value);
      } else {
        console.log("Failed to get if this is an all-day event. Error: " + JSON.stringify(asyncResult.error));
      }
    });


    ...

    Office.context.mailbox.item.isAllDayEvent.setAsync(true,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Failed to set all-day event: " + JSON.stringify(asyncResult.error));
      } else {
        console.log("Appointment set to all-day event.");
      }
    });
'Office.AppointmentCompose#isClientSignatureEnabledAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Check if the client signature is currently enabled.

    Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)':
  - >-
    // The following example shows how to use the loadCustomPropertiesAsync
    method

    // to asynchronously load custom properties that are specific to the current
    item.

    // The example also shows how to use the saveAsync method to save these
    properties

    // back to the server. After loading the custom properties, the example uses
    the

    // get method to read the custom property myProp, the set method to write
    the

    // custom property otherProp, and then finally calls the saveAsync method to
    save

    // the custom properties.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready method.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            const mailbox = Office.context.mailbox;
            mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
        });
    };


    function customPropsCallback(asyncResult) {
        const customProps = asyncResult.value;
        const myProp = customProps.get("myProp");

        customProps.set("otherProp", "value");
        customProps.saveAsync(saveCallback);
    }


    function saveCallback(asyncResult) {

    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        const dataKey = Object.keys(customProps)[0];
        const data = customProps[dataKey];
        for (let propertyName in data)
        {
          let propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.AppointmentCompose#location:member':
  - >-
    const userContext = { value : 1 };

    Office.context.mailbox.item.location.getAsync( { context: userContext},
    callback);


    function callback(asyncResult) {
        const context = asyncResult.context;
        const location = asyncResult.value;
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    Office.context.mailbox.item.location.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment location: ${result.value}`);
    });


    ...

    const location = "my office";

    Office.context.mailbox.item.location.setAsync(location, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set location to ${location}`);
    });
'Office.AppointmentCompose#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          


    ...

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);

    ...

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.AppointmentCompose#optionalAttendees:member':
  - >-
    Office.context.mailbox.item.optionalAttendees.setAsync(
    ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.optionalAttendees.addAsync(
    ['jason@contoso.com'] );

    Office.context.mailbox.item.optionalAttendees.getAsync(callback);


    function callback(asyncResult) {
        const arrayOfOptionalAttendeesRecipients = asyncResult.value;
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptOptionalAttendees = asyncResult.value;
        for (let i = 0; i < apptOptionalAttendees.length; i++) {
          console.log(
            "Optional attendees: " +
              apptOptionalAttendees[i].displayName +
              " (" +
              apptOptionalAttendees[i].emailAddress +
              ") - response: " +
              apptOptionalAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailOptional")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.optionalAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting optional attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#organizer:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml

    Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptOrganizer = asyncResult.value;
        console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const recurrence = asyncResult.value;
        if (recurrence === null) {
          console.log("This is a single appointment.");
        } else {
          console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.AppointmentCompose#removeAttachmentAsync:member(1)':
  - |-
    // The following code removes an attachment with an identifier of '0'.
    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );
'Office.AppointmentCompose#requiredAttendees:member':
  - >-
    Office.context.mailbox.item.requiredAttendees.setAsync(
    ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.requiredAttendees.addAsync(
    ['jason@contoso.com'] );

    Office.context.mailbox.item.requiredAttendees.getAsync(callback);


    function callback(asyncResult) {
        const arrayOfRequiredAttendeesRecipients = asyncResult.value;
        console.log(JSON.stringify(arrayOfRequiredAttendeesRecipients));
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptRequiredAttendees = asyncResult.value;
        for (let i = 0; i < apptRequiredAttendees.length; i++) {
          console.log(
            "Required attendees: " +
              apptRequiredAttendees[i].displayName +
              " (" +
              apptRequiredAttendees[i].emailAddress +
              ") - response: " +
              apptRequiredAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailRequired")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.requiredAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting required attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#saveAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/save.yaml

    Office.context.mailbox.item.saveAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`saveAsync succeeded, itemId is ${result.value}`);
      }
      else {
        console.error(`saveAsync failed with message ${result.error.message}`);
      }
    });
'Office.AppointmentCompose#saveAsync:member(2)':
  - |-
    Office.context.mailbox.item.saveAsync(
        function callback(result) {
            // Process the result.
        });

    // The following is an example of the
    // `result` parameter passed to the
    // callback function. The `value`
    // property contains the item ID of
    // the item.
    {
        "value": "AAMkADI5...AAA=",
        "status": "succeeded"
    }
'Office.AppointmentCompose#sensitivity:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Sensitivity: " + asyncResult.value);
      } else {
        console.log("Failed to get sensitivity: " + JSON.stringify(asyncResult.error));
      }
    });


    ...

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );
'Office.AppointmentCompose#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    const seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.AppointmentCompose#sessionData:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.AppointmentCompose#setSelectedDataAsync:member(1)':
  - >-
    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", {
    coercionType : "html" });
  - Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced",
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentCompose#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });


    ...

    const start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });
'Office.AppointmentCompose#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });


    ...

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });
'Office.AppointmentRead#addHandlerAsync:member(1)':
  - >-
    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            const attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged,
    myHandlerFunction, myCallback);
'Office.AppointmentRead#attachments:member':
  - >-
    // The following code builds an HTML string with details of all attachments
    on the current item.

    const item = Office.context.mailbox.item;

    let outputString = "";


    if (item.attachments.length > 0) {
        for (let i = 0 ; i < item.attachments.length ; i++) {
            const attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachments-read.yaml

    const attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);
'Office.AppointmentRead#body:member':
  - >-
    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the
    callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
'Office.AppointmentRead#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.AppointmentRead#dateTimeCreated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time:
    ${Office.context.mailbox.item.dateTimeCreated}`);
'Office.AppointmentRead#dateTimeModified:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified:
    ${Office.context.mailbox.item.dateTimeModified}`);
'Office.AppointmentRead#displayReplyAllForm:member(1)':
  - |-
    // The following code passes a string to the `displayReplyAllForm` method.
    Office.context.mailbox.item.displayReplyAllForm('hello there');
    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

    // Reply with an empty body.
    Office.context.mailbox.item.displayReplyAllForm({});

    // Reply with just a body.
    Office.context.mailbox.item.displayReplyAllForm(
    {
    'htmlBody' : 'hi'
    });

    // Reply with a body and a file attachment.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });

    // Reply with a body and an item attachment.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });

    // Reply with a body, file attachment, item attachment, and a callback.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with
    <b>some bold text</b>.");
'Office.AppointmentRead#displayReplyAllFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllFormAsync("This is a reply ALL
    with <b>some bold text</b>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
'Office.AppointmentRead#displayReplyForm:member(1)':
  - |-
    // The following code passes a string to the `displayReplyForm` method.
    Office.context.mailbox.item.displayReplyForm('hello there');
    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

    // Reply with an empty body.
    Office.context.mailbox.item.displayReplyForm({});

    // Reply with just a body.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi'
    });

    // Reply with a body and a file attachment.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });

    // Reply with a body and an item attachment.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });

    // Reply with a body, file attachment, item attachment, and a callback.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some
    text in italics</i>.");


    ...

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });
'Office.AppointmentRead#displayReplyFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyFormAsync("This is a reply with
    <i>some text in italics</i>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });


    ...

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.item.displayReplyFormAsync(
      {
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.AppointmentRead#end:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);
'Office.AppointmentRead#enhancedLocation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      const places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });
'Office.AppointmentRead#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    // Gets the attachments of the current message or appointment in read mode.

    // The item.attachments call can only be used in read mode.

    const attachments = item.attachments;

    if (attachments.length <= 0) {
      console.log("Mail item has no attachments.");
      return;
    }


    for (let i = 0; i < attachments.length; i++) {
      // Log the attachment type and its contents to the console.
      item.getAttachmentContentAsync(attachments[i].id, handleAttachmentsCallback);
    }
'Office.AppointmentRead#getEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    const entities = Office.context.mailbox.item.getEntities();

    let entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }
'Office.AppointmentRead#getEntitiesByType:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
'Office.AppointmentRead#getFilteredEntitiesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address
    that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
'Office.AppointmentRead#getInitializationContextAsync:member(1)':
  - |-
    // Get the initialization context (if present).
    Office.context.mailbox.item.getInitializationContextAsync((asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            if (asyncResult.value.length > 0) {
                // The value is a string, parse to an object.
                const context = JSON.parse(asyncResult.value);
                // Do something with context.
            } else {
                // Empty context, treat as no context.
            }
        } else {
            // Handle the error.
        }
    });
'Office.AppointmentRead#getRegExMatches:member(1)':
  - >-
    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits"
    RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
    RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties:
    `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    const allMatches = Office.context.mailbox.item.getRegExMatches();

    const fruits = allMatches.fruits;

    const veggies = allMatches.veggies;
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());
'Office.AppointmentRead#getRegExMatchesByName:member(1)':
  - >-
    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits"
    RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
    RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties:
    `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    const fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    const veggies =
    Office.context.mailbox.item.getRegExMatchesByName("veggies");
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
'Office.AppointmentRead#getSelectedEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    const entities = Office.context.mailbox.item.getSelectedEntities();

    let entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }
'Office.AppointmentRead#getSelectedRegExMatches:member(1)':
  - >-
    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits"
    RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
    RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties:
    `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of matches for the

    // regular expression rule elements `fruits` and `veggies`, which are

    // specified in the manifest.

    const selectedMatches =
    Office.context.mailbox.item.getSelectedRegExMatches();

    const fruits = selectedMatches.fruits;

    const veggies = selectedMatches.veggies;
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    const matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }
'Office.AppointmentRead#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.AppointmentRead#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.AppointmentRead#isAllDayEvent:member':
  - |-
    const isAllDayEvent = Office.context.mailbox.item.isAllDayEvent;
    console.log("Is this an all-day event? " + isAllDayEvent);
'Office.AppointmentRead#itemClass:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);
'Office.AppointmentRead#itemId:member':
  - |-
    // The following code checks for the presence of an item
    // identifier. If the `itemId` property returns `null` or
    // `undefined`, it saves the item to the store and gets the
    // item identifier from the asynchronous result.
    // **Important**: `saveAsync` was introduced with requirement set 1.3
    // so you can't get the `itemId` in Compose mode in earlier sets.
    let itemId = Office.context.mailbox.item.itemId;
    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }
'Office.AppointmentRead#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.AppointmentRead#loadCustomPropertiesAsync:member(1)':
  - >-
    // The following example shows how to use the loadCustomPropertiesAsync
    method

    // to asynchronously load custom properties that are specific to the current
    item.

    // The example also shows how to use the saveAsync method to save these
    properties

    // back to the server. After loading the custom properties, the example uses
    the

    // get method to read the custom property myProp, the set method to write
    the

    // custom property otherProp, and then finally calls the saveAsync method to
    save

    // the custom properties.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready method.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            const mailbox = Office.context.mailbox;
            mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
        });
    };


    function customPropsCallback(asyncResult) {
        const customProps = asyncResult.value;
        const myProp = customProps.get("myProp");

        customProps.set("otherProp", "value");
        customProps.saveAsync(saveCallback);
    }


    function saveCallback(asyncResult) {

    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        const dataKey = Object.keys(customProps)[0];
        const data = customProps[dataKey];
        for (let propertyName in data)
        {
          let propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.AppointmentRead#location:member':
  - |-
    const location = Office.context.mailbox.item.location;
    console.log("location: " + location);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location:
    ${Office.context.mailbox.item.location}`);
'Office.AppointmentRead#normalizedSubject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject:
    ${Office.context.mailbox.item.normalizedSubject}`);
'Office.AppointmentRead#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          


    ...

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);

    ...

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.AppointmentRead#optionalAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-optional-attendees-appointment-attendee.yaml

    const apptOptionalAttendees = Office.context.mailbox.item.optionalAttendees;

    console.log("Optional attendees:");

    for (let i = 0; i < apptOptionalAttendees.length; i++) {
      console.log(
        apptOptionalAttendees[i].displayName +
          " (" +
          apptOptionalAttendees[i].emailAddress +
          ") - response: " +
          apptOptionalAttendees[i].appointmentResponse
      );
    }
'Office.AppointmentRead#organizer:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-attendee.yaml

    const apptOrganizer = Office.context.mailbox.item.organizer;

    console.log("Organizer: " + apptOrganizer.displayName + " (" +
    apptOrganizer.emailAddress + ")");
'Office.AppointmentRead#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-recurrence-read.yaml

    const recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }
'Office.AppointmentRead#requiredAttendees:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-required-attendees-appointment-attendee.yaml

    const apptRequiredAttendees = Office.context.mailbox.item.requiredAttendees;

    console.log("Required attendees:");

    for (let i = 0; i < apptRequiredAttendees.length; i++) {
      console.log(
        apptRequiredAttendees[i].displayName +
          " (" +
          apptRequiredAttendees[i].emailAddress +
          ") - response: " +
          apptRequiredAttendees[i].appointmentResponse
      );
    }
'Office.AppointmentRead#sensitivity:member':
  - |-
    const sensitivity = Office.context.mailbox.item.sensitivity;
    console.log("Sensitivity: " + sensitivity);
'Office.AppointmentRead#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    const seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.AppointmentRead#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);
'Office.AppointmentRead#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);
'Office.AttachmentContent#format:member':
  - |-
    const item = Office.context.mailbox.item;
    const options = {asyncContext: {currentItem: item}};
    item.getAttachmentsAsync(options, callback);

    function callback(result) {
        if (result.value.length > 0) {
            for (let i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }

    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }
'Office.AttachmentDetails:interface':
  - |-
    // The following code builds an HTML string with details
    // of all attachments on the current item.
    const item = Office.context.mailbox.item;
    let outputString = "";

    if (item.attachments.length > 0) {
        for (let i = 0 ; i < item.attachments.length ; i++) {
            const attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }

    console.log(outputString);
'Office.Body#appendOnSendAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/append-text-on-send.yaml

    // This snippet appends text to the end of the message or appointment's body
    once it's sent.

    const text = $("#text-field").val();


    // It's recommended to call getTypeAsync and pass its returned value to the
    options.coercionType parameter of the appendOnSendAsync call.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      const bodyFormat = asyncResult.value;
      Office.context.mailbox.item.body.appendOnSendAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log(`"${text}" will be appended to the body once the message or appointment is sent. Send the mail item to test this feature.`);
      });
    });
'Office.Body#getAsync:member(1)':
  - >-
    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the
    callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
'Office.Body#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/add-inline-base64-image.yaml

    const mailItem = Office.context.mailbox.item;

    const base64String =
      "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAnUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN0S+bUAAAAMdFJOUwAQIDBAUI+fr7/P7yEupu8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF8SURBVGhD7dfLdoMwDEVR6Cspzf9/b20QYOthS5Zn0Z2kVdY6O2WULrFYLBaLxd5ur4mDZD14b8ogWS/dtxV+dmx9ysA2QUj9TQRWv5D7HyKwuIW9n0vc8tkpHP0W4BOg3wQ8wtlvA+PC1e8Ao8Ld7wFjQtHvAiNC2e8DdqHqKwCrUPc1gE1AfRVgEXBfB+gF0lcCWoH2tYBOYPpqQCNwfT3QF9i+AegJfN8CtAWhbwJagtS3AbIg9o2AJMh9M5C+SVGBvx6zAfmT0r+Bv8JMwP4kyFPir+cswF5KL3WLv14zAFBCLf56Tw9cparFX4upgaJUtPhrOS1QlY5W+vWTXrGgBFB/b72ev3/0igUdQPppP/nfowfKUUEFcP207y/yxKmgAYQ+PywoAFOfCH3A2MdCFzD3kdADBvq10AGG+pXQBgb7pdAEhvuF0AIc/VtoAK7+JciAs38KIuDugyAC/v4hiMCE/i7IwLRBsh68N2WQjMVisVgs9i5bln8LGScNcCrONQAAAABJRU5ErkJggg==";

    // Get the current body of the message or appointment.

    mailItem.body.getAsync(Office.CoercionType.Html, (bodyResult) => {
      if (bodyResult.status === Office.AsyncResultStatus.Succeeded) {
        // Insert the base64 image to the beginning of the body.
        const options = { isInline: true, asyncContext: bodyResult.value };
        mailItem.addFileAttachmentFromBase64Async(base64String, "sample.png", options, (attachResult) => {
          if (attachResult.status === Office.AsyncResultStatus.Succeeded) {
            let body = attachResult.asyncContext;
            body = body.replace("<p class=MsoNormal>", `<p class=MsoNormal><img src="cid:sample.png">`);

            mailItem.body.setAsync(body, { coercionType: Office.CoercionType.Html }, (setResult) => {
              if (setResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log("Inline base64 image added to the body.");
              } else {
                console.log(setResult.error.message);
              }
            });
          } else {
            console.log(attachResult.error.message);
          }
        });
      } else {
        console.log(bodyResult.error.message);
      }
    });
'Office.Body#getTypeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-body-format.yaml

    // Get the mail item's body format (plain text or HTML) and log it to the
    console.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      console.log("Body format: " + asyncResult.value);
    });
'Office.Body#prependAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/prepend-text-to-item-body.yaml

    /* This snippet adds text to the beginning of the message or appointment's
    body. 
      
      When prepending a link in HTML markup to the body, you can disable the online link preview by setting the anchor tag's id attribute to "LPNoLP". For example, '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>'.
    */

    const text = $("#text-field").val();


    // It's recommended to call getTypeAsync and pass its returned value to the
    options.coercionType parameter of the prependAsync call.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      const bodyFormat = asyncResult.value;
      Office.context.mailbox.item.body.prependAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log(`"${text}" prepended to the body.`);
      });
    });
'Office.Body#prependOnSendAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/prepend-text-on-send.yaml

    // This snippet prepends text to the beginning of the message or
    appointment's body once it's sent.

    const text = $("#text-field").val();


    // It's recommended to call getTypeAsync and pass its returned value to the
    options.coercionType parameter of the prependOnSendAsync call.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      const bodyFormat = asyncResult.value;
      Office.context.mailbox.item.body.prependOnSendAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log(`"${text}" will be prepended to the body once the message or appointment is sent. Send the mail item to test this feature.`);
      });
    });
'Office.Body#setAsync:member(1)':
  - >-
    // When including links in HTML markup, you can disable online link preview

    // by setting the id attribute on the anchor (<a>) to "LPNoLP".

    Office.context.mailbox.item.body.setAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
    Office.context.mailbox.item.body.setAsync(
        "<b>(replaces all body, including threads you are replying to that may be on the bottom)</b>",
        { coercionType: "html", asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Process the result.
    });


    // The following is an example of the result parameter passed to the
    callback function.

    {
        "value":null,
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/add-inline-base64-image.yaml

    const mailItem = Office.context.mailbox.item;

    const base64String =
      "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAnUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN0S+bUAAAAMdFJOUwAQIDBAUI+fr7/P7yEupu8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF8SURBVGhD7dfLdoMwDEVR6Cspzf9/b20QYOthS5Zn0Z2kVdY6O2WULrFYLBaLxd5ur4mDZD14b8ogWS/dtxV+dmx9ysA2QUj9TQRWv5D7HyKwuIW9n0vc8tkpHP0W4BOg3wQ8wtlvA+PC1e8Ao8Ld7wFjQtHvAiNC2e8DdqHqKwCrUPc1gE1AfRVgEXBfB+gF0lcCWoH2tYBOYPpqQCNwfT3QF9i+AegJfN8CtAWhbwJagtS3AbIg9o2AJMh9M5C+SVGBvx6zAfmT0r+Bv8JMwP4kyFPir+cswF5KL3WLv14zAFBCLf56Tw9cparFX4upgaJUtPhrOS1QlY5W+vWTXrGgBFB/b72ev3/0igUdQPppP/nfowfKUUEFcP207y/yxKmgAYQ+PywoAFOfCH3A2MdCFzD3kdADBvq10AGG+pXQBgb7pdAEhvuF0AIc/VtoAK7+JciAs38KIuDugyAC/v4hiMCE/i7IwLRBsh68N2WQjMVisVgs9i5bln8LGScNcCrONQAAAABJRU5ErkJggg==";

    // Get the current body of the message or appointment.

    mailItem.body.getAsync(Office.CoercionType.Html, (bodyResult) => {
      if (bodyResult.status === Office.AsyncResultStatus.Succeeded) {
        // Insert the base64 image to the beginning of the body.
        const options = { isInline: true, asyncContext: bodyResult.value };
        mailItem.addFileAttachmentFromBase64Async(base64String, "sample.png", options, (attachResult) => {
          if (attachResult.status === Office.AsyncResultStatus.Succeeded) {
            let body = attachResult.asyncContext;
            body = body.replace("<p class=MsoNormal>", `<p class=MsoNormal><img src="cid:sample.png">`);

            mailItem.body.setAsync(body, { coercionType: Office.CoercionType.Html }, (setResult) => {
              if (setResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log("Inline base64 image added to the body.");
              } else {
                console.log(setResult.error.message);
              }
            });
          } else {
            console.log(attachResult.error.message);
          }
        });
      } else {
        console.log(bodyResult.error.message);
      }
    });
'Office.Body#setSelectedDataAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/replace-selected-text.yaml

    /* This snippet replaces selected text in a message or appointment's body
    with specified text.
      
      If you want to use a link in HTML markup as a value of the setSelectedDataAsync call's data parameter, you can disable online link preview by setting the anchor tag's id attribute to "LPNoLP". For example, '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>'.
    */

    const text = $("#text-field").val();


    // It's recommended to call getTypeAsync and pass its returned value to the
    options.coercionType parameter of the prependAsync call.

    Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Action failed with error: " + asyncResult.error.message);
        return;
      }

      const bodyFormat = asyncResult.value;
      Office.context.mailbox.item.body.setSelectedDataAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log(`Replaced selected text with "${text}".`);
      });
    });
'Office.Body#setSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    const modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          const signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );


    ...

    // Set the signature for the current item.

    const signature = $("#signature").val();

    console.log(`Setting signature to "${signature}".`);

    Office.context.mailbox.item.body.setSignatureAsync(signature,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("setSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Categories#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.CategoryDetails:interface':
  - |-
    const categories = [
        {
            "displayName": "Urgent!",
            "color": Office.MailboxEnums.CategoryColor.Preset0
        }
    ];
'Office.Contact:interface':
  - >-
    const item = Office.context.mailbox.item;

    // Get an array of strings that represent contacts in the current item's
    body.

    const contacts =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.Contact);

    console.log("There are " + contacts.length + " contacts.")

    contacts.forEach(function (contact) {
        console.log("Person name: " + JSON.stringify(contact.personName));
        console.log("Business name: " + JSON.stringify(contact.businessName));
        console.log("Addresses: " + JSON.stringify(contact.addresses));
        console.log("Phone numbers: " + JSON.stringify(contact.phoneNumbers));
        console.log("Email addresses: " + JSON.stringify(contact.emailAddresses));
        console.log("Urls: " + JSON.stringify(contact.urls));
    });


    /* Example email that includes contact details of sender, John Smith:

    Hi there,

    I have received the package.


    Thanks.

    John Smith

    Account Manager

    Contoso Corporation

    1 Contoso Way, Redmond, WA 98052

    john.smith@contoso.com

    111-111-1111

    https://contoso.com/john.smith

    */
'Office.CustomProperties#get:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    const propertyName = $("#propertyName").val();

    const propertyValue = customProps.get(propertyName);

    $("#propertyValue").val(propertyValue);

    console.log(`The value of custom property "${propertyName}" is
    "${propertyValue}".`);
'Office.CustomProperties#remove:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    const propertyName = $("#propertyName").val();

    customProps.remove(propertyName);

    console.log(`Custom property "${propertyName}" removed.`);
'Office.CustomProperties#saveAsync:member(1)':
  - |-
    // The following JavaScript code sample shows how to asynchronously use
    // the loadCustomPropertiesAsync method to load custom properties that
    // are specific to the current item, and the saveAsync method to save
    // these to the mail item. After loading the custom properties,
    // the code sample uses the get method to read the custom property myProp,
    // the set method to write the custom property myProp, and then finally
    // calls the saveAsync method to save the custom properties.

    // The initialize function is required for all add-ins.
    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready method.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            const item = Office.context.mailbox.item;
            item.loadCustomPropertiesAsync(customPropsCallback);
        });
    };

    function customPropsCallback(asyncResult) {
        const customProps = asyncResult.value;
        const myProp = customProps.get("myProp");
        console.log("myProp: " + myProp); // First run on current item will return `undefined`.

        // Set myProp custom property.
        customProps.set("myProp", "value");
        customProps.saveAsync(saveCallback);
    }

    function saveCallback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
            console.error(asyncResult.error.message);
        }
        else {
            // Async call to save custom properties completed.
            // Proceed to do the appropriate for your add-in.
        }
    }
'Office.CustomProperties#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    const propertyName = $("#propertyName").val();

    const propertyValue = $("#propertyValue").val();

    customProps.set(propertyName, propertyValue);

    console.log(`Custom property "${propertyName}" set to value
    "${propertyValue}".`);
'Office.DelayDeliveryTime:interface':
  - >-
    const date_1 = new Date();

    const date_2 = new Date(date_1.getTime() + 2*60000);  // Sending with
    2-minute delay.

    Office.context.mailbox.item.delayDeliveryTime.setAsync(
        date_2,
        function(callback) {
            console.log(callback);
        });
'Office.EmailAddressDetails#appointmentResponse:member':
  - >-
    // The following sample provides the responses from required attendees.

    // Note that this sample needs the add-in to be in Appointment Read
    (Attendee) mode.

    const requiredAttendees = Office.context.mailbox.item.requiredAttendees;

    console.log("There are " + requiredAttendees.length + " required
    attendees.")

    requiredAttendees.forEach(function (requiredAttendee) {
        console.log("Attendee " + requiredAttendee.displayName + ": " + requiredAttendee.appointmentResponse);
    });
'Office.EmailAddressDetails#displayName:member':
  - |-
    const organizerName = Office.context.mailbox.item.organizer.displayName;
    console.log("Organizer: " + organizerName);
'Office.EmailAddressDetails#emailAddress:member':
  - |-
    const organizerAddress = Office.context.mailbox.item.organizer.emailAddress;
    console.log("Organizer's email address: " + organizerAddress);
'Office.EmailAddressDetails#recipientType:member':
  - >-
    const requiredAttendees = Office.context.mailbox.item.requiredAttendees;

    console.log("There are " + requiredAttendees.length + " required
    attendees.")

    requiredAttendees.forEach(function (requiredAttendee) {
        console.log("Attendee " + requiredAttendee.displayName + ": " + requiredAttendee.recipientType);
    });
'Office.EmailUser:interface':
  - >-
    // The following example is an excerpt from a larger sample.

    // For the full sample, visit
    https://learn.microsoft.com/office/dev/add-ins/outlook/extract-entity-strings-from-an-item.


    // Gets instances of the task suggestion entity on the item.

    function myGetTaskSuggestions()

    {
        let htmlText = "";

        // Gets an array of TaskSuggestion objects, each array element 
        // containing an instance of a task suggestion entity from 
        // the current item.
        const tasksArray = _MyEntities.taskSuggestions;

        // Iterates through each instance of a task suggestion.
        for (let i = 0; i < tasksArray.length; i++)
        {
            // Gets the string that was identified as a task suggestion.
            htmlText += "TaskString : <span>" + 
            tasksArray[i].taskString + "</span><br/>";

            // Gets an array of assignees for that instance of a task 
            // suggestion. Each assignee is represented by an 
            // EmailUser object.
            let assigneesArray = tasksArray[i].assignees;
            for (let j = 0; j < assigneesArray.length; j++)
            {
                htmlText += "Assignee : ( ";
                // Gets the displayName property of the assignee.
                htmlText += "displayName = <span>" + assigneesArray[j].displayName + 
                "</span> , ";

                // Gets the emailAddress property of each assignee.
                // This is the SMTP address of the assignee.
                htmlText += "emailAddress = <span>" + assigneesArray[j].emailAddress + 
                    "</span>";

                htmlText += " )<br/>";
            }

            htmlText += "<hr/>";
        }

        document.getElementById("entities_box").innerHTML = htmlText;
    }
'Office.EnhancedLocation#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) =>
    {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });
'Office.EnhancedLocation#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      const places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });
'Office.EnhancedLocation#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result)
    => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to remove locations. Error message: ${result.error.message}`);
      }
    });
'Office.Entities#addresses:member':
  - >-
    const item = Office.context.mailbox.item;

    const addresses =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
'Office.Entities#contacts:member':
  - >-
    const item = Office.context.mailbox.item;

    const contacts =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.Contact);
'Office.Entities#emailAddresses:member':
  - >-
    const item = Office.context.mailbox.item;

    const emailAddresses =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.EmailAddress);
'Office.Entities#meetingSuggestions:member':
  - >-
    const item = Office.context.mailbox.item;

    const meetingSuggestions =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.MeetingSuggestion);
'Office.Entities#phoneNumbers:member':
  - >-
    const item = Office.context.mailbox.item;

    const phoneNumbers =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.PhoneNumber);
'Office.Entities#taskSuggestions:member':
  - >-
    const item = Office.context.mailbox.item;

    const taskSuggestions =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.TaskSuggestion);
'Office.Entities#urls:member':
  - |-
    const item = Office.context.mailbox.item;
    const urls = item.getEntitiesByType(Office.MailboxEnums.EntityType.Url);
'Office.From#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-compose.yaml

    Office.context.mailbox.item.from.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgFrom = asyncResult.value;
        console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.InternetHeaders#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.getAsync(
      ["x-preferred-fruit", "x-preferred-vegetable", "x-best-vegetable", "x-nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected headers: " + JSON.stringify(asyncResult.value));
        } else {
          console.log("Error getting selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.InternetHeaders#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.removeAsync(
      ["x-best-vegetable", "x-nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Successfully removed selected headers");
        } else {
          console.log("Error removing selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.InternetHeaders#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.setAsync(
      { "x-preferred-fruit": "orange", "x-preferred-vegetable": "broccoli", "x-best-vegetable": "spinach" },
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Successfully set headers");
        } else {
          console.log("Error setting headers: " + JSON.stringify(asyncResult.error));
        }
      }

    );
'Office.IsAllDayEvent#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Is this an all-day event? " + asyncResult.value);
      } else {
        console.log("Failed to get if this is an all-day event. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.IsAllDayEvent#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.setAsync(true,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Failed to set all-day event: " + JSON.stringify(asyncResult.error));
      } else {
        console.log("Appointment set to all-day event.");
      }
    });
'Office.Location#getAsync:member(1)':
  - >-
    const userContext = { value : 1 };

    Office.context.mailbox.item.location.getAsync( { context: userContext},
    callback);


    function callback(asyncResult) {
        const context = asyncResult.context;
        const location = asyncResult.value;
    }
'Office.Location#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    Office.context.mailbox.item.location.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment location: ${result.value}`);
    });
'Office.Location#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    const location = "my office";

    Office.context.mailbox.item.location.setAsync(location, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set location to ${location}`);
    });
'Office.LocationDetails:interface':
  - |-
    Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

    function callbackFunction(asyncResult) {
        asyncResult.value.forEach(function (place) {
            console.log("Display name: " + place.displayName);
            console.log("Type: " + place.locationIdentifier.type);
            if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
                console.log("Email address: " + place.emailAddress);
            }
        });
    }
'Office.LocationIdentifier:interface':
  - |-
    const locations = [
        {
            "id": "Contoso",
            "type": Office.MailboxEnums.LocationType.Custom
        }
    ];
'Office.Mailbox#addHandlerAsync:member(1)':
  - |-
    Office.initialize = function (reason) {
        $(document).ready(function () {
            Office.context.mailbox.addHandlerAsync(
                Office.EventType.ItemChanged,
                loadNewItem,
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        // Handle error.
                    }
                });
        });
    };

    function loadNewItem(eventArgs) {
        const item = Office.context.mailbox.item;

        // Check that item is not null.
        if (item !== null) {
            // Work with item, e.g., define and call function that
            // loads the properties of the newly selected item.
            loadProps(item);
        }
    }
'Office.Mailbox#convertToEwsId:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    const ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    const restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    const ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#convertToRestId:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        const ewsId = Office.context.mailbox.item.itemId;
        const token = result.value;
        const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        const xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });


    ...

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    const ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    const restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    const ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#convertToUtcClientTime:member(1)':
  - |-
    // Represents 3:37 PM PDT on Monday, August 26, 2019.
    const input = {
        date: 26,
        hours: 15,
        milliseconds: 2,
        minutes: 37,
        month: 7,
        seconds: 2,
        timezoneOffset: -420,
        year: 2019
    };

    // result should be a Date object.
    const result = Office.context.mailbox.convertToUtcClientTime(input);

    // Output should be "2019-08-26T22:37:02.002Z".
    console.log(result.toISOString());
'Office.Mailbox#displayAppointmentForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    const itemId = $("#itemId").val();

    Office.context.mailbox.displayAppointmentForm(itemId);
'Office.Mailbox#displayAppointmentFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    const itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayAppointmentFormAsync(itemId,
    function(asyncResult) {
      console.log("Result: " + JSON.stringify(asyncResult));
    });
'Office.Mailbox#displayMessageForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    const itemId = $("#itemId").val();

    Office.context.mailbox.displayMessageForm(itemId);
'Office.Mailbox#displayMessageFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    const itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayMessageFormAsync(itemId, function
    (asyncResult) {
     console.log("Result: " + JSON.stringify(asyncResult));
    });
'Office.Mailbox#displayNewAppointmentForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    const start = new Date();

    const end = new Date();

    end.setHours(start.getHours() + 1);


    Office.context.mailbox.displayNewAppointmentForm({
      requiredAttendees: ["bob@contoso.com"],
      optionalAttendees: ["sam@contoso.com"],
      start: start,
      end: end,
      location: "Home",
      subject: "meeting",
      resources: ["projector@contoso.com"],
      body: "Hello World!"
    });
'Office.Mailbox#displayNewAppointmentFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    const start = new Date();

    const end = new Date();

    end.setHours(start.getHours() + 1);


    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.displayNewAppointmentFormAsync(
      {
        requiredAttendees: ["bob@contoso.com"],
        optionalAttendees: ["sam@contoso.com"],
        start: start,
        end: end,
        location: "Home",
        subject: "meeting",
        resources: ["projector@contoso.com"],
        body: "Hello World!"
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.Mailbox#displayNewMessageForm:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-message.yaml

    Office.context.mailbox.displayNewMessageForm({
      toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
      ccRecipients: ["sam@contoso.com"],
      subject: "Outlook add-ins are cool!",
      htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
      attachments: [
        {
          type: "file",
          name: "image.png",
          url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
          isInline: true
        }
      ]
    });
'Office.Mailbox#displayNewMessageFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-message.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new message form has been created.

    Office.context.mailbox.displayNewMessageFormAsync(
      {
        toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
        ccRecipients: ["sam@contoso.com"],
        subject: "Outlook add-ins are cool!",
        htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
        attachments: [
          {
            type: "file",
            name: "image.png",
            url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
            isInline: true
          }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.Mailbox#ewsUrl:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    const ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    const restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    const ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.Mailbox#getCallbackTokenAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        const ewsId = Office.context.mailbox.item.itemId;
        const token = result.value;
        const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        const xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
'Office.Mailbox#getCallbackTokenAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-callback-token.yaml

    Office.context.mailbox.getCallbackTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.Mailbox#getSelectedItemsAsync:member(2)':
  - |-
    Office.onReady(info => {
        // Registers an event handler to identify when messages are selected.
        Office.context.mailbox.addHandlerAsync(Office.EventType.SelectedItemsChanged, getMessageProperties, asyncResult => {
            if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                console.log(asyncResult.error.message);
                return;
            }

            console.log("Event handler added.");
        });
    });

    function getMessageProperties() {
        // Retrieves the selected messages' properties and logs them to the console.
        Office.context.mailbox.getSelectedItemsAsync(asyncResult => {
            if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                console.log(asyncResult.error.message);
                return;      
            }

            asyncResult.value.forEach(message => {
                console.log(`Item ID: ${message.itemId}`);
                console.log(`Subject: ${message.subject}`);
                console.log(`Item type: ${message.itemType}`);
                console.log(`Item mode: ${message.itemMode}`);
            });
        });
    }
'Office.Mailbox#getUserIdentityTokenAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml

    Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.Mailbox#makeEwsRequestAsync:member(1)':
  - |-
    function getSubjectRequest(id) {
        // Return a GetItem operation request for the subject of the specified item.
        const request =
            '<?xml version="1.0" encoding="utf-8"?>' +
            '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
            '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
            '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
            '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
            '  <soap:Header>' +
            '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
            '  </soap:Header>' +
            '  <soap:Body>' +
            '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
            '      <ItemShape>' +
            '        <t:BaseShape>IdOnly</t:BaseShape>' +
            '        <t:AdditionalProperties>' +
            '            <t:FieldURI FieldURI="item:Subject"/>' +
            '        </t:AdditionalProperties>' +
            '      </ItemShape>' +
            '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
            '    </GetItem>' +
            '  </soap:Body>' +
            '</soap:Envelope>';

        return request;
    }

    function sendRequest() {
        // Create a local variable that contains the mailbox.
        Office.context.mailbox.makeEwsRequestAsync(
            getSubjectRequest(mailbox.item.itemId), callback);
    }

    function callback(asyncResult)  {
        const result = asyncResult.value;
        const context = asyncResult.asyncContext;

        // Process the returned response here.
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/get-icaluid-as-attendee.yaml

    const ewsId = Office.context.mailbox.item.itemId;

    const request = `<soap:Envelope
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
    xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
          <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>
          <soap:Body>
            <m:GetItem>
              <m:ItemShape>
                <t:BaseShape>AllProperties</t:BaseShape>
              </m:ItemShape >
              <m:ItemIds>
                <t:ItemId Id="${ewsId}" />
              </m:ItemIds>
            </m:GetItem>
          </soap:Body>
        </soap:Envelope>`;

    Office.context.mailbox.makeEwsRequestAsync(request, (result) => {
      if (result.status === Office.AsyncResultStatus.Failed) {
        console.error(result.error.message);
        return;
      }

      console.log(getUID(result.value));
    });


    ...

    const request = '<soap:Envelope
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
    xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
        '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
        '  <soap:Body>'+
        '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
        '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
        '      <m:Items>'+
        '        <t:Message>'+
        '          <t:Subject>Hello, Outlook!</t:Subject>'+
        '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
        '          <t:ToRecipients>'+
        '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
        '          </t:ToRecipients>'+
        '        </t:Message>'+
        '      </m:Items>'+
        '    </m:CreateItem>'+
        '  </soap:Body>'+
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });
'Office.Mailbox#masterCategories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Master categories:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories in the master list.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });


    ...

    const masterCategoriesToRemove = ["TestCategory"];


    Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully removed categories from master list");
      } else {
        console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.Mailbox#restUrl:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        const ewsId = Office.context.mailbox.item.itemId;
        const token = result.value;
        const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        const xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });


    ...

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    const ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    const restId = Office.context.mailbox.convertToRestId(ewsId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    const ewsId2 = Office.context.mailbox.convertToEwsId(restId,
    Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);
'Office.MailboxEnums.ActionType:enum':
  - |-
    // Define an insight notification message.
    const insightMessage = {
        type: Office.MailboxEnums.ItemNotificationMessageType.InsightMessage,
        message: "This is an insight notification",
        icon: "Icon.80x80",
        actions: [{
            actionText: "Open insight",
            actionType: Office.MailboxEnums.ActionType.ShowTaskPane,
            commandId: "msgComposeOpenPaneButton",
            contextData: JSON.stringify({a: "aValue", b: "bValue"})
        }]
    };
'Office.MailboxEnums.AppointmentSensitivityType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );
'Office.MailboxEnums.AttachmentContentFormat:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    function handleAttachmentsCallback(result) {
      // Identifies whether the attachment is a base64-encoded string, .eml file, .icalendar file, or a URL.
      switch (result.value.format) {
        case Office.MailboxEnums.AttachmentContentFormat.Base64:
          // Handle file attachment.
          console.log("Attachment is a base64-encoded string.");
          break;
        case Office.MailboxEnums.AttachmentContentFormat.Eml:
          // Handle email item attachment.
          console.log("Attachment is a message.");
          break;
        case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
          // Handle .icalender attachment.
          console.log("Attachment is a calendar item.");
          break;
        case Office.MailboxEnums.AttachmentContentFormat.Url:
          // Handle cloud attachment.
          console.log("Attachment is a cloud attachment.");
          break;
        default:
        // Handle attachment formats that aren't supported.
      }

      console.log(result.value.content);
    }
'Office.MailboxEnums.AttachmentStatus:enum':
  - >-
    // Get the attachment that was just added to a message or appointment.

    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            const attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged,
    myHandlerFunction, myCallback);
'Office.MailboxEnums.AttachmentType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (let i = 0; i < result.value.length; i++) {
                    const attachment = result.value[i];
                    console.log("ID: " + attachment.id + "\n" +
                        "Name: " + attachment.name + "\n" +
                        "Size: " + attachment.size + "\n" +
                        "isInline: " + attachment.isInline);
                    switch (attachment.attachmentType) {
                        case Office.MailboxEnums.AttachmentType.Cloud:
                            console.log("Attachment type: Attachment is stored in a cloud location.");
                            break;
                        case Office.MailboxEnums.AttachmentType.File:
                            console.log("Attachment type: Attachment is a file.");
                            break;
                        case Office.MailboxEnums.AttachmentType.Item:
                            console.log("Attachment type: Attachment is an Exchange item.");
                            break;
                    }
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });
'Office.MailboxEnums.CategoryColor:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    const masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.MailboxEnums.ComposeType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Get the compose type of the current message.

    Office.context.mailbox.item.getComposeTypeAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log(
          "getComposeTypeAsync succeeded with composeType: " +
            asyncResult.value.composeType +
            " and coercionType: " +
            asyncResult.value.coercionType
        );
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MailboxEnums.Days:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MailboxEnums.DelegatePermissions:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.MailboxEnums.EntityType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
'Office.MailboxEnums.InfobarActionType:enum':
  - >-
    /*

    * This snippet activates when a notification message is dismissed from an
    Outlook message or appointment.

    * The event handler logs the custom action and notification type to the
    console.

    */

    Office.context.mailbox.item.addHandlerAsync(Office.EventType.InfobarClicked,
    eventHandler, callback);


    function eventHandler(event) {
        const infobarDetails = event.infobarDetails;

        // Log the custom action type.
        console.log(`Custom action type: ${infobarDetails.actionType}`);

        // Log the notification type.
        switch (infobarDetails.infobarType) {
            case Office.MailboxEnums.InfobarType.Error:
                console.log("Notification type: Error message");
                break;
            case Office.MailboxEnums.InfobarType.Informational:
                console.log("Notification type: Informational message");
                break;
            case Office.MailboxEnums.InfobarType.Insight:
                console.log("Notification type: Informational message with available actions from the task pane");
                break;
            case Office.MailboxEnums.InfobarType.ProgressIndicator:
                console.log("Notification type: Progress indicator");
                break;
        }
    }
'Office.MailboxEnums.InfobarType:enum':
  - >-
    /*

    * This snippet activates when a notification message is dismissed from an
    Outlook message or appointment.

    * The event handler logs the custom action and notification type to the
    console.

    */

    Office.context.mailbox.item.addHandlerAsync(Office.EventType.InfobarClicked,
    eventHandler, callback);


    function eventHandler(event) {
        const infobarDetails = event.infobarDetails;

        // Log the custom action type.
        console.log(`Custom action type: ${infobarDetails.actionType}`);

        // Log the notification type.
        switch (infobarDetails.infobarType) {
            case Office.MailboxEnums.InfobarType.Error:
                console.log("Notification type: Error message");
                break;
            case Office.MailboxEnums.InfobarType.Informational:
                console.log("Notification type: Informational message");
                break;
            case Office.MailboxEnums.InfobarType.Insight:
                console.log("Notification type: Informational message with available actions from the task pane");
                break;
            case Office.MailboxEnums.InfobarType.ProgressIndicator:
                console.log("Notification type: Progress indicator");
                break;
        }
    }
'Office.MailboxEnums.ItemNotificationMessageType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,
        message: "Error notification message with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
'Office.MailboxEnums.ItemType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.MailboxEnums.LocationType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    const locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) =>
    {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });
'Office.MailboxEnums.Month:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MailboxEnums.OWAView:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-diagnostic-information.yaml

    // This function gets a mailbox's diagnostic information, such as Outlook
    client and version, and logs it to the console.

    const diagnostics = Office.context.mailbox.diagnostics;

    console.log(`Client application: ${diagnostics.hostName}`);

    console.log(`Client version: ${diagnostics.hostVersion}`);


    switch (diagnostics.OWAView) {
      case undefined:
        console.log("Current view (Outlook on the web only): Not applicable. An Outlook desktop client is in use.");
        break;
      case Office.MailboxEnums.OWAView.OneColumnNarrow:
        console.log("Current view (Outlook on the web only): Viewed from an older generation mobile phone");
        break;
      case Office.MailboxEnums.OWAView.OneColumn:
        console.log("Current view (Outlook on the web only): Viewed from a newer generation mobile phone");
        break;
      case Office.MailboxEnums.OWAView.TwoColumns:
        console.log("Current view (Outlook on the web only): Viewed from a tablet");
        break;
      case Office.MailboxEnums.OWAView.ThreeColumns:
        console.log("Current view (Outlook on the web only): Viewed from a desktop computer");
        break;
    }
'Office.MailboxEnums.RecipientType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

    const msgTo = Office.context.mailbox.item.to;

    const distributionLists = [];

    const externalRecipients = [];

    const internalRecipients = [];

    const otherRecipients = [];

    for (let i = 0; i < msgTo.length; i++) {
        switch (msgTo[i].recipientType) {
        case Office.MailboxEnums.RecipientType.DistributionList:
            distributionLists.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.ExternalUser:
            externalRecipients.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.User:
            internalRecipients.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.Other:
            otherRecipients.push(msgTo[i]);
        }
    }


    if (distributionLists.length > 0) {
        console.log("Distribution Lists:");
        distributionLists.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (externalRecipients.length > 0) {
        console.log("External Recipients:");
        externalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (internalRecipients.length > 0) {
        console.log("Internal Recipients:");
        internalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (otherRecipients.length > 0) {
        console.log("Other Recipients:");
        otherRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }
'Office.MailboxEnums.RecurrenceTimeZone:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MailboxEnums.RecurrenceType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MailboxEnums.ResponseType:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-all-attendees.yaml

    function organizeByResponse(attendees) {
      const accepted = [];
      const declined = [];
      const noResponse = [];
      const tentative = [];
      attendees.forEach(attendee => {
        switch (attendee.appointmentResponse) {
          case Office.MailboxEnums.ResponseType.Accepted:
            accepted.push(attendee);
            break;
          case Office.MailboxEnums.ResponseType.Declined:
            declined.push(attendee);
            break;
          case Office.MailboxEnums.ResponseType.None:
            noResponse.push(attendee);
            break;
          case Office.MailboxEnums.ResponseType.Tentative:
            tentative.push(attendee);
            break;
          case Office.MailboxEnums.ResponseType.Organizer:
            console.log(`Organizer: ${attendee.displayName}, ${attendee.emailAddress}`);
            break;
        } 
      });

      // List attendees by their response.
      console.log("Accepted: ");
      printAttendees(accepted);
      console.log("Declined: ");
      printAttendees(declined);
      console.log("Tentative: ");
      printAttendees(tentative);
      console.log("No response: ");
      printAttendees(noResponse);
    }
'Office.MailboxEnums.RestVersion:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml

    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function
    (result) {
        const ewsId = Office.context.mailbox.item.itemId;
        const token = result.value;
        const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
        const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                
        const xhr = new XMLHttpRequest();
        xhr.open('GET', getMessageUrl);
        xhr.setRequestHeader("Authorization", "Bearer " + token);
        xhr.onload = function (e) {
            console.log(this.response);
        }
        xhr.send();
    });
'Office.MailboxEnums.SourceProperty:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const text = asyncResult.value.data;
        const prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MailboxEnums.WeekNumber:enum':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.MasterCategories#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    const masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.MasterCategories#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Master categories:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories in the master list.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MasterCategories#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    const masterCategoriesToRemove = ["TestCategory"];


    Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully removed categories from master list");
      } else {
        console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
      }
    });
'Office.MeetingSuggestion:interface':
  - >-
    const item = Office.context.mailbox.item;

    // Get an array of strings that represent meeting suggestions in the current
    item's body.

    const meetingSuggestions =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.MeetingSuggestion);

    console.log("There are " + meetingSuggestions.length + " meeting
    suggestions.")

    meetingSuggestions.forEach(function (meetingSuggestion) {
        console.log("Subject: " + JSON.stringify(meetingSuggestion.subject));
        console.log("Attendees: " + JSON.stringify(meetingSuggestion.attendees));
        console.log("Location: " + JSON.stringify(meetingSuggestion.location));
        console.log("Start: " + JSON.stringify(meetingSuggestion.start));
        console.log("End: " + JSON.stringify(meetingSuggestion.end));
        console.log("Meeting: " + JSON.stringify(meetingSuggestion.meetingString));
    });
'Office.MessageCompose#addFileAttachmentAsync:member(1)':
  - |-
    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }

    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        const options = { 'asyncContext': { var1: 1, var2: 2 } };

        const attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }
  - |-
    // The following example adds an image file as an inline attachment and
    // references the attachment in the message body.
    Office.context.mailbox.item.addFileAttachmentAsync(
        "http://i.imgur.com/WJXklif.png",
        "cute_bird.png",
        {
            isInline: true
        },
        function (asyncResult) {
            Office.context.mailbox.item.body.setAsync(
                "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                {
                    "coercionType": "html"
                },
                function (asyncResult) {
                    // Do something here.
                });
        });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    const attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
'Office.MessageCompose#addFileAttachmentFromBase64Async:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    base64String =
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });

    ...

    // Set the signature for the current item with inline image.

    const modIcon1Base64 =
    "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          const signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );
'Office.MessageCompose#addHandlerAsync:member(1)':
  - >-
    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            const attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged,
    myHandlerFunction, myCallback);
'Office.MessageCompose#addItemAttachmentAsync:member(1)':
  - |-
    // The following example adds an existing Outlook item as an attachment
    // with the name `My Attachment`.
    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }

    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        const itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        const options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    const attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
'Office.MessageCompose#bcc:member':
  - >-
    Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com',
    'bob@contoso.com'] );

    Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.bcc.getAsync(callback);


    function callback(asyncResult) {
        const arrayOfBccRecipients = asyncResult.value;
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgBcc = asyncResult.value;
        console.log("Message being blind-copied to:");
        for (let i = 0; i < msgBcc.length; i++) {
          console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailBcc")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Bcc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#body:member':
  - >-
    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the
    callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
'Office.MessageCompose#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#cc:member':
  - >-
    Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com',
    'bob@contoso.com'] );

    Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.cc.getAsync(callback);


    function callback(asyncResult) {
        const arrayOfCcRecipients = asyncResult.value;
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgCc = asyncResult.value;
        console.log("Message being copied to:");
        for (let i = 0; i < msgCc.length; i++) {
          console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailCc")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Cc field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();
'Office.MessageCompose#conversationId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID:
    ${Office.context.mailbox.item.conversationId}`);
'Office.MessageCompose#delayDeliveryTime:member':
  - >-
    const date_1 = new Date();

    const date_2 = new Date(date_1.getTime() + 2*60000);  // Sending with
    2-minute delay.

    Office.context.mailbox.item.delayDeliveryTime.setAsync(
        date_2,
        function(callback) {
            console.log(callback);
        });
'Office.MessageCompose#disableClientSignatureAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Disable the client signature.

    Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("disableClientSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#from:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-compose.yaml

    Office.context.mailbox.item.from.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgFrom = asyncResult.value;
        console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    // Gets the attachments of the current message or appointment in compose
    mode.

    const options = { asyncContext: { currentItem: item } };

    // The getAttachmentsAsync call can only be used in compose mode.

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
      if (result.status === Office.AsyncResultStatus.Failed) {
        console.log(result.error.message);
        return;
      }

      if (result.value.length <= 0) {
        console.log("Mail item has no attachments.");
        return;
      }

      for (let i = 0; i < result.value.length; i++) {
        // Log the attachment type and its contents to the console.
        result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
      }
    }
'Office.MessageCompose#getAttachmentsAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (let i = 0; i < result.value.length; i++) {
                    const attachment = result.value[i];
                    console.log("ID: " + attachment.id + "\n" +
                        "Name: " + attachment.name + "\n" +
                        "Size: " + attachment.size + "\n" +
                        "isInline: " + attachment.isInline);
                    switch (attachment.attachmentType) {
                        case Office.MailboxEnums.AttachmentType.Cloud:
                            console.log("Attachment type: Attachment is stored in a cloud location.");
                            break;
                        case Office.MailboxEnums.AttachmentType.File:
                            console.log("Attachment type: Attachment is a file.");
                            break;
                        case Office.MailboxEnums.AttachmentType.Item:
                            console.log("Attachment type: Attachment is an Exchange item.");
                            break;
                    }
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });
'Office.MessageCompose#getComposeTypeAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Get the compose type of the current message.

    Office.context.mailbox.item.getComposeTypeAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log(
          "getComposeTypeAsync succeeded with composeType: " +
            asyncResult.value.composeType +
            " and coercionType: " +
            asyncResult.value.coercionType
        );
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#getInitializationContextAsync:member(1)':
  - |-
    // Get the initialization context (if present).
    Office.context.mailbox.item.getInitializationContextAsync((asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            if (asyncResult.value.length > 0) {
                // The value is a string, parse to an object.
                const context = JSON.parse(asyncResult.value);
                // Do something with context.
            } else {
                // Empty context, treat as no context.
            }
        } else {
            // Handle the error.
        }
    });
'Office.MessageCompose#getItemIdAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });
'Office.MessageCompose#getSelectedDataAsync:member(1)':
  - |-
    // Get selected data.
    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };

    function getCallback(asyncResult) {
        const text = asyncResult.value.data;
        const prop = asyncResult.value.sourceProperty;

        console.log("Selected text in " + prop + ": " + text);
    }
'Office.MessageCompose#getSelectedDataAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const text = asyncResult.value.data;
        const prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.MessageCompose#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.MessageCompose#internetHeaders:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.getAsync(
      ["x-preferred-fruit", "x-preferred-vegetable", "x-best-vegetable", "x-nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected headers: " + JSON.stringify(asyncResult.value));
        } else {
          console.log("Error getting selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.MessageCompose#isClientSignatureEnabledAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Check if the client signature is currently enabled.

    Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.MessageCompose#loadCustomPropertiesAsync:member(1)':
  - >-
    // The following example shows how to use the loadCustomPropertiesAsync
    method

    // to asynchronously load custom properties that are specific to the current
    item.

    // The example also shows how to use the saveAsync method to save these
    properties

    // back to the server. After loading the custom properties, the example uses
    the

    // get method to read the custom property myProp, the set method to write
    the

    // custom property otherProp, and then finally calls the saveAsync method to
    save

    // the custom properties.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready method.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            const mailbox = Office.context.mailbox;
            mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
        });
    };


    function customPropsCallback(asyncResult) {
        const customProps = asyncResult.value;
        const myProp = customProps.get("myProp");

        customProps.set("otherProp", "value");
        customProps.saveAsync(saveCallback);
    }


    function saveCallback(asyncResult) {

    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        const dataKey = Object.keys(customProps)[0];
        const data = customProps[dataKey];
        for (let propertyName in data)
        {
          let propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.MessageCompose#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          


    ...

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);

    ...

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.MessageCompose#removeAttachmentAsync:member(1)':
  - |-
    // The following code removes an attachment with an identifier of '0'.
    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );
'Office.MessageCompose#saveAsync:member(2)':
  - |-
    Office.context.mailbox.item.saveAsync(
        function callback(result) {
            // Process the result.
        });

    // The following is an example of the
    // `result` parameter passed to the
    // callback function. The `value`
    // property contains the item ID of
    // the item.
    {
        "value": "AAMkADI5...AAA=",
        "status": "succeeded"
    }
'Office.MessageCompose#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    const seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.MessageCompose#sessionData:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.MessageCompose#setSelectedDataAsync:member(1)':
  - >-
    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", {
    coercionType : "html" });
  - Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced",
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageCompose#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });


    ...

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });
'Office.MessageCompose#to:member':
  - >-
    Office.context.mailbox.item.to.setAsync( ['alice@contoso.com',
    'bob@contoso.com'] );

    Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.to.getAsync(callback);


    function callback(asyncResult) {
        const arrayOfToRecipients = asyncResult.value;
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    Office.context.mailbox.item.to.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgTo = asyncResult.value;
        console.log("Message being sent to:");
        for (let i = 0; i < msgTo.length; i++) {
          console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailTo")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting To field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#addHandlerAsync:member(1)':
  - >-
    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            const attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged,
    myHandlerFunction, myCallback);
'Office.MessageRead#attachments:member':
  - >-
    // The following code builds an HTML string with details of all attachments
    on the current item.

    const item = Office.context.mailbox.item;

    let outputString = "";


    if (item.attachments.length > 0) {
        for (let i = 0 ; i < item.attachments.length ; i++) {
            const attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachments-read.yaml

    const attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);
'Office.MessageRead#body:member':
  - >-
    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the
    callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
'Office.MessageRead#categories:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          const categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          const categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.MessageRead#cc:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml

    const msgCc = Office.context.mailbox.item.cc;

    console.log("Message copied to:");

    for (let i = 0; i < msgCc.length; i++) {
      console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
    }
'Office.MessageRead#conversationId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID:
    ${Office.context.mailbox.item.conversationId}`);
'Office.MessageRead#dateTimeCreated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time:
    ${Office.context.mailbox.item.dateTimeCreated}`);
'Office.MessageRead#dateTimeModified:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified:
    ${Office.context.mailbox.item.dateTimeModified}`);
'Office.MessageRead#displayReplyAllForm:member(1)':
  - |-
    // The following code passes a string to the `displayReplyAllForm` method.
    Office.context.mailbox.item.displayReplyAllForm('hello there');
    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

    // Reply with an empty body.
    Office.context.mailbox.item.displayReplyAllForm({});

    // Reply with just a body.
    Office.context.mailbox.item.displayReplyAllForm(
    {
    'htmlBody' : 'hi'
    });

    // Reply with a body and a file attachment.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });

    // Reply with a body and an item attachment.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });

    // Reply with a body, file attachment, item attachment, and a callback.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with
    <b>some bold text</b>.");
'Office.MessageRead#displayReplyAllFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllFormAsync("This is a reply ALL
    with <b>some bold text</b>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });
'Office.MessageRead#displayReplyForm:member(1)':
  - |-
    // The following code passes a string to the `displayReplyForm` method.
    Office.context.mailbox.item.displayReplyForm('hello there');
    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

    // Reply with an empty body.
    Office.context.mailbox.item.displayReplyForm({});

    // Reply with just a body.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi'
    });

    // Reply with a body and a file attachment.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });

    // Reply with a body and an item attachment.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });

    // Reply with a body, file attachment, item attachment, and a callback.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some
    text in italics</i>.");


    ...

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });
'Office.MessageRead#displayReplyFormAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyFormAsync("This is a reply with
    <i>some text in italics</i>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });


    ...

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.item.displayReplyFormAsync(
      {
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );
'Office.MessageRead#end:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);
'Office.MessageRead#from:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml

    const msgFrom = Office.context.mailbox.item.from;

    console.log("Message received from: " + msgFrom.displayName + " (" +
    msgFrom.emailAddress + ")");
'Office.MessageRead#getAllInternetHeadersAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/get-internet-headers-message-read.yaml

    Office.context.mailbox.item.getAllInternetHeadersAsync(function
    (asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Internet headers received successfully");
        if (asyncResult.value.match(/x-preferred-fruit:.*/gim)) {
          console.log("Sender's preferred fruit: " + asyncResult.value.match(/x-preferred-fruit:.*/gim)[0].slice(19));
        } else {
          console.log("Didn't receive header with sender's preferred fruit");
        }
        if (asyncResult.value.match(/x-preferred-vegetable:.*/gim)) {
          console.log(
            "Sender's preferred vegetable: " + asyncResult.value.match(/x-preferred-vegetable:.*/gim)[0].slice(23)
          );
        } else {
          console.log("Didn't receive header with sender's preferred vegetable");
        }
      } else {
        console.log("Error getting internet headers: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.MessageRead#getAttachmentContentAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    // Gets the attachments of the current message or appointment in read mode.

    // The item.attachments call can only be used in read mode.

    const attachments = item.attachments;

    if (attachments.length <= 0) {
      console.log("Mail item has no attachments.");
      return;
    }


    for (let i = 0; i < attachments.length; i++) {
      // Log the attachment type and its contents to the console.
      item.getAttachmentContentAsync(attachments[i].id, handleAttachmentsCallback);
    }
'Office.MessageRead#getEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    const entities = Office.context.mailbox.item.getEntities();

    let entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }
'Office.MessageRead#getEntitiesByType:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
'Office.MessageRead#getFilteredEntitiesByName:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address
    that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
'Office.MessageRead#getInitializationContextAsync:member(1)':
  - |-
    // Get the initialization context (if present).
    Office.context.mailbox.item.getInitializationContextAsync((asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            if (asyncResult.value.length > 0) {
                // The value is a string, parse to an object.
                const context = JSON.parse(asyncResult.value);
                // Do something with context.
            } else {
                // Empty context, treat as no context.
            }
        } else {
            // Handle the error.
        }
    });
'Office.MessageRead#getRegExMatches:member(1)':
  - >-
    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits"
    RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
    RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties:
    `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    const allMatches = Office.context.mailbox.item.getRegExMatches();

    const fruits = allMatches.fruits;

    const veggies = allMatches.veggies;
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());
'Office.MessageRead#getRegExMatchesByName:member(1)':
  - >-
    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits"
    RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
    RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties:
    `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    const fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    const veggies =
    Office.context.mailbox.item.getRegExMatchesByName("veggies");
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
'Office.MessageRead#getSelectedEntities:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    const entities = Office.context.mailbox.item.getSelectedEntities();

    let entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }
'Office.MessageRead#getSelectedRegExMatches:member(1)':
  - >-
    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits"
    RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
    RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext"
    IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties:
    `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of matches for the

    // regular expression rule elements `fruits` and `veggies`, which are

    // specified in the manifest.

    const selectedMatches =
    Office.context.mailbox.item.getSelectedRegExMatches();

    const fruits = selectedMatches.fruits;

    const veggies = selectedMatches.veggies;
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

    const matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }
'Office.MessageRead#getSharedPropertiesAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true },
    function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              const ewsId = Office.context.mailbox.item.itemId;
              const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });
'Office.MessageRead#getSharedPropertiesAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });
'Office.MessageRead#internetMessageId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml

    console.log(`Internet message ID:
    ${Office.context.mailbox.item.internetMessageId}`);
'Office.MessageRead#itemClass:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);
'Office.MessageRead#itemId:member':
  - |-
    // The following code checks for the presence of an item
    // identifier. If the `itemId` property returns `null` or
    // `undefined`, it saves the item to the store and gets the
    // item identifier from the asynchronous result.
    // **Important**: `saveAsync` was introduced with requirement set 1.3
    // so you can't get the `itemId` in Compose mode in earlier sets.
    let itemId = Office.context.mailbox.item.itemId;
    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }
'Office.MessageRead#itemType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    const itemType = Office.context.mailbox.item.itemType;

    switch (itemType) {
        case Office.MailboxEnums.ItemType.Appointment:
            console.log(`Current item is an ${itemType}.`);
            break;
        case Office.MailboxEnums.ItemType.Message:
            console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
            break;
    }
'Office.MessageRead#loadCustomPropertiesAsync:member(1)':
  - >-
    // The following example shows how to use the loadCustomPropertiesAsync
    method

    // to asynchronously load custom properties that are specific to the current
    item.

    // The example also shows how to use the saveAsync method to save these
    properties

    // back to the server. After loading the custom properties, the example uses
    the

    // get method to read the custom property myProp, the set method to write
    the

    // custom property otherProp, and then finally calls the saveAsync method to
    save

    // the custom properties.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready method.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            const mailbox = Office.context.mailbox;
            mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
        });
    };


    function customPropsCallback(asyncResult) {
        const customProps = asyncResult.value;
        const myProp = customProps.get("myProp");

        customProps.set("otherProp", "value");
        customProps.saveAsync(saveCallback);
    }


    function saveCallback(asyncResult) {

    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

    Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Loaded following custom properties:");
        customProps = result.value;
        const dataKey = Object.keys(customProps)[0];
        const data = customProps[dataKey];
        for (let propertyName in data)
        {
          let propertyValue = data[propertyName];
          console.log(`${propertyName}: ${propertyValue}`);
        }              
      }
      else {
        console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
      }
    });
'Office.MessageRead#location:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location:
    ${Office.context.mailbox.item.location}`);
'Office.MessageRead#normalizedSubject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject:
    ${Office.context.mailbox.item.normalizedSubject}`);
'Office.MessageRead#notificationMessages:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          


    ...

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);

    ...

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.MessageRead#recurrence:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-recurrence-read.yaml

    const recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }
'Office.MessageRead#sender:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml

    const msgSender = Office.context.mailbox.item.sender;

    console.log("Sender: " + msgSender.displayName + " (" +
    msgSender.emailAddress + ")");
'Office.MessageRead#seriesId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    const seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }
'Office.MessageRead#start:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);
'Office.MessageRead#subject:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);
'Office.MessageRead#to:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

    const msgTo = Office.context.mailbox.item.to;

    const distributionLists = [];

    const externalRecipients = [];

    const internalRecipients = [];

    const otherRecipients = [];

    for (let i = 0; i < msgTo.length; i++) {
        switch (msgTo[i].recipientType) {
        case Office.MailboxEnums.RecipientType.DistributionList:
            distributionLists.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.ExternalUser:
            externalRecipients.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.User:
            internalRecipients.push(msgTo[i]);
            break;
        case Office.MailboxEnums.RecipientType.Other:
            otherRecipients.push(msgTo[i]);
        }
    }


    if (distributionLists.length > 0) {
        console.log("Distribution Lists:");
        distributionLists.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (externalRecipients.length > 0) {
        console.log("External Recipients:");
        externalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (internalRecipients.length > 0) {
        console.log("Internal Recipients:");
        internalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }


    if (otherRecipients.length > 0) {
        console.log("Other Recipients:");
        otherRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
    }
'Office.NotificationMessageAction:interface':
  - >-
    // Define notification.

    const insightMessage = {
        type: Office.MailboxEnums.ItemNotificationMessageType.InsightMessage,
        message: "This is an insight notification",
        icon: "Icon.80x80",
        actions: [{
            actionText: "Open insight",
            actionType: Office.MailboxEnums.ActionType.ShowTaskPane,
            commandId: "msgComposeOpenPaneButton",
            contextData: JSON.stringify({a: "aValue", b: "bValue"})
        }]
    };


    // Show notification.

    Office.context.mailbox.item.notificationMessages.replaceAsync("messageKey",
    insightMessage, (result) => {
        console.log("Added notification:");
        console.log(result);
    });


    // Retrieve contextData.

    Office.context.mailbox.item.getInitializationContextAsync(function
    (asyncResult) {
        console.log("Initialization context:");
        console.log(asyncResult);

        // Note: Use JSON.parse(asyncResult.value) to read the result. Example:
        const contextData = JSON.parse(asyncResult.value);
        console.log("a:");
        console.log(contextData.a);
    });
'Office.NotificationMessages#addAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);


    ...

    const id = $("#notificationId").val();

    const details =
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,
        message: "Error notification message with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details,
    handleResult);
'Office.NotificationMessages#getAllAsync:member(1)':
  - >-
    // Get all notifications.

    Office.context.mailbox.item.notificationMessages.getAllAsync(function
    (asyncResult) {
        if (asyncResult.status != "failed") {
            Office.context.mailbox.item.notificationMessages.replaceAsync( "notifications", {
                type: "informationalMessage",
                message : "Found " + asyncResult.value.length + " notifications.",
                icon : "iconid",
                persistent: false
            });
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
'Office.NotificationMessages#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id,
    handleResult);
'Office.NotificationMessages#replaceAsync:member(1)':
  - |-
    // Replace a notification with an informational notification.
    Office.context.mailbox.item.notificationMessages.replaceAsync("progress", {
        type: "informationalMessage",
        message : "The message was processed successfully.",
        icon : "iconid",
        persistent: false
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    const id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
'Office.Organizer#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml

    Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptOrganizer = asyncResult.value;
        console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.PhoneNumber:interface':
  - >-
    const item = Office.context.mailbox.item;

    // Get an array of strings that represent phone numbers in the current
    item's body.

    const phoneNumbers =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.PhoneNumber);

    console.log("There are " + phoneNumbers.length + " phone numbers.")

    phoneNumbers.forEach(function (phoneNumber) {
        console.log("Phone number: " + JSON.stringify(phoneNumber.phoneString));
        console.log("Type: " + JSON.stringify(phoneNumber.type));
        console.log("Source text: " + JSON.stringify(phoneNumber.originalPhoneString));
    });
'Office.Recipients#addAsync:member(1)':
  - |-
    // The following example creates an array of EmailUser objects
    // and adds them to the To recipients of the message.
    const newRecipients = [
        {
            "displayName": "Allie Bellew",
            "emailAddress": "allieb@contoso.com"
        },
        {
            "displayName": "Alex Darrow",
            "emailAddress": "alexd@contoso.com"
        }
    ];

    Office.context.mailbox.item.to.addAsync(newRecipients, function(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Recipients added");
        }
    });
'Office.Recipients#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgBcc = asyncResult.value;
        console.log("Message being blind-copied to:");
        for (let i = 0; i < msgBcc.length; i++) {
          console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgCc = asyncResult.value;
        console.log("Message being copied to:");
        for (let i = 0; i < msgCc.length; i++) {
          console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptOptionalAttendees = asyncResult.value;
        for (let i = 0; i < apptOptionalAttendees.length; i++) {
          console.log(
            "Optional attendees: " +
              apptOptionalAttendees[i].displayName +
              " (" +
              apptOptionalAttendees[i].emailAddress +
              ") - response: " +
              apptOptionalAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult)
    {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const apptRequiredAttendees = asyncResult.value;
        for (let i = 0; i < apptRequiredAttendees.length; i++) {
          console.log(
            "Required attendees: " +
              apptRequiredAttendees[i].displayName +
              " (" +
              apptRequiredAttendees[i].emailAddress +
              ") - response: " +
              apptRequiredAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    Office.context.mailbox.item.to.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const msgTo = asyncResult.value;
        console.log("Message being sent to:");
        for (let i = 0; i < msgTo.length; i++) {
          console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recipients#setAsync:member(2)':
  - |-
    // The following example creates an array of EmailUser objects and
    // replaces the CC recipients of the message with the array.
    const newRecipients = [
        {
            "displayName": "Allie Bellew",
            "emailAddress": "allieb@contoso.com"
        },
        {
            "displayName": "Alex Darrow",
            "emailAddress": "alexd@contoso.com"
        }
    ];

    Office.context.mailbox.item.cc.setAsync(newRecipients, function(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Recipients overwritten");
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    const email = $("#emailBcc")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Bcc field.");
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailCc")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Cc field.");
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailOptional")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.optionalAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting optional attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailRequired")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.requiredAttendees.setAsync(emailArray,
    function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting required attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });


    ...

    const email = $("#emailTo")
      .val()
      .toString();
    const emailArray = [email];

    Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting To field.");
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recurrence#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        const recurrence = asyncResult.value;
        if (recurrence === null) {
          console.log("This is a single appointment.");
        } else {
          console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
        }
      } else {
        console.error(asyncResult.error);
      }
    });
'Office.Recurrence#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    const currentDate = new Date();

    let seriesTimeObject: Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(currentDate.getFullYear(),
    currentDate.getMonth(), currentDate.getDay() + 1);

    // Set series end date to one year from now.

    seriesTimeObject.setEndDate(currentDate.getFullYear() + 1,
    currentDate.getMonth() + 1, currentDate.getDay());

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    const pattern: Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: Office.MailboxEnums.RecurrenceType.Yearly,
      recurrenceProperties: {
        interval: 1,
        dayOfWeek: Office.MailboxEnums.Days.Tue,
        weekNumber: Office.MailboxEnums.WeekNumber.Second,
        month: Office.MailboxEnums.Month.Sep
      },
      recurrenceTimeZone: { name: Office.MailboxEnums.RecurrenceTimeZone.PacificStandardTime }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });
'Office.RecurrenceProperties:interface':
  - >-
    // This example gets the Recurrence object of an appointment item.

    Office.context.mailbox.item.recurrence.getAsync(callback);


    function callback(asyncResult) {
        const context = asyncResult.context;
        const recurrence = asyncResult.value;
        if (!recurrence) {
            console.log("One-time appointment or meeting");
        } else {
            console.log(JSON.stringify(recurrence));
        }
    }


    // The following example shows the results of the getAsync call that
    retrieves the recurrence for a series.

    // NOTE: In this example, seriesTimeObject is a placeholder for the JSON
    representing the

    // recurrence.seriesTime property. You should use the SeriesTime object's
    methods to get the

    // recurrence date and time properties.

    Recurrence = {
        "recurrenceType": "weekly",
        "recurrenceProperties": {"interval": 2, "days": ["mon","thu","fri"], "firstDayOfWeek": "sun"},
        "seriesTime": {seriesTimeObject},
        "recurrenceTimeZone": {"name": "Pacific Standard Time", "offset": -480}
    }
'Office.RecurrenceTimeZone:interface':
  - >-
    // This example gets the Recurrence object of an appointment item.

    Office.context.mailbox.item.recurrence.getAsync(callback);


    function callback(asyncResult) {
        const context = asyncResult.context;
        const recurrence = asyncResult.value;
        if (!recurrence) {
        //if (recurrence == null) {
            console.log("One-time appointment or meeting");
        } else {
            console.log(JSON.stringify(recurrence));
        }
    }


    // The following example shows the results of the getAsync call that
    retrieves the recurrence for a series.

    // NOTE: In this example, seriesTimeObject is a placeholder for the JSON
    representing the

    // recurrence.seriesTime property. You should use the SeriesTime object's
    methods to get the

    // recurrence date and time properties.

    Recurrence = {
        "recurrenceType": "weekly",
        "recurrenceProperties": {"interval": 2, "days": ["mon","thu","fri"], "firstDayOfWeek": "sun"},
        "seriesTime": {seriesTimeObject},
        "recurrenceTimeZone": {"name": "Pacific Standard Time", "offset": -480}
    }
'Office.RoamingSettings#get:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    const settingName = $("#settingName").val();

    const settingValue = Office.context.roamingSettings.get(settingName);

    $("#settingValue").val(settingValue);

    console.log(`The value of setting "${settingName}" is "${settingValue}".`);
'Office.RoamingSettings#saveAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    // Save settings in the mailbox to make it available in future sessions.

    Office.context.roamingSettings.saveAsync(function(result) {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
      } else {
        console.log(`Settings saved with status: ${result.status}`);
      }
    });
'Office.RoamingSettings#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    const settingName = $("#settingName").val();

    const settingValue = $("#settingValue").val();

    Office.context.roamingSettings.set(settingName, settingValue);

    console.log(`Setting "${settingName}" set to value "${settingValue}".`);
'Office.Sensitivity#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Sensitivity: " + asyncResult.value);
      } else {
        console.log("Failed to get sensitivity: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.Sensitivity#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );
'Office.SensitivityLabel#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/sensitivity-label.yaml

    // This snippet gets the current mail item's sensitivity label.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
        Office.context.mailbox.item.sensitivityLabel.getAsync((asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            console.log(asyncResult.value);
          } else {
            console.log("Action failed with error: " + asyncResult.error.message);
          }
        });
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.SensitivityLabel#setAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/sensitivity-label.yaml

    // This snippet sets the sensitivity label on the current mail item.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
        Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            const catalog = asyncResult.value;
            if (catalog.length > 0) {
              var id = catalog[0].id;
              Office.context.mailbox.item.sensitivityLabel.setAsync(id, (asyncResult) => {
                if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                  console.log(asyncResult.status);
                } else {
                  console.log("Action failed with error: " + asyncResult.error.message);
                }
              });
            }
            else {
              console.log("Catalog list is empty");
            }
          } else {
            console.log("Action failed with error: " + asyncResult.error.message);
          }
        });
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.SensitivityLabelDetails:interface':
  - >-
    // Check whether the catalog of sensitivity labels is enabled on the current
    mailbox.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
        // If the catalog is enabled, get all available sensitivity labels.
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
            Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {
                if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                    const catalog = asyncResult.value;
                    console.log("Sensitivity Labels Catalog:");
                    
                    // Log the details of the available sensitivity labels to the console.
                    catalog.forEach((sensitivityLabel) => {
                        console.log(`Name: ${sensitivityLabel.name}`);
                        console.log(`ID: ${sensitivityLabel.id}`);
                        console.log(`Tooltip: ${sensitivityLabel.tooltip}`);
                        console.log(`Color: ${sensitivityLabel.color}`);
                        console.log(`Sublabels: ${JSON.stringify(sensitivityLabel.children)}`);
                    });
                } else {
                    console.log("Action failed with error: " + asyncResult.error.message);
                }
            });
        } else {
            console.log("Action failed with error: " + asyncResult.error.message);
        }
    });
'Office.SensitivityLabelsCatalog#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/sensitivity-labels-catalog.yaml

    // This snippet gets all available sensitivity labels from the catalog.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
        Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
            const catalog = asyncResult.value;
            console.log("Sensitivity Labels Catalog:");
            console.log(JSON.stringify(catalog));
          } else {
            console.log("Action failed with error: " + asyncResult.error.message);
          }
        });
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.SensitivityLabelsCatalog#getIsEnabledAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/sensitivity-labels-catalog.yaml

    // This snippet determines if the sensitivity labels catalog is enabled on
    the current mailbox.

    Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log(asyncResult.value);
      } else {
        console.log("Action failed with error: " + asyncResult.error.message);
      }
    });
'Office.SeriesTime#getDuration:member(1)':
  - >-
    // This example gets the duration of a usual instance in a recurring
    appointment series.

    Office.context.mailbox.item.recurrence.getAsync(callback);


    function callback(asyncResult) {
        const context = asyncResult.context;
        const recurrence = asyncResult.value;
        const duration = recurrence.seriesTime.getDuration();
    }
'Office.SeriesTime#getEndDate:member(1)':
  - |-
    // This example gets the end date of a recurring appointment series.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        const context = asyncResult.context;
        const recurrence = asyncResult.value;
        const endDate = recurrence.seriesTime.getEndDate();
    }
'Office.SeriesTime#getEndTime:member(1)':
  - >-
    // This example gets the end time of a usual instance in a recurring
    appointment series.

    Office.context.mailbox.item.recurrence.getAsync(callback);


    function callback(asyncResult) {
        const context = asyncResult.context;
        const recurrence = asyncResult.value;
        const endDate = recurrence.seriesTime.getEndTime();
    }
'Office.SeriesTime#getStartDate:member(1)':
  - |-
    // This example gets the start date of a recurring appointment series.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        const context = asyncResult.context;
        const recurrence = asyncResult.value;
        const endDate = recurrence.seriesTime.getStartDate();
    }
'Office.SeriesTime#getStartTime:member(1)':
  - |-
    // This example gets the start time of a usual
    // instance in a recurring appointment series.
    const seriesTimeObject = new SeriesTime();
    seriesTimeObject.setDuration(120);
'Office.SeriesTime#setDuration:member(1)':
  - |-
    // This example sets the duration of each appointment
    // in a recurring series to 2 hours.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        const context = asyncResult.context;
        const recurrence = asyncResult.value;
        const endDate = recurrence.seriesTime.getStartTime();
    }
'Office.SeriesTime#setEndDate:member(1)':
  - |-
    // This example sets the end date of a recurring
    // appointment series to November 2, 2017.
    const seriesTimeObject = new SeriesTime();
    seriesTimeObject.setEndDate(2017, 10, 2);
'Office.SeriesTime#setEndDate:member(2)':
  - |-
    // This example sets the end date of a
    // recurring appointment series to November 2, 2017
    // using ISO 8601 date standard.
    const seriesTimeObject = new SeriesTime()
    seriesTimeObject.setEndDate("2017-11-02");
'Office.SeriesTime#setStartDate:member(1)':
  - |-
    // This example sets the start date of a recurring
    // appointment series to November 2, 2017.
    const seriesTimeObject = new SeriesTime();
    seriesTimeObject.setStartDate(2017, 10, 2);
'Office.SeriesTime#setStartDate:member(2)':
  - |-
    // This example sets the start date of a recurring
    // appointment series to November 2, 2017
    // using ISO 8601 date standard.
    const seriesTimeObject = new SeriesTime()
    seriesTimeObject.setStartDate("2017-11-02");
'Office.SeriesTime#setStartTime:member(1)':
  - |-
    // This example sets the start time of each instance
    // of a recurring appointment series to 1:30 PM.
    const seriesTimeObject = new SeriesTime();
    seriesTimeObject.setStartTime(13, 30);

    // This example sets the start time of each instance
    // of a recurring appointment series to 11:30 AM.
    seriesTimeObject.setStartTime(11, 30);
'Office.SeriesTime#setStartTime:member(2)':
  - |-
    // This example sets the start time of each instance
    // of a recurring appointment series to 11:30 PM.
    const seriesTimeObject = new SeriesTime()
    seriesTimeObject.setStartTime("T23:30:00");
'Office.SessionData#clearAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.clearAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("sessionData.clearAsync succeeded");
      } else {
        console.log("Failed to clear sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#getAllAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#getAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAsync(
      "Date",
      function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData value is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.SessionData#removeAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.removeAsync(
      "Date",
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("sessionData.removeAsync succeeded");
        } else {
          console.log("Failed to remove sessionData. Error: " + JSON.stringify(asyncResult.error));
        }
      }
    );
'Office.SessionData#setAsync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.setAsync(
      "Date",
      "7/24/2020",
      function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("sessionData.setAsync succeeded");
      } else {
        console.log("Failed to set sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });
'Office.Subject#getAsync:member(2)':
  - |-
    Office.context.mailbox.item.subject.getAsync(callback);

    function callback(asyncResult) {
        const subject = asyncResult.value;
    }
'Office.Subject#setAsync:member(1)':
  - >-
    Office.context.mailbox.item.subject.setAsync("New subject!", function
    (asyncResult) {
        if (asyncResult.status === "failed") {
            console.log("Action failed with error: " + asyncResult.error.message);
        }
    });
'Office.TaskSuggestion:interface':
  - >-
    const item = Office.context.mailbox.item;

    // Get an array of strings that represent task suggestions in the current
    item's body.

    const taskSuggestions =
    item.getEntitiesByType(Office.MailboxEnums.EntityType.TaskSuggestion);

    console.log("There are " + taskSuggestions.length + " task suggestions.")

    taskSuggestions.forEach(function (taskSuggestion) {
        console.log("Assignees: " + JSON.stringify(taskSuggestion.assignees));
        console.log("Task: " + JSON.stringify(taskSuggestion.taskString));
    });
'Office.Time#getAsync:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });
'Office.Time#setAsync:member(1)':
  - >-
    const startTime = new Date("3/14/2015");

    const options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };

    Office.context.mailbox.item.start.setAsync(startTime, options,
    function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync method.
            console.debug("Start Time " + result.asyncContext.verb);
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    const start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });


    ...

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      const end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });
'Office.UserProfile#accountType:member':
  - console.log(Office.context.mailbox.userProfile.accountType);
'Office.UserProfile#displayName:member':
  - |-
    // Example: Allie Bellew
    console.log(Office.context.mailbox.userProfile.displayName);
'Office.UserProfile#emailAddress:member':
  - |-
    // Example: allieb@contoso.com
    console.log(Office.context.mailbox.userProfile.emailAddress);
'Office.UserProfile#timeZone:member':
  - |-
    // Example: Pacific Standard Time
    console.log(Office.context.mailbox.userProfile.timeZone);
