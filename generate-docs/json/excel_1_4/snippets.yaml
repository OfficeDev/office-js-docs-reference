'Excel.Application#calculate:member(2)':
  - |-
    Excel.run(function (ctx) {
        ctx.workbook.application.calculate('Full');
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Application#decimalSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

    await Excel.run(async (context) => {
      context.application.load("decimalSeparator,thousandsSeparator");
      context.application.cultureInfo.numberFormat.load("numberDecimalSeparator,numberGroupSeparator");
      await context.sync();

      // Local settings are set under the "Options > Advanced" menu.
      const localDecimalSeparator = context.application.decimalSeparator;
      const localThousandsSeparator = context.application.thousandsSeparator;

      const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;
      const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;

      console.log("Local character settings: ");
      console.log(`  Local decimal separator: ${localDecimalSeparator}`);
      console.log(`  Local thousands separator: ${localThousandsSeparator}`);

      console.log("System culture settings: ");
      console.log(`  System decimal separator: ${systemDecimalSeparator}`);
      console.log(`  System thousands separator: ${systemThousandsSeparator}`);
      console.log(`  `);

      await context.sync();
    });
'Excel.Application#load:member(2)':
  - |-
    Excel.run(function (ctx) {
        var application = ctx.workbook.application;
        application.load('calculationMode');
        return ctx.sync().then(function() {
            console.log(application.calculationMode);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/performance-optimization.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const rowCount = 500;
        const columnCount = 20;

        const startTime = Date.now();
        console.log("Starting...");

        if (pauseScreenPainting) {
            // Note: Don't call `suspendScreenUpdatingUntilNextSync` repeatedly (such as in a loop).
            // Repeated calls will cause the Excel window to flicker. 
            context.application.suspendScreenUpdatingUntilNextSync();
        }

        for (let i = 0; i < rowCount; i++) {
            for (let j = 0; j < columnCount; j++) {
                let cell = sheet.getCell(i, j);
                cell.values = [[i * j * Math.random()]];
                if (untrack) {
                    cell.untrack();
                }
            }
        }

        await context.sync();

        console.log(`Ending. Adding ${rowCount * columnCount} cells took ${Date.now() - startTime} milliseconds`);
    });
'Excel.AutoFilter#apply:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const farmData = sheet.getUsedRange();

        // This filter will only show the rows with the top 25% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
        await context.sync();
    });
'Excel.Binding#getRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var binding = ctx.workbook.bindings.getItemAt(0);
        var range = binding.getRange();
        range.load('cellCount');
        return ctx.sync().then(function() {
            console.log(range.cellCount);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Binding#getTable:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var binding = ctx.workbook.bindings.getItemAt(0);
        var table = binding.getTable();
        table.load('name');
        return ctx.sync().then(function() {
                console.log(table.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Binding#getText:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var binding = ctx.workbook.bindings.getItemAt(0);
        var text = binding.getText();
        binding.load('text');
        return ctx.sync().then(function() {
            console.log(text);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Binding#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var binding = ctx.workbook.bindings.getItemAt(0);
        binding.load('type');
        return ctx.sync().then(function() {
            console.log(binding.type);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Binding#onDataChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/data-changed.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");    
        const salesTable = sheet.tables.getItem("SalesTable");
        const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), "Table", "SalesByQuarter");
        salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);

        console.log("The data changed handler is registered.");

        await context.sync();
    });
'Excel.BindingCollection#getItem:member(1)':
  - >-
    // Create a table binding to monitor data changes in the table. 

    // When data is changed, the background color of the table will be changed
    to orange.

    function addEventHandler() {
        // Create Table1
        Excel.run(function (ctx) { 
            ctx.workbook.tables.add("Sheet1!A1:C4", true);
            return ctx.sync().then(function() {
                    console.log("My Diet Data Inserted!");
            })
            .catch(function (error) {
                    console.log(JSON.stringify(error));
            });
        });
        //Create a new table binding for Table1
        Office.context.document.bindings.addFromNamedItemAsync(
            "Table1", Office.CoercionType.Table, { id: "myBinding" }, function (asyncResult) {
            if (asyncResult.status == "failed") {
                console.log("Action failed with error: " + asyncResult.error.message);
            }
            else {
                // If succeeded, then add event handler to the table binding.
                Office.select("bindings#myBinding").addHandlerAsync(
                    Office.EventType.BindingDataChanged, onBindingDataChanged);
            }
        });
    }
        
    // when data in the table is changed, this event will be triggered.

    function onBindingDataChanged(eventArgs) {
        Excel.run(function (ctx) { 
            // highlight the table in orange to indicate data has been changed.
            ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
            return ctx.sync().then(function() {
                    console.log("The value in this table got changed!");
            })
            .catch(function (error) {
                    console.log(JSON.stringify(error));
            });
        });
    }
'Excel.BindingCollection#getItemAt:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var lastPosition = ctx.workbook.bindings.count - 1;
        var binding = ctx.workbook.bindings.getItemAt(lastPosition);
        binding.load('type')
        return ctx.sync().then(function() {
                console.log(binding.type); 
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.BindingCollection#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var bindings = ctx.workbook.bindings;
        bindings.load('items');
        return ctx.sync().then(function() {
            for (var i = 0; i < bindings.items.length; i++)
            {
                console.log(bindings.items[i].id);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // Get the number of bindings
    Excel.run(function (ctx) { 
        var bindings = ctx.workbook.bindings;
        bindings.load('count');
        return ctx.sync().then(function() {
            console.log("Bindings: Count= " + bindings.count);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.CellPropertiesFill#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.CellPropertiesFillLoadOptions#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellPropertiesFont#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.CellPropertiesFontLoadOptions#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellPropertiesLoadOptions#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.CellValueConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.CellValueConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.Chart#delete:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.delete();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Chart#getImage:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        var image = chart.getImage();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Chart#legend:member':
  - |-
    // Set to show legend of Chart1 and make it on top of the chart.
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.legend.visible = true;
        chart.legend.position = "top"; 
        chart.legend.overlay = false; 
        return ctx.sync().then(function() {
                console.log("Legend Shown ");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Chart#load:member(2)':
  - |-
    // Get a chart named "Chart1"
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.load('name');
        return ctx.sync().then(function() {
                console.log(chart.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Chart#name:member':
  - >-
    // Rename the chart to new name, resize the chart to 200 points in both
    height and weight. 

    // Move Chart1 to 100 points to the top and left. 

    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.name = "New Name";
        chart.top = 100;
        chart.left = 100;
        chart.height = 200;
        chart.width = 200;
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Chart#onActivated:member':
  - |-
    Excel.run(function (context){
        var pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem("Pie");
        pieChart.onActivated.add(function (event) {
            return Excel.run(function (context) {
                console.log("The pie chart is the active chart. ID: " + event.chartId);
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.Chart#onDeactivated:member':
  - |-
    Excel.run(function (context){
        var pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem("Pie");
        pieChart.onDeactivated.add(function (event) {
            return Excel.run(function (context) {
                console.log("The pie chart is NOT active.");
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.Chart#setData:member(1)':
  - |-
    // Set the sourceData to be "A1:B4" and seriesBy to be "Columns"
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        var sourceData = "A1:B4";
        chart.setData(sourceData, "Columns");
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Chart#setPosition:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Charts";
        var rangeSelection = "A1:B4";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeSelection);
        var sourceData = sheetName + "!" + "A1:B4";
        var chart = ctx.workbook.worksheets.getItem(sheetName).charts.add("pie", range, "auto");
        chart.width = 500;
        chart.height = 300;
        chart.setPosition("C2", null);
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartAxes#valueAxis:member':
  - |-
    // Set the maximum, minimum, majorUnit, minorUnit of valueAxis. 
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.axes.valueAxis.maximum = 5;
        chart.axes.valueAxis.minimum = 0;
        chart.axes.valueAxis.majorUnit = 1;
        chart.axes.valueAxis.minorUnit = 0.2;
        return ctx.sync().then(function() {
                console.log("Axis Settings Changed");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartAxis#displayUnit:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-axis.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        let categoryAxis = chart.axes.categoryAxis;
        let valueAxis = chart.axes.valueAxis;

        // Load to get display unit.
        valueAxis.load("displayUnit");

        await context.sync();

        console.log("The vertical axis display unit is: " + valueAxis.displayUnit);
    });
'Excel.ChartAxis#load:member(2)':
  - |-
    // Get the maximum of Chart Axis from Chart1
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        var axis = chart.axes.valueAxis;
        axis.load('maximum');
        return ctx.sync().then(function() {
                console.log(axis.maximum);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartAxis#showDisplayUnitLabel:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-axis.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        let chart = sheet.charts.getItemAt(0);
        let axis = chart.axes.valueAxis;

        // Remove display unit.
        axis.showDisplayUnitLabel = false;

        await context.sync();
    });
'Excel.ChartAxisTitle#load:member(2)':
  - |-
    // Add "Values" as the title for the value Axis 
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1"); 
        chart.axes.valueAxis.title.text = "Values";
        return ctx.sync().then(function() {
                console.log("Axis Title Added ");
        });
    }).catch(function(error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
    });
'Excel.ChartAxisTitle#textOrientation:member':
  - |-
    await Excel.run(async (context) => {
      // Get a chart named "Sales Chart" from the "Sample" worksheet.
      const sheet = context.workbook.worksheets.getItem("Sample");
      let chart = sheet.charts.getItem("Sales Chart");

      // Set the value axis title to "Profits".
      chart.axes.valueAxis.title.text = "Profits";

      /* Set the value axis text orientation to 0.
        For charts with a y-axis, this makes the label on the y-axis horizontal, 
        instead of the default look of rotated-vertically.
        */ 
      chart.axes.valueAxis.title.textOrientation = 0;
      await context.sync();
    });
'Excel.ChartCollection#add:member(1)':
  - |-
    // Add a chart of chartType "ColumnClustered" on worksheet "Charts" 
    // with sourceData from Range "A1:B4" and seriresBy is set to be "auto".
    Excel.run(function (ctx) { 
        var rangeSelection = "A1:B4";
        var range = ctx.workbook.worksheets.getItem(sheetName)
            .getRange(rangeSelection);
        var chart = ctx.workbook.worksheets.getItem(sheetName)
            .charts.add("ColumnClustered", range, "auto");    return ctx.sync().then(function() {
                console.log("New Chart Added");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartCollection#getItem:member(1)':
  - |-
    // Get the number of charts
    Excel.run(function (ctx) { 
        var charts = ctx.workbook.worksheets.getItem("Sheet1").charts;
        charts.load('count');
        return ctx.sync().then(function() {
            console.log("charts: Count= " + charts.count);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartCollection#getItemAt:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var lastPosition = ctx.workbook.worksheets.getItem("Sheet1").charts.count - 1;
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItemAt(lastPosition);
        return ctx.sync().then(function() {
                console.log(chart.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartCollection#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var charts = ctx.workbook.worksheets.getItem("Sheet1").charts;
        charts.load('items');
        return ctx.sync().then(function() {
            for (var i = 0; i < charts.items.length; i++) {
                console.log(charts.items[i].name);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartCollection#onActivated:member':
  - |-
    Excel.run(function (context){
        context.workbook.worksheets.getActiveWorksheet()
            .charts.onActivated.add(function (event) {
            return Excel.run(function (context) {
                console.log("The ID of the active chart is: " + event.chartId)
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.ChartCollection#onAdded:member':
  - |-
    Excel.run(function (context){
        context.workbook.worksheets.getActiveWorksheet()
            .charts.onAdded.add(function (event) {
            return Excel.run(function (context) {
                console.log("A chart has been added with ID: " + event.chartId);
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.ChartCollection#onDeactivated:member':
  - |-
    Excel.run(function (context){
        context.workbook.worksheets.getActiveWorksheet()
            .charts.onDeactivated.add(function (event) {
            return Excel.run(function (context) {
                console.log("The chart with this ID was deactivated: " + event.chartId);
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.ChartCollection#onDeleted:member':
  - |-
    Excel.run(function (context){
        context.workbook.worksheets.getActiveWorksheet()
            .charts.onDeleted.add(function (event) {
            return Excel.run(function (context) {
                console.log("The chart with this ID was deleted: " + event.chartId);
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.ChartDataLabels#load:member(2)':
  - >-
    // Make Series Name shown in Datalabels and set the position of datalabels
    to be "top";

    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.datalabels.showValue = true;
        chart.datalabels.position = "top";
        chart.datalabels.showSeriesName = true;
        return ctx.sync().then(function() {
                console.log("Datalabels Shown");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartFill#clear:member(1)':
  - >-
    // Clear the line format of the major Gridlines on value axis of the Chart
    named "Chart1"

    Excel.run(function (ctx) { 
        var gridlines = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").axes.valueAxis.majorGridlines;
        gridlines.format.line.clear();
        return ctx.sync().then(function() {
                console.log("Chart Major Gridlines Format Cleared");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartFill#setSolidColor:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-point.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let pointsCollection = sheet.charts.getItemAt(0).series.getItemAt(0).points;
        let point = pointsCollection.getItemAt(2);

        // Set color for chart point.
        point.format.fill.setSolidColor('red');

        await context.sync();        
    });
'Excel.ChartFont:class':
  - |-
    // Set chart title to be Calbri, size 10, bold and in red. 
    Excel.run(function (ctx) { 
        var title = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").title;
        title.format.font.name = "Calibri";
        title.format.font.size = 12;
        title.format.font.color = "#FF0000";
        title.format.font.italic =  false;
        title.format.font.bold = true;
        title.format.font.underline = "None";
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartGridlines#load:member(2)':
  - |-
    // Set to show major gridlines on valueAxis of Chart1
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.axes.valueAxis.majorGridlines.visible = true;
        return ctx.sync().then(function() {
                console.log("Axis Gridlines Added ");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartLegend#load:member(2)':
  - |-
    // Get the position of Chart Legend from Chart1
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        var legend = chart.legend;
        legend.load('position');
        return ctx.sync().then(function() {
                console.log(legend.position);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartLegendFormat#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-legend.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        chart.legend.visible = true;

        // Format the legend font.
        let font = chart.legend.format.font;
        font.bold = true;
        font.color = "red";
        font.italic = true;
        font.size = 15;
        font.name = "Calibri";
        font.underline = "Single";

        await context.sync();
    });
'Excel.ChartLineFormat#clear:member(1)':
  - |-
    // Set to show legend of Chart1 and make it on top of the chart.
    Excel.run(function (ctx) { 
        var gridlines = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").axes.valueAxis.majorGridlines;
        gridlines.format.line.clear();
        return ctx.sync().then(function() {
                console.log("Chart Major Gridlines Format Cleared");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartLineFormat#load:member(2)':
  - |-
    // Set chart major gridlines on value axis to be red.
    Excel.run(function (ctx) {
        var gridlines = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").axes.valueAxis.majorGridlines;
        gridlines.format.line.color = "#FF0000";
        return ctx.sync().then(function () {
            console.log("Chart Gridlines Color Updated");
        });
    }).catch(function (error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartPointsCollection#getItemAt:member(1)':
  - |-
    // Set the border color for the first points in the points collection
    Excel.run(function (ctx) { 
        var points = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series.getItemAt(0).points;
        points.getItemAt(0).format.fill.setSolidColor("8FBC8F");
        return ctx.sync().then(function() {
            console.log("Point Border Color Changed");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartPointsCollection#load:member(2)':
  - |-
    // Get the names of points in the points collection
    Excel.run(function (ctx) { 
        var pointsCollection = 
            ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series.getItemAt(0).points;
        pointsCollection.load('items');
        return ctx.sync().then(function() {
            console.log("Points Collection loaded");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // Get the number of points
    Excel.run(function (ctx) { 
        var pointsCollection = 
            ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series.getItemAt(0).points;
        pointsCollection.load('count');
        return ctx.sync().then(function() {
            console.log("points: Count= " + pointsCollection.count);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartSeries#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const seriesCollection = sheet.charts.getItemAt(0).series;
      seriesCollection.load("count");
      await context.sync();

      if (seriesCollection.count > 0) {
        const series = seriesCollection.getItemAt(0);

        // Delete the first series.
        series.delete();
      }

      await context.sync();
    });
'Excel.ChartSeries#getDimensionValues:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-bubble-chart.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // The sample chart is of type `Excel.ChartType.bubble`.
      const bubbleChart = sheet.charts.getItem("Product Chart");

      // Get the first series in the chart.
      const firstSeries = bubbleChart.series.getItemAt(0);

      // Get the values for the dimensions we're interested in.
      const bubbleSize = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.bubbleSizes);
      const xValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.xvalues);
      const yValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.yvalues);
      const category = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.categories);

      await context.sync();

      // Log the information.
      console.log(`Series ${category.value} - X:${xValues.value},Y:${yValues.value},Bubble:${bubbleSize.value}`);
    });
'Excel.ChartSeries#load:member(2)':
  - |-
    // Rename the 1st series of Chart1 to "New Series Name"
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.series.getItemAt(0).name = "New Series Name";
        return ctx.sync().then(function() {
                console.log("Series1 Renamed");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartSeries#markerBackgroundColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerForegroundColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerSize:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#markerStyle:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    });
'Excel.ChartSeries#setBubbleSizes:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-bubble-chart.yaml

    await Excel.run(async (context) => {
      /*
        The table is expected to look like this:
        Product, Inventory, Price, Current Market Share
        Calamansi, 2000, $2.45, 10%
        ...

        We want each bubble to represent a single row.
      */

      // Get the worksheet and table data.
      const sheet = context.workbook.worksheets.getItem("Sample");
      const table = sheet.tables.getItem("Sales");
      const dataRange = table.getDataBodyRange();

      // Get the table data without the row names.
      const valueRange = dataRange.getOffsetRange(0, 1).getResizedRange(0, -1);

      // Create the chart.
      const bubbleChart = sheet.charts.add(Excel.ChartType.bubble, valueRange);
      bubbleChart.name = "Product Chart";

      // Remove the default series, since we want a unique series for each row.
      bubbleChart.series.getItemAt(0).delete();

      // Load the data necessary to make a chart series.
      dataRange.load(["rowCount", "values"]);
      await context.sync();

      // For each row, create a chart series (a bubble).
      for (let i = 0; i < dataRange.rowCount; i++) {
        const newSeries = bubbleChart.series.add(dataRange.values[i][0], i);
        newSeries.setXAxisValues(dataRange.getCell(i, 1));
        newSeries.setValues(dataRange.getCell(i, 2));
        newSeries.setBubbleSizes(dataRange.getCell(i, 3));

        // Show the product name and market share percentage.
        newSeries.dataLabels.showSeriesName = true;
        newSeries.dataLabels.showBubbleSize = true;
        newSeries.dataLabels.showValue = false;
      }

      await context.sync();
    });
'Excel.ChartSeries#setValues:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      let seriesCollection = sheet.charts.getItemAt(0);
      let rangeSelection = sheet.getRange("C2:C7");
      let xRangeSelection = sheet.getRange("A1:A7");

      // Add a series.
      let newSeries = seriesCollection.series.add("Qtr2");
      newSeries.setValues(rangeSelection);
      newSeries.setXAxisValues(xRangeSelection);

      await context.sync();
    });
'Excel.ChartSeriesCollection#getItemAt:member(1)':
  - |-
    // Get the name of the first series in the series collection.
    Excel.run(function (ctx) { 
        var seriesCollection = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series;
        seriesCollection.load('items');
        return ctx.sync().then(function() {
            console.log(seriesCollection.items[0].name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartSeriesCollection#load:member(2)':
  - |-
    // Getting the names of series in the series collection.
    Excel.run(function (ctx) { 
        var seriesCollection = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series;
        seriesCollection.load('items');
        return ctx.sync().then(function() {
            for (var i = 0; i < seriesCollection.items.length; i++)
            {
                console.log(seriesCollection.items[i].name);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // Get the number of chart series in collection.
    Excel.run(function (ctx) { 
        var seriesCollection = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series;
        seriesCollection.load('count');
        return ctx.sync().then(function() {
            console.log("series: Count= " + seriesCollection.count);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ChartTitle#getSubstring:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-title-format.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let chart = sheet.charts.getItemAt(0);

        // Get first seven characters of the title and color them green.
        chart.title.getSubstring(0, 7).font.color = "Yellow";
        await context.sync();
    });
'Excel.ChartTitle#load:member(2)':
  - |-
    // Get the text of Chart Title from Chart1.
    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        
        var title = chart.title;
        title.load('text');
        return ctx.sync().then(function() {
                console.log(title.text);
        }).catch(function(error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
        });
    });
  - >-
    // Set the text of Chart Title to "My Chart" and Make it show on top of the
    chart without overlaying.

    Excel.run(function (ctx) { 
        var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        
        chart.title.text= "My Chart"; 
        chart.title.visible=true;
        chart.title.overlay=true;
        
        return ctx.sync().then(function() {
            console.log("Char Title Changed");
        }).catch(function(error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
        });
    });
'Excel.ChartTitle#textOrientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-title-format.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const title = sheet.charts.getItemAt(0).title;
        title.textOrientation = -45;

        await context.sync();
    });
'Excel.ChartTrendline#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series;

        // Get the trendline for series 1 and load its type property.  
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
        trendline.load("type");

        await context.sync();

        console.log("The trendline type is:" + trendline.type);  
    });
'Excel.ChartTrendlineCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series;

         // Add a trendline.  
        seriesCollection.getItemAt(0).trendlines.add("Linear");

        await context.sync();
    });
'Excel.ChartTrendlineFormat#line:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series; 

        // Get the color of the chart trendline. 
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
        let line = trendline.format.line;
        line.load("color");

        await context.sync();

        console.log("The trendline color is:" + line.color);
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-trendlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series; 
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);

        // Set format of the trendline to a solid, red line.
        let line = trendline.format.line;
        line.color = '#FF0000';

        await context.sync();

        console.log("The trendline color has been set to:" + line.color);
    });
'Excel.ColorScaleConditionalFormat#criteria:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.Comment#content:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.content = "PLEASE add headers here.";
        await context.sync();
    });
'Excel.Comment#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        context.workbook.comments.getItemByCell("Comments!A2").delete();
        await context.sync();
    });
'Excel.Comment#load:member(2)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const comment = context.workbook.comments.getItemByCell("Comments!A2");
        comment.load(["authorEmail", "authorName", "creationDate"]);
        await context.sync();

        console.log(`${comment.creationDate.toDateString()}: ${comment.authorName} (${comment.authorEmail})`);
        await context.sync();
    });
'Excel.Comment#resolved:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-resolution.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        sheet.comments.getItemAt(0).resolved = true;
        await context.sync();
    });
'Excel.CommentCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A2", "TODO: add data.");
        await context.sync();
    });
'Excel.CommentCollection#onAdded:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentAdded(event: Excel.CommentAddedEventArgs) {
        await Excel.run(async (context) => {
            // Retrieve the added comment using the comment ID.
            // Note: This method assumes only a single comment is added at a time. 
            const addedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);

            // Load the added comment's data.
            addedComment.load(["content", "authorName", "creationDate"]);

            await context.sync();

            // Print out the added comment's data.
            console.log(`A comment was added:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
            console.log(`    Comment content:${addedComment.content}`);
            console.log(`    Comment author:${addedComment.authorName}`);
            console.log(`    Creation date:${addedComment.creationDate}`);
        });
    }
'Excel.CommentCollection#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentChanged(event: Excel.CommentChangedEventArgs) {
        await Excel.run(async (context) => {
            // Retrieve the changed comment using the comment ID.
            // Note: This method assumes only a single comment is changed at a time. 
            const changedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);

            // Load the changed comment's data.
            changedComment.load(["content", "authorName", "creationDate"]);

            await context.sync();

            // Print out the changed comment's data.
            console.log(`A comment was changed:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
            console.log(`    Updated comment content: ${changedComment.content}`);
            console.log(`    Comment author: ${changedComment.authorName}`);
            console.log(`    Creation date: ${changedComment.creationDate}`);
        });
    }
'Excel.CommentCollection#onDeleted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    await Excel.run(async (context) => {
        const comments = context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded, onChanged, and onDeleted comment event handlers.
        comments.onAdded.add(commentAdded);
        comments.onChanged.add(commentChanged);
        comments.onDeleted.add(commentDeleted);

        await context.sync();

        console.log("Added event handlers for when comments are added, changed, or deleted.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

    async function commentDeleted(event: Excel.CommentDeletedEventArgs) {
        await Excel.run(async (context) => {
            // Print out the deleted comment's ID.
            // Note: This method assumes only a single comment is deleted at a time. 
            console.log(`A comment was deleted:`);
            console.log(`    ID: ${event.commentDetails[0].commentId}`);
        });
    }
'Excel.CommentReply#content:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        const reply = comment.replies.getItemAt(0);
        reply.load("content");
        // Sync to load the content of the comment reply.
        await context.sync();

        // Append "Please!" to the end of the comment reply.
        reply.content += " Please!";
        await context.sync();
    });
'Excel.CommentReply#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        // Remove the first comment reply from this worksheet's first comment.
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.replies.getItemAt(0).delete();
        await context.sync();
    });
'Excel.CommentReplyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-replies.yaml

    await Excel.run(async (context) => {
        // Adds a reply to the first comment in this worksheet.
        const sheet = context.workbook.worksheets.getItem("Comments");
        const comment = sheet.comments.getItemAt(0);
        comment.replies.add("Add content to this worksheet.");
        await context.sync();
    });
'Excel.CommentRichContent#mentions:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-mentions.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Comments");
        const mention = {
            email: "kakri@contoso.com",
            id: 0,
            name: "Kate Kristensen"
        };

        // This will tag the mention's name using the '@' syntax.
        // They will be notified via email.
        const commentBody = {
            mentions: [mention],
            richContent: '<at id="0">' + mention.name + "</at> -  Can you take a look?"
        };

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A1", commentBody, Excel.ContentType.mention);
        await context.sync();
    });
'Excel.ConditionalCellValueRule#formula1:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalCellValueRule#operator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalFormat#cellValue:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B21:E23");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    });
'Excel.ConditionalFormat#colorScale:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.ConditionalFormat#custom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.ConditionalFormat#dataBar:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.dataBar);
        conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

        await context.sync();
    });
'Excel.ConditionalFormat#getRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormat#iconSet:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalFormat#preset:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
'Excel.ConditionalFormat#textComparison:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.ConditionalFormat#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormatCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        const criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    });
'Excel.ConditionalFormatCollection#clearAll:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange();
        range.conditionalFormats.clearAll();

        await context.sync();

        $(".conditional-formats").hide();
    });
'Excel.ConditionalFormatCollection#getCount:member(1)':
  - |-
    Excel.run(function (ctx) {
        var sheetName = "Sheet1";
        var rangeAddress = "A1:C3";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
        conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;
        var cfCount = range.conditionalFormats.getCount(); 

        return ctx.sync().then(function () {
            console.log("Count: " + cfCount.value);
        });
    }).catch(function (error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ConditionalFormatCollection#getItem:member(1)':
  - |-
    Excel.run(function (ctx) {
        var sheetName = "Sheet1";
        var rangeAddress = "A1:C3";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        var conditionalFormats = range.conditionalFormats;
        var conditionalFormat = conditionalFormats.getItemAt(3);
        return ctx.sync().then(function () {
            console.log("Conditional Format at Item 3 Loaded");
        });
    }).catch(function (error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.ConditionalFormatCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    });
'Excel.ConditionalFormatRule#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.ConditionalIconCriterion#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalIconCriterion#operator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.ConditionalIconCriterion#type:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.ConditionalPresetCriteriaRule#criterion:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
'Excel.ConditionalTextComparisonRule#text:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.CultureInfo#datetimeFormat:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info-date-time.yaml

    await Excel.run(async (context) => {
      context.application.cultureInfo.datetimeFormat.load([
        "longDatePattern",
        "shortDatePattern",
        "dateSeparator",
        "longTimePattern",
        "timeSeparator"
      ]);
      await context.sync();

      // Use the cultural settings API to retrieve the user's system date and time settings.
      const systemLongDatePattern = context.application.cultureInfo.datetimeFormat.longDatePattern;
      const systemShortDatePattern = context.application.cultureInfo.datetimeFormat.shortDatePattern;
      const systemDateSeparator = context.application.cultureInfo.datetimeFormat.dateSeparator;
      const systemLongTimePattern = context.application.cultureInfo.datetimeFormat.longTimePattern;
      const systemTimeSeparator = context.application.cultureInfo.datetimeFormat.timeSeparator;

      // Write the date and time settings in your table. 
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const dateTimeData = sheet.getRange("A2:B6");
      dateTimeData.values = [
        ["Long date", systemLongDatePattern], 
        ["Short date", systemShortDatePattern], 
        ["Date separator", systemDateSeparator], 
        ["Long time format", systemLongTimePattern],
        ["Time separator", systemTimeSeparator]
      ];

      sheet.tables
        .getItemAt(0)
        .getRange()
        .format.autofitColumns();

      await context.sync();
    });
'Excel.CustomConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.CustomConditionalFormat#rule:member':
  - |-
    Excel.run(function (ctx) {
        var sheet = ctx.workbook.worksheets.getActiveWorksheet();
        var range = sheet.getRange("A1:A5");
        range.values = [[1], [20], [""], [5], ["test"]];
        var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        var cfCustom = cf.customOrNullObject;
        cfCustom.rule.formula = "=ISBLANK(A1)";
        cfCustom.format.fill.color = "#00FF00";
        return ctx.sync().then(function () {
            console.log("Added new custom conditional format highlighting all blank cells.");
        });
    }).catch(function (error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.CustomPropertyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Get the key/value pair from the task pane.
      const userKey = $("#key").text();
      const userValue = $("#value").text();

      // Add the custom property.
      const customDocProperties = context.workbook.properties.custom;
      customDocProperties.add(userKey, userValue);

      await context.sync();

      console.log(`Successfully set custom document property ${userKey}:${userValue}.`);
    });
'Excel.CustomXmlPart#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
            const xmlBlob = customXmlPart.getXml();
            customXmlPart.delete();
            customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

            await context.sync();

            if (customXmlPart.isNullObject) {
                $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                // Delete the unneeded setting too.
                xmlPartIDSetting.delete();            
            } else {
                const readableXml = addLineBreaksToXML(xmlBlob.value);
                const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                $("#display-xml").text(strangeMessage);
            }

            await context.sync();
        }
    });
'Excel.CustomXmlPart#getXml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPart#id:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPart#setXml:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

            // The setXml method does a whole-for-whole replacement 
            // of the entire XML.
            customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
            const xmlBlob = customXmlPart.getXml();
            await context.sync();

            const readableXml = addLineBreaksToXML(xmlBlob.value);
            $("#display-xml").text(readableXml);
            await context.sync();
        }
    });
'Excel.CustomXmlPartCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        const customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        const xmlBlob = customXmlPart.getXml();

        await context.sync();

        const readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        const settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    });
'Excel.CustomXmlPartCollection#getByNamespace:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.CustomXmlPartCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

            // The setXml method does a whole-for-whole replacement 
            // of the entire XML.
            customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
            const xmlBlob = customXmlPart.getXml();
            await context.sync();

            const readableXml = addLineBreaksToXML(xmlBlob.value);
            $("#display-xml").text(readableXml);
            await context.sync();
        }
    });
'Excel.CustomXmlPartScopedCollection#getCount:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
            const xmlBlob = customXmlPart.getXml();
            customXmlPart.delete();
            customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

            await context.sync();

            if (customXmlPart.isNullObject) {
                $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                // Delete the unneeded setting too.
                xmlPartIDSetting.delete();            
            } else {
                const readableXml = addLineBreaksToXML(xmlBlob.value);
                const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                $("#display-xml").text(strangeMessage);
            }

            await context.sync();
        }
    });
'Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

    await Excel.run(async (context) => {
        $("#display-xml").text("");
        const contosoNamespace = "http://schemas.contoso.com/review/1.0";
        const customXmlParts = context.workbook.customXmlParts;
        const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
        const numberOfPartsInNamespace = filteredXmlParts.getCount();

        await context.sync();

        if (numberOfPartsInNamespace.value == 1) {
            const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
            const xmlBlob = onlyXmlPartInNamespace.getXml();

            await context.sync();

            // Make it a bit more readable.
            const readableXml = xmlBlob.value.replace(/></g, ">\n<");

            $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                ${readableXml}`);

        } else {
            console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
        }        

        await context.sync();
    });
'Excel.DataBarConditionalFormat#barDirection:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.dataBar);
        conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

        await context.sync();
    });
'Excel.DataPivotHierarchy#name:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const dataHierarchies = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales").dataHierarchies
        dataHierarchies.load("no-properties-needed");
        await context.sync();

        dataHierarchies.items[0].name = "Farm Sales";
        dataHierarchies.items[1].name = "Wholesale";
        await context.sync();
    });
'Excel.DataPivotHierarchy#showAs:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-calculations.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");        
        const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // show the crates of each fruit type sold at the farm as a percentage of the column's total
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    });
'Excel.DataValidation#errorAlert:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const commentsRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        commentsRange.dataValidation.clear();   

        // If the value of A2 is contained in the value of C2, then 
        // SEARCH(A2,C2) returns the number where it begins. Otherwise,
        // it does not return a number.
        let redundantStringRule = {
            custom: {
                formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
            }
        };
        commentsRange.dataValidation.rule = redundantStringRule;
        commentsRange.dataValidation.errorAlert = {
            message: "It is redundant to include the baby name in the comment.",
            showAlert: true,
            style: "Information",
            title: "Baby Name in Comment"
        };

        await context.sync();
    });
'Excel.DataValidation#prompt:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    });
'Excel.DataValidation#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const nameRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        nameRange.dataValidation.clear();

        const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        let approvedListRule = {
            list: {
                inCellDropDown: true,
                source: nameSourceRange
            }
        };
        nameRange.dataValidation.rule = approvedListRule;

        await context.sync();
    });
'Excel.DataValidationRule#list:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const nameRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        nameRange.dataValidation.clear();

        const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        let approvedListRule = {
            list: {
                inCellDropDown: true,
                source: nameSourceRange
            }
        };
        nameRange.dataValidation.rule = approvedListRule;

        await context.sync();
    });
'Excel.DataValidationRule#wholeNumber:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Decision");
        const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    });
'Excel.DocumentProperties#custom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Load the keys and values of all custom properties.
      const customDocProperties = context.workbook.properties.custom;
      customDocProperties.load(["key", "value"]);
      await context.sync();

      // Log each custom property to the console.
      // Note that your document may have more properties than those you have set using this snippet.
      customDocProperties.items.forEach((property) => {
        console.log(`${property.key}:${property.value}`);
      });
    });
'Excel.IconSetConditionalFormat#criteria:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.IconSetConditionalFormat#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    });
'Excel.Image#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const image = sheet.shapes.getItem("Image").image;
        image.load("format");
        await context.sync();

        console.log("The image's format is: " + image.format);
        await context.sync();
    });
'Excel.Line#connectBeginShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.connectBeginShape(shapes.getItem("Left"), 2);
        line.connectEndShape(shapes.getItem("Right"), 0);
        await context.sync();
    });
'Excel.Line#connectEndShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.connectBeginShape(shapes.getItem("Left"), 2);
        line.connectEndShape(shapes.getItem("Right"), 0);
        await context.sync();
    });
'Excel.Line#disconnectBeginShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.disconnectBeginShape();
        line.disconnectEndShape();
        await context.sync();
    });
'Excel.Line#disconnectEndShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.disconnectBeginShape();
        line.disconnectEndShape();
        await context.sync();
    });
'Excel.NamedItem#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/34-named-item/create-and-remove-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const totalName = sheet.names.getItemOrNullObject("TotalAmount");
        totalName.load();
        await context.sync();

        if (totalName.value) {
            totalName.delete();

            // Replace the named item (TotalAmount) with the actual formula for TotalAmount to avoid displaying #NAME in the cell.
            sheet.getRange("D11").values = [["=SUM(ExpensesTable[AMOUNT])"]];
        } else {
            console.log("No named item created for the formula.");
        }

        await context.sync();
    });
'Excel.NamedItem#formula:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/34-named-item/update-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Get the named item
        const myNamedItem = sheet.names.getItemOrNullObject("MyRange");
        myNamedItem.load("name, formula");
        await context.sync();

        if (myNamedItem.isNullObject) {
            console.log(`There is no named item. Create it with "Add named item for a range" first.`);
        } else {                    
            // Update named item to point to the second range
            myNamedItem.formula = "=Sample!$B$10:$D$14";
            sheet.getRange("B10:D14").select();
            await context.sync();

            console.log(`Just updated the named item "${myNamedItem.name}" -- it's now located here: ${myNamedItem.formula}`);
        }
    });
'Excel.NamedItem#getRange:member(1)':
  - |-
    // Returns the Range object that is associated with the name. 
    // null if the name is not of the type Range.
    // Note: This API currently supports only the Workbook scoped items.
    Excel.run(function (ctx) { 
        var names = ctx.workbook.names;
        var range = names.getItem('MyRange').getRange();
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.NamedItem#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var names = ctx.workbook.names;
        var namedItem = names.getItem('MyRange');
        namedItem.load('type');
        return ctx.sync().then(function() {
                console.log(namedItem.type);
        });
    }).catch(function(error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
    });
'Excel.NamedItemCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/34-named-item/create-and-remove-named-item.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const headerRange = sheet.getRange("A1:D1");

        sheet.names.add("ExpensesHeader", headerRange);
        const namedItems = sheet.names.load("name, type");

        await context.sync();
    });
'Excel.NamedItemCollection#getItem:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = 'Sheet1';
        var nameditem = ctx.workbook.names.getItem(sheetName);
        nameditem.load('type');
        return ctx.sync().then(function() {
                console.log(nameditem.type);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.NamedItemCollection#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var nameditems = ctx.workbook.names;
        nameditems.load('items');
        return ctx.sync().then(function() {
            for (var i = 0; i < nameditems.items.length; i++)
            {
                console.log(nameditems.items[i].name);
                console.log(nameditems.items[i].index);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.NumberFormatInfo#numberDecimalSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

    // This will convert a number like "14,37" to "14.37"

    // (assuming the system decimal separator is ".").
      await Excel.run(async (context) => {
    const sheet = context.workbook.worksheets.getItem("Sample");

    const decimalSource = sheet.getRange("B2");

    decimalSource.load("values");

    context.application.cultureInfo.numberFormat.load("numberDecimalSeparator");

    await context.sync();


    const systemDecimalSeparator =
    context.application.cultureInfo.numberFormat.numberDecimalSeparator;

    const oldDecimalString: string = decimalSource.values[0][0];


    // This assumes the input column is standardized to use "," as the decimal
    separator. 

    const newDecimalString = oldDecimalString.replace(",",
    systemDecimalSeparator);


    const resultRange = sheet.getRange("C2");

    resultRange.values = [[newDecimalString]];

    resultRange.format.autofitColumns();

    await context.sync();
      });
'Excel.NumberFormatInfo#numberGroupSeparator:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

    await Excel.run(async (context) => {
      // This will convert a number like "123-456-789" to "123,456,789"
      // (assuming the system thousands separator is ",").
      const sheet = context.workbook.worksheets.getItem("Sample");
      const bigNumberSource = sheet.getRange("B3");
      bigNumberSource.load("values");
      context.application.cultureInfo.numberFormat.load("numberGroupSeparator");
      await context.sync();

      const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;
      const oldBigNumberString: string = bigNumberSource.values[0][0];
      
      // This assumes the input column is standardized to use "-" as the number group separator. 
      const newBigNumberString = oldBigNumberString.replace(/-/g, systemThousandsSeparator);

      const resultRange = sheet.getRange("C3");
      resultRange.values = [[newBigNumberString]];
      resultRange.format.autofitColumns();
      await context.sync();
    });
'Excel.PageBreakCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.horizontalPageBreaks.add("A21:E21");
        await context.sync();
    });
'Excel.PageLayout#centerHorizontally:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.centerHorizontally = true;
        farmSheet.pageLayout.centerVertically = true;
        await context.sync();
    });
'Excel.PageLayout#centerVertically:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.centerHorizontally = true;
        farmSheet.pageLayout.centerVertically = true;
        await context.sync();
    });
'Excel.PageLayout#orientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;
        await context.sync();
    });
'Excel.PageLayout#setPrintArea:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.setPrintArea("A1:D41");
        await context.sync();
    });
'Excel.PageLayout#setPrintTitleRows:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.setPrintTitleRows("$1:$1");
        await context.sync();
    });
'Excel.PageLayout#zoom:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-page-layout.yaml

    await Excel.run(async (context) => {
        const farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.zoom = { scale: 200 };
        await context.sync();
    });
'Excel.PivotField#clearAllFilters:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Clear all the PivotFilters.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
      pivotTable.hierarchies.load("name");
      await context.sync();

      // Clear the filters on each PivotField.
      pivotTable.hierarchies.items.forEach((hierarchy) => {
        hierarchy.fields.getItem(hierarchy.name).clearAllFilters();
      });
      await context.sync();
    });
'Excel.PivotFilters#dateFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a date-based PivotFilter.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.
      // If it's not already there, add "Date Updated" to the hierarchies.
      let dateHierarchy = pivotTable.rowHierarchies.getItemOrNullObject("Date Updated");
      await context.sync();
      if (dateHierarchy.isNullObject) {
        dateHierarchy = pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Date Updated"));
      }

      // Apply a date filter to filter out anything logged before August.
      const filterField = dateHierarchy.fields.getItem("Date Updated");
      const dateFilter = {
        condition: Excel.DateFilterCondition.afterOrEqualTo,
        comparator: {
          date: "2020-08-01",
          specificity: Excel.FilterDatetimeSpecificity.month
        }
      };
      filterField.applyFilter({ dateFilter: dateFilter });

      await context.sync();
    });
'Excel.PivotFilters#labelFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter based on the strings of item labels.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Type" field.
      const field = pivotTable.hierarchies.getItem("Type").fields.getItem("Type");

      // Filter out any types that start with "L" ("Lemons" and "Limes" in this case).
      const filter: Excel.PivotLabelFilter = {
        condition: Excel.LabelFilterCondition.beginsWith,
        substring: "L",
        exclusive: true
      };

      // Apply the label filter to the field.
      field.applyFilter({ labelFilter: filter });

      await context.sync();
    });
'Excel.PivotFilters#manualFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on manually-selected items.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // PivotFilters can only be applied to PivotHierarchies that are being used for pivoting.
      // If it's not already there, add "Classification" to the hierarchies.
      let classHierarchy = pivotTable.filterHierarchies.getItemOrNullObject("Classification");
      await context.sync();
      if (classHierarchy.isNullObject) {
        classHierarchy = pivotTable.filterHierarchies.add(pivotTable.hierarchies.getItem("Classification"));
      }

      // Apply a manual filter to include only a specific PivotItem (the string "Organic").
      const filterField = classHierarchy.fields.getItem("Classification");
      const manualFilter = { selectedItems: ["Organic"]};
      filterField.applyFilter({ manualFilter: manualFilter });

      await context.sync();
    });
'Excel.PivotFilters#valueFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on the values correlated with a row.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Farm" field.
      const field = pivotTable.hierarchies.getItem("Farm").fields.getItem("Farm");

      // Filter to only include rows with more than 500 wholesale crates sold.
      const filter: Excel.PivotValueFilter = {
        condition: Excel.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: "Sum of Crates Sold Wholesale"
      };

      // Apply the value filter to the field.
      field.applyFilter({ valueFilter: filter });

      await context.sync();
    });
'Excel.PivotHierarchy#fields:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotfilters.yaml

    await Excel.run(async (context) => {
      // Add a PivotFilter to filter on the values correlated with a row.

      // Get the PivotTable.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

      // Get the "Farm" field.
      const field = pivotTable.hierarchies.getItem("Farm").fields.getItem("Farm");

      // Filter to only include rows with more than 500 wholesale crates sold.
      const filter: Excel.PivotValueFilter = {
        condition: Excel.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: "Sum of Crates Sold Wholesale"
      };

      // Apply the value filter to the field.
      field.applyFilter({ valueFilter: filter });

      await context.sync();
    });
'Excel.PivotLayout#altTextDescription:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Set the alt text for the displayed PivotTable.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.altTextTitle = "Farm Sales PivotTable";
      pivotLayout.altTextDescription = "A summary of fruit sales. It is pivoted on farm name, and fruit type. The aggregated data is both the sums of crates sold at the farms and the sums of crates sold wholesale.";
      console.log("Adding alt text. Check the PivotTable settings to see the changes.");

      await context.sync();
    });
'Excel.PivotLayout#displayBlankLineAfterEachItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Add a blank row after each PivotItem in the row hierarchy.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.displayBlankLineAfterEachItem(true);
      console.log("Setting `PivotLayout.displayBlankLineAfterEachItem` to true.");

      await context.sync();
    });
'Excel.PivotLayout#emptyCellText:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Set a default value for an empty cell in the PivotTable. This doesn't include cells left blank by the layout.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.emptyCellText = "--";

      // Set the text alignment to match the rest of the PivotTable.
      pivotLayout.getDataBodyRange().format.horizontalAlignment = Excel.HorizontalAlignment.right;
      await context.sync();
    });
'Excel.PivotLayout#fillEmptyCells:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Toggle whether empty cells are filled with a default value.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.load("fillEmptyCells");
      await context.sync();

      let fillToSet = !pivotLayout.fillEmptyCells;
      console.log(`Filling empty cells? - ${fillToSet}`);

      pivotLayout.fillEmptyCells = fillToSet;
      await context.sync();
    });
'Excel.PivotLayout#getDataBodyRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

        // the layout controls the ranges used by the PivotTable
        const range = pivotTable.layout.getDataBodyRange();

        // get all the data hierarchy totals
        const grandTotalRange = range.getLastRow();
        grandTotalRange.load("address");
        await context.sync();
        
        // use the wholesale and farm sale totals to make a final sum
        const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange("B27:C27");
        masterTotalRange.formulas = [["All Crates", "=SUM(" + grandTotalRange.address + ")"]];
        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

        // the layout controls the ranges used by the PivotTable
        const range = pivotTable.layout.getDataBodyRange();

        // get all the data hierarchy totals
        const grandTotalRange = range.getLastRow();
        grandTotalRange.load("address");
        await context.sync();
        
        // use the wholesale and farm sale totals to make a final sum
        const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange("B27:C27");
        masterTotalRange.formulas = [["All Crates", "=SUM(" + grandTotalRange.address + ")"]];
        await context.sync();
    });
'Excel.PivotLayout#layoutType:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Change the PivotLayout.type to a new type.
      const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
      pivotTable.layout.load("layoutType");
      await context.sync();

      // Cycle between the three layout types.
      if (pivotTable.layout.layoutType === "Compact") {
        pivotTable.layout.layoutType = "Outline";
      } else if (pivotTable.layout.layoutType === "Outline") {
        pivotTable.layout.layoutType = "Tabular";
      } else {
        pivotTable.layout.layoutType = "Compact";
      }

      await context.sync();
      console.log("Pivot layout is now " + pivotTable.layout.layoutType);
    });
'Excel.PivotLayout#preserveFormatting:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Set whether the PivotTable keeps the established format after it is refreshed and recalculated.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.load("preserveFormatting");
      await context.sync();

      let preserveFormattingToSet = !pivotLayout.preserveFormatting;
      console.log(`Preserve the formatting PivotTable after a refresh? - ${preserveFormattingToSet}`);

      pivotLayout.preserveFormatting = preserveFormattingToSet;
      await context.sync();
    });
'Excel.PivotLayout#repeatAllItemLabels:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Repeat the PivotItem labels for each row used by another level of the row hierarchy.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.repeatAllItemLabels(true);
      console.log("Setting `PivotLayout.repeatAllItemLabels` to true.");

      await context.sync();
    });
'Excel.PivotLayout#showColumnGrandTotals:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Turn the grand totals on and off for the rows and columns.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.load(["showRowGrandTotals", "showColumnGrandTotals"]);
      await context.sync();

      let showColumnTotals = !pivotLayout.showColumnGrandTotals;
      let showRowTotals = !pivotLayout.showRowGrandTotals;
      console.log(`Show column grand totals? - ${showColumnTotals}`);
      console.log(`Show row grand totals? - ${showRowTotals}`);

      pivotLayout.showColumnGrandTotals = showColumnTotals;
      pivotLayout.showRowGrandTotals = showRowTotals;

      await context.sync();
    });
'Excel.PivotLayout#showFieldHeaders:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Turn the field headers on and off for the row and column hierarchies.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;
      pivotLayout.load("showFieldHeaders");
      await context.sync();

      let showHeaders = !pivotLayout.showFieldHeaders;
      console.log(`Show field headers? - ${showHeaders}`);
      pivotLayout.showFieldHeaders = showHeaders;
      await context.sync();
    });
'Excel.PivotLayout#showRowGrandTotals:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/pivottable-pivotlayout.yaml

    await Excel.run(async (context) => {
      // Turn the grand totals on and off for the rows and columns.
      const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      const pivotLayout = pivotTable.layout;

      pivotLayout.load(["showRowGrandTotals", "showColumnGrandTotals"]);
      await context.sync();

      let showColumnTotals = !pivotLayout.showColumnGrandTotals;
      let showRowTotals = !pivotLayout.showRowGrandTotals;
      console.log(`Show column grand totals? - ${showColumnTotals}`);
      console.log(`Show row grand totals? - ${showRowTotals}`);

      pivotLayout.showColumnGrandTotals = showColumnTotals;
      pivotLayout.showRowGrandTotals = showRowTotals;

      await context.sync();
    });
'Excel.PivotTable#columnHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");       

        // check if the PivotTable already has a column
        const column = pivotTable.columnHierarchies.getItemOrNullObject("Farm");
        column.load("id");
        await context.sync();

        if (column.isNullObject) {
            // adding the farm column to the column hierarchy automatically removes it from the row hierarchy
            pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
        } else {
            pivotTable.columnHierarchies.remove(column);
        }

        await context.sync();
    });
'Excel.PivotTable#dataHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));
        pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));

        await context.sync();
    });
'Excel.PivotTable#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm Sales").delete();

        await context.sync();
    });
'Excel.PivotTable#filterHierarchies:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

    async function filter(functionType: Excel.AggregationFunction) {
        await Excel.run(async (context) => {
            const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
            const filters = pivotTable.filterHierarchies;
            const filter = filters.getItemOrNullObject("Classification");
            filter.load();
            await context.sync();

            // add the Classification hierarchy to the filter, if it's not already there
            if (filter.isNullObject) {
                filters.add(pivotTable.hierarchies.getItem("Classification"));
                await context.sync();
            }
        });
    }
'Excel.PivotTable#layout:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.layout.load("layoutType");
        await context.sync();

        // cycle between the three layout types
        if (pivotTable.layout.layoutType === "Compact") {
            pivotTable.layout.layoutType = "Outline";
        } else if (pivotTable.layout.layoutType === "Outline") {
            pivotTable.layout.layoutType = "Tabular";
        } else {
            pivotTable.layout.layoutType = "Compact";
        }
        await context.sync();
        console.log("Pivot layout is now " + pivotTable.layout.layoutType);
    });
'Excel.PivotTableCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

    await Excel.run(async (context) => {
        const rangeToAnalyze = context.workbook.worksheets.getItem("Data").getRange("A1:E21");
        const rangeToPlacePivot = context.workbook.worksheets.getItem("Pivot").getRange("A2");
        context.workbook.worksheets.getItem("Pivot").pivotTables.add("Farm Sales", rangeToAnalyze, rangeToPlacePivot);

        await context.sync();
    });
'Excel.PresetCriteriaConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:M5");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B8:E13");
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    });
'Excel.Range#autoFill:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-auto-fill.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const sumCell = sheet.getRange("P4");
      
      // Copy everything. The formulas will be contextually updated based on their new locations.
      sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
      sumCell.format.autofitColumns();
      await context.sync();
    });
'Excel.Range#clear:member(1)':
  - |-
    // Below example clears format and contents of the range. 
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "D:F";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.clear();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#copyFrom:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        // Place a label in front of the copied data.
        sheet.getRange("F2").values = [["Copied Formula"]];

        // Copy a range preserving the formulas.
        // Note: non-formula values are copied over as is.
        sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
        await context.sync();
    });
'Excel.Range#delete:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "D:F";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.delete("Left");
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#find:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const table = sheet.tables.getItem("ExpensesTable");
        const searchRange = table.getRange();

        // NOTE: If no match is found, an ItemNotFound error
        // is thrown when Range.find is evaluated.
        const foundRange = searchRange.find($("#searchText").text(), {
            completeMatch: isCompleteMatchToggle,
            matchCase: isMatchCaseToggle,
            searchDirection: searchDirectionToggle
        });
        
        foundRange.load("address");
        await context.sync();


        console.log(foundRange.address);
    });
'Excel.Range#findOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const table = sheet.tables.getItem("ExpensesTable");
        const searchRange = table.getRange();
        const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
            completeMatch: isCompleteMatchToggle,
            matchCase: isMatchCaseToggle,
            searchDirection: searchDirectionToggle
        });
        
        foundRange.load("address");
        await context.sync();

        if (foundRange.isNullObject) {
            console.log("Text not found");
        } else {
            console.log(foundRange.address);
        }
    });
'Excel.Range#getBoundingRect:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "D4:G6";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        var range = range.getBoundingRect("G4:H8");
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address); // Prints Sheet1!D4:H8
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getCell:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        var cell = range.cell(0,0);
        cell.load('address');
        return ctx.sync().then(function() {
            console.log(cell.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getCellProperties:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        const propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        const cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    });
'Excel.Range#getColumn:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet19";
        var rangeAddress = "A1:F8";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address); // prints Sheet1!B1:B8
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getDirectDependents:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/range-direct-dependents.yaml

    await Excel.run(async (context) => {
      // Direct dependents are cells that contain formulas that refer to other cells.
      let range = context.workbook.getActiveCell();
      let directDependents = range.getDirectDependents();
      range.load("address");
      directDependents.areas.load("address");
      await context.sync();
      
      console.log(`Direct dependent cells of ${range.address}:`);
      
      // Use the direct dependents API to loop through direct dependents of the active cell.
      for (let i = 0; i < directDependents.areas.items.length; i++) {
        // Highlight and print the address of each dependent cell.
        directDependents.areas.items[i].format.fill.color = "Yellow";
        console.log(`  ${directDependents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Range#getDirectPrecedents:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/direct-precedents.yaml

    await Excel.run(async (context) => {
      // Precedents are cells referenced by the formula in a cell.
      let range = context.workbook.getActiveCell();
      let directPrecedents = range.getDirectPrecedents();
      range.load("address");
      directPrecedents.areas.load("address");
      await context.sync();

      console.log(`Direct precedent cells of ${range.address}:`);

      // Use the direct precedents API to loop through precedents of the active cell. 
      for (var i = 0; i < directPrecedents.areas.items.length; i++) {
        // Highlight and console the address of each precedent cell.
        directPrecedents.areas.items[i].format.fill.color = "Yellow";
        console.log(`  ${directPrecedents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Range#getEntireColumn:member(1)':
  - |-
    // Note: the grid properties of the Range (values, numberFormat, formulas) 
    // contains null since the Range in question is unbounded.
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "D:F";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        var rangeEC = range.getEntireColumn();
        rangeEC.load('address');
        return ctx.sync().then(function() {
            console.log(rangeEC.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getEntireRow:member(1)':
  - |-
    // Gets an object that represents the entire row of the range 
    // (for example, if the current range represents cells "B4:E11", 
    // its GetEntireRow is a range that represents rows "4:11").
    Excel.run(function (ctx) {
        var sheetName = "Sheet1";
        var rangeAddress = "D:F"; 
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        var rangeER = range.getEntireRow();
        rangeER.load('address');
        return ctx.sync().then(function() {
            console.log(rangeER.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getExtendedRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/range-get-range-edge.yaml

    await Excel.run(async (context) => {
      // Get the selected range.
      const range = context.workbook.getSelectedRange();

      // Specify the direction with the `KeyboardDirection` enum.
      const direction = Excel.KeyboardDirection.down;

      // Get the active cell in the workbook.
      const activeCell = context.workbook.getActiveCell();

      // Get all the cells from the currently selected range to the bottom-most edge of the used range.
      // This method acts like the Ctrl+Shift+Arrow key keyboard shortcut while a range is selected.
      const extendedRange = range.getExtendedRange(
        direction,
        activeCell // If the selected range contains more than one cell, the active cell must be defined.
      );
      extendedRange.select();

      await context.sync();
    });
'Excel.Range#getIntersection:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var range = 
            ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address); // prints Sheet1!D4:F6
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getIntersectionOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // We want the most recent quarter that has data, so
        // exclude quarters without data and get the last of
        // the remaining columns.
        const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
        const currentQuarterRange = usedDataRange.getLastColumn();

        // Asian and European teams have separate contests.
        const asianSalesRange = sheet.getRange("A2:E4");
        const europeanSalesRange = sheet.getRange("A5:E7");

        // The data for each chart is the intersection of the
        // current quarter column and the rows for the continent.
        const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
        const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

        // Must sync before you can test the output of *OrNullObject
        // method/property.
        await context.sync();

        if (asianContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("Asian");
        } else {
            createContinentChart(
                sheet,
                "Asian",
                asianContestRange,
                "A9",
                "F24"
            );
        }

        if (europeanContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("European");
        } else {
            createContinentChart(
                sheet,
                "European",
                europeanContestRange,
                "A25",
                "F40"
            );
        }

        await context.sync();
    });
'Excel.Range#getLastCell:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address); // prints Sheet1!F8
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getLastColumn:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address); // prints Sheet1!F1:F8
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getLastRow:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address); // prints Sheet1!A8:F8
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getMergedAreasOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/range-merged-ranges.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet and the table in that worksheet.
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const tableRange = sheet.getRange("B2:E6");

      // Retrieve the merged range within the table and load its details.
      const mergedAreas = tableRange.getMergedAreasOrNullObject();
      mergedAreas.load("address");
      mergedAreas.load("cellCount");

      // Select the merged range.
      const range = mergedAreas.areas.getItemAt(0);
      range.select();
      await context.sync();

      // Print out the details of the `mergedAreas` range object.
      console.log(`Address of the merged range: ${mergedAreas.address}`);
      console.log(`Number of cells in the merged range: ${mergedAreas.cellCount}`);

      await context.sync();
    });
'Excel.Range#getOffsetRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "D4:F6";
        var range = 
            ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address); // prints Sheet1!H3:J5
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getPivotTables:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      const activeRange = context.workbook.getSelectedRange();

      // Get all the PivotTables that intersect with this range.
      const partiallyContainedPivotTables = activeRange.getPivotTables();
      // Get all the PivotTables that are completely contained within this range.
      const fullyContainedPivotTables = activeRange.getPivotTables(true);

      partiallyContainedPivotTables.load("name");
      fullyContainedPivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the current range:")
      partiallyContainedPivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
      console.log("PivotTables completely contained in the current range:")
      fullyContainedPivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Range#getRangeEdge:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/range-get-range-edge.yaml

    await Excel.run(async (context) => {
      // Get the selected range.
      const range = context.workbook.getSelectedRange();

      // Specify the direction with the `KeyboardDirection` enum.
      const direction = Excel.KeyboardDirection.up;

      // Get the active cell in the workbook.
      const activeCell = context.workbook.getActiveCell();

      // Get the top-most cell of the current used range.
      // This method acts like the Ctrl+Arrow key keyboard shortcut while a range is selected.
      const rangeEdge = range.getRangeEdge(
        direction,
        activeCell // If the selected range contains more than one cell, the active cell must be defined.
      );
      rangeEdge.select();

      await context.sync();
    });
'Excel.Range#getRow:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address); // prints Sheet1!A2:F2
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#getSpecialCells:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const usedRange = sheet.getUsedRange();

        // Find the ranges with either text or logical (boolean) values.
        const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
        formulaRanges.format.fill.color = "orange";

        return context.sync();
    });
'Excel.Range#getSpillingToRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/dynamic-arrays.yaml

    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      // Set G4 to a formula that returns a dynamic array.
      const targetCell = sheet.getRange("G4");
      targetCell.formulas = [["=A4:D4"]];

      // Get the address of the cells that the dynamic array spilled into.
      const spillRange = targetCell.getSpillingToRange();
      spillRange.load("address");

      // Fit the columns for readability.
      sheet.getUsedRange().format.autofitColumns();
      await context.sync();

      console.log(`Copying the table headers spilled into ${spillRange.address}.`);
    });
'Excel.Range#getUsedRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // We want the most recent quarter that has data, so
        // exclude quarters without data and get the last of
        // the remaining columns.
        const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
        const currentQuarterRange = usedDataRange.getLastColumn();

        // Asian and European teams have separate contests.
        const asianSalesRange = sheet.getRange("A2:E4");
        const europeanSalesRange = sheet.getRange("A5:E7");

        // The data for each chart is the intersection of the
        // current quarter column and the rows for the continent.
        const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
        const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

        // Must sync before you can test the output of *OrNullObject
        // method/property.
        await context.sync();

        if (asianContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("Asian");
        } else {
            createContinentChart(
                sheet,
                "Asian",
                asianContestRange,
                "A9",
                "F24"
            );
        }

        if (europeanContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("European");
        } else {
            createContinentChart(
                sheet,
                "European",
                europeanContestRange,
                "A25",
                "F40"
            );
        }

        await context.sync();
    });
'Excel.Range#getUsedRangeOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/used-range.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();

        // Pass true so only cells with values count as used
        const usedDataRange = dataRange.getUsedRangeOrNullObject(
            true /* valuesOnly */
        );

        //Must sync before reading value returned from *OrNullObject method/property.
        await context.sync();

        if (usedDataRange.isNullObject) {
            console.log("Need Data to Make Chart");
            console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
        } else {
            const chart = sheet.charts.add(
                Excel.ChartType.columnClustered,
                dataRange,
                "Columns"
            );
            chart.setPosition("A15", "F30");
            chart.title.text = "Quarterly sales chart";
            chart.legend.position = "Right";
            chart.legend.format.fill.setSolidColor("white");
            chart.dataLabels.format.font.size = 15;
            chart.dataLabels.format.font.color = "black";
        }

        await context.sync();
    });
'Excel.Range#group:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // Group the larger, main level. Note that the outline controls
        // will be on row 10, meaning 4-9 will collapse and expand.
        sheet.getRange("4:9").group(Excel.GroupOption.byRows);

        // Group the smaller, sublevels. Note that the outline controls
        // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
        sheet.getRange("4:5").group(Excel.GroupOption.byRows);
        sheet.getRange("7:8").group(Excel.GroupOption.byRows);
        await context.sync();
    });
'Excel.Range#hyperlink:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.Range#insert:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F5:F10";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.insert();
        return ctx.sync(); 
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#load:member(2)':
  - |-
    // Below example uses range address to get the range object.
    Excel.run(function (ctx) {
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8"; 
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        range.load('cellCount');
        return ctx.sync().then(function() {
            console.log(range.cellCount);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#merge:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:C3";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.merge(true);
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/range-merged-ranges.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet and the table in that worksheet.
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const tableRange = sheet.getRange("B2:E6");

      // Create a merged range in the first row of the table.
      const chartTitle = tableRange.getRow(0);
      chartTitle.merge(true);

      // Format the merged range.
      chartTitle.format.horizontalAlignment = "Center";

      await context.sync();
    });
'Excel.Range#moveTo:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        // Place a label in front of the moved data.
        sheet.getRange("F12").values = [["Moved Range:"]];

        // Move the range from A1:E1 to G12:K12.
        sheet.getRange("A1:E1").moveTo("G12");
        await context.sync();
    });
'Excel.Range#numberFormat:member':
  - >-
    // The example below sets number-format, values and formulas on a grid that
    contains 2x3 grid.

    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F5:G7";
        var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
        var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
        var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.numberFormat = numberFormat;
        range.values = values;
        range.formulas= formulas;
        range.load('text');
        return ctx.sync().then(function() {
            console.log(range.text);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#removeDuplicates:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-remove-duplicates.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:D11");

        const deleteResult = range.removeDuplicates([0],true);    
        deleteResult.load();    
        await context.sync();

        console.log(deleteResult.removed + " entries with duplicate names removed.");
        console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
    });
'Excel.Range#select:member(1)':
  - |-
    Excel.run(function (ctx) {
        var sheetName = "Sheet1";
        var rangeAddress = "F5:F10"; 
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.select();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#set:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        const range = sheet.getRange("B2:E2");
        range.set({
            format: {
                fill: {
                    color: "#4472C4"
                },
                font: {
                    name: "Verdana",
                    color: "white"
                }
            }
        })
        range.format.autofitColumns();
        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        const sourceRange = sheet.getRange("B2:E2");
        sourceRange.load("format/fill/color, format/font/name, format/font/color");
        await context.sync();

        // Set properties based on the loaded and synced 
        // source range.
        const targetRange = sheet.getRange("B7:E7");
        targetRange.set(sourceRange); 
        targetRange.format.autofitColumns();
        await context.sync();
    });
'Excel.Range#setCellProperties:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.Range#sort:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml

    async function sortTopToBottom(criteria: string) {
        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const range = sheet.getRange("A1:E5");

            // Find the column header that provides the sort criteria.
            const header = range.find(criteria, {});
            header.load("columnIndex");
            await context.sync();

            range.sort.apply(
                [
                    {
                        key: header.columnIndex,
                        sortOn: Excel.SortOn.value
                    }
                ],
                false /*matchCase*/,
                true /*hasHeaders*/,
                Excel.SortOrientation.rows
            );
            await context.sync();
        });
    }
'Excel.Range#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");

        // Apply built-in style. 
        // Styles are in the Home tab ribbon.
        range.style = Excel.BuiltInStyle.neutral;
        range.format.horizontalAlignment = "Right";

        await context.sync();
    });
'Excel.Range#ungroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // This removes two levels of groups from the "A1-R10" range.
        // Any groups at the same level on the same dimension will be removed by a single call.
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
        await context.sync();
    });
'Excel.Range#unmerge:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:C3";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.unmerge();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Range#untrack:member(1)':
  - |-
    Excel.run(async (context) => {
        const largeRange = context.workbook.getSelectedRange();
        largeRange.load(["rowCount", "columnCount"]);
        await context.sync();

        for (let i = 0; i < largeRange.rowCount; i++) {
            for (let j = 0; j < largeRange.columnCount; j++) {
                let cell = largeRange.getCell(i, j);
                cell.values = [[i *j]];

                // call untrack() to release the range from memory
                cell.untrack();
            }
        }

        await context.sync();
    });
'Excel.RangeAreas#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const usedRange = sheet.getUsedRange();

        // Find the ranges with formulas.
        const formulaRanges = usedRange.getSpecialCells("Formulas");
        formulaRanges.format.fill.color = "lightgreen";

        await context.sync();
    });
'Excel.RangeBorder#style:member':
  - |-
    // The example below adds grid border around the range.
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.format.borders.getItem('InsideHorizontal').style = 'Continuous';
        range.format.borders.getItem('InsideVertical').style = 'Continuous';
        range.format.borders.getItem('EdgeBottom').style = 'Continuous';
        range.format.borders.getItem('EdgeLeft').style = 'Continuous';
        range.format.borders.getItem('EdgeRight').style = 'Continuous';
        range.format.borders.getItem('EdgeTop').style = 'Continuous';
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.RangeBorderCollection#getItem:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        var borderName = 'EdgeTop';
        var border = range.format.borders.getItem(borderName);
        border.load('style');
        return ctx.sync().then(function() {
                console.log(border.style);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.RangeBorderCollection#getItemAt:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        var border = range.format.borders.getItemAt(0);
        border.load('sideIndex');
        return ctx.sync().then(function() {
            console.log(border.sideIndex);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.RangeBorderCollection#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        var borders = range.format.borders;
        border.load('items');
        return ctx.sync().then(function() {
            console.log(borders.count);
            for (var i = 0; i < borders.items.length; i++) {
                console.log(borders.items[i].sideIndex);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.RangeFill#clear:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F:G";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        var rangeFill = range.format.fill;
        rangeFill.clear();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.RangeFill#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F:G";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        var rangeFill = range.format.fill;
        rangeFill.load('color');
        return ctx.sync().then(function() {
            console.log(rangeFill.color);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // The example below sets fill color. 
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F:G";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.format.fill.color = '0000FF';
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.RangeFont#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F:G";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        var rangeFont = range.format.font;
        rangeFont.load('name');
        return ctx.sync().then(function() {
            console.log(rangeFont.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // The example below sets font name. 
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F:G";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.format.font.name = 'Times New Roman';
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.RangeFormat#load:member(2)':
  - |-
    // Below example selects all of the Range's format properties. 
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F:G";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        range.load(["format/*", "format/fill", "format/borders", "format/font"]);
        return ctx.sync().then(function() {
            console.log(range.format.wrapText);
            console.log(range.format.fill.color);
            console.log(range.format.font.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // The example below sets font name, fill color and wraps text. 
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F:G";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.format.wrapText = true;
        range.format.font.name = 'Times New Roman';
        range.format.fill.color = '0000FF';
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // The example below adds grid border around the range.
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "F:G";
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.format.borders.getItem('InsideHorizontal').style = 'Continuous';
        range.format.borders.getItem('InsideVertical').style = 'Continuous';
        range.format.borders.getItem('EdgeBottom').style = 'Continuous';
        range.format.borders.getItem('EdgeLeft').style = 'Continuous';
        range.format.borders.getItem('EdgeRight').style = 'Continuous';
        range.format.borders.getItem('EdgeTop').style = 'Continuous';
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.RangeFormat#textOrientation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-text-orientation.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:E2");

        // Set textOrientation to either an integer between -90 and 90
        // or to 180 for vertically-oriented text.
        range.format.textOrientation = 90;

        await context.sync();
    });
'Excel.RangeHyperlink#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#documentReference:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A9:A11");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a location within the workbook
        // for each product name in the second table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Navigate to the '" + cellText + "' worksheet",
                documentReference: cellText + "!A1"
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#screenTip:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RangeHyperlink#textToDisplay:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    });
'Excel.RemoveDuplicatesResult#uniqueRemaining:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-remove-duplicates.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B2:D11");

        const deleteResult = range.removeDuplicates([0],true);    
        deleteResult.load();    
        await context.sync();

        console.log(deleteResult.removed + " entries with duplicate names removed.");
        console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
    });
'Excel.Runtime#enableEvents:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-disable-events.yaml

    await Excel.run(async (context) => {
        context.runtime.load("enableEvents");
        await context.sync();

        // check if events are enabled and toggle accordingly
        const eventBoolean = !context.runtime.enableEvents
        context.runtime.enableEvents = eventBoolean;
        if (eventBoolean) {
            console.log("Events are currently on.");
        } else {
            console.log("Events are currently off.");
        }

        await context.sync();
    });
'Excel.SettableCellProperties#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        const topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        const headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        const nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        const matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        const range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    });
'Excel.Setting#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/create-get-change-delete-settings.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        let needsReview = settings.getItem("NeedsReview");
        needsReview.delete();
        needsReview = settings.getItemOrNullObject("NeedsReview");

        await context.sync();

        if (needsReview.isNullObject) {
            console.log("The setting has been deleted");
        } else {
            console.log("The setting was not deleted");
        }

        await context.sync();
    });
'Excel.SettingCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings; 
        settings.onSettingsChanged.add(onChangedSetting);

        await context.sync();
        console.log("Settings changed handler registered.");
    });
'Excel.SettingCollection#getItemOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/create-get-change-delete-settings.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings;
        let needsReview = settings.getItem("NeedsReview");
        needsReview.delete();
        needsReview = settings.getItemOrNullObject("NeedsReview");

        await context.sync();

        if (needsReview.isNullObject) {
            console.log("The setting has been deleted");
        } else {
            console.log("The setting was not deleted");
        }

        await context.sync();
    });
'Excel.SettingCollection#onSettingsChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        const settings = context.workbook.settings; 
        settings.onSettingsChanged.add(onChangedSetting);

        await context.sync();
        console.log("Settings changed handler registered.");
    });
'Excel.Shape#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        context.workbook.worksheets.getItemOrNullObject("Shapes").delete();
        const sheet = context.workbook.worksheets.add("Shapes");

        const shapes = sheet.shapes;

        // load all the shapes in the collection without loading their properties
        shapes.load("items/$none");
        await context.sync();

        shapes.items.forEach((shape) => shape.delete());
        await context.sync();
    });
'Excel.Shape#fill:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.smileyFace);
        shape.left = 300;
        shape.top = 100;
        shape.height = 100;
        shape.width = 100;
        shape.fill.foregroundColor = "yellow"
        await context.sync();
    });
'Excel.Shape#getAsImage:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Image");
        const result = shape.getAsImage(Excel.PictureFormat.png);
        await context.sync();

        const imageString = result.value;
        // Your add-in would save this string as a .png file.
        console.log("The image's base64-encoded string: " + imageString);
    });
'Excel.Shape#group:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");

        const shapeGroup = sheet.shapes.getItem("Group").group;
        shapeGroup.ungroup();
        console.log("Shapes ungrouped");

        await context.sync();
    });
'Excel.Shape#incrementLeft:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Square")
        shape.incrementLeft(-25);
        await context.sync();
    });
'Excel.Shape#incrementRotation:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Image");
        shape.incrementRotation(180);
        await context.sync();
    });
'Excel.Shape#incrementTop:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Pentagon")
        shape.incrementTop(25);
        await context.sync();
    });
'Excel.Shape#line:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.getItem("StraightLine").line;
        line.beginArrowheadLength = Excel.ArrowheadLength.long;
        line.beginArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.beginArrowheadStyle = Excel.ArrowheadStyle.oval;

        line.endArrowheadLength = Excel.ArrowheadLength.long;
        line.endArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.endArrowheadStyle = Excel.ArrowheadStyle.triangle;

        await context.sync();
    });
'Excel.Shape#lockAspectRatio:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    });
'Excel.Shape#rotation:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.triangle);
        shape.left = 100;
        shape.top = 300;
        shape.height = 150;
        shape.width = 200;
        shape.rotation = 45;
        shape.fill.clear();
        await context.sync();
    });
'Excel.Shape#scaleHeight:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    });
'Excel.Shape#setZOrder:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-move-and-order.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.getItem("Octagon")
        shape.setZOrder(Excel.ShapeZOrder.sendBackward);
        await context.sync();
    });
'Excel.ShapeCollection#addGeometricShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-create-and-delete.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);
        shape.left = 5;
        shape.top = 5;
        shape.height = 175;
        shape.width = 200;
        await context.sync();
    });
'Excel.ShapeCollection#addGroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");
        const square = sheet.shapes.getItem("Square");
        const pentagon = sheet.shapes.getItem("Pentagon");
        const octagon = sheet.shapes.getItem("Octagon");

        const shapeGroup = sheet.shapes.addGroup([square, pentagon, octagon]);
        shapeGroup.name = "Group";
        console.log("Shapes grouped");

        await context.sync();
    });
'Excel.ShapeCollection#addImage:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-images.yaml

    const myFile = <HTMLInputElement>document.getElementById("selectedFile");

    const reader = new FileReader();


    reader.onload = (event) => {
        Excel.run((context) => {
            const startIndex = reader.result.toString().indexOf("base64,");
            const mybase64 = reader.result.toString().substr(startIndex + 7);
            const sheet = context.workbook.worksheets.getItem("Shapes");
            const image = sheet.shapes.addImage(mybase64);
            image.name = "Image";
            return context.sync();
        });
    };


    // Read in the image file as a data URL.

    reader.readAsDataURL(myFile.files[0]);
'Excel.ShapeCollection#addLine:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-lines.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);
        line.name = "StraightLine";
        await context.sync();
    });
'Excel.ShapeCollection#addTextBox:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-textboxes.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const textbox = shapes.addTextBox("A box with text");
        textbox.left = 100;
        textbox.top = 100;
        textbox.height = 20;
        textbox.width = 175;
        textbox.name = "Textbox";
        await context.sync();
    });
'Excel.ShapeGroup#ungroup:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-groups.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Shapes");

        const shapeGroup = sheet.shapes.getItem("Group").group;
        shapeGroup.ungroup();
        console.log("Shapes ungrouped");

        await context.sync();
    });
'Excel.ShowAsRule#baseItem:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-calculations.yaml

    await Excel.run(async (context) => {
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");
        const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // show the difference between crate sales of the "A Farms" and the other farms
        // this difference is both aggregated and shown for individual fruit types (where applicable)
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
        farmShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
        wholesaleShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    });
'Excel.Slicer#clearFilters:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.clearFilters();
        await context.sync();
    });
'Excel.Slicer#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.slicers.getItemAt(0).delete();
        await context.sync();
    });
'Excel.Slicer#selectItems:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.selectItems(["Lemon", "Lime", "Orange"]);
        await context.sync();
    });
'Excel.Slicer#style:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.style = "SlicerStyleLight6";
        await context.sync();
    });
'Excel.SlicerCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Pivot");
        const slicer = sheet.slicers.add(
            "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
            "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
        );
        slicer.name = "Fruit Slicer";
        await context.sync();
    });
'Excel.SlicerCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.caption = "Fruit Types";
        slicer.left = 395;
        slicer.top = 15;
        slicer.height = 135;
        slicer.width = 150;
        await context.sync();
    });
'Excel.Style#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");

        // Delete the diagonal orientation style from the style collection.
        // Styles are in the Home tab ribbon.
        style.delete();

        await context.sync();

        console.log("Successfully deleted the diagonal orientation style from the Home tab ribbon.");
    });
'Excel.Style#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Normal");
        style.font.load("bold, color, italic, name, size");
        style.fill.load("color");

        await context.sync();

        console.log("Bold: " + style.font.bold);
        console.log("Font color: " + style.font.color);
        console.log("Italic: " + style.font.italic);
        console.log("Name: " + style.font.name);
        console.log("Size: " + style.font.size);
        console.log("Fill color: " + style.fill.color);
    });
'Excel.Style#horizontalAlignment:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");

        // Apply built-in style. 
        // Styles are in the Home tab ribbon.
        range.style = Excel.BuiltInStyle.neutral;
        range.format.horizontalAlignment = "Right";

        await context.sync();
    });
'Excel.Style#load:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");            
        style.load("textOrientation, horizontalAlignment, autoIndent, readingOrder, wrapText, includeProtection, shrinkToFit, locked");

        await context.sync();

        console.log("Orientation: " + style.textOrientation);
        console.log("Horizontal alignment: " + style.horizontalAlignment);
        console.log("Add indent: " + style.autoIndent);
        console.log("Reading order: " + style.readingOrder);
        console.log("Wrap text: " + style.wrapText);
        console.log("Include protection: " + style.includeProtection);
        console.log("Shrink to fit: " + style.shrinkToFit);
        console.log("Style locked: " + style.locked);
    });
'Excel.StyleCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.StyleCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.Table#convertToRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        table.convertToRange();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Table#delete:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        table.delete();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Table#getDataBodyRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        var tableDataRange = table.getDataBodyRange();
        tableDataRange.load('address')
        return ctx.sync().then(function() {
                console.log(tableDataRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Table#getHeaderRowRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        var tableHeaderRange = table.getHeaderRowRange();
        tableHeaderRange.load('address');
        return ctx.sync().then(function() {
            console.log(tableHeaderRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Table#getRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        var tableRange = table.getRange();
        tableRange.load('address');    
        return ctx.sync().then(function() {
                console.log(tableRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Table#getTotalRowRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        var tableTotalsRange = table.getTotalRowRange();
        tableTotalsRange.load('address');    
        return ctx.sync().then(function() {
                console.log(tableTotalsRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Table#load:member(2)':
  - |-
    // Get a table by name. 
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        table.load('index')
        return ctx.sync().then(function() {
                console.log(table.index);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // Get a table by index.
    Excel.run(function (ctx) { 
        var index = 0;
        var table = ctx.workbook.tables.getItemAt(0);
        table.load('id')
        return ctx.sync().then(function() {
                console.log(table.id);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Table#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml

    await Excel.run(async (context) => {
        let table = context.workbook.tables.getItemAt(0);
        table.onChanged.add(onChange);

        await context.sync();
        console.log("A handler has been registered for the onChanged event");
    });
'Excel.Table#onSelectionChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml

    await Excel.run(async (context) => {
        let table = context.workbook.tables.getItemAt(0);
        table.onSelectionChanged.add(onSelectionChange);

        await context.sync();
        console.log("A handler has been registered for table onSelectionChanged event");
    });
'Excel.Table#resize:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/resize-table.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet and a table on that worksheet.
      const sheet = context.workbook.worksheets.getItem("Sample");
      const expensesTable = sheet.tables.getItem("ExpensesTable");
      
      // Resize the table.
      expensesTable.resize("A1:D20");
      
      await context.sync();
    });
'Excel.Table#style:member':
  - |-
    // Set table style. 
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        table.name = 'Table1-Renamed';
        table.showTotals = false;
        table.style = 'TableStyleMedium2';
        table.load('tableStyle');
        return ctx.sync().then(function() {
                console.log(table.style);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableChangedEventArgs#details:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/data-change-event-details.yaml

    async function onTableChanged(eventArgs: Excel.TableChangedEventArgs) {
        await Excel.run(async (context) => {
            const details = eventArgs.details;
            const address = eventArgs.address;

            console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`
              + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
        });
    }
'Excel.TableChangedEventArgs#tableId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-tablecollection-changed.yaml

    async function onChange(event) {
        await Excel.run(async (context) => {
            let table = context.workbook.tables.getItem(event.tableId);
            let worksheet = context.workbook.worksheets.getItem(event.worksheetId);
            worksheet.load("name");

            await context.sync();

            console.log("Handler for table collection onChanged event has been triggered. Data changed address: " + event.address);
            console.log("Table Id : " + event.tableId);
            console.log("Worksheet Id : " + worksheet.name);
        });
    }
'Excel.TableChangedEventArgs#worksheetId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-tablecollection-changed.yaml

    async function onChange(event) {
        await Excel.run(async (context) => {
            let table = context.workbook.tables.getItem(event.tableId);
            let worksheet = context.workbook.worksheets.getItem(event.worksheetId);
            worksheet.load("name");

            await context.sync();

            console.log("Handler for table collection onChanged event has been triggered. Data changed address: " + event.address);
            console.log("Table Id : " + event.tableId);
            console.log("Worksheet Id : " + worksheet.name);
        });
    }
'Excel.TableCollection#add:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var table = ctx.workbook.tables.add('Sheet1!A1:E7', true);
        table.load('name');
        return ctx.sync().then(function() {
            console.log(table.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableCollection#getItem:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        table.load('name');
        return ctx.sync().then(function() {
                console.log(table.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableCollection#getItemAt:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var table = ctx.workbook.tables.getItemAt(0);
        table.load('name');
        return ctx.sync().then(function() {
                console.log(table.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableCollection#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var tables = ctx.workbook.tables;
        tables.load();
        return ctx.sync().then(function() {
            console.log("tables Count: " + tables.count);
            for (var i = 0; i < tables.items.length; i++)
            {
                console.log(tables.items[i].name);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // Get the number of tables
    Excel.run(function (ctx) { 
        var tables = ctx.workbook.tables;
        tables.load('count');
        return ctx.sync().then(function() {
            console.log(tables.count);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableCollection#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-tablecollection-changed.yaml

    await Excel.run(async (context) => {
        let tables = context.workbook.tables;
        tables.onChanged.add(onChange);

        await context.sync();
        console.log("A handler has been registered for the table collection onChanged event");
    });
'Excel.TableColumn#delete:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var column = ctx.workbook.tables.getItem(tableName).columns.getItemAt(2);
        column.delete();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumn#getDataBodyRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var column = ctx.workbook.tables.getItem(tableName).columns.getItemAt(0);
        var dataBodyRange = column.getDataBodyRange();
        dataBodyRange.load('address');
        return ctx.sync().then(function() {
            console.log(dataBodyRange.address);
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumn#getHeaderRowRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var columns = ctx.workbook.tables.getItem(tableName).columns.getItemAt(0);
        var headerRowRange = columns.getHeaderRowRange();
        headerRowRange.load('address');
        return ctx.sync().then(function() {
            console.log(headerRowRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumn#getRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var columns = ctx.workbook.tables.getItem(tableName).columns.getItemAt(0);
        var columnRange = columns.getRange();
        columnRange.load('address');
        return ctx.sync().then(function() {
            console.log(columnRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumn#getTotalRowRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var columns = ctx.workbook.tables.getItem(tableName).columns.getItemAt(0);
        var totalRowRange = columns.getTotalRowRange();
        totalRowRange.load('address');
        return ctx.sync().then(function() {
            console.log(totalRowRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumn#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var column = ctx.workbook.tables.getItem(tableName).columns.getItem(0);
        column.load('index');
        return ctx.sync().then(function() {
            console.log(column.index);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumnCollection#add:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tables = ctx.workbook.tables;
        var values = [["Sample"], ["Values"], ["For"], ["New"], ["Column"]];
        var column = tables.getItem("Table1").columns.add(null, values);
        column.load('name');
        return ctx.sync().then(function() {
            console.log(column.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumnCollection#getItem:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableColumn = ctx.workbook.tables.getItem('Table1').columns.getItem(0);
        tableColumn.load('name');
        return ctx.sync().then(function() {
                console.log(tableColumn.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumnCollection#getItemAt:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableColumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);
        tableColumn.load('name');
        return ctx.sync().then(function() {
                console.log(tableColumn.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableColumnCollection#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var tableColumns = ctx.workbook.tables.getItem('Table1').columns;
        tableColumns.load('items');
        return ctx.sync().then(function() {
            console.log("tableColumns Count: " + tableColumns.count);
            for (var i = 0; i < tableColumns.items.length; i++) {
                console.log(tableColumns.items[i].name);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableRow#delete:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);
        row.delete();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableRow#getRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(0);
        var rowRange = row.getRange();
        rowRange.load('address');
        return ctx.sync().then(function() {
            console.log(rowRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableRow#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var row = ctx.workbook.tables.getItem(tableName).rows.getItem(0);
        row.load('index');
        return ctx.sync().then(function() {
            console.log(row.index);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableRowCollection#add:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tables = ctx.workbook.tables;
        var values = [["Sample", "Values", "For", "New", "Row"]];
        var row = tables.getItem("Table1").rows.add(null, values);
        row.load('index');
        return ctx.sync().then(function() {
            console.log(row.index);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableRowCollection#getItemAt:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tablerow = ctx.workbook.tables.getItem('Table1').rows.getItemAt(0);
        tablerow.load('name');
        return ctx.sync().then(function() {
                console.log(tablerow.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TableRowCollection#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var tablerows = ctx.workbook.tables.getItem('Table1').rows;
        tablerows.load('items');
        return ctx.sync().then(function() {
            console.log("tablerows Count: " + tablerows.count);
            for (var i = 0; i < tablerows.items.length; i++) {
                console.log(tablerows.items[i].index);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // In the example, we'll select the top 100 rows of the table.
    Excel.run(function (ctx) { 
        var table = ctx.workbook.tables.getItem("Table1");
        var tableRows = table.rows.load({"select" : "index, values","top": 100, "skip": 0 })
        return ctx.sync().then(function() {
            for (var i = 0; i < tableRows.items.length; i++) {
                console.log(tableRows.items[i].index);
                console.log(tableRows.items[i].values);
            }
        });
    }).catch(function(error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
    });
'Excel.TableSelectionChangedEventArgs#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml

    async function onSelectionChange(args) {
        await Excel.run(async (context) => {
            console.log("Handler for table onSelectionChanged event has been triggered. The new selection is: " + args.address);
        });
    }
'Excel.TableSort#apply:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var tableName = 'Table1';
        var table = ctx.workbook.tables.getItem(tableName);
        table.sort.apply([ 
                {
                    key: 2,
                    ascending: true
                },
            ], true);
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.TextConditionalFormat#format:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.TextConditionalFormat#rule:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const range = sheet.getRange("B16:D18");
        const conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    });
'Excel.TextFrame#deleteText:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/44-shape/shape-textboxes.yaml

    await Excel.run(async (context) => {
        const shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        const textbox = shapes.getItem("Textbox");
        textbox.textFrame.deleteText();
        await context.sync();
    });
'Excel.Workbook#close:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-save-and-close.yaml

    await Excel.run(async (context) => {
        context.workbook.close(Excel.CloseBehavior.save);
    });
'Excel.Workbook#getActiveCell:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-get-active-cell.yaml

    await Excel.run(async (context) => {

        let myWorkbook = context.workbook;
        let activeCell = myWorkbook.getActiveCell();
        activeCell.load("address");

        await context.sync();
        
        console.log("The active cell is " + activeCell.address);
    });
'Excel.Workbook#getSelectedRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var selectedRange = ctx.workbook.getSelectedRange();
        selectedRange.load('address');
        return ctx.sync().then(function() {
                console.log(selectedRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Workbook#getSelectedRanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const selectedRanges = context.workbook.getSelectedRanges();
        selectedRanges.format.fill.color = "lightblue";

        await context.sync();
    })
'Excel.Workbook#insertWorksheetsFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/workbook-insert-external-worksheets.yaml

    // Retrieve the file and set up an HTML FileReader element. 

    const myFile = <HTMLInputElement>document.getElementById("file");

    const reader = new FileReader();


    reader.onload = (event) => {
        // Remove the metadata before the base64-encoded string.
        const startIndex = reader.result.toString().indexOf("base64,");
        externalWorkbook = reader.result.toString().substr(startIndex + 7);
    };


    // Read the file as a data URL so that we can parse the base64-encoded
    string.

    reader.readAsDataURL(myFile.files[0]);
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/workbook-insert-external-worksheets.yaml

    await Excel.run(async (context) => {
        // Retrieve the source workbook.
        const workbook = context.workbook;
        
        // Set up the insert options.
        var options = {
            sheetNamesToInsert: [], // Insert all the worksheets from the source workbook.
            positionType: Excel.WorksheetPositionType.after, // Insert after the `relativeTo` sheet.
            relativeTo: "Sheet1" // The sheet relative to which the other worksheets will be inserted. Used with `positionType`.
        };
        
        // Insert the new worksheets.
        workbook.insertWorksheetsFromBase64(externalWorkbook, options);
        await context.sync();
    });
'Excel.Workbook#onActivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/events-workbook-activated.yaml

    async function workbookActivated(event: Excel.WorkbookActivatedEventArgs) {
      await Excel.run(async (context) => {
        // Callback function for when the workbook is activated.
        console.log("The workbook was activated.");
      });
    }
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/events-workbook-activated.yaml

    await Excel.run(async (context) => {
      const workbook = context.workbook;

      // Register the workbook activated event handler.
      workbook.onActivated.add(workbookActivated);

      await context.sync();
      console.log("Added event handler for workbook activated.");
    });
'Excel.Workbook#pivotTables:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      // Get the names of all the PivotTables in the workbook.
      const pivotTables = context.workbook.pivotTables;
      pivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the workbook:")
      pivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Workbook#properties:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/properties.yaml

    await Excel.run(async (context) => {
        let titleValue = "Excel document properties API";
        let subjectValue = "Set and get document properties";
        let keywordsValue = "Set and get operations";
        let commentsValue = "This is an Excel document properties API code sample";
        let categoryValue = "Office Add-ins";
        let managerValue = "John";
        let companyValue = "Microsoft";

        let docProperties = context.workbook.properties;

        // Set the writeable document properties.
        docProperties.title = titleValue;
        docProperties.subject = subjectValue;
        docProperties.keywords = keywordsValue;
        docProperties.comments = commentsValue;
        docProperties.category = categoryValue;
        docProperties.manager = managerValue;
        docProperties.company = companyValue;

        await context.sync();

        console.log("Set the following document properties: title, subject, keywords, comments, category, manager, company.");
    });
'Excel.Workbook#save:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/workbook-save-and-close.yaml

    await Excel.run(async (context) => {
        context.workbook.save(Excel.SaveBehavior.save);
    });
'Excel.Workbook#styles:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml

    await Excel.run(async (context) => {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    });
'Excel.WorkbookProtection#protect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.load("protection/protected");

        await context.sync();

        if (!workbook.protection.protected) {
            workbook.protection.protect();
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.load("protection/protected");

        await context.sync();

        if (!workbook.protection.protected) {
            workbook.protection.protect(password);
        }
    });
'Excel.WorkbookProtection#unprotect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.protection.unprotect();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let workbook = context.workbook;
        workbook.protection.unprotect(password);
    });
'Excel.WorkbookRangeAreas#areas:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/direct-precedents.yaml

    await Excel.run(async (context) => {
      // Precedents are cells referenced by the formula in a cell.
      let range = context.workbook.getActiveCell();
      let directPrecedents = range.getDirectPrecedents();
      range.load("address");
      directPrecedents.areas.load("address");
      await context.sync();

      console.log(`Direct precedent cells of ${range.address}:`);

      // Use the direct precedents API to loop through precedents of the active cell. 
      for (var i = 0; i < directPrecedents.areas.items.length; i++) {
        // Highlight and console the address of each precedent cell.
        directPrecedents.areas.items[i].format.fill.color = "Yellow";
        console.log(`  ${directPrecedents.areas.items[i].address}`);
      }
      await context.sync();
    });
'Excel.Worksheet#activate:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var wSheetName = 'Sheet1';
        var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
        worksheet.activate();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Worksheet#autoFilter:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const farmData = sheet.getUsedRange();

        // This filter will only show the rows with the top 25% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
        await context.sync();
    });
'Excel.Worksheet#copy:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-copy.yaml

    await Excel.run(async (context) => {

        let myWorkbook = context.workbook;
        let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
        let copiedSheet = sampleSheet.copy("End")

        sampleSheet.load("name");
        copiedSheet.load("name");

        await context.sync();

        console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
    });
'Excel.Worksheet#customProperties:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Load the keys and values of all custom properties in the current worksheet.
      const customWorksheetProperties = context.workbook.worksheets.getActiveWorksheet().customProperties;
      customWorksheetProperties.load(["key", "value"]);
      await context.sync();

      // Log each custom property to the console.
      // Note that your document may have more properties than those you have set using this snippet.
      customWorksheetProperties.items.forEach((property) => {
        console.log(`${property.key}:${property.value}`);
      });
    });
'Excel.Worksheet#delete:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var wSheetName = 'Sheet1';
        var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
        worksheet.delete();
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Worksheet#findAllOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-find-all.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const foundRanges = sheet.findAllOrNullObject("Complete", {
            completeMatch: true,
            matchCase: false
        });

        await context.sync();

        if (foundRanges.isNullObject) {
            console.log("No complete projects");
        } else {
            foundRanges.format.fill.color = "green"
        }
    });
'Excel.Worksheet#getCell:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var cell = worksheet.getCell(0,0);
        cell.load('address');
        return ctx.sync().then(function() {
            console.log(cell.address);
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Worksheet#getNext:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.Worksheet#getPrevious:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;
        const currentSheet = sheets.getActiveWorksheet();
        const previousYearSheet = currentSheet.getPrevious();
        const currentTaxDueRange = currentSheet.getRange("C2");
        const previousTaxDueRange = previousYearSheet.getRange("C2");

        currentSheet.load("name");
        previousYearSheet.load("name");
        currentTaxDueRange.load("text");
        previousTaxDueRange.load("text");

        await context.sync();

        let currentYear = currentSheet.name.substr(5, 4);
        let previousYear = previousYearSheet.name.substr(5, 4);
        console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

        await context.sync();
    });
'Excel.Worksheet#getRange:member(1)':
  - |-
    // Below example uses range address to get the range object.
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeAddress = "A1:F8";
        var worksheet = ctx.workbook.worksheets.getItem(sheetName);
        var range = worksheet.getRange(rangeAddress);
        range.load('cellCount');
        return ctx.sync().then(function() {
            console.log(range.cellCount);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // Below example uses a named-range to get the range object.
    Excel.run(function (ctx) { 
        var sheetName = "Sheet1";
        var rangeName = 'MyRange';
        var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
        range.load('address');
        return ctx.sync().then(function() {
            console.log(range.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Worksheet#getRanges:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml

    await Excel.run(async (context) => {

        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
        specifiedRanges.format.fill.color = "pink";

        await context.sync();
    })
'Excel.Worksheet#getUsedRange:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var wSheetName = 'Sheet1';
        var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
        var usedRange = worksheet.getUsedRange();
        usedRange.load('address');
        return ctx.sync().then(function() {
                console.log(usedRange.address);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Worksheet#load:member(2)':
  - |-
    // Get worksheet properties based on sheet name.
    Excel.run(function (ctx) { 
        var wSheetName = 'Sheet1';
        var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
        worksheet.load('position')
        return ctx.sync().then(function() {
                console.log(worksheet.position);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Worksheet#onActivated:member':
  - |-
    Excel.run(function (context) {
        var sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onActivated.add(function (event) {
            return Excel.run(function (context) {
                console.log("The activated worksheet ID is: " + event.worksheetId);
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.Worksheet#onCalculated:member':
  - |-
    Excel.run(function (context) {
        var sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onCalculated.add(function (event) {
            return Excel.run(function (context) {
                console.log("The worksheet has recalculated.");
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.Worksheet#onChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onChanged.add(onChange);
        await context.sync();

        console.log("Added a worksheet-level data-changed event handler.");
    });
'Excel.Worksheet#onColumnSorted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml

    await Excel.run(async (context) => {
        console.log("Adding column handler");
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This will fire whenever a column has been moved as the result of a sort action.
        sheet.onColumnSorted.add((event) => {
            return Excel.run((context) => {
                console.log("Column sorted: " + event.address);
                const sheet = context.workbook.worksheets.getActiveWorksheet();

                // Clear formatting for section, then highlight the sorted area.
                sheet.getRange("A1:E5").format.fill.clear();
                if (event.address !== "") {
                    sheet.getRanges(event.address).format.fill.color = "yellow";
                }

                return context.sync();
            });
        });
    });
'Excel.Worksheet#onDeactivated:member':
  - |-
    Excel.run(function (context) {
        var sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onDeactivated.add(function (event) {
            return Excel.run(function (context) {
                console.log("The deactivated worksheet is: " + event.worksheetId);
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.Worksheet#onFormulaChanged:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/events-formula-changed.yaml

    await Excel.run(async (context) => {
      // Retrieve the worksheet named "Sample".
      let sheet = context.workbook.worksheets.getItem("Sample");
      
      // Register the formula changed event handler for this worksheet.
      sheet.onFormulaChanged.add(formulaChangeHandler);
      await context.sync();
      
      console.log("Registered a formula changed event handler for this worksheet.");
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/events-formula-changed.yaml

    async function formulaChangeHandler(event:
    Excel.WorksheetFormulaChangedEventArgs) {
      await Excel.run(async (context) => {
        // Retrieve details about the formula change event.
        const cellAddress = event.formulaDetails[0].cellAddress;
        const previousFormula = event.formulaDetails[0].previousFormula;
        const source = event.source;
        
        // Print out the change event details.
        console.log(
          `The formula in cell ${cellAddress} changed. 
          The previous formula was: ${previousFormula}. 
          The source of the change was: ${source}.`
        );
      });
    }
'Excel.Worksheet#onRowHiddenChanged:member':
  - |-
    Excel.run(function (context) {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.onRowHiddenChanged.add(function (event) {
            return Excel.run(function (context) {
                console.log(`Row ${event.address} is now ${event.changeType}`);
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.Worksheet#onRowSorted:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml

    await Excel.run(async (context) => {
        console.log("Adding row handler");
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This will fire whenever a row has been moved as the result of a sort action.
        sheet.onRowSorted.add((event) => {
            return Excel.run((context) => {
                console.log("Row sorted: " + event.address);
                const sheet = context.workbook.worksheets.getActiveWorksheet();

                // Clear formatting for section, then highlight the sorted area.
                sheet.getRange("A1:E5").format.fill.clear();
                if (event.address !== "") {
                    sheet.getRanges(event.address).format.fill.color = "yellow";
                }

                return context.sync();
            });
        });
    });
'Excel.Worksheet#onSelectionChanged:member':
  - |-
    Excel.run(function (context) {
        var sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onSelectionChanged.add(function (event) {
            return Excel.run(function (context) {
                console.log("The selected range has changed to: " + event.address);
                return context.sync();
            });
        });
        return context.sync();
    });
'Excel.Worksheet#onSingleClicked:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-worksheet-single-click.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.onSingleClicked.add((event) => {
            return Excel.run((context) => {
                console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                return context.sync();
            });
        });

        console.log("The worksheet click handler is registered.");

        await context.sync();
    });
'Excel.Worksheet#pivotTables:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

    await Excel.run(async (context) => {
      // Get the names of all the PivotTables in the current worksheet.
      const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;
      pivotTables.load("name");
      await context.sync();

      // Display the names in the console.
      console.log("PivotTables in the current worksheet:")
      pivotTables.items.forEach((pivotTable) => {
        console.log(`\t${pivotTable.name}`);
      });
    });
'Excel.Worksheet#position:member':
  - |-
    // Set worksheet position. 
    Excel.run(function (ctx) { 
        var wSheetName = 'Sheet1';
        var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
        worksheet.position = 2;
        return ctx.sync(); 
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.Worksheet#protection:member':
  - |-
    Excel.run(function(ctx) {
      // get a reference to Sheet1
      var sheet = ctx.workbook.worksheets.getItem("Sheet1");

      // Protect inserting or deleting rows in Sheet1
      sheet.protection.protect({
        allowInsertRows: false,
        allowDeleteRows: false
      });

      return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    // Unprotecting a worksheet with unprotect() will remove all 
    // WorksheetProtectionOptions options applied to a worksheet.
    // To remove only a subset of WorksheetProtectionOptions use the 
    // protect() method and set the options you wish to remove to true.
    Excel.run(function(ctx) {
      var sheet = ctx.workbook.worksheets.getItem("Sheet1");
      sheet.protection.protect({
        allowInsertRows: false, // Protect row insertion
        allowDeleteRows: true // Unprotect row deletion
      });
    });
'Excel.Worksheet#showGridlines:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/gridlines.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.showGridlines = true;

        await context.sync();
    });
'Excel.Worksheet#showOutlineLevels:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This collapses the entire outline.
        sheet.showOutlineLevels(1, 1);
        await context.sync();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml

    Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // This shows the top 3 outline levels; collapsing any additional sublevels.
        sheet.showOutlineLevels(3, 3);
        await context.sync();
    });
'Excel.Worksheet#slicers:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Pivot");
        const slicer = sheet.slicers.add(
            "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
            "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
        );
        slicer.name = "Fruit Slicer";
        await context.sync();
    });
'Excel.Worksheet#tabColor:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/tab-color.yaml

    await Excel.run(async (context) => {
        const activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.tabColor = "#FF0000";

        await context.sync();
    });
'Excel.WorksheetAddedEventArgs#worksheetId:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    async function onWorksheetAdd(event) {
        await Excel.run(async (context) => {
            console.log(
                "Handler for worksheet onAdded event has been triggered. Newly added worksheet Id : " +
                event.worksheetId
            );
        });
    }
'Excel.WorksheetChangedEventArgs#details:member':
  - >-
    // This function would be used as an event handler for the
    Worksheet.onChanged event.

    function onWorksheetChanged(eventArgs) {
        Excel.run(function (context) {
            var details = eventArgs.details;
            var address = eventArgs.address;

            // Print the before and after types and values to the console.
            console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`
                + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
            return context.sync();
        });
    }
'Excel.WorksheetCollection#add:member(1)':
  - |-
    Excel.run(function (ctx) { 
        var wSheetName = 'Sample Name';
        var worksheet = ctx.workbook.worksheets.add(wSheetName);
        worksheet.load('name');
        return ctx.sync().then(function() {
            console.log(worksheet.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.WorksheetCollection#getActiveWorksheet:member(1)':
  - |-
    Excel.run(function (ctx) {  
        var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
        activeWorksheet.load('name');
        return ctx.sync().then(function() {
                console.log(activeWorksheet.name);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.WorksheetCollection#getFirst:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.WorksheetCollection#getLast:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

    await Excel.run(async (context) => {
        const sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        const firstSheet = sheets.getFirst().getNext();
        const lastSheet = sheets.getLast();
        const firstTaxRateRange = firstSheet.getRange("B2");
        const lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    });
'Excel.WorksheetCollection#load:member(2)':
  - |-
    Excel.run(function (ctx) { 
        var worksheets = ctx.workbook.worksheets;
        worksheets.load('items');
        return ctx.sync().then(function() {
            for (var i = 0; i < worksheets.items.length; i++)
            {
                console.log(worksheets.items[i].name);
                console.log(worksheets.items[i].index);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Excel.WorksheetCollection#onActivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheets = context.workbook.worksheets;
        sheets.onActivated.add(onActivate);

        await context.sync();
        console.log("A handler has been registered for the OnActivate event.");
    });
'Excel.WorksheetCollection#onAdded:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheet = context.workbook.worksheets;
        sheet.onAdded.add(onWorksheetAdd);

        await context.sync();
        console.log("A handler has been registered for the OnAdded event.");
    });
'Excel.WorksheetCollection#onDeactivated:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

    await Excel.run(async (context) => {
        let sheets = context.workbook.worksheets;
        sheets.onDeactivated.add(onDeactivate);

        await context.sync();
        console.log("A handler has been registered for the OnDeactivate event.");
    });
'Excel.WorksheetCustomPropertyCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/26-document/custom-properties.yaml

    await Excel.run(async (context) => {
      // Get the key/value pair from the task pane.
      const userKey = $("#key").text();
      const userValue = $("#value").text();

      // Add the custom property.
      const customWorksheetProperties = context.workbook.worksheets.getActiveWorksheet().customProperties;
      customWorksheetProperties.add(userKey, userValue);

      await context.sync();

      console.log(`Successfully set custom worksheet property ${userKey}:${userValue}.`);
    });
'Excel.WorksheetFreezePanes#freezeAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the specified range in top-and-left-most pane of the worksheet.
        sheet.freezePanes.freezeAt(sheet.getRange("H2:K5"));

        await context.sync();
    });
'Excel.WorksheetFreezePanes#freezeColumns:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the first two columns in the worksheet.
        sheet.freezePanes.freezeColumns(2);

        await context.sync();
    });
'Excel.WorksheetFreezePanes#freezeRows:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the top two rows in the worksheet.
        sheet.freezePanes.freezeRows(2);

        await context.sync();
    });
'Excel.WorksheetFreezePanes#getLocationOrNullObject:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        const frozenRange = sheet.freezePanes.getLocationOrNullObject();
        frozenRange.load("address");

        await context.sync();

        if (frozenRange.isNullObject) {
            console.log(`The worksheet does not contain a frozen pane.`);
        } else {
            console.log(`The address of the frozen range (cells that are frozen in the top-and-left-most pane) is "${frozenRange.address}"`);
        }
    });
'Excel.WorksheetFreezePanes#unfreeze:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-freeze-panes.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        sheet.freezePanes.unfreeze();

        await context.sync();
    });
'Excel.WorksheetProtection#protect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.load("protection/protected");

        await context.sync();

        if (!activeSheet.protection.protected) {
            activeSheet.protection.protect();
        }
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.load("protection/protected");

        await context.sync();

        if (!activeSheet.protection.protected) {
            activeSheet.protection.protect(null, password);
        }
    });
'Excel.WorksheetProtection#unprotect:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.protection.unprotect();
    });
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/data-protection.yaml

    let password = await passwordHandler();

    passwordHelper(password);

    await Excel.run(async (context) => {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.protection.unprotect(password);
    });
'Excel.WorksheetSingleClickedEventArgs#address:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-worksheet-single-click.yaml

    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.onSingleClicked.add((event) => {
            return Excel.run((context) => {
                console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                return context.sync();
            });
        });

        console.log("The worksheet click handler is registered.");

        await context.sync();
    });
'Excel.createWorkbook:function(1)':
  - |-
    var myFile = document.getElementById("file");
    var reader = new FileReader();

    reader.onload = function (event) {
        // strip off the metadata before the base64-encoded string
        var startIndex = event.target.result.indexOf("base64,");
        var copyBase64 = event.target.result.substr(startIndex + 7);

        Excel.createWorkbook(copyBase64);        
    };

    // read in the file as a data URL so we can parse the base64-encoded string
    reader.readAsDataURL(myFile.files[0]);
