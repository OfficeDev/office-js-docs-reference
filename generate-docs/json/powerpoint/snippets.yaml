'PowerPoint.Presentation#insertSlidesFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/insert-slides.yaml

    await PowerPoint.run(async function(context) {
        const selectedSlideID = await getSelectedSlideID();

        context.presentation.insertSlidesFromBase64(chosenFileBase64, {
            formatting: PowerPoint.InsertSlideFormatting.useDestinationTheme,
            targetSlideId: selectedSlideID + "#"
        });
        await context.sync();
    });
'PowerPoint.ShapeCollection#addGeometricShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/shapes.yaml

    await PowerPoint.run(async (context) => {
      var shapes = context.presentation.slides.getItemAt(0).shapes;
      var hexagon = shapes.addGeometricShape(PowerPoint.GeometricShapeType.hexagon, 
          {
            left: 100,
            top: 100,
            height: 150,
            width: 150
          });
      hexagon.name = "Hexagon";

      await context.sync();
    });
'PowerPoint.ShapeCollection#addLine:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/shapes.yaml

    await PowerPoint.run(async (context) => {
      var shapes = context.presentation.slides.getItemAt(0).shapes;

      // For a line, left and top are the coordinates of the start point,
      // while height and width are the coordinates of the end point.
      var line = shapes.addLine(PowerPoint.ConnectorType.straight, 
          { 
            left: 400, 
            top: 200, 
            height: 20, 
            width: 150 
          });
      line.name = "StraightLine";

      await context.sync();
    });
'PowerPoint.ShapeCollection#addTextBox:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/shapes.yaml

    await PowerPoint.run(async (context) => {
      var shapes = context.presentation.slides.getItemAt(0).shapes;
      var textbox = shapes.addTextBox("Hello!", 
          { 
            left: 100, 
            top: 300, 
            height: 300, 
            width: 450 
          });
      textbox.name = "Textbox";

      return context.sync();
    });
'PowerPoint.ShapeCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/tags.yaml

    await PowerPoint.run(async function(context) {
      const slide = context.presentation.slides.getItemAt(0);
      const shape = slide.shapes.getItemAt(0);
      shape.tags.add("MOUNTAIN", "Denali");

      await context.sync();

      const myShapeTag = shape.tags.getItem("MOUNTAIN");
      myShapeTag.load("key, value");

      await context.sync();

      console.log("Added key " + JSON.stringify(myShapeTag.key) + " with value " + JSON.stringify(myShapeTag.value));
    });
'PowerPoint.Slide#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/tags.yaml

    await PowerPoint.run(async function(context) {
      const slides = context.presentation.slides;
      slides.load("tags/key, tags/value");

      await context.sync();

      for (let i = 0; i < slides.items.length; i++) {
        let currentSlide = slides.items[i];
        for (let j = 0; j < currentSlide.tags.items.length; j++) {
          let currentTag = currentSlide.tags.items[j];
          if (currentTag.key === "CUSTOMER_TYPE" && currentTag.value === "Premium") {
            currentSlide.delete();
          }
        }
      }

      await context.sync();
    });
'PowerPoint.SlideCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/add-slides.yaml

    const chosenMaster = $("#master-id").val() as string;

    const chosenLayout = $("#layout-id").val() as string;


    await PowerPoint.run(async function(context) {
      context.presentation.slides.add({
        slideMasterId: chosenMaster,
        layoutId: chosenLayout
      });
      await context.sync();
    });
'PowerPoint.SlideCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/tags.yaml

    await PowerPoint.run(async function(context) {
      let selectedSlideIndex = await getSelectedSlideIndex();

      // Decrement because the getSelectedSlideByIndex method is 1-based,
      // but the getItemAt method is 0-based.
      selectedSlideIndex = selectedSlideIndex - 1;
      const slide = context.presentation.slides.getItemAt(selectedSlideIndex);
      slide.tags.add("CUSTOMER_TYPE", "Premium");

      await context.sync();

      const audienceTag = slide.tags.getItem("CUSTOMER_TYPE");
      audienceTag.load("key, value");

      await context.sync();

      console.log("Added key " + JSON.stringify(audienceTag.key) + " with value " + JSON.stringify(audienceTag.value));
    });
'PowerPoint.TagCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/tags.yaml

    await PowerPoint.run(async function(context) {
      const slide = context.presentation.slides.getItemAt(0);
      slide.tags.add("OCEAN", "Indian");
      slide.tags.add("PLANET", "Jupiter");
      slide.tags.add("CONTINENT", "Antarctica");

      await context.sync();

      slide.tags.load("key, value");

      await context.sync();

      for (let i = 0; i < slide.tags.items.length; i++) {
        console.log("Added key " + JSON.stringify(slide.tags.items[i].key) + " with value " +        JSON.stringify(slide.tags.items[i].value));
      }
    });
'PowerPoint.TagCollection#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/tags.yaml

    await PowerPoint.run(async function (context) {
      let presentationTags = context.presentation.tags;

      presentationTags.delete("COLOR");

      await context.sync();

      console.log(JSON.stringify(presentationTags));
    });
'PowerPoint.TagCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/preview-apis/tags.yaml

    await PowerPoint.run(async function(context) {
      let selectedSlideIndex = await getSelectedSlideIndex();

      // Decrement because the getSelectedSlideByIndex method is 1-based,
      // but the getItemAt method is 0-based.
      selectedSlideIndex = selectedSlideIndex - 1;
      const slide = context.presentation.slides.getItemAt(selectedSlideIndex);
      slide.tags.add("CUSTOMER_TYPE", "Premium");

      await context.sync();

      const audienceTag = slide.tags.getItem("CUSTOMER_TYPE");
      audienceTag.load("key, value");

      await context.sync();

      console.log("Added key " + JSON.stringify(audienceTag.key) + " with value " + JSON.stringify(audienceTag.value));
    });
'PowerPoint.createPresentation:function(1)':
  - |-
    var myFile = document.getElementById("file");
    var reader = new FileReader();

    reader.onload = function (event) {
        // strip off the metadata before the base64-encoded string
        var startIndex = event.target.result.indexOf("base64,");
        var copyBase64 = event.target.result.substr(startIndex + 7);

        PowerPoint.createPresentation(copyBase64);        
    };

    // read in the file as a data URL so we can parse the base64-encoded string
    reader.readAsDataURL(myFile.files[0]);
