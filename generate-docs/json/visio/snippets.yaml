'Visio.Application#showBorders:member':
  - |-
    Visio.run(session, function (ctx) {
        var application = ctx.document.application;
        application.showToolbars = false;
        application.showBorders = false;
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.Comment#load:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shapeName = "Position Belt.41";
        var shape = activePage.shapes.getItem(shapeName);
        var shapeComments= shape.comments;
        shapeComments.load(["author", "text"]);
        return ctx.sync().then(function () {
            for(var i = 0; i < shapeComments.items.length; i++)
            {
                var comment = shapeComments.items[i];
                console.log("comment Author: " + comment.author);
                console.log("Comment Text: " + comment.text);
                console.log("Date " + comment.date);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.CommentCollection#load:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shapeName = "Position Belt.41";
        var shape = activePage.shapes.getItem(shapeName);
        var shapeComments= shape.comments;
        shapeComments.load(["author", "text"]);
        return ctx.sync().then(function () {
            for(var i = 0; i < shapeComments.items.length; i++)
            {
                var comment = shapeComments.items[i];
                console.log("comment Author: " + comment.author);
                console.log("Comment Text: " + comment.text);
                console.log("Date " + comment.date);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.DataRefreshCompleteEventArgs:interface':
  - |-
    Visio.run(session, function (ctx) {
        var document1 = ctx.document;
        eventResult1 = document1.onDataRefreshComplete.add(
            function (args){
                console.log("Data Refresh Result: "+args.success);
            });

        return ctx.sync().then(function () {
           console.log("Success");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.Document#getActivePage:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var document = ctx.document;
        var activePage = document.getActivePage();
        activePage.load("name");
        return ctx.sync().then(function () {
            console.log("pageName: " +activePage.name);
        });   
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.Document#pages:member':
  - |-
    Visio.run(session, function (ctx) {
        var pages = ctx.document.pages;
        var pageCount = pages.getCount();
        return ctx.sync().then(function () {
            console.log("Pages Count: " +pageCount.value);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.Document#setActivePage:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var document = ctx.document;
        var pageName = "Page-1";
        document.setActivePage(pageName);
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.Document#startDataRefresh:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var document = ctx.document;
        document.startDataRefresh();
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.DocumentLoadCompleteEventArgs:interface':
  - |-
    Visio.run(session, function (ctx) {
        var document1 = ctx.document;
        eventResult1 = document1.onDocumentLoadComplete.add(
            function (args){
                console.log("Document Loaded");
            });

        return ctx.sync().then(function () {
            console.log("Success");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.DocumentView#disableHyperlinks:member':
  - |-
    Visio.run(session, function (ctx) {
        var documentView = ctx.document.view;
        documentView.disableHyperlinks();
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.Highlight#color:member':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        shape.view.highlight.color = "#E7E7E7";
        shape.view.highlight.width = 100;
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.Hyperlink#load:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        var hyperlink = shape.hyperlinks.getItem(0);
        hyperlink.load();
        return ctx.sync().then(function() {
            console.log(hyperlink.description);
            console.log(hyperlink.address);
            console.log(hyperlink.subAddress);
            console.log(hyperlink.extraInfo);
         });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.HyperlinkCollection#load:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shapeName = "Manager Belt";
        var shape = activePage.shapes.getItem(shapeName);
        var hyperlinks = shape.hyperlinks;
        shapeHyperlinks.load(["description", "address", "subAddress"]);
            ctx.sync().then(function () {
                for (var i = 0; i < shapeHyperlinks.items.length; i++) {
                    var hyperlink = shapeHyperlinks.items[i];
                    console.log(
                        "Description:"+hyperlink.description +"Address:"+hyperlink.address +"SubAddress:  " + 
                        hyperlink.subAddress);
                }
            });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.PageCollection#getItem:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var pageName = 'Page-1';
        var page = ctx.document.pages.getItem(pageName);
        page.activate();
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.PageLoadCompleteEventArgs:interface':
  - |-
    Visio.run(session, function (ctx) {
        var document1= ctx.document;
        eventResult1 = document1.onPageLoadComplete.add(
            function (args){
                console.log("Page name: "+args.pageName);
            });

        return ctx.sync().then(function () {
            console.log("Success");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.PageView#centerViewportOnShape:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        activePage.view.centerViewportOnShape(shape.Id);
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.PageView#zoom:member':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        activePage.view.zoom = 300;
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.SelectionChangedEventArgs:interface':
  - >-
    var eventResult; // Global Variable to store the EventHandlerResult returned
    on attaching handler.


    function AttachHandler() {
        Visio.run(session, function(ctx) {
            var doc = ctx.document;
            eventResult = doc.onSelectionChanged.add(
                function (args) {
                    console.log("Selected Shape Name: "+args.shapeNames[0]);
                });
            return ctx.sync().then(function(){
                console.log("Handler attached");
            });
        }).catch(function(error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
        });

        function onSelectionChanged(args) {
            console.log(Date.now() + "Selection Changes Event" + JSON.stringify(args));
        }
    }


    function RemoveHandler() {
        if (!eventResult || !eventResult.context) {
            console.log("Handler has not been attached");
            return;
        }

        Visio.run(eventResult.context, function(ctx) {
            eventResult.remove();
            return ctx.sync().then(function (){
                eventResult = null;
                console.log("Handler removed");
            });
        }).catch(function(error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
        });
    }
'Visio.Shape#load:member(2)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shapeName = "Sample Name";
        var shape = activePage.shapes.getItem(shapeName);
        shape.load(["name", "id", "text", "select"]);
        return ctx.sync().then(function () {
            console.log(shape.name);
            console.log(shape.id);
            console.log(shape.text);
            console.log(shape.select);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        shape.view.highlight = { color: "#E7E7E7", width: 100 };
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.ShapeCollection#getCount:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var numShapesActivePage = activePage.shapes.getCount();
        return ctx.sync().then(function () {
            console.log("Shapes Count: " + numShapesActivePage.value);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.ShapeDataItem#load:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        var shapeDataItem = shape.shapeDataItems.getItem(0);
        shapeDataItem.load(["label", "value"]);
            return ctx.sync().then(function() {
                console.log(shapeDataItem.label);
                console.log(shapeDataItem.value);
            });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.ShapeDataItemCollection#load:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        var shapeDataItems = shape.shapeDataItems;
        shapeDataItems.load(["label", "value"]);
        return ctx.sync().then(function() {
            for (var i = 0; i < shapeDataItems.items.length; i++) {
                console.log(shapeDataItems.items[i].label);
                console.log(shapeDataItems.items[i].value);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.ShapeMouseEnterEventArgs:interface':
  - |-
    Visio.run(session, function (ctx) {
        var document1= ctx.document;
        eventResult2 = document1.onShapeMouseEnter.add(
        function (args) {            
            console.log(Date.now()+":OnShapeMouseEnter Event"+JSON.stringify(args));
        });
        return ctx.sync().then(function () {
            console.log("Success");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.ShapeMouseLeaveEventArgs:interface':
  - |-
    Visio.run(session, function (ctx) {
        var document1= ctx.document;
        eventResult2 = document1.onShapeMouseLeave.add(
            function (args){            
                console.log(Date.now()+":OnShapeMouseLeave Event"+JSON.stringify(args));
            });
        return ctx.sync().then(function () {
            console.log("Success");
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.ShapeView#addOverlay:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        var overlayId = shape.view.addOverlay("Image", "Visio Online", "Center", "Middle", 50, 50);
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.ShapeView#highlight:member':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        shape.view.highlight = { color: "#E7E7E7", width: 100 };
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
'Visio.ShapeView#removeOverlay:member(1)':
  - |-
    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        shape.view.removeOverlay(1);
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
