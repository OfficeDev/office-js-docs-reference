'PowerPoint.Presentation#getSelectedShapes:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });


    ...

    // Gets the shapes you selected on the slide and displays their IDs on the
    task pane.

    await PowerPoint.run(async (context) => {
      let finalTable = "";
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      await context.sync();
      finalTable += "<br>getSelectedShapes.getCount returned:<b>" + shapeCount.value + "</b><br>";
      finalTable +=
        "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
      shapes.load("items");
      await context.sync();
      shapes.items.map((shape, index) => {
        finalTable += "<tr><td>" + index + "</td><td>" + shape.id + "</td></tr>";
      });
      finalTable += "</table>";
      $("#outputSpan").empty();
      $("#outputSpan").append(finalTable);
    });


    ...

    // Saves which shapes are selected so that they can be reselected later.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slides = context.presentation.getSelectedSlides();
      const slideCount = slides.getCount();
      slides.load("items");
      await context.sync();
      savedSlideSelection = [];
      slides.items.map((slide) => {
        savedSlideSelection.push(slide.id);
      });
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      shapes.items.map((shape) => {
        savedShapeSelection.push(shape.id);
      });
    });
'PowerPoint.Presentation#getSelectedSlides:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Gets the selected slides and displays their IDs on the task pane.

    await PowerPoint.run(async (context) => {
      let finalTable = "";
      context.presentation.load("slides");
      await context.sync();
      const allSlidesList = {};
      const allSlidesCount = context.presentation.slides.getCount();
      context.presentation.slides.load("items");
      await context.sync();
      let allSlideItems = context.presentation.slides.items;
      allSlideItems.map((slide, index) => {
        allSlidesList[slide.id] = `Slide ${index + 1}`;
      });

      if ($("#id-check-usenative").is(":checked")) {
        context.presentation.load("tags");
      }
      const slides = context.presentation.getSelectedSlides();
      const slideCount = slides.getCount();
      slides.load("items");
      await context.sync();
      finalTable += "<br>getSelectedSlides.getCount returned:<b>" + slideCount.value + "</b><br>";
      finalTable +=
        "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
      slides.items.map((slide, index) => {
        finalTable += "<tr><td>" + index + " - " + allSlidesList[slide.id] + "</td><td>" + slide.id + "</td></tr>";
      });
      finalTable += "</table>";
      $("#outputSpan").empty();
      $("#outputSpan").append(finalTable);
    });


    ...

    // Saves which slides are currently selected so they can be reselected
    later.

    await PowerPoint.run(async (context) => {
      let finalTable = "";
      context.presentation.load("slides");
      await context.sync();
      const slides = context.presentation.getSelectedSlides();
      const slideCount = slides.getCount();
      await context.sync();
      finalTable += "<br>getSelectedSlides.getCount returned:<b>" + slideCount.value + "</b><br>";
      finalTable +=
        "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
      savedSlideSelection = [];
      slides.load("items");
      await context.sync();
      slides.items.map((slide, index) => {
        finalTable += "<tr><td>" + index + "</td><td>" + slide.id + "</td></tr>";
        savedSlideSelection.push(slide.id);
      });
      finalTable += "</table>";
      $("#outputSpan").empty();
      $("#outputSpan").append(finalTable);
    });
'PowerPoint.Presentation#getSelectedTextRange:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Gets the selected text range and prints data about the range on the task
    pane.

    await PowerPoint.run(async (context) => {
      const textRange = context.presentation.getSelectedTextRange();
      try {
        await context.sync();
      } catch (error) {
        console.warn("You must select only one range of text for this action to work.");
        return;
      }
      textRange.load("text");
      textRange.load("start");
      textRange.load("length");
      await context.sync();
      let txtHtml = textRange.text;
      txtHtml = txtHtml.replace(/\n/g, "<br>");
      txtHtml = txtHtml.replace(/\r/g, "<br>");
      txtHtml = txtHtml.replace(/\v/g, "<br>");
      let txtExplained = textRange.text;
      txtExplained = txtExplained.replace(/\n/g, "<font color=red>NL</font>");
      txtExplained = txtExplained.replace(/\r/g, "<font color=red>CR</font>");
      txtExplained = txtExplained.replace(/\v/g, "<font color=red>VV</font>");
      let finalTable = "";
      finalTable +=
        "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
      finalTable += "<tr><td>Raw</td><td>" + textRange.text + "</td></tr>";
      finalTable += "<tr><td>Html</td><td>" + txtHtml + "</td></tr>";
      finalTable += "<tr><td>Exp</td><td>" + txtExplained + "</td></tr>";
      finalTable += "<tr><td>Start</td><td>" + textRange.start + "</td></tr>";
      finalTable += "<tr><td>Length</td><td>" + textRange.length + "</td></tr>";
      finalTable += "</table>";
      $("#outputSpan").empty();
      $("#outputSpan").append(finalTable);
    });


    ...

    // Sets the range selection to the range that was saved previously.

    await PowerPoint.run(async (context) => {
      const slide1 = context.presentation.slides.getItem(savedTextSlideSelection[0]);
      const shape1 = slide1.shapes.getItem(savedTextShapeSelection[0]);
      const textRange = shape1.textFrame.textRange.getSubstring(savedTextTextRangeStart, savedTextTextRangeLength);
      textRange.setSelected();
      await context.sync();
    });
'PowerPoint.Presentation#insertSlidesFromBase64:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/insert-slides.yaml

    await PowerPoint.run(async function(context) {
        const selectedSlideID = await getSelectedSlideID();

        context.presentation.insertSlidesFromBase64(chosenFileBase64, {
            formatting: PowerPoint.InsertSlideFormatting.useDestinationTheme,
            targetSlideId: selectedSlideID + "#"
        });
        await context.sync();
    });
'PowerPoint.Presentation#setSelectedSlides:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Sets selection to the slides that were saved.

    await PowerPoint.run(async (context) => {
      context.presentation.setSelectedSlides(savedSlideSelection);
      await context.sync();
    });


    ...

    // Selects slides 2, 4, and 5.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slide2 = context.presentation.slides.getItemAt(1);
      const slide4 = context.presentation.slides.getItemAt(3);
      const slide5 = context.presentation.slides.getItemAt(4);
      slide2.load("id");
      slide4.load("id");
      slide5.load("id");
      try {
        await context.sync();
      } catch (error) {
        console.warn("This action requires at least 5 slides in the presentation.");
        return;
      }
      await context.sync();
      context.presentation.setSelectedSlides([slide2.id, slide4.id, slide5.id]);
      await context.sync();
    });
'PowerPoint.Shape#fill:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Changes the selected shapes fill color to red.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      shapes.items.map((shape) => {
        shape.fill.setSolidColor("red");
      });
      await context.sync();
    });
'PowerPoint.Shape#height:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
'PowerPoint.Shape#left:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
'PowerPoint.Shape#top:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
'PowerPoint.Shape#width:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Arranges the selected shapes in a line from left to right.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      let maxHeight = 0;
      shapes.items.map((shape) => {
        shape.load("width,height");
      });
      await context.sync();
      shapes.items.map((shape) => {
        shape.left = currentLeft;
        shape.top = currentTop;
        currentLeft += shape.width;
        if (shape.height > maxHeight) maxHeight = shape.height;
      });
      await context.sync();
      currentLeft = 0;
      if (currentTop > slideHeight - 200) currentTop = 0;
    });
'PowerPoint.ShapeCollection#addGeometricShape:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml

    // This function gets the collection of shapes on the first slide,

    // and adds a hexagon shape to the collection, while specifying its

    // location and size. Then it names the shape.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.slides.getItemAt(0).shapes;
      const hexagon = shapes.addGeometricShape(PowerPoint.GeometricShapeType.hexagon, 
          {
            left: 100,
            top: 100,
            height: 150,
            width: 150
          });
      hexagon.name = "Hexagon";

      await context.sync();
    });
'PowerPoint.ShapeCollection#addLine:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml

    // This function gets the collection of shapes on the first slide,

    // and adds a line to the collection, while specifying its

    // start and end points. Then it names the shape.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.slides.getItemAt(0).shapes;

      // For a line, left and top are the coordinates of the start point,
      // while height and width are the coordinates of the end point.
      const line = shapes.addLine(PowerPoint.ConnectorType.straight, 
          { 
            left: 400, 
            top: 200, 
            height: 20, 
            width: 150 
          });
      line.name = "StraightLine";

      await context.sync();
    });
'PowerPoint.ShapeCollection#addTextBox:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml

    // This function gets the collection of shapes on the first slide,

    // and adds a text box to the collection, while specifying its text,

    // location, and size. Then it names the text box.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.slides.getItemAt(0).shapes;
      const textbox = shapes.addTextBox("Hello!", 
          { 
            left: 100, 
            top: 300, 
            height: 300, 
            width: 450 
          });
      textbox.name = "Textbox";

      return context.sync();
    });
'PowerPoint.ShapeCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

    await PowerPoint.run(async function(context) {
      const slide = context.presentation.slides.getItemAt(0);
      const shape = slide.shapes.getItemAt(0);
      shape.tags.add("MOUNTAIN", "Denali");

      await context.sync();

      const myShapeTag = shape.tags.getItem("MOUNTAIN");
      myShapeTag.load("key, value");

      await context.sync();

      console.log("Added key " + JSON.stringify(myShapeTag.key) + " with value " + JSON.stringify(myShapeTag.value));
    });
'PowerPoint.ShapeFill#setSolidColor:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Changes the selected shapes fill color to red.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      shapes.load("items");
      await context.sync();
      shapes.items.map((shape) => {
        shape.fill.setSolidColor("red");
      });
      await context.sync();
    });
'PowerPoint.ShapeFont#color:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Sets the color of the selected text range to green.

    await PowerPoint.run(async (context) => {
      const textRange = context.presentation.getSelectedTextRange();
      textRange.font.color = "green";
      await context.sync();
    });
'PowerPoint.Slide#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Deletes the selected slides.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slides = context.presentation.getSelectedSlides();
      const slideCount = slides.getCount();
      slides.load("items");
      await context.sync();
      slides.items.map((slide) => {
        slide.delete();
      });
    });
'PowerPoint.Slide#setSelectedShapes:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

    // Reselects shapes that were saved previously.

    await PowerPoint.run(async (context) => {
      const slide1 = context.presentation.slides.getItem(savedSlideSelection[0]);
      await context.sync();
      slide1.setSelectedShapes(savedShapeSelection);
      await context.sync();
    });


    ...

    // Selects the first two shapes on slide 1.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slide1 = context.presentation.slides.getItemAt(0);
      slide1.load("shapes");
      await context.sync();
      const shapes = slide1.shapes;
      const shape1 = shapes.getItemAt(0);
      const shape2 = shapes.getItemAt(1);
      shape1.load("id");
      shape2.load("id");
      await context.sync();
      slide1.setSelectedShapes([shape1.id, shape2.id]);
      await context.sync();
    });
'PowerPoint.SlideCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/add-slides.yaml

    const chosenMaster = $("#master-id").val() as string;

    const chosenLayout = $("#layout-id").val() as string;


    await PowerPoint.run(async function(context) {
      context.presentation.slides.add({
        slideMasterId: chosenMaster,
        layoutId: chosenLayout
      });
      await context.sync();
    });
'PowerPoint.SlideCollection#getItemAt:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

    // Selects slides 2, 4, and 5.

    await PowerPoint.run(async (context) => {
      context.presentation.load("slides");
      await context.sync();
      const slide2 = context.presentation.slides.getItemAt(1);
      const slide4 = context.presentation.slides.getItemAt(3);
      const slide5 = context.presentation.slides.getItemAt(4);
      slide2.load("id");
      slide4.load("id");
      slide5.load("id");
      try {
        await context.sync();
      } catch (error) {
        console.warn("This action requires at least 5 slides in the presentation.");
        return;
      }
      await context.sync();
      context.presentation.setSelectedSlides([slide2.id, slide4.id, slide5.id]);
      await context.sync();
    });
'PowerPoint.TagCollection#add:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

    await PowerPoint.run(async function(context) {
      const slide = context.presentation.slides.getItemAt(0);
      slide.tags.add("OCEAN", "Indian");
      slide.tags.add("PLANET", "Jupiter");
      slide.tags.add("CONTINENT", "Antarctica");

      await context.sync();

      slide.tags.load("key, value");

      await context.sync();

      for (let i = 0; i < slide.tags.items.length; i++) {
        console.log("Added key " + JSON.stringify(slide.tags.items[i].key) + " with value " +        JSON.stringify(slide.tags.items[i].value));
      }
    });
'PowerPoint.TagCollection#delete:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

    await PowerPoint.run(async function (context) {
      let presentationTags = context.presentation.tags;

      presentationTags.delete("COLOR");

      await context.sync();

      console.log(JSON.stringify(presentationTags));
    });
'PowerPoint.TagCollection#getItem:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

    await PowerPoint.run(async function(context) {
      let selectedSlideIndex = await getSelectedSlideIndex();

      // Decrement because the getSelectedSlideByIndex method is 1-based,
      // but the getItemAt method is 0-based.
      selectedSlideIndex = selectedSlideIndex - 1;
      const slide = context.presentation.slides.getItemAt(selectedSlideIndex);
      slide.tags.add("CUSTOMER_TYPE", "Premium");

      await context.sync();

      const audienceTag = slide.tags.getItem("CUSTOMER_TYPE");
      audienceTag.load("key, value");

      await context.sync();

      console.log("Added key " + JSON.stringify(audienceTag.key) + " with value " + JSON.stringify(audienceTag.value));
    });
'PowerPoint.TextRange#font:member':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Sets the color of the selected text range to green.

    await PowerPoint.run(async (context) => {
      const textRange = context.presentation.getSelectedTextRange();
      textRange.font.color = "green";
      await context.sync();
    });
'PowerPoint.TextRange#setSelected:member(1)':
  - >-
    // Link to full sample:
    https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

    // Selects the first 10 characters of the selected shape.

    await PowerPoint.run(async (context) => {
      const shapes = context.presentation.getSelectedShapes();
      const shapeCount = shapes.getCount();
      await context.sync();
      if (shapeCount.value !== 1) {
        console.warn("You must select only one shape with text in it.");
        return;
      }
      const shape = shapes.getItemAt(0);
      const textFrame = shape.textFrame.load("textRange,hasText");
      await context.sync();
      if (textFrame.hasText != true) {
        console.warn("You must select only one shape with text in it.");
        return;
      }
      const textRange = textFrame.textRange;
      textRange.load("text");
      await context.sync();
      if (textRange.text.length < 10) {
        console.warn("You must select only one shape with at least 10 characters in it.");
        return;
      }
      const textRange10 = textRange.getSubstring(0, 10);
      textRange10.setSelected();
      await context.sync();
    });


    ...

    // Sets the range selection to the range that was saved previously.

    await PowerPoint.run(async (context) => {
      const slide1 = context.presentation.slides.getItem(savedTextSlideSelection[0]);
      const shape1 = slide1.shapes.getItem(savedTextShapeSelection[0]);
      const textRange = shape1.textFrame.textRange.getSubstring(savedTextTextRangeStart, savedTextTextRangeLength);
      textRange.setSelected();
      await context.sync();
    });
'PowerPoint.createPresentation:function(1)':
  - |-
    const myFile = <HTMLInputElement>document.getElementById("file");
    const reader = new FileReader();

    reader.onload = (event) => {
      // Remove the metadata before the base64-encoded string.
      const startIndex = reader.result.toString().indexOf("base64,");
      const copyBase64 = reader.result.toString().substr(startIndex + 7);

      PowerPoint.createPresentation(copyBase64);
    };

    // Read in the file as a data URL so we can parse the base64-encoded string.
    reader.readAsDataURL(myFile.files[0]);
