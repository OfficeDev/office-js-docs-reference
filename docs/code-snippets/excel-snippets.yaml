Excel.createWorkbook:function(1):
  - |-
    const myFile = <HTMLInputElement>document.getElementById("file");
    const reader = new FileReader();

    reader.onload = (event) => {
        Excel.run((context) => {
        // Remove the metadata before the base64-encoded string.
        const startIndex = reader.result.toString().indexOf("base64,");
        const mybase64 = reader.result.toString().substr(startIndex + 7);

        Excel.createWorkbook(mybase64);
        return context.sync();
        });
    };

    // Read in the file as a data URL so we can parse the base64-encoded string.
    reader.readAsDataURL(myFile.files[0]);
Excel.Application#calculate:member(2):
  - |-
    await Excel.run(async (context) => {
        context.workbook.application.calculate('Full');
        await context.sync();
    });
Excel.Application#load:member(2):
  - |-
    await Excel.run(async (context) => {
        const application = context.workbook.application;
        application.load('calculationMode');
        await context.sync();

        console.log(application.calculationMode);
    });
Excel.Binding#getRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const binding = context.workbook.bindings.getItemAt(0);
        const range = binding.getRange();
        range.load('cellCount');
        await context.sync();

        console.log(range.cellCount);
    });
Excel.Binding#getTable:member(1):
  - |-
    await Excel.run(async (context) => { 
        const binding = context.workbook.bindings.getItemAt(0);
        const table = binding.getTable();
        table.load('name');
        await context.sync();

        console.log(table.name);
    });
Excel.Binding#getText:member(1):
  - |-
    await Excel.run(async (context) => { 
        const binding = context.workbook.bindings.getItemAt(0);
        const text = binding.getText();
        binding.load('text');
        await context.sync();

        console.log(text);
    });
Excel.Binding#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const binding = context.workbook.bindings.getItemAt(0);
        binding.load('type');
        await context.sync();

        console.log(binding.type);
    });
Excel.BindingCollection#getItem:member(1):
  - |-        
    async function onBindingDataChanged(eventArgs) {
        await Excel.run(async (context) => { 
            // Highlight the table related to the binding in orange to indicate data has been changed.
            context.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
            await context.sync();
            
            console.log("The value in this table got changed!");
        });
    }
Excel.BindingCollection#getItemAt:member(1):
  - |-
    await Excel.run(async (context) => { 
        const lastPosition = context.workbook.bindings.count - 1;
        const binding = context.workbook.bindings.getItemAt(lastPosition);
        binding.load('type')
        await context.sync();

        console.log(binding.type);
    });
Excel.BindingCollection#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const bindings = context.workbook.bindings;
        bindings.load('items');
        await context.sync();

        for (let i = 0; i < bindings.items.length; i++) {
            console.log(bindings.items[i].id);
        }
    });
Excel.Chart#delete:member(1):
  - |-
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.delete();
        await context.sync(); 
    });
Excel.Chart#getImage:member(1):
  - |-
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        const image = chart.getImage();
        await context.sync(); 
    });
Excel.Chart#legend:member:
  - |-
    // Set to show legend of Chart1 and make it on top of the chart.
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.legend.visible = true;
        chart.legend.position = "Top"; 
        chart.legend.overlay = false; 
        await context.sync()
        
        console.log("Legend Shown ");
    });
Excel.Chart#name:member:
  - |-
    // Rename the chart to new name, resize the chart to 200 points in both height and weight.
    // Move Chart1 to 100 points to the top and left.
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.name = "New Name";
        chart.top = 100;
        chart.left = 100;
        chart.height = 200;
        chart.width = 200;
        await context.sync(); 
    });
Excel.Chart#setData:member(1):
  - |-
    // Set the sourceData to be the range at "A1:B4" and seriesBy to be "Columns".
    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sheet1");
        const chart = sheet.charts.getItem("Chart1");
        const sourceData = sheet.getRange("A1:B4");
        chart.setData(sourceData, "Columns");
        await context.sync();
    });
Excel.Chart#setPosition:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Charts";
        const rangeSelection = "A1:B4";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeSelection);
        const sourceData = sheetName + "!" + "A1:B4";
        const chart = context.workbook.worksheets.getItem(sheetName).charts.add("pie", range, "auto");
        chart.width = 500;
        chart.height = 300;
        chart.setPosition("C2", null);
        await context.sync(); 
    });
Excel.Chart#load:member(2):
  - |-
    // Get a chart named "Chart1".
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.load('name');
        await context.sync();

        console.log(chart.name);
    });
Excel.ChartAxes#valueAxis:member:
  - |-
    // Set the maximum, minimum, majorUnit, minorUnit of valueAxis.
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.axes.valueAxis.maximum = 5;
        chart.axes.valueAxis.minimum = 0;
        chart.axes.valueAxis.majorUnit = 1;
        chart.axes.valueAxis.minorUnit = 0.2;
        await context.sync();

        console.log("Axis Settings Changed");
    });
Excel.ChartAxis#load:member(2):
  - |-
    // Get the maximum of Chart Axis from Chart1.
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        const axis = chart.axes.valueAxis;
        axis.load('maximum');
        await context.sync();

        console.log(axis.maximum);
    });
Excel.ChartAxisTitle#load:member(2):
  - |-
    // Add "Values" as the title for the value Axis.
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1"); 
        chart.axes.valueAxis.title.text = "Values";
        await context.sync();
        
        console.log("Axis Title Added ");
    });
Excel.ChartAxisTitle#textOrientation:member:
  - >-
    await Excel.run(async (context) => {
      // Get a chart named "Sales Chart" from the "Sample" worksheet.
      const sheet = context.workbook.worksheets.getItem("Sample");
      let chart = sheet.charts.getItem("Sales Chart");

      // Set the value axis title to "Profits".
      chart.axes.valueAxis.title.text = "Profits";

      /* Set the value axis text orientation to 0.
        For charts with a y-axis, this makes the label on the y-axis horizontal, 
        instead of the default look of rotated-vertically.
        */ 
      chart.axes.valueAxis.title.textOrientation = 0;
      await context.sync();
    });
Excel.ChartCollection#add:member(1):
  - |-
    // Add a chart of chartType "ColumnClustered" on worksheet "Charts" 
    // with sourceData from range "A1:B4" and seriesBy set to "auto".
    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sheet1");
        const rangeSelection = "A1:B4";
        const range = sheet.getRange(rangeSelection);
        const chart = sheet.charts.add(
        Excel.ChartType.columnClustered, 
        range, 
        Excel.ChartSeriesBy.auto);
        await context.sync();

        console.log("New Chart Added");
    });
Excel.ChartCollection#getItem:member(1):
  - |-
    // Get the number of charts.
    await Excel.run(async (context) => { 
        const charts = context.workbook.worksheets.getItem("Sheet1").charts;
        charts.load('count');
        await context.sync();
        
        console.log("charts: Count= " + charts.count);
    });
Excel.ChartCollection#getItemAt:member(1):
  - |-
    await Excel.run(async (context) => { 
        const lastPosition = context.workbook.worksheets.getItem("Sheet1").charts.count - 1;
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItemAt(lastPosition);
        await context.sync();

        console.log(chart.name);
    });
Excel.ChartCollection#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const charts = context.workbook.worksheets.getItem("Sheet1").charts;
        charts.load('items');
        await context.sync();
        
        for (let i = 0; i < charts.items.length; i++) {
            console.log(charts.items[i].name);
        }
    });
Excel.ChartCollection#onAdded:member:
  - |-
    await Excel.run(async (context) => {
        context.workbook.worksheets.getActiveWorksheet()
            .charts.onAdded.add(function (event) {
            return Excel.run(async (context) => {
                console.log("A chart has been added with ID: " + event.chartId);
                await context.sync();
            });
        });
        await context.sync();
    });
Excel.ChartCollection#onDeleted:member:
  - |-
    await Excel.run(async (context) => {
        context.workbook.worksheets.getActiveWorksheet()
            .charts.onDeleted.add(function (event) {
            return Excel.run(async (context) => {
                console.log("The chart with this ID was deleted: " + event.chartId);
                await context.sync();
            });
        });
        await context.sync();
    });
Excel.ChartDataLabels#load:member(2):
  - |-
    // Show the series name in data labels and set the position of the data labels to "top".
    await Excel.run(async (context) => {
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");
        chart.dataLabels.showValue = true;
        chart.dataLabels.position = Excel.ChartDataLabelPosition.top;
        chart.dataLabels.showSeriesName = true;
        await context.sync();

        console.log("Data labels shown");
    });
Excel.ChartFill#clear:member(1):
  - |-
    // Clear the line format of the major gridlines on the value axis of the chart named "Chart1".
    await Excel.run(async (context) => { 
        const gridlines = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").axes.valueAxis.majorGridlines;
        gridlines.format.line.clear();
        await context.sync();
        
        console.log("Chart Major Gridlines Format Cleared");
    });
Excel.ChartFont:class:
  - |-
    // Set the chart title font to Calibri, size 10, bold, and the color red.
    await Excel.run(async (context) => { 
        const title = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").title;
        title.format.font.name = "Calibri";
        title.format.font.size = 12;
        title.format.font.color = "#FF0000";
        title.format.font.italic =  false;
        title.format.font.bold = true;
        title.format.font.underline = "None";
        await context.sync();
    });
Excel.ChartGridlines#load:member(2):
  - |-
    // Set the value axis of Chart1 to show the major gridlines.
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.axes.valueAxis.majorGridlines.visible = true;
        await context.sync();
        
        console.log("Axis Gridlines Added ");
    });
Excel.ChartLegend#load:member(2):
  - |-
    // Get the position of Chart Legend from Chart1.
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        const legend = chart.legend;
        legend.load('position');
        await context.sync();

        console.log(legend.position);
    });
Excel.ChartLineFormat#clear:member(1):
  - |-
    // Clear the format of the major gridlines on Chart1. 
    await Excel.run(async (context) => { 
        const gridlines = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").axes.valueAxis.majorGridlines;
        gridlines.format.line.clear();
        await context.sync();
        
        console.log("Chart Major Gridlines Format Cleared");
    });
Excel.ChartLineFormat#load:member(2):
  - |-
    // Set chart major gridlines on value axis to be red.
    await Excel.run(async (context) => {
        const gridlines = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").axes.valueAxis.majorGridlines;
        gridlines.format.line.color = "#FF0000";
        await context.sync()
        
        console.log("Chart Gridlines Color Updated");
    });
Excel.ChartPointsCollection#getItemAt:member(1):
  - |-
    // Set the border color for the first points in the points collection.
    await Excel.run(async (context) => { 
        const points = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series.getItemAt(0).points;
        points.getItemAt(0).format.fill.setSolidColor("8FBC8F");
        await context.sync();
        
        console.log("Point Border Color Changed");
    });
Excel.ChartPointsCollection#load:member(2):
  - |-
    // Get the number of points.
    await Excel.run(async (context) => { 
        const pointsCollection = 
            context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series.getItemAt(0).points;
        pointsCollection.load('count');
        await context.sync();
        console.log("points: Count= " + pointsCollection.count);
    });
Excel.ChartSeries#load:member(2):
  - |-
    // Rename the 1st series of Chart1 to "New Series Name".
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        chart.series.getItemAt(0).name = "New Series Name";
        await context.sync();

        console.log("Series1 Renamed");
    });
Excel.ChartSeriesCollection#getItemAt:member(1):
  - |-
    // Get the name of the first series in the series collection.
    await Excel.run(async (context) => { 
        const seriesCollection = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series;
        seriesCollection.load('items');
        await context.sync();
        
        console.log(seriesCollection.items[0].name);
    });
Excel.ChartSeriesCollection#load:member(2):
  - |-
    // Get the number of chart series in the collection.
    await Excel.run(async (context) => { 
        const seriesCollection = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series;
        seriesCollection.load('count');
        await context.sync();

        console.log("series: Count= " + seriesCollection.count);
    });
Excel.ChartTitle#load:member(2):
  - |-
    // Set the text of the chart title to "My Chart" and display it as an overlay on the chart.
    await Excel.run(async (context) => { 
        const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
        
        chart.title.text= "My Chart"; 
        chart.title.visible=true;
        chart.title.overlay=true;
        
        await context.sync();
        console.log("Char Title Changed");
    });
Excel.ConditionalFormatCollection#getCount:member(1):
  - |-
    await Excel.run(async (context) => {
        const sheetName = "Sheet1";
        const rangeAddress = "A1:C3";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
        conditionalFormat.iconSetOrNullObject.style = Excel.IconSet.fourTrafficLights;
        const cfCount = range.conditionalFormats.getCount(); 

        await context.sync()
        console.log("Count: " + cfCount.value);
    });
Excel.ConditionalFormatCollection#getItem:member(1):
  - |-
    await Excel.run(async (context) => {
        const sheetName = "Sheet1";
        const rangeAddress = "A1:C3";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        const conditionalFormats = range.conditionalFormats;
        const conditionalFormat = conditionalFormats.getItemAt(3);
        await context.sync()

        console.log("Conditional Format at Item 3 Loaded");
    });
Excel.CustomConditionalFormat#rule:member:
  - |-
    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const range = sheet.getRange("A1:A5");
        range.values = [[1], [20], [""], [5], ["test"]];
        const cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        const cfCustom = cf.customOrNullObject;
        cfCustom.rule.formula = "=ISBLANK(A1)";
        cfCustom.format.fill.color = "#00FF00";
        await context.sync()

        console.log("Added new custom conditional format highlighting all blank cells.");
    });
Excel.FilterOn:enum:
  - |-
    // This function adds a custom AutoFilter to the active worksheet 
    // and applies the filter to a column of the used range.
    await Excel.run(async (context) => {
        // Retrieve the active worksheet and the used range on that worksheet.
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        const farmData = sheet.getUsedRange();

        // Add a filter that will only show the rows with values that end with the letter "e" in column 1.
        sheet.autoFilter.apply(farmData, 1, {
            criterion1: "=*e",
            filterOn: Excel.FilterOn.custom
        });

        await context.sync();
    });
Excel.NamedItem#getRange:member(1):
  - |-
    // Returns the Range object that is associated with the name.
    // Returns `null` if the name is not of type Range.
    // Note: This API currently supports only the Workbook scoped items.
    await Excel.run(async (context) => { 
        const names = context.workbook.names;
        const range = names.getItem('MyRange').getRange();
        range.load('address');
        await context.sync();

        console.log(range.address);
    });
Excel.NamedItem#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const names = context.workbook.names;
        const namedItem = names.getItem('MyRange');
        namedItem.load('type');
        await context.sync();
        
        console.log(namedItem.type);
    });
Excel.NamedItemCollection#getItem:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = 'Sheet1';
        const nameditem = context.workbook.names.getItem(sheetName);
        nameditem.load('type');
        await context.sync();
        
        console.log(nameditem.type);
    });
Excel.NamedItemCollection#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const nameditems = context.workbook.names;
        nameditems.load('items');
        await context.sync();

        for (let i = 0; i < nameditems.items.length; i++) {
            console.log(nameditems.items[i].name);
        }
    });
Excel.Query#name:member:
  - |-
    // This function retrieves the query collection in a workbook, 
    // loads the query items in that collection, and then
    // logs the name of each query to the console.
    await Excel.run(async (context) => {
        const queries = context.workbook.queries; 
        queries.load("items"); 
        await context.sync(); 

        console.log("Name of each query: ")
        console.log("  " + queries.items.map((query) => query.name).join("\n  "));
    });
Excel.Query#refreshDate:member:
  - |-
    // This function retrieves the query collection in a workbook, 
    // loads the query items in that collection, and then
    // logs the last refresh date of each query to the console.
    await Excel.run(async (context) => {
        const queries = context.workbook.queries; 
        queries.load("items"); 
        await context.sync(); 

        console.log("Last refresh date of each query: ")
        console.log("  " + queries.items.map((query) => query.refreshDate).join("\n  "));
    });       
Excel.Query#rowsLoadedCount:member:
  - |-
    // This function retrieves the query collection in a workbook, 
    // loads the query items in that collection, and then
    // logs the number of rows loaded in each query.
    await Excel.run(async (context) => {
        const queries = context.workbook.queries; 
        queries.load("items"); 
        await context.sync(); 

        console.log("Rows loaded from each query: ")
        console.log("  " + queries.items.map((query) => query.rowsLoadedCount).join("\n  "));
    });
Excel.QueryCollection#items:member:
  - |-
    // This function retrieves the query collection in a workbook, 
    // loads the query items in that collection, and then
    // logs the name of each query to the console.
    await Excel.run(async (context) => {
        const queries = context.workbook.queries; 
        queries.load("items"); 
        await context.sync(); 

        console.log("Name of each query: ")
        console.log("  " + queries.items.map((query) => query.name).join("\n  "));
    });
Excel.QueryCollection#getCount:member(1):
  - |-
    // This function retrieves the query collection in a workbook and then 
    // logs the number of queries in the collection to the console.
    await Excel.run(async (context) => { 
      const queries = context.workbook.queries; 
      const count = queries.getCount();
      await context.sync();

      console.log("Query count: " + count.value);
    });
Excel.Range:class:
  - |-
    // Get a Range object by its address.
    await Excel.run(async (context) => {
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        const cell = range.getCell(0,0);
        cell.load('address');
        await context.sync();
        
        console.log(cell.address);
    });
Excel.Range#clear:member(1):
  - |-
    // Clear the format and contents of the range.
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "D:F";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.clear();
        await context.sync(); 
    });
Excel.Range#delete:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "D:F";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.delete("Left");
        await context.sync(); 
    });
Excel.Range#getBoundingRect:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "D4:G6";
        let range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range = range.getBoundingRect("G4:H8");
        range.load('address');
        await context.sync();
        
        console.log(range.address); // Prints Sheet1!D4:H8
    });
Excel.Range#getCell:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        const cell = range.getCell(0,0);
        cell.load('address');
        await context.sync();
        
        console.log(cell.address);
    });
Excel.Range#getColumn:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet19";
        const rangeAddress = "A1:F8";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
        range.load('address');
        await context.sync();

        console.log(range.address); // prints Sheet1!B1:B8
    });
Excel.Range#getEntireColumn:member(1):
  - |-
    // Note: the grid properties of the Range (values, numberFormat, formulas) 
    // contains null since the Range in question is unbounded.
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "D:F";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        const rangeEC = range.getEntireColumn();
        rangeEC.load('address');
        await context.sync();
        
        console.log(rangeEC.address);
    });
Excel.Range#getEntireRow:member(1):
  - |-
    // Gets an object that represents the entire row of the range 
    // (for example, if the current range represents cells "B4:E11", 
    // its GetEntireRow is a range that represents rows "4:11").
    await Excel.run(async (context) => {
        const sheetName = "Sheet1";
        const rangeAddress = "D:F"; 
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        const rangeER = range.getEntireRow();
        rangeER.load('address');
        await context.sync();
        
        console.log(rangeER.address);
    });
Excel.Range#getIntersection:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const range = 
            context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
        range.load('address');
        await context.sync();
        
        console.log(range.address); // prints Sheet1!D4:F6
    });
Excel.Range#getLastCell:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
        range.load('address');
        await context.sync();
        
        console.log(range.address); // prints Sheet1!F8
    });
Excel.Range#getLastColumn:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
        range.load('address');
        await context.sync();
        
        console.log(range.address); // prints Sheet1!F1:F8
    });
Excel.Range#getLastRow:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
        range.load('address');
        await context.sync();
        
        console.log(range.address); // prints Sheet1!A8:F8
    });
Excel.Range#getOffsetRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "D4:F6";
        const range = 
            context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
        range.load('address');
        await context.sync();
        
        console.log(range.address); // prints Sheet1!H3:J5
    });
Excel.Range#getRow:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
        range.load('address');
        await context.sync();
        
        console.log(range.address); // prints Sheet1!A2:F2
    });
Excel.Range#numberFormat:member:
  - |-
    // Set the text of the chart title to "My Chart" and display it as an overlay on the chart.
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "F5:G7";
        const numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
        const values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
        const formulas = [[null,null], [null,null], [null,"=G6-G5"]];
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.numberFormat = numberFormat;
        range.values = values;
        range.formulas= formulas;
        range.load('text');
        await context.sync();
        
        console.log(range.text);
    });
Excel.Range#insert:member(1):
  - |-
    await Excel.run(async (context) => {
        const sheetName = "Sheet1";
        const rangeAddress = "F5:F10";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.insert(Excel.InsertShiftDirection.down);
        await context.sync();
    });
Excel.Range#merge:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:C3";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.merge(true);
        await context.sync(); 
    });
Excel.Range#select:member(1):
  - |-
    await Excel.run(async (context) => {
        const sheetName = "Sheet1";
        const rangeAddress = "F5:F10"; 
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.select();
        await context.sync(); 
    });
Excel.Range#unmerge:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:C3";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.unmerge();
        await context.sync(); 
    });
Excel.Range#untrack:member(1):
  - |-
    await Excel.run(async (context) => {
        const largeRange = context.workbook.getSelectedRange();
        largeRange.load(["rowCount", "columnCount"]);
        await context.sync();

        for (let i = 0; i < largeRange.rowCount; i++) {
            for (let j = 0; j < largeRange.columnCount; j++) {
                const cell = largeRange.getCell(i, j);
                cell.values = [[i *j]];

                // Call untrack() to release the range from memory.
                cell.untrack();
            }
        }

        await context.sync();
    });
Excel.Range#load:member(2):
  - |-
    // Use the range address to get the range object.
    await Excel.run(async (context) => {
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8"; 
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        range.load('cellCount');
        await context.sync();
        
        console.log(range.cellCount);
    });
Excel.RangeBorder#style:member:
  - |-
    // Add grid borders around the range.
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
        range.format.borders.getItem('InsideHorizontal').style = 'Continuous';
        range.format.borders.getItem('InsideVertical').style = 'Continuous';
        range.format.borders.getItem('EdgeBottom').style = 'Continuous';
        range.format.borders.getItem('EdgeLeft').style = 'Continuous';
        range.format.borders.getItem('EdgeRight').style = 'Continuous';
        range.format.borders.getItem('EdgeTop').style = 'Continuous';
        await context.sync(); 
    });
Excel.RangeBorderCollection#getItem:member(1):
  - |-
    await Excel.run(async (context) => {
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        const border = range.format.borders.getItem(Excel.BorderIndex.edgeTop);
        border.load('style');
        await context.sync();

        console.log(border.style);
    });
Excel.RangeBorderCollection#getItemAt:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        const border = range.format.borders.getItemAt(0);
        border.load('sideIndex');
        await context.sync();
        
        console.log(border.sideIndex);
    });
Excel.RangeBorderCollection#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        const borders = range.format.borders;
        borders.load('items');
        await context.sync();
        
        console.log(borders.count);
        for (let i = 0; i < borders.items.length; i++) {
            console.log(borders.items[i].sideIndex);
        }
    });
Excel.RangeFill#clear:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "F:G";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        const rangeFill = range.format.fill;
        rangeFill.clear();
        await context.sync(); 
    });
Excel.RangeFill#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "F:G";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        const rangeFill = range.format.fill;
        rangeFill.load('color');
        await context.sync();
        console.log(rangeFill.color);
    });
Excel.RangeFont#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "F:G";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        const rangeFont = range.format.font;
        rangeFont.load('name');
        await context.sync();
        console.log(rangeFont.name);
    });
Excel.RangeFont#name:member:
  - |-
    // Change the font of the selected range to "Impact".
    await Excel.run(async (context) => {
      const selection = context.workbook.getSelectedRange();
      selection.format.font.name = "Impact";
      await context.sync();
    });
Excel.RangeFormat#load:member(2):
  - |-
    // Select all of the range's format properties.
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "F:G";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        range.load(["format/*", "format/fill", "format/borders", "format/font"]);
        await context.sync();
        
        console.log(range.format.wrapText);
        console.log(range.format.fill.color);
        console.log(range.format.font.name);
    });
Excel.RequestContext:class:
  - |-
    // *.run methods automatically create an OfficeExtension.ClientRequestContext
    // object to work with the Office file.
    await Excel.run(async (context: Excel.RequestContext) => {
      const workbook = context.workbook;
      // Interact with the Excel workbook...
    });
Excel.Table#convertToRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        table.convertToRange();
        await context.sync(); 
    });
Excel.Table#delete:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        table.delete();
        await context.sync(); 
    });
Excel.Table#getDataBodyRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        const tableDataRange = table.getDataBodyRange();
        tableDataRange.load('address')
        await context.sync();
        
        console.log(tableDataRange.address);
    });
Excel.Table#getHeaderRowRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        const tableHeaderRange = table.getHeaderRowRange();
        tableHeaderRange.load('address');
        await context.sync();

        console.log(tableHeaderRange.address);
    });
Excel.Table#getRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        const tableRange = table.getRange();
        tableRange.load('address');    
        await context.sync();
        
        console.log(tableRange.address);
    });
Excel.Table#getTotalRowRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        const tableTotalsRange = table.getTotalRowRange();
        tableTotalsRange.load('address');    
        await context.sync();
        
        console.log(tableTotalsRange.address);
    });
Excel.Table#load:member(2):
  - |-
    // Get a table by name.
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        table.load('id')
        await context.sync();
        
        console.log(table.id);
    });
Excel.Table#style:member:
  - |-
    // Set table style.
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        table.name = 'Table1-Renamed';
        table.showTotals = false;
        table.style = 'TableStyleMedium2';
        table.load('tableStyle');
        await context.sync();
        
        console.log(table.style);
    });
Excel.TableCollection#add:member(1):
  - |-
    await Excel.run(async (context) => { 
        const table = context.workbook.tables.add('Sheet1!A1:E7', true);
        table.load('name');
        await context.sync();
        
        console.log(table.name);
    });
Excel.TableCollection#getItem:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        table.load('name');
        await context.sync();
        
        console.log(table.name);
    });
Excel.TableCollection#getItemAt:member(1):
  - |-
    await Excel.run(async (context) => { 
        const table = context.workbook.tables.getItemAt(0);
        table.load('name');
        await context.sync();
        
        console.log(table.name);
    });
Excel.TableCollection#load:member(2):
  - |-
    // Get the number of tables.
    await Excel.run(async (context) => { 
        const tables = context.workbook.tables;
        tables.load('count');
        await context.sync();
        
        console.log(tables.count);
    });
Excel.TableColumn#delete:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const column = context.workbook.tables.getItem(tableName).columns.getItemAt(2);
        column.delete();
        await context.sync(); 
    });
Excel.TableColumn#getDataBodyRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const column = context.workbook.tables.getItem(tableName).columns.getItemAt(0);
        const dataBodyRange = column.getDataBodyRange();
        dataBodyRange.load('address');
        await context.sync();
        
        console.log(dataBodyRange.address);
    });
Excel.TableColumn#getHeaderRowRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const columns = context.workbook.tables.getItem(tableName).columns.getItemAt(0);
        const headerRowRange = columns.getHeaderRowRange();
        headerRowRange.load('address');
        await context.sync();
        
        console.log(headerRowRange.address);
    });
Excel.TableColumn#getRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const columns = context.workbook.tables.getItem(tableName).columns.getItemAt(0);
        const columnRange = columns.getRange();
        columnRange.load('address');
        await context.sync();
        
        console.log(columnRange.address);
    });
Excel.TableColumn#getTotalRowRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const columns = context.workbook.tables.getItem(tableName).columns.getItemAt(0);
        const totalRowRange = columns.getTotalRowRange();
        totalRowRange.load('address');
        await context.sync();
        
        console.log(totalRowRange.address);
    });
Excel.TableColumn#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const column = context.workbook.tables.getItem(tableName).columns.getItem(0);
        column.load('index');
        await context.sync();
        
        console.log(column.index);
    });
Excel.TableColumnCollection#add:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tables = context.workbook.tables;
        const values = [["Sample"], ["Values"], ["For"], ["New"], ["Column"]];
        const column = tables.getItem("Table1").columns.add(null, values);
        column.load('name');
        await context.sync();
        
        console.log(column.name);
    });
Excel.TableColumnCollection#getItem:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableColumn = context.workbook.tables.getItem('Table1').columns.getItem(0);
        tableColumn.load('name');
        await context.sync();
        console.log(tableColumn.name);
    });
Excel.TableColumnCollection#getItemAt:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableColumn = context.workbook.tables.getItem['Table1'].columns.getItemAt(0);
        tableColumn.load('name');
        await context.sync();
        console.log(tableColumn.name);
    });
Excel.TableColumnCollection#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const tableColumns = context.workbook.tables.getItem('Table1').columns;
        tableColumns.load('items');
        await context.sync();
        
        console.log("tableColumns Count: " + tableColumns.count);
        for (let i = 0; i < tableColumns.items.length; i++) {
            console.log(tableColumns.items[i].name);
        }
    });
Excel.TableRow#delete:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const row = context.workbook.tables.getItem(tableName).rows.getItemAt(2);
        row.delete();
        await context.sync(); 
    });
Excel.TableRow#getRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const row = context.workbook.tables.getItem(tableName).rows.getItemAt(0);
        const rowRange = row.getRange();
        rowRange.load('address');
        await context.sync();
        
        console.log(rowRange.address);
    });
Excel.TableRow#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const row = context.workbook.tables.getItem(tableName).rows.getItemAt(0);
        row.load('index');
        await context.sync();
        
        console.log(row.index);
    });
Excel.TableRowCollection#add:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tables = context.workbook.tables;
        const values = [["Sample", "Values", "For", "New", "Row"]];
        const row = tables.getItem("Table1").rows.add(null, values);
        row.load('index');
        await context.sync();
        
        console.log(row.index);
    });
Excel.TableRowCollection#getItemAt:member(1):
  - |-
    await Excel.run(async (context) => {
        const tablerow = context.workbook.tables.getItem('Table1').rows.getItemAt(0);
        tablerow.load('values');
        await context.sync();
        console.log(tablerow.values);
    });
Excel.TableRowCollection#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const tablerows = context.workbook.tables.getItem('Table1').rows;
        tablerows.load('items');
        await context.sync();
        
        console.log("tablerows Count: " + tablerows.count);
        for (let i = 0; i < tablerows.items.length; i++) {
            console.log(tablerows.items[i].index);
        }
    });
Excel.TableSort#apply:member(1):
  - |-
    await Excel.run(async (context) => { 
        const tableName = 'Table1';
        const table = context.workbook.tables.getItem(tableName);
        table.sort.apply([ 
                {
                    key: 2,
                    ascending: true
                },
            ], true);
        await context.sync(); 
    });
Excel.Workbook#getSelectedRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const selectedRange = context.workbook.getSelectedRange();
        selectedRange.load('address');
        await context.sync();
        console.log(selectedRange.address);
    });
Excel.Worksheet:class:
  - |-
    // Get a Worksheet object by its name and activate it.
    await Excel.run(async (context) => { 
        const wSheetName = 'Sheet1';
        const worksheet = context.workbook.worksheets.getItem(wSheetName);
        worksheet.activate();
        await context.sync(); 
    });
Excel.Worksheet#activate:member(1):
  - |-
    await Excel.run(async (context) => { 
        const wSheetName = 'Sheet1';
        const worksheet = context.workbook.worksheets.getItem(wSheetName);
        worksheet.activate();
        await context.sync(); 
    });
Excel.Worksheet#delete:member(1):
  - |-
    await Excel.run(async (context) => { 
        const wSheetName = 'Sheet1';
        const worksheet = context.workbook.worksheets.getItem(wSheetName);
        worksheet.delete();
        await context.sync(); 
    });
Excel.Worksheet#getCell:member(1):
  - |-
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const cell = worksheet.getCell(0,0);
        cell.load('address');
        await context.sync();

        console.log(cell.address);
    });
Excel.Worksheet#getRange:member(1):
  - |-
    // Use the range address to get the range object.
    await Excel.run(async (context) => { 
        const sheetName = "Sheet1";
        const rangeAddress = "A1:F8";
        const worksheet = context.workbook.worksheets.getItem(sheetName);
        const range = worksheet.getRange(rangeAddress);
        range.load('cellCount');
        await context.sync();
        
        console.log(range.cellCount);
    });
Excel.Worksheet#getUsedRange:member(1):
  - |-
    await Excel.run(async (context) => { 
        const wSheetName = 'Sheet1';
        const worksheet = context.workbook.worksheets.getItem(wSheetName);
        const usedRange = worksheet.getUsedRange();
        usedRange.load('address');
        await context.sync();
        
        console.log(usedRange.address);
    });
Excel.Worksheet#load:member(2):
  - |-
    // Get worksheet properties based on sheet name.
    await Excel.run(async (context) => { 
        const wSheetName = 'Sheet1';
        const worksheet = context.workbook.worksheets.getItem(wSheetName);
        worksheet.load('position')
        await context.sync();
        
        console.log(worksheet.position);
    });
Excel.Worksheet#onActivated:member:
  - |-
    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onActivated.add(function (event) {
            return Excel.run(async (context) => {
                console.log("The activated worksheet ID is: " + event.worksheetId);
                await context.sync();
            });
        });
        await context.sync();
    });
Excel.Worksheet#onCalculated:member:
  - |-
    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onCalculated.add(function (event) {
            return Excel.run(async (context) => {
                console.log("The worksheet has recalculated.");
                await context.sync();
            });
        });
        await context.sync();
    });
Excel.Worksheet#onDeactivated:member:
  - |-
    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onDeactivated.add(function (event) {
            return Excel.run(async (context) => {
                console.log("The deactivated worksheet is: " + event.worksheetId);
                await context.sync();
            });
        });
        await context.sync();
    });
Excel.Worksheet#onRowHiddenChanged:member:
  - |-
    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.onRowHiddenChanged.add(function (event) {
            return Excel.run(async (context) => {
                console.log(`Row ${event.address} is now ${event.changeType}`);
                await context.sync();
            });
        });
        await context.sync();
    });
Excel.Worksheet#onSelectionChanged:member:
  - |-
    await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("Sample");
        sheet.onSelectionChanged.add(function (event) {
            return Excel.run(async (context) => {
                console.log("The selected range has changed to: " + event.address);
                await context.sync();
            });
        });
        await context.sync();
    });
Excel.Worksheet#position:member:
  - |-
    // Set worksheet position.
    await Excel.run(async (context) => { 
        const wSheetName = 'Sheet1';
        const worksheet = context.workbook.worksheets.getItem(wSheetName);
        worksheet.position = 2;
        await context.sync(); 
    });
Excel.Worksheet#set:member(1):
  - |-
    // Set the color and name of the current worksheet.
    await Excel.run(async (context) => {
      const activeSheet = context.workbook.worksheets.getActiveWorksheet();
      activeSheet.set({
        tabColor: "yellow",
        name: "MySheet"
      });

      await context.sync();
    });
Excel.WorksheetChangedEventArgs#details:member:
  - |-
    // This function would be used as an event handler for the Worksheet.onChanged event.
    async function onWorksheetChanged(eventArgs) {
        await Excel.run(async (context) => {
            const details = eventArgs.details;
            const address = eventArgs.address;

            // Print the before and after types and values to the console.
            console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`
                + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
            await context.sync();
        });
    }
Excel.WorksheetCollection#add:member(1):
  - |-
    await Excel.run(async (context) => { 
        const wSheetName = 'Sample Name';
        const worksheet = context.workbook.worksheets.add(wSheetName);
        worksheet.load('name');
        await context.sync();
        
        console.log(worksheet.name);
    });
Excel.WorksheetCollection#getActiveWorksheet:member(1):
  - |-
    await Excel.run(async (context) => {  
        const activeWorksheet = context.workbook.worksheets.getActiveWorksheet();
        activeWorksheet.load('name');
        await context.sync();
        console.log(activeWorksheet.name);
    });
Excel.WorksheetCollection#load:member(2):
  - |-
    await Excel.run(async (context) => { 
        const worksheets = context.workbook.worksheets;
        worksheets.load('items');
        await context.sync();
        
        for (let i = 0; i < worksheets.items.length; i++) {
            console.log(worksheets.items[i].name);
        }
    });
Excel.Worksheet#protection:member:
  - |-
    // Unprotecting a worksheet with unprotect() will remove all 
    // WorksheetProtectionOptions options applied to a worksheet.
    // To remove only a subset of WorksheetProtectionOptions use the 
    // protect() method and set the options you wish to remove to true.
    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sheet1");
      sheet.protection.protect({
        allowInsertRows: false, // Protect row insertion
        allowDeleteRows: true // Unprotect row deletion
      });
    });
