Office.AppointmentCompose.addFileAttachmentAsync:
  - |-
    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }

    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        var attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }
Office.AppointmentCompose.addFileAttachmentFromBase64Async:
  - |-
    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "cute_bird.png",
        {
            isInline: true
        },
        function (asyncResult) {
            Office.context.mailbox.item.body.setAsync(
                "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                {
                    "coercionType": "html"
                },
                function (asyncResult) {
                });
        });
Office.AppointmentCompose.addItemAttachmentAsync:
  - |-
    // The following example adds an existing Outlook item as an attachment
    // with the name `My Attachment`.
    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }

    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        var itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }
Office.AppointmentCompose.body:
  - |-
    // This example gets the body of the item as plain text.
    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of an object that is passed as the result parameter to the callback function.
    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
Office.AppointmentCompose.end:
  - |-
    // The following example sets the end time of an appointment in compose mode by
    // using the `setAsync` method of the `Time` object.
    var endTime = new Date("3/14/2015");
    var options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };
    Office.context.mailbox.item.end.setAsync(endTime, options, function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync function.
            console.debug("End Time " + result.asyncContext.verb);
        }
    });
Office.AppointmentCompose.enhancedLocation:
  - |-
    var locations = [
        {
            "id": "Contoso",
            "type": Office.MailboxEnums.LocationType.Custom
        }
    ];
    Office.context.mailbox.item.enhancedLocation.addAsync(locations);

    Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

    function callbackFunction(asyncResult) {
        asyncResult.value.forEach(function (place) {
            console.log("Display name: " + place.displayName);
            console.log("Type: " + place.locationIdentifier.type);
            if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
                console.log("Email address: " + place.emailAddress);
            }
        });
    }
  - |-
    Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

    function callbackFunction(asyncResult) {
        asyncResult.value.forEach(function (currentValue) {
            Office.context.mailbox.item.enhancedLocation.removeAsync([currentValue.locationIdentifier]);
        });
    }
Office.AppointmentCompose.getAttachmentsAsync_1:
  - |-
    var item = Office.context.mailbox.item;
    var outputString = "";
    item.getAttachmentsAsync(callback);

    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                var attachment = result.value [i];
                outputString += "<BR>" + i + ". Name: ";
                outputString += attachment.name;
                outputString += "<BR>ID: " + attachment.id;
                outputString += "<BR>contentType: " + attachment.contentType;
                outputString += "<BR>size: " + attachment.size;
                outputString += "<BR>attachmentType: " + attachment.attachmentType;
                outputString += "<BR>isInline: " + attachment.isInline;
            }
        }
    }
Office.AppointmentCompose.getSelectedDataAsync:
  - |-
    // Get selected data.
    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };

    function getCallback(asyncResult) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;

        Office.context.mailbox.item.setSelectedDataAsync('Setting ' + prop + ': ' + text, {}, setCallback);
    }

    function setCallback(asyncResult) {
        // Check for errors.
    }
Office.AppointmentCompose.itemType:
  - |-
    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Appointment) {
        // Do something.
    } else {
        // Do something else.
    }
Office.AppointmentCompose.location:
  - |-
    var userContext = { value : 1 };
    Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var location = asyncResult.value;
    }
Office.AppointmentCompose.notificationMessages:
  - |-
    // Get all notifications.
    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );
Office.AppointmentCompose.optionalAttendees:
  - |-
    Office.context.mailbox.item.optionalAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
    Office.context.mailbox.item.optionalAttendees.addAsync( ['jason@contoso.com'] );
    Office.context.mailbox.item.optionalAttendees.getAsync(callback);

    function callback(asyncResult) {
        var arrayOfOptionalAttendeesRecipients = asyncResult.value;
    }
Office.AppointmentCompose.organizer:
  - |-
    Office.context.mailbox.item.organizer.getAsync(
        function(asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );
Office.AppointmentCompose.recurrence:
  - |-
    // This example gets the Recurrence object of an appointment item.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        if (!recurrence) {
            console.log("One-time appointment or meeting");
        } else {
            console.log(JSON.stringify(recurrence));
        }
    }

    // The following example shows the results of the getAsync call that retrieves the recurrence for a series.
    // NOTE: In this example, seriesTimeObject is a placeholder for the JSON representing the
    // recurrence.seriesTime property. You should use the SeriesTime object's methods to get the
    // recurrence date and time properties.
    Recurrence = {
        "recurrenceType": "weekly",
        "recurrenceProperties": {"interval": 2, "days": ["mon","thu","fri"], "firstDayOfWeek": "sun"},
        "seriesTime": {seriesTimeObject},
        "recurrenceTimeZone": {"name": "Pacific Standard Time", "offset": -480}
    }
Office.AppointmentCompose.removeAttachmentAsync:
  - |-
    // The following code removes an attachment with an identifier of '0'.
    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );
Office.AppointmentCompose.requiredAttendees:
  - |-
    Office.context.mailbox.item.requiredAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
    Office.context.mailbox.item.requiredAttendees.addAsync( ['jason@contoso.com'] );
    Office.context.mailbox.item.requiredAttendees.getAsync(callback);

    function callback(asyncResult) {
        var arrayOfRequiredAttendeesRecipients = asyncResult.value;
        console.log(JSON.stringify(arrayOfRequiredAttendeesRecipients));
    }
Office.AppointmentCompose.saveAsync_1:
  - |-
    Office.context.mailbox.item.saveAsync(
        function callback(result) {
            // Process the result.
        });

    // The following is an example of the
    // `result` parameter passed to the
    // callback function. The `value`
    // property contains the item ID of
    // the item.
    {
        "value": "AAMkADI5...AAA=",
        "status": "succeeded"
    }
Office.AppointmentCompose.seriesId:
  - |-
    var seriesId = Office.context.mailbox.item.seriesId;

    // The seriesId property returns null for items that do
    // not have parent items (such as single appointments,
    // series items, or meeting requests) and returns
    // undefined for messages that are not meeting requests.
    var isSeriesInstance = (seriesId != null);
    console.log("SeriesId is " + seriesId 
        + " and isSeriesInstance is " + isSeriesInstance);
Office.AppointmentCompose.setSelectedDataAsync:
  - |-
    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });
Office.AppointmentCompose.setSelectedDataAsync_1:
  - |-
    Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
Office.AppointmentCompose.start:
  - |-
    // The following example sets the start time of an appointment in compose mode by
    // using the `setAsync` method of the `Time` object.
    var startTime = new Date("3/14/2015");
    var options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };
    Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync function.
            console.debug("Start Time " + result.asyncContext.verb);
        }
    });
Office.AppointmentCompose.subject:
  - |-
    Office.context.mailbox.item.subject.getAsync(callback);

    function callback(asyncResult) {
        var subject = asyncResult.value;
    }
Office.AppointmentRead.attachments:
  - |-
    // The following code builds an HTML string with details of all attachments on the current item.
    var item = Office.context.mailbox.item;
    var outputString = "";

    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }

    console.log(outputString);
Office.AppointmentRead.body:
  - |-
    // This example gets the body of the item as plain text.
    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.
    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
Office.AppointmentRead.dateTimeCreated:
  - |-
    var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;
    console.log("Date and time created: " + dateTimeCreated);
Office.AppointmentRead.dateTimeModified:
  - |-
    var dateTimeModified = Office.context.mailbox.item.dateTimeModified;
    console.log("Date and time modified: " + dateTimeModified);
Office.AppointmentRead.displayReplyAllForm:
  - |-
    // The following code passes a string to the `displayReplyAllForm` function.
    Office.context.mailbox.item.displayReplyAllForm('hello there');
    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

    // Reply with an empty body.
    Office.context.mailbox.item.displayReplyAllForm({});

    // Reply with just a body.
    Office.context.mailbox.item.displayReplyAllForm(
    {
    'htmlBody' : 'hi'
    });

    // Reply with a body and a file attachment.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });

    // Reply with a body and an item attachment.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });

    // Reply with a body, file attachment, item attachment, and a callback.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });
Office.AppointmentRead.displayReplyForm:
  - |-
    // The following code passes a string to the `displayReplyForm` function.
    Office.context.mailbox.item.displayReplyForm('hello there');
    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

    // Reply with an empty body.
    Office.context.mailbox.item.displayReplyForm({});

    // Reply with just a body.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi'
    });

    // Reply with a body and a file attachment.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });

    // Reply with a body and an item attachment.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });

    // Reply with a body, file attachment, item attachment, and a callback.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });
Office.AppointmentRead.end:
  - |-
    var end = Office.context.mailbox.item.end;
    console.log("Appointment end: " + end);
Office.AppointmentRead.enhancedLocation:
  - |-
    Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

    function callbackFunction(asyncResult) {
        asyncResult.value.forEach(function (place) {
            console.log("Display name: " + place.displayName);
            console.log("Type: " + place.locationIdentifier.type);
            if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
                console.log("Email address: " + place.emailAddress);
            }
        });
    }
Office.AppointmentRead.getEntities:
  - |-
    // The following example accesses the contacts entities in the current item's body.

    var contacts = Office.context.mailbox.item.getEntities().contacts;
Office.AppointmentRead.getEntitiesByType:
  - |-
    // The following example shows how to access an array of strings that represent
    // postal addresses in the current item's body.

    // The initialize function is required for all apps.
    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            // Get an array of strings that represent postal addresses in the current item's body.
            var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
            // Continue processing the array of addresses.
        });
    };
Office.AppointmentRead.getRegExMatches:
  - |-
    // Consider an add-in manifest has the following `Rule` element:
    //<Rule xsi:type="RuleCollection" Mode="And">
    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
    //  <Rule xsi:type="RuleCollection" Mode="Or">
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //  </Rule>
    //</Rule>

    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
    //{
    //'fruits': ['apple','banana','Banana','coconut'],
    //'veggies': ['tomato','onion','spinach','broccoli']
    //}

    // The following example shows how to access the array of
    // matches for the regular expression rule elements `fruits`
    // and `veggies`, which are specified in the manifest.
    var allMatches = Office.context.mailbox.item.getRegExMatches();
    var fruits = allMatches.fruits;
    var veggies = allMatches.veggies;
Office.AppointmentRead.getRegExMatchesByName:
  - |-
    // Consider an add-in manifest has the following `Rule` element:
    //<Rule xsi:type="RuleCollection" Mode="And">
    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
    //  <Rule xsi:type="RuleCollection" Mode="Or">
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //  </Rule>
    //</Rule>

    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
    //{
    //'fruits': ['apple','banana','Banana','coconut'],
    //'veggies': ['tomato','onion','spinach','broccoli']
    //}

    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");
    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");
Office.AppointmentRead.getSelectedEntities:
  - |-
    // The following example accesses the addresses entities in the highlighted
    // match selected by the user.
    var addresses = Office.context.mailbox.item.getSelectedEntities().addresses;
Office.AppointmentRead.getSelectedRegExMatches:
  - |-
    // The following example shows how to access the array of matches for the
    // regular expression rule elements `fruits` and `veggies`, which are
    // specified in the manifest.
    var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();
    var fruits = selectedMatches.fruits;
    var veggies = selectedMatches.veggies;
Office.AppointmentRead.itemClass:
  - |-
    var itemClass = Office.context.mailbox.item.itemClass;
    console.log("Item class: " + itemClass);
Office.AppointmentRead.itemId:
  - |-
    // The following code checks for the presence of an item
    // identifier. If the `itemId` property returns `null` or
    // `undefined`, it saves the item to the store and gets the
    // item identifier from the asynchronous result.
    var itemId = Office.context.mailbox.item.itemId;
    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }
Office.AppointmentRead.itemType:
  - |-
    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Appointment) {
        // Do something.
    } else {
        // Do something else.
    }
Office.AppointmentRead.location:
  - |-
    var location = Office.context.mailbox.item.location;
    console.log("location: " + location);
Office.AppointmentRead.normalizedSubject:
  - |-
    var normalizedSubject = Office.context.mailbox.item.normalizedSubject;
    console.log("Normalized subject: " + normalizedSubject);
Office.AppointmentRead.notificationMessages:
  - |-
    // Get all notifications.
    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );
Office.AppointmentRead.optionalAttendees:
  - |-
    var optionalAttendees = Office.context.mailbox.item.optionalAttendees;
    console.log("Optional attendees: " + JSON.stringify(optionalAttendees));
Office.AppointmentRead.organizer:
  - |-
    var organizerName = Office.context.mailbox.item.organizer.displayName;
    var organizerAddress = Office.context.mailbox.item.organizer.emailAddress;
    console.log("Organizer: " + organizerName + " (" + organizerAddress + ")");
Office.AppointmentRead.recurrence:
  - |-
    var recurrence = Office.context.mailbox.item.recurrence;
    console.log("Recurrence: " + JSON.stringify(recurrence));
Office.AppointmentRead.requiredAttendees:
  - |-
    var requiredAttendees = Office.context.mailbox.item.requiredAttendees;
    console.log("Required attendees: " + JSON.stringify(requiredAttendees));
Office.AppointmentRead.seriesId:
  - |-
    var seriesId = Office.context.mailbox.item.seriesId;

    // The seriesId property returns null for items that do
    // not have parent items (such as single appointments,
    // series items, or meeting requests) and returns
    // undefined for messages that are not meeting requests.
    var isSeriesInstance = (seriesId != null);
    console.log("SeriesId is " + seriesId 
        + " and isSeriesInstance is " + isSeriesInstance);
Office.AppointmentRead.start:
  - |-
    var start = Office.context.mailbox.item.start;
    console.log("Appointment start: " + JSON.stringify(start));
Office.AppointmentRead.subject:
  - |-
    // The following JavaScript code example shows how to access the
    // `subject` property of the current item in Outlook.

    // The initialize function is required for all apps.
    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            var subject = item.subject;
            // Continue with processing the subject of the
            // current item, which can be a message or appointment.
        });
    };
Office.AttachmentContent.format:
  - |-
    var item = Office.context.mailbox.item;
    var listOfAttachments = [];
    item.getAttachmentsAsync(callback);

    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                var options = {asyncContext: {type: result.value[i].attachmentType}};
                getAttachmentContentAsync(result.value[i].id, options, handleAttachmentsCallback);
            }
        }
    }

    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        if (result.format === Office.MailboxEnums.AttachmentContentFormat.Base64) {
            // Handle file attachment.
        } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.Eml) {
            // Handle email item attachment.
        } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.ICalendar) {
            // Handle .icalender attachment.
        } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.Url) {
            // Handle cloud attachment.
        } else {
            // Handle attachment formats that are not supported.
        }
    }
Office.AttachmentDetails:
  - |-
    // The following code builds an HTML string with details
    // of all attachments on the current item.
    var item = Office.context.mailbox.item;
    var outputString = "";

    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }

    console.log(outputString);
Office.Body.getAsync:
  - |-
    // This example gets the body of the item as plain text.
    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.
    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
Office.Body.getTypeAsync_1:
  - |-
    Office.context.mailbox.item.body.getTypeAsync(function (asyncResult) {
        if (asyncResult.status === "failed") {
            console.log("Action failed with error: " + asyncResult.error.message);
        } else {
            console.log("Body type: " + asyncResult.value);
        }
    });
Office.Body.prependAsync:
  - |-
    // When including links in HTML markup, you can disable online link preview
    // by setting the id attribute on the anchor (<a>) to "LPNoLP".
    Office.context.mailbox.item.body.prependAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
Office.Body.setAsync:
  - |-
    // When including links in HTML markup, you can disable online link preview
    // by setting the id attribute on the anchor (<a>) to "LPNoLP".
    Office.context.mailbox.item.body.setAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
    Office.context.mailbox.item.body.setAsync(
        "<b>(replaces all body, including threads you are replying to that may be on the bottom)</b>",
        { coercionType: "html", asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Process the result.
    });

    // The following is an example of the result parameter passed to the callback function.
    {
        "value":null,
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
Office.Body.setSelectedDataAsync:
  - |-
    // When including links in HTML markup, you can disable online link preview
    // by setting the id attribute on the anchor (<a>) to "LPNoLP".
    Office.context.mailbox.item.body.setSelectedDataAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
Office.Contact:
  - |-
    var item = Office.context.mailbox.item;
    // Get an array of strings that represent contacts in the current item's body.
    var contacts = item.getEntitiesByType(Office.MailboxEnums.EntityType.Contact);
    console.log("There are " + contacts.length + " contacts.")
    contacts.forEach(function (contact) {
        console.log("Person name: " + JSON.stringify(contact.personName));
        console.log("Business name: " + JSON.stringify(contact.businessName));
        console.log("Addresses: " + JSON.stringify(contact.addresses));
        console.log("Phone numbers: " + JSON.stringify(contact.phoneNumbers));
        console.log("Email addresses: " + JSON.stringify(contact.emailAddresses));
        console.log("Urls: " + JSON.stringify(contact.urls));
    });
Office.CustomProperties.saveAsync:
  - |-
    // The following JavaScript code sample shows how to asynchronously use
    // the loadCustomPropertiesAsync method to load custom properties that
    // are specific to the current item, and the saveAsync method to save
    // these properties back to the server. After loading the custom properties,
    // the code sample uses the get method to read the custom property myProp,
    // the set method to write the custom property otherProp, and then finally
    // calls the saveAsync method to save the custom properties.

    // The initialize function is required for all add-ins.
    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            var item = Office.context.mailbox.item;
            item.loadCustomPropertiesAsync(customPropsCallback);
        });
    };

    function customPropsCallback(asyncResult) {
        var customProps = asyncResult.value;
        var myProp = customProps.get("myProp");

        customProps.set("otherProp", "value");
        customProps.saveAsync(saveCallback);
    }

    function saveCallback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
            write(asyncResult.error.message);
        }
        else {
            // Async call to save custom properties completed.
            // Proceed to do the appropriate for your add-in.
        }
    }

    // Writes to a div with id='message' on the page.
    function write(message) {
        document.getElementById('message').innerText += message;
    }
Office.EmailAddressDetails.appointmentResponse:
  - |-
    // The following sample provides the responses from required attendees.
    // Note that this sample needs the add-in to be in Appointment Read (Attendee) mode.
    var requiredAttendees = Office.context.mailbox.item.requiredAttendees;
    console.log("There are " + requiredAttendees.length + " required attendees.")
    requiredAttendees.forEach(function (requiredAttendee) {
        console.log("Attendee " + requiredAttendee.displayName + ": " + requiredAttendee.appointmentResponse);
    });
Office.EmailAddressDetails.displayName:
  - |-
    var organizerName = Office.context.mailbox.item.organizer.displayName;
    console.log("Organizer: " + organizerName);
Office.EmailAddressDetails.emailAddress:
  - |-
    var organizerAddress = Office.context.mailbox.item.organizer.emailAddress;
    console.log("Organizer's email address: " + organizerAddress);
Office.EmailAddressDetails.recipientType:
  - |-
    var requiredAttendees = Office.context.mailbox.item.requiredAttendees;
    console.log("There are " + requiredAttendees.length + " required attendees.")
    requiredAttendees.forEach(function (requiredAttendee) {
        console.log("Attendee " + requiredAttendee.displayName + ": " + requiredAttendee.recipientType);
    });
Office.EnhancedLocation.addAsync_1:
  - |-
    var locations = [
        {
            "id": "Contoso",
            "type": Office.MailboxEnums.LocationType.Custom
        }
    ];
    Office.context.mailbox.item.enhancedLocation.addAsync(locations);
Office.EnhancedLocation.getAsync_1:
  - |-
    Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

    function callbackFunction(asyncResult) {
        asyncResult.value.forEach(function (place) {
            console.log("Display name: " + place.displayName);
            console.log("Type: " + place.locationIdentifier.type);
            if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
                console.log("Email address: " + place.emailAddress);
            }
        });
    }
Office.EnhancedLocation.removeAsync_1:
  - |-
    Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

    function callbackFunction(asyncResult) {
        asyncResult.value.forEach(function (currentValue) {
            Office.context.mailbox.item.enhancedLocation.removeAsync([currentValue.locationIdentifier]);
        });
    }
Office.Entities.addresses:
  - |-
    var item = Office.context.mailbox.item;
    var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
Office.Entities.contacts:
  - |-
    var item = Office.context.mailbox.item;
    var contacts = item.getEntitiesByType(Office.MailboxEnums.EntityType.Contact);
Office.Entities.emailAddresses:
  - |-
    var item = Office.context.mailbox.item;
    var emailAddresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.EmailAddress);
Office.Entities.meetingSuggestions:
  - |-
    var item = Office.context.mailbox.item;
    var meetingSuggestions = item.getEntitiesByType(Office.MailboxEnums.EntityType.MeetingSuggestion);
Office.Entities.phoneNumbers:
  - |-
    var item = Office.context.mailbox.item;
    var phoneNumbers = item.getEntitiesByType(Office.MailboxEnums.EntityType.PhoneNumber);
Office.Entities.taskSuggestions:
  - |-
    var item = Office.context.mailbox.item;
    var taskSuggestions = item.getEntitiesByType(Office.MailboxEnums.EntityType.TaskSuggestion);
Office.Entities.urls:
  - |-
    var item = Office.context.mailbox.item;
    var urls = item.getEntitiesByType(Office.MailboxEnums.EntityType.Url);
Office.From.getAsync_1:
  - |-
    Office.context.mailbox.item.from.getAsync(callback);

    function callback(asyncResult) {
        var from = asyncResult.value;
        console.log("From " + from);
    }
Office.InternetHeaders.getAsync_1:
  - |-
    Office.context.mailbox.item.internetHeaders.getAsync(["header1", "header2"], callback);

    function callback(asyncResult) {
        var dictionary = asyncResult.value;
        var header1_value = dictionary["header1"];
    }
Office.InternetHeaders.removeAsync_1:
  - |-
    Office.context.mailbox.item.internetHeaders.removeAsync(["header1", "header2"]);
Office.InternetHeaders.setAsync_1:
  - |-
    Office.context.mailbox.item.internetHeaders.setAsync({"header1": "value1", "header2": "value2"});
Office.Item.addHandlerAsync_1:
  - |-
    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            var attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }

    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
Office.Item.body:
  - |-
    // This example gets the body of the item as plain text.
    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.
    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
Office.Item.getAttachmentContentAsync:
  - |-
    var item = Office.context.mailbox.item;
    var listOfAttachments = [];
    item.getAttachmentsAsync(callback);

    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                var options = {asyncContext: {type: result.value[i].attachmentType}};
                getAttachmentContentAsync(result.value[i].id, options, handleAttachmentsCallback);
            }
        }
    }

    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        if (result.format === Office.MailboxEnums.AttachmentContentFormat.Base64) {
            // Handle file attachment.
        } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.Eml) {
            // Handle email item attachment.
        } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.ICalendar) {
            // Handle .icalender attachment.
        } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.Url) {
            // Handle cloud attachment.
        } else {
            // Handle attachment formats that are not supported.
        }
    }
Office.Item.getInitializationContextAsync_1:
  - |-
    // Get the initialization context (if present).
    Office.context.mailbox.item.getInitializationContextAsync(
        function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                if (asyncResult.value != null && asyncResult.value.length > 0) {
                    // The value is a string, parse to an object.
                    var context = JSON.parse(asyncResult.value);
                    // Do something with context.
                } else {
                    // Empty context, treat as no context.
                }
            } else {
                if (asyncResult.error.code == 9020) {
                    // GenericResponseError returned when there is no context.
                    // Treat as no context.
                } else {
                    // Handle the error.
                }
            }
        }
    );
Office.Item.getSharedPropertiesAsync_1:
  - |-
    Office.context.mailbox.item.getSharedPropertiesAsync(callback);

    function callback (asyncResult) {
        var context = asyncResult.context;
        var sharedProperties = asyncResult.value;
    }
Office.Item.itemType:
  - |-
    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // Do something.
    } else {
        // Do something else.
    }
Office.Item.loadCustomPropertiesAsync:
  - |-
    // The following example shows how to use the loadCustomPropertiesAsync method
    // to asynchronously load custom properties that are specific to the current item.
    // The example also shows how to use the saveAsync method to save these properties
    // back to the server. After loading the custom properties, the example uses the
    // get method to read the custom property myProp, the set method to write the
    // custom property otherProp, and then finally calls the saveAsync method to save
    // the custom properties.
    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            var mailbox = Office.context.mailbox;
            mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
        });
    };

    function customPropsCallback(asyncResult) {
        var customProps = asyncResult.value;
        var myProp = customProps.get("myProp");

        customProps.set("otherProp", "value");
        customProps.saveAsync(saveCallback);
    }

    function saveCallback(asyncResult) {
    }
Office.Item.notificationMessages:
  - |-
    // Get all notifications.
    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );
Office.Item.seriesId:
  - |-
    var seriesId = Office.context.mailbox.item.seriesId;

    // The seriesId property returns null for items that do
    // not have parent items (such as single appointments,
    // series items, or meeting requests) and returns
    // undefined for messages that are not meeting requests.
    var isSeriesInstance = (seriesId != null);
    console.log("SeriesId is " + seriesId 
        + " and isSeriesInstance is " + isSeriesInstance);
Office.Location.getAsync:
  - |-
    var userContext = { value : 1 };
    Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var location = asyncResult.value;
    }
Office.Location.setAsync_1:
  - |-
    Office.context.mailbox.item.location.setAsync(
        "Room 1",
        function (asyncResult) {
            if (asyncResult.status === "failed") {
                console.log("Action failed with error: " + asyncResult.error.message);
            }
        }
    );
Office.LocationDetails:
  - |-
    Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

    function callbackFunction(asyncResult) {
        asyncResult.value.forEach(function (place) {
            console.log("Display name: " + place.displayName);
            console.log("Type: " + place.locationIdentifier.type);
            if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
                console.log("Email address: " + place.emailAddress);
            }
        });
    }
Office.LocationIdentifier:
  - |-
    var locations = [
        {
            "id": "Contoso",
            "type": Office.MailboxEnums.LocationType.Custom
        }
    ];
Office.Mailbox.addHandlerAsync_1:
  - |-
    Office.initialize = function (reason) {
        $(document).ready(function () {
            Office.context.mailbox.addHandlerAsync(Office.EventType.ItemChanged, loadNewItem, function (result) {
            if (result.status === Office.AsyncResultStatus.Failed) {
                    // Handle error.
                }
            });
        });
    };

    function loadNewItem(eventArgs) {
        // Load the properties of the newly selected item.
        loadProps(Office.context.mailbox.item);
    }
Office.Mailbox.convertToEwsId:
  - |-
    // Get an item's ID from a REST API.
    var restId = 'AAMkAGVlOTZjNTM3LW...';

    // Treat restId as coming from the v2.0 version of the Outlook Mail API.
    var ewsId = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
Office.Mailbox.convertToRestId:
  - |-
    // Get the currently selected item's ID.
    var ewsId = Office.context.mailbox.item.itemId;

    // Convert to a REST ID for the v2.0 version of the Outlook Mail API.
    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
Office.Mailbox.displayAppointmentForm:
  - |-
    Office.context.mailbox.displayAppointmentForm(appointmentId);
Office.Mailbox.displayMessageForm:
  - |-
    Office.context.mailbox.displayMessageForm(messageId);
Office.Mailbox.displayNewAppointmentForm:
  - |-
    var start = new Date();
    var end = new Date();
    end.setHours(start.getHours() + 1);

    Office.context.mailbox.displayNewAppointmentForm(
    {
        requiredAttendees: ['bob@contoso.com'],
        optionalAttendees: ['sam@contoso.com'],
        start: start,
        end: end,
        location: 'Home',
        resources: ['projector@contoso.com'],
        subject: 'meeting',
        body: 'Hello World!'
    });
Office.Mailbox.displayNewMessageForm:
  - |-
    Office.context.mailbox.displayNewMessageForm(
    {
        // Copy the To line from current item.
        toRecipients: Office.context.mailbox.item.to,
        ccRecipients: ['sam@contoso.com'],
        subject: 'Outlook add-ins are cool!',
        htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
        attachments: [
        {
            type: 'file',
            name: 'image.png',
            url: 'http://contoso.com/image.png',
            isInline: true
        }
        ]
    });
Office.Mailbox.getCallbackTokenAsync:
  - |-
    function getCallbackToken() {
        var options = {
            isRest: true,
            asyncContext: { message: 'Hello World!' }
        };

        Office.context.mailbox.getCallbackTokenAsync(options, cb);
    }

    function cb(asyncResult) {
        var token = asyncResult.value;
    }
Office.Mailbox.getCallbackTokenAsync_1:
  - |-
    function getCallbackToken() {
        Office.context.mailbox.getCallbackTokenAsync(cb);
    }

    function cb(asyncResult) {
        var token = asyncResult.value;
    }
Office.Mailbox.getUserIdentityTokenAsync:
  - |-
    function getIdentityToken() {
        Office.context.mailbox.getUserIdentityTokenAsync(cb);
    }

    function cb(asyncResult) {
        var token = asyncResult.value;
    }
Office.Mailbox.makeEwsRequestAsync:
  - |-
    function getSubjectRequest(id) {
        // Return a GetItem operation request for the subject of the specified item.
        var request =
            '<?xml version="1.0" encoding="utf-8"?>' +
            '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
            '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
            '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
            '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
            '  <soap:Header>' +
            '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
            '  </soap:Header>' +
            '  <soap:Body>' +
            '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
            '      <ItemShape>' +
            '        <t:BaseShape>IdOnly</t:BaseShape>' +
            '        <t:AdditionalProperties>' +
            '            <t:FieldURI FieldURI="item:Subject"/>' +
            '        </t:AdditionalProperties>' +
            '      </ItemShape>' +
            '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
            '    </GetItem>' +
            '  </soap:Body>' +
            '</soap:Envelope>';

        return request;
    }

    function sendRequest() {
        // Create a local variable that contains the mailbox.
        Office.context.mailbox.makeEwsRequestAsync(
            getSubjectRequest(mailbox.item.itemId), callback);
    }

    function callback(asyncResult)  {
        var result = asyncResult.value;
        var context = asyncResult.asyncContext;

        // Process the returned response here.
    }
Office.MeetingSuggestion:
  - |-
    var item = Office.context.mailbox.item;
    // Get an array of strings that represent meeting suggestions in the current item's body.
    var meetingSuggestions = item.getEntitiesByType(Office.MailboxEnums.EntityType.MeetingSuggestion);
    console.log("There are " + meetingSuggestions.length + " meeting suggestions.")
    meetingSuggestions.forEach(function (meetingSuggestion) {
        console.log("Subject: " + JSON.stringify(meetingSuggestion.subject));
        console.log("Attendees: " + JSON.stringify(meetingSuggestion.attendees));
        console.log("Location: " + JSON.stringify(meetingSuggestion.location));
        console.log("Start: " + JSON.stringify(meetingSuggestion.start));
        console.log("End: " + JSON.stringify(meetingSuggestion.end));
        console.log("Meeting: " + JSON.stringify(meetingSuggestion.meetingString));
    });
Office.MessageCompose.addFileAttachmentAsync:
  - |-
    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }

    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        var attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }
  - |-
    // The following example adds an image file as an inline attachment and
    // references the attachment in the message body.
    Office.context.mailbox.item.addFileAttachmentAsync(
        "http://i.imgur.com/WJXklif.png",
        "cute_bird.png",
        {
            isInline: true
        },
        function (asyncResult) {
            Office.context.mailbox.item.body.setAsync(
                "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                {
                    "coercionType": "html"
                },
                function (asyncResult) {
                    // Do something here.
                });
        });
Office.MessageCompose.addFileAttachmentFromBase64Async:
  - |-
    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "cute_bird.png",
        {
            isInline: true
        },
        function (asyncResult) {
            Office.context.mailbox.item.body.setAsync(
                "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                {
                    "coercionType": "html"
                },
                function (asyncResult) {
                    // Do something here.
                });
        });
Office.MessageCompose.addItemAttachmentAsync:
  - |-
    // The following example adds an existing Outlook item as an attachment
    // with the name `My Attachment`.
    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }

    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        var itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }
Office.MessageCompose.bcc:
  - |-
    Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
    Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );
    Office.context.mailbox.item.bcc.getAsync(callback);

    function callback(asyncResult) {
        var arrayOfBccRecipients = asyncResult.value;
    }
Office.MessageCompose.body:
  - |-
    // This example gets the body of the item as plain text.
    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.
    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
Office.MessageCompose.cc:
  - |-
    Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
    Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );
    Office.context.mailbox.item.cc.getAsync(callback);

    function callback(asyncResult) {
        var arrayOfCcRecipients = asyncResult.value;
    }
Office.MessageCompose.conversationId:
  - |-
    var conversationId = Office.context.mailbox.item.conversationId;
    console.log("conversationId: " + conversationId);
Office.MessageCompose.from:
  - |-
    Office.context.mailbox.item.from.getAsync(callback);

    function callback(asyncResult) {
        var from = asyncResult.value;
    }
Office.MessageCompose.getAttachmentsAsync_1:
  - |-
    var item = Office.context.mailbox.item;
    var outputString = "";
    item.getAttachmentsAsync(callback);

    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                var attachment = result.value [i];
                outputString += "<BR>" + i + ". Name: ";
                outputString += attachment.name;
                outputString += "<BR>ID: " + attachment.id;
                outputString += "<BR>contentType: " + attachment.contentType;
                outputString += "<BR>size: " + attachment.size;
                outputString += "<BR>attachmentType: " + attachment.attachmentType;
                outputString += "<BR>isInline: " + attachment.isInline;
            }
        }
    }
Office.MessageCompose.getSelectedDataAsync:
  - |-
    // Get selected data.
    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };

    function getCallback(asyncResult) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;

        Office.context.mailbox.item.setSelectedDataAsync('Setting ' + prop + ': ' + text, {}, setCallback);
    }

    function setCallback(asyncResult) {
        // Check for errors.
    }
Office.MessageCompose.internetHeaders:
  - |-
    Office.context.mailbox.item.internetHeaders.getAsync(["header1", "header2"], callback);

    function callback(asyncResult) {
        var dictionary = asyncResult.value;
        var header1_value = dictionary["header1"];
    }
Office.MessageCompose.itemType:
  - |-
    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // Do something.
    } else {
        // Do something else.
    }
Office.MessageCompose.notificationMessages:
  - |-
    // Get all notifications.
    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );
Office.MessageCompose.removeAttachmentAsync:
  - |-
    // The following code removes an attachment with an identifier of '0'.
    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );
Office.MessageCompose.saveAsync_1:
  - |-
    Office.context.mailbox.item.saveAsync(
        function callback(result) {
            // Process the result.
        });

    // The following is an example of the
    // `result` parameter passed to the
    // callback function. The `value`
    // property contains the item ID of
    // the item.
    {
        "value": "AAMkADI5...AAA=",
        "status": "succeeded"
    }
Office.MessageCompose.seriesId:
  - |-
    var seriesId = Office.context.mailbox.item.seriesId;

    // The seriesId property returns null for items that do
    // not have parent items (such as single appointments,
    // series items, or meeting requests) and returns
    // undefined for messages that are not meeting requests.
    var isSeriesInstance = (seriesId != null);
    console.log("SeriesId is " + seriesId 
        + " and isSeriesInstance is " + isSeriesInstance);
Office.MessageCompose.setSelectedDataAsync:
  - |-
    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });
Office.MessageCompose.setSelectedDataAsync_1:
  - |-
    Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
Office.MessageCompose.subject:
  - |-
    Office.context.mailbox.item.subject.getAsync(callback);

    function callback(asyncResult) {
        var subject = asyncResult.value;
    }
Office.MessageCompose.to:
  - |-
    Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
    Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );
    Office.context.mailbox.item.to.getAsync(callback);

    function callback(asyncResult) {
        var arrayOfToRecipients = asyncResult.value;
    }
Office.MessageRead.attachments:
  - |-
    // The following code builds an HTML string with details of all attachments on the current item.
    var item = Office.context.mailbox.item;
    var outputString = "";

    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }

    console.log(outputString);
Office.MessageRead.body:
  - |-
    // This example gets the body of the item as plain text.
    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.
    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }
Office.MessageRead.cc:
  - |-
    console.log(JSON.stringify(Office.context.mailbox.item.cc));
Office.MessageRead.conversationId:
  - |-
    var conversationId = Office.context.mailbox.item.conversationId;
    console.log("conversationId: " + conversationId);
Office.MessageRead.dateTimeCreated:
  - |-
    var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;
    console.log("Date and time created: " + dateTimeCreated);
Office.MessageRead.dateTimeModified:
  - |-
    var dateTimeModified = Office.context.mailbox.item.dateTimeModified;
    console.log("Date and time modified: " + dateTimeModified);
Office.MessageRead.displayReplyAllForm:
  - |-
    // The following code passes a string to the `displayReplyAllForm` function.
    Office.context.mailbox.item.displayReplyAllForm('hello there');
    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

    // Reply with an empty body.
    Office.context.mailbox.item.displayReplyAllForm({});

    // Reply with just a body.
    Office.context.mailbox.item.displayReplyAllForm(
    {
    'htmlBody' : 'hi'
    });

    // Reply with a body and a file attachment.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });

    // Reply with a body and an item attachment.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });

    // Reply with a body, file attachment, item attachment, and a callback.
    Office.context.mailbox.item.displayReplyAllForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });
Office.MessageRead.displayReplyForm:
  - |-
    // The following code passes a string to the `displayReplyForm` function.
    Office.context.mailbox.item.displayReplyForm('hello there');
    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

    // Reply with an empty body.
    Office.context.mailbox.item.displayReplyForm({});

    // Reply with just a body.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi'
    });

    // Reply with a body and a file attachment.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });

    // Reply with a body and an item attachment.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });

    // Reply with a body, file attachment, item attachment, and a callback.
    Office.context.mailbox.item.displayReplyForm(
    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });
Office.MessageRead.from:
  - |-
    var from = Office.context.mailbox.item.from;
    console.log("From " + from);
Office.MessageRead.getEntities:
  - |-
    // The following example accesses the contacts entities in the current item's body.

    var contacts = Office.context.mailbox.item.getEntities().contacts;
Office.MessageRead.getEntitiesByType:
  - |-
    // The following example shows how to access an array of strings that represent postal addresses
    // in the current item's body.

    // The initialize function is required for all apps.
    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            // Get an array of strings that represent postal addresses in the current item's body.
            var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
            // Continue processing the array of addresses.
        });
    };
Office.MessageRead.getRegExMatches:
  - |-
    // Consider an add-in manifest has the following `Rule` element:
    //<Rule xsi:type="RuleCollection" Mode="And">
    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
    //  <Rule xsi:type="RuleCollection" Mode="Or">
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //  </Rule>
    //</Rule>

    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
    //{
    //'fruits': ['apple','banana','Banana','coconut'],
    //'veggies': ['tomato','onion','spinach','broccoli']
    //}

    // The following example shows how to access the array of
    // matches for the regular expression rule elements `fruits`
    // and `veggies`, which are specified in the manifest.
    var allMatches = Office.context.mailbox.item.getRegExMatches();
    var fruits = allMatches.fruits;
    var veggies = allMatches.veggies;
Office.MessageRead.getRegExMatchesByName:
  - |-
    // Consider an add-in manifest has the following `Rule` element:
    //<Rule xsi:type="RuleCollection" Mode="And">
    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
    //  <Rule xsi:type="RuleCollection" Mode="Or">
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //  </Rule>
    //</Rule>

    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
    //{
    //'fruits': ['apple','banana','Banana','coconut'],
    //'veggies': ['tomato','onion','spinach','broccoli']
    //}

    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");
    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");
Office.MessageRead.getSelectedEntities:
  - |-
    // The following example accesses the addresses entities in the highlighted
    // match selected by the user.
    var addresses = Office.context.mailbox.item.getSelectedEntities().addresses;
Office.MessageRead.getSelectedRegExMatches:
  - |-
    // Consider an add-in manifest has the following `Rule` element:
    //<Rule xsi:type="RuleCollection" Mode="And">
    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
    //  <Rule xsi:type="RuleCollection" Mode="Or">
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
    //  </Rule>
    //</Rule>

    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
    //{
    //'fruits': ['apple','banana','Banana','coconut'],
    //'veggies': ['tomato','onion','spinach','broccoli']
    //}

    // The following example shows how to access the array of matches for the
    // regular expression rule elements `fruits` and `veggies`, which are
    // specified in the manifest.
    var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();
    var fruits = selectedMatches.fruits;
    var veggies = selectedMatches.veggies;
Office.MessageRead.internetHeaders:
  - |-
    Office.context.mailbox.item.internetHeaders.getAsync(["header1", "header2"], callback);

    function callback(asyncResult) {
        var dictionary = asyncResult.value;
        var header1_value = dictionary["header1"];
    }
Office.MessageRead.internetMessageId:
  - |-
    var internetMessageId = Office.context.mailbox.item.internetMessageId;
    console.log("internetMessageId: " + internetMessageId);
Office.MessageRead.itemClass:
  - |-
    var itemClass = Office.context.mailbox.item.itemClass;
    console.log("Item class: " + itemClass);
Office.MessageRead.itemId:
  - |-
    // The following code checks for the presence of an item
    // identifier. If the `itemId` property returns `null` or
    // `undefined`, it saves the item to the store and gets the
    // item identifier from the asynchronous result.
    var itemId = Office.context.mailbox.item.itemId;
    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }
Office.MessageRead.itemType:
  - |-
    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // Do something.
    } else {
        // Do something else.
    }
Office.MessageRead.normalizedSubject:
  - |-
    var normalizedSubject = Office.context.mailbox.item.normalizedSubject;
    console.log("Normalized subject: " + normalizedSubject);
Office.MessageRead.notificationMessages:
  - |-
    // Get all notifications.
    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );
Office.MessageRead.recurrence:
  - |-
    var recurrence = Office.context.mailbox.item.recurrence;
    console.log("Recurrence: " + JSON.stringify(recurrence));
Office.MessageRead.sender:
  - |-
    var senderName = Office.context.mailbox.item.sender.displayName;
    var senderAddress = Office.context.mailbox.item.sender.emailAddress;
    console.log("Sender: " + senderName + " (" + senderAddress + ")");
Office.MessageRead.seriesId:
  - |-
    var seriesId = Office.context.mailbox.item.seriesId;

    // The seriesId property returns null for items that do
    // not have parent items (such as single appointments,
    // series items, or meeting requests) and returns
    // undefined for messages that are not meeting requests.
    var isSeriesInstance = (seriesId != null);
    console.log("SeriesId is " + seriesId 
        + " and isSeriesInstance is " + isSeriesInstance);
Office.MessageRead.subject:
  - |-
    // The following JavaScript code example shows how to access the
    // `subject` property of the current item in Outlook.

    // The initialize function is required for all apps.
    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            var subject = item.subject;
            // Continue with processing the subject of the current item,
            // which can be a message or appointment.
        });
    };
Office.MessageRead.to:
  - |-
    console.log(JSON.stringify(Office.context.mailbox.item.to));
Office.NotificationMessages.addAsync_1:
  - |-
    // Create three notifications, each with a different key.
    Office.context.mailbox.item.notificationMessages.addAsync("progress", {
        type: "progressIndicator",
        message : "An add-in is processing this message."
    });
    Office.context.mailbox.item.notificationMessages.addAsync("information", {
        type: "informationalMessage",
        message : "The add-in processed this message.",
        icon : "iconid",
        persistent: false
    });
    Office.context.mailbox.item.notificationMessages.addAsync("error", {
        type: "errorMessage",
        message : "The add-in failed to process this message."
    });
Office.NotificationMessages.getAllAsync_1:
  - |-
    // Get all notifications.
    Office.context.mailbox.item.notificationMessages.getAllAsync(function (asyncResult) {
        if (asyncResult.status != "failed") {
            Office.context.mailbox.item.notificationMessages.replaceAsync( "notifications", {
                type: "informationalMessage",
                message : "Found " + asyncResult.value.length + " notifications.",
                icon : "iconid",
                persistent: false
            });
        }
    });
Office.NotificationMessages.removeAsync_1:
  - |-
    // Remove a notification.
    Office.context.mailbox.item.notificationMessages.removeAsync("progress");
Office.NotificationMessages.replaceAsync_1:
  - |-
    // Replace a notification with an informational notification.
    Office.context.mailbox.item.notificationMessages.replaceAsync("progress", {
        type: "informationalMessage",
        message : "The message was processed successfully.",
        icon : "iconid",
        persistent: false
    });
Office.Organizer.getAsync_1:
  - |-
    Office.context.mailbox.item.organizer.getAsync(
        function(asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );
Office.PhoneNumber:
  - |-
    var item = Office.context.mailbox.item;
    // Get an array of strings that represent phone numbers in the current item's body.
    var phoneNumbers = item.getEntitiesByType(Office.MailboxEnums.EntityType.PhoneNumber);
    console.log("There are " + phoneNumbers.length + " phone numbers.")
    phoneNumbers.forEach(function (phoneNumber) {
        console.log("Phone number: " + JSON.stringify(phoneNumber.phoneString));
        console.log("Type: " + JSON.stringify(phoneNumber.type));
        console.log("Source text: " + JSON.stringify(phoneNumber.originalPhoneString));
    });
Office.Recipients.addAsync_1:
  - |-
    // The following example creates an array of EmailUser objects
    // and adds them to the To recipients of the message.
    var newRecipients = [
        {
            "displayName": "Allie Bellew",
            "emailAddress": "allieb@contoso.com"
        },
        {
            "displayName": "Alex Darrow",
            "emailAddress": "alexd@contoso.com"
        }
    ];

    Office.context.mailbox.item.to.addAsync(newRecipients, function(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Recipients added");
        }
    });
Office.Recipients.getAsync_1:
  - |-
    // The following example gets the optional attendees of a meeting.
    Office.context.mailbox.item.optionalAttendees.getAsync(function(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            var msg = "";
            result.value.forEach(function(recip, index) {
                msg = msg + recip.displayName + " (" + recip.emailAddress + ");";
            });
            console.log(msg);
        }
    });
Office.Recipients.setAsync_1:
  - |-
    // The following example creates an array of EmailUser objects and
    // replaces the CC recipients of the message with the array.
    var newRecipients = [
        {
            "displayName": "Allie Bellew",
            "emailAddress": "allieb@contoso.com"
        },
        {
            "displayName": "Alex Darrow",
            "emailAddress": "alexd@contoso.com"
        }
    ];

    Office.context.mailbox.item.cc.setAsync(newRecipients, function(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Recipients overwritten");
        }
    });
Office.Recurrence.getAsync_1:
  - |-
    // This example gets the Recurrence object of an appointment item.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        if (!recurrence) {
            console.log("One-time appointment or meeting");
        } else {
            console.log(JSON.stringify(recurrence));
        }
    }

    // The following example shows the results of the getAsync call that retrieves the recurrence for a series.
    // NOTE: In this example, seriesTimeObject is a placeholder for the JSON representing the
    // recurrence.seriesTime property. You should use the SeriesTime object's methods to get the
    // recurrence date and time properties.
    Recurrence = {
        "recurrenceType": "weekly",
        "recurrenceProperties": {"interval": 2, "days": ["mon","thu","fri"], "firstDayOfWeek": "sun"},
        "seriesTime": {seriesTimeObject},
        "recurrenceTimeZone": {"name": "Pacific Standard Time", "offset": -480}
    }
Office.Recurrence.setAsync_1:
  - |-
    // The following example sets the recurrence pattern of an appointment series.
    var seriesTimeObject = new Office.SeriesTime();
    seriesTimeObject.setStartDate(2019,10,2);
    seriesTimeObject.setEndDate(2019,11,2);
    seriesTimeObject.setStartTime(10,30);
    seriesTimeObject.setDuration(30);

    var pattern = {
        "seriesTime": seriesTimeObject,
        "recurrenceType": "weekly",
        "recurrenceProperties": {"interval": 1, "days": ["tue", "thu"], "firstDayOfWeek": "sun"},
        "recurrenceTimeZone": {"name": "Pacific Standard Time"}};

    Office.context.mailbox.item.recurrence.setAsync(pattern, callback);

    function callback(asyncResult)
    {
        console.log(JSON.stringify(asyncResult));
    }

    // Result: This created a recurring event from November 2, 2019 to December 2, 2019
    //         at 10:30 A.M. to 11 A.M. PST every Tuesday and Thursday.
Office.RecurrenceProperties:
  - |-
    // This example gets the Recurrence object of an appointment item.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        if (!recurrence) {
            console.log("One-time appointment or meeting");
        } else {
            console.log(JSON.stringify(recurrence));
        }
    }

    // The following example shows the results of the getAsync call that retrieves the recurrence for a series.
    // NOTE: In this example, seriesTimeObject is a placeholder for the JSON representing the
    // recurrence.seriesTime property. You should use the SeriesTime object's methods to get the
    // recurrence date and time properties.
    Recurrence = {
        "recurrenceType": "weekly",
        "recurrenceProperties": {"interval": 2, "days": ["mon","thu","fri"], "firstDayOfWeek": "sun"},
        "seriesTime": {seriesTimeObject},
        "recurrenceTimeZone": {"name": "Pacific Standard Time", "offset": -480}
    }
Office.RecurrenceTimeZone:
  - |-
    // This example gets the Recurrence object of an appointment item.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        if (!recurrence) {
        //if (recurrence == null) {
            console.log("One-time appointment or meeting");
        } else {
            console.log(JSON.stringify(recurrence));
        }
    }

    // The following example shows the results of the getAsync call that retrieves the recurrence for a series.
    // NOTE: In this example, seriesTimeObject is a placeholder for the JSON representing the
    // recurrence.seriesTime property. You should use the SeriesTime object's methods to get the
    // recurrence date and time properties.
    Recurrence = {
        "recurrenceType": "weekly",
        "recurrenceProperties": {"interval": 2, "days": ["mon","thu","fri"], "firstDayOfWeek": "sun"},
        "seriesTime": {seriesTimeObject},
        "recurrenceTimeZone": {"name": "Pacific Standard Time", "offset": -480}
    }
Office.RoamingSettings:
  - |-
    // Get the current value of the 'myKey' setting.
    var value = Office.context.roamingSettings.get('myKey');
    // Update the value of the 'myKey' setting.
    Office.context.roamingSettings.set('myKey', 'Hello World!');
    // Persist the change.
    Office.context.roamingSettings.saveAsync();
Office.SeriesTime.getDuration:
  - |-
    // This example gets the duration of a usual instance in a recurring appointment series.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        var duration = recurrence.seriesTime.getDuration();
    }
Office.SeriesTime.getEndDate:
  - |-
    // This example gets the end date of a recurring appointment series.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        var endDate = recurrence.seriesTime.getEndDate();
    }
Office.SeriesTime.getEndTime:
  - |-
    // This example gets the end time of a usual instance in a recurring appointment series.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        var endDate = recurrence.seriesTime.getEndTime();
    }
Office.SeriesTime.getStartDate:
  - |-
    // This example gets the start date of a recurring appointment series.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        var endDate = recurrence.seriesTime.getStartDate();
    }
Office.SeriesTime.getStartTime:
  - |-
    // This example gets the start time of a usual
    // instance in a recurring appointment series.
    var seriesTimeObject = new SeriesTime();
    seriesTimeObject.setDuration(120);
Office.SeriesTime.setDuration:
  - |-
    // This example sets the duration of each appointment
    // in a recurring series to 2 hours.
    Office.context.mailbox.item.recurrence.getAsync(callback);

    function callback(asyncResult) {
        var context = asyncResult.context;
        var recurrence = asyncResult.value;
        var endDate = recurrence.seriesTime.getStartTime();
    }
Office.SeriesTime.setEndDate:
  - |-
    // This example sets the end date of a recurring
    // appointment series to November 2, 2017.
    var seriesTimeObject = new SeriesTime();
    seriesTimeObject.setEndDate(2017, 10, 2);
Office.SeriesTime.setEndDate_1:
  - |-
    // This example sets the end date of a
    // recurring appointment series to November 2, 2017
    // using ISO 8601 date standard.
    var seriesTimeObject = new SeriesTime()
    seriesTimeObject.setEndDate("2017-11-02");
Office.SeriesTime.setStartDate:
  - |-
    // This example sets the start date of a recurring
    // appointment series to November 2, 2017.
    var seriesTimeObject = new SeriesTime();
    seriesTimeObject.setStartDate(2017, 10, 2);
Office.SeriesTime.setStartDate_1:
  - |-
    // This example sets the start date of a recurring
    // appointment series to November 2, 2017
    // using ISO 8601 date standard.
    var seriesTimeObject = new SeriesTime()
    seriesTimeObject.setStartDate("2017-11-02");
Office.SeriesTime.setStartTime:
  - |-
    // This example sets the start time of each instance
    // of a recurring appointment series to 1:30 PM.
    var seriesTimeObject = new SeriesTime();
    seriesTimeObject.setStartTime(13, 30);

    // This example sets the start time of each instance
    // of a recurring appointment series to 11:30 AM.
    seriesTimeObject.setStartTime(11, 30);
Office.SeriesTime.setStartTime_1:
  - |-
    // This example sets the start time of each instance
    // of a recurring appointment series to 11:30 PM.
    var seriesTimeObject = new SeriesTime()
    seriesTimeObject.setStartTime("T23:30:00");
Office.Subject.getAsync_1:
  - |-
    Office.context.mailbox.item.subject.getAsync(callback);

    function callback(asyncResult) {
        var subject = asyncResult.value;
    }
Office.Subject.setAsync_1:
  - |-
    Office.context.mailbox.item.subject.setAsync("New subject!", function (asyncResult) {
        if (asyncResult.status === "failed") {
            console.log("Action failed with error: " + asyncResult.error.message);
        }
    });
Office.TaskSuggestion:
  - |-
    var item = Office.context.mailbox.item;
    // Get an array of strings that represent task suggestions in the current item's body.
    var taskSuggestions = item.getEntitiesByType(Office.MailboxEnums.EntityType.TaskSuggestion);
    console.log("There are " + taskSuggestions.length + " task suggestions.")
    taskSuggestions.forEach(function (taskSuggestion) {
        console.log("Assignees: " + JSON.stringify(taskSuggestion.assignees));
        console.log("Task: " + JSON.stringify(taskSuggestion.taskString));
    });
Office.Time.getAsync_1:
  - |-
    Office.context.mailbox.item.start.getAsync(function (asyncResult) {
        if (asyncResult.status === "failed") {
            console.log("Action failed with error: " + asyncResult.error.message);
        }
        else {
            console.log("Start date and time: " + asyncResult.value);
        }
    });
Office.Time.setAsync:
  - |-
    var startTime = new Date("3/14/2015");
    var options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };
    Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync function.
            console.debug("Start Time " + result.asyncContext.verb);
        }
    });
Office.UserProfile.accountType:
  - |-
    console.log(Office.context.mailbox.userProfile.accountType);
Office.UserProfile.displayName:
  - |-
    // Example: Allie Bellew
    console.log(Office.context.mailbox.userProfile.displayName);
Office.UserProfile.emailAddress:
  - |-
    // Example: allieb@contoso.com
    console.log(Office.context.mailbox.userProfile.emailAddress);
Office.UserProfile.timeZone:
  - |-
    // Example: Pacific Standard Time
    console.log(Office.context.mailbox.userProfile.timeZone);
