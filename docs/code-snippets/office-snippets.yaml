Office.AsyncResult:
  - |-
    // The following is an example applicable to content and task pane add-ins.
    // The example shows a call to the getSelectedDataAsync method of the Document object.
    Office.context.document.getSelectedDataAsync("text", {
            valueFormat: "unformatted",
            filterType: "all"
        },
        function (result) {
            if (result.status === "success") {
                var dataValue = result.value; // Get selected data.
                console.log('Selected data is ' + dataValue);
            } else {
                var err = result.error;
                console.log(err.name + ": " + err.message);
            }
        });
    // The anonymous function passed as the callback argument ( function (result){...}) has a single parameter named result
    // that provides access to an AsyncResult object when the function executes. When the call to the getSelectedDataAsync method
    // completes, the callback function executes, and the following line of code accesses the value property of the AsyncResult
    // object to return the data selected in the document:
    var dataValue = result.value;
    // Note that other lines of code in the function use the result parameter of the callback function to access the status and
    // error properties of the AsyncResult object.
Office.AsyncResult.asyncContext:
  - |-
    function getDataWithContext() {
        var format = "Your data: ";
        Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, { asyncContext: format }, showDataWithContext);
    }

    function showDataWithContext(asyncResult) {
        write(asyncResult.asyncContext + asyncResult.value);
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.AsyncResult.error:
  - |-
    function getData() {
        Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
            if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                write(asyncResult.error.message);
            }
            else {
                write(asyncResult.value);
            }
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.AsyncResult.status:
  - |-
    function getData() {
        Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
            if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                write(asyncResult.error.message);
            }
            else {
                write(asyncResult.value);
            }
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.AsyncResult.value:
  - |-
    function getData() {
        Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
            if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                write(asyncResult.error.message);
            }
            else {
                write(asyncResult.value);
            }
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.addHandlerAsync:
  - |-
    // The following code sample calls the select method of the Office object to access the binding with ID "MyBinding",
    // and then calls the addHandlerAsync method to add a handler function for the bindingDataChanged event of that binding.
    function addEventHandlerToBinding() {
        Office.select("bindings#MyBinding").addHandlerAsync(Office.EventType.BindingDataChanged, onBindingDataChanged);
    }

    function onBindingDataChanged(eventArgs) {
        write("Data has changed in binding: " + eventArgs.binding.id);
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.bindingDataChanged:
  - |-
    function addEventHandlerToBinding() {
        Office.select("bindings#MyBinding").addHandlerAsync(Office.EventType.BindingDataChanged, onBindingDataChanged);
    }

    function onBindingDataChanged(eventArgs) {
        write("Data has changed in binding: " + eventArgs.binding.id);
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.BindingSelectionChangedEventArgs.columnCount:
  - |-
    // The following example adds an event handler for the SelectionChanged event to the binding with an id of myTable.
    // When the user changes the selection, the handler displays the coordinates of the first cell in the selection,
    // and the number of row and columns selected.
    function addSelectionHandler() {
        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addHandlerAsync("bindingSelectionChanged", myHandler);
        });
    }

    // Display selection start coordinates and row/column count.
    function myHandler(bArgs) {
        write("Selection start row/col: " + bArgs.startRow + "," + bArgs.startColumn);
        write("Selection row count: " + bArgs.rowCount);
        write("Selection col count: " + bArgs.columnCount);
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.bindingSelectionChanged:
  - |-
    function addEventHandlerToBinding() {
    Office.select("bindings#MyBinding").addHandlerAsync(Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);
    }

    function onBindingSelectionChanged(eventArgs) {
        write(eventArgs.binding.id + " has been selected.");
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.BindingSelectionChangedEventArgs.startColumn:
  - |-
    // The following example adds an event handler for the SelectionChanged event to the binding with an id of myTable.
    // When the user changes the selection, the handler displays the coordinates of the first cell in the selection,
    // and the number of row and columns selected.
    function addSelectionHandler() {
        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addHandlerAsync("bindingSelectionChanged", myHandler);
        });
    }

    // Display selection start coordinates and row/column count.
    function myHandler(bArgs) {
        write("Selection start row/col: " + bArgs.startRow + "," + bArgs.startColumn);
        write("Selection row count: " + bArgs.rowCount);
        write("Selection col count: " + bArgs.columnCount);
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.BindingSelectionChangedEventArgs.rowCount:
  - |-
    // The following example adds an event handler for the SelectionChanged event to the binding with an id of myTable.
    // When the user changes the selection, the handler displays the coordinates of the first cell in the selection,
    // and the number of row and columns selected.
    function addSelectionHandler() {
        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addHandlerAsync("bindingSelectionChanged", myHandler);
        });
    }

    // Display selection start coordinates and row/column count.
    function myHandler(bArgs) {
        write("Selection start row/col: " + bArgs.startRow + "," + bArgs.startColumn);
        write("Selection row count: " + bArgs.rowCount);
        write("Selection col count: " + bArgs.columnCount);
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.BindingSelectionChangedEventArgs.startRow:
  - |-
    // The following example adds an event handler for the SelectionChanged event to the binding with an id of myTable.
    // When the user changes the selection, the handler displays the coordinates of the first cell in the selection,
    // and the number of row and columns selected.
    function addSelectionHandler() {
        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addHandlerAsync("bindingSelectionChanged", myHandler);
        });
    }

    // Display selection start coordinates and row/column count.
    function myHandler(bArgs) {
        write("Selection start row/col: " + bArgs.startRow + "," + bArgs.startColumn);
        write("Selection row count: " + bArgs.rowCount);
        write("Selection col count: " + bArgs.columnCount);
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.document:
  - |-
    Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
        write(asyncResult.value.document.url);
    });

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Office.Binding.getDataAsync:
  - |-
    function showBindingData() {
        Office.select("bindings#MyBinding").getDataAsync(function (asyncResult) {
            write(asyncResult.value)
        });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }

    // There is an important difference in behavior between using the "table" and "matrix" coercionType with the
    // Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following
    // two examples. These code examples show event handler functions for the Binding.SelectionChanged event.

    // If you specify the "table" coercionType, the TableData.rows property ( result.value.rows in the following
    // code example) returns an array that contains only the body rows of the table. So, its 0th row will be the
    // first non-header row in the table.
    function selectionChanged(evtArgs) { 
        Office.select("bindings#TableTranslate").getDataAsync({ coercionType: 'table', startRow: evtArgs.startRow, startCol: 0, rowCount: 1, columnCount: 1 },  
            function (result) { 
                if (result.status == 'succeeded') { 
                    write("Image to find: " + result.value.rows[0][0]); 
                } 
                else 
                    write(result.error.message); 
        }); 
    }     
    // Function that writes to a div with id='message' on the page. 
    function write(message){ 
        document.getElementById('message').innerText += message; 
    }

    // However, if you specify the "matrix" coercionType, result.value in the following code example returns an array
    // that contains the table header in the 0th row. If the table header contains multiple rows, then these are all
    // included in the result.value matrix as separate rows before the table body rows are included.
    function selectionChanged(evtArgs) { 
        Office.select("bindings#TableTranslate").getDataAsync({ coercionType: 'matrix', startRow: evtArgs.startRow, startCol: 0, rowCount: 1, columnCount: 1 },  
            function (result) { 
                if (result.status == 'succeeded') { 
                    write("Image to find: " + result.value[1][0]); 
                } 
                else 
                    write(result.error.message); 
        }); 
    }     
    // Function that writes to a div with id='message' on the page. 
    function write(message){ 
        document.getElementById('message').innerText += message; 
    }
Binding.id:
  - |-
    Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
        write(asyncResult.value.id);
    });

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
MatrixBinding.columnCount:
  - |-
    function showBindingColumnCount() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            write("Column: " + asyncResult.value.columnCount);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
MatrixBinding.columnCount:
  - |-
    function showBindingRowCount() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            write("Rows: " + asyncResult.value.rowCount);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Binding.removeHandlerAsync:
  - |-
    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }
Binding.setDataAsync:
  - |-
    function setBindingData() {
        Office.select("bindings#MyBinding").setDataAsync('Hello World!', function (asyncResult) { });
    }

    // Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.
    // For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter as "html"
    // as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
    function writeHtmlData() {
        Office.select("bindings#myBinding").setDataAsync("<b>Hello</b> World!", {coercionType: "html"}, function (asyncResult) {
            if (asyncResult.status == "failed") {
                write('Error: ' + asyncResult.error.message);
            }
        });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }

    // In this example, the call to setDataAsync passes the data parameter as an array of arrays
    // (to create a single column of three rows), and specifies the data structure with the coercionType parameter as a "matrix".
    function writeBoundDataMatrix() {
        Office.select("bindings#myBinding").setDataAsync([['Berlin'],['Munich'],['Duisburg']],{ coercionType: "matrix" }, function (asyncResult) {
            if (asyncResult.status == "failed") {
                write('Error: ' + asyncResult.error.message);
            } else {
                write('Bound data: ' + asyncResult.value);
            }
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }

    // In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter as a TableData object
    // (to write three columns and three rows), and specifies the data structure with the coercionType parameter as a "table".

    // In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,
    // but as a single column with a new header and three rows, to update the values in the last column of the table created
    // with the writeBoundDataTable function. The optional zero-based startColumn parameter is specified as 2 to replace the values
    // in the third column of the table.
    function writeBoundDataTable() {
        // Create a TableData object.
        var myTable = new Office.TableData();
        myTable.headers = ['First Name', 'Last Name', 'Grade'];
        myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];

        // Set myTable in the binding.
        Office.select("bindings#myBinding").setDataAsync(myTable, { coercionType: "table" }, 
            function (asyncResult) {
                if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                    write('Error: '+ asyncResult.error.message);
            } else {
                write('Bound data: ' + asyncResult.value);
            }
        });
    }

    // Replace last column with different data.
    function updateTableData() {
        var newTable = new Office.TableData();
        newTable.headers = ["Gender"];
        newTable.rows = [["M"],["M"],["F"]];
        Office.select("bindings#myBinding").setDataAsync(newTable, { coercionType: "table", startColumn:2 }, 
            function (asyncResult) {
                if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                    write('Error: '+ asyncResult.error.message);
            } else {
                write('Bound data: ' + asyncResult.value);
            }     
        });   
    }

    // In this example, the following call passes two formatting groups to cellFormat.
    Office.select("bindings#myBinding").setDataAsync([['Berlin'],['Munich'],['Duisburg']],
      {cellFormat:[{cells: {row: 1}, format: {fontColor: "yellow"}}, 
          {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}]}, 
      function (asyncResult){});
TableBinding.addColumnsAsync:
  - |-
    // The following example adds a single column with three rows to a bound table with the id "myTable"
    // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,
    // the table being updated must have three rows.

    // Add a column to a binding of type table by passing a TableData object.
    function addColumns() {
        var myTable = new Office.TableData();
        myTable.headers = [["Cities"]];
        myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }

    // The following example adds a single column with three rows to a bound table with the id myTable
    // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.
    // To succeed, the table being updated must have three rows.

    // Add a column to a binding of type table by passing an array of arrays.
    function addColumns() {
        var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }
TableBinding.addRowsAsync:
  - |-
    function addRowsToTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.addRowsAsync([["6", "k"], ["7", "j"]]);
        });
    }
TableBinding.columnCount:
  - |-
    // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":
    Office.select(bindings#myBinding).clearFormatsAsync();
TableBinding.clearFormatsAsync:
  - |-
    function showBindingColumnCount() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            write("Column: " + asyncResult.value.columnCount);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
TableBinding.clearFormatsAsync:
  - |-
    function deleteAllRowsFromTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.deleteAllDataValuesAsync();
        });
    }
TableBinding.hasHeaders:
  - |-
    function showBindingHasHeaders() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            write("Binding has headers: " + asyncResult.value.hasHeaders);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
TableBinding.rowCount:
  - |-
    function showBindingRowCount() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            write("Rows: " + asyncResult.value.rowCount);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
TableBinding.setTableOptionsAsync:
  - |-
    // The following example shows how to:
    // 1. Create an object literal that specifies the table formatting options to update on the bound table.
    // 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object with formatting settin as the tableOptions parameter.
    function updateTableFormatting(){
        var tableOptions = {bandedRows: true, filterButton: false, style: "TableStyleMedium3"}; 

        Office.select("bindings#myBinding").setTableOptionsAsync(tableOptions, function(asyncResult){});
    }
Binding.type:
  - |-
    Office.context.document.bindings.getByIdAsync("MyBinding", function (asyncResult) { 
        write(asyncResult.value.type); 
    }) 

    // Function that writes to a div with id='message' on the page. 
    function write(message){ 
        document.getElementById('message').innerText += message;  
    }
Bindings.addFromNamedItemAsync:
  - |-
    // The following example adds a binding to the myRange named item in Excel as a "matrix" binding,
    // and assigns the binding's id as myMatrix.
    function bindNamedItem() {
        Office.context.document.bindings.addFromNamedItemAsync("myRange", "matrix", {id:'myMatrix'}, function (result) {
            if (result.status == 'succeeded'){
                write('Added new binding with type: ' + result.value.type + ' and id: ' + result.value.id);
                }
            else
                write('Error: ' + result.error.message);
        });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
    
    // The following example adds a binding to the Table1 named item in Excel as a "table" binding,
    // and assigns the binding's id as myTable.
    function bindNamedItem() {
        Office.context.document.bindings.addFromNamedItemAsync("Table1", "table", {id:'myTable'}, function (result) {
            if (result.status == 'succeeded'){
                write('Added new binding with type: ' + result.value.type + ' and id: ' + result.value.id);
                }
            else
                write('Error: ' + result.error.message);
        });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
    
    // The following example creates a text binding in Word to a rich text content control named "FirstName",
    // assigns the id "firstName", and then displays that information.
    function bindContentControl() {
        Office.context.document.bindings.addFromNamedItemAsync('FirstName', 
            Office.BindingType.Text, {id:'firstName'},
            function (result) {
                if (result.status === Office.AsyncResultStatus.Succeeded) {
                    write('Control bound. Binding.id: '
                        + result.value.id + ' Binding.type: ' + result.value.type);
                } else {
                    write('Error:', result.error.message);
                }
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Bindings.addFromPromptAsync:
  - |-
    function addBindingFromPrompt() {
        Office.context.document.bindings.addFromPromptAsync(Office.BindingType.Text, { id: 'MyBinding', promptText: 'Select text to bind to.' }, function (asyncResult) {
            write('Added new binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Bindings.addFromSelectionAsync:
  - |-
    function addBindingFromSelection() {
        Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Text, { id: 'MyBinding' }, 
            function (asyncResult) {
            write('Added new binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);
            }
        );
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Bindings.getAllAsync:
  - |-
    function displayAllBindingNames() {
        Office.context.document.bindings.getAllAsync(function (asyncResult) {
            var bindingString = '';
            for (var i in asyncResult.value) {
                bindingString += asyncResult.value[i].id + '\n';
            }
            write('Existing bindings: ' + bindingString);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Bindings.getByIdAsync:
  - |-
    function displayBindingType() {
        Office.context.document.bindings.getByIdAsync('MyBinding', function (asyncResult) {
            write('Retrieved binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Bindings.releaseByIdAsync:
  - |-
    Office.context.document.bindings.releaseByIdAsync("MyBinding", function (asyncResult) { 
        write("Released MyBinding!"); 
    }); 
    // Function that writes to a div with id='message' on the page. 
    function write(message){ 
        document.getElementById('message').innerText += message;  
    }
CustomXmlNode.baseName:
  - |-
    function showXmlNodeBaseNames() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*/*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    write(node.baseName);
                }
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlNode.getNodesAsync:
  - |-
    function showXmlChildNodes() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    node.getNodesAsync('*', function (nodeResults) {
                        write(nodeResults.value.length + " childNodes");
                    });
                }
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlNode.getNodeValueAsync:
  - |-
    function showXmlNodeValues() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*/*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    node.getNodeValueAsync(function (asyncResult) {
                        write(asyncResult.value);
                    });
                }
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlNode.getTextAsync:
  - |-
    // Get the built-in core properties XML part by using its ID. This results in a call to Word.
    Office.context.document.customXmlParts.getByIdAsync("{6C3C8BC8-F283-45AE-878A-BAB7291924A1}", function (getByIdAsyncResult) {
        
        // Access the XML part.
        var xmlPart = getByIdAsyncResult.value;
        
        // Add namespaces to the namespace manager. These two calls result in two calls to Word.
        xmlPart.namespaceManager.addNamespaceAsync('cp', 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', function () {
            xmlPart.namespaceManager.addNamespaceAsync('dc', 'http://purl.org/dc/elements/1.1/', function () {

                // Get XML nodes by using an Xpath expression. This results in a call to Word.
                xmlPart.getNodesAsync("/cp:coreProperties/dc:title", function (getNodesAsyncResult) {
                    
                    // Get the first node returned by using the Xpath expression. 
                    var node = getNodesAsyncResult.value[0];
                    
                    // Get the text value of the node and use the asyncContext. This results in a call to Word. 
                    // The results are logged to the browser console.
                    node.getTextAsync({asyncContext: "StateNormal"}, function (getTextAsyncResult) {
                      console.log("Text of the title element = " + getTextAsyncResult.value;
                      console.log("The asyncContext value = " + getTextAsyncResult.asyncContext;
                    });
                });
            });
        });
    });
CustomXmlNode.getXmlAsync:
  - |-
    function showXmlNodeInnerXml() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    node.getXmlAsync(function (asyncResult) {
                        write(asyncResult.value);
                    });
                }
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlNode.namespaceUri:
  - |-
    function showXmlNamespaceUri() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*/*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    write(node.namespaceUri);
                }
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlNode.nodeType:
  - |-
    function showXmlNodeType() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*/*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    write(node.nodeType);
                }
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlNode.setNodeValueAsync:
  - |-
    function setXmlNodeValue() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*/*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    write(node);
                    node.setNodeValueAsync("item number" + i, {}, function (result) { });
                }
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlNode.setTextAsync:
  - |-
    // Learn how to set the text value of a node in a custom XML part from the following example.

    // Get the built-in core properties XML part by using its ID. This results in a call to Word.
    Office.context.document.customXmlParts.getByIdAsync("{6C3C8BC8-F283-45AE-878A-BAB7291924A1}", function (getByIdAsyncResult) {
        
        // Access the XML part.
        var xmlPart = getByIdAsyncResult.value;
        
        // Add namespaces to the namespace manager. These two calls result in two calls to Word.
        xmlPart.namespaceManager.addNamespaceAsync('cp', 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', function () {
            xmlPart.namespaceManager.addNamespaceAsync('dc', 'http://purl.org/dc/elements/1.1/', function () {

                // Get XML nodes by using an Xpath expression. This results in a call to the host.
                xmlPart.getNodesAsync("/cp:coreProperties/dc:subject", function (getNodesAsyncResult) {
                    
                    // Get the first node returned by using the Xpath expression. This will be the subject element in this example.
                    var subjectNode = getNodesAsyncResult.value[0];
                    
                    // Set the text value of the subject node and use the asyncContext. This results in a call to the host. 
                    // The results are logged to the browser console. 
                    subjectNode.setTextAsync("newSubject", {asyncContext: "StateNormal"}, function (setTextAsyncResult) {
                      console.log("The status of the call: " + setTextAsyncResult.status);
                      console.log("The asyncContext value = " + setTextAsyncResult.asyncContext);
                    });
                });
            });
        });
    });
CustomXmlNode.setXmlAsync:
  - |-
    function setXmlNodeInnerXml() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    node.setXmlAsync("<childNode>" + i + "</childNode>");
                }
            });
        });
    }
CustomXmlPart.addHandlerAsync:
  - |-
    function addNodeInsertedEvent() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.DataNodeInserted, myHandler);
        });
    }
    function myHandler(eventArgs) {
                write("A node has been inserted.");
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message;
    }
CustomXmlPart.builtIn:
  - |-
    function showXMLPartBuiltIn() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            write(xmlPart.builtIn);
        });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlPart.dataNodeDeleted:
  - |-
    function addNodeDeletedEvent() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.DataNodeDeleted, function (eventArgs) {
                write("A node has been deleted.");
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message;
    }
CustomXmlPart.dataNodeInserted:
  - |-
    function addNodeInsertedEvent() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.DataNodeInserted, function (eventArgs) {
                write("A node has been inserted.");
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message;
    }
CustomXmlPart.dataNodeReplaced:
  - |-
    function addNodeReplacedEvent() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.DataNodeReplaced, function (eventArgs) {
                write("A node has been replaced.");
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message;
    }
CustomXmlPart.deleteAsync:
  - |-
    function deleteXMLPart() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.deleteAsync(function (eventArgs) {
                write("The XML Part has been deleted.");
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlPart.getNodesAsync:
  - |-
    function showXmlNodeType() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*/*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    write(node.nodeType);
                }
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlPart.getXmlAsync:
  - |-
    function showXMLPartInnerXML() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getXmlAsync({}, function (eventArgs) {
                write(eventArgs.value);
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlPart.id:
  - |-
    function showXMLPartBuiltId() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            write(xmlPart.id);
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlPart.namespaceManager:
  - |-
    function setXMLPartNamespaceManagerNamespace() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.namespaceManager.addNamespaceAsync("myPrefix", "myNamespace");
        });
    }
CustomXmlPart.removeHandlerAsync:
  - |-
    function removeNodeInsertedEventHandler() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
            function (result) {
                var xmlPart = result.value;
                xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
        });
    }
CustomXmlParts.addAsync:
  - |-
    function addXMLPart() {
        Office.context.document.customXmlParts.addAsync('<root categoryId="1" xmlns="http://tempuri.org"><item name="Cheap Item" price="$193.95"/><item name="Expensive Item" price="$931.88"/></root>', function (result) {
            });
    }

    function addXMLPartandHandler() {
        Office.context.document.customXmlParts.addAsync("<testns:book xmlns:testns='http://testns.com'><testns:page number='1'>Hello</testns:page><testns:page number='2'>world!</testns:page></testns:book>",
            function(r) { r.value.addHandlerAsync(Office.EventType.DataNodeDeleted,
                function(a) {write(a.type)
                },
                    function(s) {write(s.status)
                    });
            });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message;
    }
CustomXmlParts.getByIdAsync:
  - |-
    function showXMLPartInnerXML() {
        Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getXmlAsync({}, function (eventArgs) {
                write(eventArgs.value);
            });
        });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
CustomXmlParts.getByNamespaceAsync:
  - |-
    function showXMLPartsInNamespace() {
        Office.context.document.customXmlParts.getByNamespaceAsync("http://tempuri.org", function (eventArgs) {
            write("Found " + eventArgs.value.length + " parts with this namespace");
        }); 
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Document.addHandlerAsync:
  - |-
    function addSelectionChangedEventHandler() {
        Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);
    }

    function MyHandler(eventArgs) {
        write('Event raised: ' + eventArgs.type);
        doSomethingWithDocument(eventArgs.document);
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Document.bindings:
  - |-
    function displayAllBindings() {
        Office.context.document.bindings.getAllAsync(function (asyncResult) {
            var bindingString = '';
            for (var i in asyncResult.value) {
                bindingString += asyncResult.value[i].id + '\n';
            }
            write('Existing bindings: ' + bindingString);
        });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Document.customXmlParts:
  - |-
    function getCustomXmlParts(){
        Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {
            write('Retrieved ' + asyncResult.value.length + ' custom XML parts');
        });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Document.getActiveViewAsync:
  - |-
    function getFileView() {
        // Get whether the current view is edit or read.
        Office.context.document.getActiveViewAsync(function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage(asyncResult.value);
            }
        });
    }
Document.getFileAsync:
  - |-
    // The following example gets the document in Office Open XML ("compressed") format in 65536 bytes (64 KB) slices.
    // Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.
    function getDocumentAsCompressed() {
        Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, 
            function (result) {
                if (result.status == "succeeded") {
                // If the getFileAsync call succeeded, then
                // result.value will return a valid File Object.
                var myFile = result.value;
                var sliceCount = myFile.sliceCount;
                var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];
                app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);

                // Get the file slices.
                getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                }
                else {
                app.showNotification("Error:", result.error.message);
                }
        });
    }

    function getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {
        file.getSliceAsync(nextSlice, function (sliceResult) {
            if (sliceResult.status == "succeeded") {
                if (!gotAllSlices) { // Failed to get all slices, no need to continue.
                    return;
                }

                // Got one slice, store it in a temporary array.
                // (Or you can do something else, such as
                // send it to a third-party server.)
                docdataSlices[sliceResult.value.index] = sliceResult.value.data;
                if (++slicesReceived == sliceCount) {
                  // All slices have been received.
                  file.closeAsync();
                  onGotAllSlices(docdataSlices);
                }
                else {
                    getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                }
            }
                else {
                    gotAllSlices = false;
                    file.closeAsync();
                    app.showNotification("getSliceAsync Error:", sliceResult.error.message);
                }
        });
    }

    function onGotAllSlices(docdataSlices) {
        var docdata = [];
        for (var i = 0; i < docdataSlices.length; i++) {
            docdata = docdata.concat(docdataSlices[i]);
        }

        var fileContent = new String();
        for (var j = 0; j < docdata.length; j++) {
            fileContent += String.fromCharCode(docdata[j]);
        }

        // Now all the file content is stored in 'fileContent' variable,
        // you can do something with it, such as print, fax...
    }

    // The following example gets the document in PDF format.
    Office.context.document.getFileAsync(Office.FileType.Pdf,
        function(result) {
            if (result.status == "succeeded") {
                var myFile = result.value;
                var sliceCount = myFile.sliceCount;
                app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);
                // Now, you can call getSliceAsync to download the files, as described in the previous code segment (compressed format).
                
                myFile.closeAsync();
            }
            else {
                app.showNotification("Error:", result.error.message);
            }
    }
    );
Document.getFilePropertiesAsync:
  - |-
    // To read the URL of the current file, you need to write a callback function that returns the URL.
    // The following example shows how to:
    // 1. Pass an anonymous callback function that returns the value of the file's URL to the callback parameter of the getFilePropertiesAsync method.
    // 2. Display the value on the add-in's page.
    function getFileUrl() {
        // Get the URL of the current file.
        Office.context.document.getFilePropertiesAsync(function (asyncResult) {
            var fileUrl = asyncResult.value.url;
            if (fileUrl == "") {
                showMessage("The file hasn't been saved yet. Save the file and try again");
            }
            else {
                showMessage(fileUrl);
            }
        });
    }
Document.getSelectedDataAsync:
  - |-
    // To read the value of the current selection, you need to write a callback function that reads the selection.
    // The following example shows how to:
    // 1. Pass an anonymous callback function that reads the value of the current selection to the callback parameter of the getSelectedDataAsync method.
    // 2. Read the selection as text, unformatted, and not filtered.
    // 3. Display the value on the add-in's page.
    function getText() {
        Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, 
            { valueFormat: "unformatted", filterType: "all" },
            function (asyncResult) {
                var error = asyncResult.error;
                if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                    write(error.name + ": " + error.message);
                } 
                else {
                    // Get selected data.
                    var dataValue = asyncResult.value; 
                    write('Selected data is ' + dataValue);
                }            
            });
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Document.goToByIdAsync:
  - |-
    // Go to a binding by id (Word and Excel)
    // The following example shows how to:
    // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.
    // 2. Specify that binding as the binding to go to.
    // 3. Pass an anonymous callback function that returns the status of the operation to the callback parameter of the goToByIdAsync method.
    // 4. Display the value on the add-in's page.
    function gotoBinding() {
        // Create a new table binding for the selected table.
        Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
        if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
              }
        });

        // Go to binding by id.
        Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }

    // Go to a table in a spreadsheet (Excel)
    // The following example shows how to:
    // 1. Specify a table by name as the table to go to.
    // 2. Pass an anonymous callback function that returns the status of the operation to the callback parameter of the goToByIdAsync method.
    // 3. Display the value on the add-in's page.
    function goToTable() {
        Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }

    // Go to the currently selected slide by id (PowerPoint)
    // The following example shows how to:
    // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.
    // 2. Specify the returned id as the slide to go to.
    // 3. Pass an anonymous callback function that returns the status of the operation to the callback parameter of the goToByIdAsync method.
    // 4. Display the value of the stringified JSON object returned by asyncResult.value, which contains information about the selected slides, on the add-in's page.
    var firstSlideId = 0;
    function gotoSelectedSlide() {
        //Get currently selected slide's id
        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                firstSlideId = asyncResult.value.slides[0].id;
                app.showNotification(JSON.stringify(asyncResult.value));
            }
        });
        //Go to slide by id.
        Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                app.showNotification("Navigation successful");
            }
        });
    }

    // Go to slide by index (PowerPoint)
    // The following example shows how to:
    // 1. Specify the index of the first, last, previous, or next slide to go to.
    // 2. Pass an anonymous callback function that returns the status of the operation to the callback parameter of the goToByIdAsync method.
    // 3. Display the value on the add-in's page.
    function goToSlideByIndex() {
        var goToFirst = Office.Index.First;
        var goToLast = Office.Index.Last;
        var goToPrevious = Office.Index.Previous;
        var goToNext = Office.Index.Next;

        Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }
Document:
  - |-
    // The following example uses the getSelectedDataAsync method of the Document object to retrieve the
    // user's current selection as text, and then display it in the add-in's page.

    // Display the user's current selection.
    function showSelection() {
        Office.context.document.getSelectedDataAsync(
            "text",                        // coercionType
            {valueFormat: "unformatted",   // valueFormat
            filterType: "all"},            // filterType
            function (result) {            // callback
                var dataValue; 
                dataValue = result.value;
                write('Selected data is: ' + dataValue);
            });
    }
    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
Document.mode:
  - |-
    function displayDocumentMode() {
        write(Office.context.document.mode);
    }

    // Function that writes to a div with id='message' on the page.
    function write(message){
        document.getElementById('message').innerText += message; 
    }
