### YamlMime:TSType
name: Word.Font
uid: 'word!Word.Font:class'
package: word!
fullName: Word.Font
summary: Represents a font.
remarks: |-
  \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

  #### Examples

  ```TypeScript
  // Change the font color
  // Run a batch operation against the Word object model.
  await Word.run(async (context) => {

      // Create a range proxy object for the current selection.
      const selection = context.document.getSelection();

      // Queue a command to change the font color of the current selection.
      selection.font.color = 'blue';

      // Synchronize the document state by executing the queued commands,
      // and return a promise to indicate task completion.
      await context.sync();
      console.log('The font color of the selection has been changed.');
  });
  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: bold
    uid: 'word!Word.Font#bold:member'
    package: word!
    fullName: bold
    summary: >-
      Specifies a value that indicates whether the font is bold. True if the font is formatted as bold, otherwise,
      false.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Bold format text
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a range proxy object for the current selection.
          const selection = context.document.getSelection();

          // Queue a command to make the current selection bold.
          selection.font.bold = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The selection is now bold.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'bold: boolean;'
      return:
        type: boolean
  - name: color
    uid: 'word!Word.Font#color:member'
    package: word!
    fullName: color
    summary: 'Specifies the color for the specified font. You can provide the value in the ''\#RRGGBB'' format or the color name.'
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Change the font color
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a range proxy object for the current selection.
          const selection = context.document.getSelection();

          // Queue a command to change the font color of the current selection.
          selection.font.color = 'blue';

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The font color of the selection has been changed.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'color: string;'
      return:
        type: string
  - name: context
    uid: 'word!Word.Font#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: doubleStrikeThrough
    uid: 'word!Word.Font#doubleStrikeThrough:member'
    package: word!
    fullName: doubleStrikeThrough
    summary: >-
      Specifies a value that indicates whether the font has a double strikethrough. True if the font is formatted as
      double strikethrough text, otherwise, false.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'doubleStrikeThrough: boolean;'
      return:
        type: boolean
  - name: highlightColor
    uid: 'word!Word.Font#highlightColor:member'
    package: word!
    fullName: highlightColor
    summary: >-
      Specifies the highlight color. To set it, use a value either in the '\#RRGGBB' format or the color name. To remove
      highlight color, set it to null. The returned highlight color can be in the '\#RRGGBB' format, an empty string for
      mixed highlight colors, or `null` for no highlight color. Note: Only the default highlight colors are available in
      Office for Windows Desktop. These are "Yellow", "Lime", "Turquoise", "Pink", "Blue", "Red", "DarkBlue", "Teal",
      "Green", "Purple", "DarkRed", "Olive", "Gray", "LightGray", and "Black". When the add-in runs in Office for
      Windows Desktop, any other color is converted to the closest color when applied to the font.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Highlight selected text
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a range proxy object for the current selection.
          const selection = context.document.getSelection();

          // Queue a command to highlight the current selection.
          selection.font.highlightColor = '#FFFF00'; // Yellow

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The selection has been highlighted.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'highlightColor: string;'
      return:
        type: string
  - name: italic
    uid: 'word!Word.Font#italic:member'
    package: word!
    fullName: italic
    summary: 'Specifies a value that indicates whether the font is italicized. True if the font is italicized, otherwise, false.'
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'italic: boolean;'
      return:
        type: boolean
  - name: name
    uid: 'word!Word.Font#name:member'
    package: word!
    fullName: name
    summary: Specifies a value that represents the name of the font.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Change the font name
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a range proxy object for the current selection.
          const selection = context.document.getSelection();

          // Queue a command to change the current selection's font name.
          selection.font.name = 'Arial';

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The font name has changed.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: size
    uid: 'word!Word.Font#size:member'
    package: word!
    fullName: size
    summary: Specifies a value that represents the font size in points.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Change the font size
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a range proxy object for the current selection.
          const selection = context.document.getSelection();

          // Queue a command to change the current selection's font size.
          selection.font.size = 20;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The font size has changed.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'size: number;'
      return:
        type: number
  - name: strikeThrough
    uid: 'word!Word.Font#strikeThrough:member'
    package: word!
    fullName: strikeThrough
    summary: >-
      Specifies a value that indicates whether the font has a strikethrough. True if the font is formatted as
      strikethrough text, otherwise, false.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Strike format text
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a range proxy object for the current selection.
          const selection = context.document.getSelection();

          // Queue a command to strikethrough the font of the current selection.
          selection.font.strikeThrough = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The selection now has a strikethrough.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'strikeThrough: boolean;'
      return:
        type: boolean
  - name: subscript
    uid: 'word!Word.Font#subscript:member'
    package: word!
    fullName: subscript
    summary: >-
      Specifies a value that indicates whether the font is a subscript. True if the font is formatted as subscript,
      otherwise, false.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'subscript: boolean;'
      return:
        type: boolean
  - name: superscript
    uid: 'word!Word.Font#superscript:member'
    package: word!
    fullName: superscript
    summary: >-
      Specifies a value that indicates whether the font is a superscript. True if the font is formatted as superscript,
      otherwise, false.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'superscript: boolean;'
      return:
        type: boolean
  - name: underline
    uid: 'word!Word.Font#underline:member'
    package: word!
    fullName: underline
    summary: Specifies a value that indicates the font's underline type. 'None' if the font isn't underlined.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Underline format text
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a range proxy object for the current selection.
          const selection = context.document.getSelection();

          // Queue a command to underline the current selection.
          selection.font.underline = Word.UnderlineType.single;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The selection now has an underline style.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        underline: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick"
        | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine"
        | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";
      return:
        type: >-
          <xref uid="word!Word.UnderlineType:enum" /> | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" |
          "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" |
          "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" |
          "WaveHeavy" | "WaveDouble"
methods:
  - name: load(options)
    uid: 'word!Word.Font#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.FontLoadOptions): Word.Font;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="word!Word.Interfaces.FontLoadOptions:interface" />'
      return:
        type: '<xref uid="word!Word.Font:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.Font#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Font;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.Font:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.Font#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Font;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.Font:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'word!Word.Font#set:member(1)'
    package: word!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.FontUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="word!Word.Interfaces.FontUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'word!Word.Font#set:member(2)'
    package: word!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Font): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="word!Word.Font:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'word!Word.Font#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `Word.Font` object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.FontData`<!-- -->) that contains shallow copies of any loaded child
      properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.FontData;'
      return:
        type: '<xref uid="word!Word.Interfaces.FontData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.Font#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Font;'
      return:
        type: '<xref uid="word!Word.Font:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.Font#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Font;'
      return:
        type: '<xref uid="word!Word.Font:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
