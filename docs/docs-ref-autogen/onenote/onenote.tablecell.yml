### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.TableCell
    summary: |-
      Represents a cell in a OneNote table.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: OneNote.TableCell
    fullName: onenote.OneNote.TableCell
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.TableCell.appendHtml
      - onenote.OneNote.TableCell.appendImage
      - onenote.OneNote.TableCell.appendRichText
      - onenote.OneNote.TableCell.appendTable
      - onenote.OneNote.TableCell.cellIndex
      - onenote.OneNote.TableCell.clear
      - onenote.OneNote.TableCell.id
      - onenote.OneNote.TableCell.load
      - onenote.OneNote.TableCell.paragraphs
      - onenote.OneNote.TableCell.parentRow
      - onenote.OneNote.TableCell.rowIndex
      - onenote.OneNote.TableCell.set
      - onenote.OneNote.TableCell.shadingColor
      - onenote.OneNote.TableCell.toJSON
      - onenote.OneNote.TableCell.track
      - onenote.OneNote.TableCell.untrack
  - uid: onenote.OneNote.TableCell.appendHtml
    summary: |-
      Adds the specified HTML to the bottom of the TableCell.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: appendHtml(html)
    fullName: onenote.OneNote.TableCell.appendHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendHtml(html: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: html
          description: >-
            The HTML string to append. See \[supported
            HTML\](../../docs/onenote/onenote-add-ins-page-content.md\#supported-html) for the OneNote add-ins
            JavaScript API.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function(ctx) {
          var app = ctx.application;
          var outline = app.getActiveOutline();
          
          // Queue a command to load outline.paragraphs and their types.
          ctx.load(outline, "paragraphs, paragraphs/type");
          
          // Run the queued commands, and return a promise to indicate task completion.
          return ctx.sync().then(function () {
              var paragraphs = outline.paragraphs;
              
              // for each table, get a table cell at row one and column two and add "Hello".
              for (var i = 0; i < paragraphs.items.length; i++) {
                  var paragraph = paragraphs.items[i];
                  if (paragraph.type == "Table") {
                      var table = paragraph.table;
                      var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                      cell.appendHtml("<p>Hello</p>");
                  }
              }
              return ctx.sync();
          })
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: onenote.OneNote.TableCell.appendImage
    summary: |-
      Adds the specified image to table cell.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: 'appendImage(base64EncodedImage, width, height)'
    fullName: onenote.OneNote.TableCell.appendImage
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendImage(base64EncodedImage: string, width: number, height: number): OneNote.Image;'
      return:
        type:
          - OneNote.Image
        description: ''
      parameters:
        - id: base64EncodedImage
          description: HTML string to append.
          type:
            - string
        - id: width
          description: Optional. Width in the unit of Points. The default value is null and image width will be respected.
          type:
            - number
        - id: height
          description: Optional. Height in the unit of Points. The default value is null and image height will be respected.
          type:
            - number
  - uid: onenote.OneNote.TableCell.appendRichText
    summary: |-
      Adds the specified text to table cell.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: appendRichText(paragraphText)
    fullName: onenote.OneNote.TableCell.appendRichText
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendRichText(paragraphText: string): OneNote.RichText;'
      return:
        type:
          - OneNote.RichText
        description: ''
      parameters:
        - id: paragraphText
          description: HTML string to append.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function(ctx) {
          var app = ctx.application;
          var outline = app.getActiveOutline();
          var appendedRichText = null;
          
          // Queue a command to load outline.paragraphs and their types.
          ctx.load(outline, "paragraphs, paragraphs/type");
          
          // Run the queued commands, and return a promise to indicate task completion.
          return ctx.sync().then(function () {
              var paragraphs = outline.paragraphs;
              
              // for each table, get a table cell at row one and column two and add "Hello".
              for (var i = 0; i < paragraphs.items.length; i++) {
                  var paragraph = paragraphs.items[i];
                  if (paragraph.type == "Table") {
                      var table = paragraph.table;
                      var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                      appendedRichText = cell.appendRichText("Hello");
                  }
              }
              return ctx.sync();
          })
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: onenote.OneNote.TableCell.appendTable
    summary: |-
      Adds a table with the specified number of rows and columns to table cell.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: 'appendTable(rowCount, columnCount, values)'
    fullName: onenote.OneNote.TableCell.appendTable
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendTable(rowCount: number, columnCount: number, values?: Array<Array<string>>): OneNote.Table;'
      return:
        type:
          - OneNote.Table
        description: ''
      parameters:
        - id: rowCount
          description: Required. The number of rows in the table.
          type:
            - number
        - id: columnCount
          description: Required. The number of columns in the table.
          type:
            - number
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type:
            - Array<Array<string>>
  - uid: onenote.OneNote.TableCell.cellIndex
    summary: |-
      Gets the index of the cell in its row. Read-only.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: cellIndex
    fullName: onenote.OneNote.TableCell.cellIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellIndex: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.TableCell.clear
    summary: |-
      Clears the contents of the cell.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: clear()
    fullName: onenote.OneNote.TableCell.clear
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: onenote.OneNote.TableCell.id
    summary: |-
      Gets the ID of the cell. Read-only.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: id
    fullName: onenote.OneNote.TableCell.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.TableCell.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: onenote.OneNote.TableCell.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.TableCellLoadOptions): OneNote.TableCell;'
      return:
        type:
          - OneNote.TableCell
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OneNote.Interfaces.TableCellLoadOptions
  - uid: onenote.OneNote.TableCell.paragraphs
    summary: |-
      Gets the collection of Paragraph objects in the TableCell. Read-only.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: paragraphs
    fullName: onenote.OneNote.TableCell.paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: OneNote.ParagraphCollection;'
      return:
        type:
          - OneNote.ParagraphCollection
  - uid: onenote.OneNote.TableCell.parentRow
    summary: |-
      Gets the parent row of the cell. Read-only.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: parentRow
    fullName: onenote.OneNote.TableCell.parentRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentRow: OneNote.TableRow;'
      return:
        type:
          - OneNote.TableRow
  - uid: onenote.OneNote.TableCell.rowIndex
    summary: |-
      Gets the index of the cell's row in the table. Read-only.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: rowIndex
    fullName: onenote.OneNote.TableCell.rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.TableCell.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: onenote.OneNote.TableCell.set
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        set(properties: Interfaces.TableCellUpdateData, options?: {
                    throwOnReadOnly?: boolean;
                }): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.TableCellUpdateData
        - id: options
          description: ''
          type:
            - |-
              {
                          /**
                           * Throw an error if the passed-in property list includes read-only properties (default = true).
                           */
                          throwOnReadOnly?: boolean;
                      }
  - uid: onenote.OneNote.TableCell.shadingColor
    summary: |-
      Gets and sets the shading color of the cell

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: shadingColor
    fullName: onenote.OneNote.TableCell.shadingColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shadingColor: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.TableCell.toJSON
    name: toJSON()
    fullName: onenote.OneNote.TableCell.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableCellData;'
      return:
        type:
          - OneNote.Interfaces.TableCellData
        description: ''
  - uid: onenote.OneNote.TableCell.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: onenote.OneNote.TableCell.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.TableCell;'
      return:
        type:
          - OneNote.TableCell
        description: ''
  - uid: onenote.OneNote.TableCell.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: onenote.OneNote.TableCell.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.TableCell;'
      return:
        type:
          - OneNote.TableCell
        description: ''
