### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.Outline
    summary: |-
      Represents a container for Paragraph objects.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: OneNote.Outline
    fullName: onenote.OneNote.Outline
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.Outline.appendHtml
      - onenote.OneNote.Outline.appendImage
      - onenote.OneNote.Outline.appendRichText
      - onenote.OneNote.Outline.appendTable
      - onenote.OneNote.Outline.id
      - onenote.OneNote.Outline.load
      - onenote.OneNote.Outline.pageContent
      - onenote.OneNote.Outline.paragraphs
  - uid: onenote.OneNote.Outline.appendHtml
    summary: Adds the specified HTML to the bottom of the Outline.
    name: appendHtml(html)
    fullName: onenote.OneNote.Outline.appendHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendHtml(html: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: html
          description: >-
            The HTML string to append. See \[supported
            HTML\](../../docs/onenote/onenote-add-ins-page-content.md\#supported-html) for the OneNote add-ins
            JavaScript API. \[Api set: OneNoteApi 1.1\]
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function (context) {

          // Gets the active page.
          var activePage = context.application.getActivePage();

          // Get pageContents of the activePage. 
          var pageContents = activePage.contents;

          // Queue a command to load the pageContents to access its data.
          context.load(pageContents);

          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function() {
                  if (pageContents.items.length != 0 && pageContents.items[0].type == "Outline")
                  {
                      // First item is an outline.
                      outline = pageContents.items[0].outline;

                      // Queue a command to append a paragraph to the outline.
                      outline.appendHtml("<p>new paragraph</p>");

                      // Run the queued commands.
                      return context.sync();
                  }
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: onenote.OneNote.Outline.appendImage
    summary: Adds the specified image to the bottom of the Outline.
    name: 'appendImage(base64EncodedImage, width, height)'
    fullName: onenote.OneNote.Outline.appendImage
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendImage(base64EncodedImage: string, width: number, height: number): OneNote.Image;'
      return:
        type:
          - OneNote.Image
        description: ''
      parameters:
        - id: base64EncodedImage
          description: HTML string to append.
          type:
            - string
        - id: width
          description: Optional. Width in the unit of Points. The default value is null and image width will be respected.
          type:
            - number
        - id: height
          description: >-
            Optional. Height in the unit of Points. The default value is null and image height will be respected. \[Api
            set: OneNoteApi 1.1\]
          type:
            - number
  - uid: onenote.OneNote.Outline.appendRichText
    summary: Adds the specified text to the bottom of the Outline.
    name: appendRichText(paragraphText)
    fullName: onenote.OneNote.Outline.appendRichText
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendRichText(paragraphText: string): OneNote.RichText;'
      return:
        type:
          - OneNote.RichText
        description: ''
      parameters:
        - id: paragraphText
          description: 'HTML string to append. \[Api set: OneNoteApi 1.1\]'
          type:
            - string
  - uid: onenote.OneNote.Outline.appendTable
    summary: Adds a table with the specified number of rows and columns to the bottom of the outline.
    name: 'appendTable(rowCount, columnCount, values)'
    fullName: onenote.OneNote.Outline.appendTable
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendTable(rowCount: number, columnCount: number, values?: Array<Array<string>>): OneNote.Table;'
      return:
        type:
          - OneNote.Table
        description: ''
      parameters:
        - id: rowCount
          description: Required. The number of rows in the table.
          type:
            - number
        - id: columnCount
          description: Required. The number of columns in the table.
          type:
            - number
        - id: values
          description: >-
            Optional 2D array. Cells are filled if the corresponding strings are specified in the array. \[Api set:
            OneNoteApi 1.1\]
          type:
            - Array<Array<string>>
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function (context) {

          // Gets the active page.
          var activePage = context.application.getActivePage();

          // Get pageContents of the activePage. 
          var pageContents = activePage.contents;

          // Queue a command to load the pageContents to access its data.
          context.load(pageContents);

          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function() {
                  if (pageContents.items.length != 0 && pageContents.items[0].type == "Outline") {
                      // First item is an outline.
                      var outline = pageContents.items[0].outline;

                      // Queue a command to append a paragraph to the outline.
                      outline.appendTable(2, 2, [[1, 2],[3, 4]]);

                      // Run the queued commands.
                      return context.sync();
                  }
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: onenote.OneNote.Outline.id
    summary: |-
      Gets the ID of the Outline object. Read-only.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: id
    fullName: onenote.OneNote.Outline.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Outline.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: onenote.OneNote.Outline.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): OneNote.Outline;'
      return:
        type:
          - OneNote.Outline
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: onenote.OneNote.Outline.pageContent
    summary: >-
      Gets the PageContent object that contains the Outline. This object defines the position of the Outline on the
      page. Read-only.


      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: pageContent
    fullName: onenote.OneNote.Outline.pageContent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'pageContent: OneNote.PageContent;'
      return:
        type:
          - OneNote.PageContent
  - uid: onenote.OneNote.Outline.paragraphs
    summary: |-
      Gets the collection of Paragraph objects in the Outline. Read-only.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: paragraphs
    fullName: onenote.OneNote.Outline.paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'paragraphs: OneNote.ParagraphCollection;'
      return:
        type:
          - OneNote.ParagraphCollection
