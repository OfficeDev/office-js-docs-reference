### YamlMime:TSType
name: OneNote.ParagraphCollection
uid: 'onenote!OneNote.ParagraphCollection:class'
package: onenote!
fullName: OneNote.ParagraphCollection
summary: >-
  Represents a collection of Paragraph objects.


  \[ [API set: OneNoteApi
  1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'onenote!OneNote.ParagraphCollection#context:member'
    package: onenote!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="onenote!OneNote.RequestContext:class" />'
  - name: count
    uid: 'onenote!OneNote.ParagraphCollection#count:member'
    package: onenote!
    fullName: count
    summary: >-
      Returns the number of paragraphs in the page. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly count: number;'
      return:
        type: number
  - name: items
    uid: 'onenote!OneNote.ParagraphCollection#items:member'
    package: onenote!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: OneNote.Paragraph[];'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />[]'
methods:
  - name: getItem(index)
    uid: 'onenote!OneNote.ParagraphCollection#getItem:member(1)'
    package: onenote!
    fullName: getItem(index)
    summary: >-
      Gets a Paragraph object by ID or by its index in the collection.
      Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(index: number | string): OneNote.Paragraph;'
      parameters:
        - id: index
          description: >-
            The ID of the Paragraph object, or the index location of the
            Paragraph object in the collection.
          type: number | string
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: getItemAt(index)
    uid: 'onenote!OneNote.ParagraphCollection#getItemAt:member(1)'
    package: onenote!
    fullName: getItemAt(index)
    summary: >-
      Gets a paragraph on its position in the collection.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): OneNote.Paragraph;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;

              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the type and richText.text property of this paragraph.
              firstParagraph.load("id,type");


              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Write text from paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
  - name: load(option)
    uid: 'onenote!OneNote.ParagraphCollection#load:member(1)'
    package: onenote!
    fullName: load(option)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call "context.sync()" before reading the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): OneNote.ParagraphCollection` - Where
      option is a comma-delimited string or an array of strings that specify the
      properties to load.


      `load(option?: { select?: string; expand?: string; }):
      OneNote.ParagraphCollection` - Where option.select is a comma-delimited
      string that specifies the properties to load, and options.expand is a
      comma-delimited string that specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?:
      number }): OneNote.ParagraphCollection` - Only available on collection
      types. It is similar to the preceding signature. Option.top specifies the
      maximum number of collection items that can be included in the result.
      Option.skip specifies the number of items that are to be skipped and not
      included in the result. If option.top is specified, the result set will
      start after skipping the specified number of items.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(option?: OneNote.Interfaces.ParagraphCollectionLoadOptions &
        OneNote.Interfaces.CollectionLoadOptions): OneNote.ParagraphCollection;
      parameters:
        - id: option
          description: ''
          type: >-
            <xref
            uid="onenote!OneNote.Interfaces.ParagraphCollectionLoadOptions:interface"
            /> & <xref
            uid="onenote!OneNote.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="onenote!OneNote.ParagraphCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'onenote!OneNote.ParagraphCollection#load:member(2)'
    package: onenote!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.ParagraphCollection;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="onenote!OneNote.ParagraphCollection:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItem(0);
              var paragraphs = pageContent.outline.paragraphs;
              
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      var firstParagraph = paragraphs.items[0];
                      // Write text from first paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its outline's paragraphs.
              var outlinePageContents = ;
              var paragraphs = ;
              var richTextParagraphs = ;
              // Queue a command to load the id and type of each page content in the outline.
              pageContents.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Load all page contents of type Outline
                      $.each(pageContents.items, function(index, pageContent) {
                          if(pageContent.type == 'Outline')
                          {
                              pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');
                              outlinePageContents.push(pageContent);
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Load all rich text paragraphs across outlines
                      $.each(outlinePageContents, function(index, outlinePageContent) {
                          var outline = outlinePageContent.outline;
                          paragraphs = paragraphs.concat(outline.paragraphs.items);
                      });
                      $.each(paragraphs, function(index, paragraph) {
                          if(paragraph.type == 'RichText')
                          {
                              richTextParagraphs.push(paragraph);
                              paragraph.load("id,richText/text");
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Display all rich text paragraphs to the console
                      $.each(richTextParagraphs, function(index, richTextParagraph) {
                          var richText = richTextParagraph.richText;
                          console.log(
                              "Paragraph found with richtext content : " + 
                              richText.text + " and richtext id : " + richText.id);
                      });
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(option)
    uid: 'onenote!OneNote.ParagraphCollection#load:member(3)'
    package: onenote!
    fullName: load(option)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): OneNote.ParagraphCollection;'
      parameters:
        - id: option
          description: ''
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="onenote!OneNote.ParagraphCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'onenote!OneNote.ParagraphCollection#toJSON:member(1)'
    package: onenote!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      `OneNote.ParagraphCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as
      `OneNote.Interfaces.ParagraphCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the
      collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphCollectionData;'
      return:
        type: >-
          <xref
          uid="onenote!OneNote.Interfaces.ParagraphCollectionData:interface" />
        description: ''
  - name: track()
    uid: 'onenote!OneNote.ParagraphCollection#track:member(1)'
    package: onenote!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      context.trackedObjects.add(thisObject). If you are using this object
      across ".sync" calls and outside the sequential execution of a ".run"
      batch, and get an "InvalidObjectPath" error when setting a property or
      invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): OneNote.ParagraphCollection;'
      return:
        type: '<xref uid="onenote!OneNote.ParagraphCollection:class" />'
        description: ''
  - name: untrack()
    uid: 'onenote!OneNote.ParagraphCollection#untrack:member(1)'
    package: onenote!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects
      slows down the host application, so please remember to free any objects
      you add, once you're done using them. You will need to call
      "context.sync()" before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): OneNote.ParagraphCollection;'
      return:
        type: '<xref uid="onenote!OneNote.ParagraphCollection:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
