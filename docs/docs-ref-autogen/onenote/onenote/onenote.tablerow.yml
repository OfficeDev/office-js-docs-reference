### YamlMime:TSType
name: OneNote.TableRow
uid: 'onenote!OneNote.TableRow:class'
package: onenote!
fullName: OneNote.TableRow
summary: Represents a row in a table.
remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: cellCount
    uid: 'onenote!OneNote.TableRow#cellCount:member'
    package: onenote!
    fullName: cellCount
    summary: Gets the number of cells in the row.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type: number
  - name: cells
    uid: 'onenote!OneNote.TableRow#cells:member'
    package: onenote!
    fullName: cells
    summary: Gets the cells in the row.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cells: OneNote.TableCellCollection;'
      return:
        type: '<xref uid="onenote!OneNote.TableCellCollection:class" />'
  - name: context
    uid: 'onenote!OneNote.TableRow#context:member'
    package: onenote!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="onenote!OneNote.RequestContext:class" />'
  - name: id
    uid: 'onenote!OneNote.TableRow#id:member'
    package: onenote!
    fullName: id
    summary: Gets the ID of the row.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: parentTable
    uid: 'onenote!OneNote.TableRow#parentTable:member'
    package: onenote!
    fullName: parentTable
    summary: Gets the parent table.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTable: OneNote.Table;'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
  - name: rowIndex
    uid: 'onenote!OneNote.TableRow#rowIndex:member'
    package: onenote!
    fullName: rowIndex
    summary: Gets the index of the row in its parent table.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type: number
methods:
  - name: clear()
    uid: 'onenote!OneNote.TableRow#clear:member(1)'
    package: onenote!
    fullName: clear()
    summary: Clears the contents of the row.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: ''
  - name: 'insertRowAsSibling(insertLocation, values)'
    uid: 'onenote!OneNote.TableRow#insertRowAsSibling:member(1)'
    package: onenote!
    fullName: 'insertRowAsSibling(insertLocation, values)'
    summary: Inserts a row before or after the current row.
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {
          const app = context.application;
          const outline = app.getActiveOutline();
          
          // Queue a command to load outline.paragraphs and their types.
          context.load(outline, "paragraphs, paragraphs/type");
          
          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();
          
          const paragraphs = outline.paragraphs;
          
          // For each table, get table rows.
          for (let i = 0; i < paragraphs.items.length; i++) {
              const paragraph = paragraphs.items[i];
              if (paragraph.type == "Table") {
                  const table = paragraph.table;
                  
                  // Queue a command to load table.rows.
                  context.load(table, "rows");
                  
                  // Run the queued commands.
                  await context.sync();

                  const rows = table.rows;
                  rows.items[1].insertRowAsSibling("Before", ["cell0", "cell1"]);
                  await context.sync();
              }
          }
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertRowAsSibling(insertLocation: OneNote.InsertLocation, values?: string[]): OneNote.TableRow;'
      parameters:
        - id: insertLocation
          description: Where the new rows should be inserted relative to the current row.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: values
          description: >-
            Strings to insert in the new row, specified as an array. Must not have more cells than in the current row.
            Optional.
          type: 'string[]'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: 'insertRowAsSibling(insertLocationString, values)'
    uid: 'onenote!OneNote.TableRow#insertRowAsSibling:member(2)'
    package: onenote!
    fullName: 'insertRowAsSibling(insertLocationString, values)'
    summary: Inserts a row before or after the current row.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertRowAsSibling(insertLocationString: "Before" | "After", values?: string[]): OneNote.TableRow;'
      parameters:
        - id: insertLocationString
          description: Where the new rows should be inserted relative to the current row.
          type: '"Before" | "After"'
        - id: values
          description: >-
            Strings to insert in the new row, specified as an array. Must not have more cells than in the current row.
            Optional.
          type: 'string[]'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: load(options)
    uid: 'onenote!OneNote.TableRow#load:member(1)'
    package: onenote!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: OneNote.Interfaces.TableRowLoadOptions): OneNote.TableRow;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="onenote!OneNote.Interfaces.TableRowLoadOptions:interface" />'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'onenote!OneNote.TableRow#load:member(2)'
    package: onenote!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.TableRow;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: |-


          #### Examples

          ```TypeScript
          await OneNote.run(async (context) => {
              const app = context.application;
              const outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              context.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              await context.sync();
              
              const paragraphs = outline.paragraphs;
              
              // For each table, get table rows.
              for (let i = 0; i < paragraphs.items.length; i++) {
                  const paragraph = paragraphs.items[i];
                  if (paragraph.type == "Table") {
                      const table = paragraph.table;
                      
                      // Queue a command to load table.rows.
                      context.load(table, "rows");
                      await context.sync();

                      const rows = table.rows;
                      
                      // For each table row, log cell count and row index.
                      for (let i = 0; i < rows.items.length; i++) {
                          console.log("Row " + i + " Id: " + rows.items[i].id);
                          console.log("Row " + i + " Cell Count: " + rows.items[i].cellCount);
                          console.log("Row " + i + " Row Index: " + rows.items[i].rowIndex);
                      }
                      await context.sync();
                  }
              }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'onenote!OneNote.TableRow#load:member(3)'
    package: onenote!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): OneNote.TableRow;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: setShadingColor(colorCode)
    uid: 'onenote!OneNote.TableRow#setShadingColor:member(1)'
    package: onenote!
    fullName: setShadingColor(colorCode)
    summary: Sets the shading color of all cells in the row. The color code to set the cells to.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setShadingColor(colorCode: string): void;'
      parameters:
        - id: colorCode
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'onenote!OneNote.TableRow#toJSON:member(1)'
    package: onenote!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `OneNote.TableRow` object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `OneNote.Interfaces.TableRowData`<!-- -->) that contains shallow copies of any
      loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableRowData;'
      return:
        type: '<xref uid="onenote!OneNote.Interfaces.TableRowData:interface" />'
        description: ''
  - name: track()
    uid: 'onenote!OneNote.TableRow#track:member(1)'
    package: onenote!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): OneNote.TableRow;'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: untrack()
    uid: 'onenote!OneNote.TableRow#untrack:member(1)'
    package: onenote!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): OneNote.TableRow;'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
