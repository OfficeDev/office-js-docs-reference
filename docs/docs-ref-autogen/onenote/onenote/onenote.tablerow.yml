### YamlMime:TSType
name: OneNote.TableRow
uid: 'onenote!OneNote.TableRow:class'
package: onenote!
fullName: OneNote.TableRow
summary: >-
  Represents a row in a table.


  \[ [API set: OneNoteApi
  1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: cellCount
    uid: 'onenote!OneNote.TableRow#cellCount:member'
    package: onenote!
    fullName: cellCount
    summary: >-
      Gets the number of cells in the row. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type: number
  - name: cells
    uid: 'onenote!OneNote.TableRow#cells:member'
    package: onenote!
    fullName: cells
    summary: >-
      Gets the cells in the row. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cells: OneNote.TableCellCollection;'
      return:
        type: '<xref uid="onenote!OneNote.TableCellCollection:class" />'
  - name: context
    uid: 'onenote!OneNote.TableRow#context:member'
    package: onenote!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="onenote!OneNote.RequestContext:class" />'
  - name: id
    uid: 'onenote!OneNote.TableRow#id:member'
    package: onenote!
    fullName: id
    summary: >-
      Gets the ID of the row. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: parentTable
    uid: 'onenote!OneNote.TableRow#parentTable:member'
    package: onenote!
    fullName: parentTable
    summary: >-
      Gets the parent table. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTable: OneNote.Table;'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
  - name: rowIndex
    uid: 'onenote!OneNote.TableRow#rowIndex:member'
    package: onenote!
    fullName: rowIndex
    summary: >-
      Gets the index of the row in its parent table. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type: number
methods:
  - name: clear()
    uid: 'onenote!OneNote.TableRow#clear:member(1)'
    package: onenote!
    fullName: clear()
    summary: >-
      Clears the contents of the row.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: ''
  - name: 'insertRowAsSibling(insertLocation, values)'
    uid: 'onenote!OneNote.TableRow#insertRowAsSibling:member(1)'
    package: onenote!
    fullName: 'insertRowAsSibling(insertLocation, values)'
    summary: >-
      Inserts a row before or after the current row.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertRowAsSibling(insertLocation: OneNote.InsertLocation, values?:
        string[]): OneNote.TableRow;
      parameters:
        - id: insertLocation
          description: Where the new rows should be inserted relative to the current row.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: values
          description: >-
            Strings to insert in the new row, specified as an array. Must not
            have more cells than in the current row. Optional.
          type: 'string[]'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get table rows.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          
                          // Queue a command to load table.rows.
                          ctx.load(table, "rows");
                          
                          // Run the queued commands
                          return ctx.sync().then(function() {
                              var rows = table.rows;
                              rows.items[1].insertRowAsSibling("Before", ["cell0", "cell1"]);
                              return ctx.sync();
                          });
                      }
                  }
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertRowAsSibling(insertLocationString, values)'
    uid: 'onenote!OneNote.TableRow#insertRowAsSibling:member(2)'
    package: onenote!
    fullName: 'insertRowAsSibling(insertLocationString, values)'
    summary: >-
      Inserts a row before or after the current row.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertRowAsSibling(insertLocationString: "Before" | "After", values?:
        string[]): OneNote.TableRow;
      parameters:
        - id: insertLocationString
          description: Where the new rows should be inserted relative to the current row.
          type: '"Before" | "After"'
        - id: values
          description: >-
            Strings to insert in the new row, specified as an array. Must not
            have more cells than in the current row. Optional.
          type: 'string[]'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: load(option)
    uid: 'onenote!OneNote.TableRow#load:member(1)'
    package: onenote!
    fullName: load(option)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call "context.sync()" before reading the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): OneNote.TableRow` - Where option is a
      comma-delimited string or an array of strings that specify the properties
      to load.


      `load(option?: { select?: string; expand?: string; }): OneNote.TableRow` -
      Where option.select is a comma-delimited string that specifies the
      properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?:
      number }): OneNote.TableRow` - Only available on collection types. It is
      similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip
      specifies the number of items that are to be skipped and not included in
      the result. If option.top is specified, the result set will start after
      skipping the specified number of items.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(option?: OneNote.Interfaces.TableRowLoadOptions): OneNote.TableRow;'
      parameters:
        - id: option
          description: ''
          type: >-
            <xref uid="onenote!OneNote.Interfaces.TableRowLoadOptions:interface"
            />
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'onenote!OneNote.TableRow#load:member(2)'
    package: onenote!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.TableRow;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get table rows.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          
                          // Queue a command to load table.rows.
                          ctx.load(table, "rows");
                          return ctx.sync().then(function() {
                              var rows = table.rows;
                              
                              // for each table row, log cell count and row index.
                              for (var i = 0; i < rows.items.length; i++) {
                                  console.log("Row " + i + " Id: " + rows.items[i].id);
                                  console.log("Row " + i + " Cell Count: " + rows.items[i].cellCount);
                                  console.log("Row " + i + " Row Index: " + rows.items[i].rowIndex);
                              }
                              return ctx.sync();
                          });
                      }
                  }
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get table rows.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          
                          // Queue a command to load parentTable and cells of each row in the table.
                          ctx.load(table, "rows/parentTable, rows/cells");
                          return ctx.sync().then(function() {
                              var rows = table.rows;
                              
                              // for each row, log parentTable and cells
                              for (var i = 0; i < rows.items.length; i++) {
                                  console.log("Row " + i + " Parent Table Id: " + rows.items[i].parentTable.id);
                                  var cells = rows.items[i].cells;
                                  for (var j = 0 ; j < cells.items.length; j++) {
                                      console.log("Row " + i + " Cell " + j + " Id: " + cells.items[j].id);
                                  }
                              }
                              return ctx.sync();
                          });
                      }
                  }
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(option)
    uid: 'onenote!OneNote.TableRow#load:member(3)'
    package: onenote!
    fullName: load(option)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(option?: {
                    select?: string;
                    expand?: string;
                }): OneNote.TableRow;
      parameters:
        - id: option
          description: ''
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: setShadingColor(colorCode)
    uid: 'onenote!OneNote.TableRow#setShadingColor:member(1)'
    package: onenote!
    fullName: setShadingColor(colorCode)
    summary: >-
      Sets the shading color of all cells in the row. The color code to set the
      cells to.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setShadingColor(colorCode: string): void;'
      parameters:
        - id: colorCode
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'onenote!OneNote.TableRow#toJSON:member(1)'
    package: onenote!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original OneNote.TableRow object
      is an API object, the `toJSON` method returns a plain JavaScript object
      (typed as `OneNote.Interfaces.TableRowData`<!-- -->) that contains shallow
      copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableRowData;'
      return:
        type: '<xref uid="onenote!OneNote.Interfaces.TableRowData:interface" />'
        description: ''
  - name: track()
    uid: 'onenote!OneNote.TableRow#track:member(1)'
    package: onenote!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      context.trackedObjects.add(thisObject). If you are using this object
      across ".sync" calls and outside the sequential execution of a ".run"
      batch, and get an "InvalidObjectPath" error when setting a property or
      invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): OneNote.TableRow;'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
  - name: untrack()
    uid: 'onenote!OneNote.TableRow#untrack:member(1)'
    package: onenote!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects
      slows down the host application, so please remember to free any objects
      you add, once you're done using them. You will need to call
      "context.sync()" before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): OneNote.TableRow;'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
