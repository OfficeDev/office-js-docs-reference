### YamlMime:TSType
name: OneNote.Table
uid: 'onenote!OneNote.Table:class'
package: onenote!
fullName: OneNote.Table
summary: >-
  Represents a table in a OneNote page.


  \[ [API set: OneNoteApi
  1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: borderVisible
    uid: 'onenote!OneNote.Table#borderVisible:member'
    package: onenote!
    fullName: borderVisible
    summary: >-
      Gets or sets whether the borders are visible or not. True if they are
      visible, false if they are hidden.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'borderVisible: boolean;'
      return:
        type: boolean
  - name: columnCount
    uid: 'onenote!OneNote.Table#columnCount:member'
    package: onenote!
    fullName: columnCount
    summary: >-
      Gets the number of columns in the table.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type: number
  - name: context
    uid: 'onenote!OneNote.Table#context:member'
    package: onenote!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="onenote!OneNote.RequestContext:class" />'
  - name: id
    uid: 'onenote!OneNote.Table#id:member'
    package: onenote!
    fullName: id
    summary: >-
      Gets the ID of the table. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: paragraph
    uid: 'onenote!OneNote.Table#paragraph:member'
    package: onenote!
    fullName: paragraph
    summary: >-
      Gets the Paragraph object that contains the Table object. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly paragraph: OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
  - name: rowCount
    uid: 'onenote!OneNote.Table#rowCount:member'
    package: onenote!
    fullName: rowCount
    summary: >-
      Gets the number of rows in the table.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type: number
  - name: rows
    uid: 'onenote!OneNote.Table#rows:member'
    package: onenote!
    fullName: rows
    summary: >-
      Gets all of the table rows. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rows: OneNote.TableRowCollection;'
      return:
        type: '<xref uid="onenote!OneNote.TableRowCollection:class" />'
methods:
  - name: appendColumn(values)
    uid: 'onenote!OneNote.Table#appendColumn:member(1)'
    package: onenote!
    fullName: appendColumn(values)
    summary: >-
      Adds a column to the end of the table. Values, if specified, are set in
      the new column. Otherwise the column is empty.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'appendColumn(values?: string[]): void;'
      parameters:
        - id: values
          description: >-
            Optional. Strings to insert in the new column, specified as an
            array. Must not have more values than rows in the table.
          type: 'string[]'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, append a column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          table.appendColumn(["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: appendRow(values)
    uid: 'onenote!OneNote.Table#appendRow:member(1)'
    package: onenote!
    fullName: appendRow(values)
    summary: >-
      Adds a row to the end of the table. Values, if specified, are set in the
      new row. Otherwise the row is empty.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'appendRow(values?: string[]): OneNote.TableRow;'
      parameters:
        - id: values
          description: >-
            Optional. Strings to insert in the new row, specified as an array.
            Must not have more values than columns in the table.
          type: 'string[]'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, append a column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var row = table.appendRow(["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: clear()
    uid: 'onenote!OneNote.Table#clear:member(1)'
    package: onenote!
    fullName: clear()
    summary: >-
      Clears the contents of the table.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: ''
  - name: 'getCell(rowIndex, cellIndex)'
    uid: 'onenote!OneNote.Table#getCell:member(1)'
    package: onenote!
    fullName: 'getCell(rowIndex, cellIndex)'
    summary: >-
      Gets the table cell at a specified row and column.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCell(rowIndex: number, cellIndex: number): OneNote.TableCell;'
      parameters:
        - id: rowIndex
          description: The index of the row.
          type: number
        - id: cellIndex
          description: The index of the cell in the row.
          type: number
      return:
        type: '<xref uid="onenote!OneNote.TableCell:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a cell in the second row and third column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(2 /*Row Index*/, 3 /*Column Index*/);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertColumn(index, values)'
    uid: 'onenote!OneNote.Table#insertColumn:member(1)'
    package: onenote!
    fullName: 'insertColumn(index, values)'
    summary: >-
      Inserts a column at the given index in the table. Values, if specified,
      are set in the new column. Otherwise the column is empty.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertColumn(index: number, values?: string[]): void;'
      parameters:
        - id: index
          description: Index where the column will be inserted in the table.
          type: number
        - id: values
          description: >-
            Optional. Strings to insert in the new column, specified as an
            array. Must not have more values than rows in the table.
          type: 'string[]'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, insert a column at index two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          table.insertColumn(2, ["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertRow(index, values)'
    uid: 'onenote!OneNote.Table#insertRow:member(1)'
    package: onenote!
    fullName: 'insertRow(index, values)'
    summary: >-
      Inserts a row at the given index in the table. Values, if specified, are
      set in the new row. Otherwise the row is empty.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertRow(index: number, values?: string[]): OneNote.TableRow;'
      parameters:
        - id: index
          description: Index where the row will be inserted in the table.
          type: number
        - id: values
          description: >-
            Optional. Strings to insert in the new row, specified as an array.
            Must not have more values than columns in the table.
          type: 'string[]'
      return:
        type: '<xref uid="onenote!OneNote.TableRow:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, insert a row at index two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var row = table.insertRow(2, ["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(option)
    uid: 'onenote!OneNote.Table#load:member(1)'
    package: onenote!
    fullName: load(option)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call "context.sync()" before reading the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): OneNote.Table` - Where option is a
      comma-delimited string or an array of strings that specify the properties
      to load.


      `load(option?: { select?: string; expand?: string; }): OneNote.Table` -
      Where option.select is a comma-delimited string that specifies the
      properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?:
      number }): OneNote.Table` - Only available on collection types. It is
      similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip
      specifies the number of items that are to be skipped and not included in
      the result. If option.top is specified, the result set will start after
      skipping the specified number of items.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(option?: OneNote.Interfaces.TableLoadOptions): OneNote.Table;'
      parameters:
        - id: option
          description: ''
          type: '<xref uid="onenote!OneNote.Interfaces.TableLoadOptions:interface" />'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'onenote!OneNote.Table#load:member(2)'
    package: onenote!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Table;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // For each table, log properties.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          ctx.load(table);
                          return ctx.sync().then(function() {
                              console.log("Table Id: " + table.id);
                              console.log("Row Count: " + table.rowCount);
                              console.log("Column Count: " + table.columnCount);
                              return ctx.sync();
                          });
                      }
                  }
              });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, log its paragraph id.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          ctx.load(table, "paragraph/id, rows/id");
                          return ctx.sync().then(function() {
                              console.log("Paragraph Id: " + table.paragraph.id);
                              var rows = table.rows;
                              
                              // for each rows in the table, log row index and id.
                              for (var i = 0; i < rows.items.length; i++) {
                                  console.log("Row " + i + " Id: " + rows.items[i].id);
                              }
                              return ctx.sync();
                          });
                      }
                  }
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(option)
    uid: 'onenote!OneNote.Table#load:member(3)'
    package: onenote!
    fullName: load(option)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(option?: {
                    select?: string;
                    expand?: string;
                }): OneNote.Table;
      parameters:
        - id: option
          description: ''
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'onenote!OneNote.Table#set:member(1)'
    package: onenote!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: OneNote.Table): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.TableUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: '<xref uid="onenote!OneNote.Interfaces.TableUpdateData:interface" />'
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'onenote!OneNote.Table#set:member(2)'
    package: onenote!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: OneNote.Table): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="onenote!OneNote.Table:class" />'
      return:
        type: void
        description: ''
  - name: setShadingColor(colorCode)
    uid: 'onenote!OneNote.Table#setShadingColor:member(1)'
    package: onenote!
    fullName: setShadingColor(colorCode)
    summary: >-
      Sets the shading color of all cells in the table. The color code to set
      the cells to.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setShadingColor(colorCode: string): void;'
      parameters:
        - id: colorCode
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'onenote!OneNote.Table#toJSON:member(1)'
    package: onenote!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original OneNote.Table object is
      an API object, the `toJSON` method returns a plain JavaScript object
      (typed as `OneNote.Interfaces.TableData`<!-- -->) that contains shallow
      copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableData;'
      return:
        type: '<xref uid="onenote!OneNote.Interfaces.TableData:interface" />'
        description: ''
  - name: track()
    uid: 'onenote!OneNote.Table#track:member(1)'
    package: onenote!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      context.trackedObjects.add(thisObject). If you are using this object
      across ".sync" calls and outside the sequential execution of a ".run"
      batch, and get an "InvalidObjectPath" error when setting a property or
      invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): OneNote.Table;'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: ''
  - name: untrack()
    uid: 'onenote!OneNote.Table#untrack:member(1)'
    package: onenote!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects
      slows down the host application, so please remember to free any objects
      you add, once you're done using them. You will need to call
      "context.sync()" before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): OneNote.Table;'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
