### YamlMime:TSType
name: OneNote.Paragraph
uid: 'onenote!OneNote.Paragraph:class'
package: onenote!
fullName: OneNote.Paragraph
summary: A container for the visible content on a page. A Paragraph can contain any one ParagraphType type of content.
remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'onenote!OneNote.Paragraph#context:member'
    package: onenote!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="onenote!OneNote.RequestContext:class" />'
  - name: id
    uid: 'onenote!OneNote.Paragraph#id:member'
    package: onenote!
    fullName: id
    summary: Gets the ID of the Paragraph object.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: image
    uid: 'onenote!OneNote.Paragraph#image:member'
    package: onenote!
    fullName: image
    summary: Gets the Image object in the Paragraph. Throws an exception if ParagraphType is not Image.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly image: OneNote.Image;'
      return:
        type: '<xref uid="onenote!OneNote.Image:class" />'
  - name: inkWords
    uid: 'onenote!OneNote.Paragraph#inkWords:member'
    package: onenote!
    fullName: inkWords
    summary: Gets the Ink collection in the Paragraph. Throws an exception if ParagraphType is not Ink.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly inkWords: OneNote.InkWordCollection;'
      return:
        type: '<xref uid="onenote!OneNote.InkWordCollection:class" />'
  - name: outline
    uid: 'onenote!OneNote.Paragraph#outline:member'
    package: onenote!
    fullName: outline
    summary: Gets the Outline object that contains the Paragraph.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly outline: OneNote.Outline;'
      return:
        type: '<xref uid="onenote!OneNote.Outline:class" />'
  - name: paragraphs
    uid: 'onenote!OneNote.Paragraph#paragraphs:member'
    package: onenote!
    fullName: paragraphs
    summary: The collection of paragraphs under this paragraph.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly paragraphs: OneNote.ParagraphCollection;'
      return:
        type: '<xref uid="onenote!OneNote.ParagraphCollection:class" />'
  - name: parentParagraph
    uid: 'onenote!OneNote.Paragraph#parentParagraph:member'
    package: onenote!
    fullName: parentParagraph
    summary: Gets the parent paragraph object. Throws if a parent paragraph does not exist.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentParagraph: OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
  - name: parentParagraphOrNull
    uid: 'onenote!OneNote.Paragraph#parentParagraphOrNull:member'
    package: onenote!
    fullName: parentParagraphOrNull
    summary: Gets the parent paragraph object. Returns null if a parent paragraph doesn't exist.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentParagraphOrNull: OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
  - name: parentTableCell
    uid: 'onenote!OneNote.Paragraph#parentTableCell:member'
    package: onenote!
    fullName: parentTableCell
    summary: >-
      Gets the TableCell object that contains the Paragraph if one exists. If parent isn't a TableCell, throws
      ItemNotFound.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTableCell: OneNote.TableCell;'
      return:
        type: '<xref uid="onenote!OneNote.TableCell:class" />'
  - name: parentTableCellOrNull
    uid: 'onenote!OneNote.Paragraph#parentTableCellOrNull:member'
    package: onenote!
    fullName: parentTableCellOrNull
    summary: 'Gets the TableCell object that contains the Paragraph if one exists. If parent isn''t a TableCell, returns null.'
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTableCellOrNull: OneNote.TableCell;'
      return:
        type: '<xref uid="onenote!OneNote.TableCell:class" />'
  - name: richText
    uid: 'onenote!OneNote.Paragraph#richText:member'
    package: onenote!
    fullName: richText
    summary: Gets the RichText object in the Paragraph. Throws an exception if ParagraphType is not RichText. Read-only
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly richText: OneNote.RichText;'
      return:
        type: '<xref uid="onenote!OneNote.RichText:class" />'
  - name: table
    uid: 'onenote!OneNote.Paragraph#table:member'
    package: onenote!
    fullName: table
    summary: Gets the Table object in the Paragraph. Throws an exception if ParagraphType isn't Table.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly table: OneNote.Table;'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
  - name: type
    uid: 'onenote!OneNote.Paragraph#type:member'
    package: onenote!
    fullName: type
    summary: Gets the type of the Paragraph object.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly type: OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other";'
      return:
        type: '<xref uid="onenote!OneNote.ParagraphType:enum" /> | "RichText" | "Image" | "Table" | "Ink" | "Other"'
methods:
  - name: 'addNoteTag(type, status)'
    uid: 'onenote!OneNote.Paragraph#addNoteTag:member(1)'
    package: onenote!
    fullName: 'addNoteTag(type, status)'
    summary: Add NoteTag to the paragraph.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addNoteTag(type: OneNote.NoteTagType, status: OneNote.NoteTagStatus): OneNote.NoteTag;'
      parameters:
        - id: type
          description: The type of the NoteTag.
          type: '<xref uid="onenote!OneNote.NoteTagType:enum" />'
        - id: status
          description: The status of the NoteTag.
          type: '<xref uid="onenote!OneNote.NoteTagStatus:enum" />'
      return:
        type: '<xref uid="onenote!OneNote.NoteTag:class" />'
        description: ''
  - name: 'addNoteTag(typeString, statusString)'
    uid: 'onenote!OneNote.Paragraph#addNoteTag:member(2)'
    package: onenote!
    fullName: 'addNoteTag(typeString, statusString)'
    summary: Add NoteTag to the paragraph.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addNoteTag(typeString: "Unknown" | "ToDo" | "Important" | "Question" | "Contact" | "Address" | "PhoneNumber" |
        "Website" | "Idea" | "Critical" | "ToDoPriority1" | "ToDoPriority2", statusString: "Unknown" | "Normal" |
        "Completed" | "Disabled" | "OutlookTask" | "TaskNotSyncedYet" | "TaskRemoved"): OneNote.NoteTag;
      parameters:
        - id: typeString
          description: The type of the NoteTag.
          type: >-
            "Unknown" | "ToDo" | "Important" | "Question" | "Contact" | "Address" | "PhoneNumber" | "Website" | "Idea" |
            "Critical" | "ToDoPriority1" | "ToDoPriority2"
        - id: statusString
          description: The status of the NoteTag.
          type: '"Unknown" | "Normal" | "Completed" | "Disabled" | "OutlookTask" | "TaskNotSyncedYet" | "TaskRemoved"'
      return:
        type: '<xref uid="onenote!OneNote.NoteTag:class" />'
        description: ''
  - name: delete()
    uid: 'onenote!OneNote.Paragraph#delete:member(1)'
    package: onenote!
    fullName: delete()
    summary: Deletes the paragraph
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // Get the collection of pageContent items from the page.
          const pageContents = context.application.getActivePage().contents;

          // Get the first PageContent on the page assuming its an outline, get the outline's paragraphs.
          const pageContent = pageContents.getItemAt(0);
          
          const paragraphs = pageContent.outline.paragraphs;
          
          const firstParagraph = paragraphs.getItemAt(0);
          
          // Queue a command to load the id and type of the first paragraph.
          firstParagraph.load("id,type");

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();
                  
          // Queue a command to delete the first paragraph.
          firstParagraph.delete();
          
          // Run the command to delete it.
          await context.sync();
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getParagraphInfo()
    uid: 'onenote!OneNote.Paragraph#getParagraphInfo:member(1)'
    package: onenote!
    fullName: getParagraphInfo()
    summary: Get list information of paragraph
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getParagraphInfo(): OfficeExtension.ClientResult<OneNote.ParagraphInfo>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref
          uid="onenote!OneNote.ParagraphInfo:interface" />&gt;
        description: ''
  - name: 'insertHtmlAsSibling(insertLocation, html)'
    uid: 'onenote!OneNote.Paragraph#insertHtmlAsSibling:member(1)'
    package: onenote!
    fullName: 'insertHtmlAsSibling(insertLocation, html)'
    summary: Inserts the specified HTML content
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // Get the collection of pageContent items from the page.
          const pageContents = context.application.getActivePage().contents;

          // Get the first PageContent on the page.
          // Assuming its an outline, get the outline's paragraphs.
          const pageContent = pageContents.getItemAt(0);
          const paragraphs = pageContent.outline.paragraphs;
          const firstParagraph = paragraphs.getItemAt(0);

          // Queue a command to load the id and type of the first paragraph.
          firstParagraph.load("id,type");

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();

          // Queue commands to insert before and after the first paragraph.
          firstParagraph.insertHtmlAsSibling("Before", "<p>ContentBeforeFirstParagraph</p>");
          firstParagraph.insertHtmlAsSibling("After", "<p>ContentAfterFirstParagraph</p>");
          
          // Run the command to run inserts.
          await context.sync();
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertHtmlAsSibling(insertLocation: OneNote.InsertLocation, html: string): void;'
      parameters:
        - id: insertLocation
          description: The location of new contents relative to the current Paragraph.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: html
          description: >-
            An HTML string that describes the visual presentation of the content. See [Supported
            HTML](https://learn.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html)
            for the OneNote add-ins JavaScript API.
          type: string
      return:
        type: void
        description: ''
  - name: 'insertHtmlAsSibling(insertLocationString, html)'
    uid: 'onenote!OneNote.Paragraph#insertHtmlAsSibling:member(2)'
    package: onenote!
    fullName: 'insertHtmlAsSibling(insertLocationString, html)'
    summary: Inserts the specified HTML content
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertHtmlAsSibling(insertLocationString: "Before" | "After", html: string): void;'
      parameters:
        - id: insertLocationString
          description: The location of new contents relative to the current Paragraph.
          type: '"Before" | "After"'
        - id: html
          description: >-
            An HTML string that describes the visual presentation of the content. See [Supported
            HTML](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) for
            the OneNote add-ins JavaScript API.
          type: string
      return:
        type: void
        description: ''
  - name: 'insertImageAsSibling(insertLocation, base64EncodedImage, width, height)'
    uid: 'onenote!OneNote.Paragraph#insertImageAsSibling:member(1)'
    package: onenote!
    fullName: 'insertImageAsSibling(insertLocation, base64EncodedImage, width, height)'
    summary: Inserts the image at the specified insert location..
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // Get the collection of pageContent items from the page.
          const pageContents = context.application.getActivePage().contents;

          // Get the first PageContent on the page.
          // Assuming its an outline, get the outline's paragraphs.
          const pageContent = pageContents.getItemAt(0);
          const paragraphs = pageContent.outline.paragraphs;
          const firstParagraph = paragraphs.getItemAt(0);

          // Queue a command to load the id and type of the first paragraph.
          firstParagraph.load("id,type");

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();

          // Queue commands to insert before and after the first paragraph.
          firstParagraph.insertImageAsSibling("Before", "R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==");
          firstParagraph.insertImageAsSibling("After", "R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==");
          
          // Run the command to insert images.
          await context.sync();
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertImageAsSibling(insertLocation: OneNote.InsertLocation, base64EncodedImage: string, width: number, height:
        number): OneNote.Image;
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: base64EncodedImage
          description: HTML string to append.
          type: string
        - id: width
          description: Optional. Width in the unit of Points. The default value is null and image width will be respected.
          type: number
        - id: height
          description: Optional. Height in the unit of Points. The default value is null and image height will be respected.
          type: number
      return:
        type: '<xref uid="onenote!OneNote.Image:class" />'
        description: ''
  - name: 'insertImageAsSibling(insertLocationString, base64EncodedImage, width, height)'
    uid: 'onenote!OneNote.Paragraph#insertImageAsSibling:member(2)'
    package: onenote!
    fullName: 'insertImageAsSibling(insertLocationString, base64EncodedImage, width, height)'
    summary: Inserts the image at the specified insert location.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertImageAsSibling(insertLocationString: "Before" | "After", base64EncodedImage: string, width: number,
        height: number): OneNote.Image;
      parameters:
        - id: insertLocationString
          description: The location of the table relative to the current Paragraph.
          type: '"Before" | "After"'
        - id: base64EncodedImage
          description: HTML string to append.
          type: string
        - id: width
          description: Optional. Width in the unit of Points. The default value is null and image width will be respected.
          type: number
        - id: height
          description: Optional. Height in the unit of Points. The default value is null and image height will be respected.
          type: number
      return:
        type: '<xref uid="onenote!OneNote.Image:class" />'
        description: ''
  - name: 'insertRichTextAsSibling(insertLocation, paragraphText)'
    uid: 'onenote!OneNote.Paragraph#insertRichTextAsSibling:member(1)'
    package: onenote!
    fullName: 'insertRichTextAsSibling(insertLocation, paragraphText)'
    summary: Inserts the paragraph text at the specifiec insert location.
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // Get the collection of pageContent items from the page.
          const pageContents = context.application.getActivePage().contents;

          // Get the first PageContent on the page assuming its an outline, get the outline's paragraphs.
          const pageContent = pageContents.getItemAt(0);
          const paragraphs = pageContent.outline.paragraphs;
          const firstParagraph = paragraphs.getItemAt(0);

          // Queue a command to load the id and type of the first paragraph.
          firstParagraph.load("id,type");

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();

          // Queue commands to insert before and after the first paragraph.
          firstParagraph.insertRichTextAsSibling("Before", "Text Appears Before Paragraph");
          firstParagraph.insertRichTextAsSibling("After", "Text Appears After Paragraph");
          
          // Run the command to insert text contents.
          await context.sync();
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertRichTextAsSibling(insertLocation: OneNote.InsertLocation, paragraphText: string): OneNote.RichText;'
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: paragraphText
          description: HTML string to append.
          type: string
      return:
        type: '<xref uid="onenote!OneNote.RichText:class" />'
        description: ''
  - name: 'insertRichTextAsSibling(insertLocationString, paragraphText)'
    uid: 'onenote!OneNote.Paragraph#insertRichTextAsSibling:member(2)'
    package: onenote!
    fullName: 'insertRichTextAsSibling(insertLocationString, paragraphText)'
    summary: Inserts the paragraph text at the specifiec insert location.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertRichTextAsSibling(insertLocationString: "Before" | "After", paragraphText: string): OneNote.RichText;'
      parameters:
        - id: insertLocationString
          description: The location of the table relative to the current Paragraph.
          type: '"Before" | "After"'
        - id: paragraphText
          description: HTML string to append.
          type: string
      return:
        type: '<xref uid="onenote!OneNote.RichText:class" />'
        description: ''
  - name: 'insertTableAsSibling(insertLocation, rowCount, columnCount, values)'
    uid: 'onenote!OneNote.Paragraph#insertTableAsSibling:member(1)'
    package: onenote!
    fullName: 'insertTableAsSibling(insertLocation, rowCount, columnCount, values)'
    summary: Adds a table with the specified number of rows and columns before or after the current paragraph.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertTableAsSibling(insertLocation: OneNote.InsertLocation, rowCount: number, columnCount: number, values?:
        string[][]): OneNote.Table;
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: rowCount
          description: The number of rows in the table.
          type: number
        - id: columnCount
          description: The number of columns in the table.
          type: number
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type: 'string[][]'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: ''
  - name: 'insertTableAsSibling(insertLocationString, rowCount, columnCount, values)'
    uid: 'onenote!OneNote.Paragraph#insertTableAsSibling:member(2)'
    package: onenote!
    fullName: 'insertTableAsSibling(insertLocationString, rowCount, columnCount, values)'
    summary: Adds a table with the specified number of rows and columns before or after the current paragraph.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertTableAsSibling(insertLocationString: "Before" | "After", rowCount: number, columnCount: number, values?:
        string[][]): OneNote.Table;
      parameters:
        - id: insertLocationString
          description: The location of the table relative to the current Paragraph.
          type: '"Before" | "After"'
        - id: rowCount
          description: The number of rows in the table.
          type: number
        - id: columnCount
          description: The number of columns in the table.
          type: number
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type: 'string[][]'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: ''
  - name: load(options)
    uid: 'onenote!OneNote.Paragraph#load:member(1)'
    package: onenote!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: OneNote.Interfaces.ParagraphLoadOptions): OneNote.Paragraph;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="onenote!OneNote.Interfaces.ParagraphLoadOptions:interface" />'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'onenote!OneNote.Paragraph#load:member(2)'
    package: onenote!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Paragraph;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: |-


          #### Examples

          ```TypeScript
          await OneNote.run(async (context) => {

              // Get the collection of pageContent items from the page.
              const pageContents = context.application.getActivePage().contents;
              
              // Queue a command to load the outline property of each pageContent.
              pageContents.load("outline");
                  
              // Get the first PageContent on the page, and then get its Outline.
              const pageContent = pageContents._GetItem(0);
              const paragraphs = pageContent.outline.paragraphs;
                      
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");
                      
              // Run the queued commands, and return a promise to indicate task completion.
              await context.sync();
              // Write the text.
              $.each(paragraphs.items, function(index, paragraph) {
                  console.log("Paragraph type: " + paragraph.type);
                  console.log("Paragraph ID: " + paragraph.id);
              });
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'onenote!OneNote.Paragraph#load:member(3)'
    package: onenote!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): OneNote.Paragraph;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'onenote!OneNote.Paragraph#set:member(1)'
    package: onenote!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="onenote!OneNote.Interfaces.ParagraphUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'onenote!OneNote.Paragraph#set:member(2)'
    package: onenote!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: OneNote.Paragraph): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="onenote!OneNote.Paragraph:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'onenote!OneNote.Paragraph#toJSON:member(1)'
    package: onenote!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `OneNote.Paragraph` object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `OneNote.Interfaces.ParagraphData`<!-- -->) that contains shallow copies of any
      loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphData;'
      return:
        type: '<xref uid="onenote!OneNote.Interfaces.ParagraphData:interface" />'
        description: ''
  - name: track()
    uid: 'onenote!OneNote.Paragraph#track:member(1)'
    package: onenote!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: untrack()
    uid: 'onenote!OneNote.Paragraph#untrack:member(1)'
    package: onenote!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
