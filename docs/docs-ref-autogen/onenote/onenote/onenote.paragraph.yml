### YamlMime:TSType
name: OneNote.Paragraph
uid: 'onenote!OneNote.Paragraph:class'
package: onenote!
fullName: OneNote.Paragraph
summary: >-
  A container for the visible content on a page. A Paragraph can contain any one
  ParagraphType type of content.


  \[ [API set: OneNoteApi
  1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'onenote!OneNote.Paragraph#context:member'
    package: onenote!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="onenote!OneNote.RequestContext:class" />'
  - name: id
    uid: 'onenote!OneNote.Paragraph#id:member'
    package: onenote!
    fullName: id
    summary: >-
      Gets the ID of the Paragraph object. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: image
    uid: 'onenote!OneNote.Paragraph#image:member'
    package: onenote!
    fullName: image
    summary: >-
      Gets the Image object in the Paragraph. Throws an exception if
      ParagraphType is not Image. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly image: OneNote.Image;'
      return:
        type: '<xref uid="onenote!OneNote.Image:class" />'
  - name: inkWords
    uid: 'onenote!OneNote.Paragraph#inkWords:member'
    package: onenote!
    fullName: inkWords
    summary: >-
      Gets the Ink collection in the Paragraph. Throws an exception if
      ParagraphType is not Ink. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly inkWords: OneNote.InkWordCollection;'
      return:
        type: '<xref uid="onenote!OneNote.InkWordCollection:class" />'
  - name: outline
    uid: 'onenote!OneNote.Paragraph#outline:member'
    package: onenote!
    fullName: outline
    summary: >-
      Gets the Outline object that contains the Paragraph. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly outline: OneNote.Outline;'
      return:
        type: '<xref uid="onenote!OneNote.Outline:class" />'
  - name: paragraphs
    uid: 'onenote!OneNote.Paragraph#paragraphs:member'
    package: onenote!
    fullName: paragraphs
    summary: >-
      The collection of paragraphs under this paragraph. Read only


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly paragraphs: OneNote.ParagraphCollection;'
      return:
        type: '<xref uid="onenote!OneNote.ParagraphCollection:class" />'
  - name: parentParagraph
    uid: 'onenote!OneNote.Paragraph#parentParagraph:member'
    package: onenote!
    fullName: parentParagraph
    summary: >-
      Gets the parent paragraph object. Throws if a parent paragraph does not
      exist. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentParagraph: OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
  - name: parentParagraphOrNull
    uid: 'onenote!OneNote.Paragraph#parentParagraphOrNull:member'
    package: onenote!
    fullName: parentParagraphOrNull
    summary: >-
      Gets the parent paragraph object. Returns null if a parent paragraph does
      not exist. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentParagraphOrNull: OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
  - name: parentTableCell
    uid: 'onenote!OneNote.Paragraph#parentTableCell:member'
    package: onenote!
    fullName: parentTableCell
    summary: >-
      Gets the TableCell object that contains the Paragraph if one exists. If
      parent is not a TableCell, throws ItemNotFound. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTableCell: OneNote.TableCell;'
      return:
        type: '<xref uid="onenote!OneNote.TableCell:class" />'
  - name: parentTableCellOrNull
    uid: 'onenote!OneNote.Paragraph#parentTableCellOrNull:member'
    package: onenote!
    fullName: parentTableCellOrNull
    summary: >-
      Gets the TableCell object that contains the Paragraph if one exists. If
      parent is not a TableCell, returns null. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTableCellOrNull: OneNote.TableCell;'
      return:
        type: '<xref uid="onenote!OneNote.TableCell:class" />'
  - name: richText
    uid: 'onenote!OneNote.Paragraph#richText:member'
    package: onenote!
    fullName: richText
    summary: >-
      Gets the RichText object in the Paragraph. Throws an exception if
      ParagraphType is not RichText. Read-only


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly richText: OneNote.RichText;'
      return:
        type: '<xref uid="onenote!OneNote.RichText:class" />'
  - name: table
    uid: 'onenote!OneNote.Paragraph#table:member'
    package: onenote!
    fullName: table
    summary: >-
      Gets the Table object in the Paragraph. Throws an exception if
      ParagraphType is not Table. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly table: OneNote.Table;'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
  - name: type
    uid: 'onenote!OneNote.Paragraph#type:member'
    package: onenote!
    fullName: type
    summary: >-
      Gets the type of the Paragraph object. Read-only.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly type: OneNote.ParagraphType | "RichText" | "Image" | "Table" |
        "Ink" | "Other";
      return:
        type: >-
          <xref uid="onenote!OneNote.ParagraphType:enum" /> | "RichText" |
          "Image" | "Table" | "Ink" | "Other"
methods:
  - name: 'addNoteTag(type, status)'
    uid: 'onenote!OneNote.Paragraph#addNoteTag:member(1)'
    package: onenote!
    fullName: 'addNoteTag(type, status)'
    summary: >-
      Add NoteTag to the paragraph.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addNoteTag(type: OneNote.NoteTagType, status: OneNote.NoteTagStatus):
        OneNote.NoteTag;
      parameters:
        - id: type
          description: The type of the NoteTag.
          type: '<xref uid="onenote!OneNote.NoteTagType:enum" />'
        - id: status
          description: The status of the NoteTag.
          type: '<xref uid="onenote!OneNote.NoteTagStatus:enum" />'
      return:
        type: '<xref uid="onenote!OneNote.NoteTag:class" />'
        description: ''
  - name: 'addNoteTag(typeString, status)'
    uid: 'onenote!OneNote.Paragraph#addNoteTag:member(2)'
    package: onenote!
    fullName: 'addNoteTag(typeString, status)'
    summary: >-
      Add NoteTag to the paragraph.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addNoteTag(typeString: "Unknown" | "ToDo" | "Important" | "Question" |
        "Contact" | "Address" | "PhoneNumber" | "Website" | "Idea" | "Critical"
        | "ToDoPriority1" | "ToDoPriority2", status: "Unknown" | "Normal" |
        "Completed" | "Disabled" | "OutlookTask" | "TaskNotSyncedYet" |
        "TaskRemoved"): OneNote.NoteTag;
      parameters:
        - id: typeString
          description: The type of the NoteTag.
          type: >-
            "Unknown" | "ToDo" | "Important" | "Question" | "Contact" |
            "Address" | "PhoneNumber" | "Website" | "Idea" | "Critical" |
            "ToDoPriority1" | "ToDoPriority2"
        - id: status
          description: The status of the NoteTag.
          type: >-
            "Unknown" | "Normal" | "Completed" | "Disabled" | "OutlookTask" |
            "TaskNotSyncedYet" | "TaskRemoved"
      return:
        type: '<xref uid="onenote!OneNote.NoteTag:class" />'
        description: ''
  - name: delete()
    uid: 'onenote!OneNote.Paragraph#delete:member(1)'
    package: onenote!
    fullName: delete()
    summary: >-
      Deletes the paragraph


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              
              var paragraphs = pageContent.outline.paragraphs;
              
              var firstParagraph = paragraphs.getItemAt(0);
              
              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      // Queue a command to delete the first paragraph                 
                      firstParagraph.delete();
                      
                      // Run the command to delete it
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getParagraphInfo()
    uid: 'onenote!OneNote.Paragraph#getParagraphInfo:member(1)'
    package: onenote!
    fullName: getParagraphInfo()
    summary: >-
      Get list information of paragraph


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getParagraphInfo(): OfficeExtension.ClientResult<OneNote.ParagraphInfo>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref
          uid="onenote!OneNote.ParagraphInfo:interface" />&gt;
        description: ''
  - name: 'insertHtmlAsSibling(insertLocation, html)'
    uid: 'onenote!OneNote.Paragraph#insertHtmlAsSibling:member(1)'
    package: onenote!
    fullName: 'insertHtmlAsSibling(insertLocation, html)'
    summary: >-
      Inserts the specified HTML content


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtmlAsSibling(insertLocation: OneNote.InsertLocation, html:
        string): void;
      parameters:
        - id: insertLocation
          description: The location of new contents relative to the current Paragraph.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: html
          description: >-
            An HTML string that describes the visual presentation of the
            content. See [Supported
            HTML](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html)
            for the OneNote add-ins JavaScript API.
          type: string
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertHtmlAsSibling("Before", "<p>ContentBeforeFirstParagraph</p>");
                      firstParagraph.insertHtmlAsSibling("After", "<p>ContentAfterFirstParagraph</p>");
                      
                      // Run the command to run inserts
                      return context.sync();
                  });
          ))
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertHtmlAsSibling(insertLocationString, html)'
    uid: 'onenote!OneNote.Paragraph#insertHtmlAsSibling:member(2)'
    package: onenote!
    fullName: 'insertHtmlAsSibling(insertLocationString, html)'
    summary: >-
      Inserts the specified HTML content


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtmlAsSibling(insertLocationString: "Before" | "After", html:
        string): void;
      parameters:
        - id: insertLocationString
          description: The location of new contents relative to the current Paragraph.
          type: '"Before" | "After"'
        - id: html
          description: >-
            An HTML string that describes the visual presentation of the
            content. See [Supported
            HTML](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html)
            for the OneNote add-ins JavaScript API.
          type: string
      return:
        type: void
        description: ''
  - name: 'insertImageAsSibling(insertLocation, base64EncodedImage, width, height)'
    uid: 'onenote!OneNote.Paragraph#insertImageAsSibling:member(1)'
    package: onenote!
    fullName: 'insertImageAsSibling(insertLocation, base64EncodedImage, width, height)'
    summary: >-
      Inserts the image at the specified insert location..


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertImageAsSibling(insertLocation: OneNote.InsertLocation,
        base64EncodedImage: string, width: number, height: number):
        OneNote.Image;
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: base64EncodedImage
          description: HTML string to append.
          type: string
        - id: width
          description: >-
            Optional. Width in the unit of Points. The default value is null and
            image width will be respected.
          type: number
        - id: height
          description: >-
            Optional. Height in the unit of Points. The default value is null
            and image height will be respected.
          type: number
      return:
        type: '<xref uid="onenote!OneNote.Image:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertImageAsSibling("Before", "R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==");
                      firstParagraph.insertImageAsSibling("After", "R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==");
                      
                      // Run the command to insert images
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: >-
      insertImageAsSibling(insertLocationString, base64EncodedImage, width,
      height)
    uid: 'onenote!OneNote.Paragraph#insertImageAsSibling:member(2)'
    package: onenote!
    fullName: >-
      insertImageAsSibling(insertLocationString, base64EncodedImage, width,
      height)
    summary: >-
      Inserts the image at the specified insert location..


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertImageAsSibling(insertLocationString: "Before" | "After",
        base64EncodedImage: string, width: number, height: number):
        OneNote.Image;
      parameters:
        - id: insertLocationString
          description: The location of the table relative to the current Paragraph.
          type: '"Before" | "After"'
        - id: base64EncodedImage
          description: HTML string to append.
          type: string
        - id: width
          description: >-
            Optional. Width in the unit of Points. The default value is null and
            image width will be respected.
          type: number
        - id: height
          description: >-
            Optional. Height in the unit of Points. The default value is null
            and image height will be respected.
          type: number
      return:
        type: '<xref uid="onenote!OneNote.Image:class" />'
        description: ''
  - name: 'insertRichTextAsSibling(insertLocation, paragraphText)'
    uid: 'onenote!OneNote.Paragraph#insertRichTextAsSibling:member(1)'
    package: onenote!
    fullName: 'insertRichTextAsSibling(insertLocation, paragraphText)'
    summary: >-
      Inserts the paragraph text at the specifiec insert location.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertRichTextAsSibling(insertLocation: OneNote.InsertLocation,
        paragraphText: string): OneNote.RichText;
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: paragraphText
          description: HTML string to append.
          type: string
      return:
        type: '<xref uid="onenote!OneNote.RichText:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertRichTextAsSibling("Before", "Text Appears Before Paragraph");
                      firstParagraph.insertRichTextAsSibling("After", "Text Appears After Paragraph");
                      
                      // Run the command to insert text contents
                      return context.sync();
                  });
          })    
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
  - name: 'insertRichTextAsSibling(insertLocationString, paragraphText)'
    uid: 'onenote!OneNote.Paragraph#insertRichTextAsSibling:member(2)'
    package: onenote!
    fullName: 'insertRichTextAsSibling(insertLocationString, paragraphText)'
    summary: >-
      Inserts the paragraph text at the specifiec insert location.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertRichTextAsSibling(insertLocationString: "Before" | "After",
        paragraphText: string): OneNote.RichText;
      parameters:
        - id: insertLocationString
          description: The location of the table relative to the current Paragraph.
          type: '"Before" | "After"'
        - id: paragraphText
          description: HTML string to append.
          type: string
      return:
        type: '<xref uid="onenote!OneNote.RichText:class" />'
        description: ''
  - name: 'insertTableAsSibling(insertLocation, rowCount, columnCount, values)'
    uid: 'onenote!OneNote.Paragraph#insertTableAsSibling:member(1)'
    package: onenote!
    fullName: 'insertTableAsSibling(insertLocation, rowCount, columnCount, values)'
    summary: >-
      Adds a table with the specified number of rows and columns before or after
      the current paragraph.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertTableAsSibling(insertLocation: OneNote.InsertLocation, rowCount:
        number, columnCount: number, values?: string[][]): OneNote.Table;
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type: '<xref uid="onenote!OneNote.InsertLocation:enum" />'
        - id: rowCount
          description: The number of rows in the table.
          type: number
        - id: columnCount
          description: The number of columns in the table.
          type: number
        - id: values
          description: >-
            Optional 2D array. Cells are filled if the corresponding strings are
            specified in the array.
          type: 'string[][]'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: ''
  - name: 'insertTableAsSibling(insertLocationString, rowCount, columnCount, values)'
    uid: 'onenote!OneNote.Paragraph#insertTableAsSibling:member(2)'
    package: onenote!
    fullName: 'insertTableAsSibling(insertLocationString, rowCount, columnCount, values)'
    summary: >-
      Adds a table with the specified number of rows and columns before or after
      the current paragraph.


      \[ [API set: OneNoteApi
      1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertTableAsSibling(insertLocationString: "Before" | "After", rowCount:
        number, columnCount: number, values?: string[][]): OneNote.Table;
      parameters:
        - id: insertLocationString
          description: The location of the table relative to the current Paragraph.
          type: '"Before" | "After"'
        - id: rowCount
          description: The number of rows in the table.
          type: number
        - id: columnCount
          description: The number of columns in the table.
          type: number
        - id: values
          description: >-
            Optional 2D array. Cells are filled if the corresponding strings are
            specified in the array.
          type: 'string[][]'
      return:
        type: '<xref uid="onenote!OneNote.Table:class" />'
        description: ''
  - name: load(option)
    uid: 'onenote!OneNote.Paragraph#load:member(1)'
    package: onenote!
    fullName: load(option)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call "context.sync()" before reading the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): OneNote.Paragraph` - Where option is a
      comma-delimited string or an array of strings that specify the properties
      to load.


      `load(option?: { select?: string; expand?: string; }): OneNote.Paragraph`
      - Where option.select is a comma-delimited string that specifies the
      properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?:
      number }): OneNote.Paragraph` - Only available on collection types. It is
      similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip
      specifies the number of items that are to be skipped and not included in
      the result. If option.top is specified, the result set will start after
      skipping the specified number of items.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(option?: OneNote.Interfaces.ParagraphLoadOptions):
        OneNote.Paragraph;
      parameters:
        - id: option
          description: ''
          type: >-
            <xref
            uid="onenote!OneNote.Interfaces.ParagraphLoadOptions:interface" />
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'onenote!OneNote.Paragraph#load:member(2)'
    package: onenote!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Paragraph;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;
              
              // Queue a command to load the outline property of each pageContent.
              pageContents.load("outline");
                  
              // Get the first PageContent on the page, and then get its Outline.
              var pageContent = pageContents._GetItem(0);
              var paragraphs = pageContent.outline.paragraphs;
                      
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      // Write the text.                  
                      $.each(paragraphs.items, function(index, paragraph) {
                          console.log("Paragraph type: " + paragraph.type);
                          console.log("Paragraph ID: " + paragraph.id);
                      });
                  });
          })        
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
          ```javascript
          OneNote.run(function(context) {
              var app = context.application;
              
              // Gets the active outline
              var outline = app.getActiveOutline();
              
              // load nested paragraphs and their types.
              outline.load("paragraphs/type");
              
              return context.sync().then(function () {
                  var paragraphs = outline.paragraphs.items;
                  
                  var promise;
                  // for each nested paragraphs, load tables only
                  for (var i = 0; i < paragraphs.length; i++) {
                      var paragraph = paragraphs[i];
                      if (paragraph.type == "Table") {
                          paragraph.load("table/id");
                          promise =  context.sync().then(function() {
                              console.log(paragraph.table.id);
                          });
                      }
                  }
                  return promise;
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(option)
    uid: 'onenote!OneNote.Paragraph#load:member(3)'
    package: onenote!
    fullName: load(option)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(option?: {
                    select?: string;
                    expand?: string;
                }): OneNote.Paragraph;
      parameters:
        - id: option
          description: ''
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'onenote!OneNote.Paragraph#set:member(1)'
    package: onenote!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: OneNote.Paragraph): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.ParagraphUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: >-
            <xref uid="onenote!OneNote.Interfaces.ParagraphUpdateData:interface"
            />
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'onenote!OneNote.Paragraph#set:member(2)'
    package: onenote!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: OneNote.Paragraph): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="onenote!OneNote.Paragraph:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'onenote!OneNote.Paragraph#toJSON:member(1)'
    package: onenote!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original OneNote.Paragraph
      object is an API object, the `toJSON` method returns a plain JavaScript
      object (typed as `OneNote.Interfaces.ParagraphData`<!-- -->) that contains
      shallow copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphData;'
      return:
        type: '<xref uid="onenote!OneNote.Interfaces.ParagraphData:interface" />'
        description: ''
  - name: track()
    uid: 'onenote!OneNote.Paragraph#track:member(1)'
    package: onenote!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      context.trackedObjects.add(thisObject). If you are using this object
      across ".sync" calls and outside the sequential execution of a ".run"
      batch, and get an "InvalidObjectPath" error when setting a property or
      invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: untrack()
    uid: 'onenote!OneNote.Paragraph#untrack:member(1)'
    package: onenote!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects
      slows down the host application, so please remember to free any objects
      you add, once you're done using them. You will need to call
      "context.sync()" before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
