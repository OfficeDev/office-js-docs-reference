### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.TableCell:class'
    summary: |-
      Represents a cell in a OneNote table.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: OneNote.TableCell
    fullName: OneNote.TableCell
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.TableCell#appendHtml:member(1)'
      - 'onenote!OneNote.TableCell#appendImage:member(1)'
      - 'onenote!OneNote.TableCell#appendRichText:member(1)'
      - 'onenote!OneNote.TableCell#appendTable:member(1)'
      - 'onenote!OneNote.TableCell#cellIndex:member'
      - 'onenote!OneNote.TableCell#clear:member(1)'
      - 'onenote!OneNote.TableCell#context:member'
      - 'onenote!OneNote.TableCell#id:member'
      - 'onenote!OneNote.TableCell#load:member(1)'
      - 'onenote!OneNote.TableCell#load:member(2)'
      - 'onenote!OneNote.TableCell#load:member(3)'
      - 'onenote!OneNote.TableCell#paragraphs:member'
      - 'onenote!OneNote.TableCell#parentRow:member'
      - 'onenote!OneNote.TableCell#rowIndex:member'
      - 'onenote!OneNote.TableCell#set:member(1)'
      - 'onenote!OneNote.TableCell#set:member(2)'
      - 'onenote!OneNote.TableCell#shadingColor:member'
      - 'onenote!OneNote.TableCell#toJSON:member(1)'
      - 'onenote!OneNote.TableCell#track:member(1)'
      - 'onenote!OneNote.TableCell#untrack:member(1)'
  - uid: 'onenote!OneNote.TableCell#appendHtml:member(1)'
    summary: |-
      Adds the specified HTML to the bottom of the TableCell.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: appendHtml(html)
    fullName: appendHtml(html)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendHtml(html: string): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a table cell at row one and column two and add "Hello".
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                          cell.appendHtml("<p>Hello</p>");
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: >-
            The HTML string to append. See [Supported
            HTML](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) for
            the OneNote add-ins JavaScript API.
          type:
            - string
  - uid: 'onenote!OneNote.TableCell#appendImage:member(1)'
    summary: |-
      Adds the specified image to table cell.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: 'appendImage(base64EncodedImage, width, height)'
    fullName: 'appendImage(base64EncodedImage, width, height)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendImage(base64EncodedImage: string, width: number, height: number): OneNote.Image;'
      return:
        type:
          - 'onenote!OneNote.Image:class'
        description: ''
      parameters:
        - id: base64EncodedImage
          description: HTML string to append.
          type:
            - string
        - id: width
          description: Optional. Width in the unit of Points. The default value is null and image width will be respected.
          type:
            - number
        - id: height
          description: Optional. Height in the unit of Points. The default value is null and image height will be respected.
          type:
            - number
  - uid: 'onenote!OneNote.TableCell#appendRichText:member(1)'
    summary: |-
      Adds the specified text to table cell.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: appendRichText(paragraphText)
    fullName: appendRichText(paragraphText)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendRichText(paragraphText: string): OneNote.RichText;'
      return:
        type:
          - 'onenote!OneNote.RichText:class'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              var appendedRichText = null;
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a table cell at row one and column two and add "Hello".
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                          appendedRichText = cell.appendRichText("Hello");
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: paragraphText
          description: HTML string to append.
          type:
            - string
  - uid: 'onenote!OneNote.TableCell#appendTable:member(1)'
    summary: |-
      Adds a table with the specified number of rows and columns to table cell.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: 'appendTable(rowCount, columnCount, values)'
    fullName: 'appendTable(rowCount, columnCount, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendTable(rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
        description: ''
      parameters:
        - id: rowCount
          description: Required. The number of rows in the table.
          type:
            - number
        - id: columnCount
          description: Required. The number of columns in the table.
          type:
            - number
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type:
            - 'string[][]'
  - uid: 'onenote!OneNote.TableCell#cellIndex:member'
    summary: |-
      Gets the index of the cell in its row. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: cellIndex
    fullName: cellIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellIndex: number;'
      return:
        type:
          - number
  - uid: 'onenote!OneNote.TableCell#clear:member(1)'
    summary: |-
      Clears the contents of the cell.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'onenote!OneNote.TableCell#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.TableCell#id:member'
    summary: |-
      Gets the ID of the cell. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.TableCell#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): OneNote.TableCell` - Where option is a comma-delimited string or an array of
      strings that specify the properties to load.


      `load(option?: { select?: string; expand?: string; }): OneNote.TableCell` - Where option.select is a
      comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.TableCell` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.TableCellLoadOptions): OneNote.TableCell;'
      return:
        type:
          - 'onenote!OneNote.TableCell:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.Interfaces.TableCellLoadOptions:interface'
  - uid: 'onenote!OneNote.TableCell#load:member(2)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.TableCell;'
      return:
        type:
          - 'onenote!OneNote.TableCell:class'
        description: |-


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a table cell at row one and column two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                          
                          // Queue a command to load the table cell.
                          ctx.load(cell);
                          ctx.sync().then(function() {
                              console.log("Cell Id: " + cell.id);
                              console.log("Cell Index: " + cell.cellIndex);
                              console.log("Cell's Row Index: " + cell.rowIndex);
                          });
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          ParentTable, ParentRow, Paragraphs
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a table cell at row one and column two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                          
                          // Queue a command to load parentTable, parentRow and paragraphs of the table cell.
                          ctx.load(cell, "parentTable, parentRow, paragraphs");
                          
                          ctx.sync().then(function() {
                              console.log("Parent Table Id: " + cell.parentTable.id);
                              console.log("Parent Row Id: " + cell.parentRow.id);
                              var paragraphs = cell.paragraphs;
                              
                              for (var i = 0; i < paragraphs.items.length; i++) {
                                  console.log("Paragraph Id: " + paragraphs.items[i].id);
                              }
                          });
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.TableCell#load:member(3)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.TableCell;'
      return:
        type:
          - 'onenote!OneNote.TableCell:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and
            propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'onenote!OneNote.TableCell#paragraphs:member'
    summary: |-
      Gets the collection of Paragraph objects in the TableCell. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
  - uid: 'onenote!OneNote.TableCell#parentRow:member'
    summary: |-
      Gets the parent row of the cell. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: parentRow
    fullName: parentRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentRow: OneNote.TableRow;'
      return:
        type:
          - 'onenote!OneNote.TableRow:class'
  - uid: 'onenote!OneNote.TableCell#rowIndex:member'
    summary: |-
      Gets the index of the cell's row in the table. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'onenote!OneNote.TableCell#set:member(1)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: OneNote.TableCell): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TableCellUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - 'onenote!OneNote.Interfaces.TableCellUpdateData:interface'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - 'office!OfficeExtension.UpdateOptions:interface'
  - uid: 'onenote!OneNote.TableCell#set:member(2)'
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: OneNote.TableCell): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'onenote!OneNote.TableCell:class'
  - uid: 'onenote!OneNote.TableCell#shadingColor:member'
    summary: |-
      Gets and sets the shading color of the cell

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: shadingColor
    fullName: shadingColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shadingColor: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.TableCell#toJSON:member(1)'
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original OneNote.TableCell object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `OneNote.Interfaces.TableCellData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableCellData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.TableCellData:interface'
        description: ''
  - uid: 'onenote!OneNote.TableCell#track:member(1)'
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.TableCell;'
      return:
        type:
          - 'onenote!OneNote.TableCell:class'
        description: ''
  - uid: 'onenote!OneNote.TableCell#untrack:member(1)'
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.TableCell;'
      return:
        type:
          - 'onenote!OneNote.TableCell:class'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.Image:class'
    name: OneNote.Image
  - uid: 'onenote!OneNote.RichText:class'
    name: OneNote.RichText
  - uid: 'onenote!OneNote.Table:class'
    name: OneNote.Table
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.TableCell:class'
    name: OneNote.TableCell
  - uid: 'onenote!OneNote.Interfaces.TableCellLoadOptions:interface'
    name: OneNote.Interfaces.TableCellLoadOptions
  - uid: 'onenote!OneNote.ParagraphCollection:class'
    name: OneNote.ParagraphCollection
  - uid: 'onenote!OneNote.TableRow:class'
    name: OneNote.TableRow
  - uid: 'onenote!OneNote.Interfaces.TableCellUpdateData:interface'
    name: Interfaces.TableCellUpdateData
  - uid: 'office!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'onenote!OneNote.Interfaces.TableCellData:interface'
    name: OneNote.Interfaces.TableCellData
