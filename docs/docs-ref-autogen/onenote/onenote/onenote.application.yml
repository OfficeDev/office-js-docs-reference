### YamlMime:TSType
name: OneNote.Application
uid: 'onenote!OneNote.Application:class'
package: onenote!
fullName: OneNote.Application
summary: >-
  Represents the top-level object that contains all globally addressable OneNote objects such as notebooks, the active
  notebook, and the active section.
remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'onenote!OneNote.Application#context:member'
    package: onenote!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="onenote!OneNote.RequestContext:class" />'
  - name: notebooks
    uid: 'onenote!OneNote.Application#notebooks:member'
    package: onenote!
    fullName: notebooks
    summary: >-
      Gets the collection of notebooks that are open in the OneNote application instance. In OneNote Online, only one
      notebook at a time is open in the application instance. Read-only.
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly notebooks: OneNote.NotebookCollection;'
      return:
        type: '<xref uid="onenote!OneNote.NotebookCollection:class" />'
methods:
  - name: getActiveNotebook()
    uid: 'onenote!OneNote.Application#getActiveNotebook:member(1)'
    package: onenote!
    fullName: getActiveNotebook()
    summary: 'Gets the active notebook if one exists. If no notebook is active, throws ItemNotFound.'
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {
              
          // Get the active notebook.
          const notebook = context.application.getActiveNotebook();
                  
          // Queue a command to load the notebook.
          // For best performance, request specific properties.
          notebook.load('id,name');
                  
          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();
                          
          // Show some properties.
          console.log("Notebook name: " + notebook.name);
          console.log("Notebook ID: " + notebook.id);
                  
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveNotebook(): OneNote.Notebook;'
      return:
        type: '<xref uid="onenote!OneNote.Notebook:class" />'
        description: ''
  - name: getActiveNotebookOrNull()
    uid: 'onenote!OneNote.Application#getActiveNotebookOrNull:member(1)'
    package: onenote!
    fullName: getActiveNotebookOrNull()
    summary: 'Gets the active notebook if one exists. If no notebook is active, returns null.'
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // Get the active notebook.
          const notebook = context.application.getActiveNotebookOrNull();

          // Queue a command to load the notebook.
          // For best performance, request specific properties.
          notebook.load('id,name');

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();

          // Check if active notebook is set.
          if (!notebook.isNullObject) {
              console.log("Notebook name: " + notebook.name);
              console.log("Notebook ID: " + notebook.id);
          }
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveNotebookOrNull(): OneNote.Notebook;'
      return:
        type: '<xref uid="onenote!OneNote.Notebook:class" />'
        description: ''
  - name: getActiveOutline()
    uid: 'onenote!OneNote.Application#getActiveOutline:member(1)'
    package: onenote!
    fullName: getActiveOutline()
    summary: 'Gets the active outline if one exists, If no outline is active, throws ItemNotFound.'
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // get active outline.
          const outline = context.application.getActiveOutline();

          // Queue a command to load the id of the outline.
          outline.load('id');

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();

          // Show some properties.
          console.log("outline id: " + outline.id);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveOutline(): OneNote.Outline;'
      return:
        type: '<xref uid="onenote!OneNote.Outline:class" />'
        description: ''
  - name: getActiveOutlineOrNull()
    uid: 'onenote!OneNote.Application#getActiveOutlineOrNull:member(1)'
    package: onenote!
    fullName: getActiveOutlineOrNull()
    summary: 'Gets the active outline if one exists, otherwise returns null.'
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // get active outline.
          const outline = context.application.getActiveOutlineOrNull();

          // Queue a command to load the id of the outline.
          outline.load('id');

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();
          if (!outline.isNullObject) {
              console.log("outline id: " + outline.id);
          }
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveOutlineOrNull(): OneNote.Outline;'
      return:
        type: '<xref uid="onenote!OneNote.Outline:class" />'
        description: ''
  - name: getActivePage()
    uid: 'onenote!OneNote.Application#getActivePage:member(1)'
    package: onenote!
    fullName: getActivePage()
    summary: 'Gets the active page if one exists. If no page is active, throws ItemNotFound.'
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {
              
          // Get the active page.
          const page = context.application.getActivePage();
                  
          // Queue a command to load the page.
          // For best performance, request specific properties.
          page.load('id,title');
                  
          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();
                          
          // Show some properties.
          console.log("Page title: " + page.title);
          console.log("Page ID: " + page.id);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActivePage(): OneNote.Page;'
      return:
        type: '<xref uid="onenote!OneNote.Page:class" />'
        description: ''
  - name: getActivePageOrNull()
    uid: 'onenote!OneNote.Application#getActivePageOrNull:member(1)'
    package: onenote!
    fullName: getActivePageOrNull()
    summary: 'Gets the active page if one exists. If no page is active, returns null.'
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // Get the active page.
          const page = context.application.getActivePageOrNull();

          // Queue a command to load the page.
          // For best performance, request specific properties.
          page.load('id,title');

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();
                  
          if (!page.isNullObject) {
              // Show some properties.
              console.log("Page title: " + page.title);
              console.log("Page ID: " + page.id);
          }
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActivePageOrNull(): OneNote.Page;'
      return:
        type: '<xref uid="onenote!OneNote.Page:class" />'
        description: ''
  - name: getActiveParagraph()
    uid: 'onenote!OneNote.Application#getActiveParagraph:member(1)'
    package: onenote!
    fullName: getActiveParagraph()
    summary: 'Gets the active Paragraph if one exists, If no Paragraph is active, throws ItemNotFound.'
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveParagraph(): OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: getActiveParagraphOrNull()
    uid: 'onenote!OneNote.Application#getActiveParagraphOrNull:member(1)'
    package: onenote!
    fullName: getActiveParagraphOrNull()
    summary: 'Gets the active Paragraph if one exists, otherwise returns null.'
    remarks: '\[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveParagraphOrNull(): OneNote.Paragraph;'
      return:
        type: '<xref uid="onenote!OneNote.Paragraph:class" />'
        description: ''
  - name: getActiveSection()
    uid: 'onenote!OneNote.Application#getActiveSection:member(1)'
    package: onenote!
    fullName: getActiveSection()
    summary: 'Gets the active section if one exists. If no section is active, throws ItemNotFound.'
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {
              
          // Get the active section.
          const section = context.application.getActiveSection();
                  
          // Queue a command to load the section.
          // For best performance, request specific properties.
          section.load('id,name');
                  
          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();
                          
          // Show some properties.
          console.log("Section name: " + section.name);
          console.log("Section ID: " + section.id);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveSection(): OneNote.Section;'
      return:
        type: '<xref uid="onenote!OneNote.Section:class" />'
        description: ''
  - name: getActiveSectionOrNull()
    uid: 'onenote!OneNote.Application#getActiveSectionOrNull:member(1)'
    package: onenote!
    fullName: getActiveSectionOrNull()
    summary: 'Gets the active section if one exists. If no section is active, returns null.'
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // Get the active section.
          const section = context.application.getActiveSectionOrNull();

          // Queue a command to load the section.
          // For best performance, request specific properties.
          section.load('id,name');

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync();
          if (!section.isNullObject) {
              // Show some properties.
              console.log("Section name: " + section.name);
              console.log("Section ID: " + section.id);
          }
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveSectionOrNull(): OneNote.Section;'
      return:
        type: '<xref uid="onenote!OneNote.Section:class" />'
        description: ''
  - name: getDecimalSeparator()
    uid: 'onenote!OneNote.Application#getDecimalSeparator:member(1)'
    package: onenote!
    fullName: getDecimalSeparator()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDecimalSeparator(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getSelectedInkStrokes()
    uid: 'onenote!OneNote.Application#getSelectedInkStrokes:member(1)'
    package: onenote!
    fullName: getSelectedInkStrokes()
    summary: Gets the currently selected ink strokes.
    remarks: '\[ [API set: OneNoteApi 1.9](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedInkStrokes(): OneNote.InkStrokeCollection;'
      return:
        type: '<xref uid="onenote!OneNote.InkStrokeCollection:class" />'
        description: ''
  - name: getWindowSize()
    uid: 'onenote!OneNote.Application#getWindowSize:member(1)'
    package: onenote!
    fullName: getWindowSize()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWindowSize(): OfficeExtension.ClientResult<number[]>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number[]&gt;'
        description: ''
  - name: insertAndEmbedLinkAtCurrentPosition(url)
    uid: 'onenote!OneNote.Application#insertAndEmbedLinkAtCurrentPosition:member(1)'
    package: onenote!
    fullName: insertAndEmbedLinkAtCurrentPosition(url)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertAndEmbedLinkAtCurrentPosition(url: string): void;'
      parameters:
        - id: url
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: insertHtmlAtCurrentPosition(html)
    uid: 'onenote!OneNote.Application#insertHtmlAtCurrentPosition:member(1)'
    package: onenote!
    fullName: insertHtmlAtCurrentPosition(html)
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertHtmlAtCurrentPosition(html: string): void;'
      parameters:
        - id: html
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: isViewingDeletedNotes()
    uid: 'onenote!OneNote.Application#isViewingDeletedNotes:member(1)'
    package: onenote!
    fullName: isViewingDeletedNotes()
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isViewingDeletedNotes(): OfficeExtension.ClientResult<boolean>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;boolean&gt;'
        description: ''
  - name: load(options)
    uid: 'onenote!OneNote.Application#load:member(1)'
    package: onenote!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: OneNote.Interfaces.ApplicationLoadOptions): OneNote.Application;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="onenote!OneNote.Interfaces.ApplicationLoadOptions:interface" />'
      return:
        type: '<xref uid="onenote!OneNote.Application:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'onenote!OneNote.Application#load:member(2)'
    package: onenote!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Application;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="onenote!OneNote.Application:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'onenote!OneNote.Application#load:member(3)'
    package: onenote!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): OneNote.Application;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="onenote!OneNote.Application:class" />'
        description: ''
  - name: navigateToPage(page)
    uid: 'onenote!OneNote.Application#navigateToPage:member(1)'
    package: onenote!
    fullName: navigateToPage(page)
    summary: Opens the specified page in the application instance.
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {
              
          // Get the pages in the current section.
          const pages = context.application.getActiveSection().pages;
                  
          // Queue a command to load the pages.
          // For best performance, request specific properties.
          pages.load('id');
                  
          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync()
                          
          // This example loads the first page in the section.
          const page = pages.items[0];
                      
          // Open the page in the application.
          context.application.navigateToPage(page);
                  
          // Run the queued command.
          await context.sync();
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'navigateToPage(page: OneNote.Page): void;'
      parameters:
        - id: page
          description: The page to open.
          type: '<xref uid="onenote!OneNote.Page:class" />'
      return:
        type: void
        description: ''
  - name: navigateToPageWithClientUrl(url)
    uid: 'onenote!OneNote.Application#navigateToPageWithClientUrl:member(1)'
    package: onenote!
    fullName: navigateToPageWithClientUrl(url)
    summary: >-
      Gets the specified page, and opens it in the application instance. Navigation may still not be carried out when no
      fails. Caller should validate the returned page if so desired.
    remarks: |-
      \[ [API set: OneNoteApi 1.1](/javascript/api/requirement-sets/onenote/onenote-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await OneNote.run(async (context) => {

          // Get the pages in the current section.
          const pages = context.application.getActiveSection().pages;

          // Queue a command to load the pages.
          // For best performance, request specific properties.
          pages.load('clientUrl');

          // Run the queued commands, and return a promise to indicate task completion.
          await context.sync()

          // This example loads the first page in the section.
          const page = pages.items[0];

          // Open the page in the application.
          context.application.navigateToPageWithClientUrl(page.clientUrl);

          // Run the queued command.
          await context.sync();
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'navigateToPageWithClientUrl(url: string): OneNote.Page;'
      parameters:
        - id: url
          description: The client url of the page to open.
          type: string
      return:
        type: '<xref uid="onenote!OneNote.Page:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'onenote!OneNote.Application#set:member(1)'
    package: onenote!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="onenote!OneNote.Interfaces.ApplicationUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'onenote!OneNote.Application#set:member(2)'
    package: onenote!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: OneNote.Application): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="onenote!OneNote.Application:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'onenote!OneNote.Application#toJSON:member(1)'
    package: onenote!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `OneNote.Application` object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `OneNote.Interfaces.ApplicationData`<!-- -->) that contains shallow copies of
      any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ApplicationData;'
      return:
        type: '<xref uid="onenote!OneNote.Interfaces.ApplicationData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
