### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.Paragraph
    summary: |-
      A container for the visible content on a page. A Paragraph can contain any one ParagraphType type of content.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: OneNote.Paragraph
    fullName: onenote.OneNote.Paragraph
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.Paragraph.addNoteTag
      - onenote.OneNote.Paragraph.delete
      - onenote.OneNote.Paragraph.getParagraphInfo
      - onenote.OneNote.Paragraph.id
      - onenote.OneNote.Paragraph.image
      - onenote.OneNote.Paragraph.inkWords
      - onenote.OneNote.Paragraph.insertHtmlAsSibling
      - onenote.OneNote.Paragraph.insertImageAsSibling
      - onenote.OneNote.Paragraph.insertRichTextAsSibling
      - onenote.OneNote.Paragraph.insertTableAsSibling
      - onenote.OneNote.Paragraph.load
      - onenote.OneNote.Paragraph.outline
      - onenote.OneNote.Paragraph.paragraphs
      - onenote.OneNote.Paragraph.parentParagraph
      - onenote.OneNote.Paragraph.parentParagraphOrNull
      - onenote.OneNote.Paragraph.parentTableCell
      - onenote.OneNote.Paragraph.parentTableCellOrNull
      - onenote.OneNote.Paragraph.richText
      - onenote.OneNote.Paragraph.set
      - onenote.OneNote.Paragraph.table
      - onenote.OneNote.Paragraph.toJSON
      - onenote.OneNote.Paragraph.track
      - onenote.OneNote.Paragraph.type
      - onenote.OneNote.Paragraph.untrack
  - uid: onenote.OneNote.Paragraph.addNoteTag
    summary: |-
      Add NoteTag to the paragraph.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'addNoteTag(type, status)'
    fullName: onenote.OneNote.Paragraph.addNoteTag
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addNoteTag(type: OneNote.NoteTagType, status: OneNote.NoteTagStatus): OneNote.NoteTag;'
      return:
        type:
          - onenote.OneNote.NoteTag
        description: ''
      parameters:
        - id: type
          description: The type of the NoteTag.
          type:
            - onenote.OneNote.NoteTagType
        - id: status
          description: The status of the NoteTag.
          type:
            - onenote.OneNote.NoteTagStatus
  - uid: onenote.OneNote.Paragraph.delete
    summary: |-
      Deletes the paragraph

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: delete()
    fullName: onenote.OneNote.Paragraph.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              
              var paragraphs = pageContent.outline.paragraphs;
              
              var firstParagraph = paragraphs.getItemAt(0);
              
              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      // Queue a command to delete the first paragraph                 
                      firstParagraph.delete();
                      
                      // Run the command to delete it
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Paragraph.getParagraphInfo
    summary: |-
      Get list information of paragraph

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: getParagraphInfo()
    fullName: onenote.OneNote.Paragraph.getParagraphInfo
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getParagraphInfo(): OfficeExtension.ClientResult<OneNote.ParagraphInfo>;'
      return:
        type:
          - OfficeExtension.ClientResult<OneNote.ParagraphInfo>
        description: ''
  - uid: onenote.OneNote.Paragraph.id
    summary: |-
      Gets the ID of the Paragraph object. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: id
    fullName: onenote.OneNote.Paragraph.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Paragraph.image
    summary: |-
      Gets the Image object in the Paragraph. Throws an exception if ParagraphType is not Image. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: image
    fullName: onenote.OneNote.Paragraph.image
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly image: OneNote.Image;'
      return:
        type:
          - onenote.OneNote.Image
  - uid: onenote.OneNote.Paragraph.inkWords
    summary: |-
      Gets the Ink collection in the Paragraph. Throws an exception if ParagraphType is not Ink. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: inkWords
    fullName: onenote.OneNote.Paragraph.inkWords
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inkWords: OneNote.InkWordCollection;'
      return:
        type:
          - onenote.OneNote.InkWordCollection
  - uid: onenote.OneNote.Paragraph.insertHtmlAsSibling
    summary: |-
      Inserts the specified HTML content

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'insertHtmlAsSibling(insertLocation, html)'
    fullName: onenote.OneNote.Paragraph.insertHtmlAsSibling
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtmlAsSibling(insertLocation: OneNote.InsertLocation, html: string): void;'
      return:
        type:
          - void
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertHtmlAsSibling("Before", "<p>ContentBeforeFirstParagraph</p>");
                      firstParagraph.insertHtmlAsSibling("After", "<p>ContentAfterFirstParagraph</p>");
                      
                      // Run the command to run inserts
                      return context.sync();
                  });
          ))
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: insertLocation
          description: The location of new contents relative to the current Paragraph.
          type:
            - onenote.OneNote.InsertLocation
        - id: html
          description: >-
            An HTML string that describes the visual presentation of the content. See[Supported
            HTML](https://docs.microsoft.com/en-us/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html)
            for the OneNote add-ins JavaScript API.
          type:
            - string
  - uid: onenote.OneNote.Paragraph.insertImageAsSibling
    summary: |-
      Inserts the image at the specified insert location..

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'insertImageAsSibling(insertLocation, base64EncodedImage, width, height)'
    fullName: onenote.OneNote.Paragraph.insertImageAsSibling
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertImageAsSibling(insertLocation: OneNote.InsertLocation, base64EncodedImage: string, width: number, height:
        number): OneNote.Image;
      return:
        type:
          - onenote.OneNote.Image
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertImageAsSibling("Before", "R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==");
                      firstParagraph.insertImageAsSibling("After", "R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==");
                      
                      // Run the command to insert images
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type:
            - onenote.OneNote.InsertLocation
        - id: base64EncodedImage
          description: HTML string to append.
          type:
            - string
        - id: width
          description: Optional. Width in the unit of Points. The default value is null and image width will be respected.
          type:
            - number
        - id: height
          description: Optional. Height in the unit of Points. The default value is null and image height will be respected.
          type:
            - number
  - uid: onenote.OneNote.Paragraph.insertRichTextAsSibling
    summary: |-
      Inserts the paragraph text at the specifiec insert location.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'insertRichTextAsSibling(insertLocation, paragraphText)'
    fullName: onenote.OneNote.Paragraph.insertRichTextAsSibling
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertRichTextAsSibling(insertLocation: OneNote.InsertLocation, paragraphText: string): OneNote.RichText;'
      return:
        type:
          - onenote.OneNote.RichText
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page
              // Assuming its an outline, get the outline's paragraphs.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;
              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the id and type of the first paragraph
              firstParagraph.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Queue commands to insert before and after the first paragraph
                      firstParagraph.insertRichTextAsSibling("Before", "Text Appears Before Paragraph");
                      firstParagraph.insertRichTextAsSibling("After", "Text Appears After Paragraph");
                      
                      // Run the command to insert text contents
                      return context.sync();
                  });
          })    
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type:
            - onenote.OneNote.InsertLocation
        - id: paragraphText
          description: HTML string to append.
          type:
            - string
  - uid: onenote.OneNote.Paragraph.insertTableAsSibling
    summary: |-
      Adds a table with the specified number of rows and columns before or after the current paragraph.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'insertTableAsSibling(insertLocation, rowCount, columnCount, values)'
    fullName: onenote.OneNote.Paragraph.insertTableAsSibling
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertTableAsSibling(insertLocation: OneNote.InsertLocation, rowCount: number, columnCount: number, values?:
        string[][]): OneNote.Table;
      return:
        type:
          - OneNote.Table
        description: ''
      parameters:
        - id: insertLocation
          description: The location of the table relative to the current Paragraph.
          type:
            - onenote.OneNote.InsertLocation
        - id: rowCount
          description: The number of rows in the table.
          type:
            - number
        - id: columnCount
          description: The number of columns in the table.
          type:
            - number
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type:
            - 'string[][]'
  - uid: onenote.OneNote.Paragraph.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): OneNote.Paragraph` - Where option.select is a
      comma-delimited string that specifies the properties/relationships to load, and options.expand is a
      comma-delimited string that specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Paragraph` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.

      #### Examples


      ```javascript

      OneNote.run(function (context) {

          // Get the collection of pageContent items from the page.
          var pageContents = context.application.getActivePage().contents;
          
          // Queue a command to load the outline property of each pageContent.
          pageContents.load("outline");
              
          // Get the first PageContent on the page, and then get its Outline.
          var pageContent = pageContents._GetItem(0);
          var paragraphs = pageContent.outline.paragraphs;
                  
          // Queue a command to load the id and type of each paragraph.
          paragraphs.load("id,type");
                  
          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  
                  // Write the text.                  
                  $.each(paragraphs.items, function(index, paragraph) {
                      console.log("Paragraph type: " + paragraph.type);
                      console.log("Paragraph ID: " + paragraph.id);
                  });
              });
      })        

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      }); 

      ```

      ```javascript

      OneNote.run(function(context) {
          var app = context.application;
          
          // Gets the active outline
          var outline = app.getActiveOutline();
          
          // load nested paragraphs and their types.
          outline.load("paragraphs/type");
          
          return context.sync().then(function () {
              var paragraphs = outline.paragraphs.items;
              
              var promise;
              // for each nested paragraphs, load tables only
              for (var i = 0; i < paragraphs.length; i++) {
                  var paragraph = paragraphs[i];
                  if (paragraph.type == "Table") {
                      paragraph.load("table/id");
                      promise =  context.sync().then(function() {
                          console.log(paragraph.table.id);
                      });
                  }
              }
              return promise;
          })
      })

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: onenote.OneNote.Paragraph.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties/relationships to load.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.Paragraph.outline
    summary: |-
      Gets the Outline object that contains the Paragraph. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: outline
    fullName: onenote.OneNote.Paragraph.outline
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly outline: OneNote.Outline;'
      return:
        type:
          - onenote.OneNote.Outline
  - uid: onenote.OneNote.Paragraph.paragraphs
    summary: |-
      The collection of paragraphs under this paragraph. Read only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: paragraphs
    fullName: onenote.OneNote.Paragraph.paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
  - uid: onenote.OneNote.Paragraph.parentParagraph
    summary: |-
      Gets the parent paragraph object. Throws if a parent paragraph does not exist. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: parentParagraph
    fullName: onenote.OneNote.Paragraph.parentParagraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentParagraph: OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
  - uid: onenote.OneNote.Paragraph.parentParagraphOrNull
    summary: |-
      Gets the parent paragraph object. Returns null if a parent paragraph does not exist. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: parentParagraphOrNull
    fullName: onenote.OneNote.Paragraph.parentParagraphOrNull
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentParagraphOrNull: OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
  - uid: onenote.OneNote.Paragraph.parentTableCell
    summary: >-
      Gets the TableCell object that contains the Paragraph if one exists. If parent is not a TableCell, throws
      ItemNotFound. Read-only.


      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: parentTableCell
    fullName: onenote.OneNote.Paragraph.parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCell: OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
  - uid: onenote.OneNote.Paragraph.parentTableCellOrNull
    summary: >-
      Gets the TableCell object that contains the Paragraph if one exists. If parent is not a TableCell, returns null.
      Read-only.


      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: parentTableCellOrNull
    fullName: onenote.OneNote.Paragraph.parentTableCellOrNull
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCellOrNull: OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
  - uid: onenote.OneNote.Paragraph.richText
    summary: |-
      Gets the RichText object in the Paragraph. Throws an exception if ParagraphType is not RichText. Read-only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: richText
    fullName: onenote.OneNote.Paragraph.richText
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly richText: OneNote.RichText;'
      return:
        type:
          - onenote.OneNote.RichText
  - uid: onenote.OneNote.Paragraph.set
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: OneNote.Paragraph): void`
    name: 'set(properties, options)'
    fullName: onenote.OneNote.Paragraph.set
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - Interfaces.ParagraphUpdateData
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: onenote.OneNote.Paragraph.table
    summary: |-
      Gets the Table object in the Paragraph. Throws an exception if ParagraphType is not Table. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: table
    fullName: onenote.OneNote.Paragraph.table
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly table: OneNote.Table;'
      return:
        type:
          - OneNote.Table
  - uid: onenote.OneNote.Paragraph.toJSON
    name: toJSON()
    fullName: onenote.OneNote.Paragraph.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphData;'
      return:
        type:
          - onenote.OneNote.Interfaces.ParagraphData
        description: ''
  - uid: onenote.OneNote.Paragraph.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: onenote.OneNote.Paragraph.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: ''
  - uid: onenote.OneNote.Paragraph.type
    summary: |-
      Gets the type of the Paragraph object. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: type
    fullName: onenote.OneNote.Paragraph.type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other";'
      return:
        type:
          - OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other"
  - uid: onenote.OneNote.Paragraph.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: onenote.OneNote.Paragraph.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: ''
