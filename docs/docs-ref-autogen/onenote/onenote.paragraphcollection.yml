### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.ParagraphCollection
    summary: |-
      Represents a collection of Paragraph objects.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: OneNote.ParagraphCollection
    fullName: onenote.OneNote.ParagraphCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.ParagraphCollection.count
      - onenote.OneNote.ParagraphCollection.getItem
      - onenote.OneNote.ParagraphCollection.getItemAt
      - onenote.OneNote.ParagraphCollection.items
      - onenote.OneNote.ParagraphCollection.load
  - uid: onenote.OneNote.ParagraphCollection.count
    summary: |-
      Returns the number of paragraphs in the page. Read-only.

      \[ [API set: OneNoteApi 1.1](http://bing.com?type=onenote) \]
    name: count
    fullName: onenote.OneNote.ParagraphCollection.count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'count: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.ParagraphCollection.getItem
    summary: Gets a Paragraph object by ID or by its index in the collection. Read-only.
    name: getItem(index)
    fullName: onenote.OneNote.ParagraphCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number | string): OneNote.Paragraph;'
      return:
        type:
          - OneNote.Paragraph
        description: ''
      parameters:
        - id: index
          description: >-
            The ID of the Paragraph object, or the index location of the Paragraph object in the collection. \[Api set:
            OneNoteApi 1.1\]
          type:
            - number | string
  - uid: onenote.OneNote.ParagraphCollection.getItemAt
    summary: Gets a paragraph on its position in the collection.
    name: getItemAt(index)
    fullName: onenote.OneNote.ParagraphCollection.getItemAt
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): OneNote.Paragraph;'
      return:
        type:
          - OneNote.Paragraph
        description: ''
      parameters:
        - id: index
          description: 'Index value of the object to be retrieved. Zero-indexed. \[Api set: OneNoteApi 1.1\]'
          type:
            - number
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function (context) {

          // Get the collection of pageContent items from the page.
          var pageContents = context.application.getActivePage().contents;

          // Get the first PageContent on the page, and then get its Outline's first paragraph.
          var pageContent = pageContents.getItemAt(0);
          var paragraphs = pageContent.outline.paragraphs;

          var firstParagraph = paragraphs.getItemAt(0);

          // Queue a command to load the type and richText.text property of this paragraph.
          firstParagraph.load("id,type");


          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  // Write text from paragraph to console
                  console.log("First Paragraph found with id : " + firstParagraph.id + " and type " + firstParagraph.type);
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      }); 
      ```
  - uid: onenote.OneNote.ParagraphCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: onenote.OneNote.ParagraphCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'items: Array<OneNote.Paragraph>;'
      return:
        type:
          - Array<OneNote.Paragraph>
  - uid: onenote.OneNote.ParagraphCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: onenote.OneNote.ParagraphCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): OneNote.ParagraphCollection;'
      return:
        type:
          - OneNote.ParagraphCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
