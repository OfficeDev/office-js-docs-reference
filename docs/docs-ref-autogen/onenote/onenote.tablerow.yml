### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.TableRow
    summary: |-
      Represents a row in a table.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: OneNote.TableRow
    fullName: onenote.OneNote.TableRow
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.TableRow.cellCount
      - onenote.OneNote.TableRow.cells
      - onenote.OneNote.TableRow.clear
      - onenote.OneNote.TableRow.id
      - onenote.OneNote.TableRow.insertRowAsSibling
      - onenote.OneNote.TableRow.load
      - onenote.OneNote.TableRow.parentTable
      - onenote.OneNote.TableRow.rowIndex
      - onenote.OneNote.TableRow.setShadingColor
      - onenote.OneNote.TableRow.toJSON
      - onenote.OneNote.TableRow.track
      - onenote.OneNote.TableRow.untrack
  - uid: onenote.OneNote.TableRow.cellCount
    summary: |-
      Gets the number of cells in the row. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: cellCount
    fullName: onenote.OneNote.TableRow.cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.TableRow.cells
    summary: |-
      Gets the cells in the row. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: cells
    fullName: onenote.OneNote.TableRow.cells
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cells: OneNote.TableCellCollection;'
      return:
        type:
          - onenote.OneNote.TableCellCollection
  - uid: onenote.OneNote.TableRow.clear
    summary: |-
      Clears the contents of the row.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: clear()
    fullName: onenote.OneNote.TableRow.clear
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: onenote.OneNote.TableRow.id
    summary: |-
      Gets the ID of the row. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: id
    fullName: onenote.OneNote.TableRow.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.TableRow.insertRowAsSibling
    summary: |-
      Inserts a row before or after the current row.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: 'insertRowAsSibling(insertLocation, values)'
    fullName: onenote.OneNote.TableRow.insertRowAsSibling
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertRowAsSibling(insertLocation: OneNote.InsertLocation, values?: string[]): OneNote.TableRow;'
      return:
        type:
          - OneNote.TableRow
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get table rows.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          
                          // Queue a command to load table.rows.
                          ctx.load(table, "rows");
                          
                          // Run the queued commands
                          return ctx.sync().then(function() {
                              var rows = table.rows;
                              rows.items[1].insertRowAsSibling("Before", ["cell0", "cell1"]);
                              return ctx.sync();
                          });
                      }
                  }
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: insertLocation
          description: Where the new rows should be inserted relative to the current row.
          type:
            - onenote.OneNote.InsertLocation
        - id: values
          description: >-
            Strings to insert in the new row, specified as an array. Must not have more cells than in the current row.
            Optional.
          type:
            - 'string[]'
  - uid: onenote.OneNote.TableRow.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): OneNote.TableRow` - Where option.select is a
      comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.TableRow` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.

      #### Examples


      ```javascript

      OneNote.run(function(ctx) {
          var app = ctx.application;
          var outline = app.getActiveOutline();
          
          // Queue a command to load outline.paragraphs and their types.
          ctx.load(outline, "paragraphs, paragraphs/type");
          
          // Run the queued commands, and return a promise to indicate task completion.
          return ctx.sync().then(function () {
              var paragraphs = outline.paragraphs;
              
              // for each table, get table rows.
              for (var i = 0; i < paragraphs.items.length; i++) {
                  var paragraph = paragraphs.items[i];
                  if (paragraph.type == "Table") {
                      var table = paragraph.table;
                      
                      // Queue a command to load table.rows.
                      ctx.load(table, "rows");
                      return ctx.sync().then(function() {
                          var rows = table.rows;
                          
                          // for each table row, log cell count and row index.
                          for (var i = 0; i < rows.items.length; i++) {
                              console.log("Row " + i + " Id: " + rows.items[i].id);
                              console.log("Row " + i + " Cell Count: " + rows.items[i].cellCount);
                              console.log("Row " + i + " Row Index: " + rows.items[i].rowIndex);
                          }
                          return ctx.sync();
                      });
                  }
              }
          })
      })

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      OneNote.run(function(ctx) {
          var app = ctx.application;
          var outline = app.getActiveOutline();
          
          // Queue a command to load outline.paragraphs and their types.
          ctx.load(outline, "paragraphs, paragraphs/type");
          
          // Run the queued commands, and return a promise to indicate task completion.
          return ctx.sync().then(function () {
              var paragraphs = outline.paragraphs;
              
              // for each table, get table rows.
              for (var i = 0; i < paragraphs.items.length; i++) {
                  var paragraph = paragraphs.items[i];
                  if (paragraph.type == "Table") {
                      var table = paragraph.table;
                      
                      // Queue a command to load parentTable and cells of each row in the table.
                      ctx.load(table, "rows/parentTable, rows/cells");
                      return ctx.sync().then(function() {
                          var rows = table.rows;
                          
                          // for each row, log parentTable and cells
                          for (var i = 0; i < rows.items.length; i++) {
                              console.log("Row " + i + " Parent Table Id: " + rows.items[i].parentTable.id);
                              var cells = rows.items[i].cells;
                              for (var j = 0 ; j < cells.items.length; j++) {
                                  console.log("Row " + i + " Cell " + j + " Id: " + cells.items[j].id);
                              }
                          }
                          return ctx.sync();
                      });
                  }
              }
          })
      })

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: onenote.OneNote.TableRow.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): OneNote.TableRow;'
      return:
        type:
          - OneNote.TableRow
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.TableRow.parentTable
    summary: |-
      Gets the parent table. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: parentTable
    fullName: onenote.OneNote.TableRow.parentTable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTable: OneNote.Table;'
      return:
        type:
          - OneNote.Table
  - uid: onenote.OneNote.TableRow.rowIndex
    summary: |-
      Gets the index of the row in its parent table. Read-only.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: rowIndex
    fullName: onenote.OneNote.TableRow.rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.TableRow.setShadingColor
    summary: |-
      Sets the shading color of all cells in the row. The color code to set the cells to.

      \[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]
    name: setShadingColor(colorCode)
    fullName: onenote.OneNote.TableRow.setShadingColor
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setShadingColor(colorCode: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: colorCode
          description: ''
          type:
            - string
  - uid: onenote.OneNote.TableRow.toJSON
    name: toJSON()
    fullName: onenote.OneNote.TableRow.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableRowData;'
      return:
        type:
          - OneNote.Interfaces.TableRowData
        description: ''
  - uid: onenote.OneNote.TableRow.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: onenote.OneNote.TableRow.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.TableRow;'
      return:
        type:
          - OneNote.TableRow
        description: ''
  - uid: onenote.OneNote.TableRow.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: onenote.OneNote.TableRow.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.TableRow;'
      return:
        type:
          - OneNote.TableRow
        description: ''
