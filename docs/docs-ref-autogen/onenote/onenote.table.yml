### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.Table
    summary: |-
      Represents a table in a OneNote page.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: OneNote.Table
    fullName: onenote.OneNote.Table
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.Table.appendColumn
      - onenote.OneNote.Table.appendRow
      - onenote.OneNote.Table.borderVisible
      - onenote.OneNote.Table.clear
      - onenote.OneNote.Table.columnCount
      - onenote.OneNote.Table.getCell
      - onenote.OneNote.Table.id
      - onenote.OneNote.Table.insertColumn
      - onenote.OneNote.Table.insertRow
      - onenote.OneNote.Table.load
      - onenote.OneNote.Table.paragraph
      - onenote.OneNote.Table.rowCount
      - onenote.OneNote.Table.rows
      - onenote.OneNote.Table.set
      - onenote.OneNote.Table.setShadingColor
      - onenote.OneNote.Table.toJSON
      - onenote.OneNote.Table.track
      - onenote.OneNote.Table.untrack
  - uid: onenote.OneNote.Table.appendColumn
    summary: >-
      Adds a column to the end of the table. Values, if specified, are set in the new column. Otherwise the column is
      empty.


      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: appendColumn(values)
    fullName: onenote.OneNote.Table.appendColumn
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendColumn(values?: string[]): void;'
      return:
        type:
          - void
        description: |


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, append a column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          table.appendColumn(["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: values
          description: >-
            Optional. Strings to insert in the new column, specified as an array. Must not have more values than rows in
            the table.
          type:
            - 'string[]'
  - uid: onenote.OneNote.Table.appendRow
    summary: |-
      Adds a row to the end of the table. Values, if specified, are set in the new row. Otherwise the row is empty.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: appendRow(values)
    fullName: onenote.OneNote.Table.appendRow
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendRow(values?: string[]): OneNote.TableRow;'
      return:
        type:
          - OneNote.TableRow
        description: |


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, append a column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var row = table.appendRow(["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: values
          description: >-
            Optional. Strings to insert in the new row, specified as an array. Must not have more values than columns in
            the table.
          type:
            - 'string[]'
  - uid: onenote.OneNote.Table.borderVisible
    summary: |-
      Gets or sets whether the borders are visible or not. True if they are visible, false if they are hidden.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: borderVisible
    fullName: onenote.OneNote.Table.borderVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'borderVisible: boolean;'
      return:
        type:
          - boolean
  - uid: onenote.OneNote.Table.clear
    summary: |-
      Clears the contents of the table.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: clear()
    fullName: onenote.OneNote.Table.clear
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: onenote.OneNote.Table.columnCount
    summary: |-
      Gets the number of columns in the table.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: columnCount
    fullName: onenote.OneNote.Table.columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.Table.getCell
    summary: |-
      Gets the table cell at a specified row and column.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'getCell(rowIndex, cellIndex)'
    fullName: onenote.OneNote.Table.getCell
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(rowIndex: number, cellIndex: number): OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
        description: |


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a cell in the second row and third column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(2 /*Row Index*/, 3 /*Column Index*/);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowIndex
          description: The index of the row.
          type:
            - number
        - id: cellIndex
          description: The index of the cell in the row.
          type:
            - number
  - uid: onenote.OneNote.Table.id
    summary: |-
      Gets the ID of the table. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: id
    fullName: onenote.OneNote.Table.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Table.insertColumn
    summary: >-
      Inserts a column at the given index in the table. Values, if specified, are set in the new column. Otherwise the
      column is empty.


      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'insertColumn(index, values)'
    fullName: onenote.OneNote.Table.insertColumn
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertColumn(index: number, values?: string[]): void;'
      return:
        type:
          - void
        description: |


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, insert a column at index two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          table.insertColumn(2, ["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Index where the column will be inserted in the table.
          type:
            - number
        - id: values
          description: >-
            Optional. Strings to insert in the new column, specified as an array. Must not have more values than rows in
            the table.
          type:
            - 'string[]'
  - uid: onenote.OneNote.Table.insertRow
    summary: >-
      Inserts a row at the given index in the table. Values, if specified, are set in the new row. Otherwise the row is
      empty.


      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'insertRow(index, values)'
    fullName: onenote.OneNote.Table.insertRow
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertRow(index: number, values?: string[]): OneNote.TableRow;'
      return:
        type:
          - OneNote.TableRow
        description: |


          #### Examples

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, insert a row at index two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var row = table.insertRow(2, ["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Index where the row will be inserted in the table.
          type:
            - number
        - id: values
          description: >-
            Optional. Strings to insert in the new row, specified as an array. Must not have more values than columns in
            the table.
          type:
            - 'string[]'
  - uid: onenote.OneNote.Table.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): OneNote.Table` - Where option.select is a comma-delimited
      string that specifies the properties/relationships to load, and options.expand is a comma-delimited string that
      specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Table` - Only available
      on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of
      collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.


      #### Examples


      ```javascript

      OneNote.run(function(ctx) {
          var app = ctx.application;
          var outline = app.getActiveOutline();
          
          // Queue a command to load outline.paragraphs and their types.
          ctx.load(outline, "paragraphs/type");
          
          // Run the queued commands, and return a promise to indicate task completion.
          return ctx.sync().then(function () {
              var paragraphs = outline.paragraphs;
              
              // For each table, log properties.
              for (var i = 0; i < paragraphs.items.length; i++) {
                  var paragraph = paragraphs.items[i];
                  if (paragraph.type == "Table") {
                      var table = paragraph.table;
                      ctx.load(table);
                      return ctx.sync().then(function() {
                          console.log("Table Id: " + table.id);
                          console.log("Row Count: " + table.rowCount);
                          console.log("Column Count: " + table.columnCount);
                          return ctx.sync();
                      });
                  }
              }
          });
      })

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```


      ```javascript

      OneNote.run(function(ctx) {
          var app = ctx.application;
          var outline = app.getActiveOutline();
          
          // Queue a command to load outline.paragraphs and their types.
          ctx.load(outline, "paragraphs, paragraphs/type");
          
          // Run the queued commands, and return a promise to indicate task completion.
          return ctx.sync().then(function () {
              var paragraphs = outline.paragraphs;
              
              // for each table, log its paragraph id.
              for (var i = 0; i < paragraphs.items.length; i++) {
                  var paragraph = paragraphs.items[i];
                  if (paragraph.type == "Table") {
                      var table = paragraph.table;
                      ctx.load(table, "paragraph/id, rows/id");
                      return ctx.sync().then(function() {
                          console.log("Paragraph Id: " + table.paragraph.id);
                          var rows = table.rows;
                          
                          // for each rows in the table, log row index and id.
                          for (var i = 0; i < rows.items.length; i++) {
                              console.log("Row " + i + " Id: " + rows.items[i].id);
                          }
                          return ctx.sync();
                      });
                  }
              }
          })
      })

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: onenote.OneNote.Table.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): OneNote.Table;'
      return:
        type:
          - OneNote.Table
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties/relationships to load.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.Table.paragraph
    summary: |-
      Gets the Paragraph object that contains the Table object. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: paragraph
    fullName: onenote.OneNote.Table.paragraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraph: OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
  - uid: onenote.OneNote.Table.rowCount
    summary: |-
      Gets the number of rows in the table.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: rowCount
    fullName: onenote.OneNote.Table.rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.Table.rows
    summary: |-
      Gets all of the table rows. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: rows
    fullName: onenote.OneNote.Table.rows
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rows: OneNote.TableRowCollection;'
      return:
        type:
          - OneNote.TableRowCollection
  - uid: onenote.OneNote.Table.set
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: OneNote.Table): void`
    name: 'set(properties, options)'
    fullName: onenote.OneNote.Table.set
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - Interfaces.TableUpdateData
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: onenote.OneNote.Table.setShadingColor
    summary: |-
      Sets the shading color of all cells in the table. The color code to set the cells to.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: setShadingColor(colorCode)
    fullName: onenote.OneNote.Table.setShadingColor
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setShadingColor(colorCode: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: colorCode
          description: ''
          type:
            - string
  - uid: onenote.OneNote.Table.toJSON
    name: toJSON()
    fullName: onenote.OneNote.Table.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableData;'
      return:
        type:
          - OneNote.Interfaces.TableData
        description: ''
  - uid: onenote.OneNote.Table.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: onenote.OneNote.Table.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Table;'
      return:
        type:
          - OneNote.Table
        description: ''
  - uid: onenote.OneNote.Table.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: onenote.OneNote.Table.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Table;'
      return:
        type:
          - OneNote.Table
        description: ''
