### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.InkAnalysis
    summary: |-
      Represents ink analysis data for a given set of ink strokes.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: OneNote.InkAnalysis
    fullName: onenote.OneNote.InkAnalysis
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.InkAnalysis.id
      - onenote.OneNote.InkAnalysis.load
      - onenote.OneNote.InkAnalysis.page
      - onenote.OneNote.InkAnalysis.paragraphs
      - onenote.OneNote.InkAnalysis.set
      - onenote.OneNote.InkAnalysis.toJSON
      - onenote.OneNote.InkAnalysis.track
      - onenote.OneNote.InkAnalysis.untrack
  - uid: onenote.OneNote.InkAnalysis.id
    summary: |-
      Gets the ID of the InkAnalysis object. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: id
    fullName: onenote.OneNote.InkAnalysis.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.InkAnalysis.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: onenote.OneNote.InkAnalysis.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.InkAnalysisLoadOptions): OneNote.InkAnalysis;'
      return:
        type:
          - OneNote.InkAnalysis
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OneNote.Interfaces.InkAnalysisLoadOptions
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function (ctx) {        
          var app = ctx.application;
          
          // Gets the active page.
          var page = app.getActivePage();
          
          // Load ink paragraphs.
          page.load('inkAnalysisOrNull/paragraphs');
          
          return ctx.sync()
              .then(function() {
                  console.log(page.inkAnalysisOrNull.paragraphs.items.length);
              })
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      }); 
      ```
  - uid: onenote.OneNote.InkAnalysis.page
    summary: |-
      Gets the parent page object. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: page
    fullName: onenote.OneNote.InkAnalysis.page
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly page: OneNote.Page;'
      return:
        type:
          - OneNote.Page
  - uid: onenote.OneNote.InkAnalysis.paragraphs
    summary: |-
      Gets the ink analysis paragraphs in this page. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: paragraphs
    fullName: onenote.OneNote.InkAnalysis.paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: OneNote.InkAnalysisParagraphCollection;'
      return:
        type:
          - OneNote.InkAnalysisParagraphCollection
  - uid: onenote.OneNote.InkAnalysis.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: onenote.OneNote.InkAnalysis.set
    langs:
      - typeScript
    type: method
    syntax:
      content: "set(properties: Interfaces.InkAnalysisUpdateData, options?: {\r\n            throwOnReadOnly?: boolean;\r\n        }): void;"
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.InkAnalysisUpdateData
        - id: options
          description: ''
          type:
            - "{\r\n            /**\r\n             * Throw an error if the passed-in property list includes read-only properties (default = true).\r\n             */\r\n            throwOnReadOnly?: boolean;\r\n        }"
  - uid: onenote.OneNote.InkAnalysis.toJSON
    name: toJSON()
    fullName: onenote.OneNote.InkAnalysis.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.InkAnalysisData;'
      return:
        type:
          - OneNote.Interfaces.InkAnalysisData
        description: ''
  - uid: onenote.OneNote.InkAnalysis.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: onenote.OneNote.InkAnalysis.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.InkAnalysis;'
      return:
        type:
          - OneNote.InkAnalysis
        description: ''
  - uid: onenote.OneNote.InkAnalysis.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: onenote.OneNote.InkAnalysis.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.InkAnalysis;'
      return:
        type:
          - OneNote.InkAnalysis
        description: ''
