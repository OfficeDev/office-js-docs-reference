### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.Notebook
    summary: |-
      Represents a OneNote notebook. Notebooks contain section groups and sections.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: OneNote.Notebook
    fullName: onenote.OneNote.Notebook
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.Notebook.addSection
      - onenote.OneNote.Notebook.addSectionGroup
      - onenote.OneNote.Notebook.baseUrl
      - onenote.OneNote.Notebook.clientUrl
      - onenote.OneNote.Notebook.getRestApiId
      - onenote.OneNote.Notebook.id
      - onenote.OneNote.Notebook.load
      - onenote.OneNote.Notebook.name
      - onenote.OneNote.Notebook.sectionGroups
      - onenote.OneNote.Notebook.sections
      - onenote.OneNote.Notebook.toJSON
      - onenote.OneNote.Notebook.track
      - onenote.OneNote.Notebook.untrack
  - uid: onenote.OneNote.Notebook.addSection
    summary: |-
      Adds a new section to the end of the notebook.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: addSection(name)
    fullName: onenote.OneNote.Notebook.addSection
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSection(name: string): OneNote.Section;'
      return:
        type:
          - OneNote.Section
        description: ''
      parameters:
        - id: name
          description: The name of the new section.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function (context) {

          // Gets the active notebook.
          var notebook = context.application.getActiveNotebook();

          // Queue a command to add a new section. 
          var section = notebook.addSection("Sample section");
          
          // Queue a command to load the new section. This example reads the name property later.
          section.load("name");

          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function() {
                  console.log("New section name is " + section.name);
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      }); 
      ```
  - uid: onenote.OneNote.Notebook.addSectionGroup
    summary: |-
      Adds a new section group to the end of the notebook.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: addSectionGroup(name)
    fullName: onenote.OneNote.Notebook.addSectionGroup
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSectionGroup(name: string): OneNote.SectionGroup;'
      return:
        type:
          - OneNote.SectionGroup
        description: ''
      parameters:
        - id: name
          description: The name of the new section.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function (context) {

          // Gets the active notebook.
          var notebook = context.application.getActiveNotebook();

          // Queue a command to add a new section group.
          var sectionGroup = notebook.addSectionGroup("Sample section group");

          // Queue a command to load the new section group.
          sectionGroup.load();

          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function() {
                  console.log("New section group name is " + sectionGroup.name);
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      }); 
      ```
  - uid: onenote.OneNote.Notebook.baseUrl
    summary: |-
      The url of the site that this notebook is located. Read only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: baseUrl
    fullName: onenote.OneNote.Notebook.baseUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly baseUrl: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Notebook.clientUrl
    summary: |-
      The client url of the notebook. Read only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: clientUrl
    fullName: onenote.OneNote.Notebook.clientUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly clientUrl: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Notebook.getRestApiId
    summary: |-
      Gets the REST API ID.

      \[ [API set: OneNoteApi](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: getRestApiId()
    fullName: onenote.OneNote.Notebook.getRestApiId
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function(ctx){
          // Get the current notebook.         
          var notebook = ctx.application.getActiveNotebook();
          var restAPIId = notebook.getRestApiId();

          return ctx.sync().
              then(function(){
                  console.log("The REST API ID is " + restApiId.value);
                  // Note that the REST API ID isn't all you need to interact with the OneNote REST API. For SharePoint notebooks, the notebook baseUrl should be used to talk to the OneNote REST API according to [OneNote Development Blog](https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/)
                  // (this is only required for SharePoint notebooks, baseUrl will be null for OneDrive notebooks)
              });
      });
      ```
  - uid: onenote.OneNote.Notebook.id
    summary: |-
      Gets the ID of the notebook. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: id
    fullName: onenote.OneNote.Notebook.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Notebook.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: onenote.OneNote.Notebook.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.NotebookLoadOptions): OneNote.Notebook;'
      return:
        type:
          - OneNote.Notebook
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OneNote.Interfaces.NotebookLoadOptions
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function (context) {
              
          // Get the current notebook.
          var notebook = context.application.getActiveNotebook();
                  
          // Queue a command to load the notebook. 
          // For best performance, request specific properties.           
          notebook.load('baseUrl');
                  
          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  console.log("Base url: " + notebook.baseUrl);
                  // This baseUrl should be used to talk to OneNote REST APIs according to https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/ (only required for SharePoint notebooks, will be null for OneDrive notebooks)
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```javascript
      OneNote.run(function (context) {
              
          // Get the current notebook.
          var notebook = context.application.getActiveNotebook();
                  
          // Queue a command to load the notebook. 
          // For best performance, request specific properties.           
          notebook.load('id');
                  
          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  console.log("Notebook ID: " + notebook.id);
                  
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```javascript
      OneNote.run(function (context) {
              
          // Get the current notebook.
          var notebook = context.application.getActiveNotebook();
                  
          // Queue a command to load the notebook. 
          // For best performance, request specific properties.           
          notebook.load('name');
                  
          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  console.log("Notebook name: " + notebook.name);
                  
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```javascript
      OneNote.run(function (context) {

          // Get the section groups in the notebook. 
          var sectionGroups = context.application.getActiveNotebook().sectionGroups;

          // Queue a command to load the sectionGroups. 
          sectionGroups.load("name");

          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function() {
                  $.each(sectionGroups.items, function(index, sectionGroup) {
                      console.log("Section group name: " + sectionGroup.name);
                  });
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```javascript
      OneNote.run(function (context) {

          // Gets the active notebook.
          var notebook = context.application.getActiveNotebook();
          
          // Queue a command to get immediate child sections of the notebook. 
          var childSections = notebook.sections;

          // Queue a command to load the childSections. 
          context.load(childSections);

          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function() {
                  $.each(childSections.items, function(index, childSection) {
                      console.log("Immediate child section name: " + childSection.name);
                  });            
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });   
      ```
  - uid: onenote.OneNote.Notebook.name
    summary: |-
      Gets the name of the notebook. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: name
    fullName: onenote.OneNote.Notebook.name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Notebook.sectionGroups
    summary: |-
      The section groups in the notebook. Read only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: sectionGroups
    fullName: onenote.OneNote.Notebook.sectionGroups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sectionGroups: OneNote.SectionGroupCollection;'
      return:
        type:
          - OneNote.SectionGroupCollection
  - uid: onenote.OneNote.Notebook.sections
    summary: |-
      The the sections of the notebook. Read only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: sections
    fullName: onenote.OneNote.Notebook.sections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sections: OneNote.SectionCollection;'
      return:
        type:
          - OneNote.SectionCollection
  - uid: onenote.OneNote.Notebook.toJSON
    name: toJSON()
    fullName: onenote.OneNote.Notebook.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.NotebookData;'
      return:
        type:
          - OneNote.Interfaces.NotebookData
        description: ''
  - uid: onenote.OneNote.Notebook.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: onenote.OneNote.Notebook.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Notebook;'
      return:
        type:
          - OneNote.Notebook
        description: ''
  - uid: onenote.OneNote.Notebook.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: onenote.OneNote.Notebook.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Notebook;'
      return:
        type:
          - OneNote.Notebook
        description: ''
