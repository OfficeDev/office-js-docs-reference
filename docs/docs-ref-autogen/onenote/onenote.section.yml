### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.Section
    summary: |-
      Represents a OneNote section. Sections can contain pages.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: OneNote.Section
    fullName: onenote.OneNote.Section
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.Section.addPage
      - onenote.OneNote.Section.clientUrl
      - onenote.OneNote.Section.copyToNotebook
      - onenote.OneNote.Section.copyToSectionGroup
      - onenote.OneNote.Section.getRestApiId
      - onenote.OneNote.Section.id
      - onenote.OneNote.Section.insertSectionAsSibling
      - onenote.OneNote.Section.isEncrypted
      - onenote.OneNote.Section.isLocked
      - onenote.OneNote.Section.load
      - onenote.OneNote.Section.name
      - onenote.OneNote.Section.notebook
      - onenote.OneNote.Section.pages
      - onenote.OneNote.Section.parentSectionGroup
      - onenote.OneNote.Section.parentSectionGroupOrNull
      - onenote.OneNote.Section.toJSON
      - onenote.OneNote.Section.track
      - onenote.OneNote.Section.untrack
      - onenote.OneNote.Section.webUrl
  - uid: onenote.OneNote.Section.addPage
    summary: |-
      Adds a new page to the end of the section.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: addPage(title)
    fullName: onenote.OneNote.Section.addPage
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addPage(title: string): OneNote.Page;'
      return:
        type:
          - onenote.OneNote.Page
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function (context) {
                      
              // Queue a command to add a page to the current section.
              var page = context.application.getActiveSection().addPage("Wish list");
                      
              // Queue a command to load the id and title of the new page. 
              // This example loads the new page so it can read its properties later.           
              page.load('id,title');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                       
                      // Display the properties.       
                      console.log("Page name: " + page.title);
                      console.log("Page ID: " + page.id);

                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: title
          description: The title of the new page.
          type:
            - string
  - uid: onenote.OneNote.Section.clientUrl
    summary: |-
      The client url of the section. Read only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: clientUrl
    fullName: onenote.OneNote.Section.clientUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly clientUrl: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Section.copyToNotebook
    summary: |-
      Copies this section to specified notebook.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: copyToNotebook(destinationNotebook)
    fullName: onenote.OneNote.Section.copyToNotebook
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyToNotebook(destinationNotebook: OneNote.Notebook): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function (context) {
              var app = context.application;
              
              // Gets the active Notebook.
              var notebook = app.getActiveNotebook();
              
              // Gets the active Section.
              var section = app.getActiveSection();
              
              var newSection;
              
              return context.sync()
                  .then(function() {
                      newSection = section.copyToNotebook(notebook);
                      newSection.load('id');
                      return context.sync();
                  })
                  .then(function() {
                      console.log(newSection.id);
                  });
          })
          .catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: destinationNotebook
          description: The notebook to copy this section to.
          type:
            - onenote.OneNote.Notebook
  - uid: onenote.OneNote.Section.copyToSectionGroup
    summary: |-
      Copies this section to specified section group.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: copyToSectionGroup(destinationSectionGroup)
    fullName: onenote.OneNote.Section.copyToSectionGroup
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyToSectionGroup(destinationSectionGroup: OneNote.SectionGroup): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function (ctx) {
              var app = ctx.application;
              
              // Gets the active Notebook.
              var notebook = app.getActiveNotebook();
              
              // Gets the active Section.
              var section = app.getActiveSection();
              
              var newSection;
              
              return ctx.sync()
                  .then(function() {
                      var firstSectionGroup = notebook.sectionGroups.items[0];
                      newSection = section.copyToSectionGroup(firstSectionGroup);
                      newSection.load('id');
                      return ctx.sync();
                  })
                  .then(function() {
                      console.log(newSection.id);
                  });
          })
          .catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: destinationSectionGroup
          description: The section group to copy this section to.
          type:
            - onenote.OneNote.SectionGroup
  - uid: onenote.OneNote.Section.getRestApiId
    summary: |-
      Gets the REST API ID.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: getRestApiId()
    fullName: onenote.OneNote.Section.getRestApiId
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function(ctx){
              // Get the current section.         
              var section = ctx.application.getActiveSection();
              var restApiId = section.getRestApiId();

              return ctx.sync().
                  then(function(){
                      console.log("The REST API ID is " + restApiId.value);
                      // Note that the REST API ID isn't all you need to interact with the OneNote REST API. 
                      // This is only required for SharePoint notebooks. baseUrl will be null for OneDrive notebooks.
                      // For SharePoint notebooks, the notebook baseUrl should be used to talk to the 
                      // OneNote REST API according to the OneNote Development Blog.
                      // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/
                  });
          });
          ```
  - uid: onenote.OneNote.Section.id
    summary: |-
      Gets the ID of the section. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: id
    fullName: onenote.OneNote.Section.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Section.insertSectionAsSibling
    summary: |-
      Inserts a new section before or after the current section.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: 'insertSectionAsSibling(location, title)'
    fullName: onenote.OneNote.Section.insertSectionAsSibling
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertSectionAsSibling(location: OneNote.InsertLocation, title: string): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: |-

          #### Examples

          ```javascript
          OneNote.run(function (context) {
                      
              // Queue a command to insert a section after the current section.
              var section = context.application.getActiveSection().insertSectionAsSibling("After", "New section");
                      
              // Queue a command to load the id and name of the new section. 
              // This example loads the new section so it can read its properties later.           
              section.load('id,name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                       
                      // Display the properties.       
                      console.log("Section name: " + section.name);
                      console.log("Section ID: " + section.id);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: location
          description: The location of the new section relative to the current section.
          type:
            - onenote.OneNote.InsertLocation
        - id: title
          description: The name of the new section.
          type:
            - string
  - uid: onenote.OneNote.Section.isEncrypted
    summary: |-
      True if this section is encrypted with a password. Read only

      \[ [API set: OneNoteApi 1.2](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: isEncrypted
    fullName: onenote.OneNote.Section.isEncrypted
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEncrypted: boolean;'
      return:
        type:
          - boolean
  - uid: onenote.OneNote.Section.isLocked
    summary: |-
      True if this section is locked. Read only

      \[ [API set: OneNoteApi 1.2](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: isLocked
    fullName: onenote.OneNote.Section.isLocked
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isLocked: boolean;'
      return:
        type:
          - boolean
  - uid: onenote.OneNote.Section.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): OneNote.Section` - Where option.select is a comma-delimited
      string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the
      navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Section` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.

      #### Examples


      ```javascript

      OneNote.run(function (context) {
              
          // Get the current section.
          var section = context.application.getActiveSection();
                  
          // Queue a command to load the section. 
          // For best performance, request specific properties.           
          section.load("id");
                  
          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  console.log("Section ID: " + section.id);
              });
      })

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      OneNote.run(function (context) {
              
          // Get the current section.
          var section = context.application.getActiveSection();
                  
          // Queue a command to load the section with the specified properties. 
          section.load("name,notebook/name");
                  
          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  console.log("Section name: " + section.name);
                  console.log("Parent notebook name: " + section.notebook.name);
              });
      })

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      OneNote.run(function (context) {
          // Queue a command to add a page to the current section.
          var section = context.application.getActiveSection();
          section.load('clientUrl,notebook');
          var sectionGroup = section.parentSectionGroupOrNull;
          
          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  if(sectionGroup.isNull === false)
                  {
                      // If a parent section group exists, queue a command to add a section in it!
                      sectionGroup.addSection("NewSectionInSectionGroup");
                  }
                  return context.sync();
              });
      })

      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: onenote.OneNote.Section.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.Section.name
    summary: |-
      Gets the name of the section. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: name
    fullName: onenote.OneNote.Section.name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Section.notebook
    summary: |-
      Gets the notebook that contains the section. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: notebook
    fullName: onenote.OneNote.Section.notebook
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly notebook: OneNote.Notebook;'
      return:
        type:
          - onenote.OneNote.Notebook
  - uid: onenote.OneNote.Section.pages
    summary: |-
      The collection of pages in the section. Read only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: pages
    fullName: onenote.OneNote.Section.pages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pages: OneNote.PageCollection;'
      return:
        type:
          - onenote.OneNote.PageCollection
  - uid: onenote.OneNote.Section.parentSectionGroup
    summary: >-
      Gets the section group that contains the section. Throws ItemNotFound if the section is a direct child of the
      notebook. Read-only.


      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: parentSectionGroup
    fullName: onenote.OneNote.Section.parentSectionGroup
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionGroup: OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
  - uid: onenote.OneNote.Section.parentSectionGroupOrNull
    summary: >-
      Gets the section group that contains the section. Returns null if the section is a direct child of the notebook.
      Read-only.


      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: parentSectionGroupOrNull
    fullName: onenote.OneNote.Section.parentSectionGroupOrNull
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionGroupOrNull: OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
  - uid: onenote.OneNote.Section.toJSON
    name: toJSON()
    fullName: onenote.OneNote.Section.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.SectionData;'
      return:
        type:
          - onenote.OneNote.Interfaces.SectionData
        description: ''
  - uid: onenote.OneNote.Section.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: onenote.OneNote.Section.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: ''
  - uid: onenote.OneNote.Section.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: onenote.OneNote.Section.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: ''
  - uid: onenote.OneNote.Section.webUrl
    summary: |-
      The web url of the page. Read only

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: webUrl
    fullName: onenote.OneNote.Section.webUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly webUrl: string;'
      return:
        type:
          - string
