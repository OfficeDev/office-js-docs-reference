### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.RichText
    summary: |-
      Represents a RichText object in a Paragraph.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: OneNote.RichText
    fullName: onenote.OneNote.RichText
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.RichText.getHtml
      - onenote.OneNote.RichText.id
      - onenote.OneNote.RichText.languageId
      - onenote.OneNote.RichText.load
      - onenote.OneNote.RichText.paragraph
      - onenote.OneNote.RichText.text
      - onenote.OneNote.RichText.toJSON
      - onenote.OneNote.RichText.track
      - onenote.OneNote.RichText.untrack
  - uid: onenote.OneNote.RichText.getHtml
    summary: |-
      Get the HTML of the rich text

      \[ [API set: OneNoteApi](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: getHtml()
    fullName: onenote.OneNote.RichText.getHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: The html of the rich text
  - uid: onenote.OneNote.RichText.id
    summary: |-
      Gets the ID of the RichText object. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: id
    fullName: onenote.OneNote.RichText.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.RichText.languageId
    summary: |-
      The language id of the text. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: languageId
    fullName: onenote.OneNote.RichText.languageId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly languageId: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.RichText.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: onenote.OneNote.RichText.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.RichTextLoadOptions): OneNote.RichText;'
      return:
        type:
          - onenote.OneNote.RichText
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - onenote.OneNote.Interfaces.RichTextLoadOptions
    remarks: |


      #### Examples

      ```javascript
      OneNote.run(function (context) {

          // Get the collection of pageContent items from the page.
          var pageContents = context.application.getActivePage().contents;

          // Get the first PageContent on the page, and then get its outline's paragraphs.
          var outlinePageContents = ;
          var paragraphs = ;
          var richTextParagraphs = ;
          // Queue a command to load the id and type of each page content in the outline.
          pageContents.load("id,type");

          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                  // Load all page contents of type Outline
                  $.each(pageContents.items, function(index, pageContent) {
                      if(pageContent.type == 'Outline')
                      {
                          pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');
                          outlinePageContents.push(pageContent);
                      }
                  });
                  return context.sync();
              })
              .then(function () {
                  // Load all rich text paragraphs across outlines
                  $.each(outlinePageContents, function(index, outlinePageContent) {
                      var outline = outlinePageContent.outline;
                      paragraphs = paragraphs.concat(outline.paragraphs.items);
                  });
                  $.each(paragraphs, function(index, paragraph) {
                      if(paragraph.type == 'RichText')
                      {
                          richTextParagraphs.push(paragraph);
                          paragraph.load("id,richText/text");
                      }
                  });
                  return context.sync();
              })
              .then(function () {
                  // Display all rich text paragraphs to the console
                  $.each(richTextParagraphs, function(index, richTextParagraph) {
                      var richText = richTextParagraph.richText;
                      console.log("Paragraph found with richtext content : " + richText.text + " and richtext id : " + richText.id);
                  });
                  return context.sync();
              });
      });
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      }); 
      ```
  - uid: onenote.OneNote.RichText.paragraph
    summary: |-
      Gets the Paragraph object that contains the RichText object. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: paragraph
    fullName: onenote.OneNote.RichText.paragraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraph: OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
  - uid: onenote.OneNote.RichText.text
    summary: |-
      Gets the text content of the RichText object. Read-only.

      \[ [API set: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets) \]
    name: text
    fullName: onenote.OneNote.RichText.text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.RichText.toJSON
    name: toJSON()
    fullName: onenote.OneNote.RichText.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.RichTextData;'
      return:
        type:
          - onenote.OneNote.Interfaces.RichTextData
        description: ''
  - uid: onenote.OneNote.RichText.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: onenote.OneNote.RichText.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.RichText;'
      return:
        type:
          - onenote.OneNote.RichText
        description: ''
  - uid: onenote.OneNote.RichText.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: onenote.OneNote.RichText.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.RichText;'
      return:
        type:
          - onenote.OneNote.RichText
        description: ''
