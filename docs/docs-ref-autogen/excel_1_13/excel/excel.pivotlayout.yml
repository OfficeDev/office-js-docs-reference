### YamlMime:TSType
name: Excel.PivotLayout
uid: 'excel!Excel.PivotLayout:class'
package: excel!
fullName: Excel.PivotLayout
summary: Represents the visual layout of the PivotTable.
remarks: '\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: altTextDescription
    uid: 'excel!Excel.PivotLayout#altTextDescription:member'
    package: excel!
    fullName: altTextDescription
    summary: >-
      The alt text description of the PivotTable.


      Alt text provides alternative, text-based representations of the information contained in the PivotTable. This
      information is useful for people with vision or cognitive impairments who may not be able to see or understand the
      table. A title can be read to a person with a disability and is used to determine whether they wish to hear the
      description of the content.
    remarks: >-
      \[ [API set: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Set the alt text for the displayed PivotTable.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;

        pivotLayout.altTextTitle = "Farm Sales PivotTable";
        pivotLayout.altTextDescription = "A summary of fruit sales. It is pivoted on farm name, and fruit type. The aggregated data is both the sums of crates sold at the farms and the sums of crates sold wholesale.";
        console.log("Adding alt text. Check the PivotTable settings to see the changes.");

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'altTextDescription: string;'
      return:
        type: string
  - name: altTextTitle
    uid: 'excel!Excel.PivotLayout#altTextTitle:member'
    package: excel!
    fullName: altTextTitle
    summary: >-
      The alt text title of the PivotTable.


      Alt text provides alternative, text-based representations of the information contained in the PivotTable. This
      information is useful for people with vision or cognitive impairments who may not be able to see or understand the
      table. A title can be read to a person with a disability and is used to determine whether they wish to hear the
      description of the content.
    remarks: '\[ [API set: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'altTextTitle: string;'
      return:
        type: string
  - name: autoFormat
    uid: 'excel!Excel.PivotLayout#autoFormat:member'
    package: excel!
    fullName: autoFormat
    summary: Specifies if formatting will be automatically formatted when itâ€™s refreshed or when fields are moved.
    remarks: '\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoFormat: boolean;'
      return:
        type: boolean
  - name: context
    uid: 'excel!Excel.PivotLayout#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: emptyCellText
    uid: 'excel!Excel.PivotLayout#emptyCellText:member'
    package: excel!
    fullName: emptyCellText
    summary: >-
      The text that is automatically filled into any empty cell in the PivotTable if `fillEmptyCells == true`<!-- -->.
      Note that this value persists if `fillEmptyCells` is set to `false`<!-- -->, and that setting this value does not
      set that property to `true`<!-- -->. By default, this is an empty string.
    remarks: >-
      \[ [API set: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Set a default value for an empty cell in the PivotTable. This doesn't include cells left blank by the layout.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;

        pivotLayout.emptyCellText = "--";

        // Set the text alignment to match the rest of the PivotTable.
        pivotLayout.getDataBodyRange().format.horizontalAlignment = Excel.HorizontalAlignment.right;
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'emptyCellText: string;'
      return:
        type: string
  - name: enableFieldList
    uid: 'excel!Excel.PivotLayout#enableFieldList:member'
    package: excel!
    fullName: enableFieldList
    summary: Specifies if the field list can be shown in the UI.
    remarks: '\[ [API set: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableFieldList: boolean;'
      return:
        type: boolean
  - name: fillEmptyCells
    uid: 'excel!Excel.PivotLayout#fillEmptyCells:member'
    package: excel!
    fullName: fillEmptyCells
    summary: >-
      Specifies whether empty cells in the PivotTable should be populated with the `emptyCellText`<!-- -->. Default is
      `false`<!-- -->. Note that the value of `emptyCellText` persists when this property is set to `false`<!-- -->.
    remarks: >-
      \[ [API set: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Toggle whether empty cells are filled with a default value.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;

        pivotLayout.load("fillEmptyCells");
        await context.sync();

        let fillToSet = !pivotLayout.fillEmptyCells;
        console.log(`Filling empty cells? - ${fillToSet}`);

        pivotLayout.fillEmptyCells = fillToSet;
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'fillEmptyCells: boolean;'
      return:
        type: boolean
  - name: layoutType
    uid: 'excel!Excel.PivotLayout#layoutType:member'
    package: excel!
    fullName: layoutType
    summary: >-
      This property indicates the PivotLayoutType of all fields on the PivotTable. If fields have different states, this
      will be null.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Change the PivotLayout.type to a new type.
        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.layout.load("layoutType");
        await context.sync();

        // Cycle between the three layout types.
        if (pivotTable.layout.layoutType === "Compact") {
          pivotTable.layout.layoutType = "Outline";
        } else if (pivotTable.layout.layoutType === "Outline") {
          pivotTable.layout.layoutType = "Tabular";
        } else {
          pivotTable.layout.layoutType = "Compact";
        }

        await context.sync();
        console.log("Pivot layout is now " + pivotTable.layout.layoutType);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'layoutType: Excel.PivotLayoutType | "Compact" | "Tabular" | "Outline";'
      return:
        type: '<xref uid="excel!Excel.PivotLayoutType:enum" /> | "Compact" | "Tabular" | "Outline"'
  - name: preserveFormatting
    uid: 'excel!Excel.PivotLayout#preserveFormatting:member'
    package: excel!
    fullName: preserveFormatting
    summary: >-
      Specifies if formatting is preserved when the report is refreshed or recalculated by operations such as pivoting,
      sorting, or changing page field items.
    remarks: >-
      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Set whether the PivotTable keeps the established format after it is refreshed and recalculated.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;

        pivotLayout.load("preserveFormatting");
        await context.sync();

        let preserveFormattingToSet = !pivotLayout.preserveFormatting;
        console.log(`Preserve the formatting PivotTable after a refresh? - ${preserveFormattingToSet}`);

        pivotLayout.preserveFormatting = preserveFormattingToSet;
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'preserveFormatting: boolean;'
      return:
        type: boolean
  - name: showColumnGrandTotals
    uid: 'excel!Excel.PivotLayout#showColumnGrandTotals:member'
    package: excel!
    fullName: showColumnGrandTotals
    summary: Specifies if the PivotTable report shows grand totals for columns.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Turn the grand totals on and off for the rows and columns.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;

        pivotLayout.load(["showRowGrandTotals", "showColumnGrandTotals"]);
        await context.sync();

        let showColumnTotals = !pivotLayout.showColumnGrandTotals;
        let showRowTotals = !pivotLayout.showRowGrandTotals;
        console.log(`Show column grand totals? - ${showColumnTotals}`);
        console.log(`Show row grand totals? - ${showRowTotals}`);

        pivotLayout.showColumnGrandTotals = showColumnTotals;
        pivotLayout.showRowGrandTotals = showRowTotals;

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showColumnGrandTotals: boolean;'
      return:
        type: boolean
  - name: showFieldHeaders
    uid: 'excel!Excel.PivotLayout#showFieldHeaders:member'
    package: excel!
    fullName: showFieldHeaders
    summary: Specifies whether the PivotTable displays field headers (field captions and filter drop-downs).
    remarks: >-
      \[ [API set: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Turn the field headers on and off for the row and column hierarchies.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;
        pivotLayout.load("showFieldHeaders");
        await context.sync();

        let showHeaders = !pivotLayout.showFieldHeaders;
        console.log(`Show field headers? - ${showHeaders}`);
        pivotLayout.showFieldHeaders = showHeaders;
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showFieldHeaders: boolean;'
      return:
        type: boolean
  - name: showRowGrandTotals
    uid: 'excel!Excel.PivotLayout#showRowGrandTotals:member'
    package: excel!
    fullName: showRowGrandTotals
    summary: Specifies if the PivotTable report shows grand totals for rows.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Turn the grand totals on and off for the rows and columns.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;

        pivotLayout.load(["showRowGrandTotals", "showColumnGrandTotals"]);
        await context.sync();

        let showColumnTotals = !pivotLayout.showColumnGrandTotals;
        let showRowTotals = !pivotLayout.showRowGrandTotals;
        console.log(`Show column grand totals? - ${showColumnTotals}`);
        console.log(`Show row grand totals? - ${showRowTotals}`);

        pivotLayout.showColumnGrandTotals = showColumnTotals;
        pivotLayout.showRowGrandTotals = showRowTotals;

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showRowGrandTotals: boolean;'
      return:
        type: boolean
  - name: subtotalLocation
    uid: 'excel!Excel.PivotLayout#subtotalLocation:member'
    package: excel!
    fullName: subtotalLocation
    summary: >-
      This property indicates the `SubtotalLocationType` of all fields on the PivotTable. If fields have different
      states, this will be `null`<!-- -->.
    remarks: '\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'subtotalLocation: Excel.SubtotalLocationType | "AtTop" | "AtBottom" | "Off";'
      return:
        type: '<xref uid="excel!Excel.SubtotalLocationType:enum" /> | "AtTop" | "AtBottom" | "Off"'
methods:
  - name: displayBlankLineAfterEachItem(display)
    uid: 'excel!Excel.PivotLayout#displayBlankLineAfterEachItem:member(1)'
    package: excel!
    fullName: displayBlankLineAfterEachItem(display)
    summary: >-
      Sets whether or not to display a blank line after each item. This is set at the global level for the PivotTable
      and applied to individual PivotFields. This function overwrites the setting for all fields in the PivotTable to
      the value of `display` parameter.
    remarks: >-
      \[ [API set: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Add a blank row after each PivotItem in the row hierarchy.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;

        pivotLayout.displayBlankLineAfterEachItem(true);
        console.log("Setting `PivotLayout.displayBlankLineAfterEachItem` to true.");

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayBlankLineAfterEachItem(display: boolean): void;'
      parameters:
        - id: display
          description: True turns on the blank-line display setting. False turns it off.
          type: boolean
      return:
        type: void
        description: ''
  - name: getColumnLabelRange()
    uid: 'excel!Excel.PivotLayout#getColumnLabelRange:member(1)'
    package: excel!
    fullName: getColumnLabelRange()
    summary: Returns the range where the PivotTable's column labels reside.
    remarks: '\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnLabelRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: getDataBodyRange()
    uid: 'excel!Excel.PivotLayout#getDataBodyRange:member(1)'
    package: excel!
    fullName: getDataBodyRange()
    summary: Returns the range where the PivotTable's data values reside.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

      await Excel.run(async (context) => {
          const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

          // the layout controls the ranges used by the PivotTable
          const range = pivotTable.layout.getDataBodyRange();

          // get all the data hierarchy totals
          const grandTotalRange = range.getLastRow();
          grandTotalRange.load("address");
          await context.sync();
          
          // use the wholesale and farm sale totals to make a final sum
          const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange("B27:C27");
          masterTotalRange.formulas = [["All Crates", "=SUM(" + grandTotalRange.address + ")"]];
          await context.sync();
      });

      ```

      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

      await Excel.run(async (context) => {
          const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

          // the layout controls the ranges used by the PivotTable
          const range = pivotTable.layout.getDataBodyRange();

          // get all the data hierarchy totals
          const grandTotalRange = range.getLastRow();
          grandTotalRange.load("address");
          await context.sync();
          
          // use the wholesale and farm sale totals to make a final sum
          const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange("B27:C27");
          masterTotalRange.formulas = [["All Crates", "=SUM(" + grandTotalRange.address + ")"]];
          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataBodyRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: getDataHierarchy(cell)
    uid: 'excel!Excel.PivotLayout#getDataHierarchy:member(1)'
    package: excel!
    fullName: getDataHierarchy(cell)
    summary: Gets the DataHierarchy that is used to calculate the value in a specified range within the PivotTable.
    remarks: '\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataHierarchy(cell: Range | string): Excel.DataPivotHierarchy;'
      parameters:
        - id: cell
          description: A single cell within the PivotTable data body.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
      return:
        type: '<xref uid="excel!Excel.DataPivotHierarchy:class" />'
        description: The DataPivotHierarchy object used to calculate the value in the specified cell.
  - name: getFilterAxisRange()
    uid: 'excel!Excel.PivotLayout#getFilterAxisRange:member(1)'
    package: excel!
    fullName: getFilterAxisRange()
    summary: Returns the range of the PivotTable's filter area.
    remarks: '\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFilterAxisRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: 'getPivotItems(axis, cell)'
    uid: 'excel!Excel.PivotLayout#getPivotItems:member(1)'
    package: excel!
    fullName: 'getPivotItems(axis, cell)'
    summary: Gets the PivotItems from an axis that make up the value in a specified range within the PivotTable.
    remarks: '\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPivotItems(axis: Excel.PivotAxis, cell: Range | string): Excel.PivotItemCollection;'
      parameters:
        - id: axis
          description: The axis from which to get the PivotItems. Must be either "row" or "column."
          type: '<xref uid="excel!Excel.PivotAxis:enum" />'
        - id: cell
          description: A single cell within the PivotTable's data body.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
      return:
        type: '<xref uid="excel!Excel.PivotItemCollection:class" />'
        description: A PivotItemCollection of the PivotItems that are used to calculate the values in the specified row.
  - name: 'getPivotItems(axisString, cell)'
    uid: 'excel!Excel.PivotLayout#getPivotItems:member(2)'
    package: excel!
    fullName: 'getPivotItems(axisString, cell)'
    summary: Gets the PivotItems from an axis that make up the value in a specified range within the PivotTable.
    remarks: '\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getPivotItems(axisString: "Unknown" | "Row" | "Column" | "Data" | "Filter", cell: Range | string):
        Excel.PivotItemCollection;
      parameters:
        - id: axisString
          description: The axis from which to get the PivotItems. Must be either "row" or "column."
          type: '"Unknown" | "Row" | "Column" | "Data" | "Filter"'
        - id: cell
          description: A single cell within the PivotTable's data body.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
      return:
        type: '<xref uid="excel!Excel.PivotItemCollection:class" />'
        description: A PivotItemCollection of the PivotItems that are used to calculate the values in the specified row.
  - name: getRange()
    uid: 'excel!Excel.PivotLayout#getRange:member(1)'
    package: excel!
    fullName: getRange()
    summary: 'Returns the range the PivotTable exists on, excluding the filter area.'
    remarks: '\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: getRowLabelRange()
    uid: 'excel!Excel.PivotLayout#getRowLabelRange:member(1)'
    package: excel!
    fullName: getRowLabelRange()
    summary: Returns the range where the PivotTable's row labels reside.
    remarks: '\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowLabelRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.PivotLayout#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.PivotLayoutLoadOptions): Excel.PivotLayout;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="excel!Excel.Interfaces.PivotLayoutLoadOptions:interface" />'
      return:
        type: '<xref uid="excel!Excel.PivotLayout:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.PivotLayout#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.PivotLayout;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.PivotLayout:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.PivotLayout#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.PivotLayout;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.PivotLayout:class" />'
        description: ''
  - name: repeatAllItemLabels(repeatLabels)
    uid: 'excel!Excel.PivotLayout#repeatAllItemLabels:member(1)'
    package: excel!
    fullName: repeatAllItemLabels(repeatLabels)
    summary: Sets the "repeat all item labels" setting across all fields in the PivotTable.
    remarks: >-
      \[ [API set: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml

      await Excel.run(async (context) => {
        // Repeat the PivotItem labels for each row used by another level of the row hierarchy.
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        const pivotLayout = pivotTable.layout;

        pivotLayout.repeatAllItemLabels(true);
        console.log("Setting `PivotLayout.repeatAllItemLabels` to true.");

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'repeatAllItemLabels(repeatLabels: boolean): void;'
      parameters:
        - id: repeatLabels
          description: True turns on the label-repetition display setting. False turns it off.
          type: boolean
      return:
        type: void
        description: ''
  - name: 'set(properties, options)'
    uid: 'excel!Excel.PivotLayout#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.PivotLayoutUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="excel!Excel.Interfaces.PivotLayoutUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.PivotLayout#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.PivotLayout): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.PivotLayout:class" />'
      return:
        type: void
        description: ''
  - name: 'setAutoSortOnCell(cell, sortBy)'
    uid: 'excel!Excel.PivotLayout#setAutoSortOnCell:member(1)'
    package: excel!
    fullName: 'setAutoSortOnCell(cell, sortBy)'
    summary: >-
      Sets the PivotTable to automatically sort using the specified cell to automatically select all necessary criteria
      and context. This behaves identically to applying an autosort from the UI.
    remarks: '\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setAutoSortOnCell(cell: Range | string, sortBy: Excel.SortBy): void;'
      parameters:
        - id: cell
          description: A single cell to use get the criteria from for applying the autosort.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
        - id: sortBy
          description: The direction of the sort.
          type: '<xref uid="excel!Excel.SortBy:enum" />'
      return:
        type: void
        description: ''
  - name: 'setAutoSortOnCell(cell, sortByString)'
    uid: 'excel!Excel.PivotLayout#setAutoSortOnCell:member(2)'
    package: excel!
    fullName: 'setAutoSortOnCell(cell, sortByString)'
    summary: >-
      Sets the PivotTable to automatically sort using the specified cell to automatically select all necessary criteria
      and context. This behaves identically to applying an autosort from the UI.
    remarks: '\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setAutoSortOnCell(cell: Range | string, sortByString: "Ascending" | "Descending"): void;'
      parameters:
        - id: cell
          description: A single cell to use get the criteria from for applying the autosort.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
        - id: sortByString
          description: The direction of the sort.
          type: '"Ascending" | "Descending"'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.PivotLayout#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.PivotLayout object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Excel.Interfaces.PivotLayoutData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.PivotLayoutData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.PivotLayoutData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
