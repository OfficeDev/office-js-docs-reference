### YamlMime:UniversalReference
items:
  - uid: outlook.Office.Recipients
    summary: '\[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]'
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>Applicable Outlook mode</td><td>Compose</td></tr></table>
    name: Office.Recipients
    fullName: outlook.Office.Recipients
    langs:
      - typeScript
    type: interface
    package: outlook
    children:
      - outlook.Office.Recipients.addAsync
      - outlook.Office.Recipients.getAsync
      - outlook.Office.Recipients.setAsync
  - uid: outlook.Office.Recipients.addAsync
    summary: |-
      Adds a recipient list to the existing recipients for an appointment or message.

      The recipients parameter can be an array of one of the following:

      - Strings containing SMTP email addresses

      - EmailUser objects

      - EmailAddressDetails objects

      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>Applicable Outlook mode</td><td>Compose</td></tr>


      <tr><td>Errors</td><td>NumberOfRecipientsExceeded - The number of recipients exceeded 100
      entries.</td></tr></table>


      In addition to the main signature, this method also has these signatures:


      `addAsync(recipients: (string \| EmailUser \| EmailAddressDetails)\[\]): void;`


      `addAsync(recipients: (string \| EmailUser \| EmailAddressDetails)\[\], options: AsyncContextOptions): void;`


      `addAsync(recipients: (string \| EmailUser \| EmailAddressDetails)\[\], callback: (result: AsyncResult) => void):
      void;`


      #### Examples


      ```javascript

      // The following example creates an array of EmailUser objects

      // and adds them to the To recipients of the message.

      var newRecipients = [
          {
              "displayName": "Allie Bellew",
              "emailAddress": "allieb@contoso.com"
          },
          {
              "displayName": "Alex Darrow",
              "emailAddress": "alexd@contoso.com"
          }
      ];


      Office.context.mailbox.item.to.addAsync(newRecipients, function(result) {
          if (result.error) {
              showMessage(result.error);
          } else {
              showMessage("Recipients added");
          }
      });

      ```
    name: 'addAsync(recipients, options, callback)'
    fullName: outlook.Office.Recipients.addAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addAsync(recipients: (string | EmailUser | EmailAddressDetails)[], options?: AsyncContextOptions, callback?:
        (result: AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: The recipients to add to the recipients list.
          type:
            - '(string | EmailUser | EmailAddressDetails)[]'
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type AsyncResult. If adding the recipients fails, the asyncResult.error property will contain
            an error code.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.Recipients.getAsync
    summary: >-
      Gets a recipient list for an appointment or message.


      When the call completes, the asyncResult.value property will contain an array
      of[Office.EmailAddressDetails](xref:outlook.Office.EmailAddressDetails) objects.


      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>Applicable Outlook mode</td><td>Compose</td></tr></table>


      In addition to the main signature, this method also has this signature:


      `getAsync(callback: (result: AsyncResult) => void): void;`


      #### Examples


      ```javascript

      // The following example gets the optional attendees of a meeting.

      Office.context.mailbox.item.optionalAttendees.getAsync(function(result) {
          if (result.error) {
              showMessage(result.error);
          } else {
              var msg = "";
              result.value.forEach(function(recip, index) {
                  msg = msg + recip.displayName + " (" + recip.emailAddress + ");";
              });
              showMessage(msg);
          }
      });

      ```
    name: 'getAsync(options, callback)'
    fullName: outlook.Office.Recipients.getAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(options: AsyncContextOptions, callback: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. asyncContext: Developers can
            provide any object they wish to access in the callback method.
          type:
            - AsyncContextOptions
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type AsyncResult.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.Recipients.setAsync
    summary: |-
      Sets a recipient list for an appointment or message.

      The setAsync method overwrites the current recipient list.

      The recipients parameter can be an array of one of the following:

      - Strings containing SMTP email addresses

      - [Office.EmailUser](xref:outlook.Office.EmailUser) objects

      - [Office.EmailAddressDetails](xref:outlook.Office.EmailAddressDetails) objects

      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>Applicable Outlook mode</td><td>Compose</td></tr>


      <tr><td>Errors</td><td>NumberOfRecipientsExceeded - The number of recipients exceeded 100
      entries.</td></tr></table>


      In addition to the main signature, this method also has these signatures:


      `setAsync(recipients: (string \| EmailUser \| EmailAddressDetails)\[\]): void;`


      `setAsync(recipients: (string \| EmailUser \| EmailAddressDetails)\[\], options: AsyncContextOptions): void;`


      `setAsync(recipients: (string \| EmailUser \| EmailAddressDetails)\[\], callback: (result: AsyncResult) => void):
      void;`


      #### Examples


      ```javascript

      // The following example creates an array of EmailUser objects and

      // replaces the CC recipients of the message with the array.

      var newRecipients = [
          {
              "displayName": "Allie Bellew",
              "emailAddress": "allieb@contoso.com"
          },
          {
              "displayName": "Alex Darrow",
              "emailAddress": "alexd@contoso.com"
          }
      ];


      Office.context.mailbox.item.cc.setAsync(newRecipients, function(result) {
          if (result.error) {
              showMessage(result.error);
          } else {
              showMessage("Recipients overwritten");
          }
      });

      ```
    name: 'setAsync(recipients, options, callback)'
    fullName: outlook.Office.Recipients.setAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setAsync(recipients: (string | EmailUser | EmailAddressDetails)[], options?: AsyncContextOptions, callback?:
        (result: AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: The recipients to add to the recipients list.
          type:
            - '(string | EmailUser | EmailAddressDetails)[]'
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type AsyncResult. If setting the recipients fails the asyncResult.error property will contain a
            code that indicates any error that occurred while adding the data.
          type:
            - '(result: AsyncResult) => void'
