### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.CustomProperties:interface'
    summary: >-
      The `CustomProperties` object represents custom properties that are specific to a particular item and specific to
      a mail add-in for Outlook. For example, there might be a need for a mail add-in to save some data that is specific
      to the current email message that activated the add-in. If the user revisits the same message in the future and
      activates the mail add-in again, the add-in will be able to retrieve the data that had been saved as custom
      properties. **Important**: The maximum length of a `CustomProperties` JSON object is 2500 characters.


      Because Outlook on Mac doesn't cache custom properties, if the user's network goes down, mail add-ins cannot
      access their custom properties.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read
    name: Office.CustomProperties
    fullName: Office.CustomProperties
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.CustomProperties#get:member(1)'
      - 'outlook!Office.CustomProperties#getAll:member(1)'
      - 'outlook!Office.CustomProperties#remove:member(1)'
      - 'outlook!Office.CustomProperties#saveAsync:member(1)'
      - 'outlook!Office.CustomProperties#set:member(1)'
  - uid: 'outlook!Office.CustomProperties#get:member(1)'
    summary: Returns the value of the specified custom property.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

      var propertyName = $("#propertyName").val();

      var propertyValue = customProps.get(propertyName);

      $("#propertyValue").val(propertyValue);

      console.log(`The value of custom property "${propertyName}" is "${propertyValue}".`);

      ```
    name: get(name)
    fullName: get(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'get(name: string): any;'
      return:
        type:
          - any
        description: The value of the specified custom property.
      parameters:
        - id: name
          description: The name of the custom property to be returned.
          type:
            - string
  - uid: 'outlook!Office.CustomProperties#getAll:member(1)'
    summary: |-
      Returns an object with all custom properties in a collection of name/value pairs. The following are equivalent.

      `customProps.get("name")`

      `var dictionary = customProps.getAll(); dictionary["name"]`

      You can iterate through the dictionary object to discover all `names` and `values`<!-- -->.

      \[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read
    isPreview: true
    name: getAll()
    fullName: getAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAll(): any;'
      return:
        type:
          - any
        description: An object with all custom properties in a collection of name/value pairs.
  - uid: 'outlook!Office.CustomProperties#remove:member(1)'
    summary: >-
      Removes the specified property from the custom property collection.


      To make the removal of the property permanent, you must call the `saveAsync` method of the `CustomProperties`
      object.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

      var propertyName = $("#propertyName").val();

      customProps.remove(propertyName);

      console.log(`Custom property "${propertyName}" removed.`);

      ```
    name: remove(name)
    fullName: remove(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'remove(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: The `name` of the property to be removed.
          type:
            - string
  - uid: 'outlook!Office.CustomProperties#saveAsync:member(1)'
    summary: >-
      Saves item-specific custom properties to the server.


      You must call the `saveAsync` method to persist any changes made with the `set` method or the `remove` method of
      the `CustomProperties` object. The saving action is asynchronous.


      It's a good practice to have your callback function check for and handle errors from `saveAsync`<!-- -->. In
      particular, a read add-in can be activated while the user is in a connected state in a read form, and subsequently
      the user becomes disconnected. If the add-in calls `saveAsync` while in the disconnected state, `saveAsync` would
      return an error. Your callback method should handle this error accordingly.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // The following JavaScript code sample shows how to asynchronously use

      // the loadCustomPropertiesAsync method to load custom properties that

      // are specific to the current item, and the saveAsync method to save

      // these properties back to the server. After loading the custom properties,

      // the code sample uses the get method to read the custom property myProp,

      // the set method to write the custom property myProp, and then finally

      // calls the saveAsync method to save the custom properties.


      // The initialize function is required for all add-ins.

      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var item = Office.context.mailbox.item;
              item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };


      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");
          console.log("myProp: " + myProp); // First run on current item will return `undefined`.

          // Set myProp custom property.
          customProps.set("myProp", "value");
          customProps.saveAsync(saveCallback);
      }


      function saveCallback(asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.error(asyncResult.error.message);
          }
          else {
              // Async call to save custom properties completed.
              // Proceed to do the appropriate for your add-in.
          }
      }

      ```
    name: 'saveAsync(callback, asyncContext)'
    fullName: 'saveAsync(callback, asyncContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void, asyncContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.CustomProperties#saveAsync~0:complex'
        - id: asyncContext
          description: Optional. Any state data that is passed to the callback method.
          type:
            - any
  - uid: 'outlook!Office.CustomProperties#set:member(1)'
    summary: >-
      Sets the specified property to the specified value.


      The `set` method sets the specified property to the specified value. You must use the `saveAsync` method to save
      the property to the server.


      The `set` method creates a new property if the specified property does not already exist; otherwise, the existing
      value is replaced with the new value. The `value` parameter can be of any type; however, it is always passed to
      the server as a string.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

      var propertyName = $("#propertyName").val();

      var propertyValue = $("#propertyValue").val();

      customProps.set(propertyName, propertyValue);

      console.log(`Custom property "${propertyName}" set to value "${propertyValue}".`);

      ```
    name: 'set(name, value)'
    fullName: 'set(name, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(name: string, value: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: The name of the property to be set.
          type:
            - string
        - id: value
          description: The value of the property to be set.
          type:
            - string
references:
  - uid: 'outlook!Office.CustomProperties#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
