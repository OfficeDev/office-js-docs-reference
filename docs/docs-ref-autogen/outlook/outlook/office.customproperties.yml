### YamlMime:TSType
name: Office.CustomProperties
uid: 'outlook!Office.CustomProperties:interface'
package: outlook!
fullName: Office.CustomProperties
summary: >-
  The `CustomProperties` object represents custom properties that are specific to a particular mail item and specific to
  an Outlook add-in. For example, there might be a need for an add-in to save some data that's specific to the current
  message that activated the add-in. If the user revisits the same message in the future and activates the add-in again,
  the add-in will be able to retrieve the data that had been saved as custom properties.


  To learn more about `CustomProperties`<!-- -->, see [Get and set add-in metadata for an Outlook
  add-in](https://learn.microsoft.com/office/dev/add-ins/outlook/metadata-for-an-outlook-add-in)<!-- -->.
remarks: >-
  \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


  When using custom properties in your add-in, keep in mind that:


  - Custom properties saved while in compose mode aren't transmitted to recipients of the mail item. When a message or
  appointment with custom properties is sent, its properties can be accessed from the item in the Sent Items folder. If
  you want to make custom data accessible to recipients, consider using
  [InternetHeaders](xref:outlook!Office.InternetHeaders:interface) instead.


  - The maximum length of a `CustomProperties` JSON object is 2500 characters.


  - Outlook on Mac doesn't cache custom properties. If the user's network goes down, mail add-ins can't access their
  custom properties.


  **[Minimum permission
  level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
  `ReadItem`


  **[Applicable Outlook
  mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
  Compose or Read
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: get(name)
    uid: 'outlook!Office.CustomProperties#get:member(1)'
    package: outlook!
    fullName: get(name)
    summary: Returns the value of the specified custom property.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

      const propertyName = $("#propertyName").val();

      const propertyValue = customProps.get(propertyName);

      $("#propertyValue").val(propertyValue);

      console.log(`The value of custom property "${propertyName}" is "${propertyValue}".`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'get(name: string): any;'
      parameters:
        - id: name
          description: The name of the custom property to be returned.
          type: string
      return:
        type: any
        description: The value of the specified custom property.
  - name: getAll()
    uid: 'outlook!Office.CustomProperties#getAll:member(1)'
    package: outlook!
    fullName: getAll()
    summary: |-
      Returns an object with all custom properties in a collection of name/value pairs. The following are equivalent.

      `customProps.get("name")`

      `var dictionary = customProps.getAll(); dictionary["name"]`

      You can iterate through the dictionary object to discover all `names` and `values`<!-- -->.
    remarks: >-
      \[ [API set: Mailbox 1.9](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAll(): any;'
      return:
        type: any
        description: An object with all custom properties in a collection of name/value pairs.
  - name: remove(name)
    uid: 'outlook!Office.CustomProperties#remove:member(1)'
    package: outlook!
    fullName: remove(name)
    summary: >-
      Removes the specified property from the custom property collection.


      To make the removal of the property permanent, you must call the `saveAsync` method of the `CustomProperties`
      object.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

      const propertyName = $("#propertyName").val();

      customProps.remove(propertyName);

      console.log(`Custom property "${propertyName}" removed.`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'remove(name: string): void;'
      parameters:
        - id: name
          description: The `name` of the property to be removed.
          type: string
      return:
        type: void
        description: ''
  - name: 'saveAsync(callback, asyncContext)'
    uid: 'outlook!Office.CustomProperties#saveAsync:member(1)'
    package: outlook!
    fullName: 'saveAsync(callback, asyncContext)'
    summary: >-
      Saves custom properties to a message or appointment.


      You must call the `saveAsync` method to persist any changes made with the `set` method or the `remove` method of
      the `CustomProperties` object. The saving action is asynchronous.


      It's a good practice to have your callback function check for and handle errors from `saveAsync`<!-- -->. In
      particular, a read add-in can be activated while the user is in a connected state in a read form, and subsequently
      the user becomes disconnected. If the add-in calls `saveAsync` while in the disconnected state, `saveAsync` would
      return an error. Your callback function should handle this error accordingly.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **Important**: In Outlook on Windows, custom properties saved while in compose mode only persist after the item
      being composed is closed or after `Office.context.mailbox.item.saveAsync` is called.


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // The following JavaScript code sample shows how to asynchronously use

      // the loadCustomPropertiesAsync method to load custom properties that

      // are specific to the current item, and the saveAsync method to save

      // these to the mail item. After loading the custom properties,

      // the code sample uses the get method to read the custom property myProp,

      // the set method to write the custom property myProp, and then finally

      // calls the saveAsync method to save the custom properties.


      // The initialize function is required for all add-ins.

      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready method.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              const item = Office.context.mailbox.item;
              item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };


      function customPropsCallback(asyncResult) {
          const customProps = asyncResult.value;
          const myProp = customProps.get("myProp");
          console.log("myProp: " + myProp); // First run on current item will return `undefined`.

          // Set myProp custom property.
          customProps.set("myProp", "value");
          customProps.saveAsync(saveCallback);
      }


      function saveCallback(asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.error(asyncResult.error.message);
          }
          else {
              // Async call to save custom properties completed.
              // Proceed to do the appropriate for your add-in.
          }
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<void>) => void, asyncContext?: any): void;'
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
        - id: asyncContext
          description: Optional. Any state data that is passed to the callback function.
          type: any
      return:
        type: void
        description: ''
  - name: saveAsync(asyncContext)
    uid: 'outlook!Office.CustomProperties#saveAsync:member(2)'
    package: outlook!
    fullName: saveAsync(asyncContext)
    summary: >-
      Saves custom properties to a message or appointment.


      You must call the `saveAsync` method to persist any changes made with the `set` method or the `remove` method of
      the `CustomProperties` object. The saving action is asynchronous.


      It's a good practice to have your callback function check for and handle errors from `saveAsync`<!-- -->. In
      particular, a read add-in can be activated while the user is in a connected state in a read form, and subsequently
      the user becomes disconnected. If the add-in calls `saveAsync` while in the disconnected state, `saveAsync` would
      return an error. Your callback function should handle this error accordingly.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'saveAsync(asyncContext?: any): void;'
      parameters:
        - id: asyncContext
          description: Optional. Any state data that is passed to the callback function.
          type: any
      return:
        type: void
        description: ''
  - name: 'set(name, value)'
    uid: 'outlook!Office.CustomProperties#set:member(1)'
    package: outlook!
    fullName: 'set(name, value)'
    summary: >-
      Sets the specified property to the specified value.


      The `set` method sets the specified property to the specified value. To ensure that the set property and value
      persist on the mail item, you must call the `saveAsync` method.


      The `set` method creates a new property if the specified property does not already exist; otherwise, the existing
      value is replaced with the new value. The `value` parameter can be of any type; however, it is always passed to
      the server as a string.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

      const propertyName = $("#propertyName").val();

      const propertyValue = $("#propertyValue").val();

      customProps.set(propertyName, propertyValue);

      console.log(`Custom property "${propertyName}" set to value "${propertyValue}".`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(name: string, value: string): void;'
      parameters:
        - id: name
          description: The name of the property to be set.
          type: string
        - id: value
          description: The value of the property to be set.
          type: string
      return:
        type: void
        description: ''
