### YamlMime:TSType
name: Office.EmailAddressDetails
uid: 'outlook!Office.EmailAddressDetails:interface'
package: outlook!
fullName: Office.EmailAddressDetails
summary: Provides the email properties of the sender or specified recipients of an email message or appointment.
remarks: >-
  **[Minimum permission
  level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
  **read item**


  **[Applicable Outlook
  mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
  Compose or Read
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: appointmentResponse
    uid: 'outlook!Office.EmailAddressDetails#appointmentResponse:member'
    package: outlook!
    fullName: appointmentResponse
    summary: >-
      Gets the response that an attendee returned for an appointment. This property applies to only an attendee of an
      appointment, as represented by the `optionalAttendees` or `requiredAttendees` property. This property returns
      undefined in other scenarios.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'appointmentResponse: MailboxEnums.ResponseType | string;'
      return:
        type: '<xref uid="outlook!Office.MailboxEnums.ResponseType:enum" /> | string'
        description: |-


          #### Examples

          ```TypeScript
          // The following sample provides the responses from required attendees.
          // Note that this sample needs the add-in to be in Appointment Read (Attendee) mode.
          const requiredAttendees = Office.context.mailbox.item.requiredAttendees;
          console.log("There are " + requiredAttendees.length + " required attendees.")
          requiredAttendees.forEach(function (requiredAttendee) {
              console.log("Attendee " + requiredAttendee.displayName + ": " + requiredAttendee.appointmentResponse);
          });
          ```
  - name: displayName
    uid: 'outlook!Office.EmailAddressDetails#displayName:member'
    package: outlook!
    fullName: displayName
    summary: Gets the display name associated with an email address.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayName: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```TypeScript
          const organizerName = Office.context.mailbox.item.organizer.displayName;
          console.log("Organizer: " + organizerName);
          ```
  - name: emailAddress
    uid: 'outlook!Office.EmailAddressDetails#emailAddress:member'
    package: outlook!
    fullName: emailAddress
    summary: Gets the SMTP email address.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'emailAddress: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```TypeScript
          const organizerAddress = Office.context.mailbox.item.organizer.emailAddress;
          console.log("Organizer's email address: " + organizerAddress);
          ```
  - name: recipientType
    uid: 'outlook!Office.EmailAddressDetails#recipientType:member'
    package: outlook!
    fullName: recipientType
    summary: Gets the email address type of a recipient.
    remarks: >-
      **Important**:


      - A `recipientType` property value isn't returned by the
      [Office.context.mailbox.item.from.getAsync](https://learn.microsoft.com/javascript/api/outlook/office.from?view=outlook-js-preview#outlook-office-from-getasync-member(1))
      and
      [Office.context.mailbox.item.organizer.getAsync](https://learn.microsoft.com/javascript/api/outlook/office.organizer?view=outlook-js-preview#outlook-office-organizer-getasync-member(1))
      methods. The email sender or appointment organizer is always a user whose email address is on the Exchange server.


      - While composing a mail item, when you switch to a sender account that's on a different domain than that of the
      previously selected sender account, the value of the `recipientType` property for existing recipients isn't
      updated and will still be based on the domain of the previously selected account. To get the correct recipient
      types after switching accounts, you must first remove the existing recipients, then add them back to the mail
      item.


      #### Examples


      ```TypeScript

      const requiredAttendees = Office.context.mailbox.item.requiredAttendees;

      console.log("There are " + requiredAttendees.length + " required attendees.")

      requiredAttendees.forEach(function (requiredAttendee) {
          console.log("Attendee " + requiredAttendee.displayName + ": " + requiredAttendee.recipientType);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'recipientType: MailboxEnums.RecipientType | string;'
      return:
        type: '<xref uid="outlook!Office.MailboxEnums.RecipientType:enum" /> | string'
