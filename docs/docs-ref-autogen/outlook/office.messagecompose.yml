### YamlMime:UniversalReference
items:
  - uid: outlook.Office.MessageCompose
    summary: >-
      The message compose mode of [Office.context.mailbox.item](xref:outlook.Office.Item)<!-- -->.


      **Important**: This is an internal Outlook object, not directly exposed through existing interfaces. You should
      treat this as a mode of Office.context.mailbox.item. Refer to the [Object
      Model](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item)
      page for more information.
    name: Office.MessageCompose
    fullName: Office.MessageCompose
    langs:
      - typeScript
    type: interface
    extends:
      - Message
      - 'ItemCompose '
    package: outlook
    children:
      - outlook.Office.MessageCompose.addFileAttachmentAsync
      - outlook.Office.MessageCompose.addFileAttachmentAsync_1
      - outlook.Office.MessageCompose.addFileAttachmentFromBase64Async
      - outlook.Office.MessageCompose.addFileAttachmentFromBase64Async_1
      - outlook.Office.MessageCompose.addHandlerAsync
      - outlook.Office.MessageCompose.addHandlerAsync_1
      - outlook.Office.MessageCompose.addItemAttachmentAsync
      - outlook.Office.MessageCompose.addItemAttachmentAsync_1
      - outlook.Office.MessageCompose.close
      - outlook.Office.MessageCompose.getAttachmentsAsync
      - outlook.Office.MessageCompose.getAttachmentsAsync_1
      - outlook.Office.MessageCompose.getInitializationContextAsync
      - outlook.Office.MessageCompose.getInitializationContextAsync_1
      - outlook.Office.MessageCompose.getSelectedDataAsync
      - outlook.Office.MessageCompose.getSelectedDataAsync_1
      - outlook.Office.MessageCompose.loadCustomPropertiesAsync
      - outlook.Office.MessageCompose.removeAttachmentAsync
      - outlook.Office.MessageCompose.removeAttachmentAsync_1
      - outlook.Office.MessageCompose.removeHandlerAsync
      - outlook.Office.MessageCompose.removeHandlerAsync_1
      - outlook.Office.MessageCompose.saveAsync
      - outlook.Office.MessageCompose.saveAsync_1
      - outlook.Office.MessageCompose.setSelectedDataAsync
      - outlook.Office.MessageCompose.setSelectedDataAsync_1
      - outlook.Office.MessageCompose.bcc
      - outlook.Office.MessageCompose.body
      - outlook.Office.MessageCompose.cc
      - outlook.Office.MessageCompose.conversationId
      - outlook.Office.MessageCompose.from
      - outlook.Office.MessageCompose.internetHeaders
      - outlook.Office.MessageCompose.itemType
      - outlook.Office.MessageCompose.notificationMessages
      - outlook.Office.MessageCompose.seriesId
      - outlook.Office.MessageCompose.subject
      - outlook.Office.MessageCompose.to
  - uid: outlook.Office.MessageCompose.addFileAttachmentAsync
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The addFileAttachmentAsync method uploads the file at the specified URI and attaches it to the item in the compose
      form.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>AttachmentSizeExceeded - The attachment is larger than allowed.</td></tr>
      <tr><td></td><td>FileTypeNotSupported - The attachment has an extension that is not allowed.</td></tr>
      <tr><td></td><td>NumberOfAttachmentsExceeded - The message or appointment has too many attachments.</td></tr>
      </table>

      #### Examples


      ```javascript

      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }


      function addAttachment() {
          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          var attachmentURL = "https://contoso.com/rtm/icon.png";
          Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
      }

      ```

      ```javascript

      // The following example adds an image file as an inline attachment and

      // references the attachment in the message body.

      Office.context.mailbox.item.addFileAttachmentAsync(
          "http://i.imgur.com/WJXklif.png",
          "cute_bird.png",
          {
              isInline: true
          },
          function (asyncResult) {
              Office.context.mailbox.item.body.setAsync(
                  "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                  {
                      "coercionType": "html"
                  },
                  function (asyncResult) {
                      // Do something here.
                  });
          });
      ```
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & {
        isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: >-
            The URI that provides the location of the file to attach to the message or appointment. The maximum length
            is 2048 characters.
          type:
            - string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method. isInline: If true, indicates that the
            attachment will be shown inline in the message body, and should not be displayed in the attachment list.
          type:
            - 'Office.AsyncContextOptions & { isInline: boolean }'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If uploading the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.addFileAttachmentAsync_1
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The addFileAttachmentAsync method uploads the file at the specified URI and attaches it to the item in the compose
      form.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>AttachmentSizeExceeded - The attachment is larger than allowed.</td></tr>
      <tr><td></td><td>FileTypeNotSupported - The attachment has an extension that is not allowed.</td></tr>
      <tr><td></td><td>NumberOfAttachmentsExceeded - The message or appointment has too many attachments.</td></tr>
      </table>
    name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: >-
            The URI that provides the location of the file to attach to the message or appointment. The maximum length
            is 2048 characters.
          type:
            - string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If uploading the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.addFileAttachmentFromBase64Async
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The addFileAttachmentFromBase64Async method uploads the file from the base64 encoding and attaches it to the item
      in the compose form. This method returns the attachment identifier in the asyncResult.value object.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      \[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>AttachmentSizeExceeded - The attachment is larger than allowed.</td></tr>
      <tr><td></td><td>FileTypeNotSupported - The attachment has an extension that is not allowed.</td></tr>
      <tr><td></td><td>NumberOfAttachmentsExceeded - The message or appointment has too many attachments.</td></tr>
      </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
          base64String,
          "cute_bird.png",
          {
              isInline: true
          },
          function (asyncResult) {
              Office.context.mailbox.item.body.setAsync(
                  "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                  {
                      "coercionType": "html"
                  },
                  function (asyncResult) {
                      // Do something here.
                  });
          });
      ```
    isPreview: true
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, options?:
        Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>)
        => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: The base64 encoded content of an image or file to be added to an email or event.
          type:
            - string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method. isInline: If true, indicates that the
            attachment will be shown inline in the message body and should not be displayed in the attachment list.
          type:
            - 'Office.AsyncContextOptions & { isInline: boolean }'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If uploading the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.addFileAttachmentFromBase64Async_1
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The addFileAttachmentFromBase64Async method uploads the file from the base64 encoding and attaches it to the item
      in the compose form. This method returns the attachment identifier in the asyncResult.value object.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      \[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>AttachmentSizeExceeded - The attachment is larger than allowed.</td></tr>
      <tr><td></td><td>FileTypeNotSupported - The attachment has an extension that is not allowed.</td></tr>
      <tr><td></td><td>NumberOfAttachmentsExceeded - The message or appointment has too many attachments.</td></tr>
      </table>
    isPreview: true
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: The base64 encoded content of an image or file to be added to an email or event.
          type:
            - string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If uploading the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.addHandlerAsync
    summary: >-
      Adds an event handler for a supported event.


      Currently the supported event types are `Office.EventType.AppointmentTimeChanged`<!-- -->,
      `Office.EventType.RecipientsChanged`<!-- -->, and `Office.EventType.RecurrenceChanged`<!-- -->. In Preview,
      `Office.EventType.AttachmentsChanged` and `Office.EventType.EnhancedLocationsChanged` are also supported.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: any, options?: any, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should invoke the handler.
          type:
            - Office.EventType
        - id: handler
          description: >-
            The function to handle the event. The function must accept a single parameter, which is an object literal.
            The type property on the parameter will match the eventType parameter passed to addHandlerAsync.
          type:
            - any
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - any
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an Office.AsyncResult object.
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.MessageCompose.addHandlerAsync_1
    summary: >-
      Adds an event handler for a supported event.


      Currently the supported event types are `Office.EventType.AppointmentTimeChanged`<!-- -->,
      `Office.EventType.RecipientsChanged`<!-- -->, and `Office.EventType.RecurrenceChanged`<!-- -->. In Preview,
      `Office.EventType.AttachmentsChanged` and `Office.EventType.EnhancedLocationsChanged` are also supported.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should invoke the handler.
          type:
            - Office.EventType
        - id: handler
          description: >-
            The function to handle the event. The function must accept a single parameter, which is an object literal.
            The type property on the parameter will match the eventType parameter passed to addHandlerAsync.
          type:
            - any
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an Office.AsyncResult object.
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.MessageCompose.addItemAttachmentAsync
    summary: >-
      Adds an Exchange item, such as a message, as an attachment to the message or appointment.


      The addItemAttachmentAsync method attaches the item with the specified Exchange identifier to the item in the
      compose form. If you specify a callback method, the method is called with one parameter, asyncResult, which
      contains either the attachment identifier or a code that indicates any error that occurred while attaching the
      item. You can use the options parameter to pass state information to the callback method, if needed.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      If your Office add-in is running in Outlook Web App, the addItemAttachmentAsync method can attach items to items
      other than the item that you are editing; however, this is not supported and is not recommended.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>NumberOfAttachmentsExceeded - The message or appointment has too many
      attachments.</td></tr> </table>

      #### Examples


      ```javascript

      // The following example adds an existing Outlook item as an attachment

      // with the name `My Attachment`.

      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }


      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          var itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
      }

      ```
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?:
        (asyncResult: Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: The Exchange identifier of the item to attach. The maximum length is 100 characters.
          type:
            - any
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If adding the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.addItemAttachmentAsync_1
    summary: >-
      Adds an Exchange item, such as a message, as an attachment to the message or appointment.


      The addItemAttachmentAsync method attaches the item with the specified Exchange identifier to the item in the
      compose form. If you specify a callback method, the method is called with one parameter, asyncResult, which
      contains either the attachment identifier or a code that indicates any error that occurred while attaching the
      item. You can use the options parameter to pass state information to the callback method, if needed.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      If your Office add-in is running in Outlook Web App, the addItemAttachmentAsync method can attach items to items
      other than the item that you are editing; however, this is not supported and is not recommended.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>NumberOfAttachmentsExceeded - The message or appointment has too many
      attachments.</td></tr> </table>
    name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: The Exchange identifier of the item to attach. The maximum length is 100 characters.
          type:
            - any
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If adding the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.close
    summary: >-
      Closes the current item that is being composed


      The behaviors of the close method depends on the current state of the item being composed. If the item has unsaved
      changes, the client prompts the user to save, discard, or close the action.


      In the Outlook desktop client, if the message is an inline reply, the close method has no effect.


      **Note**: In Outlook on the web, if the item is an appointment and it has previously been saved using saveAsync,
      the user is prompted to save, discard, or cancel even if no changes have occurred since the item was last saved.


      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restricted</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>
    name: close()
    fullName: close()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(): void;'
      return:
        type:
          - void
        description: ''
  - uid: outlook.Office.MessageCompose.getAttachmentsAsync
    summary: |-
      Gets the item's attachments as an array.

      \[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>
    isPreview: true
    name: 'getAttachmentsAsync(options, callback)'
    fullName: 'getAttachmentsAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getAttachmentsAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<AttachmentDetails[]>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. If the call fails, the asyncResult.error property will contain and
            error code with the reason for the failure.
          type:
            - '(asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void'
  - uid: outlook.Office.MessageCompose.getAttachmentsAsync_1
    summary: |-
      Gets the item's attachments as an array.

      \[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      var item = Office.context.mailbox.item;

      var outputString = "";

      item.getAttachmentsAsync(callback);


      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  var attachment = result.value [i];
                  outputString += "<BR>" + i + ". Name: ";
                  outputString += attachment.name;
                  outputString += "<BR>ID: " + attachment.id;
                  outputString += "<BR>contentType: " + attachment.contentType;
                  outputString += "<BR>size: " + attachment.size;
                  outputString += "<BR>attachmentType: " + attachment.attachmentType;
                  outputString += "<BR>isInline: " + attachment.isInline;
              }
          }
      }

      ```
    isPreview: true
    name: getAttachmentsAsync(callback)
    fullName: getAttachmentsAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(callback?: (asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. If the call fails, the asyncResult.error property will contain and
            error code with the reason for the failure.
          type:
            - '(asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void'
  - uid: outlook.Office.MessageCompose.getInitializationContextAsync
    summary: >-
      Gets initialization data passed when the add-in is activated by an actionable message.


      **Note**: This method is only supported by Outlook 2016 for Windows (Click-to-Run versions greater than
      16.0.8413.1000) and Outlook on the web for Office 365.


      \[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>


      More information on [actionable
      messages](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)<!-- -->.
    isPreview: true
    name: 'getInitializationContextAsync(options, callback)'
    fullName: 'getInitializationContextAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getInitializationContextAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the initialization data is provided in the
            asyncResult.value property as a string. If there is no initialization context, the asyncResult object will
            contain an Error object with its code property set to 9020 and its name property set to
            GenericResponseError.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.getInitializationContextAsync_1
    summary: >-
      Gets initialization data passed when the add-in is activated by an actionable message.


      **Note**: This method is only supported by Outlook 2016 for Windows (Click-to-Run versions greater than
      16.0.8413.1000) and Outlook on the web for Office 365.


      \[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>


      More information on [actionable
      messages](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)<!-- -->.
    isPreview: true
    name: getInitializationContextAsync(callback)
    fullName: getInitializationContextAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInitializationContextAsync(callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the initialization data is provided in the
            asyncResult.value property as a string. If there is no initialization context, the asyncResult object will
            contain an Error object with its code property set to 9020 and its name property set to
            GenericResponseError.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.getSelectedDataAsync
    summary: >-
      Asynchronously returns selected data from the subject or body of a message.


      If there is no selection but the cursor is in the body or subject, the method returns null for the selected data.
      If a field other than the body or subject is selected, the method returns the InvalidSelection error.


      To access the selected data from the callback method, call asyncResult.value.data. To access the source property
      that the selection comes from, call asyncResult.value.sourceProperty, which will be either body or subject.


      \[ [API set: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      // Get selected data.

      Office.initialize = function () {
          Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
      };


      function getCallback(asyncResult) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;

          Office.context.mailbox.item.setSelectedDataAsync('Setting ' + prop + ': ' + text, {}, setCallback);
      }


      function setCallback(asyncResult) {
          // Check for errors.
      }

      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedDataAsync(coercionType: Office.CoercionType, options: Office.AsyncContextOptions, callback:
        (asyncResult: Office.AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: The selected data as a string with format determined by coercionType.
      parameters:
        - id: coercionType
          description: >-
            Requests a format for the data. If Text, the method returns the plain text as a string, removing any HTML
            tags present. If HTML, the method returns the selected text, whether it is plaintext or HTML.
          type:
            - Office.CoercionType
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. asyncContext: Developers can
            provide any object they wish to access in the callback method.
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - '(asyncResult: Office.AsyncResult<any>) => void'
  - uid: outlook.Office.MessageCompose.getSelectedDataAsync_1
    summary: >-
      Asynchronously returns selected data from the subject or body of a message.


      If there is no selection but the cursor is in the body or subject, the method returns null for the selected data.
      If a field other than the body or subject is selected, the method returns the InvalidSelection error.


      To access the selected data from the callback method, call asyncResult.value.data. To access the source property
      that the selection comes from, call asyncResult.value.sourceProperty, which will be either body or subject.


      \[ [API set: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedDataAsync(coercionType: Office.CoercionType, callback: (asyncResult: Office.AsyncResult<any>)
        => void): void;
      return:
        type:
          - void
        description: The selected data as a string with format determined by coercionType.
      parameters:
        - id: coercionType
          description: >-
            Requests a format for the data. If Text, the method returns the plain text as a string, removing any HTML
            tags present. If HTML, the method returns the selected text, whether it is plaintext or HTML.
          type:
            - Office.CoercionType
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - '(asyncResult: Office.AsyncResult<any>) => void'
  - uid: outlook.Office.MessageCompose.loadCustomPropertiesAsync
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key/value pairs on a per-app, per-item basis. This method returns a
      CustomProperties object in the callback, which provides methods to access the custom properties specific to the
      current item and the current add-in. Custom properties are not encrypted on the item, so this should not be used
      as secure storage.


      The custom properties are provided as a CustomProperties object in the asyncResult.value property. This object can
      be used to get, set, and remove custom properties from the item and save changes to the custom property set back
      to the server.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void,
        userContext?: any): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
        - id: userContext
          description: >-
            Optional. Developers can provide any object they wish to access in the callback function. This object can be
            accessed by the asyncResult.asyncContext property in the callback function.
          type:
            - any
  - uid: outlook.Office.MessageCompose.removeAttachmentAsync
    summary: >-
      Removes an attachment from a message or appointment.


      The removeAttachmentAsync method removes the attachment with the specified identifier from the item. As a best
      practice, you should use the attachment identifier to remove an attachment only if the same mail app has added
      that attachment in the same session. In Outlook Web App and OWA for Devices, the attachment identifier is valid
      only within the same session. A session is over when the user closes the app, or if the user starts composing an
      inline form then subsequently pops out the form to continue in a separate window.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr>
      </table>

      #### Examples


      ```javascript

      // The following code removes an attachment with an identifier of '0'.

      Office.context.mailbox.item.removeAttachmentAsync(
          '0',
          { asyncContext : null },
          function (asyncResult)
          {
              console.log(asyncResult.status);
          }
      );

      ```
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: The identifier of the attachment to remove.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. If removing the attachment fails, the asyncResult.error property will
            contain an error code with the reason for the failure.
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.MessageCompose.removeAttachmentAsync_1
    summary: >-
      Removes an attachment from a message or appointment.


      The removeAttachmentAsync method removes the attachment with the specified identifier from the item. As a best
      practice, you should use the attachment identifier to remove an attachment only if the same mail app has added
      that attachment in the same session. In Outlook Web App and OWA for Devices, the attachment identifier is valid
      only within the same session. A session is over when the user closes the app, or if the user starts composing an
      inline form then subsequently pops out the form to continue in a separate window.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr>
      </table>
    name: 'removeAttachmentAsync(attachmentId, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: The identifier of the attachment to remove.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. If removing the attachment fails, the asyncResult.error property will
            contain an error code with the reason for the failure.
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.MessageCompose.removeHandlerAsync
    summary: >-
      Removes the event handlers for a supported event type.


      Currently the supported event types are `Office.EventType.AppointmentTimeChanged`<!-- -->,
      `Office.EventType.RecipientsChanged`<!-- -->, and `Office.EventType.RecurrenceChanged`<!-- -->. In Preview,
      `Office.EventType.AttachmentsChanged` and `Office.EventType.EnhancedLocationsChanged` are also supported.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType, options?: any, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should revoke the handler.
          type:
            - Office.EventType
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - any
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an Office.AsyncResult object.
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.MessageCompose.removeHandlerAsync_1
    summary: >-
      Removes the event handlers for a supported event type.


      Currently the supported event types are `Office.EventType.AppointmentTimeChanged`<!-- -->,
      `Office.EventType.RecipientsChanged`<!-- -->, and `Office.EventType.RecurrenceChanged`<!-- -->. In Preview,
      `Office.EventType.AttachmentsChanged` and `Office.EventType.EnhancedLocationsChanged` are also supported.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType, callback?: (asyncResult: Office.AsyncResult<void>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should revoke the handler.
          type:
            - Office.EventType
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an Office.AsyncResult object.
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.MessageCompose.saveAsync
    summary: >-
      Asynchronously saves an item.


      When invoked, this method saves the current message as a draft and returns the item id via the callback method. In
      Outlook Web App or Outlook in online mode, the item is saved to the server. In Outlook in cached mode, the item is
      saved to the local cache.


      Since appointments have no draft state, if saveAsync is called on an appointment in compose mode, the item will be
      saved as a normal appointment on the user's calendar. For new appointments that have not been saved before, no
      invitation will be sent. Saving an existing appointment will send an update to added or removed attendees.


      **Note**: If your add-in calls saveAsync on an item in compose mode in order to get an itemId to use with EWS or
      the REST API, be aware that when Outlook is in cached mode, it may take some time before the item is actually
      synced to the server. Until the item is synced, using the itemId will return an error.


      **Note**: The following clients have different behavior for saveAsync on appointments in compose mode:


      - Mac Outlook does not support saveAsync on a meeting in compose mode. Calling saveAsync on a meeting in Mac
      Outlook will return an error.


      - Outlook on the web always sends an invitation or update when saveAsync is called on an appointment in compose
      mode.


      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr>
      </table>
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. asyncContext: Developers can
            provide any object they wish to access in the callback method.
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.saveAsync_1
    summary: >-
      Asynchronously saves an item.


      When invoked, this method saves the current message as a draft and returns the item id via the callback method. In
      Outlook Web App or Outlook in online mode, the item is saved to the server. In Outlook in cached mode, the item is
      saved to the local cache.


      Since appointments have no draft state, if saveAsync is called on an appointment in compose mode, the item will be
      saved as a normal appointment on the user's calendar. For new appointments that have not been saved before, no
      invitation will be sent. Saving an existing appointment will send an update to added or removed attendees.


      **Note**: If your add-in calls saveAsync on an item in compose mode in order to get an itemId to use with EWS or
      the REST API, be aware that when Outlook is in cached mode, it may take some time before the item is actually
      synced to the server. Until the item is synced, using the itemId will return an error.


      **Note**: The following clients have different behavior for saveAsync on appointments in compose mode:


      - Mac Outlook does not support saveAsync on a meeting in compose mode. Calling saveAsync on a meeting in Mac
      Outlook will return an error.


      - Outlook on the web always sends an invitation or update when saveAsync is called on an appointment in compose
      mode.


      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr>
      </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.saveAsync(
          function callback(result) {
              // Process the result.
          });

      // The following is an example of the

      // `result` parameter passed to the

      // callback function. The `value`

      // property contains the item ID of

      // the item.

      {
          "value": "AAMkADI5...AAA=",
          "status": "succeeded"
      }

      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.MessageCompose.setSelectedDataAsync
    summary: >-
      Asynchronously inserts data into the body or subject of a message.


      The setSelectedDataAsync method inserts the specified string at the cursor location in the subject or body of the
      item, or, if text is selected in the editor, it replaces the selected text. If the cursor is not in the body or
      subject field, an error is returned. After insertion, the cursor is placed at the end of the inserted content.


      \[ [API set: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr>
      </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });

      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?:
        (asyncResult: Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be inserted. Data is not to exceed 1,000,000 characters. If more than 1,000,000 characters are
            passed in, an ArgumentOutOfRange exception is thrown.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method. coercionType: If text, the current style
            is applied in Outlook Web App and Outlook. If the field is an HTML editor, only the text data is inserted,
            even if the data is HTML. If html and the field supports HTML (the subject doesn't), the current style is
            applied in Outlook Web App and the default style is applied in Outlook. If the field is a text field, an
            InvalidDataFormat error is returned. If coercionType is not set, the result depends on the field: if the
            field is HTML then HTML is used; if the field is text, then plain text is used.
          type:
            - Office.AsyncContextOptions & CoercionTypeOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult.
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.MessageCompose.setSelectedDataAsync_1
    summary: >-
      Asynchronously inserts data into the body or subject of a message.


      The setSelectedDataAsync method inserts the specified string at the cursor location in the subject or body of the
      item, or, if text is selected in the editor, it replaces the selected text. If the cursor is not in the body or
      subject field, an error is returned. After insertion, the cursor is placed at the end of the inserted content.


      \[ [API set: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr>
      </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.setSelectedDataAsync("Hello World!");

      ```
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be inserted. Data is not to exceed 1,000,000 characters. If more than 1,000,000 characters are
            passed in, an ArgumentOutOfRange exception is thrown.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult.
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.MessageCompose.bcc
    summary: >-
      Gets an object that provides methods to get or update the recipients on the Bcc (blind carbon copy) line of a
      message.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

      Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );

      Office.context.mailbox.item.bcc.getAsync(callback);


      function callback(asyncResult) {
          var arrayOfBccRecipients = asyncResult.value;
      }

      ```
    name: bcc
    fullName: bcc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bcc: Recipients;'
      return:
        type:
          - Recipients
  - uid: outlook.Office.MessageCompose.body
    summary: |-
      Gets an object that provides methods for manipulating the body of an item.

      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      // This example gets the body of the message in plain text.

      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.

      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }

      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - Body
  - uid: outlook.Office.MessageCompose.cc
    summary: >-
      Provides access to the Cc (carbon copy) recipients of a message. The type of object and level of access depends on
      the mode of the current item.


      The cc property returns an [Office.Recipients](xref:outlook.Office.Recipients) object that provides methods to get
      or update the recipients on the Cc line of the message.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

      Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );

      Office.context.mailbox.item.cc.getAsync(callback);


      function callback(asyncResult) {
          var arrayOfCcRecipients = asyncResult.value;
      }

      ```
    name: cc
    fullName: cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: Recipients;'
      return:
        type:
          - Recipients
  - uid: outlook.Office.MessageCompose.conversationId
    summary: >-
      Gets an identifier for the email conversation that contains a particular message.


      You can get an integer for this property if your mail app is activated in read forms or responses in compose
      forms. If subsequently the user changes the subject of the reply message, upon sending the reply, the conversation
      ID for that message will change and that value you obtained earlier will no longer apply.


      You get null for this property for a new item in a compose form. If the user sets a subject and saves the item,
      the conversationId property will return a value.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      var conversationId = Office.context.mailbox.item.conversationId;

      console.log("conversationId: " + conversationId);

      ```
    name: conversationId
    fullName: conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: outlook.Office.MessageCompose.from
    summary: >-
      Gets the email address of the sender of a message.


      The from and sender properties represent the same person unless the message is sent by a delegate. In that case,
      the from property represents the owner, and the sender property represents the delegate.


      The from property returns a From object that provides a method to get the from value.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.from.getAsync(callback);


      function callback(asyncResult) {
          var from = asyncResult.value;
      }

      ```
    name: from
    fullName: from
    langs:
      - typeScript
    type: property
    syntax:
      content: 'from: From;'
      return:
        type:
          - From
  - uid: outlook.Office.MessageCompose.internetHeaders
    summary: >-
      Sets the internet headers of a message.


      The internetHeaders property returns an InternetHeaders object that provides methods to manage the internet
      headers on the message.


      \[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.internetHeaders.getAsync(["header1", "header2"], callback);


      function callback(asyncResult) {
          var dictionary = asyncResult.value;
          var header1_value = dictionary["header1"];
      }

      ```
    isPreview: true
    name: internetHeaders
    fullName: internetHeaders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'internetHeaders: InternetHeaders;'
      return:
        type:
          - outlook.Office.InternetHeaders
  - uid: outlook.Office.MessageCompose.itemType
    summary: >-
      Gets the type of item that an instance represents.


      The itemType property returns one of the ItemType enumeration values, indicating whether the item object instance
      is a message or an appointment.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
          // Do something.
      } else {
          // Do something else.
      }

      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType;'
      return:
        type:
          - MailboxEnums.ItemType
  - uid: outlook.Office.MessageCompose.notificationMessages
    summary: |-
      Gets the notification messages for an item.

      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      // Get all notifications.

      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );

      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - NotificationMessages
  - uid: outlook.Office.MessageCompose.seriesId
    summary: >-
      Gets the id of the series that an instance belongs to.


      In OWA and Outlook, the seriesId returns the Exchange Web Services (EWS) ID of the parent (series) item that this
      item belongs to. However, in iOS and Android, the seriesId returns the REST ID of the parent item.


      **Note**: The identifier returned by the seriesId property is the same as the Exchange Web Services item
      identifier. The seriesId property is not identical to the Outlook IDs used by the Outlook REST API. Before making
      REST API calls using this value, it should be converted using Office.context.mailbox.convertToRestId. For more
      details, see [Use the Outlook REST APIs from an Outlook
      add-in](https://docs.microsoft.com/outlook/add-ins/use-rest-api)<!-- -->.


      The seriesId property returns null for items that do not have parent items such as single appointments, series
      items, or meeting requests and returns undefined for any other items that are not meeting requests.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      var seriesId = Office.context.mailbox.item.seriesId;


      // The seriesId property returns null for items that do

      // not have parent items (such as single appointments,

      // series items, or meeting requests) and returns

      // undefined for messages that are not meeting requests.

      var isSeriesInstance = (seriesId != null);

      console.log("SeriesId is " + seriesId 
          + " and isSeriesInstance is " + isSeriesInstance);
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: outlook.Office.MessageCompose.subject
    summary: |-
      Gets or sets the description that appears in the subject field of an item.

      The subject property gets or sets the entire subject of the item, as sent by the email server.

      The subject property returns a Subject object that provides methods to get and set the subject.

      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.subject.getAsync(callback);


      function callback(asyncResult) {
          var subject = asyncResult.value;
      }

      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - Subject
  - uid: outlook.Office.MessageCompose.to
    summary: >-
      Provides access to the recipients on the To line of a message. The type of object and level of access depends on
      the mode of the current item.


      The to property returns a Recipients object that provides methods to get or update the recipients on the To line
      of the message.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr> </table>

      #### Examples


      ```javascript

      Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

      Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );

      Office.context.mailbox.item.to.getAsync(callback);


      function callback(asyncResult) {
          var arrayOfToRecipients = asyncResult.value;
      }

      ```
    name: to
    fullName: to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: Recipients;'
      return:
        type:
          - Recipients
