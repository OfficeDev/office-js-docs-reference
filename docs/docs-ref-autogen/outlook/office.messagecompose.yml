### YamlMime:UniversalReference
items:
  - uid: outlook.Office.MessageCompose
    summary: >-
      The message compose mode of [Office.context.mailbox.item](xref:outlook.Office.Item)<!-- -->.


      Important: This is an internal Outlook object, not directly exposed through existing interfaces. You should treat
      this as a mode of `Office.context.mailbox.item`. Refer to the Object Model pages for more information.
    name: Office.MessageCompose
    fullName: outlook.Office.MessageCompose
    langs:
      - typeScript
    type: interface
    extends:
      - Message
    package: outlook
    children:
      - outlook.Office.MessageCompose.addFileAttachmentAsync
      - outlook.Office.MessageCompose.addHandlerAsync
      - outlook.Office.MessageCompose.addItemAttachmentAsync
      - outlook.Office.MessageCompose.bcc
      - outlook.Office.MessageCompose.body
      - outlook.Office.MessageCompose.cc
      - outlook.Office.MessageCompose.close
      - outlook.Office.MessageCompose.conversationId
      - outlook.Office.MessageCompose.dateTimeCreated
      - outlook.Office.MessageCompose.dateTimeModifed
      - outlook.Office.MessageCompose.from
      - outlook.Office.MessageCompose.getInitializationContextAsync
      - outlook.Office.MessageCompose.getSelectedDataAsync
      - outlook.Office.MessageCompose.itemType
      - outlook.Office.MessageCompose.loadCustomPropertiesAsync
      - outlook.Office.MessageCompose.notificationMessages
      - outlook.Office.MessageCompose.recurrence
      - outlook.Office.MessageCompose.removeAttachmentAsync
      - outlook.Office.MessageCompose.removeHandlerAsync
      - outlook.Office.MessageCompose.saveAsync
      - outlook.Office.MessageCompose.seriesId
      - outlook.Office.MessageCompose.setSelectedDataAsync
      - outlook.Office.MessageCompose.subject
      - outlook.Office.MessageCompose.to
  - uid: outlook.Office.MessageCompose.addFileAttachmentAsync
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The addFileAttachmentAsync method uploads the file at the specified URI and attaches it to the item in the compose
      form.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr>


      <tr><td>Errors</td><td>AttachmentSizeExceeded - The attachment is larger than
      allowed.</td></tr><tr><td></td><td>FileTypeNotSupported - The attachment has an extension that is not
      allowed.</td></tr><tr><td></td><td>NumberOfAttachmentsExceeded - The message or appointment has too many
      attachments.</td></tr></table>


      In addition to this signature, the method also has the following signatures:


      `addFileAttachmentAsync(uri: string, attachmentName: string): void;`


      `addFileAttachmentAsync(uri: string, attachmentName: string, options: AsyncContextOptions): void;`


      `addFileAttachmentAsync(uri: string, attachmentName: string, callback: (result: AsyncResult) => void): void;`
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: outlook.Office.MessageCompose.addFileAttachmentAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFileAttachmentAsync(uri: string, attachmentName: string, options?: AsyncContextOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: >-
            The URI that provides the location of the file to attach to the message or appointment. The maximum length
            is 2048 characters.
          type:
            - string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method. inInline: If true, indicates that the
            attachment will be shown inline in the message body, and should not be displayed in the attachment list.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type asyncResult. On success, the attachment identifier will be provided in the asyncResult.value
            property. If uploading the attachment fails, the asyncResult object will contain an Error object that
            provides a description of the error.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.addHandlerAsync
    summary: >-
      Adds an event handler for a supported event.


      Currently the only supported event type is Office.EventType.RecurrencePatternChanged, which is invoked when the
      user changes the recurrence pattern of a series.


      \[ [API set: Mailbox Preview](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>


      In addition to this signature, the method also has the following signature:


      `addHandlerAsync(eventType:EventType, handler: any, callback?: (result: AsyncResult) => void): void;`
    isPreview: true
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: outlook.Office.MessageCompose.addHandlerAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType:EventType, handler: any, options?: any, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should invoke the handler.
          type:
            - EventType
        - id: handler
          description: >-
            The function to handle the event. The function must accept a single parameter, which is an object literal.
            The type property on the parameter will match the eventType parameter passed to addHandlerAsync.
          type:
            - any
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - any
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an AsyncResult object.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.addItemAttachmentAsync
    summary: >-
      Adds an Exchange item, such as a message, as an attachment to the message or appointment.


      The addItemAttachmentAsync method attaches the item with the specified Exchange identifier to the item in the
      compose form. If you specify a callback method, the method is called with one parameter, asyncResult, which
      contains either the attachment identifier or a code that indicates any error that occurred while attaching the
      item. You can use the options parameter to pass state information to the callback method, if needed.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      If your Office add-in is running in Outlook Web App, the addItemAttachmentAsync method can attach items to items
      other than the item that you are editing; however, this is not supported and is not recommended.


      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr>


      <tr><td>Errors</td><td>NumberOfAttachmentsExceeded - The message or appointment has too many
      attachments.</td></tr></table>


      In addition to the main signature, this method also has these signatures:


      `addItemAttachmentAsync(itemId: any, attachmentName: string): void;`


      `addItemAttachmentAsync(itemId: any, attachmentName: string, options: Office.AsyncContextOptions): void;`


      `addItemAttachmentAsync(itemId: any, attachmentName: string, callback: (result: AsyncResult) => void): void;`
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: outlook.Office.MessageCompose.addItemAttachmentAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?:
        (result: AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: The Exchange identifier of the item to attach. The maximum length is 100 characters.
          type:
            - any
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. asyncContext: Developers can
            provide any object they wish to access in the callback method.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type AsyncResult. On success, the attachment identifier will be provided in the asyncResult.value
            property. If adding the attachment fails, the asyncResult object will contain an Error object that provides
            a description of the error.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.bcc
    summary: >-
      Gets an object that provides methods to get or update the recipients on the Bcc (blind carbon copy) line of a
      message.


      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: bcc
    fullName: outlook.Office.MessageCompose.bcc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bcc: Recipients;'
      return:
        type:
          - Recipients
  - uid: outlook.Office.MessageCompose.body
    summary: |-
      Gets an object that provides methods for manipulating the body of an item.

      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: body
    fullName: outlook.Office.MessageCompose.body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Office.Body;'
      return:
        type:
          - outlook.Office.Body
  - uid: outlook.Office.MessageCompose.cc
    summary: >-
      Provides access to the Cc (carbon copy) recipients of a message. The type of object and level of access depends on
      the mode of the current item.


      The cc property returns a [Office.Recipients](xref:outlook.Office.Recipients) object that provides methods to get
      or update the recipients on the Cc line of the message.


      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: cc
    fullName: outlook.Office.MessageCompose.cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: Recipients;'
      return:
        type:
          - Recipients
  - uid: outlook.Office.MessageCompose.close
    summary: >-
      Closes the current item that is being composed


      The behaviors of the close method depends on the current state of the item being composed. If the item has unsaved
      changes, the client prompts the user to save, discard, or close the action.


      In the Outlook desktop client, if the message is an inline reply, the close method has no effect.


      Note: In Outlook on the web, if the item is an appointment and it has previously been saved using saveAsync, the
      user is prompted to save, discard, or cancel even if no changes have occurred since the item was last saved.


      \[ [API set: Mailbox 1.3](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restricted</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: close()
    fullName: outlook.Office.MessageCompose.close
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(): void;'
      return:
        type:
          - void
        description: ''
  - uid: outlook.Office.MessageCompose.conversationId
    summary: >-
      Gets an identifier for the email conversation that contains a particular message.


      You can get an integer for this property if your mail app is activated in read forms or responses in compose
      forms. If subsequently the user changes the subject of the reply message, upon sending the reply, the conversation
      ID for that message will change and that value you obtained earlier will no longer apply.


      You get null for this property for a new item in a compose form. If the user sets a subject and saves the item,
      the conversationId property will return a value.


      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: conversationId
    fullName: outlook.Office.MessageCompose.conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: outlook.Office.MessageCompose.dateTimeCreated
    summary: |-
      Gets the date and time that an item was created. Read mode only.

      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: dateTimeCreated
    fullName: outlook.Office.MessageCompose.dateTimeCreated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type:
          - Date
  - uid: outlook.Office.MessageCompose.dateTimeModifed
    summary: |-
      Gets the date and time that an item was last modified. Read mode only.

      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>


      Note: This member is not supported in Outlook for iOS or Outlook for Android.
    name: dateTimeModifed
    fullName: outlook.Office.MessageCompose.dateTimeModifed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeModifed: Date;'
      return:
        type:
          - Date
  - uid: outlook.Office.MessageCompose.from
    summary: >-
      Gets the email address of the sender of a message.


      The from and sender properties represent the same person unless the message is sent by a delegate. In that case,
      the from property represents the delegator, and the sender property represents the delegate.


      The from property returns a From object that provides a method to get the from value.


      \[ [API set: Mailbox Preview](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    isPreview: true
    name: from
    fullName: outlook.Office.MessageCompose.from
    langs:
      - typeScript
    type: property
    syntax:
      content: 'from: Office.From;'
      return:
        type:
          - outlook.Office.From
  - uid: outlook.Office.MessageCompose.getInitializationContextAsync
    summary: >-
      Gets initialization data passed when the add-in is activated by an actionable message.


      Note: This method is only supported by Outlook 2016 for Windows (Click-to-Run versions greater than
      16.0.8413.1000) and Outlook on the web for Office 365.


      \[ [API set: Mailbox Preview](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>


      More information on [actionable
      messages](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)<!-- -->.
    isPreview: true
    name: 'getInitializationContextAsync(options, callback)'
    fullName: outlook.Office.MessageCompose.getInitializationContextAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getInitializationContextAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type AsyncResult. On success, the initialization data is provided in the asyncResult.value
            property as a string. If there is no initialization context, the asyncResult object will contain an Error
            object with its code property set to 9020 and its name property set to GenericResponseError.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.getSelectedDataAsync
    summary: >-
      Asynchronously returns selected data from the subject or body of a message.


      If there is no selection but the cursor is in the body or subject, the method returns null for the selected data.
      If a field other than the body or subject is selected, the method returns the InvalidSelection error.


      To access the selected data from the callback method, call asyncResult.value.data. To access the source property
      that the selection comes from, call asyncResult.value.sourceProperty, which will be either body or subject.


      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: 'getSelectedDataAsync(coerciontype, callback)'
    fullName: outlook.Office.MessageCompose.getSelectedDataAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coerciontype: Office.CoercionType, callback: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: The selected data as a string with format determined by coercionType.
      parameters:
        - id: coerciontype
          description: ''
          type:
            - office.Office.CoercionType
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type AsyncResult.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.itemType
    summary: >-
      Gets the type of item that an instance represents.


      The itemType property returns one of the ItemType enumeration values, indicating whether the item object instance
      is a message or an appointment.


      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: itemType
    fullName: outlook.Office.MessageCompose.itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: Office.MailboxEnums.ItemType;'
      return:
        type:
          - outlook.Office.MailboxEnums.ItemType
  - uid: outlook.Office.MessageCompose.loadCustomPropertiesAsync
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key/value pairs on a per-app, per-item basis. This method returns a
      CustomProperties object in the callback, which provides methods to access the custom properties specific to the
      current item and the current add-in. Custom properties are not encrypted on the item, so this should not be used
      as secure storage.


      The custom properties are provided as a CustomProperties object in the asyncResult.value property. This object can
      be used to get, set, and remove custom properties from the item and save changes to the custom property set back
      to the server.


      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: outlook.Office.MessageCompose.loadCustomPropertiesAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (result: AsyncResult) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type AsyncResult.
          type:
            - '(result: AsyncResult) => void'
        - id: userContext
          description: >-
            Optional. Developers can provide any object they wish to access in the callback function. This object can be
            accessed by the asyncResult.asyncContext property in the callback function.
          type:
            - any
  - uid: outlook.Office.MessageCompose.notificationMessages
    summary: |-
      Gets the notification messages for an item.

      \[ [API set: Mailbox 1.3](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: notificationMessages
    fullName: outlook.Office.MessageCompose.notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: Office.NotificationMessages;'
      return:
        type:
          - outlook.Office.NotificationMessages
  - uid: outlook.Office.MessageCompose.recurrence
    summary: >-
      Gets or sets the recurrence pattern of an appointment. Gets the recurrence pattern of a meeting request. Read and
      compose modes for appointment items. Read mode for meeting request items.


      The recurrence property returns a recurrence object for recurring appointments or meetings requests if an item is
      a series or an instance in a series. null is returned for single appointments and meeting requests of single
      appointments. undefined is returned for messages that are not meeting requests.


      Note: Meeting requests have an itemClass value of IPM.Schedule.Meeting.Request.


      Note: If the recurrence object is null, this indicates that the object is a single appointment or a meeting
      request of a single appointment and NOT a part of a series.


      \[ [API set: Mailbox Preview](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    isPreview: true
    name: recurrence
    fullName: outlook.Office.MessageCompose.recurrence
    langs:
      - typeScript
    type: property
    syntax:
      content: 'recurrence: Recurrence;'
      return:
        type:
          - outlook.Office.Recurrence
  - uid: outlook.Office.MessageCompose.removeAttachmentAsync
    summary: >-
      Removes an attachment from a message or appointment.


      The removeAttachmentAsync method removes the attachment with the specified identifier from the item. As a best
      practice, you should use the attachment identifier to remove an attachment only if the same mail app has added
      that attachment in the same session. In Outlook Web App and OWA for Devices, the attachment identifier is valid
      only within the same session. A session is over when the user closes the app, or if the user starts composing in
      an inline form and subsequently pops out the inline form to continue in a separate window.


      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr>


      <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr></table>


      In addition to this signature, the method also has the following signatures:


      `removeAttachmentAsync(attachmentIndex: string): void;`


      `removeAttachmentAsync(attachmentIndex: string, options: Office.AsyncContextOptions): void;`


      `removeAttachmentAsync(attachmentIndex: string, callback: (result: AsyncResult) => void): void;`
    name: 'removeAttachmentAsync(attachmentIndex, options, callback)'
    fullName: outlook.Office.MessageCompose.removeAttachmentAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeAttachmentAsync(attachmentIndex: string, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentIndex
          description: The identifier of the attachment to remove. The maximum length of the string is 100 characters.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type AsyncResult. If removing the attachment fails, the asyncResult.error property will contain
            an error code with the reason for the failure.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.removeHandlerAsync
    summary: >-
      Removes an event handler for a supported event.


      Currently the only supported event type is Office.EventType.RecurrencePatternChanged, which is invoked when the
      user changes the recurrence pattern of a series.


      \[ [API set: Mailbox Preview](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>


      In addition to this signature, the method also has the following signature:


      `removeHandlerAsync(eventType:EventType, handler: any, callback?: (result: AsyncResult) => void): void;`
    isPreview: true
    name: 'removeHandlerAsync(eventType, handler, options, callback)'
    fullName: outlook.Office.MessageCompose.removeHandlerAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType:EventType, handler: any, options?: any, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should invoke the handler.
          type:
            - EventType
        - id: handler
          description: >-
            The function to handle the event. The function must accept a single parameter, which is an object literal.
            The type property on the parameter will match the eventType parameter passed to removeHandlerAsync.
          type:
            - any
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - any
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an AsyncResult object.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.saveAsync
    summary: >-
      Asynchronously saves an item.


      When invoked, this method saves the current message as a draft and returns the item id via the callback method. In
      Outlook Web App or Outlook in online mode, the item is saved to the server. In Outlook in cached mode, the item is
      saved to the local cache.


      Since appointments have no draft state, if saveAsync is called on an appointment in compose mode, the item will be
      saved as a normal appointment on the user's calendar. For new appointments that have not been saved before, no
      invitation will be sent. Saving an existing appointment will send an update to added or removed attendees.


      Note: If your add-in calls saveAsync on an item in compose mode in order to get an itemId to use with EWS or the
      REST API, be aware that when Outlook is in cached mode, it may take some time before the item is actually synced
      to the server. Until the item is synced, using the itemId will return an error.


      Note: The following clients have different behavior for saveAsync on appointments in compose mode:


      - Mac Outlook does not support saveAsync on a meeting in compose mode. Calling saveAsync on a meeting in Mac
      Outlook will return an error.


      - Outlook on the web always sends an invitation or update when saveAsync is called on an appointment in compose
      mode.


      \[ [API set: Mailbox 1.3](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr>


      <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr></table>


      In addition to this signature, the method also has the following signatures:


      `saveAsync(): void;`


      `saveAsync(options: Office.AsyncContextOptions): void;`


      `saveAsync(callback: (result: AsyncResult) => void): void;`
    name: 'saveAsync(options, callback)'
    fullName: outlook.Office.MessageCompose.saveAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type AsyncResult. If removing the attachment fails, the asyncResult.error property will contain
            an error code with the reason for the failure.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.seriesId
    summary: >-
      Gets the id of the series that an instance belongs to.


      In OWA and Outlook, the seriesId returns the Exchange Web Services (EWS) ID of the parent (series) item that this
      item belongs to. However, in iOS and Android, the seriesId returns the REST ID of the parent item.


      Note: The identifier returned by the seriesId property is the same as the Exchange Web Services item identifier.
      The seriesId property is not identical to the Outlook IDs used by the Outlook REST API. Before making REST API
      calls using this value, it should be converted using Office.context.mailbox.convertToRestId. For more details, see
      [Use the Outlook REST APIs from an Outlook add-in](https://docs.microsoft.com/outlook/add-ins/use-rest-api)<!--
      -->.


      The seriesId property returns null for items that do not have parent items such as single appointments, series
      items, or meeting requests and returns undefined for any other items that are not meeting requests.


      \[ [API set: Mailbox Preview](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    isPreview: true
    name: seriesId
    fullName: outlook.Office.MessageCompose.seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: outlook.Office.MessageCompose.setSelectedDataAsync
    summary: >-
      Asynchronously inserts data into the body or subject of a message.


      The setSelectedDataAsync method inserts the specified string at the cursor location in the subject or body of the
      item, or, if text is selected in the editor, it replaces the selected text. If the cursor is not in the body or
      subject field, an error is returned. After insertion, the cursor is placed at the end of the inserted content.


      \[ [API set: Mailbox 1.2](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr>


      <tr><td>Errors</td><td>InvalidAttachmentId - The attachment identifier does not exist.</td></tr></table>


      In addition to this signature, the method also has the following signatures:


      `setSelectedDataAsync(data: string): void;`


      `setSelectedDataAsync(data: string, options: Office.AsyncContextOptions &amp; CoercionTypeOptions): void;`


      `setSelectedDataAsync(data: string, callback: (result: AsyncResult) => void): void;`
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: outlook.Office.MessageCompose.setSelectedDataAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?:
        (result: AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be inserted. Data is not to exceed 1,000,000 characters. If more than 1,000,000 characters are
            passed in, an ArgumentOutOfRange exception is thrown.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method. coercionType: If text, the current style
            is applied in Outlook Web App and Outlook. If the field is an HTML editor, only the text data is inserted,
            even if the data is HTML. If html and the field supports HTML (the subject doesn't), the current style is
            applied in Outlook Web App and the default style is applied in Outlook. If the field is a text field, an
            InvalidDataFormat error is returned. If coercionType is not set, the result depends on the field: if the
            field is HTML then HTML is used; if the field is text, then plain text is used.
          type:
            - Office.AsyncContextOptions & CoercionTypeOptions
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type AsyncResult. If removing the attachment fails, the asyncResult.error property will contain
            an error code with the reason for the failure.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.MessageCompose.subject
    summary: |-
      Gets or sets the description that appears in the subject field of an item.

      The subject property gets or sets the entire subject of the item, as sent by the email server.

      The subject property returns a Subject object that provides methods to get and set the subject.

      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: subject
    fullName: outlook.Office.MessageCompose.subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - Subject
  - uid: outlook.Office.MessageCompose.to
    summary: >-
      Provides access to the recipients on the To line of a message. The type of object and level of access depends on
      the mode of the current item.


      The to property returns a Recipients object that provides methods to get or update the recipients on the To line
      of the message.


      \[ [API set: Mailbox 1.0](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Message
      Compose</td></tr></table>
    name: to
    fullName: outlook.Office.MessageCompose.to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: Recipients;'
      return:
        type:
          - Recipients
