### YamlMime:UniversalReference
items:
  - uid: outlook.Office.Time
    summary: |-
      The Time object is returned as the start or end property of an appointment in compose mode.

      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>Applicable Outlook mode</td><td>Compose</td></tr></table>
    name: Office.Time
    fullName: outlook.Office.Time
    langs:
      - typeScript
    type: interface
    package: outlook
    children:
      - outlook.Office.Time.getAsync
      - outlook.Office.Time.setAsync
  - uid: outlook.Office.Time.getAsync
    summary: >-
      Gets the start or end time of an appointment.


      The date and time is provided as a Date object in the asyncResult.value property. The value is in Coordinated
      Universal Time (UTC). You can convert the UTC time to the local client time by using the convertToLocalClientTime
      method.


      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


      <tr><td>Applicable Outlook mode</td><td>Compose</td></tr></table>


      In addition to the main signature, this method also has this signature:


      `getAsync(callback: (result: AsyncResult) => void): void;`
    name: 'getAsync(options, callback)'
    fullName: outlook.Office.Time.getAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(options: Office.AsyncContextOptions, callback: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. asyncContext: Developers can
            provide any object they wish to access in the callback method.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type AsyncResult.
          type:
            - '(result: AsyncResult) => void'
  - uid: outlook.Office.Time.setAsync
    summary: >-
      Sets the start or end time of an appointment.


      If the setAsync method is called on the start property, the end property will be adjusted to maintain the duration
      of the appointment as previously set. If the setAsync method is called on the end property, the duration of the
      appointment will be extended to the new end time.


      The time must be in UTC; you can get the correct UTC time by using the convertToUtcClientTime method.


      \[ [API set: Mailbox 1.1](/javascript/office/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >
      <table><tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


      <tr><td>Applicable Outlook mode</td><td>Compose</td></tr>


      <tr><td>Errors</td><td>InvalidEndTime - The appointment end time is before the appointment start
      time.</td></tr></table>


      In addition to the main signature, this method also has these signatures:


      `setAsync(dateTime: Date): void;`


      `setAsync(dateTime: Date, options: Office.AsyncContextOptions): void;`


      `setAsync(dateTime: Date, callback: (result: AsyncResult) => void): void;`


      #### Examples


      ```javascript

      var startTime = new Date("3/14/2015");

      var options = {
          // Pass information that can be used
          // in the callback
          asyncContext: {verb:"Set"}
      }

      Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
          if (result.error) {
              console.debug(result.error);
          } else {
              // Access the asyncContext that was passed to the setAsync function
              console.debug("Start Time " + result.asyncContext.verb);
          }
      });

      ```
    name: 'setAsync(dateTime, options, callback)'
    fullName: outlook.Office.Time.setAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(dateTime: Date, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: dateTime
          description: A date-time object in Coordinated Universal Time (UTC).
          type:
            - Date
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. asyncContext: Developers can
            provide any object they wish to access in the callback method.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type AsyncResult. If setting the date and time fails, the asyncResult.error property will contain an
            error code.
          type:
            - '(result: AsyncResult) => void'
