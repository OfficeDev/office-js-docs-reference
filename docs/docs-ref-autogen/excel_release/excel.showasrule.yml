### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.ShowAsRule
    summary: '\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]'
    name: Excel.ShowAsRule
    fullName: Excel.ShowAsRule
    langs:
      - typeScript
    type: interface
    package: excel_release
    children:
      - excel_release.Excel.ShowAsRule.baseField
      - excel_release.Excel.ShowAsRule.baseItem
      - excel_release.Excel.ShowAsRule.calculation
  - uid: excel_release.Excel.ShowAsRule.baseField
    summary: |-
      The base PivotField to base the ShowAs calculation, if applicable based on the ShowAsCalculation type, else null.

      \[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: baseField
    fullName: baseField
    langs:
      - typeScript
    type: property
    syntax:
      content: 'baseField?: Excel.PivotField;'
      return:
        type:
          - excel.Excel.PivotField
  - uid: excel_release.Excel.ShowAsRule.baseItem
    summary: |-
      The base Item to base the ShowAs calculation on, if applicable based on the ShowAsCalculation type, else null.

      \[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: baseItem
    fullName: baseItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'baseItem?: Excel.PivotItem;'
      return:
        type:
          - excel.Excel.PivotItem
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");
              const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

              farmDataHierarchy.load("showAs");
              wholesaleDataHierarchy.load("showAs");
              await context.sync();

              // show the difference between crate sales of the "A Farms" and the other farms
              // this difference is both aggregated and shown for individual fruit types (where applicable)
              let farmShowAs = farmDataHierarchy.showAs;
              farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
              farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
              farmShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
              farmDataHierarchy.showAs = farmShowAs;

              let wholesaleShowAs = wholesaleDataHierarchy.showAs;
              wholesaleShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
              wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
              wholesaleShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
              wholesaleDataHierarchy.showAs = wholesaleShowAs;
              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ShowAsRule.calculation
    summary: |-
      The ShowAs Calculation to use for the Data PivotField. See Excel.ShowAsCalculation for Details.

      \[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: calculation
    fullName: calculation
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        calculation: Excel.ShowAsCalculation | "Unknown" | "None" | "PercentOfGrandTotal" | "PercentOfRowTotal" |
        "PercentOfColumnTotal" | "PercentOfParentRowTotal" | "PercentOfParentColumnTotal" | "PercentOfParentTotal" |
        "PercentOf" | "RunningTotal" | "PercentRunningTotal" | "DifferenceFrom" | "PercentDifferenceFrom" |
        "RankAscending" | "RankDecending" | "Index";
      return:
        type:
          - >-
            Excel.ShowAsCalculation | "Unknown" | "None" | "PercentOfGrandTotal" | "PercentOfRowTotal" |
            "PercentOfColumnTotal" | "PercentOfParentRowTotal" | "PercentOfParentColumnTotal" | "PercentOfParentTotal" |
            "PercentOf" | "RunningTotal" | "PercentRunningTotal" | "DifferenceFrom" | "PercentDifferenceFrom" |
            "RankAscending" | "RankDecending" | "Index"
