### YamlMime:TSType
name: Word.Pane
uid: word!Word.Pane:class
package: word!
fullName: Word.Pane
summary: >-
  Represents a window pane. The `Pane` object is a member of the pane
  collection. The pane collection includes all the window panes for a single
  window.
remarks: >-
  \[ [API set: WordApiDesktop
  1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/get-pages.yaml


  await Word.run(async (context) => {
    // Gets the first paragraph of each page.
    console.log("Getting first paragraph of each page...");

    // Get the active window.
    const activeWindow: Word.Window = context.document.activeWindow;
    activeWindow.load();

    // Get the active pane.
    const activePane: Word.Pane = activeWindow.activePane;
    activePane.load();

    // Get all pages.
    const pages: Word.PageCollection = activePane.pages;
    pages.load();

    await context.sync();

    // Get page index and paragraphs of each page.
    const pagesIndexes = [];
    const pagesNumberOfParagraphs = [];
    const pagesFirstParagraphText = [];
    for (let i = 0; i < pages.items.length; i++) {
      const page = pages.items[i];
      page.load('index');
      pagesIndexes.push(page);

      const paragraphs = page.getRange().paragraphs;
      paragraphs.load('items/length');
      pagesNumberOfParagraphs.push(paragraphs);

      const firstParagraph = paragraphs.getFirst();
      firstParagraph.load('text');
      pagesFirstParagraphText.push(firstParagraph);
    }

    await context.sync();

    for (let i = 0; i < pagesIndexes.length; i++) {
      console.log(`Page index: ${pagesIndexes[i].index}`);
      console.log(`Number of paragraphs: ${pagesNumberOfParagraphs[i].items.length}`);
      console.log("First paragraph's text:", pagesFirstParagraphText[i].text);
    }
  });

  ```

isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: word!Word.Pane#context:member
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: <xref uid="word!Word.RequestContext:class" />
  - name: pages
    uid: word!Word.Pane#pages:member
    package: word!
    fullName: pages
    summary: Gets the collection of pages in the pane.
    remarks: >-
      \[ [API set: WordApiDesktop
      1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/get-pages.yaml


      await Word.run(async (context) => {
        // Gets the first paragraph of each page.
        console.log("Getting first paragraph of each page...");

        // Get the active window.
        const activeWindow: Word.Window = context.document.activeWindow;
        activeWindow.load();

        // Get the active pane.
        const activePane: Word.Pane = activeWindow.activePane;
        activePane.load();

        // Get all pages.
        const pages: Word.PageCollection = activePane.pages;
        pages.load();

        await context.sync();

        // Get page index and paragraphs of each page.
        const pagesIndexes = [];
        const pagesNumberOfParagraphs = [];
        const pagesFirstParagraphText = [];
        for (let i = 0; i < pages.items.length; i++) {
          const page = pages.items[i];
          page.load('index');
          pagesIndexes.push(page);

          const paragraphs = page.getRange().paragraphs;
          paragraphs.load('items/length');
          pagesNumberOfParagraphs.push(paragraphs);

          const firstParagraph = paragraphs.getFirst();
          firstParagraph.load('text');
          pagesFirstParagraphText.push(firstParagraph);
        }

        await context.sync();

        for (let i = 0; i < pagesIndexes.length; i++) {
          console.log(`Page index: ${pagesIndexes[i].index}`);
          console.log(`Number of paragraphs: ${pagesNumberOfParagraphs[i].items.length}`);
          console.log("First paragraph's text:", pagesFirstParagraphText[i].text);
        }
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pages: Word.PageCollection;'
      return:
        type: <xref uid="word!Word.PageCollection:class" />
  - name: pagesEnclosingViewport
    uid: word!Word.Pane#pagesEnclosingViewport:member
    package: word!
    fullName: pagesEnclosingViewport
    summary: >-
      Gets the `PageCollection` shown in the viewport of the pane. If a page is
      partially visible in the pane, the whole page is returned.
    remarks: >-
      \[ [API set: WordApiDesktop
      1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/get-pages.yaml


      await Word.run(async (context) => {
        // Gets the pages enclosing the viewport.

        // Get the active window.
        const activeWindow: Word.Window = context.document.activeWindow;
        activeWindow.load();

        // Get the active pane.
        const activePane: Word.Pane = activeWindow.activePane;
        activePane.load();

        // Get pages enclosing the viewport.
        const pages: Word.PageCollection = activePane.pagesEnclosingViewport;
        pages.load();

        await context.sync();

        // Log the number of pages.
        const pageCount = pages.items.length;
        console.log(`Number of pages enclosing the viewport: ${pageCount}`);

        // Log index info of these pages.
        const pagesIndexes = [];
        for (let i = 0; i < pageCount; i++) {
          const page = pages.items[i];
          page.load('index');
          pagesIndexes.push(page);
        }

        await context.sync();

        for (let i = 0; i < pagesIndexes.length; i++) {
          console.log(`Page index: ${pagesIndexes[i].index}`);
        }
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pagesEnclosingViewport: Word.PageCollection;'
      return:
        type: <xref uid="word!Word.PageCollection:class" />
methods:
  - name: getNext()
    uid: word!Word.Pane#getNext:member(1)
    package: word!
    fullName: getNext()
    summary: >-
      Gets the next pane in the window. Throws an `ItemNotFound` error if this
      pane is the last one.
    remarks: >-
      \[ [API set: WordApiDesktop
      1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNext(): Word.Pane;'
      return:
        type: <xref uid="word!Word.Pane:class" />
        description: ''
  - name: getNextOrNullObject()
    uid: word!Word.Pane#getNextOrNullObject:member(1)
    package: word!
    fullName: getNextOrNullObject()
    summary: >-
      Gets the next pane. If this pane is the last one, then this method will
      return an object with its `isNullObject` property set to `true`<!-- -->.
      For further information, see [*OrNullObject methods and
      properties](https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: >-
      \[ [API set: WordApiDesktop
      1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNextOrNullObject(): Word.Pane;'
      return:
        type: <xref uid="word!Word.Pane:class" />
        description: ''
  - name: load(propertyNames)
    uid: word!Word.Pane#load:member(1)
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Pane;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: string | string[]
      return:
        type: <xref uid="word!Word.Pane:class" />
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: word!Word.Pane#load:member(2)
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Pane;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: <xref uid="word!Word.Pane:class" />
        description: ''
  - name: toJSON()
    uid: word!Word.Pane#toJSON:member(1)
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that's passed to it.) Whereas the original `Word.Pane` object is an
      API object, the `toJSON` method returns a plain JavaScript object (typed
      as `Word.Interfaces.PaneData`<!-- -->) that contains shallow copies of any
      loaded child properties from the original object.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.PaneData;'
      return:
        type: <xref uid="word!Word.Interfaces.PaneData:interface" />
        description: ''
  - name: track()
    uid: word!Word.Pane#track:member(1)
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath"
      error when setting a property or invoking a method on the object, you need
      to add the object to the tracked object collection when the object was
      first created. If this object is part of a collection, you should also
      track the parent collection.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Pane;'
      return:
        type: <xref uid="word!Word.Pane:class" />
        description: ''
  - name: untrack()
    uid: word!Word.Pane#untrack:member(1)
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so
      please remember to free any objects you add, once you're done using them.
      You'll need to call `context.sync()` before the memory release takes
      effect.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Pane;'
      return:
        type: <xref uid="word!Word.Pane:class" />
        description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
