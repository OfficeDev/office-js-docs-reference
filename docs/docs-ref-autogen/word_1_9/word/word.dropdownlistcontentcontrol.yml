### YamlMime:TSType
name: Word.DropDownListContentControl
uid: 'word!Word.DropDownListContentControl:class'
package: word!
fullName: Word.DropDownListContentControl
summary: The data specific to content controls of type DropDownList.
remarks: >-
  \[ [API set: WordApi 1.9](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-dropdown-list-content-control.yaml


  // Places a dropdown list content control at the end of the selection.

  await Word.run(async (context) => {
    let selection = context.document.getSelection();
    selection.getRange(Word.RangeLocation.end).insertContentControl(Word.ContentControlType.dropDownList);
    await context.sync();

    console.log("Dropdown list content control inserted at the end of the selection.");
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'word!Word.DropDownListContentControl#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: listItems
    uid: 'word!Word.DropDownListContentControl#listItems:member'
    package: word!
    fullName: listItems
    summary: Gets the collection of list items in the dropdown list content control.
    remarks: >-
      \[ [API set: WordApi 1.9](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-dropdown-list-content-control.yaml


      // Deletes the provided list item from the first dropdown list content control in the selection.

      await Word.run(async (context) => {
        const listItemText = $("#item-to-delete")
          .val()
          .toString()
          .trim();
        const selectedRange: Word.Range = context.document.getSelection();
        let selectedContentControl = selectedRange
          .getContentControls({
            types: [Word.ContentControlType.dropDownList]
          })
          .getFirstOrNullObject();
        selectedContentControl.load("id,dropDownListContentControl");
        await context.sync();

        if (selectedContentControl.isNullObject) {
          const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;
          parentContentControl.load("id,type,dropDownListContentControl");
          await context.sync();

          if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.dropDownList) {
            console.warn("No dropdown list content control is currently selected.");
            return;
          } else {
            selectedContentControl = parentContentControl;
          }
        }

        let selectedDropdownList: Word.DropDownListContentControl = selectedContentControl.dropDownListContentControl;
        selectedDropdownList.listItems.load("items/*");
        await context.sync();

        let listItems: Word.ContentControlListItemCollection = selectedContentControl.dropDownListContentControl.listItems;
        let itemToDelete: Word.ContentControlListItem = listItems.items.find((item) => item.displayText === listItemText);
        if (!itemToDelete) {
          console.warn(`List item doesn't exist in control with ID ${selectedContentControl.id}: ${listItemText}`)
          return;
        }
        
        itemToDelete.delete();
        await context.sync();

        console.log(`List item deleted from control with ID ${selectedContentControl.id}: ${listItemText}`);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly listItems: Word.ContentControlListItemCollection;'
      return:
        type: '<xref uid="word!Word.ContentControlListItemCollection:class" />'
methods:
  - name: 'addListItem(displayText, value, index)'
    uid: 'word!Word.DropDownListContentControl#addListItem:member(1)'
    package: word!
    fullName: 'addListItem(displayText, value, index)'
    summary: >-
      Adds a new list item to this dropdown list content control and returns a
      [Word.ContentControlListItem](xref:word!Word.ContentControlListItem:class) object.
    remarks: >-
      \[ [API set: WordApi 1.9](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-dropdown-list-content-control.yaml


      // Adds the provided list item to the first dropdown list content control in the selection.

      await Word.run(async (context) => {
        const listItemText = $("#item-to-add")
          .val()
          .toString()
          .trim();
        const selectedRange: Word.Range = context.document.getSelection();
        let selectedContentControl = selectedRange
          .getContentControls({
            types: [Word.ContentControlType.dropDownList]
          })
          .getFirstOrNullObject();
        selectedContentControl.load("id,dropDownListContentControl");
        await context.sync();

        if (selectedContentControl.isNullObject) {
          const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;
          parentContentControl.load("id,type,dropDownListContentControl");
          await context.sync();

          if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.dropDownList) {
            console.warn("No dropdown list content control is currently selected.");
            return;
          } else {
            selectedContentControl = parentContentControl;
          }
        }

        selectedContentControl.dropDownListContentControl.addListItem(listItemText);
        await context.sync();

        console.log(`List item added to control with ID ${selectedContentControl.id}: ${listItemText}`);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addListItem(displayText: string, value?: string, index?: number): Word.ContentControlListItem;'
      parameters:
        - id: displayText
          description: Required. Display text of the list item.
          type: string
        - id: value
          description: Optional. Value of the list item.
          type: string
        - id: index
          description: >-
            Optional. Index location of the new item in the list. If an item exists at the position specified, the
            existing item is pushed down in the list. If omitted, the new item is added to the end of the list.
          type: number
      return:
        type: '<xref uid="word!Word.ContentControlListItem:class" />'
        description: ''
  - name: deleteAllListItems()
    uid: 'word!Word.DropDownListContentControl#deleteAllListItems:member(1)'
    package: word!
    fullName: deleteAllListItems()
    summary: Deletes all list items in this dropdown list content control.
    remarks: >-
      \[ [API set: WordApi 1.9](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-dropdown-list-content-control.yaml


      // Deletes the list items from first dropdown list content control found in the selection.

      await Word.run(async (context) => {
        const selectedRange: Word.Range = context.document.getSelection();
        let selectedContentControl = selectedRange
          .getContentControls({
            types: [Word.ContentControlType.dropDownList]
          })
          .getFirstOrNullObject();
        selectedContentControl.load("id,dropDownListContentControl");
        await context.sync();

        if (selectedContentControl.isNullObject) {
          const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;
          parentContentControl.load("id,type,dropDownListContentControl");
          await context.sync();

          if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.dropDownList) {
            console.warn("No dropdown list content control is currently selected.");
            return;
          } else {
            selectedContentControl = parentContentControl;
          }
        }

        console.log(
          `About to delete the list from the dropdown list content control with ID ${selectedContentControl.id}`
        );
        selectedContentControl.dropDownListContentControl.deleteAllListItems();
        await context.sync();

        console.log("Deleted the list from the dropdown list content control.");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'deleteAllListItems(): void;'
      return:
        type: void
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.DropDownListContentControl#load:member(1)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.DropDownListContentControl;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.DropDownListContentControl:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.DropDownListContentControl#load:member(2)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.DropDownListContentControl;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.DropDownListContentControl:class" />'
        description: ''
  - name: toJSON()
    uid: 'word!Word.DropDownListContentControl#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Word.DropDownListContentControl` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `Word.Interfaces.DropDownListContentControlData`<!-- -->) that
      contains shallow copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.DropDownListContentControlData;'
      return:
        type: '<xref uid="word!Word.Interfaces.DropDownListContentControlData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.DropDownListContentControl#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.DropDownListContentControl;'
      return:
        type: '<xref uid="word!Word.DropDownListContentControl:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.DropDownListContentControl#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You will need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.DropDownListContentControl;'
      return:
        type: '<xref uid="word!Word.DropDownListContentControl:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
