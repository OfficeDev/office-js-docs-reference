### YamlMime:UniversalReference
items:
  - uid: office
    name: office
    fullName: office
    langs:
      - typeScript
    type: package
    children:
      - office.Office.ActiveView
      - office.Office.AddBindingFromNamedItemOptions
      - office.Office.AddBindingFromPromptOptions
      - office.Office.AddBindingFromSelectionOptions
      - office.Office.AddinCommands.Event
      - office.Office.AddinCommands.Source
      - office.Office.AsyncContextOptions
      - office.Office.AsyncResult
      - office.Office.AsyncResultStatus
      - office.Office.Auth
      - office.Office.AuthOptions
      - office.Office.Binding
      - office.Office.BindingDataChangedEventArgs
      - office.Office.Bindings
      - office.Office.BindingSelectionChangedEventArgs
      - office.Office.BindingType
      - office.Office.CoercionType
      - office.Office.Context
      - office.Office.ContextInformation
      - office.Office.CustomXmlNode
      - office.Office.CustomXMLNodeType
      - office.Office.CustomXmlPart
      - office.Office.CustomXmlParts
      - office.Office.CustomXmlPrefixMappings
      - office.Office.Dialog
      - office.Office.DialogOptions
      - office.Office.Document
      - office.Office.DocumentMode
      - office.Office.DocumentSelectionChangedEventArgs
      - office.Office.Error
      - office.Office.EventType
      - office.Office.File
      - office.Office.FileProperties
      - office.Office.FileType
      - office.Office.FilterType
      - office.Office.GetBindingDataOptions
      - office.Office.GetFileOptions
      - office.Office.GetSelectedDataOptions
      - office.Office.GoToByIdOptions
      - office.Office.GoToType
      - office.Office.HostType
      - office.Office.Index
      - office.Office.InitializationReason
      - office.Office.initialize
      - office.Office.IPromiseConstructor
      - office.Office.MatrixBinding
      - office.Office.NodeDeletedEventArgs
      - office.Office.NodeInsertedEventArgs
      - office.Office.NodeReplacedEventArgs
      - office.Office.OfficeTheme
      - office.Office.onReady
      - office.Office.PlatformType
      - office.Office.ProjectProjectFields
      - office.Office.ProjectResourceFields
      - office.Office.ProjectTaskFields
      - office.Office.ProjectViewTypes
      - office.Office.RangeCoordinates
      - office.Office.RangeFormatConfiguration
      - office.Office.RemoveHandlerOptions
      - office.Office.RequirementSetSupport
      - office.Office.SaveSettingsOptions
      - office.Office.select
      - office.Office.SelectionMode
      - office.Office.SetBindingDataOptions
      - office.Office.SetSelectedDataOptions
      - office.Office.Settings
      - office.Office.Slice
      - office.Office.Table
      - office.Office.TableBinding
      - office.Office.TableData
      - office.Office.TextBinding
      - office.Office.UI
      - office.Office.useShortNamespace
      - office.Office.ValueFormat
      - office.OfficeExtension.ClientObject
      - office.OfficeExtension.ClientRequestContext
      - office.OfficeExtension.ClientResult
      - office.OfficeExtension.DebugInfo
      - office.OfficeExtension.EmbeddedOptions
      - office.OfficeExtension.EmbeddedSession
      - office.OfficeExtension.Error
      - office.OfficeExtension.ErrorCodes
      - office.OfficeExtension.EventHandlerResult
      - office.OfficeExtension.EventHandlers
      - office.OfficeExtension.EventInfo
      - office.OfficeExtension.LoadOption
      - office.OfficeExtension.RequestContextDebugInfo
      - office.OfficeExtension.RequestUrlAndHeaderInfo
      - office.OfficeExtension.RunOptions
      - office.OfficeExtension.TrackedObjects
      - office.OfficeExtension.UpdateOptions
  - uid: office.Office.initialize
    summary: >-
      Occurs when the runtime environment is loaded and the add-in is ready to start interacting with the application
      and hosted document.


      The reason parameter of the initialize event listener function returns an `InitializationReason` enumeration value
      that specifies how initialization occurred. A task pane or content add-in can be initialized in two ways:


      - The user just inserted it from Recently Used Add-ins section of the Add-in drop-down list on the Insert tab of
      the ribbon in the Office host application, or from Insert add-in dialog box.


      - The user opened a document that already contains the add-in.


      *Note*: The reason parameter of the initialize event listener function only returns an `InitializationReason`
      enumeration value for task pane and content add-ins. It does not return a value for Outlook add-ins.
    remarks: >-
      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th><th> OWA for Devices </th><th> Office for Mac </th></tr> <tr><td><strong>
      Access </strong></td><td> </td><td> Y </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Excel
      </strong></td><td> Y </td><td> Y </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong> Outlook
      </strong></td><td> Y </td><td> Y </td><td> </td><td> Y </td><td> Y </td></tr> <tr><td><strong> PowerPoint
      </strong></td><td> Y </td><td> Y </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong> Project
      </strong></td><td> Y </td><td> </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Word </strong></td><td> Y
      </td><td> Y </td><td> Y </td><td> </td><td> </td></tr> </table>

      #### Examples


      ```javascript

      // You can use the value of the InitializationEnumeration to implement different logic for

      // when the add-in is first inserted versus when it is already part of the document.

      // The following example shows some simple logic that uses the value of the reason parameter

      // to display how the task pane or content add-in was initialized.

      Office.initialize = function (reason) {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
          // After the DOM is loaded, code specific to the add-in can run.
          // Display initialization reason.
          if (reason == "inserted")
          write("The add-in was just inserted.");

          if (reason == "documentOpened")
          write("The add-in is already part of the document.");
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: initialize(reason)
    fullName: office.Office.initialize
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function initialize(reason: InitializationReason): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: reason
          description: Indicates how the app was initialized.
          type:
            - office.Office.InitializationReason
  - uid: office.Office.onReady
    summary: >-
      Ensures that the Office JavaScript APIs are ready to be called by the add-in. If the framework hasn't initialized
      yet, the callback or promise will wait until the Office host is ready to accept API calls. Note that though this
      API is intended to be used inside an Office add-in, it can also be used outside the add-in. In that case, once
      Office.js determines that it is running outside of an Office host application, it will call the callback and
      resolve the promise with "null" for both the host and platform.
    name: onReady(callback)
    fullName: office.Office.onReady
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export function onReady(callback?: (info: { host: HostType, platform: PlatformType }) => any): Promise<{ host:
        HostType, platform: PlatformType }>;
      return:
        type:
          - 'Promise<{ host: HostType, platform: PlatformType }>'
        description: 'A Promise that contains the host and platform info, once initialization is completed.'
      parameters:
        - id: callback
          description: >-
            An optional callback method, that will receive the host and platform info. Alternatively, rather than use a
            callback, an add-in may simply wait for the Promise returned by the function to resolve.
          type:
            - '(info: { host: HostType, platform: PlatformType }) => any'
  - uid: office.Office.select
    summary: Returns a promise of an object described in the expression. Callback is invoked only if method fails.
    remarks: >-
      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><td><strong> Access </strong></td><td> </td><td> Y </td><td>
      </td></tr> <tr><td><strong> Excel </strong></td><td> Y </td><td> Y </td><td> Y </td></tr> <tr><td><strong> Word
      </strong></td><td> Y </td><td> </td><td> Y </td></tr> </table>

      #### Examples


      ```javascript

      // The following code example uses the select method to retrieve a binding with the id "cities" from

      // the Bindings collection, and then calls the addHandlerAsync method to add an event handler for the

      // dataChanged event of the binding.

      function addBindingDataChangedEventHandler() {
          Office.select("bindings#cities", function onError(){}).addHandlerAsync(Office.EventType.BindingDataChanged,
          function (eventArgs) {
              doSomethingWithBinding(eventArgs.binding);
          });
      }

      ```
    name: 'select(expression, callback)'
    fullName: office.Office.select
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function select(expression: string, callback?: (result: AsyncResult) => void): Binding;'
      return:
        type:
          - Binding
        description: ''
      parameters:
        - id: expression
          description: >-
            The object to be retrieved. Example "bindings\#BindingName", retrieves a binding promise for a binding named
            'BindingName'
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of
            type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.useShortNamespace
    summary: Toggles on and off the `Office` alias for the full `Microsoft.Office.WebExtension` namespace.
    remarks: >-
      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th><th> OWA for Devices </th><th> Office for Mac </th></tr> <tr><td><strong>
      Access </strong></td><td> </td><td> Y </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Excel
      </strong></td><td> Y </td><td> Y </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong> Outlook
      </strong></td><td> Y </td><td> Y </td><td> </td><td> Y </td><td> Y </td></tr> <tr><td><strong> PowerPoint
      </strong></td><td> Y </td><td> Y </td><td> Y </td><td> </td><td> </td></tr> <tr><td><strong> Project
      </strong></td><td> Y </td><td> </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Word </strong></td><td> Y
      </td><td> Y </td><td> Y </td><td> </td><td> </td></tr> </table>

      #### Examples


      ```javascript

      function startUsingShortNamespace() {
          if (typeof Office === 'undefined') {
              Microsoft.Office.WebExtension.useShortNamespace(true);
          }
          else {
              Office.useShortNamespace(true);
          }
          write('Office alias is now ' + typeof Office);
      }


      function stopUsingShortNamespace() {
          if (typeof Office === 'undefined') {
              Microsoft.Office.WebExtension.useShortNamespace(false);
          }
          else {
              Office.useShortNamespace(false);
          }
          write('Office alias is now ' + typeof Office);
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: useShortNamespace(useShortNamespace)
    fullName: office.Office.useShortNamespace
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function useShortNamespace(useShortNamespace: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: useShortNamespace
          description: True to use the shortcut alias; otherwise false to disable it. The default is true.
          type:
            - boolean
references:
  - uid: office.Office.ActiveView
    name: Office.ActiveView
  - uid: office.Office.AddBindingFromNamedItemOptions
    name: Office.AddBindingFromNamedItemOptions
  - uid: office.Office.AddBindingFromPromptOptions
    name: Office.AddBindingFromPromptOptions
  - uid: office.Office.AddBindingFromSelectionOptions
    name: Office.AddBindingFromSelectionOptions
  - uid: office.Office.AddinCommands.Event
    name: Office.AddinCommands.Event
  - uid: office.Office.AddinCommands.Source
    name: Office.AddinCommands.Source
  - uid: office.Office.AsyncContextOptions
    name: Office.AsyncContextOptions
  - uid: office.Office.AsyncResult
    name: Office.AsyncResult
  - uid: office.Office.AsyncResultStatus
    name: Office.AsyncResultStatus
  - uid: office.Office.Auth
    name: Office.Auth
  - uid: office.Office.AuthOptions
    name: Office.AuthOptions
  - uid: office.Office.Binding
    name: Office.Binding
  - uid: office.Office.BindingDataChangedEventArgs
    name: Office.BindingDataChangedEventArgs
  - uid: office.Office.Bindings
    name: Office.Bindings
  - uid: office.Office.BindingSelectionChangedEventArgs
    name: Office.BindingSelectionChangedEventArgs
  - uid: office.Office.BindingType
    name: Office.BindingType
  - uid: office.Office.CoercionType
    name: Office.CoercionType
  - uid: office.Office.Context
    name: Office.Context
  - uid: office.Office.ContextInformation
    name: Office.ContextInformation
  - uid: office.Office.CustomXmlNode
    name: Office.CustomXmlNode
  - uid: office.Office.CustomXMLNodeType
    name: Office.CustomXMLNodeType
  - uid: office.Office.CustomXmlPart
    name: Office.CustomXmlPart
  - uid: office.Office.CustomXmlParts
    name: Office.CustomXmlParts
  - uid: office.Office.CustomXmlPrefixMappings
    name: Office.CustomXmlPrefixMappings
  - uid: office.Office.Dialog
    name: Office.Dialog
  - uid: office.Office.DialogOptions
    name: Office.DialogOptions
  - uid: office.Office.Document
    name: Office.Document
  - uid: office.Office.DocumentMode
    name: Office.DocumentMode
  - uid: office.Office.DocumentSelectionChangedEventArgs
    name: Office.DocumentSelectionChangedEventArgs
  - uid: office.Office.Error
    name: Office.Error
  - uid: office.Office.EventType
    name: Office.EventType
  - uid: office.Office.File
    name: Office.File
  - uid: office.Office.FileProperties
    name: Office.FileProperties
  - uid: office.Office.FileType
    name: Office.FileType
  - uid: office.Office.FilterType
    name: Office.FilterType
  - uid: office.Office.GetBindingDataOptions
    name: Office.GetBindingDataOptions
  - uid: office.Office.GetFileOptions
    name: Office.GetFileOptions
  - uid: office.Office.GetSelectedDataOptions
    name: Office.GetSelectedDataOptions
  - uid: office.Office.GoToByIdOptions
    name: Office.GoToByIdOptions
  - uid: office.Office.GoToType
    name: Office.GoToType
  - uid: office.Office.HostType
    name: Office.HostType
  - uid: office.Office.Index
    name: Office.Index
  - uid: office.Office.InitializationReason
    name: Office.InitializationReason
  - uid: office.Office.IPromiseConstructor
    name: Office.IPromiseConstructor
  - uid: office.Office.MatrixBinding
    name: Office.MatrixBinding
  - uid: office.Office.NodeDeletedEventArgs
    name: Office.NodeDeletedEventArgs
  - uid: office.Office.NodeInsertedEventArgs
    name: Office.NodeInsertedEventArgs
  - uid: office.Office.NodeReplacedEventArgs
    name: Office.NodeReplacedEventArgs
  - uid: office.Office.OfficeTheme
    name: Office.OfficeTheme
  - uid: office.Office.PlatformType
    name: Office.PlatformType
  - uid: office.Office.ProjectProjectFields
    name: Office.ProjectProjectFields
  - uid: office.Office.ProjectResourceFields
    name: Office.ProjectResourceFields
  - uid: office.Office.ProjectTaskFields
    name: Office.ProjectTaskFields
  - uid: office.Office.ProjectViewTypes
    name: Office.ProjectViewTypes
  - uid: office.Office.RangeCoordinates
    name: Office.RangeCoordinates
  - uid: office.Office.RangeFormatConfiguration
    name: Office.RangeFormatConfiguration
  - uid: office.Office.RemoveHandlerOptions
    name: Office.RemoveHandlerOptions
  - uid: office.Office.RequirementSetSupport
    name: Office.RequirementSetSupport
  - uid: office.Office.SaveSettingsOptions
    name: Office.SaveSettingsOptions
  - uid: office.Office.SelectionMode
    name: Office.SelectionMode
  - uid: office.Office.SetBindingDataOptions
    name: Office.SetBindingDataOptions
  - uid: office.Office.SetSelectedDataOptions
    name: Office.SetSelectedDataOptions
  - uid: office.Office.Settings
    name: Office.Settings
  - uid: office.Office.Slice
    name: Office.Slice
  - uid: office.Office.Table
    name: Office.Table
  - uid: office.Office.TableBinding
    name: Office.TableBinding
  - uid: office.Office.TableData
    name: Office.TableData
  - uid: office.Office.TextBinding
    name: Office.TextBinding
  - uid: office.Office.UI
    name: Office.UI
  - uid: office.Office.ValueFormat
    name: Office.ValueFormat
  - uid: office.OfficeExtension.ClientObject
    name: OfficeExtension.ClientObject
  - uid: office.OfficeExtension.ClientRequestContext
    name: OfficeExtension.ClientRequestContext
  - uid: office.OfficeExtension.ClientResult
    name: OfficeExtension.ClientResult
  - uid: office.OfficeExtension.DebugInfo
    name: OfficeExtension.DebugInfo
  - uid: office.OfficeExtension.EmbeddedOptions
    name: OfficeExtension.EmbeddedOptions
  - uid: office.OfficeExtension.EmbeddedSession
    name: OfficeExtension.EmbeddedSession
  - uid: office.OfficeExtension.Error
    name: OfficeExtension.Error
  - uid: office.OfficeExtension.ErrorCodes
    name: OfficeExtension.ErrorCodes
  - uid: office.OfficeExtension.EventHandlerResult
    name: OfficeExtension.EventHandlerResult
  - uid: office.OfficeExtension.EventHandlers
    name: OfficeExtension.EventHandlers
  - uid: office.OfficeExtension.EventInfo
    name: OfficeExtension.EventInfo
  - uid: office.OfficeExtension.LoadOption
    name: OfficeExtension.LoadOption
  - uid: office.OfficeExtension.RequestContextDebugInfo
    name: OfficeExtension.RequestContextDebugInfo
  - uid: office.OfficeExtension.RequestUrlAndHeaderInfo
    name: OfficeExtension.RequestUrlAndHeaderInfo
  - uid: office.OfficeExtension.RunOptions
    name: OfficeExtension.RunOptions
  - uid: office.OfficeExtension.TrackedObjects
    name: OfficeExtension.TrackedObjects
  - uid: office.OfficeExtension.UpdateOptions
    name: OfficeExtension.UpdateOptions
