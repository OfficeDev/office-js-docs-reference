### YamlMime:TSType
name: PowerPoint.TableAddOptions
uid: powerpoint!PowerPoint.TableAddOptions:interface
package: powerpoint!
fullName: PowerPoint.TableAddOptions
summary: Represents the available options when adding a table.
remarks: >-
  \[ [API set: PowerPointApi
  1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
  \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


  // Specifies the width and height of a table.

  await PowerPoint.run(async (context) => {
    const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

    // Add a table, specifying the width and height.
    shapes.addTable(3, 4, {
      width: 600,
      height: 400
    });
    await context.sync();
  });

  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: columns
    uid: powerpoint!PowerPoint.TableAddOptions#columns:member
    package: powerpoint!
    fullName: columns
    summary: >-
      If provided, specifies properties for each column in the table. The array
      length must be equal to the number of columns in the table. Specify an
      empty object for columns that should use the default formatting.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the column widths and row heights of a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying column widths and row heights.
        shapes.addTable(3, 4, {
          columns: [{ columnWidth: 100 }, { columnWidth: 200 }, { columnWidth: 100 }, { columnWidth: 200 }],
          rows: [{ rowHeight: 60 }, { rowHeight: 120 }, { rowHeight: 180 }]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'columns?: PowerPoint.TableColumnProperties[];'
      return:
        type: <xref uid="powerpoint!PowerPoint.TableColumnProperties:interface" />[]
  - name: height
    uid: powerpoint!PowerPoint.TableAddOptions#height:member
    package: powerpoint!
    fullName: height
    summary: >-
      Specifies the height, in points, of the table. A default value is used
      when this parameter isn't provided. Throws an `InvalidArgument` exception
      when set with a negative value.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the width and height of a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying the width and height.
        shapes.addTable(3, 4, {
          width: 600,
          height: 400
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'height?: number | undefined;'
      return:
        type: number | undefined
  - name: left
    uid: powerpoint!PowerPoint.TableAddOptions#left:member
    package: powerpoint!
    fullName: left
    summary: >-
      Specifies the distance, in points, from the left side of the table to the
      left side of the slide. The table is centered horizontally when this
      parameter isn't provided.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'left?: number | undefined;'
      return:
        type: number | undefined
  - name: mergedAreas
    uid: powerpoint!PowerPoint.TableAddOptions#mergedAreas:member
    package: powerpoint!
    fullName: mergedAreas
    summary: >-
      If specified, represents an rectangular area where multiple cells appear
      as a single cell.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the merge areas of a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying one 2x2 merged area.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "", "HHHH"],
            ["1", "", "", "1234"]
          ],
          mergedAreas: [{ rowIndex: 1, columnIndex: 1, rowCount: 2, columnCount: 2 }]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'mergedAreas?: PowerPoint.TableMergedAreaProperties[];'
      return:
        type: >-
          <xref uid="powerpoint!PowerPoint.TableMergedAreaProperties:interface"
          />[]
  - name: rows
    uid: powerpoint!PowerPoint.TableAddOptions#rows:member
    package: powerpoint!
    fullName: rows
    summary: >-
      If provided, specifies properties for each row in the table. The array
      length must be equal to the number of rows in the table. Specify an empty
      object for rows that should use the default formatting.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the column widths and row heights of a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying column widths and row heights.
        shapes.addTable(3, 4, {
          columns: [{ columnWidth: 100 }, { columnWidth: 200 }, { columnWidth: 100 }, { columnWidth: 200 }],
          rows: [{ rowHeight: 60 }, { rowHeight: 120 }, { rowHeight: 180 }]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rows?: PowerPoint.TableRowProperties[];'
      return:
        type: <xref uid="powerpoint!PowerPoint.TableRowProperties:interface" />[]
  - name: specificCellProperties
    uid: powerpoint!PowerPoint.TableAddOptions#specificCellProperties:member
    package: powerpoint!
    fullName: specificCellProperties
    summary: >-
      If provided, specifies properties for each cell in the table.


      This should be a 2D array with the same number of rows and columns as the
      table. If a cell doesn't require specific formatting, specify an empty
      object for that cell. Only the top left cell of a merged are can have
      properties specified, which will be applied to the entire merged area. For
      the other cells in the merged area, an empty object should be provided.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the font formatting and fill colors of the cells in a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying font formatting and fill colors.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          specificCellProperties: [
            [
              { fill: { color: "red" }, font: { color: "yellow", name: "Calibri" } },
              { fill: { color: "#0048ba" }, font: { color: "yellow", name: "Coolvetica" } },
              { fill: { color: "red" }, font: { color: "yellow", italic: true } },
              { fill: { color: "red" }, font: { color: "#9966cc", strikethrough: true } }
            ],
            [
              { fill: { color: "#fbceb1" }, font: { color: "yellow", doubleStrikethrough: true } },
              { fill: { color: "red" }, font: { color: "yellow", subscript: true } },
              { fill: { color: "#0048ba" }, font: { color: "yellow", superscript: true } },
              { fill: { color: "red" }, font: { color: "yellow" } }
            ],
            [
              { fill: { color: "red" }, font: { color: "#b0bf1a" } },
              { fill: { color: "#9966cc" }, font: { color: "yellow" } },
              { fill: { color: "#b0bf1a" }, font: { color: "yellow" } },
              { fill: { color: "red" }, font: { color: "#fbceb1" } }
            ]
          ]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'specificCellProperties?: PowerPoint.TableCellProperties[][];'
      return:
        type: <xref uid="powerpoint!PowerPoint.TableCellProperties:interface" />[][]
  - name: style
    uid: powerpoint!PowerPoint.TableAddOptions#style:member
    package: powerpoint!
    fullName: style
    summary: Specifies value that represents the table style.
    remarks: >-
      \[ [API set: PowerPointApi
      1.9](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        style?: PowerPoint.TableStyle | "NoStyleNoGrid" | "ThemedStyle1Accent1"
        | "ThemedStyle1Accent2" | "ThemedStyle1Accent3" | "ThemedStyle1Accent4"
        | "ThemedStyle1Accent5" | "ThemedStyle1Accent6" | "NoStyleTableGrid" |
        "ThemedStyle2Accent1" | "ThemedStyle2Accent2" | "ThemedStyle2Accent3" |
        "ThemedStyle2Accent4" | "ThemedStyle2Accent5" | "ThemedStyle2Accent6" |
        "LightStyle1" | "LightStyle1Accent1" | "LightStyle1Accent2" |
        "LightStyle1Accent3" | "LightStyle1Accent4" | "LightStyle1Accent5" |
        "LightStyle1Accent6" | "LightStyle2" | "LightStyle2Accent1" |
        "LightStyle2Accent2" | "LightStyle2Accent3" | "LightStyle2Accent4" |
        "LightStyle2Accent5" | "LightStyle2Accent6" | "LightStyle3" |
        "LightStyle3Accent1" | "LightStyle3Accent2" | "LightStyle3Accent3" |
        "LightStyle3Accent4" | "LightStyle3Accent5" | "LightStyle3Accent6" |
        "MediumStyle1" | "MediumStyle1Accent1" | "MediumStyle1Accent2" |
        "MediumStyle1Accent3" | "MediumStyle1Accent4" | "MediumStyle1Accent5" |
        "MediumStyle1Accent6" | "MediumStyle2" | "MediumStyle2Accent1" |
        "MediumStyle2Accent2" | "MediumStyle2Accent3" | "MediumStyle2Accent4" |
        "MediumStyle2Accent5" | "MediumStyle2Accent6" | "MediumStyle3" |
        "MediumStyle3Accent1" | "MediumStyle3Accent2" | "MediumStyle3Accent3" |
        "MediumStyle3Accent4" | "MediumStyle3Accent5" | "MediumStyle3Accent6" |
        "MediumStyle4" | "MediumStyle4Accent1" | "MediumStyle4Accent2" |
        "MediumStyle4Accent3" | "MediumStyle4Accent4" | "MediumStyle4Accent5" |
        "MediumStyle4Accent6" | "DarkStyle1" | "DarkStyle1Accent1" |
        "DarkStyle1Accent2" | "DarkStyle1Accent3" | "DarkStyle1Accent4" |
        "DarkStyle1Accent5" | "DarkStyle1Accent6" | "DarkStyle2" |
        "DarkStyle2Accent1" | "DarkStyle2Accent2" | "DarkStyle2Accent3";
      return:
        type: >-
          <xref uid="powerpoint!PowerPoint.TableStyle:enum" /> | "NoStyleNoGrid"
          | "ThemedStyle1Accent1" | "ThemedStyle1Accent2" |
          "ThemedStyle1Accent3" | "ThemedStyle1Accent4" | "ThemedStyle1Accent5"
          | "ThemedStyle1Accent6" | "NoStyleTableGrid" | "ThemedStyle2Accent1" |
          "ThemedStyle2Accent2" | "ThemedStyle2Accent3" | "ThemedStyle2Accent4"
          | "ThemedStyle2Accent5" | "ThemedStyle2Accent6" | "LightStyle1" |
          "LightStyle1Accent1" | "LightStyle1Accent2" | "LightStyle1Accent3" |
          "LightStyle1Accent4" | "LightStyle1Accent5" | "LightStyle1Accent6" |
          "LightStyle2" | "LightStyle2Accent1" | "LightStyle2Accent2" |
          "LightStyle2Accent3" | "LightStyle2Accent4" | "LightStyle2Accent5" |
          "LightStyle2Accent6" | "LightStyle3" | "LightStyle3Accent1" |
          "LightStyle3Accent2" | "LightStyle3Accent3" | "LightStyle3Accent4" |
          "LightStyle3Accent5" | "LightStyle3Accent6" | "MediumStyle1" |
          "MediumStyle1Accent1" | "MediumStyle1Accent2" | "MediumStyle1Accent3"
          | "MediumStyle1Accent4" | "MediumStyle1Accent5" |
          "MediumStyle1Accent6" | "MediumStyle2" | "MediumStyle2Accent1" |
          "MediumStyle2Accent2" | "MediumStyle2Accent3" | "MediumStyle2Accent4"
          | "MediumStyle2Accent5" | "MediumStyle2Accent6" | "MediumStyle3" |
          "MediumStyle3Accent1" | "MediumStyle3Accent2" | "MediumStyle3Accent3"
          | "MediumStyle3Accent4" | "MediumStyle3Accent5" |
          "MediumStyle3Accent6" | "MediumStyle4" | "MediumStyle4Accent1" |
          "MediumStyle4Accent2" | "MediumStyle4Accent3" | "MediumStyle4Accent4"
          | "MediumStyle4Accent5" | "MediumStyle4Accent6" | "DarkStyle1" |
          "DarkStyle1Accent1" | "DarkStyle1Accent2" | "DarkStyle1Accent3" |
          "DarkStyle1Accent4" | "DarkStyle1Accent5" | "DarkStyle1Accent6" |
          "DarkStyle2" | "DarkStyle2Accent1" | "DarkStyle2Accent2" |
          "DarkStyle2Accent3"
  - name: top
    uid: powerpoint!PowerPoint.TableAddOptions#top:member
    package: powerpoint!
    fullName: top
    summary: >-
      Specifies the distance, in points, from the top edge of the table to the
      top edge of the slide. A default value is used when this parameter isn't
      provided.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'top?: number | undefined;'
      return:
        type: number | undefined
  - name: uniformCellProperties
    uid: powerpoint!PowerPoint.TableAddOptions#uniformCellProperties:member
    package: powerpoint!
    fullName: uniformCellProperties
    summary: >-
      Specifies the formatting which applies uniformly to all of the table
      cells.


      To apply specific formatting to individual cells, use
      `specificCellProperties`<!-- -->.


      If both uniformCellProperties and specificCellProperties are undefined,
      the default formatting will be used, and the default table style will be
      applied. The table will have the same appearance as when the user adds a
      table through the PowerPoint UI.


      To provide a plain appearance for the table, set this property to an empty
      object and don't specify `specificCellProperties`<!-- -->.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies a table's borders.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying border styles.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          uniformCellProperties: {
            borders: {
              left: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              right: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              top: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 },
              bottom: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 }
            }
          }
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'uniformCellProperties?: PowerPoint.TableCellProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.TableCellProperties:interface" />
  - name: values
    uid: powerpoint!PowerPoint.TableAddOptions#values:member
    package: powerpoint!
    fullName: values
    summary: >-
      If provided, specifies the values for the table.


      When the table contains areas of merged cells, only the top left cell of
      each merged area can have a non-empty string value. The other cells in the
      merged area must be an empty string.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies a table's values.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying cell values.
        const shape = shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'values?: string[][];'
      return:
        type: string[][]
  - name: width
    uid: powerpoint!PowerPoint.TableAddOptions#width:member
    package: powerpoint!
    fullName: width
    summary: >-
      Specifies the width, in points, of the table. A default value is used when
      this parameter isn't provided. Throws an `InvalidArgument` exception when
      set with a negative value.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the width and height of a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying the width and height.
        shapes.addTable(3, 4, {
          width: 600,
          height: 400
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'width?: number | undefined;'
      return:
        type: number | undefined
