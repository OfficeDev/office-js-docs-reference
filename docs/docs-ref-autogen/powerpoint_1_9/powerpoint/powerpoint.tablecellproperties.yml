### YamlMime:TSType
name: PowerPoint.TableCellProperties
uid: powerpoint!PowerPoint.TableCellProperties:interface
package: powerpoint!
fullName: PowerPoint.TableCellProperties
summary: Represents the table cell properties to update.
remarks: >-
  \[ [API set: PowerPointApi
  1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
  \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


  // Specifies the font formatting and fill colors of the cells in a table.

  await PowerPoint.run(async (context) => {
    const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

    // Add a table, specifying font formatting and fill colors.
    shapes.addTable(3, 4, {
      values: [
        ["A", "BB", "CCC", "DDDD"],
        ["E", "FF", "GGG", "HHHH"],
        ["1", "12", "123", "1234"]
      ],
      specificCellProperties: [
        [
          { fill: { color: "red" }, font: { color: "yellow", name: "Calibri" } },
          { fill: { color: "#0048ba" }, font: { color: "yellow", name: "Coolvetica" } },
          { fill: { color: "red" }, font: { color: "yellow", italic: true } },
          { fill: { color: "red" }, font: { color: "#9966cc", strikethrough: true } }
        ],
        [
          { fill: { color: "#fbceb1" }, font: { color: "yellow", doubleStrikethrough: true } },
          { fill: { color: "red" }, font: { color: "yellow", subscript: true } },
          { fill: { color: "#0048ba" }, font: { color: "yellow", superscript: true } },
          { fill: { color: "red" }, font: { color: "yellow" } }
        ],
        [
          { fill: { color: "red" }, font: { color: "#b0bf1a" } },
          { fill: { color: "#9966cc" }, font: { color: "yellow" } },
          { fill: { color: "#b0bf1a" }, font: { color: "yellow" } },
          { fill: { color: "red" }, font: { color: "#fbceb1" } }
        ]
      ]
    });
    await context.sync();
  });

  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: borders
    uid: powerpoint!PowerPoint.TableCellProperties#borders:member
    package: powerpoint!
    fullName: borders
    summary: Specifies the border formatting of the table cell.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies a table's borders.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying border styles.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          uniformCellProperties: {
            borders: {
              left: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              right: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              top: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 },
              bottom: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 }
            }
          }
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'borders?: PowerPoint.TableCellBorders;'
      return:
        type: <xref uid="powerpoint!PowerPoint.TableCellBorders:interface" />
  - name: fill
    uid: powerpoint!PowerPoint.TableCellProperties#fill:member
    package: powerpoint!
    fullName: fill
    summary: Specifies the fill formatting of the table cell.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the font formatting and fill colors of the cells in a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying font formatting and fill colors.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          specificCellProperties: [
            [
              { fill: { color: "red" }, font: { color: "yellow", name: "Calibri" } },
              { fill: { color: "#0048ba" }, font: { color: "yellow", name: "Coolvetica" } },
              { fill: { color: "red" }, font: { color: "yellow", italic: true } },
              { fill: { color: "red" }, font: { color: "#9966cc", strikethrough: true } }
            ],
            [
              { fill: { color: "#fbceb1" }, font: { color: "yellow", doubleStrikethrough: true } },
              { fill: { color: "red" }, font: { color: "yellow", subscript: true } },
              { fill: { color: "#0048ba" }, font: { color: "yellow", superscript: true } },
              { fill: { color: "red" }, font: { color: "yellow" } }
            ],
            [
              { fill: { color: "red" }, font: { color: "#b0bf1a" } },
              { fill: { color: "#9966cc" }, font: { color: "yellow" } },
              { fill: { color: "#b0bf1a" }, font: { color: "yellow" } },
              { fill: { color: "red" }, font: { color: "#fbceb1" } }
            ]
          ]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'fill?: PowerPoint.FillProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.FillProperties:interface" />
  - name: font
    uid: powerpoint!PowerPoint.TableCellProperties#font:member
    package: powerpoint!
    fullName: font
    summary: Specifies the font formatting of the table cell.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the font formatting and fill colors of the cells in a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying font formatting and fill colors.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          specificCellProperties: [
            [
              { fill: { color: "red" }, font: { color: "yellow", name: "Calibri" } },
              { fill: { color: "#0048ba" }, font: { color: "yellow", name: "Coolvetica" } },
              { fill: { color: "red" }, font: { color: "yellow", italic: true } },
              { fill: { color: "red" }, font: { color: "#9966cc", strikethrough: true } }
            ],
            [
              { fill: { color: "#fbceb1" }, font: { color: "yellow", doubleStrikethrough: true } },
              { fill: { color: "red" }, font: { color: "yellow", subscript: true } },
              { fill: { color: "#0048ba" }, font: { color: "yellow", superscript: true } },
              { fill: { color: "red" }, font: { color: "yellow" } }
            ],
            [
              { fill: { color: "red" }, font: { color: "#b0bf1a" } },
              { fill: { color: "#9966cc" }, font: { color: "yellow" } },
              { fill: { color: "#b0bf1a" }, font: { color: "yellow" } },
              { fill: { color: "red" }, font: { color: "#fbceb1" } }
            ]
          ]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'font?: PowerPoint.FontProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.FontProperties:interface" />
  - name: horizontalAlignment
    uid: powerpoint!PowerPoint.TableCellProperties#horizontalAlignment:member
    package: powerpoint!
    fullName: horizontalAlignment
    summary: Represents the horizontal alignment of the table cell.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the horizontal and vertical alignments of the cells in a
      table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying horizontal and vertical alignment.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          uniformCellProperties: {
            horizontalAlignment: PowerPoint.ParagraphHorizontalAlignment.justify,
            verticalAlignment: PowerPoint.TextVerticalAlignment.middle
          }
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        horizontalAlignment?: PowerPoint.ParagraphHorizontalAlignment | "Left" |
        "Center" | "Right" | "Justify" | "JustifyLow" | "Distributed" |
        "ThaiDistributed" | undefined;
      return:
        type: >-
          <xref uid="powerpoint!PowerPoint.ParagraphHorizontalAlignment:enum" />
          | "Left" | "Center" | "Right" | "Justify" | "JustifyLow" |
          "Distributed" | "ThaiDistributed" | undefined
  - name: indentLevel
    uid: powerpoint!PowerPoint.TableCellProperties#indentLevel:member
    package: powerpoint!
    fullName: indentLevel
    summary: Represents the indent level of the text in the table cell.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifying the indents for a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying the indent level for cells.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          specificCellProperties: [
            [{ indentLevel: 0 }, { indentLevel: 1 }, { indentLevel: 2 }, { indentLevel: 3 }],
            [{ indentLevel: 0 }, { indentLevel: 1 }, { indentLevel: 2 }, { indentLevel: 3 }],
            [{ indentLevel: 0 }, { indentLevel: 1 }, { indentLevel: 2 }, { indentLevel: 3 }]
          ]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'indentLevel?: number | undefined;'
      return:
        type: number | undefined
  - name: margins
    uid: powerpoint!PowerPoint.TableCellProperties#margins:member
    package: powerpoint!
    fullName: margins
    summary: Specifies the margin settings in the table cell.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'margins?: PowerPoint.TableCellMargins;'
      return:
        type: <xref uid="powerpoint!PowerPoint.TableCellMargins:interface" />
  - name: text
    uid: powerpoint!PowerPoint.TableCellProperties#text:member
    package: powerpoint!
    fullName: text
    summary: >-
      Specifies the text content of the table cell.


      If a portion of the text requires different formatting, use the `textRuns`
      property instead.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text?: string;'
      return:
        type: string
  - name: textRuns
    uid: powerpoint!PowerPoint.TableCellProperties#textRuns:member
    package: powerpoint!
    fullName: textRuns
    summary: >-
      Specifies the contents of the table cell as an array of
      [PowerPoint.TextRun](xref:powerpoint!PowerPoint.TextRun:interface)
      objects. Each `TextRun` object represents a sequence of one or more
      characters that share the same font attributes.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the text runs of the cells in a table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying text runs.
        shapes.addTable(3, 4, {
          specificCellProperties: [
            [
              { text: "Title text", font: { bold: true } },
              { text: "Title text", font: { bold: true } },
              { text: "Title text", font: { bold: true } },
              { text: "Title text", font: { bold: true } }
            ],
            [
              { text: "Bold text", font: { bold: true } },
              {
                textRuns: [
                  { text: "Text runs with " },
                  { text: "Underlined text", font: { underline: PowerPoint.ShapeFontUnderlineStyle.double } },
                  { text: " and plain text" }
                ]
              },
              { text: "Italicized text", font: { italic: true } },
              { text: "Plain text" }
            ],
            [
              { text: "Bold text", font: { bold: true } },
              { text: "Underlined text", font: { underline: PowerPoint.ShapeFontUnderlineStyle.dotted } },
              {
                font: { bold: true },
                textRuns: [
                  { text: "Text runs with " },
                  { text: "italicized text", font: { italic: true } },
                  { text: " and (inherited) bold text" }
                ]
              },
              { text: "Italicized text", font: { italic: true } }
            ]
          ]
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'textRuns?: PowerPoint.TextRun[];'
      return:
        type: <xref uid="powerpoint!PowerPoint.TextRun:interface" />[]
  - name: verticalAlignment
    uid: powerpoint!PowerPoint.TableCellProperties#verticalAlignment:member
    package: powerpoint!
    fullName: verticalAlignment
    summary: Represents the vertical alignment of the table cell.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies the horizontal and vertical alignments of the cells in a
      table.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying horizontal and vertical alignment.
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          uniformCellProperties: {
            horizontalAlignment: PowerPoint.ParagraphHorizontalAlignment.justify,
            verticalAlignment: PowerPoint.TextVerticalAlignment.middle
          }
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        verticalAlignment?: PowerPoint.TextVerticalAlignment | "Top" | "Middle"
        | "Bottom" | "TopCentered" | "MiddleCentered" | "BottomCentered" |
        undefined;
      return:
        type: >-
          <xref uid="powerpoint!PowerPoint.TextVerticalAlignment:enum" /> |
          "Top" | "Middle" | "Bottom" | "TopCentered" | "MiddleCentered" |
          "BottomCentered" | undefined
