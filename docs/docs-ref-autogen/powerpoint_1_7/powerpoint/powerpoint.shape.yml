### YamlMime:TSType
name: PowerPoint.Shape
uid: 'powerpoint!PowerPoint.Shape:class'
package: powerpoint!
fullName: PowerPoint.Shape
summary: Represents a single shape in the slide.
remarks: >-
  \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-shapes-by-type.yaml


  // Changes the transparency of every geometric shape in the slide.

  await PowerPoint.run(async (context) => {
    // Get the type of shape for every shape in the collection.
    const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(0).shapes;
    shapes.load("type");
    await context.sync();

    // Change the shape transparency to be halfway transparent.
    shapes.items.forEach((shape) => {
      if (shape.type === PowerPoint.ShapeType.geometricShape) {
        shape.fill.transparency = 0.5;
      }
    });
    await context.sync();
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'powerpoint!PowerPoint.Shape#context:member'
    package: powerpoint!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.RequestContext:class" />'
  - name: customXmlParts
    uid: 'powerpoint!PowerPoint.Shape#customXmlParts:member'
    package: powerpoint!
    fullName: customXmlParts
    summary: Returns a collection of custom XML parts in the shape.
    remarks: '\[ [API set: PowerPointApi 1.7](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly customXmlParts: PowerPoint.CustomXmlPartCollection;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.CustomXmlPartCollection:class" />'
  - name: fill
    uid: 'powerpoint!PowerPoint.Shape#fill:member'
    package: powerpoint!
    fullName: fill
    summary: Returns the fill formatting of this shape.
    remarks: >-
      \[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml


      // Changes the selected shapes fill color to red.

      await PowerPoint.run(async (context) => {
        const shapes: PowerPoint.ShapeScopedCollection = context.presentation.getSelectedShapes();
        const shapeCount = shapes.getCount();
        shapes.load("items");
        await context.sync();
        shapes.items.map((shape) => {
          shape.fill.setSolidColor("red");
        });
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly fill: PowerPoint.ShapeFill;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.ShapeFill:class" />'
  - name: height
    uid: 'powerpoint!PowerPoint.Shape#height:member'
    package: powerpoint!
    fullName: height
    summary: >-
      Specifies the height, in points, of the shape. Throws an `InvalidArgument` exception when set with a negative
      value.
    remarks: >-
      \[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml


      // Arranges the selected shapes in a line from left to right.

      await PowerPoint.run(async (context) => {
        const shapes: PowerPoint.ShapeScopedCollection = context.presentation.getSelectedShapes();
        const shapeCount = shapes.getCount();
        shapes.load("items");
        await context.sync();
        let maxHeight = 0;
        shapes.items.map((shape) => {
          shape.load("width,height");
        });
        await context.sync();
        shapes.items.map((shape) => {
          shape.left = currentLeft;
          shape.top = currentTop;
          currentLeft += shape.width;
          if (shape.height > maxHeight) maxHeight = shape.height;
        });
        await context.sync();
        currentLeft = 0;
        if (currentTop > slideHeight - 200) currentTop = 0;
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'height: number;'
      return:
        type: number
  - name: id
    uid: 'powerpoint!PowerPoint.Shape#id:member'
    package: powerpoint!
    fullName: id
    summary: Gets the unique ID of the shape.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: left
    uid: 'powerpoint!PowerPoint.Shape#left:member'
    package: powerpoint!
    fullName: left
    summary: 'The distance, in points, from the left side of the shape to the left side of the slide.'
    remarks: >-
      \[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml


      // Arranges the selected shapes in a line from left to right.

      await PowerPoint.run(async (context) => {
        const shapes: PowerPoint.ShapeScopedCollection = context.presentation.getSelectedShapes();
        const shapeCount = shapes.getCount();
        shapes.load("items");
        await context.sync();
        let maxHeight = 0;
        shapes.items.map((shape) => {
          shape.load("width,height");
        });
        await context.sync();
        shapes.items.map((shape) => {
          shape.left = currentLeft;
          shape.top = currentTop;
          currentLeft += shape.width;
          if (shape.height > maxHeight) maxHeight = shape.height;
        });
        await context.sync();
        currentLeft = 0;
        if (currentTop > slideHeight - 200) currentTop = 0;
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'left: number;'
      return:
        type: number
  - name: lineFormat
    uid: 'powerpoint!PowerPoint.Shape#lineFormat:member'
    package: powerpoint!
    fullName: lineFormat
    summary: Returns the line formatting of this shape.
    remarks: '\[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly lineFormat: PowerPoint.ShapeLineFormat;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.ShapeLineFormat:class" />'
  - name: name
    uid: 'powerpoint!PowerPoint.Shape#name:member'
    package: powerpoint!
    fullName: name
    summary: Specifies the name of this shape.
    remarks: '\[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: tags
    uid: 'powerpoint!PowerPoint.Shape#tags:member'
    package: powerpoint!
    fullName: tags
    summary: Returns a collection of tags in the shape.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly tags: PowerPoint.TagCollection;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.TagCollection:class" />'
  - name: textFrame
    uid: 'powerpoint!PowerPoint.Shape#textFrame:member'
    package: powerpoint!
    fullName: textFrame
    summary: Returns the text frame object of this shape.
    remarks: '\[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly textFrame: PowerPoint.TextFrame;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.TextFrame:class" />'
  - name: top
    uid: 'powerpoint!PowerPoint.Shape#top:member'
    package: powerpoint!
    fullName: top
    summary: 'The distance, in points, from the top edge of the shape to the top edge of the slide.'
    remarks: >-
      \[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml


      // Arranges the selected shapes in a line from left to right.

      await PowerPoint.run(async (context) => {
        const shapes: PowerPoint.ShapeScopedCollection = context.presentation.getSelectedShapes();
        const shapeCount = shapes.getCount();
        shapes.load("items");
        await context.sync();
        let maxHeight = 0;
        shapes.items.map((shape) => {
          shape.load("width,height");
        });
        await context.sync();
        shapes.items.map((shape) => {
          shape.left = currentLeft;
          shape.top = currentTop;
          currentLeft += shape.width;
          if (shape.height > maxHeight) maxHeight = shape.height;
        });
        await context.sync();
        currentLeft = 0;
        if (currentTop > slideHeight - 200) currentTop = 0;
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'top: number;'
      return:
        type: number
  - name: type
    uid: 'powerpoint!PowerPoint.Shape#type:member'
    package: powerpoint!
    fullName: type
    summary: 'Returns the type of this shape. See [PowerPoint.ShapeType](xref:powerpoint!PowerPoint.ShapeType:enum) for details.'
    remarks: >-
      \[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-shapes-by-type.yaml


      // Changes the transparency of every geometric shape in the slide.

      await PowerPoint.run(async (context) => {
        // Get the type of shape for every shape in the collection.
        const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(0).shapes;
        shapes.load("type");
        await context.sync();

        // Change the shape transparency to be halfway transparent.
        shapes.items.forEach((shape) => {
          if (shape.type === PowerPoint.ShapeType.geometricShape) {
            shape.fill.transparency = 0.5;
          }
        });
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly type: PowerPoint.ShapeType | "Unsupported" | "Image" | "GeometricShape" | "Group" | "Line" | "Table" |
        "Callout" | "Chart" | "ContentApp" | "Diagram" | "Freeform" | "Graphic" | "Ink" | "Media" | "Model3D" | "Ole" |
        "Placeholder" | "SmartArt" | "TextBox";
      return:
        type: >-
          <xref uid="powerpoint!PowerPoint.ShapeType:enum" /> | "Unsupported" | "Image" | "GeometricShape" | "Group" |
          "Line" | "Table" | "Callout" | "Chart" | "ContentApp" | "Diagram" | "Freeform" | "Graphic" | "Ink" | "Media" |
          "Model3D" | "Ole" | "Placeholder" | "SmartArt" | "TextBox"
  - name: width
    uid: 'powerpoint!PowerPoint.Shape#width:member'
    package: powerpoint!
    fullName: width
    summary: >-
      Specifies the width, in points, of the shape. Throws an `InvalidArgument` exception when set with a negative
      value.
    remarks: >-
      \[ [API set: PowerPointApi 1.4](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml


      // Arranges the selected shapes in a line from left to right.

      await PowerPoint.run(async (context) => {
        const shapes: PowerPoint.ShapeScopedCollection = context.presentation.getSelectedShapes();
        const shapeCount = shapes.getCount();
        shapes.load("items");
        await context.sync();
        let maxHeight = 0;
        shapes.items.map((shape) => {
          shape.load("width,height");
        });
        await context.sync();
        shapes.items.map((shape) => {
          shape.left = currentLeft;
          shape.top = currentTop;
          currentLeft += shape.width;
          if (shape.height > maxHeight) maxHeight = shape.height;
        });
        await context.sync();
        currentLeft = 0;
        if (currentTop > slideHeight - 200) currentTop = 0;
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'width: number;'
      return:
        type: number
methods:
  - name: delete()
    uid: 'powerpoint!PowerPoint.Shape#delete:member(1)'
    package: powerpoint!
    fullName: delete()
    summary: Deletes the shape from the shape collection. Does nothing if the shape does not exist.
    remarks: >-
      \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/shapes.yaml


      // This function gets the collection of shapes on the first slide,

      // and then iterates through them, deleting each one.

      await PowerPoint.run(async (context) => {
        const slide: PowerPoint.Slide = context.presentation.slides.getItemAt(0);
        const shapes: PowerPoint.ShapeCollection = slide.shapes;

        // Load all the shapes in the collection without loading their properties.
        shapes.load("items/$none");

        await context.sync();

        shapes.items.forEach((shape) => shape.delete());

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getParentSlide()
    uid: 'powerpoint!PowerPoint.Shape#getParentSlide:member(1)'
    package: powerpoint!
    fullName: getParentSlide()
    summary: >-
      Returns the parent [PowerPoint.Slide](xref:powerpoint!PowerPoint.Slide:class) object that holds this `Shape`<!--
      -->. Throws an exception if this shape does not belong to a `Slide`<!-- -->.
    remarks: '\[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getParentSlide(): PowerPoint.Slide;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Slide:class" />'
        description: ''
  - name: getParentSlideLayout()
    uid: 'powerpoint!PowerPoint.Shape#getParentSlideLayout:member(1)'
    package: powerpoint!
    fullName: getParentSlideLayout()
    summary: >-
      Returns the parent [PowerPoint.SlideLayout](xref:powerpoint!PowerPoint.SlideLayout:class) object that holds this
      `Shape`<!-- -->. Throws an exception if this shape does not belong to a `SlideLayout`<!-- -->.
    remarks: '\[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getParentSlideLayout(): PowerPoint.SlideLayout;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayout:class" />'
        description: ''
  - name: getParentSlideLayoutOrNullObject()
    uid: 'powerpoint!PowerPoint.Shape#getParentSlideLayoutOrNullObject:member(1)'
    package: powerpoint!
    fullName: getParentSlideLayoutOrNullObject()
    summary: >-
      Returns the parent [PowerPoint.SlideLayout](xref:powerpoint!PowerPoint.SlideLayout:class) object that holds this
      `Shape`<!-- -->. If this shape does not belong to a `SlideLayout`<!-- -->, an object with an `isNullObject`
      property set to `true` is returned.
    remarks: '\[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getParentSlideLayoutOrNullObject(): PowerPoint.SlideLayout;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayout:class" />'
        description: ''
  - name: getParentSlideMaster()
    uid: 'powerpoint!PowerPoint.Shape#getParentSlideMaster:member(1)'
    package: powerpoint!
    fullName: getParentSlideMaster()
    summary: >-
      Returns the parent [PowerPoint.SlideMaster](xref:powerpoint!PowerPoint.SlideMaster:class) object that holds this
      `Shape`<!-- -->. Throws an exception if this shape does not belong to a `SlideMaster`<!-- -->.
    remarks: '\[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getParentSlideMaster(): PowerPoint.SlideMaster;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideMaster:class" />'
        description: ''
  - name: getParentSlideMasterOrNullObject()
    uid: 'powerpoint!PowerPoint.Shape#getParentSlideMasterOrNullObject:member(1)'
    package: powerpoint!
    fullName: getParentSlideMasterOrNullObject()
    summary: >-
      Returns the parent [PowerPoint.SlideMaster](xref:powerpoint!PowerPoint.SlideMaster:class) object that holds this
      `Shape`<!-- -->. If this shape does not belong to a `SlideMaster`<!-- -->, an object with an `isNullObject`
      property set to `true` is returned.
    remarks: '\[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getParentSlideMasterOrNullObject(): PowerPoint.SlideMaster;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideMaster:class" />'
        description: ''
  - name: getParentSlideOrNullObject()
    uid: 'powerpoint!PowerPoint.Shape#getParentSlideOrNullObject:member(1)'
    package: powerpoint!
    fullName: getParentSlideOrNullObject()
    summary: >-
      Returns the parent [PowerPoint.Slide](xref:powerpoint!PowerPoint.Slide:class) object that holds this `Shape`<!--
      -->. If this shape does not belong to a `Slide`<!-- -->, an object with an `isNullObject` property set to `true`
      is returned.
    remarks: '\[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getParentSlideOrNullObject(): PowerPoint.Slide;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Slide:class" />'
        description: ''
  - name: load(options)
    uid: 'powerpoint!PowerPoint.Shape#load:member(1)'
    package: powerpoint!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: PowerPoint.Interfaces.ShapeLoadOptions): PowerPoint.Shape;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="powerpoint!PowerPoint.Interfaces.ShapeLoadOptions:interface" />'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Shape:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'powerpoint!PowerPoint.Shape#load:member(2)'
    package: powerpoint!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.Shape;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Shape:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'powerpoint!PowerPoint.Shape#load:member(3)'
    package: powerpoint!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): PowerPoint.Shape;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="powerpoint!PowerPoint.Shape:class" />'
        description: ''
  - name: toJSON()
    uid: 'powerpoint!PowerPoint.Shape#toJSON:member(1)'
    package: powerpoint!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `PowerPoint.Shape` object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `PowerPoint.Interfaces.ShapeData`<!-- -->) that contains shallow copies of any
      loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.ShapeData;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Interfaces.ShapeData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
