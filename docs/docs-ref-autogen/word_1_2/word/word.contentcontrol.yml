### YamlMime:TSType
name: Word.ContentControl
uid: 'word!Word.ContentControl:class'
package: word!
fullName: Word.ContentControl
summary: >-
  Represents a content control. Content controls are bounded and potentially
  labeled regions in a document that serve as containers for specific types of
  content. Individual content controls may contain contents such as images,
  tables, or paragraphs of formatted text. Currently, only rich text content
  controls are supported.


  \[ [API set: WordApi
  1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: appearance
    uid: 'word!Word.ContentControl#appearance:member'
    package: word!
    fullName: appearance
    summary: >-
      Gets or sets the appearance of the content control. The value can be
      'BoundingBox', 'Tags', or 'Hidden'.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" |
        "Hidden";
      return:
        type: >-
          <xref uid="word!Word.ContentControlAppearance:enum" /> | "BoundingBox"
          | "Tags" | "Hidden"
  - name: cannotDelete
    uid: 'word!Word.ContentControl#cannotDelete:member'
    package: word!
    fullName: cannotDelete
    summary: >-
      Gets or sets a value that indicates whether the user can delete the
      content control. Mutually exclusive with removeWhenEdited.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cannotDelete: boolean;'
      return:
        type: boolean
  - name: cannotEdit
    uid: 'word!Word.ContentControl#cannotEdit:member'
    package: word!
    fullName: cannotEdit
    summary: >-
      Gets or sets a value that indicates whether the user can edit the contents
      of the content control.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cannotEdit: boolean;'
      return:
        type: boolean
  - name: color
    uid: 'word!Word.ContentControl#color:member'
    package: word!
    fullName: color
    summary: >-
      Gets or sets the color of the content control. Color is specified in
      '\#RRGGBB' format or by using the color name.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'color: string;'
      return:
        type: string
  - name: contentControls
    uid: 'word!Word.ContentControl#contentControls:member'
    package: word!
    fullName: contentControls
    summary: >-
      Gets the collection of content control objects in the content control.
      Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type: '<xref uid="word!Word.ContentControlCollection:class" />'
  - name: context
    uid: 'word!Word.ContentControl#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: font
    uid: 'word!Word.ContentControl#font:member'
    package: word!
    fullName: font
    summary: >-
      Gets the text format of the content control. Use this to get and set font
      name, size, color, and other properties. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type: '<xref uid="word!Word.Font:class" />'
  - name: id
    uid: 'word!Word.ContentControl#id:member'
    package: word!
    fullName: id
    summary: >-
      Gets an integer that represents the content control identifier. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: number;'
      return:
        type: number
  - name: inlinePictures
    uid: 'word!Word.ContentControl#inlinePictures:member'
    package: word!
    fullName: inlinePictures
    summary: >-
      Gets the collection of inlinePicture objects in the content control. The
      collection does not include floating images. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type: '<xref uid="word!Word.InlinePictureCollection:class" />'
  - name: paragraphs
    uid: 'word!Word.ContentControl#paragraphs:member'
    package: word!
    fullName: paragraphs
    summary: >-
      Get the collection of paragraph objects in the content control. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
  - name: parentContentControl
    uid: 'word!Word.ContentControl#parentContentControl:member'
    package: word!
    fullName: parentContentControl
    summary: >-
      Gets the content control that contains the content control. Throws an
      error if there isn't a parent content control. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
  - name: placeholderText
    uid: 'word!Word.ContentControl#placeholderText:member'
    package: word!
    fullName: placeholderText
    summary: >-
      Gets or sets the placeholder text of the content control. Dimmed text will
      be displayed when the content control is empty.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'placeholderText: string;'
      return:
        type: string
  - name: removeWhenEdited
    uid: 'word!Word.ContentControl#removeWhenEdited:member'
    package: word!
    fullName: removeWhenEdited
    summary: >-
      Gets or sets a value that indicates whether the content control is removed
      after it is edited. Mutually exclusive with cannotDelete.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'removeWhenEdited: boolean;'
      return:
        type: boolean
  - name: style
    uid: 'word!Word.ContentControl#style:member'
    package: word!
    fullName: style
    summary: >-
      Gets or sets the style name for the content control. Use this property for
      custom styles and localized style names. To use the built-in styles that
      are portable between locales, see the "styleBuiltIn" property.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: string;'
      return:
        type: string
  - name: tag
    uid: 'word!Word.ContentControl#tag:member'
    package: word!
    fullName: tag
    summary: >-
      Gets or sets a tag to identify a content control.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tag: string;'
      return:
        type: string
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/10-content-controls/insert-and-change-content-controls.yaml

          // Traverses each paragraph of the document and wraps a content
          control on each with either a even or odd tags.

          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("$none"); // Don't need any properties; just wrap each paragraph with a content control.

            await context.sync();

            for (let i = 0; i < paragraphs.items.length; i++) {
              let contentControl = paragraphs.items[i].insertContentControl();
              // For even, tag "even".
              if (i % 2 === 0) {
                contentControl.tag = "even";
              } else {
                contentControl.tag = "odd";
              }
            }
            console.log("Content controls inserted: " + paragraphs.items.length);

            await context.sync();
          });

          ```
  - name: text
    uid: 'word!Word.ContentControl#text:member'
    package: word!
    fullName: text
    summary: >-
      Gets the text of the content control. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly text: string;'
      return:
        type: string
  - name: title
    uid: 'word!Word.ContentControl#title:member'
    package: word!
    fullName: title
    summary: >-
      Gets or sets the title for a content control.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'title: string;'
      return:
        type: string
  - name: type
    uid: 'word!Word.ContentControl#type:member'
    package: word!
    fullName: type
    summary: >-
      Gets the content control type. Only rich text content controls are
      supported currently. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly type: Word.ContentControlType | "Unknown" | "RichTextInline" |
        "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" |
        "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" |
        "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" |
        "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";
      return:
        type: >-
          <xref uid="word!Word.ContentControlType:enum" /> | "Unknown" |
          "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" |
          "RichTextTableRow" | "RichTextTable" | "PlainTextInline" |
          "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox"
          | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" |
          "RichText" | "PlainText"
methods:
  - name: clear()
    uid: 'word!Word.ContentControl#clear:member(1)'
    package: word!
    fullName: clear()
    summary: >-
      Clears the contents of the content control. The user can perform the undo
      operation on the cleared content.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the content controls collection.
              contentControls.load('text');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  
                  if (contentControls.items.length === 0) {
                      console.log("There isn't a content control in this document.");
                  } else {
                      
                      // Queue a command to clear the contents of the first content control.
                      contentControls.items[0].clear();
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync().then(function () {
                          console.log('Content control cleared of contents.');
                      });      
                  }
                      
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: delete(keepContent)
    uid: 'word!Word.ContentControl#delete:member(1)'
    package: word!
    fullName: delete(keepContent)
    summary: >-
      Deletes the content control and its content. If keepContent is set to
      true, the content is not deleted.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(keepContent: boolean): void;'
      parameters:
        - id: keepContent
          description: >-
            Required. Indicates whether the content should be deleted with the
            content control. If keepContent is set to true, the content is not
            deleted.
          type: boolean
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the content controls collection.
              contentControls.load('text');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  
                  if (contentControls.items.length === 0) {
                      console.log("There isn't a content control in this document.");
                  } else {
                      
                      // Queue a command to delete the first content control. The
                      // contents will remain in the document.
                      contentControls.items[0].delete(true);
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync().then(function () {
                          console.log('Content control cleared of contents.');
                      });      
                  }
                      
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getHtml()
    uid: 'word!Word.ContentControl#getHtml:member(1)'
    package: word!
    fullName: getHtml()
    summary: >-
      Gets an HTML representation of the content control object. When rendered
      in a web page or HTML viewer, the formatting will be a close, but not
      exact, match for of the formatting of the document. This method does not
      return the exact same HTML for the same document on different platforms
      (Windows, Mac, Word for the web, etc.). If you need exact fidelity, or
      consistency across platforms, use `ContentControl.getOoxml()` and convert
      the returned XML to HTML.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection that contains a specific tag.
              var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');
              
              // Queue a command to load the tag property for all of content controls. 
              context.load(contentControlsWithTag, 'tag');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControlsWithTag.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to get the HTML contents of the first content control.
                      var html = contentControlsWithTag.items[0].getHtml();
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Content control HTML: ' + html.value);
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getOoxml()
    uid: 'word!Word.ContentControl#getOoxml:member(1)'
    package: word!
    fullName: getOoxml()
    summary: >-
      Gets the Office Open XML (OOXML) representation of the content control
      object.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to get the OOXML contents of the first content control.
                      var ooxml = contentControls.items[0].getOoxml();
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Content control OOXML: ' + ooxml.value);
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertBreak(breakType, insertLocation)'
    uid: 'word!Word.ContentControl#insertBreak:member(1)'
    package: word!
    fullName: 'insertBreak(breakType, insertLocation)'
    summary: >-
      Inserts a break at the specified location in the main document. This
      method cannot be used with 'RichTextTable', 'RichTextTableRow' and
      'RichTextTableCell' content controls.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertBreak(breakType: Word.BreakType, insertLocation:
        Word.InsertLocation): void;
      parameters:
        - id: breakType
          description: Required. Type of break.
          type: '<xref uid="word!Word.BreakType:enum" />'
        - id: insertLocation
          description: 'Required. The value can be ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: void
        description: ''
  - name: 'insertBreak(breakTypeString, insertLocation)'
    uid: 'word!Word.ContentControl#insertBreak:member(2)'
    package: word!
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    summary: >-
      Inserts a break at the specified location in the main document. This
      method cannot be used with 'RichTextTable', 'RichTextTableRow' and
      'RichTextTableCell' content controls.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" |
        "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line",
        insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;
      parameters:
        - id: breakTypeString
          description: Required. Type of break.
          type: >-
            "Page" | "Next" | "SectionNext" | "SectionContinuous" |
            "SectionEven" | "SectionOdd" | "Line"
        - id: insertLocation
          description: 'Required. The value can be ''Start'', ''End'', ''Before'', or ''After''.'
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of content controls. 
              context.load(contentControls, 'id');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion. We now will have 
              // access to the content control collection.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to insert a page break after the first content control. 
                      contentControls.items[0].insertBreak('page', "After");
                      
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion. 
                      return context.sync()
                          .then(function () {
                              console.log('Inserted a page break after the first content control.');    
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertFileFromBase64(base64File, insertLocation)'
    uid: 'word!Word.ContentControl#insertFileFromBase64:member(1)'
    package: word!
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    summary: >-
      Inserts a document into the content control at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocation:
        Word.InsertLocation): Word.Range;
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type: string
        - id: insertLocation
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertFileFromBase64(base64File, insertLocationString)'
    uid: 'word!Word.ContentControl#insertFileFromBase64:member(2)'
    package: word!
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    summary: >-
      Inserts a document into the content control at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocationString: "Before"
        | "After" | "Start" | "End" | "Replace"): Word.Range;
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type: string
        - id: insertLocationString
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertHtml(html, insertLocation)'
    uid: 'word!Word.ContentControl#insertHtml:member(1)'
    package: word!
    fullName: 'insertHtml(html, insertLocation)'
    summary: >-
      Inserts HTML into the content control at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtml(html: string, insertLocation: Word.InsertLocation):
        Word.Range;
      parameters:
        - id: html
          description: Required. The HTML to be inserted in to the content control.
          type: string
        - id: insertLocation
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertHtml(html, insertLocationString)'
    uid: 'word!Word.ContentControl#insertHtml:member(2)'
    package: word!
    fullName: 'insertHtml(html, insertLocationString)'
    summary: >-
      Inserts HTML into the content control at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtml(html: string, insertLocationString: "Before" | "After" |
        "Start" | "End" | "Replace"): Word.Range;
      parameters:
        - id: html
          description: Required. The HTML to be inserted in to the content control.
          type: string
        - id: insertLocationString
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to put HTML into the contents of the first content control.
                      contentControls.items[0].insertHtml(
                          '<strong>HTML content inserted into the content control.</strong>',
                          'Start');
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Inserted HTML in the first content control.');
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    uid: 'word!Word.ContentControl#insertInlinePictureFromBase64:member(1)'
    package: word!
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    summary: >-
      Inserts an inline picture into the content control at the specified
      location.


      \[ [API set: WordApi
      1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string,
        insertLocation: Word.InsertLocation): Word.InlinePicture;
      parameters:
        - id: base64EncodedImage
          description: >-
            Required. The base64 encoded image to be inserted in the content
            control.
          type: string
        - id: insertLocation
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.InlinePicture:class" />'
        description: ''
  - name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    uid: 'word!Word.ContentControl#insertInlinePictureFromBase64:member(2)'
    package: word!
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    summary: >-
      Inserts an inline picture into the content control at the specified
      location.


      \[ [API set: WordApi
      1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string,
        insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"):
        Word.InlinePicture;
      parameters:
        - id: base64EncodedImage
          description: >-
            Required. The base64 encoded image to be inserted in the content
            control.
          type: string
        - id: insertLocationString
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.InlinePicture:class" />'
        description: ''
  - name: 'insertOoxml(ooxml, insertLocation)'
    uid: 'word!Word.ContentControl#insertOoxml:member(1)'
    package: word!
    fullName: 'insertOoxml(ooxml, insertLocation)'
    summary: >-
      Inserts OOXML into the content control at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation):
        Word.Range;
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted in to the content control.
          type: string
        - id: insertLocation
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertOoxml(ooxml, insertLocationString)'
    uid: 'word!Word.ContentControl#insertOoxml:member(2)'
    package: word!
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    summary: >-
      Inserts OOXML into the content control at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertOoxml(ooxml: string, insertLocationString: "Before" | "After" |
        "Start" | "End" | "Replace"): Word.Range;
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted in to the content control.
          type: string
        - id: insertLocationString
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: >-


          #### Examples


          ```javascript

          // Run a batch operation against the Word object model.

          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to put OOXML into the contents of the first content control.
                      contentControls.items[0].insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", "End");
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Inserted OOXML in the first content control.');
                      });
                  }
              });  
          })

          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });


          // Read "Create better add-ins for Word with Office Open XML" for
          guidance on working with OOXML.

          //
          https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml

          ```
  - name: 'insertParagraph(paragraphText, insertLocation)'
    uid: 'word!Word.ContentControl#insertParagraph:member(1)'
    package: word!
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    summary: >-
      Inserts a paragraph at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertParagraph(paragraphText: string, insertLocation:
        Word.InsertLocation): Word.Paragraph;
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type: string
        - id: insertLocation
          description: >-
            Required. The value can be 'Start', 'End', 'Before', or 'After'.
            'Before' and 'After' cannot be used with 'RichTextTable',
            'RichTextTableRow' and 'RichTextTableCell' content controls.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: 'insertParagraph(paragraphText, insertLocationString)'
    uid: 'word!Word.ContentControl#insertParagraph:member(2)'
    package: word!
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    summary: >-
      Inserts a paragraph at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertParagraph(paragraphText: string, insertLocationString: "Before" |
        "After" | "Start" | "End" | "Replace"): Word.Paragraph;
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type: string
        - id: insertLocationString
          description: >-
            Required. The value can be 'Start', 'End', 'Before', or 'After'.
            'Before' and 'After' cannot be used with 'RichTextTable',
            'RichTextTableRow' and 'RichTextTableCell' content controls.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to insert a paragraph after the first content control. 
                      contentControls.items[0].insertParagraph('Text of the inserted paragraph.', 'After');
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Inserted a paragraph after the first content control.');
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertText(text, insertLocation)'
    uid: 'word!Word.ContentControl#insertText:member(1)'
    package: word!
    fullName: 'insertText(text, insertLocation)'
    summary: >-
      Inserts text into the content control at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertText(text: string, insertLocation: Word.InsertLocation):
        Word.Range;
      parameters:
        - id: text
          description: Required. The text to be inserted in to the content control.
          type: string
        - id: insertLocation
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertText(text, insertLocationString)'
    uid: 'word!Word.ContentControl#insertText:member(2)'
    package: word!
    fullName: 'insertText(text, insertLocationString)'
    summary: >-
      Inserts text into the content control at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertText(text: string, insertLocationString: "Before" | "After" |
        "Start" | "End" | "Replace"): Word.Range;
      parameters:
        - id: text
          description: Required. The text to be inserted in to the content control.
          type: string
        - id: insertLocationString
          description: >-
            Required. The value can be 'Replace', 'Start', or 'End'. 'Replace'
            cannot be used with 'RichTextTable' and 'RichTextTableRow' content
            controls.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: >-


          #### Examples


          ```javascript

          // Run a batch operation against the Word object model.

          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to replace text in the first content control. 
                      contentControls.items[0].insertText('Replaced text in the first content control.', 'Replace');
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Replaced text in the first content control.');
                      });
                  }
              });  
          })

          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });


          // The Silly stories add-in sample shows how to use the insertText
          method.

          // https://aka.ms/sillystorywordaddin

          ```
  - name: load(options)
    uid: 'word!Word.ContentControl#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Word.Interfaces.ContentControlLoadOptions):
        Word.ContentControl;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="word!Word.Interfaces.ContentControlLoadOptions:interface"
            />
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: |-


          #### Examples

          ```javascript
          // Load all of the content control properties
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to load the properties on the first content control. 
                      contentControls.items[0].load(  'appearance,' +
                                                      'cannotDelete,' +
                                                      'cannotEdit,' +
                                                      'id,' +
                                                      'placeHolderText,' +
                                                      'removeWhenEdited,' +
                                                      'title,' +
                                                      'text,' +
                                                      'type,' +
                                                      'style,' +
                                                      'tag,' +
                                                      'font/size,' +
                                                      'font/name,' +
                                                      'font/color');             
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Property values of the first content control:' + 
                                  '   ----- appearance: ' + contentControls.items[0].appearance + 
                                  '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +
                                  '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +
                                  '   ----- color: ' + contentControls.items[0].color +
                                  '   ----- id: ' + contentControls.items[0].id +
                                  '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +
                                  '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +
                                  '   ----- title: ' + contentControls.items[0].title +
                                  '   ----- text: ' + contentControls.items[0].text +
                                  '   ----- type: ' + contentControls.items[0].type +
                                  '   ----- style: ' + contentControls.items[0].style +
                                  '   ----- tag: ' + contentControls.items[0].tag +
                                  '   ----- font size: ' + contentControls.items[0].font.size +
                                  '   ----- font name: ' + contentControls.items[0].font.name +
                                  '   ----- font color: ' + contentControls.items[0].font.color);
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(propertyNames)
    uid: 'word!Word.ContentControl#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.ContentControl;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.ContentControl#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.ContentControl;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: ''
  - name: 'search(searchText, searchOptions)'
    uid: 'word!Word.ContentControl#search:member(1)'
    package: word!
    fullName: 'search(searchText, searchOptions)'
    summary: >-
      Performs a search with the specified SearchOptions on the scope of the
      content control object. The search results are a collection of range
      objects.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      parameters:
        - id: searchText
          description: Required. The search text.
          type: string
        - id: searchOptions
          description: Optional. Options for the search.
          type: |-
            <xref uid="word!Word.SearchOptions:class" /> | {
                        ignorePunct?: boolean;
                        ignoreSpace?: boolean;
                        matchCase?: boolean;
                        matchPrefix?: boolean;
                        matchSuffix?: boolean;
                        matchWholeWord?: boolean;
                        matchWildcards?: boolean;
                    }
      return:
        type: '<xref uid="word!Word.RangeCollection:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the content controls collection.
              var contentControls = context.document.contentControls;
              
              // Queue a command to load the id property for all of the content controls. 
              context.load(contentControls, 'id');
               
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControls.items.length === 0) {
                      console.log('No content control found.');
                  }
                  else {
                      // Queue a command to select the first content control.
                      contentControls.items[0].select();
                  
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync()
                          .then(function () {
                              console.log('Selected the first content control.');
                      });
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: select(selectionMode)
    uid: 'word!Word.ContentControl#select:member(1)'
    package: word!
    fullName: select(selectionMode)
    summary: >-
      Selects the content control. This causes Word to scroll to the selection.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      parameters:
        - id: selectionMode
          description: >-
            Optional. The selection mode can be 'Select', 'Start', or 'End'.
            'Select' is the default.
          type: '<xref uid="word!Word.SelectionMode:enum" />'
      return:
        type: void
        description: ''
  - name: select(selectionModeString)
    uid: 'word!Word.ContentControl#select:member(2)'
    package: word!
    fullName: select(selectionModeString)
    summary: >-
      Selects the content control. This causes Word to scroll to the selection.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      parameters:
        - id: selectionModeString
          description: >-
            Optional. The selection mode can be 'Select', 'Start', or 'End'.
            'Select' is the default.
          type: '"Select" | "Start" | "End"'
      return:
        type: void
        description: ''
  - name: 'set(properties, options)'
    uid: 'word!Word.ContentControl#set:member(1)'
    package: word!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: >-
      This method has the following additional signature:


      `set(properties: Word.ContentControl): void`


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/10-content-controls/insert-and-change-content-controls.yaml

      // Adds title and colors to odd and even content controls and changes
      their appearance.

      await Word.run(async (context) => {
        // Gets the complete sentence (as range) associated with the insertion point.
        let evenContentControls = context.document.contentControls.getByTag("even");
        let oddContentControls = context.document.contentControls.getByTag("odd");
        evenContentControls.load("length");
        oddContentControls.load("length");

        await context.sync();

        for (let i = 0; i < evenContentControls.items.length; i++) {
          // Change a few properties and append a paragraph
          evenContentControls.items[i].set({
            color: "red",
            title: "Odd ContentControl #" + (i + 1),
            appearance: "Tags"
          });
          evenContentControls.items[i].insertParagraph("This is an odd content control", "End");
        }

        for (let j = 0; j < oddContentControls.items.length; j++) {
          // Change a few properties and append a paragraph
          oddContentControls.items[j].set({
            color: "green",
            title: "Even ContentControl #" + (j + 1),
            appearance: "Tags"
          });
          oddContentControls.items[j].insertHtml("This is an <b>even</b> content control", "End");
        }

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.ContentControlUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: >-
            <xref uid="word!Word.Interfaces.ContentControlUpdateData:interface"
            />
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'word!Word.ContentControl#set:member(2)'
    package: word!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.ContentControl): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="word!Word.ContentControl:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'word!Word.ContentControl#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Word.ContentControl
      object is an API object, the `toJSON` method returns a plain JavaScript
      object (typed as `Word.Interfaces.ContentControlData`<!-- -->) that
      contains shallow copies of any loaded child properties from the original
      object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.ContentControlData;'
      return:
        type: '<xref uid="word!Word.Interfaces.ContentControlData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.ContentControl#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this
      object across `.sync` calls and outside the sequential execution of a
      ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.ContentControl#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked
      objects slows down the host application, so please remember to free any
      objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
