### YamlMime:TSType
name: Word.Range
uid: 'word!Word.Range:class'
package: word!
fullName: Word.Range
summary: Represents a contiguous area in a document.
remarks: >-
  \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml


  // Gets the range of the first comment in the selected content.

  await Word.run(async (context) => {
    const comment: Word.Comment = context.document.getSelection().getComments().getFirstOrNullObject();
    comment.load("contentRange");
    const range: Word.Range = comment.getRange();
    range.load("text");
    await context.sync();

    if (comment.isNullObject) {
      console.warn("No comments in the selection, so no range to get.");
      return;
    }

    console.log(`Comment location: ${range.text}`);
    const contentRange: Word.CommentContentRange = comment.contentRange;
    console.log("Comment content range:", contentRange);
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: contentControls
    uid: 'word!Word.Range#contentControls:member'
    package: word!
    fullName: contentControls
    summary: Gets the collection of content control objects in the range.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type: '<xref uid="word!Word.ContentControlCollection:class" />'
  - name: context
    uid: 'word!Word.Range#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: font
    uid: 'word!Word.Range#font:member'
    package: word!
    fullName: font
    summary: 'Gets the text format of the range. Use this to get and set font name, size, color, and other properties.'
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type: '<xref uid="word!Word.Font:class" />'
  - name: inlinePictures
    uid: 'word!Word.Range#inlinePictures:member'
    package: word!
    fullName: inlinePictures
    summary: Gets the collection of inline picture objects in the range.
    remarks: '\[ [API set: WordApi 1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type: '<xref uid="word!Word.InlinePictureCollection:class" />'
  - name: paragraphs
    uid: 'word!Word.Range#paragraphs:member'
    package: word!
    fullName: paragraphs
    summary: Gets the collection of paragraph objects in the range.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      Important: For requirement sets 1.1 and 1.2, paragraphs in tables wholly contained within this range aren't
      returned. From requirement set 1.3, paragraphs in such tables are also returned.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
  - name: parentContentControl
    uid: 'word!Word.Range#parentContentControl:member'
    package: word!
    fullName: parentContentControl
    summary: >-
      Gets the currently supported content control that contains the range. Throws an `ItemNotFound` error if there
      isn't a parent content control.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-checkbox-content-control.yaml


      // Toggles the isChecked property of the first checkbox content control found in the selection.

      await Word.run(async (context) => {
        const selectedRange: Word.Range = context.document.getSelection();
        let selectedContentControl = selectedRange
          .getContentControls({
            types: [Word.ContentControlType.checkBox]
          })
          .getFirstOrNullObject();
        selectedContentControl.load("id,checkboxContentControl/isChecked");

        await context.sync();

        if (selectedContentControl.isNullObject) {
          const parentContentControl: Word.ContentControl = selectedRange.parentContentControl;
          parentContentControl.load("id,type,checkboxContentControl/isChecked");
          await context.sync();

          if (parentContentControl.isNullObject || parentContentControl.type !== Word.ContentControlType.checkBox) {
            console.warn("No checkbox content control is currently selected.");
            return;
          } else {
            selectedContentControl = parentContentControl;
          }
        }

        const isCheckedBefore = selectedContentControl.checkboxContentControl.isChecked;
        console.log("isChecked state before:", `id: ${selectedContentControl.id} ... isChecked: ${isCheckedBefore}`);
        selectedContentControl.checkboxContentControl.isChecked = !isCheckedBefore;
        selectedContentControl.load("id,checkboxContentControl/isChecked");
        await context.sync();

        console.log(
          "isChecked state after:",
          `id: ${selectedContentControl.id} ... isChecked: ${selectedContentControl.checkboxContentControl.isChecked}`
        );
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
  - name: style
    uid: 'word!Word.Range#style:member'
    package: word!
    fullName: style
    summary: >-
      Specifies the style name for the range. Use this property for custom styles and localized style names. To use the
      built-in styles that are portable between locales, see the "styleBuiltIn" property.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: string;'
      return:
        type: string
  - name: text
    uid: 'word!Word.Range#text:member'
    package: word!
    fullName: text
    summary: Gets the text of the range.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly text: string;'
      return:
        type: string
methods:
  - name: clear()
    uid: 'word!Word.Range#clear:member(1)'
    package: word!
    fullName: clear()
    summary: Clears the contents of the range object. The user can perform the undo operation on the cleared content.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to clear the contents of the proxy range object.
          range.clear();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Cleared the selection (range object)');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: ''
  - name: delete()
    uid: 'word!Word.Range#delete:member(1)'
    package: word!
    fullName: delete()
    summary: Deletes the range and its content from the document.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to delete the range object.
          range.delete();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Deleted the selection (range object)');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getHtml()
    uid: 'word!Word.Range#getHtml:member(1)'
    package: word!
    fullName: getHtml()
    summary: >-
      Gets an HTML representation of the range object. When rendered in a web page or HTML viewer, the formatting will
      be a close, but not exact, match for of the formatting of the document. This method doesn't return the exact same
      HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact
      fidelity, or consistency across platforms, use `Range.getOoxml()` and convert the returned XML to HTML.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to get the HTML of the current selection.
          const html = range.getHtml();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The HTML read from the document was: ' + html.value);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getOoxml()
    uid: 'word!Word.Range#getOoxml:member(1)'
    package: word!
    fullName: getOoxml()
    summary: Gets the OOXML representation of the range object.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to get the OOXML of the current selection.
          const ooxml = range.getOoxml();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The OOXML read from the document was:  ' + ooxml.value);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: 'insertBreak(breakType, insertLocation)'
    uid: 'word!Word.Range#insertBreak:member(1)'
    package: word!
    fullName: 'insertBreak(breakType, insertLocation)'
    summary: Inserts a break at the specified location in the main document.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert a page break after the selected text.
          range.insertBreak(Word.BreakType.page, Word.InsertLocation.after);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Inserted a page break after the selected text.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertBreak(breakType: Word.BreakType | "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" |
        "SectionOdd" | "Line", insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" |
        "After"): void;
      parameters:
        - id: breakType
          description: Required. The break type to add.
          type: >-
            <xref uid="word!Word.BreakType:enum" /> | "Page" | "Next" | "SectionNext" | "SectionContinuous" |
            "SectionEven" | "SectionOdd" | "Line"
        - id: insertLocation
          description: Required. The value must be 'Before' or 'After'.
          type: >-
            <xref uid="word!Word.InsertLocation.before:member" /> | <xref uid="word!Word.InsertLocation.after:member" />
            | "Before" | "After"
      return:
        type: void
        description: ''
  - name: insertContentControl(contentControlType)
    uid: 'word!Word.Range#insertContentControl:member(1)'
    package: word!
    fullName: insertContentControl(contentControlType)
    summary: Wraps the Range object with a content control.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      Note: The `contentControlType` parameter was introduced in WordApi 1.5. `PlainText` support was added in WordApi
      1.5. `CheckBox` support was added in WordApi 1.7. `DropDownList` and `ComboBox` support was added in WordApi 1.9.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml


      // Simulates creation of a template. First searches the document for instances of the string "Contractor",

      // then changes the format  of each search result,

      // then wraps each search result within a content control,

      // finally sets a tag and title property on each content control.

      await Word.run(async (context) => {
          const results: Word.RangeCollection = context.document.body.search("Contractor");
          results.load("font/bold");

          // Check to make sure these content controls haven't been added yet.
          const customerContentControls: Word.ContentControlCollection = context.document.contentControls.getByTag("customer");
          customerContentControls.load("text");
          await context.sync();

        if (customerContentControls.items.length === 0) {
          for (let i = 0; i < results.items.length; i++) { 
              results.items[i].font.bold = true;
              let cc: Word.ContentControl = results.items[i].insertContentControl();
              cc.tag = "customer";  // This value is used in the next step of this sample.
              cc.title = "Customer Name " + i;
          }
        }
          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertContentControl(contentControlType?: Word.ContentControlType.richText | Word.ContentControlType.plainText |
        Word.ContentControlType.checkBox | Word.ContentControlType.dropDownList | Word.ContentControlType.comboBox |
        "RichText" | "PlainText" | "CheckBox" | "DropDownList" | "ComboBox"): Word.ContentControl;
      parameters:
        - id: contentControlType
          description: >-
            Optional. Content control type to insert. Must be 'RichText', 'PlainText', 'CheckBox', 'DropDownList', or
            'ComboBox'. The default is 'RichText'.
          type: >-
            <xref uid="word!Word.ContentControlType.richText:member" /> | <xref
            uid="word!Word.ContentControlType.plainText:member" /> | <xref
            uid="word!Word.ContentControlType.checkBox:member" /> | <xref
            uid="word!Word.ContentControlType.dropDownList:member" /> | <xref
            uid="word!Word.ContentControlType.comboBox:member" /> | "RichText" | "PlainText" | "CheckBox" |
            "DropDownList" | "ComboBox"
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: ''
  - name: 'insertFileFromBase64(base64File, insertLocation)'
    uid: 'word!Word.Range#insertFileFromBase64:member(1)'
    package: word!
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    summary: Inserts a document at the specified location.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      Note: Insertion isn't supported if the document being inserted contains an ActiveX control (likely in a form
      field). Consider replacing such a form field with a content control or other option appropriate for your scenario.


      #### Examples


      ```TypeScript

      // Run a batch operation against the Word object model.

      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert base64 encoded .docx at the beginning of the range.
          // You'll need to implement getBase64() to make this work.
          range.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Added base64 encoded text to the beginning of the range.');
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" |
        "Before" | "After"): Word.Range;
      parameters:
        - id: base64File
          description: Required. The Base64-encoded content of a .docx file.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertHtml(html, insertLocation)'
    uid: 'word!Word.Range#insertHtml:member(1)'
    package: word!
    fullName: 'insertHtml(html, insertLocation)'
    summary: Inserts HTML at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert HTML in to the beginning of the range.
          range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('HTML added to the beginning of the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtml(html: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" |
        "After"): Word.Range;
      parameters:
        - id: html
          description: Required. The HTML to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    uid: 'word!Word.Range#insertInlinePictureFromBase64:member(1)'
    package: word!
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    summary: Inserts a picture at the specified location.
    remarks: '\[ [API set: WordApi 1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation | "Replace" |
        "Start" | "End" | "Before" | "After"): Word.InlinePicture;
      parameters:
        - id: base64EncodedImage
          description: Required. The Base64-encoded image to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.InlinePicture:class" />'
        description: ''
  - name: 'insertOoxml(ooxml, insertLocation)'
    uid: 'word!Word.Range#insertOoxml:member(1)'
    package: word!
    fullName: 'insertOoxml(ooxml, insertLocation)'
    summary: Inserts OOXML at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert OOXML in to the beginning of the range.
          range.insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('OOXML added to the beginning of the range.');
      });

      // Read "Create better add-ins for Word with Office Open XML" for guidance on working with OOXML.
      // https://learn.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" |
        "After"): Word.Range;
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertParagraph(paragraphText, insertLocation)'
    uid: 'word!Word.Range#insertParagraph:member(1)'
    package: word!
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    summary: Inserts a paragraph at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert the paragraph after the range.
          range.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Paragraph added to the end of the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after |
        "Before" | "After"): Word.Paragraph;
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type: string
        - id: insertLocation
          description: Required. The value must be 'Before' or 'After'.
          type: >-
            <xref uid="word!Word.InsertLocation.before:member" /> | <xref uid="word!Word.InsertLocation.after:member" />
            | "Before" | "After"
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: 'insertText(text, insertLocation)'
    uid: 'word!Word.Range#insertText:member(1)'
    package: word!
    fullName: 'insertText(text, insertLocation)'
    summary: Inserts text at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert the paragraph at the end of the range.
          range.insertText('New text inserted into the range.', Word.InsertLocation.end);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Text added to the end of the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertText(text: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" |
        "After"): Word.Range;
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'word!Word.Range#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.RangeLoadOptions): Word.Range;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="word!Word.Interfaces.RangeLoadOptions:interface" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.Range#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Range;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.Range#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Range;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'search(searchText, searchOptions)'
    uid: 'word!Word.Range#search:member(1)'
    package: word!
    fullName: 'search(searchText, searchOptions)'
    summary: >-
      Performs a search with the specified SearchOptions on the scope of the range object. The search results are a
      collection of range objects.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      parameters:
        - id: searchText
          description: Required. The search text.
          type: string
        - id: searchOptions
          description: Optional. Options for the search.
          type: |-
            <xref uid="word!Word.SearchOptions:class" /> | {
                        ignorePunct?: boolean;
                        ignoreSpace?: boolean;
                        matchCase?: boolean;
                        matchPrefix?: boolean;
                        matchSuffix?: boolean;
                        matchWholeWord?: boolean;
                        matchWildcards?: boolean;
                    }
      return:
        type: '<xref uid="word!Word.RangeCollection:class" />'
        description: ''
  - name: select(selectionMode)
    uid: 'word!Word.Range#select:member(1)'
    package: word!
    fullName: select(selectionMode)
    summary: Selects and navigates the Word UI to the range.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert HTML in to the beginning of the range.
          range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

          // Queue a command to select the HTML that was inserted.
          range.select();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Selected the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      parameters:
        - id: selectionMode
          description: 'Optional. The selection mode must be ''Select'', ''Start'', or ''End''. ''Select'' is the default.'
          type: '<xref uid="word!Word.SelectionMode:enum" />'
      return:
        type: void
        description: ''
  - name: select(selectionModeString)
    uid: 'word!Word.Range#select:member(2)'
    package: word!
    fullName: select(selectionModeString)
    summary: Selects and navigates the Word UI to the range.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      parameters:
        - id: selectionModeString
          description: 'Optional. The selection mode must be ''Select'', ''Start'', or ''End''. ''Select'' is the default.'
          type: '"Select" | "Start" | "End"'
      return:
        type: void
        description: ''
  - name: 'set(properties, options)'
    uid: 'word!Word.Range#set:member(1)'
    package: word!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="word!Word.Interfaces.RangeUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'word!Word.Range#set:member(2)'
    package: word!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Range): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="word!Word.Range:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'word!Word.Range#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `Word.Range` object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.RangeData`<!-- -->) that contains shallow copies of any loaded child
      properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.RangeData;'
      return:
        type: '<xref uid="word!Word.Interfaces.RangeData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.Range#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Range;'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.Range#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Range;'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
