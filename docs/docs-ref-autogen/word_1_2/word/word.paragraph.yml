### YamlMime:UniversalReference
items:
  - uid: word.Word.Paragraph
    summary: |-
      Represents a single paragraph in a selection, range, content control, or document body.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: Word.Paragraph
    fullName: Word.Paragraph
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: word
    children:
      - word.Word.Paragraph.alignment
      - word.Word.Paragraph.clear
      - word.Word.Paragraph.contentControls
      - word.Word.Paragraph.context
      - word.Word.Paragraph.delete
      - word.Word.Paragraph.firstLineIndent
      - word.Word.Paragraph.font
      - word.Word.Paragraph.getHtml
      - word.Word.Paragraph.getOoxml
      - word.Word.Paragraph.inlinePictures
      - word.Word.Paragraph.insertBreak
      - word.Word.Paragraph.insertBreak_1
      - word.Word.Paragraph.insertContentControl
      - word.Word.Paragraph.insertFileFromBase64
      - word.Word.Paragraph.insertFileFromBase64_1
      - word.Word.Paragraph.insertHtml
      - word.Word.Paragraph.insertHtml_1
      - word.Word.Paragraph.insertInlinePictureFromBase64
      - word.Word.Paragraph.insertInlinePictureFromBase64_1
      - word.Word.Paragraph.insertOoxml
      - word.Word.Paragraph.insertOoxml_1
      - word.Word.Paragraph.insertParagraph
      - word.Word.Paragraph.insertParagraph_1
      - word.Word.Paragraph.insertText
      - word.Word.Paragraph.insertText_1
      - word.Word.Paragraph.leftIndent
      - word.Word.Paragraph.lineSpacing
      - word.Word.Paragraph.lineUnitAfter
      - word.Word.Paragraph.lineUnitBefore
      - word.Word.Paragraph.load
      - word.Word.Paragraph.load_1
      - word.Word.Paragraph.load_2
      - word.Word.Paragraph.outlineLevel
      - word.Word.Paragraph.parentContentControl
      - word.Word.Paragraph.rightIndent
      - word.Word.Paragraph.search
      - word.Word.Paragraph.select
      - word.Word.Paragraph.select_1
      - word.Word.Paragraph.set
      - word.Word.Paragraph.set_1
      - word.Word.Paragraph.spaceAfter
      - word.Word.Paragraph.spaceBefore
      - word.Word.Paragraph.style
      - word.Word.Paragraph.text
      - word.Word.Paragraph.toJSON
      - word.Word.Paragraph.track
      - word.Word.Paragraph.untrack
  - uid: word.Word.Paragraph.alignment
    summary: |-
      Gets or sets the alignment for a paragraph. The value can be 'left', 'centered', 'right', or 'justified'.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: alignment
    fullName: alignment
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";'
      return:
        type:
          - Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"
        description: |-


          #### Examples

          ```typescript
          await Word.run(async (context) => {
            // Centers last paragraph alignment.
            context.document.body.paragraphs.getLast().alignment = "Centered";

            await context.sync();
          });
          ```
  - uid: word.Word.Paragraph.clear
    summary: |-
      Clears the contents of the paragraph object. The user can perform the undo operation on the cleared content.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to clear the contents of the first paragraph.
                  paragraphs.items[0].clear();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Cleared the contents of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Paragraph.contentControls
    summary: |-
      Gets the collection of content control objects in the paragraph. Read-only.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - word.Word.ContentControlCollection
  - uid: word.Word.Paragraph.context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - word.Word.RequestContext
  - uid: word.Word.Paragraph.delete
    summary: |-
      Deletes the paragraph and its content from the document.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the text property for all of the paragraphs.
              context.load(paragraphs, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to delete the first paragraph.
                  paragraphs.items[0].delete();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Deleted the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Paragraph.firstLineIndent
    summary: >-
      Gets or sets the value, in points, for a first line or hanging indent. Use a positive value to set a first-line
      indent, and use a negative value to set a hanging indent.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: firstLineIndent
    fullName: firstLineIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstLineIndent: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.font
    summary: >-
      Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.
      Read-only.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - word.Word.Font
  - uid: word.Word.Paragraph.getHtml
    summary: >-
      Gets an HTML representation of the paragraph object. When rendered in a web page or HTML viewer, the formatting
      will be a close, but not exact, match to the formatting of the document. This method does not return the exact
      same HTML for the same document on different platforms (Windows, Mac, etc.). If you need exact fidelity, or
      consistency across platforms, use `Paragraph.getOoxml()` and convert the returned XML to HTML.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a a set of commands to get the HTML of the first paragraph.
                  var html = paragraphs.items[0].getHtml();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Paragraph HTML: ' + html.value);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Paragraph.getOoxml
    summary: |-
      Gets the Office Open XML (OOXML) representation of the paragraph object.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for the top 2 paragraphs.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a a set of commands to get the OOXML of the first paragraph.
                  var ooxml = paragraphs.items[0].getOoxml();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Paragraph OOXML: ' + ooxml.value);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Paragraph.inlinePictures
    summary: >-
      Gets the collection of InlinePicture objects in the paragraph. The collection does not include floating images.
      Read-only.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - word.Word.InlinePictureCollection
  - uid: word.Word.Paragraph.insertBreak
    summary: >-
      Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or
      'After'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```typescript
          Word.run(async (context) => {
            context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, "After");

            await context.sync();
            console.log("success");
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.page, "After");

            await context.sync();
            console.log("success");
          });
          ```
      parameters:
        - id: breakType
          description: Required. The break type to add to the document.
          type:
            - word.Word.BreakType
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertBreak_1
    summary: >-
      Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or
      'After'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" |
        "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert a page break after the first paragraph.
                  paragraph.insertBreak('page', 'After');

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted a page break after the paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakTypeString
          description: Required. The break type to add to the document.
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Paragraph.insertContentControl
    summary: |-
      Wraps the paragraph object with a rich text content control.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to wrap the first paragraph in a rich text content control.
                  paragraph.insertContentControl();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Wrapped the first paragraph in a content control.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Paragraph.insertFileFromBase64
    summary: >-
      Inserts a document into the paragraph at the specified location. The insertLocation value can be 'Replace',
      'Start', or 'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertFileFromBase64_1
    summary: >-
      Inserts a document into the paragraph at the specified location. The insertLocation value can be 'Replace',
      'Start', or 'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" |
        "Replace"): Word.Range;
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type:
            - string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Paragraph.insertHtml
    summary: >-
      Inserts HTML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or
      'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert HTML content at the end of the first paragraph.
                  paragraph.insertHtml('<strong>Inserted HTML.</strong>', Word.InsertLocation.end);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted HTML content at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: Required. The HTML to be inserted in the paragraph.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertHtml_1
    summary: >-
      Inserts HTML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or
      'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: html
          description: Required. The HTML to be inserted in the paragraph.
          type:
            - string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Paragraph.insertInlinePictureFromBase64
    summary: >-
      Inserts a picture into the paragraph at the specified location. The insertLocation value can be 'Replace',
      'Start', or 'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation):
        Word.InlinePicture;
      return:
        type:
          - word.Word.InlinePicture
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  var b64encodedImg = "iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC";

                  // Queue a command to insert a base64 encoded image at the beginning of the first paragraph.
                  paragraph.insertInlinePictureFromBase64(b64encodedImg, Word.InsertLocation.start);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Added an image to the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64EncodedImage
          description: Required. The base64 encoded image to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertInlinePictureFromBase64_1
    summary: >-
      Inserts a picture into the paragraph at the specified location. The insertLocation value can be 'Replace',
      'Start', or 'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" |
        "End" | "Replace"): Word.InlinePicture;
      return:
        type:
          - word.Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: Required. The base64 encoded image to be inserted.
          type:
            - string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Paragraph.insertOoxml
    summary: >-
      Inserts OOXML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or
      'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted in the paragraph.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertOoxml_1
    summary: >-
      Inserts OOXML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or
      'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted in the paragraph.
          type:
            - string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Paragraph.insertParagraph
    summary: |-
      Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - word.Word.Paragraph
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert the paragraph after the current paragraph.
                  paragraph.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted a new paragraph at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Second sentence, let's insert it as a paragraph after the previously inserted one.
            let secondSentence = context.document.body.insertParagraph(
              "This is the first text with a custom style.",
              "End"
            );
            secondSentence.font.set({
              bold: false,
              italic: true,
              name: "Berlin Sans FB",
              color: "blue",
              size: 30
            });

            await context.sync();
          });
          ```
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type:
            - string
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertParagraph_1
    summary: |-
      Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"):
        Word.Paragraph;
      return:
        type:
          - word.Word.Paragraph
        description: ''
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type:
            - string
        - id: insertLocationString
          description: Required. The value can be 'Before' or 'After'.
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Paragraph.insertText
    summary: >-
      Inserts text into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or
      'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert text into the end of the paragraph.
                  paragraph.insertText('New text inserted into the paragraph.', Word.InsertLocation.end);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted text at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Replace the last paragraph.
            let range = context.document.body.paragraphs.getLast().insertText("Just replaced the last paragraph!", "Replace");
            range.font.highlightColor = "black";
            range.font.color = "white";

            await context.sync();
          });
          ```
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertText_1
    summary: >-
      Inserts text into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or
      'End'.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type:
            - string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Paragraph.leftIndent
    summary: |-
      Gets or sets the left indent value, in points, for the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: leftIndent
    fullName: leftIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'leftIndent: number;'
      return:
        type:
          - number
        description: |-


          #### Examples

          ```typescript
          await Word.run(async (context) => {
            // Indents the first paragraph.
            context.document.body.paragraphs.getFirst().leftIndent = 75; //units = points

            return context.sync();
          });
          ```
  - uid: word.Word.Paragraph.lineSpacing
    summary: >-
      Gets or sets the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by
      12.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: lineSpacing
    fullName: lineSpacing
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineSpacing: number;'
      return:
        type:
          - number
        description: |-


          #### Examples

          ```typescript
          await Word.run(async (context) => {
            // Adjusts line spacing.
            context.document.body.paragraphs.getFirst().lineSpacing = 20;

            await context.sync();
          });
          ```
  - uid: word.Word.Paragraph.lineUnitAfter
    summary: |-
      Gets or sets the amount of spacing, in grid lines, after the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: lineUnitAfter
    fullName: lineUnitAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitAfter: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.lineUnitBefore
    summary: |-
      Gets or sets the amount of spacing, in grid lines, before the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: lineUnitBefore
    fullName: lineUnitBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitBefore: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Word.Paragraph` - Where option is a comma-delimited string or an array of
      strings that specify the properties to load.


      `load(option?: { select?: string; expand?: string; }): Word.Paragraph` - Where option.select is a comma-delimited
      string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the
      navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Paragraph` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.ParagraphLoadOptions): Word.Paragraph;'
      return:
        type:
          - word.Word.Paragraph
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - word.Word.Interfaces.ParagraphLoadOptions
  - uid: word.Word.Paragraph.load_1
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Paragraph;'
      return:
        type:
          - word.Word.Paragraph
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: word.Word.Paragraph.load_2
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Paragraph;'
      return:
        type:
          - word.Word.Paragraph
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and
            propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: word.Word.Paragraph.outlineLevel
    summary: |-
      Gets or sets the outline level for the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: outlineLevel
    fullName: outlineLevel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'outlineLevel: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.parentContentControl
    summary: |-
      Gets the content control that contains the paragraph. Throws if there isn't a parent content control. Read-only.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word.Word.Paragraph.rightIndent
    summary: |-
      Gets or sets the right indent value, in points, for the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: rightIndent
    fullName: rightIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rightIndent: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.search
    summary: >-
      Performs a search with the specified SearchOptions on the scope of the paragraph object. The search results are a
      collection of range objects.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - word.Word.RangeCollection
        description: ''
      parameters:
        - id: searchText
          description: Required. The search text.
          type:
            - string
        - id: searchOptions
          description: Optional. Options for the search.
          type:
            - |-
              Word.SearchOptions | {
                          ignorePunct?: boolean;
                          ignoreSpace?: boolean;
                          matchCase?: boolean;
                          matchPrefix?: boolean;
                          matchSuffix?: boolean;
                          matchWholeWord?: boolean;
                          matchWildcards?: boolean;
                      }
  - uid: word.Word.Paragraph.select
    summary: |-
      Selects and navigates the Word UI to the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a commmand to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the last paragraph a create a
                  // proxy paragraph object.
                  var paragraph = paragraphs.items[paragraphs.items.length - 1];

                  // Queue a command to select the paragraph. The Word UI will
                  // move to the selected paragraph.
                  paragraph.select();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Selected the last paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // If select is called with no parameters, it selects the object.
            context.document.body.paragraphs.getLast().select();

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.
            context.document.body.paragraphs.getLast().select("End");

            await context.sync();
          });
          ```
      parameters:
        - id: selectionMode
          description: 'Optional. The selection mode can be ''Select'', ''Start'', or ''End''. ''Select'' is the default.'
          type:
            - word.Word.SelectionMode
  - uid: word.Word.Paragraph.select_1
    summary: |-
      Selects and navigates the Word UI to the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: 'Optional. The selection mode can be ''Select'', ''Start'', or ''End''. ''Select'' is the default.'
          type:
            - '"Select" | "Start" | "End"'
  - uid: word.Word.Paragraph.set
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Word.Paragraph): void`

      #### Examples

      ```typescript
      await Word.run(async (context) => {
        const paragraph = context.document.body.paragraphs.getFirst();
        paragraph.set({
          leftIndent: 30,
          font: {
            bold: true,
            color: "red"
          }
        });

        await context.sync();
      });
      ```
      ```typescript
      await Word.run(async (context) => {
        const firstParagraph = context.document.body.paragraphs.getFirst();
        const secondParagraph = firstParagraph.getNext();
        firstParagraph.load("text, font/color, font/bold, leftIndent");

        await context.sync();

        secondParagraph.set(firstParagraph);

        await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - Interfaces.ParagraphUpdateData
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - OfficeExtension.UpdateOptions
  - uid: word.Word.Paragraph.set_1
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Paragraph): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - word.Word.Paragraph
  - uid: word.Word.Paragraph.spaceAfter
    summary: |-
      Gets or sets the spacing, in points, after the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: spaceAfter
    fullName: spaceAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceAfter: number;'
      return:
        type:
          - number
        description: |-


          #### Examples

          ```typescript
          await Word.run(async (context) => {
            // Adjust space between paragraphs.
            context.document.body.paragraphs.getFirst().spaceAfter = 20;

            await context.sync();
          });
          ```
  - uid: word.Word.Paragraph.spaceBefore
    summary: |-
      Gets or sets the spacing, in points, before the paragraph.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: spaceBefore
    fullName: spaceBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceBefore: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.style
    summary: >-
      Gets or sets the style name for the paragraph. Use this property for custom styles and localized style names. To
      use the built-in styles that are portable between locales, see the "styleBuiltIn" property.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: word.Word.Paragraph.text
    summary: |-
      Gets the text of the paragraph. Read-only.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
        description: |-


          #### Examples

          ```typescript
          await Word.run(async (context) => {
            // The collection of paragraphs of the current selection returns the full paragraphs contained in it.
            let paragraph = context.document.getSelection().paragraphs.getFirst();
            paragraph.load("text");

            await context.sync();
            console.log(paragraph.text);
          });
          ```
  - uid: word.Word.Paragraph.toJSON
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Word.Paragraph object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.ParagraphData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ParagraphData;'
      return:
        type:
          - word.Word.Interfaces.ParagraphData
        description: ''
  - uid: word.Word.Paragraph.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Paragraph;'
      return:
        type:
          - word.Word.Paragraph
        description: ''
  - uid: word.Word.Paragraph.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Paragraph;'
      return:
        type:
          - word.Word.Paragraph
        description: ''
