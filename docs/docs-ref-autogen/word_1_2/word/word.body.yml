### YamlMime:TSType
name: Word.Body
uid: 'word!Word.Body:class'
package: word!
fullName: Word.Body
summary: >-
  Represents the body of a document or a section.


  \[ [API set: WordApi
  1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: contentControls
    uid: 'word!Word.Body#contentControls:member'
    package: word!
    fullName: contentControls
    summary: >-
      Gets the collection of rich text content control objects in the body.
      Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type: '<xref uid="word!Word.ContentControlCollection:class" />'
  - name: context
    uid: 'word!Word.Body#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: font
    uid: 'word!Word.Body#font:member'
    package: word!
    fullName: font
    summary: >-
      Gets the text format of the body. Use this to get and set font name, size,
      color and other properties. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type: '<xref uid="word!Word.Font:class" />'
        description: >-


          #### Examples


          ```javascript

          // Get the style and the font size, font name, and font color
          properties on the body object.

          // Run a batch operation against the Word object model.

          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load font and style information for the document body.
              context.load(body, 'font/size, font/name, font/color, style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Show the results of the load method. Here we show the
                  // property values on the body object.
                  var results = 'Font size: ' + body.font.size +
                                '; Font name: ' + body.font.name +
                                '; Font color: ' + body.font.color +
                                '; Body style: ' + body.style;

                  console.log(results);
              });
          })

          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          ```
  - name: inlinePictures
    uid: 'word!Word.Body#inlinePictures:member'
    package: word!
    fullName: inlinePictures
    summary: >-
      Gets the collection of InlinePicture objects in the body. The collection
      does not include floating images. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type: '<xref uid="word!Word.InlinePictureCollection:class" />'
  - name: paragraphs
    uid: 'word!Word.Body#paragraphs:member'
    package: word!
    fullName: paragraphs
    summary: >-
      Gets the collection of paragraph objects in the body. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/get-word-count.yaml

          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });

          ```
  - name: parentContentControl
    uid: 'word!Word.Body#parentContentControl:member'
    package: word!
    fullName: parentContentControl
    summary: >-
      Gets the content control that contains the body. Throws an error if there
      isn't a parent content control. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
  - name: style
    uid: 'word!Word.Body#style:member'
    package: word!
    fullName: style
    summary: >-
      Gets or sets the style name for the body. Use this property for custom
      styles and localized style names. To use the built-in styles that are
      portable between locales, see the "styleBuiltIn" property.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: string;'
      return:
        type: string
  - name: text
    uid: 'word!Word.Body#text:member'
    package: word!
    fullName: text
    summary: >-
      Gets the text of the body. Use the insertText method to insert text.
      Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly text: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```javascript
          // Get the text property on the body object
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load the text in document body.
              context.load(body, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body contents: " + body.text);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
methods:
  - name: clear()
    uid: 'word!Word.Body#clear:member(1)'
    package: word!
    fullName: clear()
    summary: >-
      Clears the contents of the body object. The user can perform the undo
      operation on the cleared content.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to clear the contents of the body.
              body.clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the body contents.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });

          // The Silly stories add-in sample shows how the 
          // clear method can be used to clear the contents of a document.
          // https://aka.ms/sillystorywordaddin
          ```
  - name: getHtml()
    uid: 'word!Word.Body#getHtml:member(1)'
    package: word!
    fullName: getHtml()
    summary: >-
      Gets an HTML representation of the body object. When rendered in a web
      page or HTML viewer, the formatting will be a close, but not exact, match
      for of the formatting of the document. This method does not return the
      exact same HTML for the same document on different platforms (Windows,
      Mac, Word for the web, etc.). If you need exact fidelity, or consistency
      across platforms, use `Body.getOoxml()` and convert the returned XML to
      HTML.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the HTML contents of the body.
              var bodyHTML = body.getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body HTML contents: " + bodyHTML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getOoxml()
    uid: 'word!Word.Body#getOoxml:member(1)'
    package: word!
    fullName: getOoxml()
    summary: >-
      Gets the OOXML (Office Open XML) representation of the body object.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the OOXML contents of the body.
              var bodyOOXML = body.getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body OOXML contents: " + bodyOOXML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertBreak(breakType, insertLocation)'
    uid: 'word!Word.Body#insertBreak:member(1)'
    package: word!
    fullName: 'insertBreak(breakType, insertLocation)'
    summary: >-
      Inserts a break at the specified location in the main document.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertBreak(breakType: Word.BreakType, insertLocation:
        Word.InsertLocation): void;
      parameters:
        - id: breakType
          description: Required. The break type to add to the body.
          type: '<xref uid="word!Word.BreakType:enum" />'
        - id: insertLocation
          description: Required. The value can be 'Start' or 'End'.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (ctx) {

              // Create a proxy object for the document body.
              var body = ctx.document.body;

              // Queue a command to insert a page break at the start of the document body.
              body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  console.log('Added a page break at the start of the document body.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertBreak(breakTypeString, insertLocation)'
    uid: 'word!Word.Body#insertBreak:member(2)'
    package: word!
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    summary: >-
      Inserts a break at the specified location in the main document.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" |
        "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line",
        insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;
      parameters:
        - id: breakTypeString
          description: Required. The break type to add to the body.
          type: >-
            "Page" | "Next" | "SectionNext" | "SectionContinuous" |
            "SectionEven" | "SectionOdd" | "Line"
        - id: insertLocation
          description: Required. The value can be 'Start' or 'End'.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: void
        description: ''
  - name: insertContentControl()
    uid: 'word!Word.Body#insertContentControl:member(1)'
    package: word!
    fullName: insertContentControl()
    summary: >-
      Wraps the body object with a Rich Text content control.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to wrap the body in a content control.
              body.insertContentControl();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped the body in a content control.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertFileFromBase64(base64File, insertLocation)'
    uid: 'word!Word.Body#insertFileFromBase64:member(1)'
    package: word!
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    summary: >-
      Inserts a document into the body at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocation:
        Word.InsertLocation): Word.Range;
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type: string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert base64 encoded .docx at the beginning of the content body.
              // You will need to implement getBase64() to pass in a string of a base64 encoded docx file.
              body.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added base64 encoded text to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertFileFromBase64(base64File, insertLocationString)'
    uid: 'word!Word.Body#insertFileFromBase64:member(2)'
    package: word!
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    summary: >-
      Inserts a document into the body at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocationString: "Before"
        | "After" | "Start" | "End" | "Replace"): Word.Range;
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type: string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertHtml(html, insertLocation)'
    uid: 'word!Word.Body#insertHtml:member(1)'
    package: word!
    fullName: 'insertHtml(html, insertLocation)'
    summary: >-
      Inserts HTML at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtml(html: string, insertLocation: Word.InsertLocation):
        Word.Range;
      parameters:
        - id: html
          description: Required. The HTML to be inserted in the document.
          type: string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert HTML in to the beginning of the body.
              body.insertHtml(
                  '<strong>This is text inserted with body.insertHtml()</strong>', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('HTML added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertHtml(html, insertLocationString)'
    uid: 'word!Word.Body#insertHtml:member(2)'
    package: word!
    fullName: 'insertHtml(html, insertLocationString)'
    summary: >-
      Inserts HTML at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtml(html: string, insertLocationString: "Before" | "After" |
        "Start" | "End" | "Replace"): Word.Range;
      parameters:
        - id: html
          description: Required. The HTML to be inserted in the document.
          type: string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    uid: 'word!Word.Body#insertInlinePictureFromBase64:member(1)'
    package: word!
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    summary: >-
      Inserts a picture into the body at the specified location.


      \[ [API set: WordApi
      1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string,
        insertLocation: Word.InsertLocation): Word.InlinePicture;
      parameters:
        - id: base64EncodedImage
          description: Required. The base64 encoded image to be inserted in the body.
          type: string
        - id: insertLocation
          description: Required. The value can be 'Start' or 'End'.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.InlinePicture:class" />'
        description: >-


          #### Examples


          ```javascript

          // Run a batch operation against the Word object model.

          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert OOXML in to the beginning of the body.
              body.insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('OOXML added to the beginning of the document body.');
              });
          })

          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });


          // Read "Create better add-ins for Word with Office Open XML" for
          guidance on working with OOXML.

          //
          https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml


          // The Word-Add-in-DocumentAssembly sample shows how you can use this
          API to assemble a document.

          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly

          ```
  - name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    uid: 'word!Word.Body#insertInlinePictureFromBase64:member(2)'
    package: word!
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    summary: >-
      Inserts a picture into the body at the specified location.


      \[ [API set: WordApi
      1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string,
        insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"):
        Word.InlinePicture;
      parameters:
        - id: base64EncodedImage
          description: Required. The base64 encoded image to be inserted in the body.
          type: string
        - id: insertLocationString
          description: Required. The value can be 'Start' or 'End'.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.InlinePicture:class" />'
        description: ''
  - name: 'insertOoxml(ooxml, insertLocation)'
    uid: 'word!Word.Body#insertOoxml:member(1)'
    package: word!
    fullName: 'insertOoxml(ooxml, insertLocation)'
    summary: >-
      Inserts OOXML at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation):
        Word.Range;
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertOoxml(ooxml, insertLocationString)'
    uid: 'word!Word.Body#insertOoxml:member(2)'
    package: word!
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    summary: >-
      Inserts OOXML at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertOoxml(ooxml: string, insertLocationString: "Before" | "After" |
        "Start" | "End" | "Replace"): Word.Range;
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted.
          type: string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertParagraph(paragraphText, insertLocation)'
    uid: 'word!Word.Body#insertParagraph:member(1)'
    package: word!
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    summary: >-
      Inserts a paragraph at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertParagraph(paragraphText: string, insertLocation:
        Word.InsertLocation): Word.Paragraph;
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type: string
        - id: insertLocation
          description: Required. The value can be 'Start' or 'End'.
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: >-


          #### Examples


          ```javascript

          // Run a batch operation against the Word object model.

          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert the paragraph at the end of the document body.
              body.insertParagraph('Content of a new paragraph', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph added at the end of the document body.');
              });
          })

          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });


          // The Word-Add-in-DocumentAssembly sample shows how you can use the
          insertParagraph method to assemble a document.

          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly

          ```
  - name: 'insertParagraph(paragraphText, insertLocationString)'
    uid: 'word!Word.Body#insertParagraph:member(2)'
    package: word!
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    summary: >-
      Inserts a paragraph at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertParagraph(paragraphText: string, insertLocationString: "Before" |
        "After" | "Start" | "End" | "Replace"): Word.Paragraph;
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type: string
        - id: insertLocationString
          description: Required. The value can be 'Start' or 'End'.
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: 'insertText(text, insertLocation)'
    uid: 'word!Word.Body#insertText:member(1)'
    package: word!
    fullName: 'insertText(text, insertLocation)'
    summary: >-
      Inserts text into the body at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertText(text: string, insertLocation: Word.InsertLocation):
        Word.Range;
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type: '<xref uid="word!Word.InsertLocation:enum" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert text in to the beginning of the body.
              body.insertText('This is text inserted with body.insertText()', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Text added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'insertText(text, insertLocationString)'
    uid: 'word!Word.Body#insertText:member(2)'
    package: word!
    fullName: 'insertText(text, insertLocationString)'
    summary: >-
      Inserts text into the body at the specified location.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertText(text: string, insertLocationString: "Before" | "After" |
        "Start" | "End" | "Replace"): Word.Range;
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type: string
        - id: insertLocationString
          description: 'Required. The value can be ''Replace'', ''Start'', or ''End''.'
          type: '"Before" | "After" | "Start" | "End" | "Replace"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'word!Word.Body#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.BodyLoadOptions): Word.Body;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="word!Word.Interfaces.BodyLoadOptions:interface" />'
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.Body#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Body;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.Body#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Body;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
  - name: 'search(searchText, searchOptions)'
    uid: 'word!Word.Body#search:member(1)'
    package: word!
    fullName: 'search(searchText, searchOptions)'
    summary: >-
      Performs a search with the specified SearchOptions on the scope of the
      body object. The search results are a collection of range objects.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      parameters:
        - id: searchText
          description: Required. The search text. Can be a maximum of 255 characters.
          type: string
        - id: searchOptions
          description: Optional. Options for the search.
          type: |-
            <xref uid="word!Word.SearchOptions:class" /> | {
                        ignorePunct?: boolean;
                        ignoreSpace?: boolean;
                        matchCase?: boolean;
                        matchPrefix?: boolean;
                        matchSuffix?: boolean;
                        matchWholeWord?: boolean;
                        matchWildcards?: boolean;
                    }
      return:
        type: '<xref uid="word!Word.RangeCollection:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/search.yaml

          await Word.run(async (context) => {
            let results = context.document.body.search("Online");
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "yellow";
            }

            await context.sync();
          });

          ```

          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/search.yaml

          await Word.run(async (context) => {
            // Check out how wildcard expression are built, also use the second parameter of the search method to include search modes
            // (i.e. use wildcards).
            let results = context.document.body.search("$*.[0-9][0-9]", { matchWildcards: true });
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "red";
              results.items[i].font.color = "white";
            }

            await context.sync();
          });

          ```

          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/25-paragraph/get-word-count.yaml

          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });

          ```
  - name: select(selectionMode)
    uid: 'word!Word.Body#select:member(1)'
    package: word!
    fullName: select(selectionMode)
    summary: >-
      Selects the body and navigates the Word UI to it.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      parameters:
        - id: selectionMode
          description: >-
            Optional. The selection mode can be 'Select', 'Start', or 'End'.
            'Select' is the default.
          type: '<xref uid="word!Word.SelectionMode:enum" />'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to select the document body. The Word UI will
              // move to the selected document body.
              body.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: select(selectionModeString)
    uid: 'word!Word.Body#select:member(2)'
    package: word!
    fullName: select(selectionModeString)
    summary: >-
      Selects the body and navigates the Word UI to it.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      parameters:
        - id: selectionModeString
          description: >-
            Optional. The selection mode can be 'Select', 'Start', or 'End'.
            'Select' is the default.
          type: '"Select" | "Start" | "End"'
      return:
        type: void
        description: ''
  - name: 'set(properties, options)'
    uid: 'word!Word.Body#set:member(1)'
    package: word!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Word.Body): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.BodyUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: '<xref uid="word!Word.Interfaces.BodyUpdateData:interface" />'
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'word!Word.Body#set:member(2)'
    package: word!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Body): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="word!Word.Body:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'word!Word.Body#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Word.Body object is an
      API object, the `toJSON` method returns a plain JavaScript object (typed
      as `Word.Interfaces.BodyData`<!-- -->) that contains shallow copies of any
      loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.BodyData;'
      return:
        type: '<xref uid="word!Word.Interfaces.BodyData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.Body#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this
      object across `.sync` calls and outside the sequential execution of a
      ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Body;'
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.Body#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked
      objects slows down the host application, so please remember to free any
      objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Body;'
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
