### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.ItemCompose:interface'
    summary: >-
      The compose mode of [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


      **Important**: This is an internal Outlook object, not directly exposed through existing interfaces. You should
      treat this as a mode of Office.context.mailbox.item. Refer to the [Object
      Model](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.2/office.context.mailbox.item)
      page for more information.
    name: Office.ItemCompose
    fullName: Office.ItemCompose
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Item:interface'
    package: outlook!
    children:
      - 'outlook!Office.ItemCompose#addFileAttachmentAsync:member(1)'
      - 'outlook!Office.ItemCompose#addFileAttachmentAsync:member(2)'
      - 'outlook!Office.ItemCompose#addItemAttachmentAsync:member(1)'
      - 'outlook!Office.ItemCompose#addItemAttachmentAsync:member(2)'
      - 'outlook!Office.ItemCompose#getSelectedDataAsync:member(1)'
      - 'outlook!Office.ItemCompose#getSelectedDataAsync:member(2)'
      - 'outlook!Office.ItemCompose#removeAttachmentAsync:member(1)'
      - 'outlook!Office.ItemCompose#removeAttachmentAsync:member(2)'
      - 'outlook!Office.ItemCompose#setSelectedDataAsync:member(1)'
      - 'outlook!Office.ItemCompose#setSelectedDataAsync:member(2)'
      - 'outlook!Office.ItemCompose#subject:member'
  - uid: 'outlook!Office.ItemCompose#addFileAttachmentAsync:member(1)'
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The addFileAttachmentAsync method uploads the file at the specified URI and attaches it to the item in the compose
      form.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**:
      ReadWriteItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose


      **Errors**:


      - AttachmentSizeExceeded: The attachment is larger than allowed.


      - FileTypeNotSupported: The attachment has an extension that is not allowed.


      - NumberOfAttachmentsExceeded: The message or appointment has too many attachments.
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & {
        isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: >-
            The URI that provides the location of the file to attach to the message or appointment. The maximum length
            is 2048 characters.
          type:
            - string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method. isInline: If true, indicates that the
            attachment will be shown inline in the message body, and should not be displayed in the attachment list.
          type:
            - 'outlook!Office.ItemCompose#addFileAttachmentAsync~0:complex'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If uploading the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - 'outlook!Office.ItemCompose#addFileAttachmentAsync~1:complex'
  - uid: 'outlook!Office.ItemCompose#addFileAttachmentAsync:member(2)'
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The addFileAttachmentAsync method uploads the file at the specified URI and attaches it to the item in the compose
      form.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**:
      ReadWriteItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose


      **Errors**:


      - AttachmentSizeExceeded: The attachment is larger than allowed.


      - FileTypeNotSupported: The attachment has an extension that is not allowed.


      - NumberOfAttachmentsExceeded: The message or appointment has too many attachments.
    name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: >-
            The URI that provides the location of the file to attach to the message or appointment. The maximum length
            is 2048 characters.
          type:
            - string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If uploading the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - 'outlook!Office.ItemCompose#addFileAttachmentAsync~2:complex'
  - uid: 'outlook!Office.ItemCompose#addItemAttachmentAsync:member(1)'
    summary: >-
      Adds an Exchange item, such as a message, as an attachment to the message or appointment.


      The addItemAttachmentAsync method attaches the item with the specified Exchange identifier to the item in the
      compose form. If you specify a callback method, the method is called with one parameter, asyncResult, which
      contains either the attachment identifier or a code that indicates any error that occurred while attaching the
      item. You can use the options parameter to pass state information to the callback method, if needed.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      If your Office add-in is running in Outlook on the web, the addItemAttachmentAsync method can attach items to
      items other than the item that you are editing; however, this is not supported and is not recommended.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**:
      ReadWriteItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose


      **Errors**:


      - NumberOfAttachmentsExceeded: The message or appointment has too many attachments.
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?:
        (asyncResult: Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: The Exchange identifier of the item to attach. The maximum length is 100 characters.
          type:
            - any
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If adding the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - 'outlook!Office.ItemCompose#addItemAttachmentAsync~0:complex'
  - uid: 'outlook!Office.ItemCompose#addItemAttachmentAsync:member(2)'
    summary: >-
      Adds an Exchange item, such as a message, as an attachment to the message or appointment.


      The addItemAttachmentAsync method attaches the item with the specified Exchange identifier to the item in the
      compose form. If you specify a callback method, the method is called with one parameter, asyncResult, which
      contains either the attachment identifier or a code that indicates any error that occurred while attaching the
      item. You can use the options parameter to pass state information to the callback method, if needed.


      You can subsequently use the identifier with the removeAttachmentAsync method to remove the attachment in the same
      session.


      If your Office add-in is running in Outlook on the web, the addItemAttachmentAsync method can attach items to
      items other than the item that you are editing; however, this is not supported and is not recommended.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**:
      ReadWriteItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose


      **Errors**:


      - NumberOfAttachmentsExceeded: The message or appointment has too many attachments.
    name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: The Exchange identifier of the item to attach. The maximum length is 100 characters.
          type:
            - any
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. On success, the attachment identifier will be provided in the
            asyncResult.value property. If adding the attachment fails, the asyncResult object will contain an Error
            object that provides a description of the error.
          type:
            - 'outlook!Office.ItemCompose#addItemAttachmentAsync~1:complex'
  - uid: 'outlook!Office.ItemCompose#getSelectedDataAsync:member(1)'
    summary: >-
      Asynchronously returns selected data from the subject or body of a message.


      If there is no selection but the cursor is in the body or subject, the method returns an empty string for the
      selected data. If a field other than the body or subject is selected, the method returns the InvalidSelection
      error.


      To access the selected data from the callback method, call asyncResult.value.data. To access the source property
      that the selection comes from, call asyncResult.value.sourceProperty, which will be either body or subject.


      **Note**: In Outlook on the web, the method returns the string "null" if no text is selected but the cursor is in
      the body.


      \[ [API set: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions,
        callback: (asyncResult: Office.AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: The selected data as a string with format determined by coercionType.
      parameters:
        - id: coercionType
          description: >-
            Requests a format for the data. If Text, the method returns the plain text as a string, removing any HTML
            tags present. If HTML, the method returns the selected text, whether it is plaintext or HTML.
          type:
            - 'outlook!Office.ItemCompose#getSelectedDataAsync~0:complex'
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. asyncContext: Developers can
            provide any object they wish to access in the callback method.
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - 'outlook!Office.ItemCompose#getSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.ItemCompose#getSelectedDataAsync:member(2)'
    summary: >-
      Asynchronously returns selected data from the subject or body of a message.


      If there is no selection but the cursor is in the body or subject, the method returns an empty string for the
      selected data. If a field other than the body or subject is selected, the method returns the InvalidSelection
      error.


      To access the selected data from the callback method, call asyncResult.value.data. To access the source property
      that the selection comes from, call asyncResult.value.sourceProperty, which will be either body or subject.


      **Note**: In Outlook on the web, the method returns the string "null" if no text is selected but the cursor is in
      the body.


      \[ [API set: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult:
        Office.AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: The selected data as a string with format determined by coercionType.
      parameters:
        - id: coercionType
          description: >-
            Requests a format for the data. If Text, the method returns the plain text as a string , removing any HTML
            tags present. If HTML, the method returns the selected text, whether it is plaintext or HTML.
          type:
            - 'outlook!Office.ItemCompose#getSelectedDataAsync~2:complex'
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - 'outlook!Office.ItemCompose#getSelectedDataAsync~3:complex'
  - uid: 'outlook!Office.ItemCompose#removeAttachmentAsync:member(1)'
    summary: >-
      Removes an attachment from a message or appointment.


      The removeAttachmentAsync method removes the attachment with the specified identifier from the item. As a best
      practice, you should use the attachment identifier to remove an attachment only if the same mail app has added
      that attachment in the same session. In Outlook on the web and mobile devices, the attachment identifier is valid
      only within the same session. A session is over when the user closes the app, or if the user starts composing an
      inline form then subsequently pops out the form to continue in a separate window.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**:
      ReadWriteItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose


      **Errors**:


      - InvalidAttachmentId: The attachment identifier does not exist.
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: The identifier of the attachment to remove.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method.
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. If removing the attachment fails, the asyncResult.error property will
            contain an error code with the reason for the failure.
          type:
            - 'outlook!Office.ItemCompose#removeAttachmentAsync~0:complex'
  - uid: 'outlook!Office.ItemCompose#removeAttachmentAsync:member(2)'
    summary: >-
      Removes an attachment from a message or appointment.


      The removeAttachmentAsync method removes the attachment with the specified identifier from the item. As a best
      practice, you should use the attachment identifier to remove an attachment only if the same mail app has added
      that attachment in the same session. In Outlook on the web and mobile devices, the attachment identifier is valid
      only within the same session. A session is over when the user closes the app, or if the user starts composing an
      inline form then subsequently pops out the form to continue in a separate window.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**:
      ReadWriteItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose


      **Errors**:


      - InvalidAttachmentId: The attachment identifier does not exist.
    name: 'removeAttachmentAsync(attachmentId, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: The identifier of the attachment to remove.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult. If removing the attachment fails, the asyncResult.error property will
            contain an error code with the reason for the failure.
          type:
            - 'outlook!Office.ItemCompose#removeAttachmentAsync~1:complex'
  - uid: 'outlook!Office.ItemCompose#setSelectedDataAsync:member(1)'
    summary: >-
      Asynchronously inserts data into the body or subject of a message.


      The setSelectedDataAsync method inserts the specified string at the cursor location in the subject or body of the
      item, or, if text is selected in the editor, it replaces the selected text. If the cursor is not in the body or
      subject field, an error is returned. After insertion, the cursor is placed at the end of the inserted content.


      \[ [API set: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**:
      ReadWriteItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose


      **Errors**:


      - InvalidAttachmentId: The attachment identifier does not exist.
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?:
        (asyncResult: Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be inserted. Data is not to exceed 1,000,000 characters. If more than 1,000,000 characters are
            passed in, an ArgumentOutOfRange exception is thrown.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. asyncContext: Developers
            can provide any object they wish to access in the callback method. coercionType: If text, the current style
            is applied in Outlook on the web and desktop clients. If the field is an HTML editor, only the text data is
            inserted, even if the data is HTML. If html and the field supports HTML (the subject doesn't), the current
            style is applied in Outlook on the web and the default style is applied in Outlook on desktop clients. If
            the field is a text field, an InvalidDataFormat error is returned. If coercionType is not set, the result
            depends on the field: if the field is HTML then HTML is used; if the field is text, then plain text is used.
          type:
            - 'outlook!Office.ItemCompose#setSelectedDataAsync~0:complex'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult.
          type:
            - 'outlook!Office.ItemCompose#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.ItemCompose#setSelectedDataAsync:member(2)'
    summary: >-
      Asynchronously inserts data into the body or subject of a message.


      The setSelectedDataAsync method inserts the specified string at the cursor location in the subject or body of the
      item, or, if text is selected in the editor, it replaces the selected text. If the cursor is not in the body or
      subject field, an error is returned. After insertion, the cursor is placed at the end of the inserted content.


      \[ [API set: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**:
      ReadWriteItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose


      **Errors**:


      - InvalidAttachmentId: The attachment identifier does not exist.
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be inserted. Data is not to exceed 1,000,000 characters. If more than 1,000,000 characters are
            passed in, an ArgumentOutOfRange exception is thrown.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type Office.AsyncResult.
          type:
            - 'outlook!Office.ItemCompose#setSelectedDataAsync~2:complex'
  - uid: 'outlook!Office.ItemCompose#subject:member'
    summary: |-
      Gets or sets the description that appears in the subject field of an item.

      The subject property gets or sets the entire subject of the item, as sent by the email server.

      The subject property returns a Subject object that provides methods to get and set the subject.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - 'outlook!Office.Subject:interface'
references:
  - uid: 'outlook!Office.Item:interface'
    name: Item
  - uid: 'outlook!Office.ItemCompose#addFileAttachmentAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.ItemCompose#addFileAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.ItemCompose#addFileAttachmentAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.ItemCompose#addItemAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.ItemCompose#addItemAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.ItemCompose#getSelectedDataAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'outlook!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.ItemCompose#getSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.ItemCompose#getSelectedDataAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'outlook!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.ItemCompose#getSelectedDataAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.ItemCompose#removeAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.ItemCompose#removeAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.ItemCompose#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.ItemCompose#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.ItemCompose#setSelectedDataAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject:interface'
    name: Subject
