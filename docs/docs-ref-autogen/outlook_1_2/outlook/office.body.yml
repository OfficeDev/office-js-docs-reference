### YamlMime:TSType
name: Office.Body
uid: 'outlook!Office.Body:interface'
package: outlook!
fullName: Office.Body
summary: >-
  The body object provides methods for adding and updating the content of the message or appointment. It is returned in
  the body property of the selected item.
remarks: >-
  \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


  **Known issue with HTML table border colors**


  Outlook on Windows: If you're setting various cell borders to different colors in an HTML table in Compose mode, a
  cell's borders may not reflect the expected color. For the known behavior, visit [OfficeDev/office-js issue
  \#1818](https://github.com/OfficeDev/office-js/issues/1818)<!-- -->.


  **[Minimum permission
  level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
  **read item**


  **[Applicable Outlook
  mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
  Compose or Read


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/add-inline-base64-image.yaml


  const mailItem = Office.context.mailbox.item;

  const base64String =
    "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAnUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN0S+bUAAAAMdFJOUwAQIDBAUI+fr7/P7yEupu8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF8SURBVGhD7dfLdoMwDEVR6Cspzf9/b20QYOthS5Zn0Z2kVdY6O2WULrFYLBaLxd5ur4mDZD14b8ogWS/dtxV+dmx9ysA2QUj9TQRWv5D7HyKwuIW9n0vc8tkpHP0W4BOg3wQ8wtlvA+PC1e8Ao8Ld7wFjQtHvAiNC2e8DdqHqKwCrUPc1gE1AfRVgEXBfB+gF0lcCWoH2tYBOYPpqQCNwfT3QF9i+AegJfN8CtAWhbwJagtS3AbIg9o2AJMh9M5C+SVGBvx6zAfmT0r+Bv8JMwP4kyFPir+cswF5KL3WLv14zAFBCLf56Tw9cparFX4upgaJUtPhrOS1QlY5W+vWTXrGgBFB/b72ev3/0igUdQPppP/nfowfKUUEFcP207y/yxKmgAYQ+PywoAFOfCH3A2MdCFzD3kdADBvq10AGG+pXQBgb7pdAEhvuF0AIc/VtoAK7+JciAs38KIuDugyAC/v4hiMCE/i7IwLRBsh68N2WQjMVisVgs9i5bln8LGScNcCrONQAAAABJRU5ErkJggg==";

  // Get the current body of the message or appointment.

  mailItem.body.getAsync(Office.CoercionType.Html, (bodyResult) => {
    if (bodyResult.status === Office.AsyncResultStatus.Succeeded) {
      // Insert the Base64-encoded image to the beginning of the body.
      const options = { isInline: true, asyncContext: bodyResult.value };
      mailItem.addFileAttachmentFromBase64Async(base64String, "sample.png", options, (attachResult) => {
        if (attachResult.status === Office.AsyncResultStatus.Succeeded) {
          let body = attachResult.asyncContext;
          body = body.replace("<p class=MsoNormal>", `<p class=MsoNormal><img src="cid:sample.png">`);

          mailItem.body.setAsync(body, { coercionType: Office.CoercionType.Html }, (setResult) => {
            if (setResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log("Inline Base64-encoded image added to the body.");
            } else {
              console.log(setResult.error.message);
            }
          });
        } else {
          console.log(attachResult.error.message);
        }
      });
    } else {
      console.log(bodyResult.error.message);
    }
  });

  ```
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: 'getTypeAsync(options, callback)'
    uid: 'outlook!Office.Body#getTypeAsync:member(1)'
    package: outlook!
    fullName: 'getTypeAsync(options, callback)'
    summary: Gets a value that indicates whether the content is in HTML or text format.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Important**: In Outlook on Android and on iOS, this method isn't supported in the Message Compose mode. Only
      the Appointment Organizer mode is supported. For more information on supported APIs in Outlook mobile, see
      [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-body-format.yaml


      // Get the mail item's body format (plain text or HTML) and log it to the console.

      Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        console.log("Body format: " + asyncResult.value);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getTypeAsync(options: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<Office.CoercionType>) => void): void;
      parameters:
        - id: options
          description: >-
            An object literal that contains one or more of the following properties:- `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback function.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. The content type is returned as one of the `CoercionType`
            values in the `asyncResult.value` property.
          type: >-
            (asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref
            uid="office!Office.CoercionType:enum" />&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: getTypeAsync(callback)
    uid: 'outlook!Office.Body#getTypeAsync:member(2)'
    package: outlook!
    fullName: getTypeAsync(callback)
    summary: Gets a value that indicates whether the content is in HTML or text format.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Important**: In Outlook on Android and on iOS, this method isn't supported in the Message Compose mode. Only
      the Appointment Organizer mode is supported. For more information on supported APIs in Outlook mobile, see
      [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTypeAsync(callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
      parameters:
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. The content type is returned as one of the `CoercionType`
            values in the `asyncResult.value` property.
          type: >-
            (asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref
            uid="office!Office.CoercionType:enum" />&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'prependAsync(data, options, callback)'
    uid: 'outlook!Office.Body#prependAsync:member(1)'
    package: outlook!
    fullName: 'prependAsync(data, options, callback)'
    summary: Adds the specified content to the beginning of the item body.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Recommended**: Call `getTypeAsync`<!-- -->, then pass the returned value to the `options.coercionType`
      parameter.


      **Important**:


      - After the content is prepended, the position of the cursor depends on which client the add-in is running. In
      Outlook on the web and on Windows
      ([new](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627) and classic), the cursor
      position remains the same in the preexisting content of the body. For example, if the cursor was positioned at the
      beginning of the body prior to the `prependAsync` call, it will appear between the prepended content and the
      preexisting content of the body after the call. In Outlook on Mac, the cursor position isn't preserved. The cursor
      disappears after the `prependAsync` call and only reappears when the user selects something in the body of the
      mail item.


      - When working with HTML-formatted bodies, it's important to note that the client may modify the value passed to
      `prependAsync` to make it render efficiently with its rendering engine. This means that the value returned from a
      subsequent call to the `Body.getAsync` method (introduced in Mailbox 1.3) won't necessarily contain the exact
      value that was passed in the previous `prependAsync` call.


      - When including links in HTML markup, you can disable online link preview by setting the `id` attribute on the
      anchor (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) to "LPNoLP" (see the **Examples** section for a sample).


      - In Outlook on Android and on iOS, this method isn't supported in the Message Compose mode. Only the Appointment
      Organizer mode is supported. For more information on supported APIs in Outlook mobile, see [Outlook JavaScript
      APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      - SVG files aren't supported. Use JPG or PNG files instead.


      - The `prependAsync` method doesn't support inline CSS. Use internal or external CSS instead.


      **Errors**:


      - `DataExceedsMaximumSize`<!-- -->: The data parameter is longer than 1,000,000 characters.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/prepend-text-to-item-body.yaml


      /* This snippet adds text to the beginning of the message or appointment's body. 
        
        When prepending a link in HTML markup to the body, you can disable the online link preview by setting the anchor tag's id attribute to "LPNoLP". For example, '<a id="LPNoLP" href="https://www.contoso.com">Click here!</a>'.
      */

      const text = $("#text-field").val().toString();


      // It's recommended to call getTypeAsync and pass its returned value to the options.coercionType parameter of the
      prependAsync call.

      Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        const bodyFormat = asyncResult.value;
        Office.context.mailbox.item.body.prependAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
            console.log("Action failed with error: " + asyncResult.error.message);
            return;
          }

          console.log(`"${text}" prepended to the body.`);
        });
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        prependAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?:
        (asyncResult: Office.AsyncResult<void>) => void): void;
      parameters:
        - id: data
          description: 'The string to be inserted at the beginning of the body. The string is limited to 1,000,000 characters.'
          type: string
        - id: options
          description: >-
            An object literal that contains one or more of the following properties:- `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback function. `coercionType`<!-- -->: The desired
            format for the body. The string in the `data` parameter will be converted to this format.
          type: >-
            <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref
            uid="outlook!Office.CoercionTypeOptions:interface" />
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. Any errors encountered will be provided in the
            `asyncResult.error` property.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'prependAsync(data, callback)'
    uid: 'outlook!Office.Body#prependAsync:member(2)'
    package: outlook!
    fullName: 'prependAsync(data, callback)'
    summary: Adds the specified content to the beginning of the item body.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Recommended**: Call `getTypeAsync`<!-- -->, then pass the returned value to the `options.coercionType`
      parameter.


      **Important**:


      - After the content is prepended, the position of the cursor depends on which client the add-in is running. In
      Outlook on the web and on Windows
      ([new](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627) and classic), the cursor
      position remains the same in the preexisting content of the body. For example, if the cursor was positioned at the
      beginning of the body prior to the `prependAsync` call, it will appear between the prepended content and the
      preexisting content of the body after the call. In Outlook on Mac, the cursor position isn't preserved. The cursor
      disappears after the `prependAsync` call and only reappears when the user selects something in the body of the
      mail item.


      - When working with HTML-formatted bodies, it's important to note that the client may modify the value passed to
      `prependAsync` to make it render efficiently with its rendering engine. This means that the value returned from a
      subsequent call to the `Body.getAsync` method (introduced in Mailbox 1.3) won't necessarily contain the exact
      value that was passed in the previous `prependAsync` call.


      - When including links in HTML markup, you can disable online link preview by setting the `id` attribute on the
      anchor (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) to "LPNoLP" (see the **Examples** section for a sample).


      - In Outlook on Android and on iOS, this method isn't supported in the Message Compose mode. Only the Appointment
      Organizer mode is supported. For more information on supported APIs in Outlook mobile, see [Outlook JavaScript
      APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      - SVG files aren't supported. Use JPG or PNG files instead.


      - The `prependAsync` method doesn't support inline CSS. Use internal or external CSS instead.


      **Errors**:


      - `DataExceedsMaximumSize`<!-- -->: The data parameter is longer than 1,000,000 characters.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prependAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      parameters:
        - id: data
          description: 'The string to be inserted at the beginning of the body. The string is limited to 1,000,000 characters.'
          type: string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. Any errors encountered will be provided in the
            `asyncResult.error` property.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'setSelectedDataAsync(data, options, callback)'
    uid: 'outlook!Office.Body#setSelectedDataAsync:member(1)'
    package: outlook!
    fullName: 'setSelectedDataAsync(data, options, callback)'
    summary: >-
      Replaces the selection in the body with the specified text.


      The `setSelectedDataAsync` method inserts the specified string at the cursor location in the body of the item, or,
      if text is selected in the editor, it replaces the selected text. If the cursor was never in the body of the item,
      or if the body of the item lost focus in the UI, the string will be inserted at the top of the body content. After
      insertion, the cursor is placed at the end of the inserted content.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Recommended**: Call `getTypeAsync` then pass the returned value to the `options.coercionType` parameter.


      **Important*:


      - When including links in HTML markup, you can disable online link preview by setting the `id` attribute on the
      anchor (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) to "LPNoLP" (see the **Examples** section for a sample).


      - SVG files aren't supported. Use JPG or PNG files instead.


      - The `setSelectedDataAsync` method doesn't support inline CSS. Use internal or external CSS instead.


      **Errors**:


      - `DataExceedsMaximumSize`<!-- -->: The `data` parameter is longer than 1,000,000 characters.


      - `InvalidFormatError`<!-- -->: The `options.coercionType` parameter is set to `Office.CoercionType.Html` and the
      message body is in plain text.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/replace-selected-text.yaml


      /* This snippet replaces selected text in a message or appointment's body with specified text.
        
        If you want to use a link in HTML markup as a value of the setSelectedDataAsync call's data parameter, you can disable online link preview by setting the anchor tag's id attribute to "LPNoLP". For example, '<a id="LPNoLP" href="https://www.contoso.com">Click here!</a>'.
      */

      const text = $("#text-field").val().toString();


      // It's recommended to call getTypeAsync and pass its returned value to the options.coercionType parameter of the
      prependAsync call.

      Office.context.mailbox.item.body.getTypeAsync((asyncResult) => {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Action failed with error: " + asyncResult.error.message);
          return;
        }

        const bodyFormat = asyncResult.value;
        Office.context.mailbox.item.body.setSelectedDataAsync(text, { coercionType: bodyFormat }, (asyncResult) => {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
            console.log("Action failed with error: " + asyncResult.error.message);
            return;
          }

          console.log(`Replaced selected text with "${text}".`);
        });
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        setSelectedDataAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?:
        (asyncResult: Office.AsyncResult<void>) => void): void;
      parameters:
        - id: data
          description: 'The string that will replace the existing body. The string is limited to 1,000,000 characters.'
          type: string
        - id: options
          description: >-
            An object literal that contains one or more of the following properties:- `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback function. `coercionType`<!-- -->: The desired
            format for the body. The string in the `data` parameter will be converted to this format.
          type: >-
            <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref
            uid="outlook!Office.CoercionTypeOptions:interface" />
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. Any errors encountered will be provided in the
            `asyncResult.error` property.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'setSelectedDataAsync(data, callback)'
    uid: 'outlook!Office.Body#setSelectedDataAsync:member(2)'
    package: outlook!
    fullName: 'setSelectedDataAsync(data, callback)'
    summary: >-
      Replaces the selection in the body with the specified text.


      The `setSelectedDataAsync` method inserts the specified string at the cursor location in the body of the item, or,
      if text is selected in the editor, it replaces the selected text. If the cursor was never in the body of the item,
      or if the body of the item lost focus in the UI, the string will be inserted at the top of the body content. After
      insertion, the cursor is placed at the end of the inserted content.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Recommended**: Call `getTypeAsync` then pass the returned value to the `options.coercionType` parameter.


      **Important*:


      - When including links in HTML markup, you can disable online link preview by setting the `id` attribute on the
      anchor (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) to "LPNoLP" (see the **Examples** section for a sample).


      - SVG files aren't supported. Use JPG or PNG files instead.


      - The `setSelectedDataAsync` method doesn't support inline CSS. Use internal or external CSS instead.


      **Errors**:


      - `DataExceedsMaximumSize`<!-- -->: The `data` parameter is longer than 1,000,000 characters.


      - `InvalidFormatError`<!-- -->: The `options.coercionType` parameter is set to `Office.CoercionType.Html` and the
      message body is in plain text.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      parameters:
        - id: data
          description: 'The string that will replace the existing body. The string is limited to 1,000,000 characters.'
          type: string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. Any errors encountered will be provided in the
            `asyncResult.error` property.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
      return:
        type: void
        description: ''
