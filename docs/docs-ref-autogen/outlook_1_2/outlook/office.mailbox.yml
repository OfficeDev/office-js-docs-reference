### YamlMime:TSType
name: Office.Mailbox
uid: 'outlook!Office.Mailbox:interface'
package: outlook!
fullName: Office.Mailbox
summary: |-
  Provides access to the Microsoft Outlook add-in object model.

  Key properties:

  - `diagnostics`<!-- -->: Provides diagnostic information to an Outlook add-in.

  - `item`<!-- -->: Provides methods and properties for accessing a message or appointment in an Outlook add-in.

  - `userProfile`<!-- -->: Provides information about the user in an Outlook add-in.
remarks: >-
  **[Minimum permission
  level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
  **restricted**


  **[Applicable Outlook
  mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
  Compose or Read
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: diagnostics
    uid: 'outlook!Office.Mailbox#diagnostics:member'
    package: outlook!
    fullName: diagnostics
    summary: >-
      Provides diagnostic information to an Outlook add-in.


      Contains the following members.


      - `hostName` (string): A string that represents the name of the Office application. It should be one of the
      following values: `Outlook`<!-- -->, `OutlookWebApp`<!-- -->, `OutlookIOS`<!-- -->, or `OutlookAndroid`<!-- -->.
      **Note**: The "Outlook" value is returned for Outlook on desktop clients (i.e., Windows and Mac).


      - `hostVersion` (string): A string that represents the version of either the Office application or the Exchange
      Server (e.g., "15.0.468.0"). If the mail add-in is running in Outlook on desktop or on mobile clients, the
      `hostVersion` property returns the version of the application, Outlook. In Outlook on the web, the property
      returns the version of the Exchange Server.


      - `OWAView` (`MailboxEnums.OWAView` or string): An enum (or string literal) that represents the current view of
      Outlook on the web. If the application is not Outlook on the web, then accessing this property results in
      undefined. Outlook on the web has three views (`OneColumn` - displayed when the screen is narrow, `TwoColumns` -
      displayed when the screen is wider, and `ThreeColumns` - displayed when the screen is wide) that correspond to the
      width of the screen and the window, and the number of columns that can be displayed.


      More information is under [Office.Diagnostics](xref:outlook!Office.Diagnostics:interface)<!-- -->.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      Starting with Mailbox requirement set 1.5, you can also use the
      [Office.context.diagnostics](https://learn.microsoft.com/javascript/api/office/office.context?view=outlook-js-1.5&preserve-view=true#office-office-context-diagnostics-member)
      property to get similar information.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-diagnostic-information.yaml


      // This function gets a mailbox's diagnostic information, such as Outlook client and version, and logs it to the
      console.

      const diagnostics = Office.context.mailbox.diagnostics;

      console.log(`Client application: ${diagnostics.hostName}`);

      console.log(`Client version: ${diagnostics.hostVersion}`);


      switch (diagnostics.OWAView) {
        case undefined:
          console.log("Current view (Outlook on the web only): Not applicable. An Outlook desktop client is in use.");
          break;
        case Office.MailboxEnums.OWAView.OneColumnNarrow:
          console.log("Current view (Outlook on the web only): Viewed from an older generation mobile phone");
          break;
        case Office.MailboxEnums.OWAView.OneColumn:
          console.log("Current view (Outlook on the web only): Viewed from a newer generation mobile phone");
          break;
        case Office.MailboxEnums.OWAView.TwoColumns:
          console.log("Current view (Outlook on the web only): Viewed from a tablet");
          break;
        case Office.MailboxEnums.OWAView.ThreeColumns:
          console.log("Current view (Outlook on the web only): Viewed from a desktop computer");
          break;
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'diagnostics: Diagnostics;'
      return:
        type: '<xref uid="outlook!Office.Diagnostics:interface" />'
  - name: ewsUrl
    uid: 'outlook!Office.Mailbox#ewsUrl:member'
    package: outlook!
    fullName: ewsUrl
    summary: Gets the URL of the Exchange Web Services (EWS) endpoint for this email account.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      **Important**:


      - Your app must have the **read item** permission specified in its manifest to call the `ewsUrl` member in
      read mode.


      - In compose mode, you must call the `saveAsync` method before you can use the `ewsUrl` member. Your app must have
      **read/write item** permissions to call the `saveAsync` method.


      - This property isn't supported in Outlook on Android or on iOS. For more information on supported APIs in Outlook
      mobile, see [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      - The `ewsUrl` value can be used by a remote service to make EWS calls to the user's mailbox. For example, you can
      create a remote service to [get attachments from the selected
      item](https://learn.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml


      console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

      const ewsId = Office.context.mailbox.item.itemId;

      console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


      console.log("REST URL: " + Office.context.mailbox.restUrl);

      const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);

      console.log("REST item ID: " + restId);


      const ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);

      console.log("EWS ID (from REST ID): " + ewsId2);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ewsUrl: string;'
      return:
        type: string
  - name: item
    uid: 'outlook!Office.Mailbox#item:member'
    package: outlook!
    fullName: item
    summary: >-
      The mailbox item. Depending on the context in which the add-in opened, the item type may vary. If you want to see
      IntelliSense for only a specific type or mode, cast this item to one of the following:


      [MessageCompose](xref:outlook!Office.MessageCompose:interface)<!-- -->,
      [MessageRead](xref:outlook!Office.MessageRead:interface)<!-- -->,
      [AppointmentCompose](xref:outlook!Office.AppointmentCompose:interface)<!-- -->,
      [AppointmentRead](xref:outlook!Office.AppointmentRead:interface)


      **Important**: `item` can be null if your add-in supports pinning the task pane. For details on how to handle,
      see [Implement a pinnable task pane in
      Outlook](https://learn.microsoft.com/office/dev/add-ins/outlook/pinnable-taskpane#implement-the-event-handler)<!--
      -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        item?: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose
        & AppointmentRead;
      return:
        type: >-
          <xref uid="outlook!Office.Item:interface" /> & <xref uid="outlook!Office.ItemCompose:interface" /> & <xref
          uid="outlook!Office.ItemRead:interface" /> & <xref uid="outlook!Office.Message:interface" /> & <xref
          uid="outlook!Office.MessageCompose:interface" /> & <xref uid="outlook!Office.MessageRead:interface" /> & <xref
          uid="outlook!Office.Appointment:interface" /> & <xref uid="outlook!Office.AppointmentCompose:interface" /> &
          <xref uid="outlook!Office.AppointmentRead:interface" />
  - name: userProfile
    uid: 'outlook!Office.Mailbox#userProfile:member'
    package: outlook!
    fullName: userProfile
    summary: >-
      Information about the user associated with the mailbox. This includes their account type, display name, email
      address, and time zone.


      More information is under [Office.UserProfile](xref:outlook!Office.UserProfile:interface)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'userProfile: UserProfile;'
      return:
        type: '<xref uid="outlook!Office.UserProfile:interface" />'
methods:
  - name: convertToLocalClientTime(timeValue)
    uid: 'outlook!Office.Mailbox#convertToLocalClientTime:member(1)'
    package: outlook!
    fullName: convertToLocalClientTime(timeValue)
    summary: >-
      Gets a dictionary containing time information in local client time.


      The dates and times used by a mail app for Outlook on the web or on desktop clients can use different time zones.
      Outlook uses the client computer time zone; Outlook on the web uses the time zone set on the Exchange Admin Center
      (EAC). You should handle date and time values so that the values you display on the user interface are always
      consistent with the time zone that the user expects.


      If the mail app is running in Outlook on desktop clients, the `convertToLocalClientTime` method will return a
      dictionary object with the values set to the client computer time zone. If the mail app is running in Outlook on
      the web, the `convertToLocalClientTime` method will return a dictionary object with the values set to the time
      zone specified in the EAC.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
      parameters:
        - id: timeValue
          description: A `Date` object.
          type: Date
      return:
        type: '<xref uid="outlook!Office.LocalClientTime:interface" />'
        description: ''
  - name: convertToUtcClientTime(input)
    uid: 'outlook!Office.Mailbox#convertToUtcClientTime:member(1)'
    package: outlook!
    fullName: convertToUtcClientTime(input)
    summary: >-
      Gets a `Date` object from a dictionary containing time information.


      The `convertToUtcClientTime` method converts a dictionary containing a local date and time to a `Date` object with
      the correct values for the local date and time.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      #### Examples


      ```TypeScript

      // Represents 3:37 PM PDT on Monday, August 26, 2019.

      const input = {
          date: 26,
          hours: 15,
          milliseconds: 2,
          minutes: 37,
          month: 7,
          seconds: 2,
          timezoneOffset: -420,
          year: 2019
      };


      // result should be a Date object.

      const result = Office.context.mailbox.convertToUtcClientTime(input);


      // Output should be "2019-08-26T22:37:02.002Z".

      console.log(result.toISOString());

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
      parameters:
        - id: input
          description: The local time value to convert.
          type: '<xref uid="outlook!Office.LocalClientTime:interface" />'
      return:
        type: Date
        description: A Date object with the time expressed in UTC.
  - name: displayAppointmentForm(itemId)
    uid: 'outlook!Office.Mailbox#displayAppointmentForm:member(1)'
    package: outlook!
    fullName: displayAppointmentForm(itemId)
    summary: >-
      Displays an existing calendar appointment.


      The `displayAppointmentForm` method opens an existing calendar appointment in a new window on the desktop.


      In Outlook on Mac, you can use this method to display a single appointment that isn't part of a recurring series,
      or the master appointment of a recurring series. However, you can't display an instance of the series because you
      can't access the properties (including the item ID) of instances of a recurring series.


      In Outlook on the web, this method opens the specified form only if the body of the form is less than or equal to
      32K characters.


      If the specified item identifier does not identify an existing appointment, a blank pane opens on the client
      computer or device, and no error message is returned.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      **Important**: This method isn't supported in Outlook on Android or on iOS. For more information on supported
      APIs in Outlook mobile, see [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml


      const itemId = $("#itemId").val();

      Office.context.mailbox.displayAppointmentForm(itemId);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayAppointmentForm(itemId: string): void;'
      parameters:
        - id: itemId
          description: The Exchange Web Services (EWS) identifier for an existing calendar appointment.
          type: string
      return:
        type: void
        description: ''
  - name: displayMessageForm(itemId)
    uid: 'outlook!Office.Mailbox#displayMessageForm:member(1)'
    package: outlook!
    fullName: displayMessageForm(itemId)
    summary: >-
      Displays an existing message.


      The `displayMessageForm` method opens an existing message in a new window on the desktop.


      In Outlook on the web, this method opens the specified form only if the body of the form is less than or equal to
      32K characters.


      If the specified item identifier doesn't identify an existing message, no message will be displayed on the client
      computer, and no error message is returned.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      **Important**:


      - This method isn't supported in Outlook on Android or on iOS. For more information on supported APIs in Outlook
      mobile, see [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      - Don't use the `displayMessageForm` with an itemId that represents an appointment. Use the
      `displayAppointmentForm` method to display an existing appointment, and `displayNewAppointmentForm` to display a
      form to create a new appointment.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml


      const itemId = $("#itemId").val();

      Office.context.mailbox.displayMessageForm(itemId);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayMessageForm(itemId: string): void;'
      parameters:
        - id: itemId
          description: The Exchange Web Services (EWS) identifier for an existing message.
          type: string
      return:
        type: void
        description: ''
  - name: displayNewAppointmentForm(parameters)
    uid: 'outlook!Office.Mailbox#displayNewAppointmentForm:member(1)'
    package: outlook!
    fullName: displayNewAppointmentForm(parameters)
    summary: >-
      Displays a form for creating a new calendar appointment.


      The `displayNewAppointmentForm` method opens a form that enables the user to create a new appointment or meeting.
      If parameters are specified, the appointment form fields are automatically populated with the contents of the
      parameters.


      In Outlook on the web, this method always displays a form with an attendees field. If you don't specify any
      attendees as input arguments, the method displays a form with a **Save** button. If you have specified
      attendees, the form would include the attendees and a **Send** button.


      In the Outlook rich client and Outlook RT, if you specify any attendees or resources in the
      `requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->, or `resources` parameter, this method displays a meeting
      form with a **Send** button. If you don't specify any recipients, this method displays an appointment form
      with a **Save &amp; Close** button.


      If any of the parameters exceed the specified size limits, or if an unknown parameter name is specified, an
      exception is thrown.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Read


      **Important**: This method isn't supported in Outlook on Android or on iOS. For more information on supported
      APIs in Outlook mobile, see [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml


      const start = new Date();

      const end = new Date();

      end.setHours(start.getHours() + 1);


      Office.context.mailbox.displayNewAppointmentForm({
        requiredAttendees: ["bob@contoso.com"],
        optionalAttendees: ["sam@contoso.com"],
        start: start,
        end: end,
        location: "Home",
        subject: "meeting",
        resources: ["projector@contoso.com"],
        body: "Hello World!"
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
      parameters:
        - id: parameters
          description: An `AppointmentForm` describing the new appointment. All properties are optional.
          type: '<xref uid="outlook!Office.AppointmentForm:interface" />'
      return:
        type: void
        description: ''
  - name: 'getCallbackTokenAsync(callback, userContext)'
    uid: 'outlook!Office.Mailbox#getCallbackTokenAsync:member(1)'
    package: outlook!
    fullName: 'getCallbackTokenAsync(callback, userContext)'
    summary: >-
      Gets a string that contains a token used to get an attachment or item from an Exchange Server.


      The `getCallbackTokenAsync` method makes an asynchronous call to get an opaque token from the Exchange Server that
      hosts the user's mailbox. The lifetime of the callback token is 5 minutes.


      The token is returned as a string in the `asyncResult.value` property.
    remarks: >-
      \[ [API set: All support Read mode; Mailbox 1.3 introduced Compose mode
      support](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      **Important**:


      - In October 2024, legacy Exchange [user
      identity](https://learn.microsoft.com/office/dev/add-ins/outlook/authentication#exchange-user-identity-token) and
      [callback](https://learn.microsoft.com/office/dev/add-ins/outlook/authentication#callback-tokens) tokens will be
      turned off by default for all Exchange Online tenants. This is part of [Microsoft's Secure Future
      Initiative](https://blogs.microsoft.com/on-the-issues/2023/11/02/secure-future-initiative-sfi-cybersecurity-cyberattacks/)<!--
      -->, which gives organizations the tools needed to respond to the current threat landscape. Exchange user identity
      tokens will still work for Exchange on-premises. Nested app authentication is the recommended approach for tokens
      going forward. For more information, see our [blog post](https://aka.ms/NAApreviewblog) and [FAQ
      page](https://learn.microsoft.com/office/dev/add-ins/outlook/faq-nested-app-auth-outlook-legacy-tokens)<!-- -->.


      - You can pass both the token and either an attachment identifier or item identifier to an external system. That
      system uses the token as a bearer authorization token to call the Exchange Web Services (EWS)
      [GetAttachment](https://learn.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation)
      or [GetItem](https://learn.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation)
      operation to return an attachment or item. For example, you can create a remote service to [get attachments from
      the selected item](https://learn.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!--
      -->.


      - Calling the `getCallbackTokenAsync` method in read mode requires a minimum permission level of **read
      item**.


      - Calling the `getCallbackTokenAsync` method in compose mode requires you to have saved the item. The `saveAsync`
      method requires a minimum permission level of **read/write item**.


      - This method isn't supported in Outlook on Android or on iOS. EWS operations aren't supported in add-ins running
      in Outlook on mobile clients. For more information on supported APIs in Outlook mobile, see [Outlook JavaScript
      APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      - For guidance on delegate or shared scenarios, see the [shared folders and shared
      mailbox](https://learn.microsoft.com/office/dev/add-ins/outlook/delegate-access) article.


      **Errors**:


      - `HTTPRequestFailure`<!-- -->: The request has failed. Please look at the diagnostics object for the HTTP error
      code.


      - `InternalServerError`<!-- -->: The Exchange server returned an error. Please look at the diagnostics object for
      more information.


      - `NetworkError`<!-- -->: The user is no longer connected to the network. Please check your network connection and
      try again.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml


      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {
          const ewsId = Office.context.mailbox.item.itemId;
          const token = result.value;
          const restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
          const getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                  
          const xhr = new XMLHttpRequest();
          xhr.open('GET', getMessageUrl);
          xhr.setRequestHeader("Authorization", "Bearer " + token);
          xhr.onload = function (e) {
              console.log(this.response);
          }
          xhr.send();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->. The token is returned as a string in the `asyncResult.value` property.
            If there was an error, the `asyncResult.error` and `asyncResult.diagnostics` properties may provide
            additional information.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
        - id: userContext
          description: Optional. Any state data that is passed to the asynchronous method.
          type: any
      return:
        type: void
        description: ''
  - name: 'getUserIdentityTokenAsync(callback, userContext)'
    uid: 'outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)'
    package: outlook!
    fullName: 'getUserIdentityTokenAsync(callback, userContext)'
    summary: |-
      Gets a token identifying the user and the Office Add-in.

      The token is returned as a string in the `asyncResult.value` property.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      **Important**:


      - In October 2024, legacy Exchange [user
      identity](https://learn.microsoft.com/office/dev/add-ins/outlook/authentication#exchange-user-identity-token) and
      [callback](https://learn.microsoft.com/office/dev/add-ins/outlook/authentication#callback-tokens) tokens will be
      turned off by default for all Exchange Online tenants. This is part of [Microsoft's Secure Future
      Initiative](https://blogs.microsoft.com/on-the-issues/2023/11/02/secure-future-initiative-sfi-cybersecurity-cyberattacks/)<!--
      -->, which gives organizations the tools needed to respond to the current threat landscape. Exchange user identity
      tokens will still work for Exchange on-premises. Nested app authentication is the recommended approach for tokens
      going forward. For more information, see our [blog post](https://aka.ms/NAApreviewblog) and [FAQ
      page](https://learn.microsoft.com/office/dev/add-ins/outlook/faq-nested-app-auth-outlook-legacy-tokens)<!-- -->.


      - The `getUserIdentityTokenAsync` method returns a token that you can use to identify and [authenticate the add-in
      and user with an external system](https://learn.microsoft.com/office/dev/add-ins/outlook/authentication)<!-- -->.


      **Errors**:


      - `HTTPRequestFailure`<!-- -->: The request has failed. Please look at the diagnostics object for the HTTP error
      code.


      - `InternalServerError`<!-- -->: The Exchange server returned an error. Please look at the diagnostics object for
      more information.


      - `NetworkError`<!-- -->: The user is no longer connected to the network. Please check your network connection and
      try again.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml


      Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(`Token retrieval failed with message: ${result.error.message}`);
          } else {
              console.log(result.value);
          }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any):
        void;
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->. The token is returned as a string in the `asyncResult.value` property.
            If there was an error, the `asyncResult.error` and `asyncResult.diagnostics` properties may provide
            additional information.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
        - id: userContext
          description: Optional. Any state data that is passed to the asynchronous method.
          type: any
      return:
        type: void
        description: ''
  - name: 'makeEwsRequestAsync(data, callback, userContext)'
    uid: 'outlook!Office.Mailbox#makeEwsRequestAsync:member(1)'
    package: outlook!
    fullName: 'makeEwsRequestAsync(data, callback, userContext)'
    summary: >-
      Makes an asynchronous request to an Exchange Web Services (EWS) service on the Exchange server that hosts the
      user's mailbox.


      The `makeEwsRequestAsync` method sends an EWS request on behalf of the add-in to Exchange.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write mailbox**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      **Important**:


      - In October 2024, legacy Exchange [user
      identity](https://learn.microsoft.com/office/dev/add-ins/outlook/authentication#exchange-user-identity-token) and
      [callback](https://learn.microsoft.com/office/dev/add-ins/outlook/authentication#callback-tokens) tokens will be
      turned off by default for all Exchange Online tenants. This is part of [Microsoft's Secure Future
      Initiative](https://blogs.microsoft.com/on-the-issues/2023/11/02/secure-future-initiative-sfi-cybersecurity-cyberattacks/)<!--
      -->, which gives organizations the tools needed to respond to the current threat landscape. Exchange user identity
      tokens will still work for Exchange on-premises. Nested app authentication is the recommended approach for tokens
      going forward. For more information, see our [blog post](https://aka.ms/NAApreviewblog) and [FAQ
      page](https://learn.microsoft.com/office/dev/add-ins/outlook/faq-nested-app-auth-outlook-legacy-tokens)<!-- -->.


      - To enable the `makeEwsRequestAsync` method to make EWS requests, the server administrator must set
      `OAuthAuthentication` to `true` on the Client Access Server EWS directory .


      - Your add-in must have the **read/write mailbox** permission to use the `makeEwsRequestAsync` method. For
      information about using the **read/write mailbox** permission and the EWS operations that you can call with
      the `makeEwsRequestAsync` method, see [Specify permissions for mail add-in access to the user's
      mailbox](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->.


      - If your add-in needs to access Folder Associated Items or its XML request must specify UTF-8 encoding (`\<?xml
      version="1.0" encoding="utf-8"?\>`<!-- -->), it must use Microsoft Graph or REST APIs to access the user's mailbox
      instead.


      - This method isn't supported in Outlook on Android or on iOS. For more information on supported APIs in Outlook
      mobile, see [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      - This method isn't supported when the add-in is loaded in a Gmail mailbox.


      - When you use the `makeEwsRequestAsync` method in add-ins that run in Outlook versions earlier than Version
      15.0.4535.1004, you must set the encoding value to ISO-8859-1 (`<?xml version="1.0" encoding="iso-8859-1"?>`<!--
      -->). To determine the version of an Outlook client, use the `mailbox.diagnostics.hostVersion` property. You don't
      need to set the encoding value when your add-in is running in Outlook on the web. To determine the Outlook client
      in which your add-in is running, use the `mailbox.diagnostics.hostName` property.


      #### Examples


      ```TypeScript

      function getSubjectRequest(id) {
          // Return a GetItem operation request for the subject of the specified item.
          const request =
              '<?xml version="1.0" encoding="utf-8"?>' +
              '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
              '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
              '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
              '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
              '  <soap:Header>' +
              '    <RequestServerVersion Version="Exchange2016" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
              '  </soap:Header>' +
              '  <soap:Body>' +
              '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
              '      <ItemShape>' +
              '        <t:BaseShape>IdOnly</t:BaseShape>' +
              '        <t:AdditionalProperties>' +
              '            <t:FieldURI FieldURI="item:Subject"/>' +
              '        </t:AdditionalProperties>' +
              '      </ItemShape>' +
              '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
              '    </GetItem>' +
              '  </soap:Body>' +
              '</soap:Envelope>';

          return request;
      }


      function sendRequest() {
          // Create a local variable that contains the mailbox.
          Office.context.mailbox.makeEwsRequestAsync(
              getSubjectRequest(mailbox.item.itemId), callback);
      }


      function callback(asyncResult)  {
          const result = asyncResult.value;
          const context = asyncResult.asyncContext;

          // Process the returned response here.
      }

      ```

      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/get-icaluid-as-attendee.yaml


      const ewsId = Office.context.mailbox.item.itemId;

      const request = `<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
      xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
      xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
            <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>
            <soap:Body>
              <m:GetItem>
                <m:ItemShape>
                  <t:BaseShape>AllProperties</t:BaseShape>
                </m:ItemShape >
                <m:ItemIds>
                  <t:ItemId Id="${ewsId}" />
                </m:ItemIds>
              </m:GetItem>
            </soap:Body>
          </soap:Envelope>`;

      Office.context.mailbox.makeEwsRequestAsync(request, (result) => {
        if (result.status === Office.AsyncResultStatus.Failed) {
          console.error(result.error.message);
          return;
        }

        console.log(getUID(result.value));
      });


      ...


      const request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
      xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
      xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
          '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
          '  <soap:Body>'+
          '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
          '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
          '      <m:Items>'+
          '        <t:Message>'+
          '          <t:Subject>Hello, Outlook!</t:Subject>'+
          '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
          '          <t:ToRecipients>'+
          '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
          '          </t:ToRecipients>'+
          '        </t:Message>'+
          '      </m:Items>'+
          '    </m:CreateItem>'+
          '  </soap:Body>'+
          '</soap:Envelope>';

      Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
          console.log(result);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?:
        any): void;
      parameters:
        - id: data
          description: The EWS request.
          type: any
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object. The XML response of the EWS
            request is provided as a string in the `asyncResult.value` property. In Outlook on the web, on Windows
            (starting in Version 2303 (Build 16225.10000)), and on Mac (starting in Version 16.73 (23042601)), if the
            response exceeds 5 MB in size, an error message is returned in the `asyncResult.error` property. In earlier
            versions of the Outlook desktop client, an error message is returned if the response exceeds 1 MB in size.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
        - id: userContext
          description: Optional. Any state data that is passed to the asynchronous method.
          type: any
      return:
        type: void
        description: ''
