### YamlMime:TSType
name: Excel.TableColumn
uid: 'excel!Excel.TableColumn:class'
package: excel!
fullName: Excel.TableColumn
summary: Represents a column in a table.
remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.TableColumn#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: filter
    uid: 'excel!Excel.TableColumn#filter:member'
    package: excel!
    fullName: filter
    summary: Retrieves the filter applied to the column.
    remarks: '\[ [API set: ExcelApi 1.2](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly filter: Excel.Filter;'
      return:
        type: '<xref uid="excel!Excel.Filter:class" />'
  - name: id
    uid: 'excel!Excel.TableColumn#id:member'
    package: excel!
    fullName: id
    summary: Returns a unique key that identifies the column within the table.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: number;'
      return:
        type: number
  - name: index
    uid: 'excel!Excel.TableColumn#index:member'
    package: excel!
    fullName: index
    summary: Returns the index number of the column within the columns collection of the table. Zero-indexed.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly index: number;'
      return:
        type: number
  - name: name
    uid: 'excel!Excel.TableColumn#name:member'
    package: excel!
    fullName: name
    summary: Specifies the name of the table column.
    remarks: >-
      \[ [API set: ExcelApi 1.1 for getting the name; 1.4 for setting
      it.](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: values
    uid: 'excel!Excel.TableColumn#values:member'
    package: excel!
    fullName: values
    summary: >-
      Represents the raw values of the specified range. The data returned could be a string, number, or boolean. Cells
      that contain an error will return the error string. If the returned value starts with a plus ("+"), minus ("-"),
      or equal sign ("="), Excel interprets this value as a formula.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'values: any[][];'
      return:
        type: 'any[][]'
  - name: valuesAsJson
    uid: 'excel!Excel.TableColumn#valuesAsJson:member'
    package: excel!
    fullName: valuesAsJson
    summary: >-
      A JSON representation of the values in the cells in this table column. Unlike `TableColumn.values`<!-- -->,
      `TableColumn.valuesAsJson` supports all data types which can be in a cell. Examples include formatted number
      values and web images, in addition to the standard boolean, number, and string values. Data returned from this API
      always aligns with the en-US locale. To retrieve data in the user's display locale, use
      `TableColumn.valuesAsJsonLocal`<!-- -->.
    remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'valuesAsJson: CellValue[][];'
      return:
        type: '<xref uid="excel!Excel.CellValue:type" />[][]'
  - name: valuesAsJsonLocal
    uid: 'excel!Excel.TableColumn#valuesAsJsonLocal:member'
    package: excel!
    fullName: valuesAsJsonLocal
    summary: >-
      A JSON representation of the values in the cells in this table column. Unlike `TableColumn.values`<!-- -->,
      `TableColumn.valuesAsJsonLocal` supports all data types which can be in a cell. Examples include formatted number
      values and web images, in addition to the standard boolean, number, and string values. Data returned from this API
      always aligns with the user's display locale. To retrieve data independent of locale, use
      `TableColumn.valuesAsJson`<!-- -->.
    remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'valuesAsJsonLocal: CellValue[][];'
      return:
        type: '<xref uid="excel!Excel.CellValue:type" />[][]'
methods:
  - name: delete()
    uid: 'excel!Excel.TableColumn#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: Deletes the column from the table.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const tableName = 'Table1';
          const column = context.workbook.tables.getItem(tableName).columns.getItemAt(2);
          column.delete();
          await context.sync(); 
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getDataBodyRange()
    uid: 'excel!Excel.TableColumn#getDataBodyRange:member(1)'
    package: excel!
    fullName: getDataBodyRange()
    summary: Gets the range object associated with the data body of the column.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const tableName = 'Table1';
          const column = context.workbook.tables.getItem(tableName).columns.getItemAt(0);
          const dataBodyRange = column.getDataBodyRange();
          dataBodyRange.load('address');
          await context.sync();
          
          console.log(dataBodyRange.address);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataBodyRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: getHeaderRowRange()
    uid: 'excel!Excel.TableColumn#getHeaderRowRange:member(1)'
    package: excel!
    fullName: getHeaderRowRange()
    summary: Gets the range object associated with the header row of the column.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const tableName = 'Table1';
          const columns = context.workbook.tables.getItem(tableName).columns.getItemAt(0);
          const headerRowRange = columns.getHeaderRowRange();
          headerRowRange.load('address');
          await context.sync();
          
          console.log(headerRowRange.address);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHeaderRowRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: getRange()
    uid: 'excel!Excel.TableColumn#getRange:member(1)'
    package: excel!
    fullName: getRange()
    summary: Gets the range object associated with the entire column.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const tableName = 'Table1';
          const columns = context.workbook.tables.getItem(tableName).columns.getItemAt(0);
          const columnRange = columns.getRange();
          columnRange.load('address');
          await context.sync();
          
          console.log(columnRange.address);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: getTotalRowRange()
    uid: 'excel!Excel.TableColumn#getTotalRowRange:member(1)'
    package: excel!
    fullName: getTotalRowRange()
    summary: Gets the range object associated with the totals row of the column.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const tableName = 'Table1';
          const columns = context.workbook.tables.getItem(tableName).columns.getItemAt(0);
          const totalRowRange = columns.getTotalRowRange();
          totalRowRange.load('address');
          await context.sync();
          
          console.log(totalRowRange.address);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTotalRowRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.TableColumn#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.TableColumnLoadOptions): Excel.TableColumn;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="excel!Excel.Interfaces.TableColumnLoadOptions:interface" />'
      return:
        type: '<xref uid="excel!Excel.TableColumn:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.TableColumn#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableColumn;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.TableColumn:class" />'
        description: |-


          #### Examples

          ```TypeScript
          await Excel.run(async (context) => { 
              const tableName = 'Table1';
              const column = context.workbook.tables.getItem(tableName).columns.getItem(0);
              column.load('index');
              await context.sync();
              
              console.log(column.index);
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.TableColumn#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.TableColumn;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.TableColumn:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'excel!Excel.TableColumn#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.TableColumnUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="excel!Excel.Interfaces.TableColumnUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.TableColumn#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.TableColumn): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.TableColumn:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.TableColumn#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `Excel.TableColumn` object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `Excel.Interfaces.TableColumnData`<!-- -->) that contains shallow copies of any
      loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableColumnData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.TableColumnData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
