### YamlMime:TSType
name: Excel.CustomConditionalFormat
uid: 'excel!Excel.CustomConditionalFormat:class'
package: excel!
fullName: Excel.CustomConditionalFormat
summary: >-
  Represents a custom conditional format type.


  \[ [API set: ExcelApi
  1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.CustomConditionalFormat#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: format
    uid: 'excel!Excel.CustomConditionalFormat#format:member'
    package: excel!
    fullName: format
    summary: >-
      Returns a format object, encapsulating the conditional formats font, fill,
      borders, and other properties.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly format: Excel.ConditionalRangeFormat;'
      return:
        type: '<xref uid="excel!Excel.ConditionalRangeFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });

          ```
  - name: rule
    uid: 'excel!Excel.CustomConditionalFormat#rule:member'
    package: excel!
    fullName: rule
    summary: >-
      Specifies the Rule object on this conditional format.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rule: Excel.ConditionalFormatRule;'
      return:
        type: '<xref uid="excel!Excel.ConditionalFormatRule:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) {
              var sheet = ctx.workbook.worksheets.getActiveWorksheet();
              var range = sheet.getRange("A1:A5");
              range.values = [[1], [20], [""], [5], ["test"]];
              var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              var cfCustom = cf.customOrNullObject;
              cfCustom.rule.formula = "=ISBLANK(A1)";
              cfCustom.format.fill.color = "#00FF00";
              return ctx.sync().then(function () {
                  console.log("Added new custom conditional format highlighting all blank cells.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
methods:
  - name: load(options)
    uid: 'excel!Excel.CustomConditionalFormat#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.CustomConditionalFormatLoadOptions):
        Excel.CustomConditionalFormat;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.CustomConditionalFormatLoadOptions:interface"
            />
      return:
        type: '<xref uid="excel!Excel.CustomConditionalFormat:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.CustomConditionalFormat#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomConditionalFormat;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.CustomConditionalFormat:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.CustomConditionalFormat#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.CustomConditionalFormat;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.CustomConditionalFormat:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'excel!Excel.CustomConditionalFormat#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.CustomConditionalFormat): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.CustomConditionalFormatUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.CustomConditionalFormatUpdateData:interface"
            />
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.CustomConditionalFormat#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.CustomConditionalFormat): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.CustomConditionalFormat:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.CustomConditionalFormat#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      Excel.CustomConditionalFormat object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as
      `Excel.Interfaces.CustomConditionalFormatData`<!-- -->) that contains
      shallow copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomConditionalFormatData;'
      return:
        type: >-
          <xref
          uid="excel!Excel.Interfaces.CustomConditionalFormatData:interface" />
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
