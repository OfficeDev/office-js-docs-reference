### YamlMime:TSType
name: Excel.Setting
uid: 'excel!Excel.Setting:class'
package: excel!
fullName: Excel.Setting
summary: >-
  Setting represents a key-value pair of a setting persisted to the document
  (per file per add-in). These custom key-value pair can be used to store state
  or lifecycle information needed by the content or task-pane add-in. Note that
  settings are persisted in the document and hence it is not a place to store
  any sensitive or protected information such as user information and password.


  \[ [API set: ExcelApi
  1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.Setting#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: key
    uid: 'excel!Excel.Setting#key:member'
    package: excel!
    fullName: key
    summary: >-
      The key that represents the id of the Setting.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly key: string;'
      return:
        type: string
  - name: value
    uid: 'excel!Excel.Setting#value:member'
    package: excel!
    fullName: value
    summary: >-
      Represents the value stored for this setting.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'value: any;'
      return:
        type: any
methods:
  - name: delete()
    uid: 'excel!Excel.Setting#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: >-
      Deletes the setting.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/create-get-change-delete-settings.yaml

          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              let needsReview = settings.getItem("NeedsReview");
              needsReview.delete();
              needsReview = settings.getItemOrNullObject("NeedsReview");

              await context.sync();

              if (needsReview.isNullObject) {
                  console.log("The setting has been deleted");
              } else {
                  console.log("The setting was not deleted");
              }

              await context.sync();
          });

          ```
  - name: load(options)
    uid: 'excel!Excel.Setting#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.SettingLoadOptions): Excel.Setting;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="excel!Excel.Interfaces.SettingLoadOptions:interface" />'
      return:
        type: '<xref uid="excel!Excel.Setting:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.Setting#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Setting;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.Setting:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.Setting#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Setting;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.Setting:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'excel!Excel.Setting#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.Setting): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.SettingUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: '<xref uid="excel!Excel.Interfaces.SettingUpdateData:interface" />'
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.Setting#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.Setting): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.Setting:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.Setting#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Excel.Setting object is
      an API object, the `toJSON` method returns a plain JavaScript object
      (typed as `Excel.Interfaces.SettingData`<!-- -->) that contains shallow
      copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.SettingData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.SettingData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
