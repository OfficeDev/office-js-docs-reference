### YamlMime:TSPackage
uid: word!
name: word
type: package
summary: ''
enums:
  - 'word!Word.Alignment:enum'
  - 'word!Word.BodyType:enum'
  - 'word!Word.BorderLocation:enum'
  - 'word!Word.BorderType:enum'
  - 'word!Word.BreakType:enum'
  - 'word!Word.CellPaddingLocation:enum'
  - 'word!Word.ContentControlAppearance:enum'
  - 'word!Word.ContentControlType:enum'
  - 'word!Word.DocumentPropertyType:enum'
  - 'word!Word.ErrorCodes:enum'
  - 'word!Word.EventType:enum'
  - 'word!Word.FileContentFormat:enum'
  - 'word!Word.HeaderFooterType:enum'
  - 'word!Word.ImageFormat:enum'
  - 'word!Word.InsertLocation:enum'
  - 'word!Word.ListBullet:enum'
  - 'word!Word.ListLevelType:enum'
  - 'word!Word.ListNumbering:enum'
  - 'word!Word.LocationRelation:enum'
  - 'word!Word.RangeLocation:enum'
  - 'word!Word.SelectionMode:enum'
  - 'word!Word.Style:enum'
  - 'word!Word.TapObjectType:enum'
  - 'word!Word.UnderlineType:enum'
  - 'word!Word.VerticalAlignment:enum'
classes:
  - 'word!Word.Application:class'
  - 'word!Word.Body:class'
  - 'word!Word.ContentControl:class'
  - 'word!Word.ContentControlCollection:class'
  - 'word!Word.CustomProperty:class'
  - 'word!Word.CustomPropertyCollection:class'
  - 'word!Word.Document:class'
  - 'word!Word.DocumentCreated:class'
  - 'word!Word.DocumentProperties:class'
  - 'word!Word.Font:class'
  - 'word!Word.InlinePicture:class'
  - 'word!Word.InlinePictureCollection:class'
  - 'word!Word.List:class'
  - 'word!Word.ListCollection:class'
  - 'word!Word.ListItem:class'
  - 'word!Word.Paragraph:class'
  - 'word!Word.ParagraphCollection:class'
  - 'word!Word.Range:class'
  - 'word!Word.RangeCollection:class'
  - 'word!Word.RequestContext:class'
  - 'word!Word.SearchOptions:class'
  - 'word!Word.Section:class'
  - 'word!Word.SectionCollection:class'
  - 'word!Word.Table:class'
  - 'word!Word.TableBorder:class'
  - 'word!Word.TableCell:class'
  - 'word!Word.TableCellCollection:class'
  - 'word!Word.TableCollection:class'
  - 'word!Word.TableRow:class'
  - 'word!Word.TableRowCollection:class'
interfaces:
  - 'word!Word.Interfaces.BodyData:interface'
  - 'word!Word.Interfaces.BodyLoadOptions:interface'
  - 'word!Word.Interfaces.BodyUpdateData:interface'
  - 'word!Word.Interfaces.CollectionLoadOptions:interface'
  - 'word!Word.Interfaces.ContentControlCollectionData:interface'
  - 'word!Word.Interfaces.ContentControlCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.ContentControlCollectionUpdateData:interface'
  - 'word!Word.Interfaces.ContentControlData:interface'
  - 'word!Word.Interfaces.ContentControlLoadOptions:interface'
  - 'word!Word.Interfaces.ContentControlUpdateData:interface'
  - 'word!Word.Interfaces.CustomPropertyCollectionData:interface'
  - 'word!Word.Interfaces.CustomPropertyCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.CustomPropertyCollectionUpdateData:interface'
  - 'word!Word.Interfaces.CustomPropertyData:interface'
  - 'word!Word.Interfaces.CustomPropertyLoadOptions:interface'
  - 'word!Word.Interfaces.CustomPropertyUpdateData:interface'
  - 'word!Word.Interfaces.DocumentCreatedData:interface'
  - 'word!Word.Interfaces.DocumentCreatedLoadOptions:interface'
  - 'word!Word.Interfaces.DocumentCreatedUpdateData:interface'
  - 'word!Word.Interfaces.DocumentData:interface'
  - 'word!Word.Interfaces.DocumentLoadOptions:interface'
  - 'word!Word.Interfaces.DocumentPropertiesData:interface'
  - 'word!Word.Interfaces.DocumentPropertiesLoadOptions:interface'
  - 'word!Word.Interfaces.DocumentPropertiesUpdateData:interface'
  - 'word!Word.Interfaces.DocumentUpdateData:interface'
  - 'word!Word.Interfaces.FontData:interface'
  - 'word!Word.Interfaces.FontLoadOptions:interface'
  - 'word!Word.Interfaces.FontUpdateData:interface'
  - 'word!Word.Interfaces.InlinePictureCollectionData:interface'
  - 'word!Word.Interfaces.InlinePictureCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.InlinePictureCollectionUpdateData:interface'
  - 'word!Word.Interfaces.InlinePictureData:interface'
  - 'word!Word.Interfaces.InlinePictureLoadOptions:interface'
  - 'word!Word.Interfaces.InlinePictureUpdateData:interface'
  - 'word!Word.Interfaces.ListCollectionData:interface'
  - 'word!Word.Interfaces.ListCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.ListCollectionUpdateData:interface'
  - 'word!Word.Interfaces.ListData:interface'
  - 'word!Word.Interfaces.ListItemData:interface'
  - 'word!Word.Interfaces.ListItemLoadOptions:interface'
  - 'word!Word.Interfaces.ListItemUpdateData:interface'
  - 'word!Word.Interfaces.ListLoadOptions:interface'
  - 'word!Word.Interfaces.ParagraphCollectionData:interface'
  - 'word!Word.Interfaces.ParagraphCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.ParagraphCollectionUpdateData:interface'
  - 'word!Word.Interfaces.ParagraphData:interface'
  - 'word!Word.Interfaces.ParagraphLoadOptions:interface'
  - 'word!Word.Interfaces.ParagraphUpdateData:interface'
  - 'word!Word.Interfaces.RangeCollectionData:interface'
  - 'word!Word.Interfaces.RangeCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.RangeCollectionUpdateData:interface'
  - 'word!Word.Interfaces.RangeData:interface'
  - 'word!Word.Interfaces.RangeLoadOptions:interface'
  - 'word!Word.Interfaces.RangeUpdateData:interface'
  - 'word!Word.Interfaces.SearchOptionsData:interface'
  - 'word!Word.Interfaces.SearchOptionsLoadOptions:interface'
  - 'word!Word.Interfaces.SearchOptionsUpdateData:interface'
  - 'word!Word.Interfaces.SectionCollectionData:interface'
  - 'word!Word.Interfaces.SectionCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.SectionCollectionUpdateData:interface'
  - 'word!Word.Interfaces.SectionData:interface'
  - 'word!Word.Interfaces.SectionLoadOptions:interface'
  - 'word!Word.Interfaces.SectionUpdateData:interface'
  - 'word!Word.Interfaces.TableBorderData:interface'
  - 'word!Word.Interfaces.TableBorderLoadOptions:interface'
  - 'word!Word.Interfaces.TableBorderUpdateData:interface'
  - 'word!Word.Interfaces.TableCellCollectionData:interface'
  - 'word!Word.Interfaces.TableCellCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.TableCellCollectionUpdateData:interface'
  - 'word!Word.Interfaces.TableCellData:interface'
  - 'word!Word.Interfaces.TableCellLoadOptions:interface'
  - 'word!Word.Interfaces.TableCellUpdateData:interface'
  - 'word!Word.Interfaces.TableCollectionData:interface'
  - 'word!Word.Interfaces.TableCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.TableCollectionUpdateData:interface'
  - 'word!Word.Interfaces.TableData:interface'
  - 'word!Word.Interfaces.TableLoadOptions:interface'
  - 'word!Word.Interfaces.TableRowCollectionData:interface'
  - 'word!Word.Interfaces.TableRowCollectionLoadOptions:interface'
  - 'word!Word.Interfaces.TableRowCollectionUpdateData:interface'
  - 'word!Word.Interfaces.TableRowData:interface'
  - 'word!Word.Interfaces.TableRowLoadOptions:interface'
  - 'word!Word.Interfaces.TableRowUpdateData:interface'
  - 'word!Word.Interfaces.TableUpdateData:interface'
functions:
  - name: 'Word.run(objects, batch)'
    uid: 'word!Word.run:function(1)'
    package: word!
    summary: >-
      Executes a batch script that performs actions on the Word object model,
      using the RequestContext of previously created API objects.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(objects: OfficeExtension.ClientObject[], batch:
        (context: Word.RequestContext) => Promise<T>): Promise<T>;
      parameters:
        - id: objects
          description: >-
            An array of previously created API objects. The array will be
            validated to make sure that all of the objects share the same
            context. The batch will use this shared RequestContext, which means
            that any changes applied to these objects will be picked up by
            "context.sync()".
          type: '<xref uid="office!OfficeExtension.ClientObject:class" />[]'
        - id: batch
          description: >-
            A function that takes in a RequestContext and returns a promise
            (typically, just the result of "context.sync()"). The context
            parameter facilitates requests to the Word application. Since the
            Office add-in and the Word application run in two different
            processes, the RequestContext is required to get access to the Word
            object model from the add-in.
          type: >-
            (context: <xref uid="word!Word.RequestContext:class" />) =&gt;
            Promise&lt;T&gt;
      return:
        type: Promise&lt;T&gt;
        description: ''
  - name: 'Word.run(object, batch)'
    uid: 'word!Word.run:function(2)'
    package: word!
    summary: >-
      Executes a batch script that performs actions on the Word object model,
      using the RequestContext of a previously created API object. When the
      promise is resolved, any tracked objects that were automatically allocated
      during execution will be released.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(object: OfficeExtension.ClientObject, batch:
        (context: Word.RequestContext) => Promise<T>): Promise<T>;
      parameters:
        - id: object
          description: >-
            A previously created API object. The batch will use the same
            RequestContext as the passed-in object, which means that any changes
            applied to the object will be picked up by "context.sync()".
          type: '<xref uid="office!OfficeExtension.ClientObject:class" />'
        - id: batch
          description: >-
            A function that takes in a RequestContext and returns a promise
            (typically, just the result of "context.sync()"). The context
            parameter facilitates requests to the Word application. Since the
            Office add-in and the Word application run in two different
            processes, the RequestContext is required to get access to the Word
            object model from the add-in.
          type: >-
            (context: <xref uid="word!Word.RequestContext:class" />) =&gt;
            Promise&lt;T&gt;
      return:
        type: Promise&lt;T&gt;
        description: ''
  - name: Word.run(batch)
    uid: 'word!Word.run:function(3)'
    package: word!
    summary: >-
      Executes a batch script that performs actions on the Word object model,
      using a new RequestContext. When the promise is resolved, any tracked
      objects that were automatically allocated during execution will be
      released.
    remarks: >-
      In addition to this signature, the method also has the following
      signatures, which allow you to resume using the request context of
      previously created objects:


      run<T>(object: OfficeExtension.ClientObject, batch: (context:
      Word.RequestContext) =<!-- -->&gt; Promise<T>): Promise<T>;


      run<T>(objects: OfficeExtension.ClientObject\[\], batch: (context:
      Word.RequestContext) =<!-- -->&gt; Promise<T>): Promise<T>;
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(batch: (context: Word.RequestContext) =>
        Promise<T>): Promise<T>;
      parameters:
        - id: batch
          description: >-
            A function that takes in a RequestContext and returns a promise
            (typically, just the result of "context.sync()"). The context
            parameter facilitates requests to the Word application. Since the
            Office add-in and the Word application run in two different
            processes, the RequestContext is required to get access to the Word
            object model from the add-in.
          type: >-
            (context: <xref uid="word!Word.RequestContext:class" />) =&gt;
            Promise&lt;T&gt;
      return:
        type: Promise&lt;T&gt;
        description: ''
