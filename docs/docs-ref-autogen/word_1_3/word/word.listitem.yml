### YamlMime:UniversalReference
items:
  - uid: 'word!Word.ListItem:class'
    summary: |-
      Represents the paragraph list item format.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: Word.ListItem
    fullName: Word.ListItem
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.ListItem#context:member'
      - 'word!Word.ListItem#getAncestor:member(1)'
      - 'word!Word.ListItem#getAncestorOrNullObject:member(1)'
      - 'word!Word.ListItem#getDescendants:member(1)'
      - 'word!Word.ListItem#level:member'
      - 'word!Word.ListItem#listString:member'
      - 'word!Word.ListItem#load:member(1)'
      - 'word!Word.ListItem#load:member(2)'
      - 'word!Word.ListItem#load:member(3)'
      - 'word!Word.ListItem#set:member(1)'
      - 'word!Word.ListItem#set:member(2)'
      - 'word!Word.ListItem#siblingIndex:member'
      - 'word!Word.ListItem#toJSON:member(1)'
      - 'word!Word.ListItem#track:member(1)'
      - 'word!Word.ListItem#untrack:member(1)'
  - uid: 'word!Word.ListItem#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.ListItem#getAncestor:member(1)'
    summary: >-
      Gets the list item parent, or the closest ancestor if the parent does not exist. Throws an error if the list item
      has no ancestor.


      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getAncestor(parentOnly)
    fullName: getAncestor(parentOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAncestor(parentOnly?: boolean): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: parentOnly
          description: >-
            Optional. Specifies only the list item's parent will be returned. The default is false that specifies to get
            the lowest ancestor.
          type:
            - boolean
  - uid: 'word!Word.ListItem#getAncestorOrNullObject:member(1)'
    summary: >-
      Gets the list item parent, or the closest ancestor if the parent does not exist. Returns a null object if the list
      item has no ancestor.


      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getAncestorOrNullObject(parentOnly)
    fullName: getAncestorOrNullObject(parentOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAncestorOrNullObject(parentOnly?: boolean): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: parentOnly
          description: >-
            Optional. Specifies only the list item's parent will be returned. The default is false that specifies to get
            the lowest ancestor.
          type:
            - boolean
  - uid: 'word!Word.ListItem#getDescendants:member(1)'
    summary: |-
      Gets all descendant list items of the list item.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getDescendants(directChildrenOnly)
    fullName: getDescendants(directChildrenOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDescendants(directChildrenOnly?: boolean): Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: ''
      parameters:
        - id: directChildrenOnly
          description: >-
            Optional. Specifies only the list item's direct children will be returned. The default is false that
            indicates to get all descendant items.
          type:
            - boolean
  - uid: 'word!Word.ListItem#level:member'
    summary: |-
      Gets or sets the level of the item in the list.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: level
    fullName: level
    langs:
      - typeScript
    type: property
    syntax:
      content: 'level: number;'
      return:
        type:
          - number
  - uid: 'word!Word.ListItem#listString:member'
    summary: |-
      Gets the list item bullet, number, or picture as a string. Read-only.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: listString
    fullName: listString
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly listString: string;'
      return:
        type:
          - string
  - uid: 'word!Word.ListItem#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Word.ListItem` - Where option is a comma-delimited string or an array of
      strings that specify the properties to load.


      `load(option?: { select?: string; expand?: string; }): Word.ListItem` - Where option.select is a comma-delimited
      string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the
      navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ListItem` - Only available
      on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of
      collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.ListItemLoadOptions): Word.ListItem;'
      return:
        type:
          - 'word!Word.ListItem:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.Interfaces.ListItemLoadOptions:interface'
  - uid: 'word!Word.ListItem#load:member(2)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.ListItem;'
      return:
        type:
          - 'word!Word.ListItem:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'word!Word.ListItem#load:member(3)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.ListItem;'
      return:
        type:
          - 'word!Word.ListItem:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and
            propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'word!Word.ListItem#set:member(1)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Word.ListItem): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ListItemUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - 'word!Word.Interfaces.ListItemUpdateData:interface'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - 'office!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.ListItem#set:member(2)'
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.ListItem): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.ListItem:class'
  - uid: 'word!Word.ListItem#siblingIndex:member'
    summary: |-
      Gets the list item order number in relation to its siblings. Read-only.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: siblingIndex
    fullName: siblingIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly siblingIndex: number;'
      return:
        type:
          - number
  - uid: 'word!Word.ListItem#toJSON:member(1)'
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Word.ListItem object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.ListItemData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ListItemData;'
      return:
        type:
          - 'word!Word.Interfaces.ListItemData:interface'
        description: ''
  - uid: 'word!Word.ListItem#track:member(1)'
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.ListItem;'
      return:
        type:
          - 'word!Word.ListItem:class'
        description: ''
  - uid: 'word!Word.ListItem#untrack:member(1)'
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.ListItem;'
      return:
        type:
          - 'word!Word.ListItem:class'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Paragraph:class'
    name: Word.Paragraph
  - uid: 'word!Word.ParagraphCollection:class'
    name: Word.ParagraphCollection
  - uid: 'word!Word.ListItem:class'
    name: Word.ListItem
  - uid: 'word!Word.Interfaces.ListItemLoadOptions:interface'
    name: Word.Interfaces.ListItemLoadOptions
  - uid: 'word!Word.Interfaces.ListItemUpdateData:interface'
    name: Interfaces.ListItemUpdateData
  - uid: 'office!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Interfaces.ListItemData:interface'
    name: Word.Interfaces.ListItemData
