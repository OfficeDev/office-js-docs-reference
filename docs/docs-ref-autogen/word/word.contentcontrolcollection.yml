### YamlMime:UniversalReference
items:
  - uid: word.Word.ContentControlCollection
    summary: >-
      Contains a collection of \[contentControl\](contentControl.md) objects. Content controls are bounded and
      potentially labeled regions in a document that serve as containers for specific types of content. Individual
      content controls may contain contents such as images, tables, or paragraphs of formatted text. Currently, only
      rich text content controls are supported.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: Word.ContentControlCollection
    fullName: word.Word.ContentControlCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: word
    children:
      - word.Word.ContentControlCollection.getById
      - word.Word.ContentControlCollection.getByIdOrNullObject
      - word.Word.ContentControlCollection.getByTag
      - word.Word.ContentControlCollection.getByTitle
      - word.Word.ContentControlCollection.getByTypes
      - word.Word.ContentControlCollection.getFirst
      - word.Word.ContentControlCollection.getFirstOrNullObject
      - word.Word.ContentControlCollection.getItem
      - word.Word.ContentControlCollection.items
      - word.Word.ContentControlCollection.load
      - word.Word.ContentControlCollection.toJSON
      - word.Word.ContentControlCollection.track
      - word.Word.ContentControlCollection.untrack
  - uid: word.Word.ContentControlCollection.getById
    summary: >-
      Gets a content control by its identifier. Throws if there isn't a content control with the identifier in this
      collection.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getById(id)
    fullName: word.Word.ContentControlCollection.getById
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getById(id: number): Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
        description: ''
      parameters:
        - id: id
          description: Required. A content control identifier.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the content control that contains a specific id.
          var contentControl = context.document.contentControls.getById(30086310);

          // Queue a command to load the text property for a content control.
          context.load(contentControl, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The content control with that Id has been found in this document.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the content control that contains a specific id.
          var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);

          // Queue a command to load the text property for a content control.
          context.load(contentControl, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              if (contentControl.isNullObject) {
                  console.log('There is no content control with that ID.')
              } else {
                  console.log('The content control with that ID has been found in this document.');
              }
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.ContentControlCollection.getByIdOrNullObject
    summary: >-
      Gets a content control by its identifier. Returns a null object if there isn't a content control with the
      identifier in this collection.


      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getByIdOrNullObject(id)
    fullName: word.Word.ContentControlCollection.getByIdOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByIdOrNullObject(id: number): Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
        description: ''
      parameters:
        - id: id
          description: Required. A content control identifier.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the content control that contains a specific id.
          var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);

          // Queue a command to load the text property for a content control.
          context.load(contentControl, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              if (contentControl.isNullObject) {
                  console.log('There is no content control with that ID.')
              } else {
                  console.log('The content control with that ID has been found in this document.');
              }
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.ContentControlCollection.getByTag
    summary: |-
      Gets the content controls that have the specified tag.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getByTag(tag)
    fullName: word.Word.ContentControlCollection.getByTag
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByTag(tag: string): Word.ContentControlCollection;'
      return:
        type:
          - Word.ContentControlCollection
        description: ''
      parameters:
        - id: tag
          description: Required. A tag set on a content control.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the content controls collection that contains a specific tag.
          var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');

          // Queue a command to load the text property for all of content controls with a specific tag.
          context.load(contentControlsWithTag, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              if (contentControlsWithTag.items.length === 0) {
                  console.log("There isn't a content control with a tag of Customer-Address in this document.");
              } else {
                  console.log('The first content control with the tag of Customer-Address has this text: ' + contentControlsWithTag.items[0].text);
              }

          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      // The Word-Add-in-DocumentAssembly sample has another example of using the getByTag method.
      // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
      ```
  - uid: word.Word.ContentControlCollection.getByTitle
    summary: |-
      Gets the content controls that have the specified title.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getByTitle(title)
    fullName: word.Word.ContentControlCollection.getByTitle
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByTitle(title: string): Word.ContentControlCollection;'
      return:
        type:
          - Word.ContentControlCollection
        description: ''
      parameters:
        - id: title
          description: Required. The title of a content control.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the content controls collection that contains a specific title.
          var contentControlsWithTitle = context.document.contentControls.getByTitle('Enter Customer Address Here');

          // Queue a command to load the text property for all of content controls with a specific title.
          context.load(contentControlsWithTitle, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              if (contentControlsWithTitle.items.length === 0) {
                  console.log("There isn't a content control with a title of 'Enter Customer Address Here' in this document.");
              } else {
                  console.log("The first content control with the title of 'Enter Customer Address Here' has this text: " + contentControlsWithTitle.items[0].text);
              }

          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      // The Word-Add-in-DocumentAssembly sample has another example of using the getByTitle method.
      // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
      ```
  - uid: word.Word.ContentControlCollection.getByTypes
    summary: |-
      Gets the content controls that have the specified types and/or subtypes.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getByTypes(types)
    fullName: word.Word.ContentControlCollection.getByTypes
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByTypes(types: Word.ContentControlType[]): Word.ContentControlCollection;'
      return:
        type:
          - Word.ContentControlCollection
        description: ''
      parameters:
        - id: types
          description: Required. An array of content control types and/or subtypes.
          type:
            - 'Word.ContentControlType[]'
  - uid: word.Word.ContentControlCollection.getFirst
    summary: |-
      Gets the first content control in this collection. Throws if this collection is empty.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getFirst()
    fullName: word.Word.ContentControlCollection.getFirst
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(): Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the first content control in the document.
          var contentControl = context.document.contentControls.getFirstOrNullObject();

          // Queue a command to load the text property for a content control.
          context.load(contentControl, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              if (contentControl.isNullObject) {
                  console.log('There are no content controls in this document.')
              } else {
                  console.log('The first content control has been found in this document.');
              }
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.ContentControlCollection.getFirstOrNullObject
    summary: |-
      Gets the first content control in this collection. Returns a null object if this collection is empty.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getFirstOrNullObject()
    fullName: word.Word.ContentControlCollection.getFirstOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirstOrNullObject(): Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
        description: ''
  - uid: word.Word.ContentControlCollection.getItem
    summary: |-
      Gets a content control by its index in the collection.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getItem(index)
    fullName: word.Word.ContentControlCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number): Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
        description: ''
      parameters:
        - id: index
          description: The index.
          type:
            - number
  - uid: word.Word.ContentControlCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: word.Word.ContentControlCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Word.ContentControl[];'
      return:
        type:
          - 'Word.ContentControl[]'
  - uid: word.Word.ContentControlCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: word.Word.ContentControlCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        load(option?: Word.Interfaces.ContentControlCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions):
        Word.ContentControlCollection;
      return:
        type:
          - Word.ContentControlCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Word.Interfaces.ContentControlCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions
    remarks: >


      #### Examples


      ```javascript

      // Run a batch operation against the Word object model.

      Word.run(function (context) {

          // Create a proxy object for the content controls collection.
          var contentControls = context.document.contentControls;

          // Queue a command to load the id property for all of the content controls.
          context.load(contentControls, 'id');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              if (contentControls.items.length === 0) {
                  console.log('No content control found.');
              }
              else {
                  // Queue a command to load the properties on the first content control.
                  contentControls.items[0].load(  'appearance,' +
                                                  'cannotDelete,' +
                                                  'cannotEdit,' +
                                                  'id,' +
                                                  'placeHolderText,' +
                                                  'removeWhenEdited,' +
                                                  'title,' +
                                                  'text,' +
                                                  'type,' +
                                                  'style,' +
                                                  'tag,' +
                                                  'font/size,' +
                                                  'font/name,' +
                                                  'font/color');

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync()
                      .then(function () {
                          console.log('Property values of the first content control:' +
                              '   ----- appearance: ' + contentControls.items[0].appearance +
                              '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +
                              '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +
                              '   ----- color: ' + contentControls.items[0].color +
                              '   ----- id: ' + contentControls.items[0].id +
                              '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +
                              '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +
                              '   ----- title: ' + contentControls.items[0].title +
                              '   ----- text: ' + contentControls.items[0].text +
                              '   ----- type: ' + contentControls.items[0].type +
                              '   ----- style: ' + contentControls.items[0].style +
                              '   ----- tag: ' + contentControls.items[0].tag +
                              '   ----- font size: ' + contentControls.items[0].font.size +
                              '   ----- font name: ' + contentControls.items[0].font.name +
                              '   ----- font color: ' + contentControls.items[0].font.color);
                  });
              }
          });
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      // The Silly stories add-in sample shows how the load method is used to load the content control collection with
      the tag and title properties.

      // https://aka.ms/sillystorywordaddin

      ```
  - uid: word.Word.ContentControlCollection.toJSON
    name: toJSON()
    fullName: word.Word.ContentControlCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ContentControlCollectionData;'
      return:
        type:
          - Word.Interfaces.ContentControlCollectionData
        description: ''
  - uid: word.Word.ContentControlCollection.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: word.Word.ContentControlCollection.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.ContentControlCollection;'
      return:
        type:
          - Word.ContentControlCollection
        description: ''
  - uid: word.Word.ContentControlCollection.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: word.Word.ContentControlCollection.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.ContentControlCollection;'
      return:
        type:
          - Word.ContentControlCollection
        description: ''
