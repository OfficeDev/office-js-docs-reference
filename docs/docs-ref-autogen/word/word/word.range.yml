### YamlMime:TSType
name: Word.Range
uid: 'word!Word.Range:class'
package: word!
fullName: Word.Range
summary: Represents a contiguous area in a document.
remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: contentControls
    uid: 'word!Word.Range#contentControls:member'
    package: word!
    fullName: contentControls
    summary: Gets the collection of content control objects in the range.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type: '<xref uid="word!Word.ContentControlCollection:class" />'
  - name: context
    uid: 'word!Word.Range#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: endnotes
    uid: 'word!Word.Range#endnotes:member'
    package: word!
    fullName: endnotes
    summary: Gets the collection of endnotes in the range.
    remarks: '\[ [API set: WordApiOnline 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly endnotes: Word.NoteItemCollection;'
      return:
        type: '<xref uid="word!Word.NoteItemCollection:class" />'
  - name: fields
    uid: 'word!Word.Range#fields:member'
    package: word!
    fullName: fields
    summary: Gets the collection of field objects in the range.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly fields: Word.FieldCollection;'
      return:
        type: '<xref uid="word!Word.FieldCollection:class" />'
  - name: font
    uid: 'word!Word.Range#font:member'
    package: word!
    fullName: font
    summary: 'Gets the text format of the range. Use this to get and set font name, size, color, and other properties.'
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type: '<xref uid="word!Word.Font:class" />'
  - name: footnotes
    uid: 'word!Word.Range#footnotes:member'
    package: word!
    fullName: footnotes
    summary: Gets the collection of footnotes in the range.
    remarks: >-
      \[ [API set: WordApiOnline 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

      // Get the footnotes in the selected document range.

      await Word.run(async (context) => {
        const footnotes = context.document.getSelection().footnotes;
        footnotes.load("length");
        await context.sync();

        console.log("Number of footnotes in the selected range: " + footnotes.items.length);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly footnotes: Word.NoteItemCollection;'
      return:
        type: '<xref uid="word!Word.NoteItemCollection:class" />'
  - name: hyperlink
    uid: 'word!Word.Range#hyperlink:member'
    package: word!
    fullName: hyperlink
    summary: >-
      Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted
      when you set a new hyperlink on the range. Use a '\#' to separate the address part from the optional location
      part.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hyperlink: string;'
      return:
        type: string
  - name: inlinePictures
    uid: 'word!Word.Range#inlinePictures:member'
    package: word!
    fullName: inlinePictures
    summary: Gets the collection of inline picture objects in the range.
    remarks: '\[ [API set: WordApi 1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type: '<xref uid="word!Word.InlinePictureCollection:class" />'
  - name: isEmpty
    uid: 'word!Word.Range#isEmpty:member'
    package: word!
    fullName: isEmpty
    summary: Checks whether the range length is zero.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly isEmpty: boolean;'
      return:
        type: boolean
  - name: lists
    uid: 'word!Word.Range#lists:member'
    package: word!
    fullName: lists
    summary: Gets the collection of list objects in the range.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly lists: Word.ListCollection;'
      return:
        type: '<xref uid="word!Word.ListCollection:class" />'
  - name: paragraphs
    uid: 'word!Word.Range#paragraphs:member'
    package: word!
    fullName: paragraphs
    summary: >-
      Gets the collection of paragraph objects in the range. **Important**: For requirement sets 1.1 and 1.2, paragraphs
      in tables wholly contained within this range are not returned. From requirement set 1.3, paragraphs in such tables
      are also returned.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
  - name: parentBody
    uid: 'word!Word.Range#parentBody:member'
    package: word!
    fullName: parentBody
    summary: Gets the parent body of the range.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentBody: Word.Body;'
      return:
        type: '<xref uid="word!Word.Body:class" />'
  - name: parentContentControl
    uid: 'word!Word.Range#parentContentControl:member'
    package: word!
    fullName: parentContentControl
    summary: >-
      Gets the content control that contains the range. Throws an `ItemNotFound` error if there isn't a parent content
      control.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
  - name: parentContentControlOrNullObject
    uid: 'word!Word.Range#parentContentControlOrNullObject:member'
    package: word!
    fullName: parentContentControlOrNullObject
    summary: >-
      Gets the content control that contains the range. If there isn't a parent content control, then this method will
      return an object with its `isNullObject` property set to `true`<!-- -->. For further information, see
      [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
  - name: parentTable
    uid: 'word!Word.Range#parentTable:member'
    package: word!
    fullName: parentTable
    summary: Gets the table that contains the range. Throws an `ItemNotFound` error if it is not contained in a table.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTable: Word.Table;'
      return:
        type: '<xref uid="word!Word.Table:class" />'
  - name: parentTableCell
    uid: 'word!Word.Range#parentTableCell:member'
    package: word!
    fullName: parentTableCell
    summary: >-
      Gets the table cell that contains the range. Throws an `ItemNotFound` error if it is not contained in a table
      cell.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTableCell: Word.TableCell;'
      return:
        type: '<xref uid="word!Word.TableCell:class" />'
  - name: parentTableCellOrNullObject
    uid: 'word!Word.Range#parentTableCellOrNullObject:member'
    package: word!
    fullName: parentTableCellOrNullObject
    summary: >-
      Gets the table cell that contains the range. If it is not contained in a table cell, then this method will return
      an object with its `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject
      methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
      return:
        type: '<xref uid="word!Word.TableCell:class" />'
  - name: parentTableOrNullObject
    uid: 'word!Word.Range#parentTableOrNullObject:member'
    package: word!
    fullName: parentTableOrNullObject
    summary: >-
      Gets the table that contains the range. If it is not contained in a table, then this method will return an object
      with its `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentTableOrNullObject: Word.Table;'
      return:
        type: '<xref uid="word!Word.Table:class" />'
  - name: style
    uid: 'word!Word.Range#style:member'
    package: word!
    fullName: style
    summary: >-
      Gets or sets the style name for the range. Use this property for custom styles and localized style names. To use
      the built-in styles that are portable between locales, see the "styleBuiltIn" property.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: string;'
      return:
        type: string
  - name: styleBuiltIn
    uid: 'word!Word.Range#styleBuiltIn:member'
    package: word!
    fullName: styleBuiltIn
    summary: >-
      Gets or sets the built-in style name for the range. Use this property for built-in styles that are portable
      between locales. To use custom styles or localized style names, see the "style" property.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        styleBuiltIn: Word.BuiltInStyleName | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" |
        "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" |
        "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" |
        "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" |
        "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" |
        "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" |
        "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1"
        | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5"
        | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3"
        | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" |
        "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6"
        | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" |
        "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" |
        "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" |
        "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" |
        "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" |
        "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" |
        "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" |
        "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" |
        "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" |
        "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" |
        "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" |
        "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6"
        | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" |
        "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" |
        "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" |
        "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" |
        "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" |
        "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" |
        "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" |
        "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
      return:
        type: >-
          <xref uid="word!Word.BuiltInStyleName:enum" /> | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" |
          "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" |
          "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" |
          "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" |
          "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" |
          "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" |
          "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" |
          "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" |
          "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" |
          "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" |
          "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" |
          "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" |
          "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" |
          "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" |
          "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" |
          "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2"
          | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" |
          "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" |
          "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" |
          "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" |
          "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5"
          | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" |
          "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" |
          "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" |
          "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" |
          "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" |
          "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" |
          "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" |
          "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" |
          "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" |
          "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" |
          "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
  - name: tables
    uid: 'word!Word.Range#tables:member'
    package: word!
    fullName: tables
    summary: Gets the collection of table objects in the range.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly tables: Word.TableCollection;'
      return:
        type: '<xref uid="word!Word.TableCollection:class" />'
  - name: text
    uid: 'word!Word.Range#text:member'
    package: word!
    fullName: text
    summary: Gets the text of the range.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly text: string;'
      return:
        type: string
methods:
  - name: clear()
    uid: 'word!Word.Range#clear:member(1)'
    package: word!
    fullName: clear()
    summary: Clears the contents of the range object. The user can perform the undo operation on the cleared content.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to clear the contents of the proxy range object.
          range.clear();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Cleared the selection (range object)');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: ''
  - name: compareLocationWith(range)
    uid: 'word!Word.Range#compareLocationWith:member(1)'
    package: word!
    fullName: compareLocationWith(range)
    summary: Compares this range's location with another range's location.
    remarks: >-
      \[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/compare-location.yaml

      // Compare the location of one paragraph in relation to another paragraph.

      await Word.run(async (context) => {
        const paragraphs = context.document.body.paragraphs;
        paragraphs.load("items");

        await context.sync();

        const firstParagraphAsRange = paragraphs.items[0].getRange();
        const secondParagraphAsRange = paragraphs.items[1].getRange();

        const comparedLocation = firstParagraphAsRange.compareLocationWith(secondParagraphAsRange);

        await context.sync();

        console.log(`Location of the first paragraph in relation to the second paragraph: ${comparedLocation.value}`);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'compareLocationWith(range: Word.Range): OfficeExtension.ClientResult<Word.LocationRelation>;'
      parameters:
        - id: range
          description: Required. The range to compare with this range.
          type: '<xref uid="word!Word.Range:class" />'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="word!Word.LocationRelation:enum" />&gt;'
        description: ''
  - name: delete()
    uid: 'word!Word.Range#delete:member(1)'
    package: word!
    fullName: delete()
    summary: Deletes the range and its content from the document.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to delete the range object.
          range.delete();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Deleted the selection (range object)');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: expandTo(range)
    uid: 'word!Word.Range#expandTo:member(1)'
    package: word!
    fullName: expandTo(range)
    summary: >-
      Returns a new range that extends from this range in either direction to cover another range. This range is not
      changed. Throws an `ItemNotFound` error if the two ranges do not have a union.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'expandTo(range: Word.Range): Word.Range;'
      parameters:
        - id: range
          description: Required. Another range.
          type: '<xref uid="word!Word.Range:class" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: expandToOrNullObject(range)
    uid: 'word!Word.Range#expandToOrNullObject:member(1)'
    package: word!
    fullName: expandToOrNullObject(range)
    summary: >-
      Returns a new range that extends from this range in either direction to cover another range. This range is not
      changed. If the two ranges do not have a union, then this method will return an object with its `isNullObject`
      property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'expandToOrNullObject(range: Word.Range): Word.Range;'
      parameters:
        - id: range
          description: Required. Another range.
          type: '<xref uid="word!Word.Range:class" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'getBookmarks(includeHidden, includeAdjacent)'
    uid: 'word!Word.Range#getBookmarks:member(1)'
    package: word!
    fullName: 'getBookmarks(includeHidden, includeAdjacent)'
    summary: >-
      Gets the names all bookmarks in or overlapping the range. A bookmark is hidden if its name starts with the
      underscore character.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getBookmarks(includeHidden?: boolean, includeAdjacent?: boolean): OfficeExtension.ClientResult<string[]>;'
      parameters:
        - id: includeHidden
          description: >-
            Optional. Indicates whether to include hidden bookmarks. Default is false which indicates that the hidden
            bookmarks are excluded.
          type: boolean
        - id: includeAdjacent
          description: >-
            Optional. Indicates whether to include bookmarks that are adjacent to the range. Default is false which
            indicates that the adjacent bookmarks are excluded.
          type: boolean
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string[]&gt;'
        description: ''
  - name: getComments()
    uid: 'word!Word.Range#getComments:member(1)'
    package: word!
    fullName: getComments()
    summary: Gets comments associated with the range.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

      // Get the comments in the selected content.

      await Word.run(async (context) => {
        const comments = context.document.getSelection().getComments();

        // Load objects for display in Script Lab console.
        comments.load();
        await context.sync();

        console.log("Comments:");
        console.log(comments);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getComments(): Word.CommentCollection;'
      return:
        type: '<xref uid="word!Word.CommentCollection:class" />'
        description: ''
  - name: getContentControls(options)
    uid: 'word!Word.Range#getContentControls:member(1)'
    package: word!
    fullName: getContentControls(options)
    summary: >-
      Gets the currently supported content controls in the range. **Important**: If specific types are provided in the
      options parameter, only content controls of supported types are returned. Be aware that an exception will be
      thrown on using methods of a generic [Word.ContentControl](xref:word!Word.ContentControl:class) that aren't
      relevant for the specific type. With time, additional types of content controls may be supported. Therefore, your
      add-in should request and handle specific types of content controls.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getContentControls(options?: Word.ContentControlOptions): Word.ContentControlCollection;'
      parameters:
        - id: options
          description: Optional. Options that define which content controls are returned.
          type: '<xref uid="word!Word.ContentControlOptions:interface" />'
      return:
        type: '<xref uid="word!Word.ContentControlCollection:class" />'
        description: ''
  - name: getHtml()
    uid: 'word!Word.Range#getHtml:member(1)'
    package: word!
    fullName: getHtml()
    summary: >-
      Gets an HTML representation of the range object. When rendered in a web page or HTML viewer, the formatting will
      be a close, but not exact, match for of the formatting of the document. This method does not return the exact same
      HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact
      fidelity, or consistency across platforms, use `Range.getOoxml()` and convert the returned XML to HTML.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to get the HTML of the current selection.
          const html = range.getHtml();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The HTML read from the document was: ' + html.value);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getHyperlinkRanges()
    uid: 'word!Word.Range#getHyperlinkRanges:member(1)'
    package: word!
    fullName: getHyperlinkRanges()
    summary: Gets hyperlink child ranges within the range.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHyperlinkRanges(): Word.RangeCollection;'
      return:
        type: '<xref uid="word!Word.RangeCollection:class" />'
        description: ''
  - name: 'getNextTextRange(endingMarks, trimSpacing)'
    uid: 'word!Word.Range#getNextTextRange:member(1)'
    package: word!
    fullName: 'getNextTextRange(endingMarks, trimSpacing)'
    summary: >-
      Gets the next text range by using punctuation marks and/or other ending marks. Throws an `ItemNotFound` error if
      this text range is the last one.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNextTextRange(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
      parameters:
        - id: endingMarks
          description: Required. The punctuation marks and/or other ending marks as an array of strings.
          type: 'string[]'
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end
            marks) from the start and end of the returned range. Default is false which indicates that spacing
            characters at the start and end of the range are included.
          type: boolean
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'getNextTextRangeOrNullObject(endingMarks, trimSpacing)'
    uid: 'word!Word.Range#getNextTextRangeOrNullObject:member(1)'
    package: word!
    fullName: 'getNextTextRangeOrNullObject(endingMarks, trimSpacing)'
    summary: >-
      Gets the next text range by using punctuation marks and/or other ending marks. If this text range is the last one,
      then this method will return an object with its `isNullObject` property set to `true`<!-- -->. For further
      information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNextTextRangeOrNullObject(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
      parameters:
        - id: endingMarks
          description: Required. The punctuation marks and/or other ending marks as an array of strings.
          type: 'string[]'
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end
            marks) from the start and end of the returned range. Default is false which indicates that spacing
            characters at the start and end of the range are included.
          type: boolean
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: getOoxml()
    uid: 'word!Word.Range#getOoxml:member(1)'
    package: word!
    fullName: getOoxml()
    summary: Gets the OOXML representation of the range object.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to get the OOXML of the current selection.
          const ooxml = range.getOoxml();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('The OOXML read from the document was:  ' + ooxml.value);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getRange(rangeLocation)
    uid: 'word!Word.Range#getRange:member(1)'
    package: word!
    fullName: getRange(rangeLocation)
    summary: 'Clones the range, or gets the starting or ending point of the range as a new range.'
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getRange(rangeLocation?: Word.RangeLocation.whole | Word.RangeLocation.start | Word.RangeLocation.end |
        Word.RangeLocation.after | Word.RangeLocation.content | "Whole" | "Start" | "End" | "After" | "Content"):
        Word.Range;
      parameters:
        - id: rangeLocation
          description: 'Optional. The range location must be ''Whole'', ''Start'', ''End'', ''After'', or ''Content''.'
          type: >-
            <xref uid="word!Word.RangeLocation.whole:member" /> | <xref uid="word!Word.RangeLocation.start:member" /> |
            <xref uid="word!Word.RangeLocation.end:member" /> | <xref uid="word!Word.RangeLocation.after:member" /> |
            <xref uid="word!Word.RangeLocation.content:member" /> | "Whole" | "Start" | "End" | "After" | "Content"
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: getReviewedText(changeTrackingVersion)
    uid: 'word!Word.Range#getReviewedText:member(1)'
    package: word!
    fullName: getReviewedText(changeTrackingVersion)
    summary: Gets reviewed text based on ChangeTrackingVersion selection.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-change-tracking.yaml

      // Get the reviewed text.

      await Word.run(async (context) => {
        const range = context.document.getSelection();
        const before = range.getReviewedText(Word.ChangeTrackingVersion.original);
        const after = range.getReviewedText(Word.ChangeTrackingVersion.current);

        await context.sync();

        console.log(`Reviewed text (before):\n${before.value}`);
        console.log(`Reviewed text (after):\n${after.value}`);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getReviewedText(changeTrackingVersion?: Word.ChangeTrackingVersion): OfficeExtension.ClientResult<string>;'
      parameters:
        - id: changeTrackingVersion
          description: Optional. The value must be 'Original' or 'Current'. The default is 'Current'.
          type: '<xref uid="word!Word.ChangeTrackingVersion:enum" />'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getReviewedText(changeTrackingVersionString)
    uid: 'word!Word.Range#getReviewedText:member(2)'
    package: word!
    fullName: getReviewedText(changeTrackingVersionString)
    summary: Gets reviewed text based on ChangeTrackingVersion selection.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getReviewedText(changeTrackingVersionString?: "Original" | "Current"): OfficeExtension.ClientResult<string>;'
      parameters:
        - id: changeTrackingVersionString
          description: Optional. The value must be 'Original' or 'Current'. The default is 'Current'.
          type: '"Original" | "Current"'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: 'getTextRanges(endingMarks, trimSpacing)'
    uid: 'word!Word.Range#getTextRanges:member(1)'
    package: word!
    fullName: 'getTextRanges(endingMarks, trimSpacing)'
    summary: Gets the text child ranges in the range by using punctuation marks and/or other ending marks.
    remarks: >-
      \[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml

      await Word.run(async (context) => {
        // Gets the complete sentence (as range) associated with the insertion point.
        const sentences = context.document
          .getSelection()
          .getTextRanges(["."] /* Using the "." as delimiter */, false /*means without trimming spaces*/);
        sentences.load("$none");
        await context.sync();

        // Expands the range to the end of the paragraph to get all the complete sentences.
        const sentencesToTheEndOfParagraph = sentences.items[0]
          .getRange()
          .expandTo(
            context.document
              .getSelection()
              .paragraphs.getFirst()
              .getRange(Word.RangeLocation.end)
          )
          .getTextRanges(["."], false /* Don't trim spaces*/);
        sentencesToTheEndOfParagraph.load("text");
        await context.sync();

        for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {
          console.log(sentencesToTheEndOfParagraph.items[i].text);
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
      parameters:
        - id: endingMarks
          description: Required. The punctuation marks and/or other ending marks as an array of strings.
          type: 'string[]'
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end
            marks) from the start and end of the ranges returned in the range collection. Default is false which
            indicates that spacing characters at the start and end of the ranges are included in the range collection.
          type: boolean
      return:
        type: '<xref uid="word!Word.RangeCollection:class" />'
        description: ''
  - name: insertBookmark(name)
    uid: 'word!Word.Range#insertBookmark:member(1)'
    package: word!
    fullName: insertBookmark(name)
    summary: 'Inserts a bookmark on the range. If a bookmark of the same name exists somewhere, it is deleted first.'
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertBookmark(name: string): void;'
      parameters:
        - id: name
          description: >-
            Required. The bookmark name, which is case-insensitive. If the name starts with an underscore character, the
            bookmark is an hidden one.
          type: string
      return:
        type: void
        description: ''
  - name: 'insertBreak(breakType, insertLocation)'
    uid: 'word!Word.Range#insertBreak:member(1)'
    package: word!
    fullName: 'insertBreak(breakType, insertLocation)'
    summary: Inserts a break at the specified location in the main document.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert a page break after the selected text.
          range.insertBreak(Word.BreakType.page, Word.InsertLocation.after);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Inserted a page break after the selected text.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertBreak(breakType: Word.BreakType | "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" |
        "SectionOdd" | "Line", insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" |
        "After"): void;
      parameters:
        - id: breakType
          description: Required. The break type to add.
          type: >-
            <xref uid="word!Word.BreakType:enum" /> | "Page" | "Next" | "SectionNext" | "SectionContinuous" |
            "SectionEven" | "SectionOdd" | "Line"
        - id: insertLocation
          description: Required. The value must be 'Before' or 'After'.
          type: >-
            <xref uid="word!Word.InsertLocation.before:member" /> | <xref uid="word!Word.InsertLocation.after:member" />
            | "Before" | "After"
      return:
        type: void
        description: ''
  - name: insertComment(commentText)
    uid: 'word!Word.Range#insertComment:member(1)'
    package: word!
    fullName: insertComment(commentText)
    summary: Insert a comment on the range.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

      // Set a comment on the selected content.

      await Word.run(async (context) => {
        const text = $("#comment-text")
          .val()
          .toString();
        const comment = context.document.getSelection().insertComment(text);

        // Load object for display in Script Lab console.
        comment.load();
        await context.sync();

        console.log("Comment inserted:");
        console.log(comment);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertComment(commentText: string): Word.Comment;'
      parameters:
        - id: commentText
          description: Required. The comment text to be inserted.
          type: string
      return:
        type: '<xref uid="word!Word.Comment:class" />'
        description: comment object
  - name: insertContentControl(contentControlType)
    uid: 'word!Word.Range#insertContentControl:member(1)'
    package: word!
    fullName: insertContentControl(contentControlType)
    summary: Wraps the Range object with a content control.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml

      await Word.run(async (context) => {
          const results = context.document.body.search("Contractor");
          results.load("font/bold");

          // Check to make sure these content controls haven't been added yet.
          const customerContentControls = context.document.contentControls.getByTag("customer");
          customerContentControls.load("text");
          await context.sync();

        if (customerContentControls.items.length === 0) {
          for (let i = 0; i < results.items.length; i++) { 
              results.items[i].font.bold = true;
              let cc = results.items[i].insertContentControl();
              cc.tag = "customer";  // This value is used in the next step of this sample.
              cc.title = "Customer Name " + i;
          }
        }
          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertContentControl(contentControlType?: Word.ContentControlType.richText | Word.ContentControlType.plainText |
        "RichText" | "PlainText"): Word.ContentControl;
      parameters:
        - id: contentControlType
          description: Optional. The content control type. The default is 'RichText'.
          type: >-
            <xref uid="word!Word.ContentControlType.richText:member" /> | <xref
            uid="word!Word.ContentControlType.plainText:member" /> | "RichText" | "PlainText"
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: ''
  - name: insertEndnote(insertText)
    uid: 'word!Word.Range#insertEndnote:member(1)'
    package: word!
    fullName: insertEndnote(insertText)
    summary: Inserts an endnote. The endnote reference is placed after the range.
    remarks: '\[ [API set: WordApiOnline 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertEndnote(insertText?: string): Word.NoteItem;'
      parameters:
        - id: insertText
          description: Optional. Text to be inserted into the endnote body. The default is "".
          type: string
      return:
        type: '<xref uid="word!Word.NoteItem:class" />'
        description: ''
  - name: 'insertField(insertLocation, fieldType, text, removeFormatting)'
    uid: 'word!Word.Range#insertField:member(1)'
    package: word!
    fullName: 'insertField(insertLocation, fieldType, text, removeFormatting)'
    summary: Inserts a field at the specified location.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        insertField(insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After", fieldType?:
        Word.FieldType, text?: string, removeFormatting?: boolean): Word.Field;
      parameters:
        - id: insertLocation
          description: >-
            Required. The location relative to the range where the field will be inserted. The value must be 'Replace',
            'Start', 'End', 'Before', or 'After'.
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
        - id: fieldType
          description: Optional. Can be any FieldType constant. The default value is Empty.
          type: '<xref uid="word!Word.FieldType:enum" />'
        - id: text
          description: Optional. Additional properties or options if needed for specified field type.
          type: string
        - id: removeFormatting
          description: >-
            Optional. `true` to remove the formatting that's applied to the field during updates, `false` otherwise. The
            default value is `false`<!-- -->.
          type: boolean
      return:
        type: '<xref uid="word!Word.Field:class" />'
        description: ''
  - name: 'insertField(insertLocation, fieldTypeString, text, removeFormatting)'
    uid: 'word!Word.Range#insertField:member(2)'
    package: word!
    fullName: 'insertField(insertLocation, fieldTypeString, text, removeFormatting)'
    summary: Inserts a field at the specified location.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        insertField(insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" | "After",
        fieldTypeString?: "Addin" | "AddressBlock" | "Advance" | "Ask" | "Author" | "AutoText" | "AutoTextList" |
        "BarCode" | "Bibliography" | "BidiOutline" | "Citation" | "Comments" | "Compare" | "CreateDate" | "Data" |
        "Database" | "Date" | "DisplayBarcode" | "DocProperty" | "DocVariable" | "EditTime" | "Embedded" | "EQ" |
        "Expression" | "FileName" | "FileSize" | "FillIn" | "FormCheckbox" | "FormDropdown" | "FormText" | "GotoButton"
        | "GreetingLine" | "Hyperlink" | "If" | "Import" | "Include" | "IncludePicture" | "IncludeText" | "Index" |
        "Info" | "Keywords" | "LastSavedBy" | "Link" | "ListNum" | "MacroButton" | "MergeBarcode" | "MergeField" |
        "MergeRec" | "MergeSeq" | "Next" | "NextIf" | "NoteRef" | "NumChars" | "NumPages" | "NumWords" | "OCX" | "Page"
        | "PageRef" | "Print" | "PrintDate" | "Private" | "Quote" | "RD" | "Ref" | "RevNum" | "SaveDate" | "Section" |
        "SectionPages" | "Seq" | "Set" | "Shape" | "SkipIf" | "StyleRef" | "Subject" | "Subscriber" | "Symbol" | "TA" |
        "TC" | "Template" | "Time" | "Title" | "TOA" | "TOC" | "UserAddress" | "UserInitials" | "UserName" | "XE" |
        "Empty" | "Others" | "Undefined", text?: string, removeFormatting?: boolean): Word.Field;
      parameters:
        - id: insertLocation
          description: >-
            Required. The location relative to the range where the field will be inserted. The value must be 'Replace',
            'Start', 'End', 'Before', or 'After'.
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
        - id: fieldTypeString
          description: Optional. Can be any FieldType constant. The default value is Empty.
          type: >-
            "Addin" | "AddressBlock" | "Advance" | "Ask" | "Author" | "AutoText" | "AutoTextList" | "BarCode" |
            "Bibliography" | "BidiOutline" | "Citation" | "Comments" | "Compare" | "CreateDate" | "Data" | "Database" |
            "Date" | "DisplayBarcode" | "DocProperty" | "DocVariable" | "EditTime" | "Embedded" | "EQ" | "Expression" |
            "FileName" | "FileSize" | "FillIn" | "FormCheckbox" | "FormDropdown" | "FormText" | "GotoButton" |
            "GreetingLine" | "Hyperlink" | "If" | "Import" | "Include" | "IncludePicture" | "IncludeText" | "Index" |
            "Info" | "Keywords" | "LastSavedBy" | "Link" | "ListNum" | "MacroButton" | "MergeBarcode" | "MergeField" |
            "MergeRec" | "MergeSeq" | "Next" | "NextIf" | "NoteRef" | "NumChars" | "NumPages" | "NumWords" | "OCX" |
            "Page" | "PageRef" | "Print" | "PrintDate" | "Private" | "Quote" | "RD" | "Ref" | "RevNum" | "SaveDate" |
            "Section" | "SectionPages" | "Seq" | "Set" | "Shape" | "SkipIf" | "StyleRef" | "Subject" | "Subscriber" |
            "Symbol" | "TA" | "TC" | "Template" | "Time" | "Title" | "TOA" | "TOC" | "UserAddress" | "UserInitials" |
            "UserName" | "XE" | "Empty" | "Others" | "Undefined"
        - id: text
          description: Optional. Additional properties or options if needed for specified field type.
          type: string
        - id: removeFormatting
          description: >-
            Optional. `true` to remove the formatting that's applied to the field during updates, `false` otherwise. The
            default value is `false`<!-- -->.
          type: boolean
      return:
        type: '<xref uid="word!Word.Field:class" />'
        description: ''
  - name: 'insertFileFromBase64(base64File, insertLocation)'
    uid: 'word!Word.Range#insertFileFromBase64:member(1)'
    package: word!
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    summary: Inserts a document at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert base64 encoded .docx at the beginning of the range.
          // You'll need to implement getBase64() to make this work.
          range.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Added base64 encoded text to the beginning of the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" |
        "Before" | "After"): Word.Range;
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: insertFootnote(insertText)
    uid: 'word!Word.Range#insertFootnote:member(1)'
    package: word!
    fullName: insertFootnote(insertText)
    summary: Inserts a footnote. The footnote reference is placed after the range.
    remarks: >-
      \[ [API set: WordApiOnline 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-footnotes.yaml

      // Set a footnote on the selected content.

      await Word.run(async (context) => {
        const text = $("#input-footnote")
          .val()
          .toString();
        const footnote = context.document.getSelection().insertFootnote(text);
        await context.sync();

        console.log("Inserted footnote.");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertFootnote(insertText?: string): Word.NoteItem;'
      parameters:
        - id: insertText
          description: Optional. Text to be inserted into the footnote body. The default is "".
          type: string
      return:
        type: '<xref uid="word!Word.NoteItem:class" />'
        description: ''
  - name: 'insertHtml(html, insertLocation)'
    uid: 'word!Word.Range#insertHtml:member(1)'
    package: word!
    fullName: 'insertHtml(html, insertLocation)'
    summary: Inserts HTML at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert HTML in to the beginning of the range.
          range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('HTML added to the beginning of the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtml(html: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" |
        "After"): Word.Range;
      parameters:
        - id: html
          description: Required. The HTML to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    uid: 'word!Word.Range#insertInlinePictureFromBase64:member(1)'
    package: word!
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    summary: Inserts a picture at the specified location.
    remarks: '\[ [API set: WordApi 1.2](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation | "Replace" |
        "Start" | "End" | "Before" | "After"): Word.InlinePicture;
      parameters:
        - id: base64EncodedImage
          description: Required. The base64 encoded image to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.InlinePicture:class" />'
        description: ''
  - name: 'insertOoxml(ooxml, insertLocation)'
    uid: 'word!Word.Range#insertOoxml:member(1)'
    package: word!
    fullName: 'insertOoxml(ooxml, insertLocation)'
    summary: Inserts OOXML at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert OOXML in to the beginning of the range.
          range.insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('OOXML added to the beginning of the range.');
      });

      // Read "Create better add-ins for Word with Office Open XML" for guidance on working with OOXML.
      // https://learn.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" |
        "After"): Word.Range;
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertParagraph(paragraphText, insertLocation)'
    uid: 'word!Word.Range#insertParagraph:member(1)'
    package: word!
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    summary: Inserts a paragraph at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert the paragraph after the range.
          range.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Paragraph added to the end of the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after |
        "Before" | "After"): Word.Paragraph;
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type: string
        - id: insertLocation
          description: Required. The value must be 'Before' or 'After'.
          type: >-
            <xref uid="word!Word.InsertLocation.before:member" /> | <xref uid="word!Word.InsertLocation.after:member" />
            | "Before" | "After"
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    uid: 'word!Word.Range#insertTable:member(1)'
    package: word!
    fullName: 'insertTable(rowCount, columnCount, insertLocation, values)'
    summary: Inserts a table with the specified number of rows and columns.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation.before |
        Word.InsertLocation.after | "Before" | "After", values?: string[][]): Word.Table;
      parameters:
        - id: rowCount
          description: Required. The number of rows in the table.
          type: number
        - id: columnCount
          description: Required. The number of columns in the table.
          type: number
        - id: insertLocation
          description: Required. The value must be 'Before' or 'After'.
          type: >-
            <xref uid="word!Word.InsertLocation.before:member" /> | <xref uid="word!Word.InsertLocation.after:member" />
            | "Before" | "After"
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type: 'string[][]'
      return:
        type: '<xref uid="word!Word.Table:class" />'
        description: ''
  - name: 'insertText(text, insertLocation)'
    uid: 'word!Word.Range#insertText:member(1)'
    package: word!
    fullName: 'insertText(text, insertLocation)'
    summary: Inserts text at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert the paragraph at the end of the range.
          range.insertText('New text inserted into the range.', Word.InsertLocation.end);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Text added to the end of the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertText(text: string, insertLocation: Word.InsertLocation | "Replace" | "Start" | "End" | "Before" |
        "After"): Word.Range;
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', ''End'', ''Before'', or ''After''.'
          type: '<xref uid="word!Word.InsertLocation:enum" /> | "Replace" | "Start" | "End" | "Before" | "After"'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: intersectWith(range)
    uid: 'word!Word.Range#intersectWith:member(1)'
    package: word!
    fullName: intersectWith(range)
    summary: >-
      Returns a new range as the intersection of this range with another range. This range is not changed. Throws an
      `ItemNotFound` error if the two ranges are not overlapped or adjacent.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'intersectWith(range: Word.Range): Word.Range;'
      parameters:
        - id: range
          description: Required. Another range.
          type: '<xref uid="word!Word.Range:class" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: intersectWithOrNullObject(range)
    uid: 'word!Word.Range#intersectWithOrNullObject:member(1)'
    package: word!
    fullName: intersectWithOrNullObject(range)
    summary: >-
      Returns a new range as the intersection of this range with another range. This range is not changed. If the two
      ranges are not overlapped or adjacent, then this method will return an object with its `isNullObject` property set
      to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'intersectWithOrNullObject(range: Word.Range): Word.Range;'
      parameters:
        - id: range
          description: Required. Another range.
          type: '<xref uid="word!Word.Range:class" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'word!Word.Range#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.RangeLoadOptions): Word.Range;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="word!Word.Interfaces.RangeLoadOptions:interface" />'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.Range#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Range;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.Range#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Range;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'search(searchText, searchOptions)'
    uid: 'word!Word.Range#search:member(1)'
    package: word!
    fullName: 'search(searchText, searchOptions)'
    summary: >-
      Performs a search with the specified SearchOptions on the scope of the range object. The search results are a
      collection of range objects.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      parameters:
        - id: searchText
          description: Required. The search text.
          type: string
        - id: searchOptions
          description: Optional. Options for the search.
          type: |-
            <xref uid="word!Word.SearchOptions:class" /> | {
                        ignorePunct?: boolean;
                        ignoreSpace?: boolean;
                        matchCase?: boolean;
                        matchPrefix?: boolean;
                        matchSuffix?: boolean;
                        matchWholeWord?: boolean;
                        matchWildcards?: boolean;
                    }
      return:
        type: '<xref uid="word!Word.RangeCollection:class" />'
        description: ''
  - name: select(selectionMode)
    uid: 'word!Word.Range#select:member(1)'
    package: word!
    fullName: select(selectionMode)
    summary: Selects and navigates the Word UI to the range.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          const range = context.document.getSelection();

          // Queue a command to insert HTML in to the beginning of the range.
          range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

          // Queue a command to select the HTML that was inserted.
          range.select();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Selected the range.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      parameters:
        - id: selectionMode
          description: 'Optional. The selection mode must be ''Select'', ''Start'', or ''End''. ''Select'' is the default.'
          type: '<xref uid="word!Word.SelectionMode:enum" />'
      return:
        type: void
        description: ''
  - name: select(selectionModeString)
    uid: 'word!Word.Range#select:member(2)'
    package: word!
    fullName: select(selectionModeString)
    summary: Selects and navigates the Word UI to the range.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      parameters:
        - id: selectionModeString
          description: 'Optional. The selection mode must be ''Select'', ''Start'', or ''End''. ''Select'' is the default.'
          type: '"Select" | "Start" | "End"'
      return:
        type: void
        description: ''
  - name: 'set(properties, options)'
    uid: 'word!Word.Range#set:member(1)'
    package: word!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="word!Word.Interfaces.RangeUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'word!Word.Range#set:member(2)'
    package: word!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Range): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="word!Word.Range:class" />'
      return:
        type: void
        description: ''
  - name: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    uid: 'word!Word.Range#split:member(1)'
    package: word!
    fullName: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    summary: Splits the range into child ranges by using delimiters.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean):
        Word.RangeCollection;
      parameters:
        - id: delimiters
          description: Required. The delimiters as an array of strings.
          type: 'string[]'
        - id: multiParagraphs
          description: >-
            Optional. Indicates whether a returned child range can cover multiple paragraphs. Default is false which
            indicates that the paragraph boundaries are also used as delimiters.
          type: boolean
        - id: trimDelimiters
          description: >-
            Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is false
            which indicates that the delimiters are included in the ranges returned in the range collection.
          type: boolean
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end
            marks) from the start and end of the ranges returned in the range collection. Default is false which
            indicates that spacing characters at the start and end of the ranges are included in the range collection.
          type: boolean
      return:
        type: '<xref uid="word!Word.RangeCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'word!Word.Range#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Word.Range object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.RangeData`<!-- -->) that contains shallow copies of any loaded child
      properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.RangeData;'
      return:
        type: '<xref uid="word!Word.Interfaces.RangeData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.Range#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://docs.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Range;'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.Range#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://docs.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You will need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Range;'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
events:
  - name: onCommentAdded
    uid: 'word!Word.Range#onCommentAdded:member'
    package: word!
    fullName: onCommentAdded
    summary: Occurs when new comments are added.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'readonly onCommentAdded: OfficeExtension.EventHandlers<Word.CommentEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="word!Word.CommentEventArgs:interface"
          />&gt;
  - name: onCommentChanged
    uid: 'word!Word.Range#onCommentChanged:member'
    package: word!
    fullName: onCommentChanged
    summary: Occurs when a comment or its reply is changed.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'readonly onCommentChanged: OfficeExtension.EventHandlers<Word.CommentEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="word!Word.CommentEventArgs:interface"
          />&gt;
  - name: onCommentDeselected
    uid: 'word!Word.Range#onCommentDeselected:member'
    package: word!
    fullName: onCommentDeselected
    summary: Occurs when a comment is deselected.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'readonly onCommentDeselected: OfficeExtension.EventHandlers<Word.CommentEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="word!Word.CommentEventArgs:interface"
          />&gt;
  - name: onCommentSelected
    uid: 'word!Word.Range#onCommentSelected:member'
    package: word!
    fullName: onCommentSelected
    summary: Occurs when a comment is selected.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'readonly onCommentSelected: OfficeExtension.EventHandlers<Word.CommentEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="word!Word.CommentEventArgs:interface"
          />&gt;
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
