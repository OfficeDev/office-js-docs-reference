### YamlMime:TSType
name: Word.ContentControlDeletedEventArgs
uid: 'word!Word.ContentControlDeletedEventArgs:interface'
package: word!
fullName: Word.ContentControlDeletedEventArgs
summary: Provides information about the content control that raised contentControlDeleted event.
remarks: >-
  \[ [API set: WordApi 1.5](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/content-control-ondeleted-event.yaml


  await Word.run(async (context) => {
    const contentControls: Word.ContentControlCollection = context.document.contentControls;
    contentControls.load("items");
    await context.sync();

    // Register the onDeleted event handler on each content control.
    if (contentControls.items.length === 0) {
      console.log("There aren't any content controls in this document so can't register event handlers.");
    } else {
      for (let i = 0; i < contentControls.items.length; i++) {
        eventContexts[i] = contentControls.items[i].onDeleted.add(contentControlDeleted);
        contentControls.items[i].track();
      }

      await context.sync();

      console.log("Added event handlers for when content controls are deleted.");
    }
  });


  ...


  async function contentControlDeleted(event: Word.ContentControlDeletedEventArgs) {
    await Word.run(async (context) => {
      console.log(`${event.eventType} event detected. IDs of content controls that were deleted:`, event.ids);
    });
  }

  ```
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: eventType
    uid: 'word!Word.ContentControlDeletedEventArgs#eventType:member'
    package: word!
    fullName: eventType
    summary: The event type. See Word.EventType for details.
    remarks: '\[ [API set: WordApi 1.5](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        eventType: Word.EventType | "ContentControlDeleted" | "ContentControlSelectionChanged" |
        "ContentControlDataChanged" | "ContentControlAdded" | "AnnotationAdded" | "AnnotationChanged" |
        "AnnotationDeleted" | "CommentDeleted" | "CommentSelected" | "CommentDeselected" | "CommentChanged" |
        "CommentAdded" | "ContentControlEntered" | "ContentControlExited" | "DocumentWordCountChanged" |
        "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" |
        "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction";
      return:
        type: >-
          <xref uid="word!Word.EventType:enum" /> | "ContentControlDeleted" | "ContentControlSelectionChanged" |
          "ContentControlDataChanged" | "ContentControlAdded" | "AnnotationAdded" | "AnnotationChanged" |
          "AnnotationDeleted" | "CommentDeleted" | "CommentSelected" | "CommentDeselected" | "CommentChanged" |
          "CommentAdded" | "ContentControlEntered" | "ContentControlExited" | "DocumentWordCountChanged" |
          "ParagraphAdded" | "ParagraphChanged" | "ParagraphDeleted" | "AnnotationClicked" | "AnnotationHovered" |
          "AnnotationInserted" | "AnnotationRemoved" | "AnnotationPopupAction"
  - name: ids
    uid: 'word!Word.ContentControlDeletedEventArgs#ids:member'
    package: word!
    fullName: ids
    summary: Gets the content control IDs.
    remarks: '\[ [API set: WordApi 1.5](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ids: number[];'
      return:
        type: 'number[]'
  - name: source
    uid: 'word!Word.ContentControlDeletedEventArgs#source:member'
    package: word!
    fullName: source
    summary: The source of the event. It can be local or remote (through coauthoring).
    remarks: '\[ [API set: WordApi 1.5](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'source: Word.EventSource | "Local" | "Remote";'
      return:
        type: '<xref uid="word!Word.EventSource:enum" /> | "Local" | "Remote"'
