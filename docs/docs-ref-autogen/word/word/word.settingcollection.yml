### YamlMime:TSType
name: Word.SettingCollection
uid: 'word!Word.SettingCollection:class'
package: word!
fullName: Word.SettingCollection
summary: >-
  Contains the collection of [Word.Setting](xref:word!Word.Setting:class)
  objects.


  \[ [API set: WordApi BETA (PREVIEW
  ONLY)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
  \]
remarks: ''
isPreview: true
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'word!Word.SettingCollection#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: items
    uid: 'word!Word.SettingCollection#items:member'
    package: word!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'readonly items: Word.Setting[];'
      return:
        type: '<xref uid="word!Word.Setting:class" />[]'
methods:
  - name: 'add(key, value)'
    uid: 'word!Word.SettingCollection#add:member(1)'
    package: word!
    fullName: 'add(key, value)'
    summary: >-
      Creates a new setting or sets an existing setting.


      \[ [API set: WordApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'add(key: string, value: any): Word.Setting;'
      parameters:
        - id: key
          description: 'Required. The setting''s key, which is case-sensitive.'
          type: string
        - id: value
          description: Required. The setting's value.
          type: any
      return:
        type: '<xref uid="word!Word.Setting:class" />'
        description: ''
  - name: deleteAll()
    uid: 'word!Word.SettingCollection#deleteAll:member(1)'
    package: word!
    fullName: deleteAll()
    summary: >-
      Deletes all settings in this add-in.


      \[ [API set: WordApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'deleteAll(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue commands add a setting.
              var settings = context.document.settings;
              settings.add('startMonth', { month: 'March', year: 1998 });

              // Queue a command to get the count of settings.
              var count = settings.getCount();

              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log(count.value);

                  // Queue a command to delete all settings.
                  settings.deleteAll();

                  // Queue a command to get the new count of settings.
                  count = settings.getCount();
              })

              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              .then(context.sync)
              .then(function () {
                  console.log(count.value);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getCount()
    uid: 'word!Word.SettingCollection#getCount:member(1)'
    package: word!
    fullName: getCount()
    summary: >-
      Gets the count of settings.


      \[ [API set: WordApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue commands add a setting.
              var settings = context.document.settings;
              settings.add('startMonth', { month: 'March', year: 1998 });

              // Queue a command to get the count of settings.
              var count = settings.getCount();

              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log(count.value);

                  // Queue a command to delete all settings.
                  settings.deleteAll();

                  // Queue a command to get the new count of settings.
                  count = settings.getCount();
              })

              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              .then(context.sync)
              .then(function () {
                  console.log(count.value);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getItem(key)
    uid: 'word!Word.SettingCollection#getItem:member(1)'
    package: word!
    fullName: getItem(key)
    summary: >-
      Gets a setting object by its key, which is case-sensitive. Throws an error
      if the setting does not exist.


      \[ [API set: WordApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Word.Setting;'
      parameters:
        - id: key
          description: The key that identifies the setting object.
          type: string
      return:
        type: '<xref uid="word!Word.Setting:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue commands add a setting.
              var settings = context.document.settings;
              settings.add('startMonth', { month: 'March', year: 1998 });

              // Queue a command to retrieve a setting.
              var startMonth = settings.getItem('startMonth');

              // Queue a command to load the setting.
              context.load(startMonth);

              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log(JSON.stringify(startMonth.value));
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getItemOrNullObject(key)
    uid: 'word!Word.SettingCollection#getItemOrNullObject:member(1)'
    package: word!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a setting object by its key, which is case-sensitive. Returns a null
      object if the setting does not exist.


      \[ [API set: WordApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): Word.Setting;'
      parameters:
        - id: key
          description: Required. The key that identifies the setting object.
          type: string
      return:
        type: '<xref uid="word!Word.Setting:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue commands add a setting.
              var settings = context.document.settings;
              settings.add('startMonth', { month: 'March', year: 1998 });
              
              // Queue commands to retrieve settings.
              var startMonth = settings.getItemOrNullObject('startMonth');
              var endMonth = settings.getItemOrNullObject('endMonth');

              // Queue commands to load settings.
              context.load(startMonth);
              context.load(endMonth);

              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
                 return context.sync().then(function () {
                     if (startMonth.isNullObject) {
                         console.log("No such setting.");
                     }
                     else {
                         console.log(JSON.stringify(startMonth.value));
                     }
                      if (endMonth.isNullObject) {
                         console.log("No such setting.");
                     }
                     else {
                         console.log(JSON.stringify(endMonth.value));
                     }
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(options)
    uid: 'word!Word.SettingCollection#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Word.Interfaces.SettingCollectionLoadOptions &
        Word.Interfaces.CollectionLoadOptions): Word.SettingCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="word!Word.Interfaces.SettingCollectionLoadOptions:interface" />
            & <xref uid="word!Word.Interfaces.CollectionLoadOptions:interface"
            />
      return:
        type: '<xref uid="word!Word.SettingCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.SettingCollection#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.SettingCollection;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.SettingCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.SettingCollection#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption):
        Word.SettingCollection;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="word!Word.SettingCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'word!Word.SettingCollection#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      `Word.SettingCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as
      `Word.Interfaces.SettingCollectionData`<!-- -->) that contains an "items"
      array with shallow copies of any loaded properties from the collection's
      items.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.SettingCollectionData;'
      return:
        type: '<xref uid="word!Word.Interfaces.SettingCollectionData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.SettingCollection#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this
      object across `.sync` calls and outside the sequential execution of a
      ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'track(): Word.SettingCollection;'
      return:
        type: '<xref uid="word!Word.SettingCollection:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.SettingCollection#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked
      objects slows down the host application, so please remember to free any
      objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.SettingCollection;'
      return:
        type: '<xref uid="word!Word.SettingCollection:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
