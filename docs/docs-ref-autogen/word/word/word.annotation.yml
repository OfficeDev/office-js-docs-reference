### YamlMime:TSType
name: Word.Annotation
uid: 'word!Word.Annotation:class'
package: word!
fullName: Word.Annotation
summary: Represents an annotation attached to a paragraph.
remarks: >-
  \[ [API set: WordApi 1.7](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml


  // Accepts the first annotation found in the selected paragraph.

  await Word.run(async (context) => {
    const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();
    const annotations: Word.AnnotationCollection = paragraph.getAnnotations();
    annotations.load("id,state,critiqueAnnotation");

    await context.sync();

    for (let i = 0; i < annotations.items.length; i++) {
      const annotation: Word.Annotation = annotations.items[i];

      if (annotation.state === Word.AnnotationState.created) {
        console.log(`Accepting ID ${annotation.id}...`);
        annotation.critiqueAnnotation.accept();

        await context.sync();
        break;
      }
    }
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'word!Word.Annotation#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: critiqueAnnotation
    uid: 'word!Word.Annotation#critiqueAnnotation:member'
    package: word!
    fullName: critiqueAnnotation
    summary: Gets the critique annotation object.
    remarks: >-
      \[ [API set: WordApi 1.7](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml


      // Gets annotations found in the selected paragraph.

      await Word.run(async (context) => {
        const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();
        const annotations: Word.AnnotationCollection = paragraph.getAnnotations();
        annotations.load("id,state,critiqueAnnotation");

        await context.sync();

        console.log("Annotations found:");

        for (let i = 0; i < annotations.items.length; i++) {
          const annotation: Word.Annotation = annotations.items[i];

          console.log(`ID ${annotation.id} - state '${annotation.state}':`, annotation.critiqueAnnotation.critique);
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly critiqueAnnotation: Word.CritiqueAnnotation;'
      return:
        type: '<xref uid="word!Word.CritiqueAnnotation:class" />'
  - name: id
    uid: 'word!Word.Annotation#id:member'
    package: word!
    fullName: id
    summary: 'Gets the unique identifier, which is meant to be used for easier tracking of Annotation objects.'
    remarks: >-
      \[ [API set: WordApi 1.7](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml


      // Accepts the first annotation found in the selected paragraph.

      await Word.run(async (context) => {
        const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();
        const annotations: Word.AnnotationCollection = paragraph.getAnnotations();
        annotations.load("id,state,critiqueAnnotation");

        await context.sync();

        for (let i = 0; i < annotations.items.length; i++) {
          const annotation: Word.Annotation = annotations.items[i];

          if (annotation.state === Word.AnnotationState.created) {
            console.log(`Accepting ID ${annotation.id}...`);
            annotation.critiqueAnnotation.accept();

            await context.sync();
            break;
          }
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: state
    uid: 'word!Word.Annotation#state:member'
    package: word!
    fullName: state
    summary: Gets the state of the annotation.
    remarks: >-
      \[ [API set: WordApi 1.7](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml


      // Rejects the last annotation found in the selected paragraph.

      await Word.run(async (context) => {
        const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();
        const annotations: Word.AnnotationCollection = paragraph.getAnnotations();
        annotations.load("id,state,critiqueAnnotation");

        await context.sync();

        for (let i = annotations.items.length - 1; i >= 0; i--) {
          const annotation: Word.Annotation = annotations.items[i];

          if (annotation.state === Word.AnnotationState.created) {
            console.log(`Rejecting ID ${annotation.id}...`);
            annotation.critiqueAnnotation.reject();

            await context.sync();
            break;
          }
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly state: Word.AnnotationState | "Created" | "Accepted" | "Rejected";'
      return:
        type: '<xref uid="word!Word.AnnotationState:enum" /> | "Created" | "Accepted" | "Rejected"'
methods:
  - name: delete()
    uid: 'word!Word.Annotation#delete:member(1)'
    package: word!
    fullName: delete()
    summary: Deletes the annotation.
    remarks: >-
      \[ [API set: WordApi 1.7](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-annotations.yaml


      // Deletes all annotations found in the selected paragraph.

      await Word.run(async (context) => {
        const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();
        const annotations: Word.AnnotationCollection = paragraph.getAnnotations();
        annotations.load("id");

        await context.sync();

        const ids = [];
        for (let i = 0; i < annotations.items.length; i++) {
          const annotation: Word.Annotation = annotations.items[i];

          ids.push(annotation.id);
          annotation.delete();
        }

        await context.sync();

        console.log("Annotations deleted:", ids);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: load(options)
    uid: 'word!Word.Annotation#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.AnnotationLoadOptions): Word.Annotation;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="word!Word.Interfaces.AnnotationLoadOptions:interface" />'
      return:
        type: '<xref uid="word!Word.Annotation:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.Annotation#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Annotation;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.Annotation:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.Annotation#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Annotation;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.Annotation:class" />'
        description: ''
  - name: toJSON()
    uid: 'word!Word.Annotation#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `Word.Annotation` object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.AnnotationData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.AnnotationData;'
      return:
        type: '<xref uid="word!Word.Interfaces.AnnotationData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.Annotation#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Annotation;'
      return:
        type: '<xref uid="word!Word.Annotation:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.Annotation#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Annotation;'
      return:
        type: '<xref uid="word!Word.Annotation:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
