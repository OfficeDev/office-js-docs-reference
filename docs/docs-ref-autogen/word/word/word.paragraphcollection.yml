### YamlMime:UniversalReference
items:
  - uid: 'word!Word.ParagraphCollection:class'
    summary: |-
      Contains a collection of [Word.Paragraph](xref:word!Word.Paragraph:class) objects.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: Word.ParagraphCollection
    fullName: Word.ParagraphCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.ParagraphCollection#context:member'
      - 'word!Word.ParagraphCollection#getFirst:member(1)'
      - 'word!Word.ParagraphCollection#getFirstOrNullObject:member(1)'
      - 'word!Word.ParagraphCollection#getLast:member(1)'
      - 'word!Word.ParagraphCollection#getLastOrNullObject:member(1)'
      - 'word!Word.ParagraphCollection#items:member'
      - 'word!Word.ParagraphCollection#load:member(1)'
      - 'word!Word.ParagraphCollection#load:member(2)'
      - 'word!Word.ParagraphCollection#load:member(3)'
      - 'word!Word.ParagraphCollection#toJSON:member(1)'
      - 'word!Word.ParagraphCollection#track:member(1)'
      - 'word!Word.ParagraphCollection#untrack:member(1)'
  - uid: 'word!Word.ParagraphCollection#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.ParagraphCollection#getFirst:member(1)'
    summary: |-
      Gets the first paragraph in this collection. Throws an error if the collection is empty.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getFirst()
    fullName: getFirst()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.ParagraphCollection#getFirstOrNullObject:member(1)'
    summary: |-
      Gets the first paragraph in this collection. Returns a null object if the collection is empty.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getFirstOrNullObject()
    fullName: getFirstOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirstOrNullObject(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.ParagraphCollection#getLast:member(1)'
    summary: |-
      Gets the last paragraph in this collection. Throws an error if the collection is empty.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getLast()
    fullName: getLast()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLast(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.ParagraphCollection#getLastOrNullObject:member(1)'
    summary: |-
      Gets the last paragraph in this collection. Returns a null object if the collection is empty.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getLastOrNullObject()
    fullName: getLastOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastOrNullObject(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.ParagraphCollection#items:member'
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Word.Paragraph[];'
      return:
        type:
          - 'word!Word.ParagraphCollection#items~0:complex'
  - uid: 'word!Word.ParagraphCollection#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        load(options?: Word.Interfaces.ParagraphCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions):
        Word.ParagraphCollection;
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: |-


          #### Examples

          ```javascript
          // This example shows how to get the paragraphs in the Word document
          // along with their text and font size properties.
          // 
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the text and font properties.
              // It is best practice to always specify the property set. Otherwise, all properties are
              // returned in on the object.
              context.load(paragraphs, 'text, font/size');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

              // Insert code that works with the paragraphs loaded by context.load().
              })
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type:
            - 'word!Word.ParagraphCollection#load~0:complex'
  - uid: 'word!Word.ParagraphCollection#load:member(2)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'word!Word.ParagraphCollection#load:member(3)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'word!Word.ParagraphCollection#toJSON:member(1)'
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Word.ParagraphCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `Word.Interfaces.ParagraphCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the collection's items.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ParagraphCollectionData;'
      return:
        type:
          - 'word!Word.Interfaces.ParagraphCollectionData:interface'
        description: ''
  - uid: 'word!Word.ParagraphCollection#track:member(1)'
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this object across `.sync` calls and
      outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to the tracked object collection when the
      object was first created.
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: ''
  - uid: 'word!Word.ParagraphCollection#untrack:member(1)'
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked objects slows down the host application,
      so please remember to free any objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Paragraph:class'
    name: Word.Paragraph
  - uid: 'word!Word.ParagraphCollection#items~0:complex'
    name: 'Word.Paragraph[]'
    fullName: 'Word.Paragraph[]'
    spec.typeScript:
      - uid: 'word!Word.Paragraph:class'
        name: Word.Paragraph
        fullName: Word.Paragraph
      - name: '[]'
        fullName: '[]'
  - uid: 'word!Word.ParagraphCollection:class'
    name: Word.ParagraphCollection
  - uid: 'word!Word.ParagraphCollection#load~0:complex'
    name: Word.Interfaces.ParagraphCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions
    fullName: Word.Interfaces.ParagraphCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'word!Word.Interfaces.ParagraphCollectionLoadOptions:interface'
        name: Word.Interfaces.ParagraphCollectionLoadOptions
        fullName: Word.Interfaces.ParagraphCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'word!Word.Interfaces.CollectionLoadOptions:interface'
        name: Word.Interfaces.CollectionLoadOptions
        fullName: Word.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'word!Word.Interfaces.ParagraphCollectionData:interface'
    name: Word.Interfaces.ParagraphCollectionData
