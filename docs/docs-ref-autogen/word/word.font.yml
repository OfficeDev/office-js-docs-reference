### YamlMime:UniversalReference
items:
  - uid: word.Word.Font
    summary: |-
      Represents a font.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: Word.Font
    fullName: Word.Font
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: word
    children:
      - word.Word.Font.bold
      - word.Word.Font.color
      - word.Word.Font.context
      - word.Word.Font.doubleStrikeThrough
      - word.Word.Font.highlightColor
      - word.Word.Font.italic
      - word.Word.Font.load
      - word.Word.Font.load_1
      - word.Word.Font.load_2
      - word.Word.Font.name
      - word.Word.Font.set
      - word.Word.Font.set_1
      - word.Word.Font.size
      - word.Word.Font.strikeThrough
      - word.Word.Font.subscript
      - word.Word.Font.superscript
      - word.Word.Font.toJSON
      - word.Word.Font.track
      - word.Word.Font.underline
      - word.Word.Font.untrack
  - uid: word.Word.Font.bold
    summary: >-
      Gets or sets a value that indicates whether the font is bold. True if the font is formatted as bold, otherwise,
      false.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: bold
    fullName: bold
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bold: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.color
    summary: >-
      Gets or sets the color for the specified font. You can provide the value in the '\#RRGGBB' format or the color
      name.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: color
    fullName: color
    langs:
      - typeScript
    type: property
    syntax:
      content: 'color: string;'
      return:
        type:
          - string
  - uid: word.Word.Font.context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: word.Word.Font.doubleStrikeThrough
    summary: >-
      Gets or sets a value that indicates whether the font has a double strikethrough. True if the font is formatted as
      double strikethrough text, otherwise, false.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: doubleStrikeThrough
    fullName: doubleStrikeThrough
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doubleStrikeThrough: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.highlightColor
    summary: >-
      Gets or sets the highlight color. To set it, use a value either in the '\#RRGGBB' format or the color name. To
      remove highlight color, set it to null. The returned highlight color can be in the '\#RRGGBB' format, an empty
      string for mixed highlight colors, or null for no highlight color.


      **Note**: Only the default highlight colors are available in Office on Windows Desktop. These are "Yellow",
      "Lime", "Turquoise", "Pink", "Blue", "Red", "DarkBlue", "Teal", "Green", "Purple", "DarkRed", "Olive", "Gray",
      "LightGray", and "Black". When the add-in runs in Office on Windows Desktop, any other color is converted to the
      closest color when applied to the font.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: highlightColor
    fullName: highlightColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'highlightColor: string;'
      return:
        type:
          - string
  - uid: word.Word.Font.italic
    summary: >-
      Gets or sets a value that indicates whether the font is italicized. True if the font is italicized, otherwise,
      false.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: italic
    fullName: italic
    langs:
      - typeScript
    type: property
    syntax:
      content: 'italic: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Word.Font` - Where option is a comma-delimited string or an array of strings
      that specify the properties to load.


      `load(option?: { select?: string; expand?: string; }): Word.Font` - Where option.select is a comma-delimited
      string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the
      navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Font` - Only available on
      collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection
      items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not
      included in the result. If option.top is specified, the result set will start after skipping the specified number
      of items.


      #### Examples


      ```javascript

      // Change the font name

      // Run a batch operation against the Word object model.

      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the current selection's font name.
          selection.font.name = 'Arial';

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font name has changed.');
          });
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Change the font color

      // Run a batch operation against the Word object model.

      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the font color of the current selection.
          selection.font.color = 'blue';

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font color of the selection has been changed.');
          });
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Change the font size

      // Run a batch operation against the Word object model.

      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the current selection's font size.
          selection.font.size = 20;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font size has changed.');
          });
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Highlight selected text

      // Run a batch operation against the Word object model.

      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to highlight the current selection.
          selection.font.highlightColor = '#FFFF00'; // Yellow

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection has been highlighted.');
          });
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Bold format text

      // Run a batch operation against the Word object model.

      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to make the current selection bold.
          selection.font.bold = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection is now bold.');
          });
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Underline format text

      // Run a batch operation against the Word object model.

      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to underline the current selection.
          selection.font.underline = Word.UnderlineType.single;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection now has an underline style.');
          });
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Strike format text

      // Run a batch operation against the Word object model.

      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to strikethrough the font of the current selection.
          selection.font.strikeThrough = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection now has a strikethrough.');
          });
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.FontLoadOptions): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - word.Word.Interfaces.FontLoadOptions
  - uid: word.Word.Font.load_1
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: word.Word.Font.load_2
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and
            propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: word.Word.Font.name
    summary: |-
      Gets or sets a value that represents the name of the font.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: word.Word.Font.set
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Word.Font): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.FontUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - Interfaces.FontUpdateData
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: word.Word.Font.set_1
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Font): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - word.Word.Font
  - uid: word.Word.Font.size
    summary: |-
      Gets or sets a value that represents the font size in points.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: size
    fullName: size
    langs:
      - typeScript
    type: property
    syntax:
      content: 'size: number;'
      return:
        type:
          - number
  - uid: word.Word.Font.strikeThrough
    summary: >-
      Gets or sets a value that indicates whether the font has a strikethrough. True if the font is formatted as
      strikethrough text, otherwise, false.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: strikeThrough
    fullName: strikeThrough
    langs:
      - typeScript
    type: property
    syntax:
      content: 'strikeThrough: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.subscript
    summary: >-
      Gets or sets a value that indicates whether the font is a subscript. True if the font is formatted as subscript,
      otherwise, false.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: subscript
    fullName: subscript
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subscript: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.superscript
    summary: >-
      Gets or sets a value that indicates whether the font is a superscript. True if the font is formatted as
      superscript, otherwise, false.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: superscript
    fullName: superscript
    langs:
      - typeScript
    type: property
    syntax:
      content: 'superscript: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Font.toJSON
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Word.Font object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.FontData`<!-- -->) that contains shallow copies of any loaded child
      properties from the original object.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.FontData;'
      return:
        type:
          - word.Word.Interfaces.FontData
        description: ''
  - uid: word.Word.Font.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
  - uid: word.Word.Font.underline
    summary: |-
      Gets or sets a value that indicates the font's underline type. 'None' if the font is not underlined.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: underline
    fullName: underline
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        underline: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick"
        | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine"
        | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";
      return:
        type:
          - >-
            Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" |
            "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" |
            "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" |
            "WaveDouble"
  - uid: word.Word.Font.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
