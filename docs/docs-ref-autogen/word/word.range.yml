### YamlMime:UniversalReference
items:
  - uid: word.Word.Range
    summary: |-
      Represents a contiguous area in a document.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: Word.Range
    fullName: word.Word.Range
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: word
    children:
      - word.Word.Range.clear
      - word.Word.Range.compareLocationWith
      - word.Word.Range.contentControls
      - word.Word.Range.delete
      - word.Word.Range.expandTo
      - word.Word.Range.expandToOrNullObject
      - word.Word.Range.font
      - word.Word.Range.getHtml
      - word.Word.Range.getHyperlinkRanges
      - word.Word.Range.getNextTextRange
      - word.Word.Range.getNextTextRangeOrNullObject
      - word.Word.Range.getOoxml
      - word.Word.Range.getRange
      - word.Word.Range.getTextRanges
      - word.Word.Range.hyperlink
      - word.Word.Range.inlinePictures
      - word.Word.Range.insertBreak
      - word.Word.Range.insertContentControl
      - word.Word.Range.insertFileFromBase64
      - word.Word.Range.insertHtml
      - word.Word.Range.insertInlinePictureFromBase64
      - word.Word.Range.insertOoxml
      - word.Word.Range.insertParagraph
      - word.Word.Range.insertTable
      - word.Word.Range.insertText
      - word.Word.Range.intersectWith
      - word.Word.Range.intersectWithOrNullObject
      - word.Word.Range.isEmpty
      - word.Word.Range.lists
      - word.Word.Range.load
      - word.Word.Range.paragraphs
      - word.Word.Range.parentBody
      - word.Word.Range.parentContentControl
      - word.Word.Range.parentContentControlOrNullObject
      - word.Word.Range.parentTable
      - word.Word.Range.parentTableCell
      - word.Word.Range.parentTableCellOrNullObject
      - word.Word.Range.parentTableOrNullObject
      - word.Word.Range.search
      - word.Word.Range.select
      - word.Word.Range.set
      - word.Word.Range.split
      - word.Word.Range.style
      - word.Word.Range.styleBuiltIn
      - word.Word.Range.tables
      - word.Word.Range.text
      - word.Word.Range.toJSON
      - word.Word.Range.track
      - word.Word.Range.untrack
  - uid: word.Word.Range.clear
    summary: |-
      Clears the contents of the range object. The user can perform the undo operation on the cleared content.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: clear()
    fullName: word.Word.Range.clear
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to clear the contents of the proxy range object.
          range.clear();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Cleared the selection (range object)');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.compareLocationWith
    summary: |-
      Compares this range's location with another range's location.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: compareLocationWith(range)
    fullName: word.Word.Range.compareLocationWith
    langs:
      - typeScript
    type: method
    syntax:
      content: 'compareLocationWith(range: Word.Range): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
      parameters:
        - id: range
          description: Required. The range to compare with this range.
          type:
            - Word.Range
  - uid: word.Word.Range.contentControls
    summary: |-
      Gets the collection of content control objects in the range. Read-only.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: contentControls
    fullName: word.Word.Range.contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'contentControls: Word.ContentControlCollection;'
      return:
        type:
          - Word.ContentControlCollection
  - uid: word.Word.Range.delete
    summary: |-
      Deletes the range and its content from the document.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: delete()
    fullName: word.Word.Range.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to delete the range object.
          range.delete();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Deleted the selection (range object)');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.expandTo
    summary: >-
      Returns a new range that extends from this range in either direction to cover another range. This range is not
      changed. Throws if the two ranges do not have a union.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: expandTo(range)
    fullName: word.Word.Range.expandTo
    langs:
      - typeScript
    type: method
    syntax:
      content: 'expandTo(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Required. Another range.
          type:
            - Word.Range
  - uid: word.Word.Range.expandToOrNullObject
    summary: >-
      Returns a new range that extends from this range in either direction to cover another range. This range is not
      changed. Returns a null object if the two ranges do not have a union.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: expandToOrNullObject(range)
    fullName: word.Word.Range.expandToOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'expandToOrNullObject(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Required. Another range.
          type:
            - Word.Range
  - uid: word.Word.Range.font
    summary: >-
      Gets the text format of the range. Use this to get and set font name, size, color, and other properties.
      Read-only.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: font
    fullName: word.Word.Range.font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'font: Word.Font;'
      return:
        type:
          - Word.Font
  - uid: word.Word.Range.getHtml
    summary: |-
      Gets the HTML representation of the range object.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: getHtml()
    fullName: word.Word.Range.getHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to get the HTML of the current selection.
          var html = range.getHtml();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The HTML read from the document was: ' + html.value);
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.getHyperlinkRanges
    summary: |-
      Gets hyperlink child ranges within the range.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: getHyperlinkRanges()
    fullName: word.Word.Range.getHyperlinkRanges
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHyperlinkRanges(): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
  - uid: word.Word.Range.getNextTextRange
    summary: >-
      Gets the next text range by using punctuation marks and/or other ending marks. Throws if this text range is the
      last one.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: 'getNextTextRange(endingMarks, trimSpacing)'
    fullName: word.Word.Range.getNextTextRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextTextRange(endingMarks: Array<string>, trimSpacing?: boolean): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: endingMarks
          description: Required. The punctuation marks and/or other ending marks as an array of strings.
          type:
            - Array<string>
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks)
            from the start and end of the returned range. Default is false which indicates that spacing characters at
            the start and end of the range are included.
          type:
            - boolean
  - uid: word.Word.Range.getNextTextRangeOrNullObject
    summary: >-
      Gets the next text range by using punctuation marks and/or other ending marks. Returns a null object if this text
      range is the last one.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: 'getNextTextRangeOrNullObject(endingMarks, trimSpacing)'
    fullName: word.Word.Range.getNextTextRangeOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextTextRangeOrNullObject(endingMarks: Array<string>, trimSpacing?: boolean): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: endingMarks
          description: Required. The punctuation marks and/or other ending marks as an array of strings.
          type:
            - Array<string>
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks)
            from the start and end of the returned range. Default is false which indicates that spacing characters at
            the start and end of the range are included.
          type:
            - boolean
  - uid: word.Word.Range.getOoxml
    summary: |-
      Gets the OOXML representation of the range object.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: getOoxml()
    fullName: word.Word.Range.getOoxml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to get the OOXML of the current selection.
          var ooxml = range.getOoxml();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The OOXML read from the document was:  ' + ooxml.value);
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.getRange
    summary: |-
      Clones the range, or gets the starting or ending point of the range as a new range.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: getRange(rangeLocation)
    fullName: word.Word.Range.getRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocation?: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocation
          description: 'Optional. The range location can be ''Whole'', ''Start'', ''End'', ''After'' or ''Content''.'
          type:
            - string
  - uid: word.Word.Range.getTextRanges
    summary: |-
      Gets the text child ranges in the range by using punctuation marks and/or other ending marks.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: 'getTextRanges(endingMarks, trimSpacing)'
    fullName: word.Word.Range.getTextRanges
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextRanges(endingMarks: Array<string>, trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: endingMarks
          description: Required. The punctuation marks and/or other ending marks as an array of strings.
          type:
            - Array<string>
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks)
            from the start and end of the ranges returned in the range collection. Default is false which indicates that
            spacing characters at the start and end of the ranges are included in the range collection.
          type:
            - boolean
  - uid: word.Word.Range.hyperlink
    summary: >-
      Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted
      when you set a new hyperlink on the range. Use a '\#' to separate the address part from the optional location
      part.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: hyperlink
    fullName: word.Word.Range.hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: string;'
      return:
        type:
          - string
  - uid: word.Word.Range.inlinePictures
    summary: |-
      Gets the collection of inline picture objects in the range. Read-only.

      \[ [API set: WordApi 1.2](http://bing.com?type=word) \]
    name: inlinePictures
    fullName: word.Word.Range.inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - Word.InlinePictureCollection
  - uid: word.Word.Range.insertBreak
    summary: >-
      Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or
      'After'.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: 'insertBreak(breakType, insertLocation)'
    fullName: word.Word.Range.insertBreak
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: string, insertLocation: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakType
          description: Required. The break type to add.
          type:
            - string
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to insert a page break after the selected text.
          range.insertBreak('page', 'After');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Inserted a page break after the selected text.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.insertContentControl
    summary: |-
      Wraps the range object with a rich text content control.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: insertContentControl()
    fullName: word.Word.Range.insertContentControl
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to insert a content control around the selected text,
          // and create a proxy content control object. We'll update the properties
          // on the content control.
          var myContentControl = range.insertContentControl();
          myContentControl.tag = "Customer-Address";
          myContentControl.title = "Enter Customer Address Here:";
          myContentControl.style = "Normal";
          myContentControl.insertText("One Microsoft Way, Redmond, WA 98052", 'replace');
          myContentControl.cannotEdit = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Wrapped a content control around the selected text.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.insertFileFromBase64
    summary: >-
      Inserts a document at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before'
      or 'After'.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: word.Word.Range.insertFileFromBase64
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', ''End'', ''Before'' or ''After''.'
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to insert base64 encoded .docx at the beginning of the range.
          // You'll need to implement getBase64() to make this work.
          range.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Added base64 encoded text to the beginning of the range.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.insertHtml
    summary: >-
      Inserts HTML at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before' or
      'After'.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: 'insertHtml(html, insertLocation)'
    fullName: word.Word.Range.insertHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: html
          description: Required. The HTML to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', ''End'', ''Before'' or ''After''.'
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to insert HTML in to the beginning of the range.
          range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('HTML added to the beginning of the range.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.insertInlinePictureFromBase64
    summary: >-
      Inserts a picture at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before'
      or 'After'.


      \[ [API set: WordApi 1.2](http://bing.com?type=word) \]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: word.Word.Range.insertInlinePictureFromBase64
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: string): Word.InlinePicture;'
      return:
        type:
          - Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: Required. The base64 encoded image to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', ''End'', ''Before'' or ''After''.'
          type:
            - string
  - uid: word.Word.Range.insertOoxml
    summary: >-
      Inserts OOXML at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before' or
      'After'.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: word.Word.Range.insertOoxml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', ''End'', ''Before'' or ''After''.'
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to insert OOXML in to the beginning of the range.
          range.insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('OOXML added to the beginning of the range.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.insertParagraph
    summary: |-
      Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: word.Word.Range.insertParagraph
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: string): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type:
            - string
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to insert the paragraph after the range.
          range.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Paragraph added to the end of the range.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.insertTable
    summary: >-
      Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Before' or
      'After'.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    fullName: word.Word.Range.insertTable
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertTable(rowCount: number, columnCount: number, insertLocation: string, values?: Array<Array<string>>):
        Word.Table;
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: Required. The number of rows in the table.
          type:
            - number
        - id: columnCount
          description: Required. The number of columns in the table.
          type:
            - number
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - string
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type:
            - Array<Array<string>>
  - uid: word.Word.Range.insertText
    summary: >-
      Inserts text at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before' or
      'After'.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: 'insertText(text, insertLocation)'
    fullName: word.Word.Range.insertText
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'', ''End'', ''Before'' or ''After''.'
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to insert the paragraph at the end of the range.
          range.insertText('New text inserted into the range.', Word.InsertLocation.end);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Text added to the end of the range.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.intersectWith
    summary: >-
      Returns a new range as the intersection of this range with another range. This range is not changed. Throws if the
      two ranges are not overlapped or adjacent.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: intersectWith(range)
    fullName: word.Word.Range.intersectWith
    langs:
      - typeScript
    type: method
    syntax:
      content: 'intersectWith(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Required. Another range.
          type:
            - Word.Range
  - uid: word.Word.Range.intersectWithOrNullObject
    summary: >-
      Returns a new range as the intersection of this range with another range. This range is not changed. Returns a
      null object if the two ranges are not overlapped or adjacent.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: intersectWithOrNullObject(range)
    fullName: word.Word.Range.intersectWithOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'intersectWithOrNullObject(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Required. Another range.
          type:
            - Word.Range
  - uid: word.Word.Range.isEmpty
    summary: |-
      Checks whether the range length is zero. Read-only.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: isEmpty
    fullName: word.Word.Range.isEmpty
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isEmpty: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Range.lists
    summary: |-
      Gets the collection of list objects in the range. Read-only.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: lists
    fullName: word.Word.Range.lists
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lists: Word.ListCollection;'
      return:
        type:
          - Word.ListCollection
  - uid: word.Word.Range.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: word.Word.Range.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: word.Word.Range.paragraphs
    summary: |-
      Gets the collection of paragraph objects in the range. Read-only.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: paragraphs
    fullName: word.Word.Range.paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - Word.ParagraphCollection
  - uid: word.Word.Range.parentBody
    summary: |-
      Gets the parent body of the range. Read-only.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: parentBody
    fullName: word.Word.Range.parentBody
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentBody: Word.Body;'
      return:
        type:
          - Word.Body
  - uid: word.Word.Range.parentContentControl
    summary: |-
      Gets the content control that contains the range. Throws if there isn't a parent content control. Read-only.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: parentContentControl
    fullName: word.Word.Range.parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentContentControl: Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
  - uid: word.Word.Range.parentContentControlOrNullObject
    summary: >-
      Gets the content control that contains the range. Returns a null object if there isn't a parent content control.
      Read-only.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: parentContentControlOrNullObject
    fullName: word.Word.Range.parentContentControlOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
  - uid: word.Word.Range.parentTable
    summary: |-
      Gets the table that contains the range. Throws if it is not contained in a table. Read-only.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: parentTable
    fullName: word.Word.Range.parentTable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentTable: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word.Word.Range.parentTableCell
    summary: |-
      Gets the table cell that contains the range. Throws if it is not contained in a table cell. Read-only.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: parentTableCell
    fullName: word.Word.Range.parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentTableCell: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word.Word.Range.parentTableCellOrNullObject
    summary: >-
      Gets the table cell that contains the range. Returns a null object if it is not contained in a table cell.
      Read-only.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: parentTableCellOrNullObject
    fullName: word.Word.Range.parentTableCellOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentTableCellOrNullObject: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word.Word.Range.parentTableOrNullObject
    summary: |-
      Gets the table that contains the range. Returns a null object if it is not contained in a table. Read-only.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: parentTableOrNullObject
    fullName: word.Word.Range.parentTableOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentTableOrNullObject: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word.Word.Range.search
    summary: >-
      Performs a search with the specified searchOptions on the scope of the range object. The search results are a
      collection of range objects.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: 'search(searchText, searchOptions)'
    fullName: word.Word.Range.search
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: searchText
          description: Required. The search text.
          type:
            - string
        - id: searchOptions
          description: Optional. Options for the search.
          type:
            - |-
              Word.SearchOptions | {
                          ignorePunct?: boolean;
                          ignoreSpace?: boolean;
                          matchCase?: boolean;
                          matchPrefix?: boolean;
                          matchSuffix?: boolean;
                          matchWholeWord?: boolean;
                          matchWildcards?: boolean;
                      }
  - uid: word.Word.Range.select
    summary: |-
      Selects and navigates the Word UI to the range.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: select(selectionMode)
    fullName: word.Word.Range.select
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionMode
          description: 'Optional. The selection mode can be ''Select'', ''Start'' or ''End''. ''Select'' is the default.'
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to get the current selection and then
          // create a proxy range object with the results.
          var range = context.document.getSelection();

          // Queue a commmand to insert HTML in to the beginning of the range.
          range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

          // Queue a command to select the HTML that was inserted.
          range.select();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Selected the range.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Range.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: word.Word.Range.set
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        set(properties: Interfaces.RangeUpdateData, options?: {
                    throwOnReadOnly?: boolean;
                }): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: ''
          type:
            - |-
              {
                          /**
                           * Throw an error if the passed-in property list includes read-only properties (default = true).
                           */
                          throwOnReadOnly?: boolean;
                      }
  - uid: word.Word.Range.split
    summary: |-
      Splits the range into child ranges by using delimiters.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    fullName: word.Word.Range.split
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        split(delimiters: Array<string>, multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean):
        Word.RangeCollection;
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: delimiters
          description: Required. The delimiters as an array of strings.
          type:
            - Array<string>
        - id: multiParagraphs
          description: >-
            Optional. Indicates whether a returned child range can cover multiple paragraphs. Default is false which
            indicates that the paragraph boundaries are also used as delimiters.
          type:
            - boolean
        - id: trimDelimiters
          description: >-
            Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is false
            which indicates that the delimiters are included in the ranges returned in the range collection.
          type:
            - boolean
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks)
            from the start and end of the ranges returned in the range collection. Default is false which indicates that
            spacing characters at the start and end of the ranges are included in the range collection.
          type:
            - boolean
  - uid: word.Word.Range.style
    summary: >-
      Gets or sets the style name for the range. Use this property for custom styles and localized style names. To use
      the built-in styles that are portable between locales, see the "styleBuiltIn" property.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: style
    fullName: word.Word.Range.style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: word.Word.Range.styleBuiltIn
    summary: >-
      Gets or sets the built-in style name for the range. Use this property for built-in styles that are portable
      between locales. To use custom styles or localized style names, see the "style" property.


      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: styleBuiltIn
    fullName: word.Word.Range.styleBuiltIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styleBuiltIn: string;'
      return:
        type:
          - string
  - uid: word.Word.Range.tables
    summary: |-
      Gets the collection of table objects in the range. Read-only.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: tables
    fullName: word.Word.Range.tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tables: Word.TableCollection;'
      return:
        type:
          - Word.TableCollection
  - uid: word.Word.Range.text
    summary: |-
      Gets the text of the range. Read-only.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: text
    fullName: word.Word.Range.text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'text: string;'
      return:
        type:
          - string
  - uid: word.Word.Range.toJSON
    name: toJSON()
    fullName: word.Word.Range.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON:'
      return:
        type:
          - |-
            {
                        "font": Font;
                        "hyperlink": string;
                        "isEmpty": boolean;
                        "style": string;
                        "styleBuiltIn": string;
                        "text": string;
                    }
        description: ''
  - uid: word.Word.Range.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: word.Word.Range.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
  - uid: word.Word.Range.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: word.Word.Range.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
