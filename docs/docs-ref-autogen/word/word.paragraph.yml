### YamlMime:UniversalReference
items:
  - uid: word.Word.Paragraph
    summary: |-
      Represents a single paragraph in a selection, range, content control, or document body.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: Word.Paragraph
    fullName: word.Word.Paragraph
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: word
    children:
      - word.Word.Paragraph.alignment
      - word.Word.Paragraph.attachToList
      - word.Word.Paragraph.clear
      - word.Word.Paragraph.contentControls
      - word.Word.Paragraph.delete
      - word.Word.Paragraph.detachFromList
      - word.Word.Paragraph.firstLineIndent
      - word.Word.Paragraph.font
      - word.Word.Paragraph.getHtml
      - word.Word.Paragraph.getNext
      - word.Word.Paragraph.getNextOrNullObject
      - word.Word.Paragraph.getOoxml
      - word.Word.Paragraph.getPrevious
      - word.Word.Paragraph.getPreviousOrNullObject
      - word.Word.Paragraph.getRange
      - word.Word.Paragraph.getTextRanges
      - word.Word.Paragraph.inlinePictures
      - word.Word.Paragraph.insertBreak
      - word.Word.Paragraph.insertContentControl
      - word.Word.Paragraph.insertFileFromBase64
      - word.Word.Paragraph.insertHtml
      - word.Word.Paragraph.insertInlinePictureFromBase64
      - word.Word.Paragraph.insertOoxml
      - word.Word.Paragraph.insertParagraph
      - word.Word.Paragraph.insertTable
      - word.Word.Paragraph.insertText
      - word.Word.Paragraph.isLastParagraph
      - word.Word.Paragraph.isListItem
      - word.Word.Paragraph.leftIndent
      - word.Word.Paragraph.lineSpacing
      - word.Word.Paragraph.lineUnitAfter
      - word.Word.Paragraph.lineUnitBefore
      - word.Word.Paragraph.list
      - word.Word.Paragraph.listItem
      - word.Word.Paragraph.listItemOrNullObject
      - word.Word.Paragraph.listOrNullObject
      - word.Word.Paragraph.load
      - word.Word.Paragraph.outlineLevel
      - word.Word.Paragraph.parentBody
      - word.Word.Paragraph.parentContentControl
      - word.Word.Paragraph.parentContentControlOrNullObject
      - word.Word.Paragraph.parentTable
      - word.Word.Paragraph.parentTableCell
      - word.Word.Paragraph.parentTableCellOrNullObject
      - word.Word.Paragraph.parentTableOrNullObject
      - word.Word.Paragraph.rightIndent
      - word.Word.Paragraph.search
      - word.Word.Paragraph.select
      - word.Word.Paragraph.set
      - word.Word.Paragraph.spaceAfter
      - word.Word.Paragraph.spaceBefore
      - word.Word.Paragraph.split
      - word.Word.Paragraph.startNewList
      - word.Word.Paragraph.style
      - word.Word.Paragraph.styleBuiltIn
      - word.Word.Paragraph.tableNestingLevel
      - word.Word.Paragraph.text
      - word.Word.Paragraph.toJSON
      - word.Word.Paragraph.track
      - word.Word.Paragraph.untrack
  - uid: word.Word.Paragraph.alignment
    summary: |-
      Gets or sets the alignment for a paragraph. The value can be 'left', 'centered', 'right', or 'justified'.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: alignment
    fullName: word.Word.Paragraph.alignment
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";'
      return:
        type:
          - Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"
    remarks: |


      #### Examples

      ```typescript
      await Word.run(async (context) => {
          // Centers last paragraph alignment
          context.document.body.paragraphs
              .getLast().alignment = "Centered";

          await context.sync();
      });
      ```
  - uid: word.Word.Paragraph.attachToList
    summary: >-
      Lets the paragraph join an existing list at the specified level. Fails if the paragraph cannot join the list or if
      the paragraph is already a list item.


      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'attachToList(listId, level)'
    fullName: word.Word.Paragraph.attachToList
    langs:
      - typeScript
    type: method
    syntax:
      content: 'attachToList(listId: number, level: number): Word.List;'
      return:
        type:
          - word.Word.List
        description: ''
      parameters:
        - id: listId
          description: Required. The ID of an existing list.
          type:
            - number
        - id: level
          description: Required. The level in the list.
          type:
            - number
  - uid: word.Word.Paragraph.clear
    summary: |-
      Clears the contents of the paragraph object. The user can perform the undo operation on the cleared content.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: clear()
    fullName: word.Word.Paragraph.clear
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for all of the paragraphs.
          context.load(paragraphs, 'style');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to clear the contents of the first paragraph.
              paragraphs.items[0].clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the contents of the first paragraph.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Paragraph.contentControls
    summary: |-
      Gets the collection of content control objects in the paragraph. Read-only.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: contentControls
    fullName: word.Word.Paragraph.contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - word.Word.ContentControlCollection
  - uid: word.Word.Paragraph.delete
    summary: |-
      Deletes the paragraph and its content from the document.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: delete()
    fullName: word.Word.Paragraph.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the text property for all of the paragraphs.
          context.load(paragraphs, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to delete the first paragraph.
              paragraphs.items[0].delete();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Deleted the first paragraph.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Paragraph.detachFromList
    summary: |-
      Moves this paragraph out of its list, if the paragraph is a list item.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: detachFromList()
    fullName: word.Word.Paragraph.detachFromList
    langs:
      - typeScript
    type: method
    syntax:
      content: 'detachFromList(): void;'
      return:
        type:
          - void
        description: ''
  - uid: word.Word.Paragraph.firstLineIndent
    summary: >-
      Gets or sets the value, in points, for a first line or hanging indent. Use a positive value to set a first-line
      indent, and use a negative value to set a hanging indent.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: firstLineIndent
    fullName: word.Word.Paragraph.firstLineIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstLineIndent: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.font
    summary: >-
      Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.
      Read-only.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: font
    fullName: word.Word.Paragraph.font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - word.Word.Font
  - uid: word.Word.Paragraph.getHtml
    summary: |-
      Gets the HTML representation of the paragraph object.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getHtml()
    fullName: word.Word.Paragraph.getHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for all of the paragraphs.
          context.load(paragraphs, 'style');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a a set of commands to get the HTML of the first paragraph.
              var html = paragraphs.items[0].getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph HTML: ' + html.value);
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Paragraph.getNext
    summary: |-
      Gets the next paragraph. Throws if the paragraph is the last one.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getNext()
    fullName: word.Word.Paragraph.getNext
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: word.Word.Paragraph.getNextOrNullObject
    summary: |-
      Gets the next paragraph. Returns a null object if the paragraph is the last one.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getNextOrNullObject()
    fullName: word.Word.Paragraph.getNextOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: word.Word.Paragraph.getOoxml
    summary: |-
      Gets the Office Open XML (OOXML) representation of the paragraph object.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getOoxml()
    fullName: word.Word.Paragraph.getOoxml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for the top 2 paragraphs.
          context.load(paragraphs, {select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a a set of commands to get the OOXML of the first paragraph.
              var ooxml = paragraphs.items[0].getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph OOXML: ' + ooxml.value);
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Paragraph.getPrevious
    summary: |-
      Gets the previous paragraph. Throws if the paragraph is the first one.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getPrevious()
    fullName: word.Word.Paragraph.getPrevious
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: word.Word.Paragraph.getPreviousOrNullObject
    summary: |-
      Gets the previous paragraph. Returns a null object if the paragraph is the first one.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getPreviousOrNullObject()
    fullName: word.Word.Paragraph.getPreviousOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the text property for all of the paragraphs.
          context.load(paragraphs, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue commands to create a proxy object for the next-to-last paragraph.
              var indexOfLastParagraph = paragraphs.items.length - 1;
              var precedingParagraph = paragraphs.items[indexOfLastParagraph].getPreviousOrNullObject();

              // Queue a command to load the text of the preceding paragraph.
              context.load(precedingParagraph, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (precedingParagraph.isNullObject) {
                      console.log('There are no paragraphs before the current one.');
                  } else {
                      console.log('The preceding paragraph is: ' + precedingParagraph.text);
                  }
              });
          });
      }).catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Paragraph.getRange
    summary: |-
      Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: getRange(rangeLocation)
    fullName: word.Word.Paragraph.getRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocation
          description: 'Optional. The range location can be ''Whole'', ''Start'', ''End'', ''After'' or ''Content''.'
          type:
            - word.Word.RangeLocation
  - uid: word.Word.Paragraph.getTextRanges
    summary: |-
      Gets the text ranges in the paragraph by using punctuation marks and/or other ending marks.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'getTextRanges(endingMarks, trimSpacing)'
    fullName: word.Word.Paragraph.getTextRanges
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - word.Word.RangeCollection
        description: ''
      parameters:
        - id: endingMarks
          description: Required. The punctuation marks and/or other ending marks as an array of strings.
          type:
            - 'string[]'
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks)
            from the start and end of the ranges returned in the range collection. Default is false which indicates that
            spacing characters at the start and end of the ranges are included in the range collection.
          type:
            - boolean
    remarks: |


      #### Examples

      ```typescript
      await Word.run(async (context) => {
          // Gets the complete sentence  (as range) associated with the insertion point.
          let sentences = context.document
              .getSelection().getTextRanges(["."] /* Using the "." as delimiter */, false /*means without trimming spaces*/);
          sentences.load("$none");

          await context.sync();

          //  Expands the range to the end of the paragraph to get all the complete sentences.
          let sentencesToTheEndOfParagraph = sentences.items[0].getRange()
              .expandTo(context.document.getSelection().paragraphs
                  .getFirst().getRange("End")).getTextRanges(["."], false /* Don't trim spaces*/);
          sentencesToTheEndOfParagraph.load("text");

          await context.sync();
          for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {
              console.log(sentencesToTheEndOfParagraph.items[i].text);
          }
      });
      ```
  - uid: word.Word.Paragraph.inlinePictures
    summary: >-
      Gets the collection of inlinePicture objects in the paragraph. The collection does not include floating images.
      Read-only.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: inlinePictures
    fullName: word.Word.Paragraph.inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - word.Word.InlinePictureCollection
  - uid: word.Word.Paragraph.insertBreak
    summary: >-
      Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or
      'After'.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'insertBreak(breakType, insertLocation)'
    fullName: word.Word.Paragraph.insertBreak
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakType
          description: Required. The break type to add to the document.
          type:
            - word.Word.BreakType
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - word.Word.InsertLocation
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for the top 2 paragraphs.
          // We never perform an empty load. We always must request a property.
          context.load(paragraphs, {select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to get the first paragraph.
              var paragraph = paragraphs.items[0];

              // Queue a command to insert a page break after the first paragraph.
              paragraph.insertBreak('page', 'After');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted a page break after the paragraph.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```typescript
      Word.run(async (context) => {
          context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, "After");

          await context.sync();
          console.log("success");
      });
      ```

      ```typescript
      await Word.run(async (context) => {
          context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.page, "After");

          await context.sync();
          console.log("success");
      });
      ```
  - uid: word.Word.Paragraph.insertContentControl
    summary: |-
      Wraps the paragraph object with a rich text content control.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: insertContentControl()
    fullName: word.Word.Paragraph.insertContentControl
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: ''
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for the top 2 paragraphs.
          // We never perform an empty load. We always must request a property.
          context.load(paragraphs, {select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to get the first paragraph.
              var paragraph = paragraphs.items[0];

              // Queue a command to wrap the first paragraph in a rich text content control.
              paragraph.insertContentControl();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped the first paragraph in a content control.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Paragraph.insertFileFromBase64
    summary: >-
      Inserts a document into the paragraph at the specified location. The insertLocation value can be 'Replace',
      'Start' or 'End'.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: word.Word.Paragraph.insertFileFromBase64
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertHtml
    summary: >-
      Inserts HTML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or
      'End'.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'insertHtml(html, insertLocation)'
    fullName: word.Word.Paragraph.insertHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: html
          description: Required. The HTML to be inserted in the paragraph.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - word.Word.InsertLocation
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for the top 2 paragraphs.
          // We never perform an empty load. We always must request a property.
          context.load(paragraphs, {select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to get the first paragraph.
              var paragraph = paragraphs.items[0];

              // Queue a command to insert HTML content at the end of the first paragraph.
              paragraph.insertHtml('<strong>Inserted HTML.</strong>', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted HTML content at the end of the first paragraph.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Paragraph.insertInlinePictureFromBase64
    summary: >-
      Inserts a picture into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start'
      or 'End'.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: word.Word.Paragraph.insertInlinePictureFromBase64
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation):
        Word.InlinePicture;
      return:
        type:
          - word.Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: Required. The base64 encoded image to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - word.Word.InsertLocation
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for all of the paragraphs.
          context.load(paragraphs, 'style');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to get the first paragraph.
              var paragraph = paragraphs.items[0];

              var b64encodedImg = "iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC";

              // Queue a command to insert a base64 encoded image at the beginning of the first paragraph.
              paragraph.insertInlinePictureFromBase64(b64encodedImg, Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added an image to the first paragraph.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: word.Word.Paragraph.insertOoxml
    summary: >-
      Inserts OOXML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or
      'End'.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: word.Word.Paragraph.insertOoxml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted in the paragraph.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Paragraph.insertParagraph
    summary: |-
      Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: word.Word.Paragraph.insertParagraph
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type:
            - string
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - word.Word.InsertLocation
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for the top 2 paragraphs.
          // We never perform an empty load. We always must request a property.
          context.load(paragraphs, {select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to get the first paragraph.
              var paragraph = paragraphs.items[0];

              // Queue a command to insert the paragraph after the current paragraph.
              paragraph.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted a new paragraph at the end of the first paragraph.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```typescript
      await Word.run(async (context) => {
          // Insert first sentence. Then we adjust the formatting.
          // Note that replace affects the calling object, in this case the entire document body.
          // A similar method can also be used at the range level.
          let firstSentence = context.document.body.insertText("This is some formatted text!", "Replace");
          firstSentence.font.set({
              name: "Courier New",
              bold: true,
              size: 18
          });;

          // Second sentence, let's insert it as a paragraph after the previously inserted one.
          let secondSentence = context.document.body.insertParagraph("This is other formatted text.", "End");
          secondSentence.font.set({
              bold: false,
              italic: true,
              name: 'Berlin Sans FB',
              color: 'blue',
              size: 30
          });;

          // You can also use pre-exsiting styles.
          let lastSentence = context.document.body.insertParagraph("To be or not to be", "End");

          // Use styleBuiltIn to use an enumeration of existing styles. If your style is custom make sure to use range.style = "name of your style";
          lastSentence.styleBuiltIn = Word.Style.intenseReference;

          await context.sync();
      });
      ```
  - uid: word.Word.Paragraph.insertTable
    summary: >-
      Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Before' or
      'After'.


      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    fullName: word.Word.Paragraph.insertTable
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]):
        Word.Table;
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: Required. The number of rows in the table.
          type:
            - number
        - id: columnCount
          description: Required. The number of columns in the table.
          type:
            - number
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - word.Word.InsertLocation
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type:
            - 'string[][]'
  - uid: word.Word.Paragraph.insertText
    summary: >-
      Inserts text into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or
      'End'.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'insertText(text, insertLocation)'
    fullName: word.Word.Paragraph.insertText
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - word.Word.InsertLocation
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for the top 2 paragraphs.
          // We never perform an empty load. We always must request a property.
          context.load(paragraphs, {select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to get the first paragraph.
              var paragraph = paragraphs.items[0];

              // Queue a command to insert text into the end of the paragraph.
              paragraph.insertText('New text inserted into the paragraph.', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted text at the end of the first paragraph.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```typescript
      await Word.run(async (context) => {
          // Here we insert to replace text
          let range = context.document.body.paragraphs
              .getLast().insertText("Just replaced the last paragraph!", "Replace");
          range.font.highlightColor = "black";
          range.font.color = "white";

          await context.sync();
      });
      ```
  - uid: word.Word.Paragraph.isLastParagraph
    summary: |-
      Indicates the paragraph is the last one inside its parent body. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: isLastParagraph
    fullName: word.Word.Paragraph.isLastParagraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isLastParagraph: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Paragraph.isListItem
    summary: |-
      Checks whether the paragraph is a list item. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: isListItem
    fullName: word.Word.Paragraph.isListItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isListItem: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Paragraph.leftIndent
    summary: |-
      Gets or sets the left indent value, in points, for the paragraph.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: leftIndent
    fullName: word.Word.Paragraph.leftIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'leftIndent: number;'
      return:
        type:
          - number
    remarks: |


      #### Examples

      ```typescript
      await Word.run(async (context) => {
          // Indents the first paragraph
          context.document.body.paragraphs.
              getFirst().leftIndent = 75; //units = points

          return context.sync();
      });
      ```
  - uid: word.Word.Paragraph.lineSpacing
    summary: >-
      Gets or sets the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by
      12.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: lineSpacing
    fullName: word.Word.Paragraph.lineSpacing
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineSpacing: number;'
      return:
        type:
          - number
    remarks: |


      #### Examples

      ```typescript
      await Word.run(async (context) => {
          // Adjusts line spacing 
          context.document.body.paragraphs
              .getFirst().lineSpacing = 20;

          await context.sync();
      });
      ```
  - uid: word.Word.Paragraph.lineUnitAfter
    summary: |-
      Gets or sets the amount of spacing, in grid lines. after the paragraph.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: lineUnitAfter
    fullName: word.Word.Paragraph.lineUnitAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitAfter: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.lineUnitBefore
    summary: |-
      Gets or sets the amount of spacing, in grid lines, before the paragraph.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: lineUnitBefore
    fullName: word.Word.Paragraph.lineUnitBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitBefore: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.list
    summary: |-
      Gets the List to which this paragraph belongs. Throws if the paragraph is not in a list. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: list
    fullName: word.Word.Paragraph.list
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly list: Word.List;'
      return:
        type:
          - word.Word.List
  - uid: word.Word.Paragraph.listItem
    summary: |-
      Gets the ListItem for the paragraph. Throws if the paragraph is not part of a list. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: listItem
    fullName: word.Word.Paragraph.listItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly listItem: Word.ListItem;'
      return:
        type:
          - word.Word.ListItem
  - uid: word.Word.Paragraph.listItemOrNullObject
    summary: |-
      Gets the ListItem for the paragraph. Returns a null object if the paragraph is not part of a list. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: listItemOrNullObject
    fullName: word.Word.Paragraph.listItemOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly listItemOrNullObject: Word.ListItem;'
      return:
        type:
          - word.Word.ListItem
  - uid: word.Word.Paragraph.listOrNullObject
    summary: |-
      Gets the List to which this paragraph belongs. Returns a null object if the paragraph is not in a list. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: listOrNullObject
    fullName: word.Word.Paragraph.listOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly listOrNullObject: Word.List;'
      return:
        type:
          - word.Word.List
  - uid: word.Word.Paragraph.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: word.Word.Paragraph.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.ParagraphLoadOptions): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Word.Interfaces.ParagraphLoadOptions
  - uid: word.Word.Paragraph.outlineLevel
    summary: |-
      Gets or sets the outline level for the paragraph.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: outlineLevel
    fullName: word.Word.Paragraph.outlineLevel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'outlineLevel: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.parentBody
    summary: |-
      Gets the parent body of the paragraph. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: parentBody
    fullName: word.Word.Paragraph.parentBody
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentBody: Word.Body;'
      return:
        type:
          - Word.Body
  - uid: word.Word.Paragraph.parentContentControl
    summary: |-
      Gets the content control that contains the paragraph. Throws if there isn't a parent content control. Read-only.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: parentContentControl
    fullName: word.Word.Paragraph.parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word.Word.Paragraph.parentContentControlOrNullObject
    summary: >-
      Gets the content control that contains the paragraph. Returns a null object if there isn't a parent content
      control. Read-only.


      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: parentContentControlOrNullObject
    fullName: word.Word.Paragraph.parentContentControlOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word.Word.Paragraph.parentTable
    summary: |-
      Gets the table that contains the paragraph. Throws if it is not contained in a table. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: parentTable
    fullName: word.Word.Paragraph.parentTable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTable: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word.Word.Paragraph.parentTableCell
    summary: |-
      Gets the table cell that contains the paragraph. Throws if it is not contained in a table cell. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: parentTableCell
    fullName: word.Word.Paragraph.parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCell: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word.Word.Paragraph.parentTableCellOrNullObject
    summary: >-
      Gets the table cell that contains the paragraph. Returns a null object if it is not contained in a table cell.
      Read-only.


      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: parentTableCellOrNullObject
    fullName: word.Word.Paragraph.parentTableCellOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word.Word.Paragraph.parentTableOrNullObject
    summary: |-
      Gets the table that contains the paragraph. Returns a null object if it is not contained in a table. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: parentTableOrNullObject
    fullName: word.Word.Paragraph.parentTableOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableOrNullObject: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word.Word.Paragraph.rightIndent
    summary: |-
      Gets or sets the right indent value, in points, for the paragraph.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: rightIndent
    fullName: word.Word.Paragraph.rightIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rightIndent: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.search
    summary: >-
      Performs a search with the specified searchOptions on the scope of the paragraph object. The search results are a
      collection of range objects.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'search(searchText, searchOptions)'
    fullName: word.Word.Paragraph.search
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - word.Word.RangeCollection
        description: ''
      parameters:
        - id: searchText
          description: Required. The search text.
          type:
            - string
        - id: searchOptions
          description: Optional. Options for the search.
          type:
            - |-
              Word.SearchOptions | {
                          ignorePunct?: boolean;
                          ignoreSpace?: boolean;
                          matchCase?: boolean;
                          matchPrefix?: boolean;
                          matchSuffix?: boolean;
                          matchWholeWord?: boolean;
                          matchWildcards?: boolean;
                      }
  - uid: word.Word.Paragraph.select
    summary: |-
      Selects and navigates the Word UI to the paragraph.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: select(selectionMode)
    fullName: word.Word.Paragraph.select
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionMode
          description: 'Optional. The selection mode can be ''Select'', ''Start'' or ''End''. ''Select'' is the default.'
          type:
            - Word.SelectionMode
    remarks: |


      #### Examples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the style property for all of the paragraphs.
          context.load(paragraphs, 'style');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a command to get the last paragraph a create a
              // proxy paragraph object.
              var paragraph = paragraphs.items[paragraphs.items.length - 1];

              // Queue a command to select the paragraph. The Word UI will
              // move to the selected paragraph.
              paragraph.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the last paragraph.');
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```typescript
      await Word.run(async (context) => {
          // If select is called, with no parameters it selects the object.
          context.document.body.paragraphs.getLast().select();

          await context.sync();
      });
      ```

      ```typescript
      await Word.run(async (context) => {
          //Select can be at the start or end of a range, this by definition moves the insertion point without selecting the range. 
          context.document.body.paragraphs.getLast().select("End");

          await context.sync();
      });
      ```
  - uid: word.Word.Paragraph.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: word.Word.Paragraph.set
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.ParagraphUpdateData
        - id: options
          description: ''
          type:
            - office.OfficeExtension.UpdateOptions
    remarks: |


      #### Examples

      ```typescript
      await Word.run(async (context) => {
          const paragraph = context.document.body.paragraphs.getFirst();
          paragraph.set({
              leftIndent: 30,
              font: {
                  bold: true,
                  color: "red"
              }
          });

          await context.sync();
      });
      ```

      ```typescript
      await Word.run(async (context) => {
          const firstParagraph = context.document.body.paragraphs.getFirst();
          const secondParagraph = firstParagraph.getNext();
          firstParagraph.load("text, font/color, font/bold, leftIndent");

          await context.sync();

          secondParagraph.set(firstParagraph);

          await context.sync();
      });
      ```
  - uid: word.Word.Paragraph.spaceAfter
    summary: |-
      Gets or sets the spacing, in points, after the paragraph.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: spaceAfter
    fullName: word.Word.Paragraph.spaceAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceAfter: number;'
      return:
        type:
          - number
    remarks: |


      #### Examples

      ```typescript
      await Word.run(async (context) => {
          //Adjust space between paragraphs
          context.document.body.paragraphs
              .getFirst().spaceAfter = 20;

          await context.sync();
      });
      ```
  - uid: word.Word.Paragraph.spaceBefore
    summary: |-
      Gets or sets the spacing, in points, before the paragraph.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: spaceBefore
    fullName: word.Word.Paragraph.spaceBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceBefore: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.split
    summary: |-
      Splits the paragraph into child ranges by using delimiters.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: 'split(delimiters, trimDelimiters, trimSpacing)'
    fullName: word.Word.Paragraph.split
    langs:
      - typeScript
    type: method
    syntax:
      content: 'split(delimiters: string[], trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - word.Word.RangeCollection
        description: ''
      parameters:
        - id: delimiters
          description: Required. The delimiters as an array of strings.
          type:
            - 'string[]'
        - id: trimDelimiters
          description: >-
            Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is false
            which indicates that the delimiters are included in the ranges returned in the range collection.
          type:
            - boolean
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks)
            from the start and end of the ranges returned in the range collection. Default is false which indicates that
            spacing characters at the start and end of the ranges are included in the range collection.
          type:
            - boolean
    remarks: |


      #### Examples

      ```typescript
      await Word.run(async (context) => {
          let paragraph = context.document.body.paragraphs.getFirst();
          let words = paragraph.split(
              [" "], true /* trimDelimiters*/, true /* trimSpaces */);
          words.load("text");

          await context.sync();

          for (let i = 0; i < words.items.length; i++) {
              if (i >= 1) {
                  words.items[i - 1].font.highlightColor = "#FFFFFF";
              }
              words.items[i].font.highlightColor = "#FFFF00";

              await context.sync();
              await pause(200);
          }
      });
      ```
  - uid: word.Word.Paragraph.startNewList
    summary: |-
      Starts a new list with this paragraph. Fails if the paragraph is already a list item.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: startNewList()
    fullName: word.Word.Paragraph.startNewList
    langs:
      - typeScript
    type: method
    syntax:
      content: 'startNewList(): Word.List;'
      return:
        type:
          - word.Word.List
        description: ''
    remarks: |


      #### Examples

      ```typescript
      //This example starts a new list stating with the second paragraph.
      await Word.run(async (context) => {
          let paragraphs = context.document.body.paragraphs;
          paragraphs.load("$none"); //We need no properties.

          await context.sync();

          var list = paragraphs.items[1].startNewList(); //Indicates new list to be started in the second paragraph.
          list.load("$none"); //We need no properties.

          await context.sync();

          //To add new items to the list use start/end on the insert location parameter.
          list.insertParagraph('New list item on top of the list', 'Start');
          let paragraph = list.insertParagraph('New list item at the end of the list (4th level)', 'End');
          paragraph.listItem.level = 4; //Sets up list level for the lsit item.
          //To add paragraphs outside the list use before/after:
          list.insertParagraph('New paragraph goes after (not part of the list)', 'After');

          await context.sync();
      });
      ```
  - uid: word.Word.Paragraph.style
    summary: >-
      Gets or sets the style name for the paragraph. Use this property for custom styles and localized style names. To
      use the built-in styles that are portable between locales, see the "styleBuiltIn" property.


      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: style
    fullName: word.Word.Paragraph.style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: word.Word.Paragraph.styleBuiltIn
    summary: >-
      Gets or sets the built-in style name for the paragraph. Use this property for built-in styles that are portable
      between locales. To use custom styles or localized style names, see the "style" property.


      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: styleBuiltIn
    fullName: word.Word.Paragraph.styleBuiltIn
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" |
        "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7"
        | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference"
        | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" |
        "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" |
        "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" |
        "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" |
        "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" |
        "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" |
        "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" |
        "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6"
        | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" |
        "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" |
        "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" |
        "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" |
        "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" |
        "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" |
        "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" |
        "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" |
        "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" |
        "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" |
        "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" |
        "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6"
        | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" |
        "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" |
        "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" |
        "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" |
        "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" |
        "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" |
        "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" |
        "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";
      return:
        type:
          - >-
            Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" |
            "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" |
            "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" |
            "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" |
            "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" |
            "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" |
            "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" |
            "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" |
            "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" |
            "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" |
            "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" |
            "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" |
            "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" |
            "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" |
            "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" |
            "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" |
            "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" |
            "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" |
            "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" |
            "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" |
            "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" |
            "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" |
            "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" |
            "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" |
            "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" |
            "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" |
            "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" |
            "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" |
            "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" |
            "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" |
            "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" |
            "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" |
            "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
  - uid: word.Word.Paragraph.tableNestingLevel
    summary: |-
      Gets the level of the paragraph's table. It returns 0 if the paragraph is not in a table. Read-only.

      \[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: tableNestingLevel
    fullName: word.Word.Paragraph.tableNestingLevel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tableNestingLevel: number;'
      return:
        type:
          - number
  - uid: word.Word.Paragraph.text
    summary: |-
      Gets the text of the paragraph. Read-only.

      \[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]
    name: text
    fullName: word.Word.Paragraph.text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
    remarks: |


      #### Examples

      ```typescript
      await Word.run(async (context) => {
          // The collection of paragraphs of the current selection returns the full paragraphs contanied on it. 
          let paragraph = context.document.getSelection().paragraphs.getFirst();
          paragraph.load("text");

          await context.sync();
          console.log(paragraph.text);
      });
      ```
  - uid: word.Word.Paragraph.toJSON
    name: toJSON()
    fullName: word.Word.Paragraph.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ParagraphData;'
      return:
        type:
          - Word.Interfaces.ParagraphData
        description: ''
  - uid: word.Word.Paragraph.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: word.Word.Paragraph.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: word.Word.Paragraph.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: word.Word.Paragraph.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
