### YamlMime:UniversalReference
items:
  - uid: word.Word.Document
    summary: >-
      The Document object is the top level object. A Document object contains one or more sections, content controls,
      and the body that contains the contents of the document.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: Word.Document
    fullName: word.Word.Document
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: word
    children:
      - word.Word.Document.body
      - word.Word.Document.contentControls
      - word.Word.Document.getSelection
      - word.Word.Document.load
      - word.Word.Document.properties
      - word.Word.Document.save
      - word.Word.Document.saved
      - word.Word.Document.sections
      - word.Word.Document.toJSON
      - word.Word.Document.track
      - word.Word.Document.untrack
  - uid: word.Word.Document.body
    summary: >-
      Gets the body object of the document. The body is the text that excludes headers, footers, footnotes, textboxes,
      etc.. Read-only.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: body
    fullName: word.Word.Document.body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly body: Word.Body;'
      return:
        type:
          - Word.Body
  - uid: word.Word.Document.contentControls
    summary: >-
      Gets the collection of content control objects in the document. This includes content controls in the body of the
      document, headers, footers, textboxes, etc.. Read-only.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: contentControls
    fullName: word.Word.Document.contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - word.Word.ContentControlCollection
  - uid: word.Word.Document.getSelection
    summary: |-
      Gets the current selection of the document. Multiple selections are not supported.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: getSelection()
    fullName: word.Word.Document.getSelection
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelection(): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-

          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              var textSample = 'This is an example of the insert text method. This is a method ' + 
                  'which allows users to insert text into a selection. It can insert text into a ' +
                  'relative location or it can overwrite the current selection. Since the ' +
                  'getSelection method returns a range object, look up the range object documentation ' +
                  'for everything you can do with a selection.';
              
              // Create a range proxy object for the current selection.
              var range = context.document.getSelection();
              
              // Queue a commmand to insert text at the end of the selection.
              range.insertText(textSample, Word.InsertLocation.end);
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted the text at the end of the selection.');
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Document.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): Word.Document` - Where option.select is a comma-delimited
      string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the
      navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Document` - Only available
      on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of
      collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.

      #### Examples


      ```javascript

      // Run a batch operation against the Word object model.

      Word.run(function (context) {
          
          // Create a proxy object for the document.
          var thisDocument = context.document;
          
          // Queue a command to load content control properties.
          context.load(thisDocument, 'contentControls/id, contentControls/text, contentControls/tag');
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              if (thisDocument.contentControls.items.length !== 0) {
                  for (var i = 0; i < thisDocument.contentControls.items.length; i++) {
                      console.log(thisDocument.contentControls.items[i].id);
                      console.log(thisDocument.contentControls.items[i].text);
                      console.log(thisDocument.contentControls.items[i].tag);
                  }
              } else {
                  console.log('No content controls in this document.');
              }
          });  
      })

      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: word.Word.Document.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): Word.Document;'
      return:
        type:
          - Word.Document
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: word.Word.Document.properties
    summary: |-
      Gets the properties of the document. Read-only.

      \[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: properties
    fullName: word.Word.Document.properties
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly properties: Word.DocumentProperties;'
      return:
        type:
          - Word.DocumentProperties
        description: |-

          #### Examples

          ```typescript
          await Word.run(async (context) => {
              let builtInProperties = context.document.properties;
              builtInProperties.load("*"); // Let's get all!

              await context.sync();
              console.log(JSON.stringify(builtInProperties, null, 4));
          });
          ```
  - uid: word.Word.Document.save
    summary: >-
      Saves the document. This will use the Word default file naming convention if the document has not been saved
      before.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: save()
    fullName: word.Word.Document.save
    langs:
      - typeScript
    type: method
    syntax:
      content: 'save(): void;'
      return:
        type:
          - void
        description: |-

          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the document.
              var thisDocument = context.document;

              // Queue a commmand to load the document save state (on the saved property).
              context.load(thisDocument, 'saved');    
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  
                  if (thisDocument.saved === false) {
                      // Queue a command to save this document.
                      thisDocument.save();
                      
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync().then(function () {
                          console.log('Saved the document');
                      });
                  } else {
                      console.log('The document has not changed since the last save.');
                  }
              });  
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Document.saved
    summary: >-
      Indicates whether the changes in the document have been saved. A value of true indicates that the document hasn't
      changed since it was saved. Read-only.


      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: saved
    fullName: word.Word.Document.saved
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly saved: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Document.sections
    summary: |-
      Gets the collection of section objects in the document. Read-only.

      \[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]
    name: sections
    fullName: word.Word.Document.sections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sections: Word.SectionCollection;'
      return:
        type:
          - Word.SectionCollection
  - uid: word.Word.Document.toJSON
    name: toJSON()
    fullName: word.Word.Document.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.DocumentData;'
      return:
        type:
          - Word.Interfaces.DocumentData
        description: ''
  - uid: word.Word.Document.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: word.Word.Document.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Document;'
      return:
        type:
          - Word.Document
        description: ''
  - uid: word.Word.Document.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: word.Word.Document.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Document;'
      return:
        type:
          - Word.Document
        description: ''
