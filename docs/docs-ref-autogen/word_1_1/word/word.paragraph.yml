### YamlMime:TSType
name: Word.Paragraph
uid: 'word!Word.Paragraph:class'
package: word!
fullName: Word.Paragraph
summary: 'Represents a single paragraph in a selection, range, content control, or document body.'
remarks: >-
  \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml


  await Word.run(async (context) => {
    // The collection of paragraphs of the current selection returns the full paragraphs contained in it.
    const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();
    paragraph.load("text");

    await context.sync();
    console.log(paragraph.text);
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: alignment
    uid: 'word!Word.Paragraph#alignment:member'
    package: word!
    fullName: alignment
    summary: 'Specifies the alignment for a paragraph. The value can be ''left'', ''centered'', ''right'', or ''justified''.'
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml


      await Word.run(async (context) => {
        // Center last paragraph alignment.
        context.document.body.paragraphs.getLast().alignment = "Centered";

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";'
      return:
        type: '<xref uid="word!Word.Alignment:enum" /> | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"'
  - name: contentControls
    uid: 'word!Word.Paragraph#contentControls:member'
    package: word!
    fullName: contentControls
    summary: Gets the collection of content control objects in the paragraph.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type: '<xref uid="word!Word.ContentControlCollection:class" />'
  - name: context
    uid: 'word!Word.Paragraph#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: firstLineIndent
    uid: 'word!Word.Paragraph#firstLineIndent:member'
    package: word!
    fullName: firstLineIndent
    summary: >-
      Specifies the value, in points, for a first line or hanging indent. Use a positive value to set a first-line
      indent, and use a negative value to set a hanging indent.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'firstLineIndent: number;'
      return:
        type: number
  - name: font
    uid: 'word!Word.Paragraph#font:member'
    package: word!
    fullName: font
    summary: 'Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.'
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type: '<xref uid="word!Word.Font:class" />'
  - name: inlinePictures
    uid: 'word!Word.Paragraph#inlinePictures:member'
    package: word!
    fullName: inlinePictures
    summary: Gets the collection of InlinePicture objects in the paragraph. The collection doesn't include floating images.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type: '<xref uid="word!Word.InlinePictureCollection:class" />'
  - name: leftIndent
    uid: 'word!Word.Paragraph#leftIndent:member'
    package: word!
    fullName: leftIndent
    summary: 'Specifies the left indent value, in points, for the paragraph.'
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml


      await Word.run(async (context) => {
        // Indent the first paragraph.
        context.document.body.paragraphs.getFirst().leftIndent = 75; //units = points

        return context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'leftIndent: number;'
      return:
        type: number
  - name: lineSpacing
    uid: 'word!Word.Paragraph#lineSpacing:member'
    package: word!
    fullName: lineSpacing
    summary: 'Specifies the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.'
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml


      await Word.run(async (context) => {
        // Adjust line spacing.
        context.document.body.paragraphs.getFirst().lineSpacing = 20;

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lineSpacing: number;'
      return:
        type: number
  - name: lineUnitAfter
    uid: 'word!Word.Paragraph#lineUnitAfter:member'
    package: word!
    fullName: lineUnitAfter
    summary: 'Specifies the amount of spacing, in grid lines, after the paragraph.'
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml


      await Word.run(async (context) => {
        // Set the space (in line units) after the first paragraph.
        context.document.body.paragraphs.getFirst().lineUnitAfter = 1;

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lineUnitAfter: number;'
      return:
        type: number
  - name: lineUnitBefore
    uid: 'word!Word.Paragraph#lineUnitBefore:member'
    package: word!
    fullName: lineUnitBefore
    summary: 'Specifies the amount of spacing, in grid lines, before the paragraph.'
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml


      await Word.run(async (context) => {
        // Set the space (in line units) before the first paragraph.
        context.document.body.paragraphs.getFirst().lineUnitBefore = 1;

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lineUnitBefore: number;'
      return:
        type: number
  - name: outlineLevel
    uid: 'word!Word.Paragraph#outlineLevel:member'
    package: word!
    fullName: outlineLevel
    summary: Specifies the outline level for the paragraph.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'outlineLevel: number;'
      return:
        type: number
  - name: parentContentControl
    uid: 'word!Word.Paragraph#parentContentControl:member'
    package: word!
    fullName: parentContentControl
    summary: >-
      Gets the content control that contains the paragraph. Throws an `ItemNotFound` error if there isn't a parent
      content control.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
  - name: rightIndent
    uid: 'word!Word.Paragraph#rightIndent:member'
    package: word!
    fullName: rightIndent
    summary: 'Specifies the right indent value, in points, for the paragraph.'
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rightIndent: number;'
      return:
        type: number
  - name: spaceAfter
    uid: 'word!Word.Paragraph#spaceAfter:member'
    package: word!
    fullName: spaceAfter
    summary: 'Specifies the spacing, in points, after the paragraph.'
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml


      await Word.run(async (context) => {
        // Set the space (in points) after the first paragraph.
        context.document.body.paragraphs.getFirst().spaceAfter = 20;

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'spaceAfter: number;'
      return:
        type: number
  - name: spaceBefore
    uid: 'word!Word.Paragraph#spaceBefore:member'
    package: word!
    fullName: spaceBefore
    summary: 'Specifies the spacing, in points, before the paragraph.'
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'spaceBefore: number;'
      return:
        type: number
  - name: style
    uid: 'word!Word.Paragraph#style:member'
    package: word!
    fullName: style
    summary: >-
      Specifies the style name for the paragraph. Use this property for custom styles and localized style names. To use
      the built-in styles that are portable between locales, see the "styleBuiltIn" property.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-styles.yaml


      // Applies the specified style to a paragraph.

      await Word.run(async (context) => {
        const styleName = $("#style-name-to-use").val() as string;
        if (styleName == "") {
          console.warn("Enter a style name to apply.");
          return;
        }

        const style: Word.Style = context.document.getStyles().getByNameOrNullObject(styleName);
        style.load();
        await context.sync();

        if (style.isNullObject) {
          console.warn(`There's no existing style with the name '${styleName}'.`);
        } else if (style.type != Word.StyleType.paragraph) {
          console.log(`The '${styleName}' style isn't a paragraph style.`);
        } else {
          const body: Word.Body = context.document.body;
          body.clear();
          body.insertParagraph(
            "Do you want to create a solution that extends the functionality of Word? You can use the Office Add-ins platform to extend Word clients running on the web, on a Windows desktop, or on a Mac.",
            "Start"
          );
          const paragraph: Word.Paragraph = body.paragraphs.getFirst();
          paragraph.style = style.nameLocal;
          console.log(`'${styleName}' style applied to first paragraph.`);
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: string;'
      return:
        type: string
  - name: text
    uid: 'word!Word.Paragraph#text:member'
    package: word!
    fullName: text
    summary: Gets the text of the paragraph.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml


      await Word.run(async (context) => {
        // The collection of paragraphs of the current selection returns the full paragraphs contained in it.
        const paragraph: Word.Paragraph = context.document.getSelection().paragraphs.getFirst();
        paragraph.load("text");

        await context.sync();
        console.log(paragraph.text);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly text: string;'
      return:
        type: string
methods:
  - name: clear()
    uid: 'word!Word.Paragraph#clear:member(1)'
    package: word!
    fullName: clear()
    summary: Clears the contents of the paragraph object. The user can perform the undo operation on the cleared content.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a proxy object for the paragraphs collection.
          const paragraphs = context.document.body.paragraphs;

          // Queue a command to load the style property for all of the paragraphs.
          paragraphs.load('style');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();

          // Queue a command to clear the contents of the first paragraph.
          paragraphs.items[0].clear();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Cleared the contents of the first paragraph.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: ''
  - name: delete()
    uid: 'word!Word.Paragraph#delete:member(1)'
    package: word!
    fullName: delete()
    summary: Deletes the paragraph and its content from the document.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a proxy object for the paragraphs collection.
          const paragraphs = context.document.body.paragraphs;

          // Queue a command to load the text property for all of the paragraphs.
          paragraphs.load('text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();

          // Queue a command to delete the first paragraph.
          paragraphs.items[0].delete();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Deleted the first paragraph.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getHtml()
    uid: 'word!Word.Paragraph#getHtml:member(1)'
    package: word!
    fullName: getHtml()
    summary: >-
      Gets an HTML representation of the paragraph object. When rendered in a web page or HTML viewer, the formatting
      will be a close, but not exact, match for of the formatting of the document. This method doesn't return the exact
      same HTML for the same document on different platforms (Windows, Mac, Word on the web, etc.). If you need exact
      fidelity, or consistency across platforms, use `Paragraph.getOoxml()` and convert the returned XML to HTML.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a proxy object for the paragraphs collection.
          const paragraphs = context.document.body.paragraphs;

          // Queue a command to load the style property for all of the paragraphs.
          paragraphs.load('style');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();

          // Queue a set of commands to get the HTML of the first paragraph.
          const html = paragraphs.items[0].getHtml();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Paragraph HTML: ' + html.value);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getOoxml()
    uid: 'word!Word.Paragraph#getOoxml:member(1)'
    package: word!
    fullName: getOoxml()
    summary: Gets the Office Open XML (OOXML) representation of the paragraph object.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a proxy object for the paragraphs collection.
          const paragraphs = context.document.body.paragraphs;

          // Queue a command to load the style property for the top 2 paragraphs.
          paragraphs.load({select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();

          // Queue a set of commands to get the OOXML of the first paragraph.
          const ooxml = paragraphs.items[0].getOoxml();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Paragraph OOXML: ' + ooxml.value);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: 'insertBreak(breakType, insertLocation)'
    uid: 'word!Word.Paragraph#insertBreak:member(1)'
    package: word!
    fullName: 'insertBreak(breakType, insertLocation)'
    summary: Inserts a break at the specified location in the main document.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Run a batch operation against the Word object model.

      await Word.run(async (context) => {

          // Create a proxy object for the paragraphs collection.
          const paragraphs = context.document.body.paragraphs;

          // Queue a command to load the style property for the top 2 paragraphs.
          // We never perform an empty load. We always must request a property.
          paragraphs.load({select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();

          // Queue a command to get the first paragraph.
          const paragraph = paragraphs.items[0];

          // Queue a command to insert a page break after the first paragraph.
          paragraph.insertBreak(Word.BreakType.page, Word.InsertLocation.after);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Inserted a page break after the paragraph.');
      });

      ```

      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-line-and-page-breaks.yaml


      Word.run(async (context) => {
        context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, "After");

        await context.sync();
        console.log("success");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertBreak(breakType: Word.BreakType | "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" |
        "SectionOdd" | "Line", insertLocation: Word.InsertLocation.before | Word.InsertLocation.after | "Before" |
        "After"): void;
      parameters:
        - id: breakType
          description: Required. The break type to add to the document.
          type: >-
            <xref uid="word!Word.BreakType:enum" /> | "Page" | "Next" | "SectionNext" | "SectionContinuous" |
            "SectionEven" | "SectionOdd" | "Line"
        - id: insertLocation
          description: Required. The value must be 'Before' or 'After'.
          type: >-
            <xref uid="word!Word.InsertLocation.before:member" /> | <xref uid="word!Word.InsertLocation.after:member" />
            | "Before" | "After"
      return:
        type: void
        description: ''
  - name: insertContentControl(contentControlType)
    uid: 'word!Word.Paragraph#insertContentControl:member(1)'
    package: word!
    fullName: insertContentControl(contentControlType)
    summary: Wraps the Paragraph object with a content control.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      Note: The `contentControlType` parameter was introduced in WordApi 1.5. `PlainText` support was added in WordApi
      1.5. `CheckBox` support was added in WordApi 1.7. `DropDownList` and `ComboBox` support was added in WordApi 1.9.


      #### Examples


      ```TypeScript

      // Run a batch operation against the Word object model.

      await Word.run(async (context) => {

          // Create a proxy object for the paragraphs collection.
          const paragraphs = context.document.body.paragraphs;

          // Queue a command to load the style property for the top 2 paragraphs.
          // We never perform an empty load. We always must request a property.
          paragraphs.load({select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();

          // Queue a command to get the first paragraph.
          const paragraph = paragraphs.items[0];

          // Queue a command to wrap the first paragraph in a rich text content control.
          paragraph.insertContentControl();

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Wrapped the first paragraph in a content control.');
      });

      ```

      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/10-content-controls/insert-and-change-content-controls.yaml


      // Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.

      await Word.run(async (context) => {
        let paragraphs = context.document.body.paragraphs;
        paragraphs.load("$none"); // Don't need any properties; just wrap each paragraph with a content control.

        await context.sync();

        for (let i = 0; i < paragraphs.items.length; i++) {
          let contentControl = paragraphs.items[i].insertContentControl();
          // For even, tag "even".
          if (i % 2 === 0) {
            contentControl.tag = "even";
          } else {
            contentControl.tag = "odd";
          }
        }
        console.log("Content controls inserted: " + paragraphs.items.length);

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertContentControl(contentControlType?: Word.ContentControlType.richText | Word.ContentControlType.plainText |
        Word.ContentControlType.checkBox | Word.ContentControlType.dropDownList | Word.ContentControlType.comboBox |
        "RichText" | "PlainText" | "CheckBox" | "DropDownList" | "ComboBox"): Word.ContentControl;
      parameters:
        - id: contentControlType
          description: >-
            Optional. Content control type to insert. Must be 'RichText', 'PlainText', 'CheckBox', 'DropDownList', or
            'ComboBox'. The default is 'RichText'.
          type: >-
            <xref uid="word!Word.ContentControlType.richText:member" /> | <xref
            uid="word!Word.ContentControlType.plainText:member" /> | <xref
            uid="word!Word.ContentControlType.checkBox:member" /> | <xref
            uid="word!Word.ContentControlType.dropDownList:member" /> | <xref
            uid="word!Word.ContentControlType.comboBox:member" /> | "RichText" | "PlainText" | "CheckBox" |
            "DropDownList" | "ComboBox"
      return:
        type: '<xref uid="word!Word.ContentControl:class" />'
        description: ''
  - name: 'insertFileFromBase64(base64File, insertLocation)'
    uid: 'word!Word.Paragraph#insertFileFromBase64:member(1)'
    package: word!
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    summary: Inserts a document into the paragraph at the specified location.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      Note: Insertion isn't supported if the document being inserted contains an ActiveX control (likely in a form
      field). Consider replacing such a form field with a content control or other option appropriate for your scenario.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start
        | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
      parameters:
        - id: base64File
          description: Required. The Base64-encoded content of a .docx file.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', or ''End''.'
          type: >-
            <xref uid="word!Word.InsertLocation.replace:member" /> | <xref uid="word!Word.InsertLocation.start:member"
            /> | <xref uid="word!Word.InsertLocation.end:member" /> | "Replace" | "Start" | "End"
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertHtml(html, insertLocation)'
    uid: 'word!Word.Paragraph#insertHtml:member(1)'
    package: word!
    fullName: 'insertHtml(html, insertLocation)'
    summary: Inserts HTML into the paragraph at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a proxy object for the paragraphs collection.
          const paragraphs = context.document.body.paragraphs;

          // Queue a command to load the style property for the top 2 paragraphs.
          // We never perform an empty load. We always must request a property.
          paragraphs.load({select: 'style', top: 2} );

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();

          // Queue a command to get the first paragraph.
          const paragraph = paragraphs.items[0];

          // Queue a command to insert HTML content at the end of the first paragraph.
          paragraph.insertHtml('<strong>Inserted HTML.</strong>', Word.InsertLocation.end);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Inserted HTML content at the end of the first paragraph.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertHtml(html: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start |
        Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
      parameters:
        - id: html
          description: Required. The HTML to be inserted in the paragraph.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', or ''End''.'
          type: >-
            <xref uid="word!Word.InsertLocation.replace:member" /> | <xref uid="word!Word.InsertLocation.start:member"
            /> | <xref uid="word!Word.InsertLocation.end:member" /> | "Replace" | "Start" | "End"
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    uid: 'word!Word.Paragraph#insertInlinePictureFromBase64:member(1)'
    package: word!
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    summary: Inserts a picture into the paragraph at the specified location.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {

          // Create a proxy object for the paragraphs collection.
          const paragraphs = context.document.body.paragraphs;

          // Queue a command to load the style property for all of the paragraphs.
          paragraphs.load('style');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();

          // Queue a command to get the first paragraph.
          const paragraph = paragraphs.items[0];

          const b64encodedImg = "iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC";

          // Queue a command to insert a base64 encoded image at the beginning of the first paragraph.
          paragraph.insertInlinePictureFromBase64(b64encodedImg, Word.InsertLocation.start);

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Added an image to the first paragraph.');
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation.replace |
        Word.InsertLocation.start | Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.InlinePicture;
      parameters:
        - id: base64EncodedImage
          description: Required. The Base64-encoded image to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', or ''End''.'
          type: >-
            <xref uid="word!Word.InsertLocation.replace:member" /> | <xref uid="word!Word.InsertLocation.start:member"
            /> | <xref uid="word!Word.InsertLocation.end:member" /> | "Replace" | "Start" | "End"
      return:
        type: '<xref uid="word!Word.InlinePicture:class" />'
        description: ''
  - name: 'insertOoxml(ooxml, insertLocation)'
    uid: 'word!Word.Paragraph#insertOoxml:member(1)'
    package: word!
    fullName: 'insertOoxml(ooxml, insertLocation)'
    summary: Inserts OOXML into the paragraph at the specified location.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertOoxml(ooxml: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start |
        Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted in the paragraph.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', or ''End''.'
          type: >-
            <xref uid="word!Word.InsertLocation.replace:member" /> | <xref uid="word!Word.InsertLocation.start:member"
            /> | <xref uid="word!Word.InsertLocation.end:member" /> | "Replace" | "Start" | "End"
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: 'insertParagraph(paragraphText, insertLocation)'
    uid: 'word!Word.Paragraph#insertParagraph:member(1)'
    package: word!
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    summary: Inserts a paragraph at the specified location.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation.before | Word.InsertLocation.after |
        "Before" | "After"): Word.Paragraph;
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type: string
        - id: insertLocation
          description: Required. The value must be 'Before' or 'After'.
          type: >-
            <xref uid="word!Word.InsertLocation.before:member" /> | <xref uid="word!Word.InsertLocation.after:member" />
            | "Before" | "After"
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: 'insertText(text, insertLocation)'
    uid: 'word!Word.Paragraph#insertText:member(1)'
    package: word!
    fullName: 'insertText(text, insertLocation)'
    summary: Inserts text into the paragraph at the specified location.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-in-different-locations.yaml


      await Word.run(async (context) => {
        // Replace the last paragraph.
        const range: Word.Range = context.document.body.paragraphs.getLast().insertText("Just replaced the last paragraph!", "Replace");
        range.font.highlightColor = "black";
        range.font.color = "white";

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        insertText(text: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start |
        Word.InsertLocation.end | "Replace" | "Start" | "End"): Word.Range;
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', or ''End''.'
          type: >-
            <xref uid="word!Word.InsertLocation.replace:member" /> | <xref uid="word!Word.InsertLocation.start:member"
            /> | <xref uid="word!Word.InsertLocation.end:member" /> | "Replace" | "Start" | "End"
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'word!Word.Paragraph#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.ParagraphLoadOptions): Word.Paragraph;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="word!Word.Interfaces.ParagraphLoadOptions:interface" />'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.Paragraph#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Paragraph;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.Paragraph#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Paragraph;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: 'search(searchText, searchOptions)'
    uid: 'word!Word.Paragraph#search:member(1)'
    package: word!
    fullName: 'search(searchText, searchOptions)'
    summary: >-
      Performs a search with the specified SearchOptions on the scope of the paragraph object. The search results are a
      collection of range objects.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      parameters:
        - id: searchText
          description: Required. The search text.
          type: string
        - id: searchOptions
          description: Optional. Options for the search.
          type: |-
            <xref uid="word!Word.SearchOptions:class" /> | {
                        ignorePunct?: boolean;
                        ignoreSpace?: boolean;
                        matchCase?: boolean;
                        matchPrefix?: boolean;
                        matchSuffix?: boolean;
                        matchWholeWord?: boolean;
                        matchWildcards?: boolean;
                    }
      return:
        type: '<xref uid="word!Word.RangeCollection:class" />'
        description: ''
  - name: select(selectionMode)
    uid: 'word!Word.Paragraph#select:member(1)'
    package: word!
    fullName: select(selectionMode)
    summary: Selects and navigates the Word UI to the paragraph.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/scroll-to-range.yaml


      await Word.run(async (context) => {
        // If select is called with no parameters, it selects the object.
        context.document.body.paragraphs.getLast().select();

        await context.sync();
      });


      ...


      await Word.run(async (context) => {
        // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.
        context.document.body.paragraphs.getLast().select(Word.SelectionMode.end);

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      parameters:
        - id: selectionMode
          description: 'Optional. The selection mode must be ''Select'', ''Start'', or ''End''. ''Select'' is the default.'
          type: '<xref uid="word!Word.SelectionMode:enum" />'
      return:
        type: void
        description: ''
  - name: select(selectionModeString)
    uid: 'word!Word.Paragraph#select:member(2)'
    package: word!
    fullName: select(selectionModeString)
    summary: Selects and navigates the Word UI to the paragraph.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      parameters:
        - id: selectionModeString
          description: 'Optional. The selection mode must be ''Select'', ''Start'', or ''End''. ''Select'' is the default.'
          type: '"Select" | "Start" | "End"'
      return:
        type: void
        description: ''
  - name: 'set(properties, options)'
    uid: 'word!Word.Paragraph#set:member(1)'
    package: word!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="word!Word.Interfaces.ParagraphUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: >-


          #### Examples


          ```TypeScript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/multiple-property-set.yaml


          await Word.run(async (context) => {
            const paragraph: Word.Paragraph = context.document.body.paragraphs.getFirst();
            paragraph.set({
              leftIndent: 30,
              font: {
                bold: true,
                color: "red"
              }
            });

            await context.sync();
          });


          ...


          await Word.run(async (context) => {
            const firstParagraph: Word.Paragraph = context.document.body.paragraphs.getFirst();
            const secondParagraph: Word.Paragraph = firstParagraph.getNext();
            firstParagraph.load("text, font/color, font/bold, leftIndent");

            await context.sync();

            secondParagraph.set(firstParagraph);

            await context.sync();
          });

          ```
  - name: set(properties)
    uid: 'word!Word.Paragraph#set:member(2)'
    package: word!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Paragraph): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="word!Word.Paragraph:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'word!Word.Paragraph#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `Word.Paragraph` object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.ParagraphData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.ParagraphData;'
      return:
        type: '<xref uid="word!Word.Interfaces.ParagraphData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.Paragraph#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Paragraph;'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.Paragraph#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Paragraph;'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
