### YamlMime:TSType
name: Word.Document
uid: 'word!Word.Document:class'
package: word!
fullName: Word.Document
summary: >-
  The Document object is the top level object. A Document object contains one or
  more sections, content controls, and the body that contains the contents of
  the document.


  \[ [API set: WordApi
  1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: body
    uid: 'word!Word.Document#body:member'
    package: word!
    fullName: body
    summary: >-
      Gets the body object of the document. The body is the text that excludes
      headers, footers, footnotes, textboxes, etc.. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly body: Word.Body;'
      return:
        type: '<xref uid="word!Word.Body:class" />'
  - name: contentControls
    uid: 'word!Word.Document#contentControls:member'
    package: word!
    fullName: contentControls
    summary: >-
      Gets the collection of content control objects in the document. This
      includes content controls in the body of the document, headers, footers,
      textboxes, etc.. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type: '<xref uid="word!Word.ContentControlCollection:class" />'
  - name: context
    uid: 'word!Word.Document#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: saved
    uid: 'word!Word.Document#saved:member'
    package: word!
    fullName: saved
    summary: >-
      Indicates whether the changes in the document have been saved. A value of
      true indicates that the document hasn't changed since it was saved.
      Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly saved: boolean;'
      return:
        type: boolean
  - name: sections
    uid: 'word!Word.Document#sections:member'
    package: word!
    fullName: sections
    summary: >-
      Gets the collection of section objects in the document. Read-only.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly sections: Word.SectionCollection;'
      return:
        type: '<xref uid="word!Word.SectionCollection:class" />'
methods:
  - name: getSelection()
    uid: 'word!Word.Document#getSelection:member(1)'
    package: word!
    fullName: getSelection()
    summary: >-
      Gets the current selection of the document. Multiple selections are not
      supported.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelection(): Word.Range;'
      return:
        type: '<xref uid="word!Word.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              var textSample = 'This is an example of the insert text method. This is a method ' + 
                  'which allows users to insert text into a selection. It can insert text into a ' +
                  'relative location or it can overwrite the current selection. Since the ' +
                  'getSelection method returns a range object, look up the range object documentation ' +
                  'for everything you can do with a selection.';
              
              // Create a range proxy object for the current selection.
              var range = context.document.getSelection();
              
              // Queue a command to insert text at the end of the selection.
              range.insertText(textSample, Word.InsertLocation.end);
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted the text at the end of the selection.');
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(options)
    uid: 'word!Word.Document#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.DocumentLoadOptions): Word.Document;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="word!Word.Interfaces.DocumentLoadOptions:interface" />'
      return:
        type: '<xref uid="word!Word.Document:class" />'
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the document.
              var thisDocument = context.document;
              
              // Queue a command to load content control properties.
              context.load(thisDocument, 'contentControls/id, contentControls/text, contentControls/tag');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (thisDocument.contentControls.items.length !== 0) {
                      for (var i = 0; i < thisDocument.contentControls.items.length; i++) {
                          console.log(thisDocument.contentControls.items[i].id);
                          console.log(thisDocument.contentControls.items[i].text);
                          console.log(thisDocument.contentControls.items[i].tag);
                      }
                  } else {
                      console.log('No content controls in this document.');
                  }
              });  
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(propertyNames)
    uid: 'word!Word.Document#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Document;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.Document:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.Document#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Document;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.Document:class" />'
        description: ''
  - name: save()
    uid: 'word!Word.Document#save:member(1)'
    package: word!
    fullName: save()
    summary: >-
      Saves the document. This uses the Word default file naming convention if
      the document has not been saved before.


      \[ [API set: WordApi
      1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'save(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {
              
              // Create a proxy object for the document.
              var thisDocument = context.document;

              // Queue a command to load the document save state (on the saved property).
              context.load(thisDocument, 'saved');    
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  
                  if (thisDocument.saved === false) {
                      // Queue a command to save this document.
                      thisDocument.save();
                      
                      // Synchronize the document state by executing the queued commands, 
                      // and return a promise to indicate task completion.
                      return context.sync().then(function () {
                          console.log('Saved the document');
                      });
                  } else {
                      console.log('The document has not changed since the last save.');
                  }
              });  
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'set(properties, options)'
    uid: 'word!Word.Document#set:member(1)'
    package: word!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Word.Document): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.DocumentUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: '<xref uid="word!Word.Interfaces.DocumentUpdateData:interface" />'
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'word!Word.Document#set:member(2)'
    package: word!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Document): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="word!Word.Document:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'word!Word.Document#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Word.Document object is
      an API object, the `toJSON` method returns a plain JavaScript object
      (typed as `Word.Interfaces.DocumentData`<!-- -->) that contains shallow
      copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.DocumentData;'
      return:
        type: '<xref uid="word!Word.Interfaces.DocumentData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.Document#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this
      object across `.sync` calls and outside the sequential execution of a
      ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Document;'
      return:
        type: '<xref uid="word!Word.Document:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.Document#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked
      objects slows down the host application, so please remember to free any
      objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Document;'
      return:
        type: '<xref uid="word!Word.Document:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
