### YamlMime:TSType
name: Word.ParagraphCollection
uid: 'word!Word.ParagraphCollection:class'
package: word!
fullName: Word.ParagraphCollection
summary: 'Contains a collection of [Word.Paragraph](xref:word!Word.Paragraph:class) objects.'
remarks: >-
  \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/15-images/insert-and-get-pictures.yaml


  // Inserts an image anchored to the last paragraph.

  await Word.run(async (context) => {
    context.document.body.paragraphs
      .getLast()
      .insertParagraph("", "After")
      .insertInlinePictureFromBase64(base64Image, "End");

    await context.sync();
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'word!Word.ParagraphCollection#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
  - name: items
    uid: 'word!Word.ParagraphCollection#items:member'
    package: word!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Word.Paragraph[];'
      return:
        type: '<xref uid="word!Word.Paragraph:class" />[]'
        description: >-


          #### Examples


          ```TypeScript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/20-lists/insert-list.yaml


          // This example starts a new list with the second paragraph.

          await Word.run(async (context) => {
            const paragraphs: Word.ParagraphCollection = context.document.body.paragraphs;
            paragraphs.load("$none");

            await context.sync();

            // Start new list using the second paragraph.
            const list: Word.List = paragraphs.items[1].startNewList();
            list.load("$none");

            await context.sync();

            // To add new items to the list, use Start or End on the insertLocation parameter.
            list.insertParagraph("New list item at the start of the list", "Start");
            const paragraph: Word.Paragraph = list.insertParagraph("New list item at the end of the list (set to list level 5)", "End");

            // Set up list level for the list item.
            paragraph.listItem.level = 4;

            // To add paragraphs outside the list, use Before or After.
            list.insertParagraph("New paragraph goes after (not part of the list)", "After");

            await context.sync();
          });

          ```
methods:
  - name: load(options)
    uid: 'word!Word.ParagraphCollection#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Word.Interfaces.ParagraphCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions):
        Word.ParagraphCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="word!Word.Interfaces.ParagraphCollectionLoadOptions:interface" /> & <xref
            uid="word!Word.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
        description: |-


          #### Examples

          ```TypeScript
          // This example shows how to get the paragraphs in the Word document
          // along with their text and font size properties.
          // 
          // Run a batch operation against the Word object model.
          await Word.run(async (context) => {

              // Create a proxy object for the paragraphs collection.
              const paragraphs = context.document.body.paragraphs;

              // Queue a command to load the text and font properties.
              // It is best practice to always specify the property set. Otherwise, all properties are
              // returned in on the object.
              paragraphs.load('text, font/size');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              await context.sync();

              // Insert code that works with the paragraphs loaded by paragraphs.load().
          });
          ```
  - name: load(propertyNames)
    uid: 'word!Word.ParagraphCollection#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.ParagraphCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.ParagraphCollection#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ParagraphCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'word!Word.ParagraphCollection#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `Word.ParagraphCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `Word.Interfaces.ParagraphCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.ParagraphCollectionData;'
      return:
        type: '<xref uid="word!Word.Interfaces.ParagraphCollectionData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.ParagraphCollection#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you're using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.ParagraphCollection;'
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.ParagraphCollection#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://learn.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You'll need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.ParagraphCollection;'
      return:
        type: '<xref uid="word!Word.ParagraphCollection:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
