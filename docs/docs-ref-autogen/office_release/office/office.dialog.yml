### YamlMime:TSType
name: Office.Dialog
uid: 'office!Office.Dialog:interface'
package: office!
fullName: Office.Dialog
summary: >-
  The object that is returned when `UI.displayDialogAsync` is called. It exposes methods for registering event handlers
  and closing the dialog.
remarks: >-
  **Requirement set**:
  [DialogAPI](https://learn.microsoft.com/javascript/api/requirement-sets/common/dialog-api-requirement-sets)
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: 'addEventHandler(eventType, handler)'
    uid: 'office!Office.Dialog#addEventHandler:member(1)'
    package: office!
    fullName: 'addEventHandler(eventType, handler)'
    summary: |-
      Registers an event handler. The two supported events are:

      - DialogMessageReceived. Triggered when the dialog box sends a message to its parent.

      - DialogEventReceived. Triggered when the dialog box has been closed or otherwise unloaded.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addEventHandler(eventType: Office.EventType, handler: (args: {message: string, origin: string | undefined} |
        {error: number}) => void): void;
      parameters:
        - id: eventType
          description: Must be either DialogMessageReceived or DialogEventReceived.
          type: '<xref uid="office!Office.EventType:enum" />'
        - id: handler
          description: >-
            A function which accepts either an object with a `message` and `origin` property, if `eventType` is
            `DialogMessageReceived`<!-- -->, or an object with an `error` property, if `eventType` is
            `DialogEventReceived`<!-- -->. Note that the `origin` property is `undefined` on clients that donâ€™t support
            [DialogOrigin
            1.1](https://learn.microsoft.com/javascript/api/requirement-sets/common/dialog-origin-requirement-sets)<!--
            -->.
          type: '(args: {message: string, origin: string | undefined} | {error: number}) =&gt; void'
      return:
        type: void
        description: >-


          #### Examples


          ```TypeScript

          // The following example shows how to open a dialog with a specified size. It also shows

          // how to register a function to handle the message when Office.UI.messageParent() is called

          // in the dialog and how to use that handler to close the dialog. The implementation of the processMessage()
          function is omitted.


          Office.context.ui.displayDialogAsync("https://www.contoso.com/myDialog.html", { height: 30, width: 20 },
              (asyncResult) => {
                  const dialog = asyncResult.value;
                  dialog.addEventHandler(Office.EventType.DialogMessageReceived, (arg) => {
                      dialog.close();
                      processMessage(arg);
                  });
              }
          );


          // The following example does the same thing in TypeScript.


          Office.context.ui.displayDialogAsync("https://www.contoso.com/myDialog.html", { height: 30, width: 20 },
              (asyncResult: Office.AsyncResult) => {
                  const dialog: Office.Dialog = asyncResult.value;
                  dialog.addEventHandler(Office.EventType.DialogMessageReceived, (arg: string) => {
                      dialog.close();
                      processMessage(arg);
                  });
              }
          );

          ```
  - name: close()
    uid: 'office!Office.Dialog#close:member(1)'
    package: office!
    fullName: close()
    summary: >-
      Called from a parent page to close the corresponding dialog box.


      This method is asynchronous. It does not take a callback parameter and it does not return a Promise object, so it
      cannot be awaited with either the `await` keyword or the `then` function. See this best practice for more
      information: [Opening another dialog immediately after closing
      one](https://learn.microsoft.com/office/dev/add-ins/develop/dialog-best-practices#opening-another-dialog-immediately-after-closing-one)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'close(): void;'
      return:
        type: void
        description: >-


          #### Examples


          ```TypeScript

          // The following example shows how to open a dialog with a specified size. It also shows

          // how to register a function to handle the message when Office.UI.messageParent() is called

          // in the dialog and how to use that handler to close the dialog. The implementation of the processMessage()
          function is omitted.


          Office.context.ui.displayDialogAsync("https://www.contoso.com/myDialog.html", { height: 30, width: 20 },
              (asyncResult) => {
                  const dialog = asyncResult.value;
                  dialog.addEventHandler(Office.EventType.DialogMessageReceived, (arg) => {
                      dialog.close();
                      processMessage(arg);
                  });
              }
          );


          // The following example does the same thing in TypeScript.


          Office.context.ui.displayDialogAsync("https://www.contoso.com/myDialog.html", { height: 30, width: 20 },
              (asyncResult: Office.AsyncResult) => {
                  const dialog: Office.Dialog = asyncResult.value;
                  dialog.addEventHandler(Office.EventType.DialogMessageReceived, (arg: string) => {
                      dialog.close();
                      processMessage(arg);
                  });
              }
          );

          ```
  - name: 'messageChild(message, messageOptions)'
    uid: 'office!Office.Dialog#messageChild:member(1)'
    package: office!
    fullName: 'messageChild(message, messageOptions)'
    summary: >-
      Delivers a message from the host page, such as a task pane or a UI-less function file, to a dialog that was opened
      from the page.
    remarks: >-
      **Applications**: Excel, Outlook (Minimum requirement set: Mailbox 1.9), PowerPoint, Word


      **Requirement sets**:


      - [DialogAPI 1.2](https://learn.microsoft.com/javascript/api/requirement-sets/common/dialog-api-requirement-sets)


      - [Mailbox 1.9](https://learn.microsoft.com/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets)


      - If the `messageOptions` parameter is used, [DialogOrigin
      1.1](https://learn.microsoft.com/javascript/api/requirement-sets/common/dialog-origin-requirement-sets) is also
      required.


      Although classic Outlook on Mac doesn't support Mailbox 1.9, it does support DialogApi 1.2.


      #### Examples


      ```TypeScript

      // The following example shows how to send information about the current active worksheet to the dialog.

      await Excel.run(async (context) => {
          const worksheet = context.workbook.worksheets.getActiveWorksheet();
          worksheet.load();
          await context.sync();
          worksheetPropertiesChanged(worksheet);
      });


      ...


      function worksheetPropertiesChanged(currentWorksheet) {
          const messageToDialog = JSON.stringify(currentWorksheet);
          dialog.messageChild(messageToDialog);
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'messageChild(message: string, messageOptions?: DialogMessageOptions): void;'
      parameters:
        - id: message
          description: >-
            Accepts a message from the host page to deliver to the dialog. Anything that can be serialized to a string,
            including JSON and XML, can be sent.
          type: string
        - id: messageOptions
          description: Optional. Provides options for how to send the message.
          type: '<xref uid="office!Office.DialogMessageOptions:interface" />'
      return:
        type: void
        description: ''
  - name: sendMessage(name)
    uid: 'office!Office.Dialog#sendMessage:member(1)'
    package: office!
    fullName: sendMessage(name)
    summary: FOR INTERNAL USE ONLY. DO NOT CALL IN YOUR CODE.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sendMessage(name: string): void;'
      parameters:
        - id: name
          description: ''
          type: string
      return:
        type: void
        description: ''
