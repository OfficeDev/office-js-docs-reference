### YamlMime:TSType
name: Office.File
uid: office!Office.File:interface
package: office!
fullName: Office.File
summary: Represents the document file associated with an Office Add-in.
remarks: >-
  Access the File object with the AsyncResult.value property in the callback
  function passed to the Document.getFileAsync method.


  #### Examples


  ```TypeScript

  // Link to full sample:

  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/refs/heads/main/samples/excel/26-document/get-file-in-slices-async.yaml


  function getCurrentFile() {
      const sliceSize = 4096; /*Bytes*/

      // This snippet specifies a small slice size to show how the getFileAsync() method uses slices.
      Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: sliceSize }, function(result) {
          if (result.status === Office.AsyncResultStatus.Failed) {
              return onError(result.error);
          }

          // result.value is the File object.
          const file: Office.File = result.value
          getFileContents(file, onSuccess, onError); /* getFileContents is defined in the Office.File.getSliceAsync example. */
      });

      function onError(error: Office.Error): void {
          console.error(error);
      }

      function onSuccess(byteArray: number[]) {
          let base64string = base64js.fromByteArray(byteArray);
          // Do something with the file contents.
      }
  }

  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: size
    uid: office!Office.File#size:member
    package: office!
    fullName: size
    summary: Gets the document file size in bytes.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'size: number;'
      return:
        type: number
  - name: sliceCount
    uid: office!Office.File#sliceCount:member
    package: office!
    fullName: sliceCount
    summary: Gets the number of slices into which the file is divided.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sliceCount: number;'
      return:
        type: number
methods:
  - name: closeAsync(callback)
    uid: office!Office.File#closeAsync:member(1)
    package: office!
    fullName: closeAsync(callback)
    summary: Closes the document file.
    remarks: >-
      **Requirement set**:
      [File](https://learn.microsoft.com/javascript/api/requirement-sets/common/office-add-in-requirement-sets#file)


      No more than two documents are allowed to be in memory; otherwise the
      Document.getFileAsync operation will fail. Use the File.closeAsync method
      to close the file when you are finished working with it.


      In the callback function passed to the closeAsync method, you can use the
      properties of the AsyncResult object to return the following information.


      <table> <tr> <th>Property</th> <th>Use</th> </tr> <tr>
      <td><code>AsyncResult.value</code></td> <td>Always returns
      <code>undefined</code> because there's no object or data to retrieve.</td>
      </tr> <tr> <td><code>AsyncResult.status</code></td> <td>Determine the
      success or failure of the operation.</td> </tr> <tr>
      <td><code>AsyncResult.error</code></td> <td>Access an Error object that
      provides error information if the operation failed.</td> </tr> <tr>
      <td><code>AsyncResult.asyncContext</code></td> <td>Define an item of any
      type that's returned in the AsyncResult object without being altered.</td>
      </tr> </table>

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'closeAsync(callback?: (result: AsyncResult<void>) => void): void;'
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;void&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: getSliceAsync(sliceIndex, callback)
    uid: office!Office.File#getSliceAsync:member(1)
    package: office!
    fullName: getSliceAsync(sliceIndex, callback)
    summary: Returns the specified slice.
    remarks: >-
      **Requirement set**:
      [File](https://learn.microsoft.com/javascript/api/requirement-sets/common/office-add-in-requirement-sets#file)


      In the callback function passed to the getSliceAsync method, you can use
      the properties of the AsyncResult object to return the following
      information.


      <table> <tr> <th>Property</th> <th>Use</th> </tr> <tr>
      <td><code>AsyncResult.value</code></td> <td>Access the Slice object.</td>
      </tr> <tr> <td><code>AsyncResult.status</code></td> <td>Determine the
      success or failure of the operation.</td> </tr> <tr>
      <td><code>AsyncResult.error</code></td> <td>Access an Error object that
      provides error information if the operation failed.</td> </tr> <tr>
      <td><code>AsyncResult.asyncContext</code></td> <td>Define an item of any
      type that's returned in the AsyncResult object without being altered.</td>
      </tr> </table>


      #### Examples


      ```TypeScript

      // Link to full sample:

      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/refs/heads/main/samples/excel/26-document/get-file-in-slices-async.yaml

      function getFileContents(
          file: Office.File,
          onSuccess: (byteArray: number[]) => void,
          onError: (error: Office.Error) => void
      ) {
          let expectedSliceCount = file.sliceCount;
          let fileSlices: Array<Array<number>> = [];

          console.log("Current file size in bytes: " + file.size);
          console.log("Number of file slices: " + file.sliceCount);

          getFileContentsHelper();

          function getFileContentsHelper() {
              file.getSliceAsync(fileSlices.length, function(result) {
                  if (result.status === Office.AsyncResultStatus.Failed) {
                      file.closeAsync();
                      return onError(result.error);
                  }

                  // Got one slice, store it in a temporary array.
                  fileSlices.push(result.value.data);

                  if (fileSlices.length == expectedSliceCount) {
                      console.log("All slices have been received.");
                      file.closeAsync();

                      let array = [];
                      fileSlices.forEach((slice) => {
                          array = array.concat(slice);
                      });

                      onSuccess(array); /* onSuccess is defined in the Office.File example. */
                  } else {
                      getFileContentsHelper();
                  }
              });
          }
      }

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getSliceAsync(sliceIndex: number, callback?: (result:
        AsyncResult<Office.Slice>) => void): void;
      parameters:
        - id: sliceIndex
          description: >-
            Specifies the zero-based index of the slice to be retrieved.
            Required.
          type: number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->. The `value` property of the result is the
            [Office.Slice](xref:office!Office.Slice:interface) object.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref
            uid="office!Office.Slice:interface" />&gt;) =&gt; void
      return:
        type: void
        description: ''
