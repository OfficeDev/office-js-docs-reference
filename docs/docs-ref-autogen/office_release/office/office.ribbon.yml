### YamlMime:TSType
name: Office.Ribbon
uid: 'office!Office.Ribbon:interface'
package: office!
fullName: Office.Ribbon
summary: An interface that contains all the functionality provided to manage the state of the Office ribbon.
remarks: >-
  **Requirement set**: [RibbonAPI
  1.1](https://learn.microsoft.com/javascript/api/requirement-sets/common/ribbon-api-requirement-sets)
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: requestCreateControls(tabDefinition)
    uid: 'office!Office.Ribbon#requestCreateControls:member(1)'
    package: office!
    fullName: requestCreateControls(tabDefinition)
    summary: Registers a custom contextual tab with Office and defines the tab's controls.
    remarks: >-
      **Requirement set**: [RibbonAPI
      1.2](https://learn.microsoft.com/javascript/api/requirement-sets/common/ribbon-api-requirement-sets)


      This method only requests that the tab be registered. The actual registration is controlled by the Office
      application and may not be complete when the returned `Promise` object is resolved. For more information and code
      examples, see [Create custom contextual
      tabs](https://learn.microsoft.com/office/dev/add-ins/design/contextual-tabs)<!-- -->.


      #### Examples


      ```TypeScript

      // Registers a custom contextual tab with Office.

      Office.onReady(async () => {
          const contextualTabJSON = ` ... `; // Assign the JSON string.
          const contextualTab = JSON.parse(contextualTabJSON);
          await Office.ribbon.requestCreateControls(contextualTab);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'requestCreateControls(tabDefinition: Object): Promise<void>;'
      parameters:
        - id: tabDefinition
          description: >-
            Specifies the tab's properties and child controls and their properties. This parameter isn't strongly typed
            because its shape is defined by a JSON schema that can be versioned. To create the parameter object, pass a
            JSON string that conforms to the Office [dynamic-ribbon JSON
            schema](https://developer.microsoft.com/json-schemas/office-js/dynamic-ribbon.schema.json) to
            `JSON.parse`<!-- -->, and then pass the returned object to this method. To get IntelliSense for the JSON in
            Visual Studio Code, see [Editing JSON with Visual Studio Code - JSON schemas and
            settings](https://code.visualstudio.com/docs/languages/json#_json-schemas-and-settings)<!-- -->.
          type: Object
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: requestUpdate(input)
    uid: 'office!Office.Ribbon#requestUpdate:member(1)'
    package: office!
    fullName: requestUpdate(input)
    summary: Sends a request to Office to update the ribbon.
    remarks: >-
      **Requirement set**: [RibbonAPI
      1.1](https://learn.microsoft.com/javascript/api/requirement-sets/common/ribbon-api-requirement-sets)


      Note that this API is only to request an update. The actual UI update to the ribbon is controlled by the Office
      application and hence the exact timing of the ribbon update (or refresh) cannot be determined by the completion of
      this API.


      For code examples, see [Enable and Disable Add-in
      Commands](https://learn.microsoft.com/office/dev/add-ins/design/disable-add-in-commands) and [Create custom
      contextual tabs](https://learn.microsoft.com/office/dev/add-ins/design/contextual-tabs)<!-- -->.


      #### Examples


      ```TypeScript

      // Office.Tab objects are properties of ribbon updater objects that are passed to the 

      // Office.ribbon.requestUpdate method. The following shows how to set the visibility of 

      // a custom contextual tab.


      async function showDataTab() {
          await Office.ribbon.requestUpdate({
              tabs: [
                  {
                      id: "CtxTab1",
                      visible: true
                  }
              ]});
      }


      // The following does the same thing in TypeScript.


      const showDataTab = async () => {
          const myContextualTab: Office.Tab = { id: "CtxTab1", visible: true };
          const ribbonUpdater: Office.RibbonUpdaterData = { tabs: [ myContextualTab ] };
          await Office.ribbon.requestUpdate(ribbonUpdater);
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'requestUpdate(input: RibbonUpdaterData): Promise<void>;'
      parameters:
        - id: input
          description: >-
            Represents the updates to be made to the ribbon. Note that only the changes specified in the input parameter
            are made.
          type: '<xref uid="office!Office.RibbonUpdaterData:interface" />'
      return:
        type: Promise&lt;void&gt;
        description: ''
