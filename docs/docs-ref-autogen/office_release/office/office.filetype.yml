name: Office.FileType
uid: office!Office.FileType:enum
package: office!
fullName: Office.FileType
summary: Specifies the format in which to return the document.
remarks: >-


  #### Examples


  ```TypeScript

  // The following example gets the document in Office Open XML ("compressed")
  format in 65536 bytes (64 KB) slices.

  // Note: The implementation of app.showNotification in this example is from
  the Visual Studio template for Office Add-ins.

  function getDocumentAsCompressed() {
      Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, 
          function (result) {
              if (result.status == "succeeded") {
                  // If the getFileAsync call succeeded, then
                  // result.value will return a valid File Object.
                  const myFile = result.value;
                  const sliceCount = myFile.sliceCount;
                  const docDataSlices = [];
                  let slicesReceived = 0, gotAllSlices = true;
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);

                  // Get the file slices.
                  getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docDataSlices, slicesReceived);
              } else {
                  app.showNotification("Error:", result.error.message);
              }
      });
  }


  function getSliceAsync(file, nextSlice, sliceCount, gotAllSlices,
  docDataSlices, slicesReceived) {
      file.getSliceAsync(nextSlice, function (sliceResult) {
          if (sliceResult.status == "succeeded") {
              if (!gotAllSlices) { /* Failed to get all slices, no need to continue. */
                  return;
              }

              // Got one slice, store it in a temporary array.
              // (Or you can do something else, such as
              // send it to a third-party server.)
              docDataSlices[sliceResult.value.index] = sliceResult.value.data;
              if (++slicesReceived == sliceCount) {
                // All slices have been received.
                file.closeAsync();
                onGotAllSlices(docDataSlices);
              }
              else {
                  getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docDataSlices, slicesReceived);
              }
          }
              else {
                  gotAllSlices = false;
                  file.closeAsync();
                  app.showNotification("getSliceAsync Error:", sliceResult.error.message);
              }
      });
  }


  function onGotAllSlices(docDataSlices) {
      let docData = [];
      for (let i = 0; i < docDataSlices.length; i++) {
          docData = docData.concat(docDataSlices[i]);
      }

      let fileContent = new String();
      for (let j = 0; j < docData.length; j++) {
          fileContent += String.fromCharCode(docData[j]);
      }

      // Now all the file content is stored in 'fileContent' variable,
      // you can do something with it, such as print, fax...
  }

  ```

isPreview: false
isDeprecated: false
fields:
  - name: Compressed
    uid: office!Office.FileType.Compressed:member
    package: office!
    summary: >-
      Returns the entire document (.pptx, .docx, .xlsx, or .xlsm) in Office Open
      XML (OOXML) format as a byte array.


      Note: The .xslm file type is supported in Excel on Windows and Mac. It's
      not supported in Excel on the web. In Excel on Windows, the file slices
      from the `getFileAsync` method include the VBA signature files for .xslm
      file types. The VBA signature files are vbaProjectSignature.bin,
      vbaProbjectSignatureAgile.bin, and vbaProjectSignatureV3.bin. In Excel on
      Mac, the file slices from the `getFileAsync` method don't include the VBA
      signature files, because this platform doesn't support the VBA signature
      feature.
  - name: Pdf
    uid: office!Office.FileType.Pdf:member
    package: office!
    summary: Returns the entire document in PDF format as a byte array.
  - name: Text
    uid: office!Office.FileType.Text:member
    package: office!
    summary: Returns only the text of the document as a string.
