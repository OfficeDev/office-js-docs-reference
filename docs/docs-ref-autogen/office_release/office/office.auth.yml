### YamlMime:TSType
name: Office.Auth
uid: 'office!Office.Auth:interface'
package: office!
fullName: Office.Auth
summary: >-
  The Office Auth namespace, `Office.auth`<!-- -->, provides a method that allows the Office client application to
  obtain an access token to the add-in's web application. Indirectly, this also enables the add-in to access the
  signed-in user's Microsoft Graph data without requiring the user to sign in a second time.
remarks: |-


  #### Examples

  ```TypeScript
  // Get the auth context object and use it to get an
  // access token.
  const authContext = Office.context.auth;
  authContext.getAccessTokenAsync(function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
          const token = result.value;
          console.log(token);
      } else {
          console.log("Error obtaining token", result.error);
      }
  });
  ```
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: getAccessToken(options)
    uid: 'office!Office.Auth#getAccessToken:member(1)'
    package: office!
    fullName: getAccessToken(options)
    summary: >-
      Calls the Azure Active Directory V 2.0 endpoint to get an access token to your add-in's web application. Enables
      add-ins to identify users. Server-side code can use this token to access Microsoft Graph for the add-in's web
      application by using the ["on behalf of" OAuth
      flow](https://learn.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!--
      -->. This API requires a single sign-on configuration that bridges the add-in to an Azure application. Office
      users sign in with Organizational Accounts and Microsoft Accounts. Microsoft Azure returns tokens intended for
      both user account types to access resources in the Microsoft Graph.
    remarks: >-
      **Applications**: Excel, OneNote, Outlook, PowerPoint, Word


      **Requirement set**: [IdentityAPI
      1.3](https://learn.microsoft.com/javascript/api/requirement-sets/common/identity-api-requirement-sets)


      **Important**:


      - In Outlook, this API isn't supported if you load an add-in in an Outlook.com or Gmail mailbox.


      - In Outlook on the web, this API isn't supported if you use Firefox with Enhanced Tracking Protection turned on.
      This results in error 13001 ("The user is not signed into Office").


      - In Outlook on the web and [new Outlook on
      Windows](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627)<!-- -->, if you use the
      [displayDialogAsync](https://learn.microsoft.com/javascript/api/office/office.ui#office-office-ui-displaydialogasync-member(1))
      method to open a dialog, you must close the dialog before you can call `getAccessToken`<!-- -->.


      - In an Outlook event-based activation add-in, this API is supported in Outlook on Windows starting from Version
      2111 (Build 14701.20000). To retrieve an access token in older builds, use
      [OfficeRuntime.auth.getAccessToken](https://learn.microsoft.com/javascript/api/office-runtime/officeruntime.auth?view=common-js-preview#office-runtime-officeruntime-auth-getaccesstoken-member(1))
      instead. For more information, see [Enable single sign-on (SSO) in Outlook add-ins that use event-based
      activation](https://learn.microsoft.com/office/dev/add-ins/outlook/use-sso-in-event-based-activation)<!-- -->.


      #### Examples


      ```TypeScript

      try{
          const accessToken = await Office.auth.getAccessToken({
              allowSignInPrompt: true,
              allowConsentPrompt: true,
              forMSGraphAccess: true,
          });
      } catch (error) {
          console.log("Error obtaining token", error);
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAccessToken(options?: AuthOptions): Promise<string>;'
      parameters:
        - id: options
          description: Optional. Accepts an `AuthOptions` object to define sign-on behaviors.
          type: '<xref uid="office!Office.AuthOptions:interface" />'
      return:
        type: Promise&lt;string&gt;
        description: Promise to the access token.
  - name: 'getAccessTokenAsync(options, callback)'
    uid: 'office!Office.Auth#getAccessTokenAsync:member(1)'
    package: office!
    fullName: 'getAccessTokenAsync(options, callback)'
    summary: >-
      Calls the Azure Active Directory V 2.0 endpoint to get an access token to your add-in's web application. Enables
      add-ins to identify users. Server-side code can use this token to access Microsoft Graph for the add-in's web
      application by using the ["on behalf of" OAuth
      flow](https://learn.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!--
      -->.


      **Important**: In Outlook, this API isn't supported if the add-in is loaded in an Outlook.com or Gmail
      mailbox.
    remarks: >-
      **Applications**: Excel, OneNote, Outlook, PowerPoint, Word


      **Requirement set**: [IdentityAPI
      1.3](https://learn.microsoft.com/javascript/api/requirement-sets/common/identity-api-requirement-sets)


      This API requires a single sign-on configuration that bridges the add-in to an Azure application. Office users
      sign in with Organizational Accounts and Microsoft Accounts. Microsoft Azure returns tokens intended for both user
      account types to access resources in the Microsoft Graph.


      #### Examples


      ```TypeScript

      Office.context.auth.getAccessTokenAsync(function(result) {
          if (result.status === Office.AsyncResultStatus.Succeeded) {
              const token = result.value;
              // ...
          } else {
              console.log("Error obtaining token", result.error);
          }
      });

      ```
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `Office.auth.getAccessToken` instead.
    syntax:
      content: 'getAccessTokenAsync(options?: AuthOptions, callback?: (result: AsyncResult<string>) => void): void;'
      parameters:
        - id: options
          description: Optional. Accepts an `AuthOptions` object to define sign-on behaviors.
          type: '<xref uid="office!Office.AuthOptions:interface" />'
        - id: callback
          description: >-
            Optional. Accepts a callback function that can parse the token for the user's ID or use the token in the "on
            behalf of" flow to get access to Microsoft Graph. If `AsyncResult.status` is "succeeded", then
            `AsyncResult.value` is the raw AAD v. 2.0-formatted access token.
          type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: getAccessTokenAsync(callback)
    uid: 'office!Office.Auth#getAccessTokenAsync:member(2)'
    package: office!
    fullName: getAccessTokenAsync(callback)
    summary: >-
      Calls the Azure Active Directory V 2.0 endpoint to get an access token to your add-in's web application. Enables
      add-ins to identify users. Server-side code can use this token to access Microsoft Graph for the add-in's web
      application by using the ["on behalf of" OAuth
      flow](https://learn.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!--
      -->.


      **Important**: In Outlook, this API isn't supported if the add-in is loaded in an Outlook.com or Gmail
      mailbox.
    remarks: >-
      **Applications**: Excel, OneNote, Outlook, PowerPoint, Word


      **Requirement set**: [IdentityAPI
      1.3](https://learn.microsoft.com/javascript/api/requirement-sets/common/identity-api-requirement-sets)


      This API requires a single sign-on configuration that bridges the add-in to an Azure application. Office users
      sign in with Organizational Accounts and Microsoft Accounts. Microsoft Azure returns tokens intended for both user
      account types to access resources in the Microsoft Graph.
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `Office.auth.getAccessToken` instead.
    syntax:
      content: 'getAccessTokenAsync(callback?: (result: AsyncResult<string>) => void): void;'
      parameters:
        - id: callback
          description: >-
            Optional. Accepts a callback function that can parse the token for the user's ID or use the token in the "on
            behalf of" flow to get access to Microsoft Graph. If `AsyncResult.status` is "succeeded", then
            `AsyncResult.value` is the raw AAD v. 2.0-formatted access token.
          type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
      return:
        type: void
        description: ''
