### YamlMime:UniversalReference
items:
  - uid: office.Office.Bindings
    summary: Represents the bindings the add-in has within the document.
    name: Office.Bindings
    fullName: office.Office.Bindings
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Bindings.addFromNamedItemAsync
      - office.Office.Bindings.addFromPromptAsync
      - office.Office.Bindings.addFromSelectionAsync
      - office.Office.Bindings.document
      - office.Office.Bindings.getAllAsync
      - office.Office.Bindings.getByIdAsync
      - office.Office.Bindings.releaseByIdAsync
  - uid: office.Office.Bindings.addFromNamedItemAsync
    summary: Creates a binding against a named object in the document.
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>


      For Excel, the itemName parameter can refer to a named range or a table.


      By default, adding a table in Excel assigns the name "Table1" for the first table you add, "Table2" for the second
      table you add, and so on. To assign a meaningful name for a table in the Excel UI, use the Table Name property on
      the Table Tools \| Design tab of the ribbon.


      Note: In Excel, when specifying a table as a named item, you must fully qualify the name to include the worksheet
      name in the name of the table in this format: "Sheet1!Table1"


      For Word, the itemName parameter refers to the Title property of a Rich Text content control. (You can't bind to
      content controls other than the Rich Text content control).


      By default, a content control has no Title value assigned. To assign a meaningful name in the Word UI, after
      inserting a Rich Text content control from the Controls group on the Developer tab of the ribbon, use the
      Properties command in the Controls group to display the Content Control Properties dialog box. Then set the Title
      property of the content control to the name you want to reference from your code.


      Note: In Word, if there are multiple Rich Text content controls with the same Title property value (name), and you
      try to bind to one these content controls with this method (by specifying its name as the itemName parameter), the
      operation will fail.


      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><th> Access </th><td> </td><td> Y </td><td> </td></tr> <tr><th>
      Excel </th><td> Y </td><td> Y </td><td> Y </td></tr> <tr><th> Word </th><td> Y </td><td> Y </td><td> Y </td></tr>
      </table>

      #### Examples


      ```javascript

      // The following example adds a binding to the myRange named item in Excel as a "matrix" binding,

      // and assigns the binding's id as myMatrix.

      function bindNamedItem() {
          Office.context.document.bindings.addFromNamedItemAsync("myRange", "matrix", {id:'myMatrix'}, function (result) {
              if (result.status == 'succeeded'){
                  write('Added new binding with type: ' + result.value.type + ' and id: ' + result.value.id);
                  }
              else
                  write('Error: ' + result.error.message);
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // The following example adds a binding to the Table1 named item in Excel as a "table" binding,

      // and assigns the binding's id as myTable.

      function bindNamedItem() {
          Office.context.document.bindings.addFromNamedItemAsync("Table1", "table", {id:'myTable'}, function (result) {
              if (result.status == 'succeeded'){
                  write('Added new binding with type: ' + result.value.type + ' and id: ' + result.value.id);
                  }
              else
                  write('Error: ' + result.error.message);
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // The following example creates a text binding in Word to a rich text content control named "FirstName",

      // assigns the id "firstName", and then displays that information.

      function bindContentControl() {
          Office.context.document.bindings.addFromNamedItemAsync('FirstName', 
              Office.BindingType.Text, {id:'firstName'},
              function (result) {
                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                      write('Control bound. Binding.id: '
                          + result.value.id + ' Binding.type: ' + result.value.type);
                  } else {
                      write('Error:', result.error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'addFromNamedItemAsync(itemName, bindingType, options, callback)'
    fullName: office.Office.Bindings.addFromNamedItemAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFromNamedItemAsync(itemName: string, bindingType: BindingType, options?: AddBindingFromNamedItemOptions,
        callback?: (result: AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemName
          description: Name of the bindable object in the document. For Example 'MyExpenses' table in Excel."
          type:
            - string
        - id: bindingType
          description: >-
            The[Office.BindingType](xref:office.Office.BindingType) for the data. The method returns null if the
            selected object cannot be coerced into the specified type.
          type:
            - BindingType
        - id: options
          description: Provides options for configuring the binding that is created.
          type:
            - office.Office.AddBindingFromNamedItemOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Bindings.addFromPromptAsync
    summary: Create a binding by prompting the user to make a selection on the document.
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>Not in a set</td></tr></table>


      Adds a binding object of the specified type to the Bindings collection, which will be identified with the supplied
      id. The method fails if the specified selection cannot be bound.


      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><th> Access </th><td> </td><td> Y </td><td> </td></tr> <tr><th>
      Excel </th><td> Y </td><td> Y </td><td> Y </td></tr> </table>

      #### Examples


      ```javascript

      function addBindingFromPrompt() {
          Office.context.document.bindings.addFromPromptAsync(Office.BindingType.Text, { id: 'MyBinding', promptText: 'Select text to bind to.' }, function (asyncResult) {
              write('Added new binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'addFromPromptAsync(bindingType, options, callback)'
    fullName: office.Office.Bindings.addFromPromptAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFromPromptAsync(bindingType: BindingType, options?: AddBindingFromPromptOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: bindingType
          description: >-
            Specifies the type of the binding object to create. Required. Returns null if the selected object cannot be
            coerced into the specified type.
          type:
            - BindingType
        - id: options
          description: Provides options for configuring the prompt and identifying the binding that is created.
          type:
            - office.Office.AddBindingFromPromptOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Bindings.addFromSelectionAsync
    summary: Create a binding based on the user's current selection.
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>


      Adds the specified type of binding object to the Bindings collection, which will be identified with the supplied
      id.


      Note In Excel, if you call the addFromSelectionAsync method passing in the Binding.id of an existing binding, the
      Binding.type of that binding is used, and its type cannot be changed by specifying a different value for the
      bindingType parameter. If you need to use an existing id and change the bindingType, call the
      Bindings.releaseByIdAsync method first to release the binding, and then call the addFromSelectionAsync method to
      reestablish the binding with a new type.


      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><th> Access </th><td> </td><td> Y </td><td> </td></tr> <tr><th>
      Excel </th><td> Y </td><td> Y </td><td> Y </td></tr> <tr><th> Word </th><td> Y </td><td> Y </td><td> Y </td></tr>
      </table>

      #### Examples


      ```javascript

      function addBindingFromSelection() {
          Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Text, { id: 'MyBinding' }, 
              function (asyncResult) {
              write('Added new binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);
              }
          );
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'addFromSelectionAsync(bindingType, options, callback)'
    fullName: office.Office.Bindings.addFromSelectionAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addFromSelectionAsync(bindingType: BindingType, options?: AddBindingFromSelectionOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: bindingType
          description: >-
            Specifies the type of the binding object to create. Required. Returns null if the selected object cannot be
            coerced into the specified type.
          type:
            - BindingType
        - id: options
          description: Provides options for configuring the prompt and identifying the binding that is created.
          type:
            - office.Office.AddBindingFromSelectionOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Bindings.document
    summary: >-
      Gets an [Office.Document](xref:office.Office.Document) object that represents the document associated with this
      set of bindings.
    remarks: >-
      **Support details**


      A capital Y in the following matrix indicates that this property is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this property.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><th> Access </th><td> </td><td> Y </td><td> </td></tr> <tr><th>
      Excel </th><td> Y </td><td> Y </td><td> Y </td></tr> <tr><th> Word </th><td> Y </td><td> Y </td><td> Y </td></tr>
      </table>
    name: document
    fullName: office.Office.Bindings.document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'document: Document;'
      return:
        type:
          - Document
  - uid: office.Office.Bindings.getAllAsync
    summary: Gets all bindings that were previously created.
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>


      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><th> Access </th><td> </td><td> Y </td><td> </td></tr> <tr><th>
      Excel </th><td> Y </td><td> Y </td><td> Y </td></tr> <tr><th> Word </th><td> Y </td><td> Y </td><td> Y </td></tr>
      </table>

      #### Examples


      ```javascript

      function displayAllBindingNames() {
          Office.context.document.bindings.getAllAsync(function (asyncResult) {
              var bindingString = '';
              for (var i in asyncResult.value) {
                  bindingString += asyncResult.value[i].id + '\n';
              }
              write('Existing bindings: ' + bindingString);
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'getAllAsync(options, callback)'
    fullName: office.Office.Bindings.getAllAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAllAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Bindings.getByIdAsync
    summary: Retrieves a binding based on its Name
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts, MatrixBindings, TableBindings,
      TextBindings</td></tr></table>


      Fails if the specified id does not exist.


      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><th> Access </th><td> </td><td> Y </td><td> </td></tr> <tr><th>
      Excel </th><td> Y </td><td> Y </td><td> Y </td></tr> <tr><th> Word </th><td> Y </td><td> Y </td><td> Y </td></tr>
      </table>

      #### Examples


      ```javascript

      function displayBindingType() {
          Office.context.document.bindings.getByIdAsync('MyBinding', function (asyncResult) {
              write('Retrieved binding with type: ' + asyncResult.value.type + ' and id: ' + asyncResult.value.id);
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'getByIdAsync(id, options, callback)'
    fullName: office.Office.Bindings.getByIdAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByIdAsync(id: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: Specifies the unique name of the binding object. Required.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Bindings.releaseByIdAsync
    summary: Removes the binding from the document
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>


      Fails if the specified id does not exist.


      **Support details**


      A capital Y in the following matrix indicates that this method is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this method.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><th> Access </th><td> </td><td> Y </td><td> </td></tr> <tr><th>
      Excel </th><td> Y </td><td> Y </td><td> Y </td></tr> <tr><th> Word </th><td> Y </td><td> Y </td><td> Y </td></tr>
      </table>

      #### Examples


      ```javascript

      Office.context.document.bindings.releaseByIdAsync("MyBinding", function (asyncResult) { 
          write("Released MyBinding!"); 
      }); 

      // Function that writes to a div with id='message' on the page. 

      function write(message){ 
          document.getElementById('message').innerText += message;  
      }

      ```
    name: 'releaseByIdAsync(id, options, callback)'
    fullName: office.Office.Bindings.releaseByIdAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        releaseByIdAsync(id: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: Specifies the unique name to be used to identify the binding object. Required.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
