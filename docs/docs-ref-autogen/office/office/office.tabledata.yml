### YamlMime:UniversalReference
items:
  - uid: office.Office.TableData
    summary: 'Represents the data in a table or an [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->.'
    name: Office.TableData
    fullName: Office.TableData
    langs:
      - typeScript
    type: class
    package: office
    children:
      - office.Office.TableData.(constructor)
      - office.Office.TableData.(constructor)_1
      - office.Office.TableData.headers
      - office.Office.TableData.rows
  - uid: office.Office.TableData.(constructor)
    summary: Constructs a new instance of the `TableData` class
    name: '(constructor)(rows, headers)'
    fullName: '(constructor)(rows, headers)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(rows: any[][], headers: any[]);'
      parameters:
        - id: rows
          description: ''
          type:
            - 'any[][]'
        - id: headers
          description: ''
          type:
            - 'any[]'
  - uid: office.Office.TableData.(constructor)_1
    summary: Constructs a new instance of the `TableData` class
    name: (constructor)()
    fullName: (constructor)()
    langs:
      - typeScript
    type: constructor
    syntax:
      content: constructor();
  - uid: office.Office.TableData.headers
    summary: Gets or sets the headers of the table.
    remarks: >-
      To specify headers, you must specify an array of arrays that corresponds to the structure of the table. For
      example, to specify headers for a two-column table you would set the header property to \[\['header1',
      'header2'\]\].


      If you specify null for the headers property (or leaving the property empty when you construct a TableData
      object), the following results occur when your code executes:


      - If you insert a new table, the default column headers for the table are created.


      - If you overwrite or update an existing table, the existing headers are not altered.


      #### Examples


      ```javascript

      // The following example creates a single-column table with a header and three rows.

      function createTableData() {
          var tableData = new Office.TableData();
          tableData.headers = [['header1']];
          tableData.rows = [['row1'], ['row2'], ['row3']];
          return tableData;
      }

      ```
    name: headers
    fullName: headers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'headers: any[];'
      return:
        type:
          - 'any[]'
  - uid: office.Office.TableData.rows
    summary: >-
      Gets or sets the rows in the table. Returns an array of arrays that contains the data in the table. Returns an
      empty array if there are no rows.
    remarks: >-
      To specify rows, you must specify an array of arrays that corresponds to the structure of the table. For example,
      to specify two rows of string values in a two-column table you would set the rows property to \[\['a', 'b'\],
      \['c', 'd'\]\].


      If you specify null for the rows property (or leave the property empty when you construct a TableData object), the
      following results occur when your code executes:


      - If you insert a new table, a blank row will be inserted.


      - If you overwrite or update an existing table, the existing rows are not altered.


      #### Examples


      ```javascript

      // The following example creates a single-column table with a header and three rows.

      function createTableData() {
          var tableData = new Office.TableData();
          tableData.headers = [['header1']];
          tableData.rows = [['row1'], ['row2'], ['row3']];
          return tableData;
      }

      ```
    name: rows
    fullName: rows
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rows: any[][];'
      return:
        type:
          - 'any[][]'
