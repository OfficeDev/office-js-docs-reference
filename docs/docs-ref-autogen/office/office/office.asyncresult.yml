### YamlMime:UniversalReference
items:
  - uid: 'office!Office.AsyncResult:interface'
    summary: >-
      An object which encapsulates the result of an asynchronous request, including status and error information if the
      request failed.


      When the function you pass to the `callback` parameter of an "Async" method executes, it receives an AsyncResult
      object that you can access from the `callback` function's only parameter.
    name: Office.AsyncResult
    fullName: Office.AsyncResult
    langs:
      - typeScript
    type: interface
    syntax:
      typeParameters:
        - id: T
    package: office!
    remarks: |-


      #### Examples

      ```javascript
      // The following is an example applicable to content and task pane add-ins.
      // The example shows a call to the getSelectedDataAsync method of the Document object.
      Office.context.document.getSelectedDataAsync("text", {
              valueFormat: "unformatted",
              filterType: "all"
          },
          function (result) {
              if (result.status === "success") {
                  var dataValue = result.value; // Get selected data.
                  console.log('Selected data is ' + dataValue);
              } else {
                  var err = result.error;
                  console.log(err.name + ": " + err.message);
              }
          });
      // The anonymous function passed as the callback argument ( function (result){...}) has a single 
      // parameter named result that provides access to an AsyncResult object when the function executes.
      // When the call to the getSelectedDataAsync method completes, the callback function executes, 
      // and the following line of code accesses the value property of the AsyncResult object to 
      // return the data selected in the document:
      var dataValue = result.value;
      // Note that other lines of code in the function use the result parameter of the callback function 
      // to access the status and error properties of the AsyncResult object.
      ```
    children:
      - 'office!Office.AsyncResult#asyncContext:member'
      - 'office!Office.AsyncResult#diagnostics:member'
      - 'office!Office.AsyncResult#error:member'
      - 'office!Office.AsyncResult#status:member'
      - 'office!Office.AsyncResult#value:member'
  - uid: 'office!Office.AsyncResult#asyncContext:member'
    summary: >-
      Gets the user-defined item passed to the optional `asyncContext` parameter of the invoked method in the same state
      as it was passed in. This returns the user-defined item (which can be of any JavaScript type: String, Number,
      Boolean, Object, Array, Null, or Undefined) passed to the optional `asyncContext` parameter of the invoked method.
      Returns Undefined, if you didn't pass anything to the asyncContext parameter.
    name: asyncContext
    fullName: asyncContext
    langs:
      - typeScript
    type: property
    syntax:
      content: 'asyncContext: any;'
      return:
        type:
          - any
        description: |-


          #### Examples

          ```javascript
          function getDataWithContext() {
              var format = "Your data: ";
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text, 
                  { asyncContext: format }, 
                  showDataWithContext);
          }

          function showDataWithContext(asyncResult) {
              write(asyncResult.asyncContext + asyncResult.value);
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.AsyncResult#diagnostics:member'
    summary: 'Gets an object that may provide additional information if an [error](xref:office!Office.Error:interface) occurred.'
    remarks: >-
      This property returns additional information if the following errors occur with these supported APIs.


      *Supported APIs*


      `Office.context.mailbox.item.getCallbackTokenAsync`<!-- -->,
      `Office.context.mailbox.item.getUserIdentityTokenAsync`


      *Supported errors* <table> <tr><th>`AsyncResult.error.name` </th><th>`AsyncResult.error.message`
      </th><th>Description of diagnostics object returned </th></tr> <tr><td><strong>HTTPRequestFailure</strong>
      </td><td>The request has failed. Please look at the diagnostics object for the HTTP error code. </td><td>The HTTP
      error code in a JSON object e.g., `{"HTTPCode":"401"}` </td></tr>
      <tr><td><strong>InternalServerError</strong></td><td>The Exchange server returned an error. Please look at the
      diagnostics object for more information.</td><td>The error message from the Exchange server in a JSON object e.g.,
      `{"ErrorText": "The mailbox database is temporarily unavailable"}`</td></tr> </table>
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: any;'
      return:
        type:
          - any
  - uid: 'office!Office.AsyncResult#error:member'
    summary: >-
      Gets an [Office.Error](xref:office!Office.Error:interface) object that provides a description of the error, if any
      error occurred.
    name: error
    fullName: error
    langs:
      - typeScript
    type: property
    syntax:
      content: 'error: Office.Error;'
      return:
        type:
          - 'office!Office.Error:interface'
        description: |-


          #### Examples

          ```javascript
          function getData() {
              Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write(asyncResult.error.message);
                  }
                  else {
                      write(asyncResult.value);
                  }
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.AsyncResult#status:member'
    summary: 'Gets the [Office.AsyncResultStatus](xref:office!Office.AsyncResultStatus:enum) of the asynchronous operation.'
    name: status
    fullName: status
    langs:
      - typeScript
    type: property
    syntax:
      content: 'status: AsyncResultStatus;'
      return:
        type:
          - 'office!Office.AsyncResultStatus:enum'
        description: |-


          #### Examples

          ```javascript
          function getData() {
              Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write(asyncResult.error.message);
                  }
                  else {
                      write(asyncResult.value);
                  }
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.AsyncResult#value:member'
    summary: 'Gets the payload or content of this asynchronous operation, if any.'
    remarks: >-
      You access the AsyncResult object in the function passed as the argument to the callback parameter of an "Async"
      method, such as the `getSelectedDataAsync` and `setSelectedDataAsync` methods of the
      [Document](xref:office!Office.Document:interface) object.


      **Note**: What the value property returns for a particular "Async" method varies depending on the purpose and
      context of that method. To determine what is returned by the value property for an "Async" method, refer to the
      "Callback value" section of the method's topic.


      #### Examples


      ```javascript

      function getData() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, function(asyncResult) {
              if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                  write(asyncResult.error.message);
              }
              else {
                  write(asyncResult.value);
              }
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: value
    fullName: value
    langs:
      - typeScript
    type: property
    syntax:
      content: 'value: T;'
      return:
        type:
          - T
references:
  - uid: 'office!Office.Error:interface'
    name: Office.Error
  - uid: 'office!Office.AsyncResultStatus:enum'
    name: AsyncResultStatus
