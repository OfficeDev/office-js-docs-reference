### YamlMime:TSType
name: Office.Auth
uid: 'office!Office.Auth:interface'
package: office!
fullName: Office.Auth
summary: >-
  The Office Auth namespace, `Office.context.auth`<!-- -->, provides a method
  that allows the Office client application to obtain an access token to the
  add-in's web application. Indirectly, this also enables the add-in to access
  the signed-in user's Microsoft Graph data without requiring the user to sign
  in a second time.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: getAccessToken(options)
    uid: 'office!Office.Auth#getAccessToken:member(1)'
    package: office!
    fullName: getAccessToken(options)
    summary: >-
      Calls the Azure Active Directory V 2.0 endpoint to get an access token to
      your add-in's web application. Enables add-ins to identify users.
      Server-side code can use this token to access Microsoft Graph for the
      add-in's web application by using the ["on behalf of" OAuth
      flow](https://docs.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!--
      -->. This API requires a single sign-on configuration that bridges the
      add-in to an Azure application. Office users sign in with Organizational
      Accounts and Microsoft Accounts. Microsoft Azure returns tokens intended
      for both user account types to access resources in the Microsoft Graph.
    remarks: >-
      **Hosts**: Excel, OneNote, Outlook, PowerPoint, Word


      **Important**: In Outlook, this API is not supported if the add-in is
      loaded in an Outlook.com or Gmail mailbox.


      **Requirement set**:
      [IdentityAPI](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/identity-api-requirement-sets)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAccessToken(options?: AuthOptions): Promise<string>;'
      parameters:
        - id: options
          description: >-
            Optional. Accepts an `AuthOptions` object to define sign-on
            behaviors.
          type: '<xref uid="office!Office.AuthOptions:interface" />'
      return:
        type: Promise&lt;string&gt;
        description: Promise to the access token.
  - name: 'getAccessTokenAsync(options, callback)'
    uid: 'office!Office.Auth#getAccessTokenAsync:member(1)'
    package: office!
    fullName: 'getAccessTokenAsync(options, callback)'
    summary: >-
      Calls the Azure Active Directory V 2.0 endpoint to get an access token to
      your add-in's web application. Enables add-ins to identify users.
      Server-side code can use this token to access Microsoft Graph for the
      add-in's web application by using the ["on behalf of" OAuth
      flow](https://docs.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!--
      -->.
    remarks: >-
      **Hosts**: Excel, OneNote, Outlook, PowerPoint, Word


      **Requirement set**:
      [IdentityAPI](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/identity-api-requirement-sets)


      This API requires a single sign-on configuration that bridges the add-in
      to an Azure application. Office users sign in with Organizational Accounts
      and Microsoft Accounts. Microsoft Azure returns tokens intended for both
      user account types to access resources in the Microsoft Graph.


      #### Examples


      ```javascript

      Office.context.auth.getAccessTokenAsync(function(result) {
          if (result.status === "succeeded") {
              var token = result.value;
              // ...
          } else {
              console.log("Error obtaining token", result.error);
          }
      });

      ```
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: >-
      Use Office.auth.getAccessToken instead.


      \*\*Important\*\*: In Outlook, this API is not supported if the add-in is
      loaded in an Outlook.com or Gmail mailbox.
    syntax:
      content: >-
        getAccessTokenAsync(options?: AuthOptions, callback?: (result:
        AsyncResult<string>) => void): void;
      parameters:
        - id: options
          description: >-
            Optional. Accepts an `AuthOptions` object to define sign-on
            behaviors.
          type: '<xref uid="office!Office.AuthOptions:interface" />'
        - id: callback
          description: >-
            Optional. Accepts a callback method that can parse the token for the
            user's ID or use the token in the "on behalf of" flow to get access
            to Microsoft Graph. If `AsyncResult.status` is "succeeded", then
            `AsyncResult.value` is the raw AAD v. 2.0-formatted access token.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;string&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: getAccessTokenAsync(callback)
    uid: 'office!Office.Auth#getAccessTokenAsync:member(2)'
    package: office!
    fullName: getAccessTokenAsync(callback)
    summary: >-
      Calls the Azure Active Directory V 2.0 endpoint to get an access token to
      your add-in's web application. Enables add-ins to identify users.
      Server-side code can use this token to access Microsoft Graph for the
      add-in's web application by using the ["on behalf of" OAuth
      flow](https://docs.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!--
      -->.
    remarks: >-
      **Hosts**: Excel, OneNote, Outlook, PowerPoint, Word


      **Requirement set**:
      [IdentityAPI](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/identity-api-requirement-sets)


      This API requires a single sign-on configuration that bridges the add-in
      to an Azure application. Office users sign in with Organizational Accounts
      and Microsoft Accounts. Microsoft Azure returns tokens intended for both
      user account types to access resources in the Microsoft Graph.
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: >-
      Use `Office.auth.getAccessToken` instead.


      \*\*Important\*\*: In Outlook, this API is not supported if the add-in is
      loaded in an Outlook.com or Gmail mailbox.
    syntax:
      content: >-
        getAccessTokenAsync(callback?: (result: AsyncResult<string>) => void):
        void;
      parameters:
        - id: callback
          description: >-
            Optional. Accepts a callback method that can parse the token for the
            user's ID or use the token in the "on behalf of" flow to get access
            to Microsoft Graph. If `AsyncResult.status` is "succeeded", then
            `AsyncResult.value` is the raw AAD v. 2.0-formatted access token.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;string&gt;) =&gt; void
      return:
        type: void
        description: ''
