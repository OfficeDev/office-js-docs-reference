### YamlMime:TSType
name: Office.RibbonUpdaterData
uid: 'office!Office.RibbonUpdaterData:interface'
package: office!
fullName: Office.RibbonUpdaterData
summary: 'Specifies changes to the ribbon, such as the enabled or disabled status of a button.'
remarks: >-
  \*\*Requirement set\*\*: [RibbonAPI
  1.1](https://learn.microsoft.com/javascript/api/requirement-sets/common/ribbon-api-requirement-sets)
example: []
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: tabs
    uid: 'office!Office.RibbonUpdaterData#tabs:member'
    package: office!
    fullName: tabs
    summary: Collection of tabs whose state is set with the call of `requestUpdate`<!-- -->.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tabs: Tab[];'
      return:
        type: '<xref uid="office!Office.Tab:interface" />[]'
        description: |-


          #### Examples

          ```TypeScript
          // Office.Tab objects are properties of ribbon updater objects that are passed to the 
          // Office.ribbon.requestUpdate method. The following shows how to set the visibility of 
          // a custom contextual tab.

          async function showDataTab() {
              await Office.ribbon.requestUpdate({
                  tabs: [
                      {
                          id: "CtxTab1",
                          visible: true
                      }
                  ]});
          }

          // The following does the same thing in TypeScript.

          const showDataTab = async () => {
              const myContextualTab: Office.Tab = { id: "CtxTab1", visible: true };
              const ribbonUpdater: Office.RibbonUpdaterData = { tabs: [ myContextualTab ] };
              await Office.ribbon.requestUpdate(ribbonUpdater);
          }
          ```
