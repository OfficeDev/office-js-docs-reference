### YamlMime:UniversalReference
items:
  - uid: 'office!Office.CustomXmlParts:interface'
    summary: Represents a collection of CustomXmlPart objects.
    remarks: '**Hosts**: Word'
    name: CustomXmlParts
    fullName: Office.CustomXmlParts
    langs:
      - typeScript
    namespace: 'office!Office:namespace'
    type: interface
    package: office!
    children:
      - 'office!Office.CustomXmlParts#addAsync:member(1)'
      - 'office!Office.CustomXmlParts#addAsync:member(2)'
      - 'office!Office.CustomXmlParts#getByIdAsync:member(1)'
      - 'office!Office.CustomXmlParts#getByIdAsync:member(2)'
      - 'office!Office.CustomXmlParts#getByNamespaceAsync:member(1)'
      - 'office!Office.CustomXmlParts#getByNamespaceAsync:member(2)'
  - uid: 'office!Office.CustomXmlParts#addAsync:member(1)'
    summary: Asynchronously adds a new custom XML part to a file.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'addAsync(xml, options, callback)'
    fullName: 'addAsync(xml, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addAsync(xml: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlPart>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xml
          description: The XML to add to the newly created custom XML part.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the newly created CustomXmlPart object.
          type:
            - 'office!Office.CustomXmlParts#addAsync~0:complex'
  - uid: 'office!Office.CustomXmlParts#addAsync:member(2)'
    summary: Asynchronously adds a new custom XML part to a file.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function addXMLPart() {
          Office.context.document.customXmlParts.addAsync(
              '<root categoryId="1" xmlns="http://tempuri.org"><item name="Cheap Item" price="$193.95"/><item name="Expensive Item" price="$931.88"/></root>',
              function (result) {});
      }


      function addXMLPartandHandler() {
          Office.context.document.customXmlParts.addAsync(
              "<testns:book xmlns:testns='http://testns.com'><testns:page number='1'>Hello</testns:page><testns:page number='2'>world!</testns:page></testns:book>",
              function(r) { r.value.addHandlerAsync(Office.EventType.DataNodeDeleted,
                  function(a) {write(a.type)
                  },
                      function(s) {write(s.status)
                      });
              });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message;
      }

      ```
    name: 'addAsync(xml, callback)'
    fullName: 'addAsync(xml, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAsync(xml: string, callback?: (result: AsyncResult<CustomXmlPart>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xml
          description: The XML to add to the newly created custom XML part.
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the newly created CustomXmlPart object.
          type:
            - 'office!Office.CustomXmlParts#addAsync~1:complex'
  - uid: 'office!Office.CustomXmlParts#getByIdAsync:member(1)'
    summary: Asynchronously gets the specified custom XML part by its id.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function showXMLPartInnerXML() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getXmlAsync({}, function (eventArgs) {
                  write(eventArgs.value);
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'getByIdAsync(id, options, callback)'
    fullName: 'getByIdAsync(id, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getByIdAsync(id: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlPart>)
        => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: 'The GUID of the custom XML part, including opening and closing braces.'
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is a CustomXmlPart object that represents the specified custom XML part. If there is no custom XML part with
            the specified id, the method returns null.
          type:
            - 'office!Office.CustomXmlParts#getByIdAsync~0:complex'
  - uid: 'office!Office.CustomXmlParts#getByIdAsync:member(2)'
    summary: Asynchronously gets the specified custom XML part by its id.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'getByIdAsync(id, callback)'
    fullName: 'getByIdAsync(id, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByIdAsync(id: string, callback?: (result: AsyncResult<CustomXmlPart>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: 'The GUID of the custom XML part, including opening and closing braces.'
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is a CustomXmlPart object that represents the specified custom XML part. If there is no custom XML part with
            the specified id, the method returns null.
          type:
            - 'office!Office.CustomXmlParts#getByIdAsync~1:complex'
  - uid: 'office!Office.CustomXmlParts#getByNamespaceAsync:member(1)'
    summary: Asynchronously gets the specified custom XML part(s) by its namespace.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'getByNamespaceAsync(ns, options, callback)'
    fullName: 'getByNamespaceAsync(ns, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getByNamespaceAsync(ns: string, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<CustomXmlPart[]>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: ns
          description: The namespace URI.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is an array of CustomXmlPart objects that match the specified namespace.
          type:
            - 'office!Office.CustomXmlParts#getByNamespaceAsync~0:complex'
  - uid: 'office!Office.CustomXmlParts#getByNamespaceAsync:member(2)'
    summary: Asynchronously gets the specified custom XML part(s) by its namespace.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function showXMLPartsInNamespace() {
          Office.context.document.customXmlParts.getByNamespaceAsync(
              "http://tempuri.org", 
              function (eventArgs) {
                  write("Found " + eventArgs.value.length + " parts with this namespace");
          }); 
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'getByNamespaceAsync(ns, callback)'
    fullName: 'getByNamespaceAsync(ns, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByNamespaceAsync(ns: string, callback?: (result: AsyncResult<CustomXmlPart[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: ns
          description: The namespace URI.
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is an array of CustomXmlPart objects that match the specified namespace.
          type:
            - 'office!Office.CustomXmlParts#getByNamespaceAsync~1:complex'
references:
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: AsyncContextOptions
    fullName: Office.AsyncContextOptions
  - uid: 'office!Office.CustomXmlParts#addAsync~0:complex'
    name: '(result: AsyncResult<CustomXmlPart>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlPart>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: Office.CustomXmlPart
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.CustomXmlParts#addAsync~1:complex'
    name: '(result: AsyncResult<CustomXmlPart>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlPart>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: Office.CustomXmlPart
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.CustomXmlParts#getByIdAsync~0:complex'
    name: '(result: AsyncResult<CustomXmlPart>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlPart>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: Office.CustomXmlPart
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.CustomXmlParts#getByIdAsync~1:complex'
    name: '(result: AsyncResult<CustomXmlPart>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlPart>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: Office.CustomXmlPart
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.CustomXmlParts#getByNamespaceAsync~0:complex'
    name: '(result: AsyncResult<CustomXmlPart[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlPart[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: Office.CustomXmlPart
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlParts#getByNamespaceAsync~1:complex'
    name: '(result: AsyncResult<CustomXmlPart[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlPart[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: Office.CustomXmlPart
      - name: '[]>) => void'
        fullName: '[]>) => void'
