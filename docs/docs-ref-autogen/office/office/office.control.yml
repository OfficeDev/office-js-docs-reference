### YamlMime:TSType
name: Office.Control
uid: office!Office.Control:interface
package: office!
fullName: Office.Control
summary: Represents an individual control or command and the state it should have.
remarks: >-
  For code samples showing how to use a `Control` object and its properties, see
  [Change the availability of add-in
  commands](https://learn.microsoft.com/office/dev/add-ins/design/disable-add-in-commands)
  and [Create custom contextual
  tabs](https://learn.microsoft.com/office/dev/add-ins/design/contextual-tabs)<!--
  -->.


  **Requirement set**: [RibbonAPI
  1.1](https://learn.microsoft.com/javascript/api/requirement-sets/common/ribbon-api-requirement-sets)


  #### Examples


  ```TypeScript

  // This snippet enables a control (a button) in a custom ribbon tab.

  // Note that "MyButton", "OfficeAddinTab1", and "CustomGroup111" are defined
  in the manifest.

  const enableButton = async () => {
      const button: Control = { id: "MyButton", enabled: true };
      const parentGroup: Group = { id: "CustomGroup111", controls: [button] };
      const parentTab: Tab = { id: "OfficeAddinTab1", groups: [parentGroup] };
      const ribbonUpdater: RibbonUpdaterData = { tabs: [parentTab] };
      Office.ribbon.requestUpdate(ribbonUpdater);
  }

  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: enabled
    uid: office!Office.Control#enabled:member
    package: office!
    fullName: enabled
    summary: >-
      Indicates whether the control should be enabled or disabled. The default
      is true.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enabled?: boolean;'
      return:
        type: boolean
  - name: id
    uid: office!Office.Control#id:member
    package: office!
    fullName: id
    summary: Identifier of the control as specified in the manifest.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string;'
      return:
        type: string
