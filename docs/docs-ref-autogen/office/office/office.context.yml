### YamlMime:TSType
name: Office.Context
uid: 'office!Office.Context:interface'
package: office!
fullName: Office.Context
summary: >-
  Represents the runtime environment of the add-in and provides access to key
  objects of the API. The current context exists as a property of Office. It is
  accessed using `Office.context`<!-- -->.
remarks: '**Hosts**: Excel, Outlook, PowerPoint, Project, Word'
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: auth
    uid: 'office!Office.Context#auth:member'
    package: office!
    fullName: auth
    summary: Provides information and access to the signed-in user.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'auth: Auth;'
      return:
        type: '<xref uid="office!Office.Auth:interface" />'
  - name: commerceAllowed
    uid: 'office!Office.Context#commerceAllowed:member'
    package: office!
    fullName: commerceAllowed
    summary: >-
      True, if the current platform allows the add-in to display a UI for
      selling or upgrading; otherwise returns False.
    remarks: >-
      **Hosts**: Excel, Word


      `commerceAllowed` is only supported in Office on iPad.


      The iOS App Store doesn't support apps with add-ins that provide links to
      additional payment systems. However, Office Add-ins running in Office on
      the Windows desktop or in the browser do allow such links. If you want the
      UI of your add-in to provide a link to an external payment system on
      platforms other than iOS, you can use the commerceAllowed property to
      control when that link is displayed.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'commerceAllowed: boolean;'
      return:
        type: boolean
  - name: contentLanguage
    uid: 'office!Office.Context#contentLanguage:member'
    package: office!
    fullName: contentLanguage
    summary: >-
      Gets the locale (language) specified by the user for editing the document
      or item.
    remarks: >-
      The `contentLanguage` value reflects the **Editing Language** setting
      specified with **File &gt; Options &gt; Language** in the Office host
      application.


      **Support details**


      A capital Y in the following matrix indicates that this property is
      supported in the corresponding Office host application. An empty cell
      indicates that the Office host application doesn't support this
      enumeration.


      For more information about Office host application and server
      requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!--
      -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office on
      Windows </th><th> Office in web browser </th><th> Office on iPad </th><th>
      Outlook on mobile devices </th><th> Office on Mac </th></tr>
      <tr><td><strong> Excel </strong></td><td> Y </td><td> Y </td><td> Y
      </td><td> </td><td> </td></tr> <tr><td><strong> Outlook </strong></td><td>
      Y </td><td> Y </td><td> </td><td> Y </td><td> Y </td></tr>
      <tr><td><strong> PowerPoint </strong></td><td> Y </td><td> Y </td><td> Y
      </td><td> </td><td> </td></tr> <tr><td><strong> Project </strong></td><td>
      Y </td><td> </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Word
      </strong></td><td> Y </td><td> Y </td><td> Y </td><td> </td><td>
      </td></tr> </table>


      #### Examples


      ```javascript

      function sayHelloWithContentLanguage() {
          var myContentLanguage = Office.context.contentLanguage;
          switch (myContentLanguage) {
              case 'en-US':
                  write('Hello!');
                  break;
              case 'en-NZ':
                  write('G\'day mate!');
                  break;
          }
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'contentLanguage: string;'
      return:
        type: string
  - name: diagnostics
    uid: 'office!Office.Context#diagnostics:member'
    package: office!
    fullName: diagnostics
    summary: Gets information about the environment in which the add-in is running.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'diagnostics: ContextInformation;'
      return:
        type: '<xref uid="office!Office.ContextInformation:interface" />'
        description: |-


          #### Examples

          ```javascript
          var contextInfo = Office.context.diagnostics;
          console.log("Office application: " + contextInfo.host);
          console.log("Office version: " + contextInfo.version);
          console.log("Platform: " + contextInfo.platform);
          ```
  - name: displayLanguage
    uid: 'office!Office.Context#displayLanguage:member'
    package: office!
    fullName: displayLanguage
    summary: >-
      Gets the locale (language) specified by the user for the UI of the Office
      host application.
    remarks: >-
      The returned value is a string in the RFC 1766 Language tag format, such
      as en-US.


      The `displayLanguage` value reflects the current **Display Language**
      setting specified with **File &gt; Options &gt; Language** in the Office
      host application.


      When using in Outlook, the applicable modes are Compose or Read.


      **Support details**


      A capital Y in the following matrix indicates that this property is
      supported in the corresponding Office host application. An empty cell
      indicates that the Office host application doesn't support this
      enumeration.


      For more information about Office host application and server
      requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!--
      -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office on
      Windows </th><th> Office in web browser </th><th> Office on iPad </th><th>
      Outlook on mobile devices </th><th> Office on Mac </th></tr>
      <tr><td><strong> Excel </strong></td><td> Y </td><td> Y </td><td> Y
      </td><td> </td><td> Y </td></tr> <tr><td><strong> Outlook
      </strong></td><td> Y </td><td> Y </td><td> </td><td> Y </td><td> Y
      </td></tr> <tr><td><strong> PowerPoint </strong></td><td> Y </td><td> Y
      </td><td> Y </td><td> </td><td> Y </td></tr> <tr><td><strong> Project
      </strong></td><td> Y </td><td> </td><td> </td><td> </td><td> Y </td></tr>
      <tr><td><strong> Word </strong></td><td> Y </td><td> </td><td> Y </td><td>
      </td><td> Y </td></tr> </table>


      #### Examples


      ```javascript

      function sayHelloWithDisplayLanguage() {
          var myDisplayLanguage = Office.context.displayLanguage;
          switch (myDisplayLanguage) {
              case 'en-US':
                  write('Hello!');
                  break;
              case 'en-NZ':
                  write('G\'day mate!');
                  break;
          }
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayLanguage: string;'
      return:
        type: string
  - name: document
    uid: 'office!Office.Context#document:member'
    package: office!
    fullName: document
    summary: >-
      Gets an object that represents the document the content or task pane
      add-in is interacting with.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'document: Office.Document;'
      return:
        type: '<xref uid="office!Office.Document:interface" />'
        description: |-


          #### Examples

          ```javascript
          // Extension initialization code.
          var _document;

          // The initialize function is required for all add-ins.
          Office.initialize = function () {
              // Checks for the DOM to load using the jQuery ready function.
              $(document).ready(function () {
              // After the DOM is loaded, code specific to the add-in can run.
              // Initialize instance variables to access API objects.
              _document = Office.context.document;
              });
          }
          ```
  - name: host
    uid: 'office!Office.Context#host:member'
    package: office!
    fullName: host
    summary: Contains the Office application host in which the add-in is running.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'host: HostType;'
      return:
        type: '<xref uid="office!Office.HostType:enum" />'
  - name: license
    uid: 'office!Office.Context#license:member'
    package: office!
    fullName: license
    summary: Gets the license information for the user's Office installation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'license: string;'
      return:
        type: string
  - name: mailbox
    uid: 'office!Office.Context#mailbox:member'
    package: office!
    fullName: mailbox
    summary: Provides access to the Microsoft Outlook add-in object model.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      **Key properties**:


      - `diagnostics`<!-- -->: Provides diagnostic information to an Outlook
      add-in.


      - `item`<!-- -->: Provides methods and properties for accessing a message
      or appointment in an Outlook add-in.


      - `userProfile`<!-- -->: Provides information about the user in an Outlook
      add-in.


      #### Examples


      ```javascript

      // The following line of code access the item object of the JavaScript API
      for Office.

      var item = Office.context.mailbox.item;

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'mailbox: Office.Mailbox;'
      return:
        type: '<xref uid="outlook!Office.Mailbox:interface" />'
  - name: officeTheme
    uid: 'office!Office.Context#officeTheme:member'
    package: office!
    fullName: officeTheme
    summary: Provides access to the properties for Office theme colors.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'officeTheme: OfficeTheme;'
      return:
        type: '<xref uid="office!Office.OfficeTheme:interface" />'
        description: |-


          #### Examples

          ```javascript
          function applyOfficeTheme(){
              // Get office theme colors.
              var bodyBackgroundColor = Office.context.officeTheme.bodyBackgroundColor;
              var bodyForegroundColor = Office.context.officeTheme.bodyForegroundColor;
              var controlBackgroundColor = Office.context.officeTheme.controlBackgroundColor;
              var controlForegroundColor = Office.context.officeTheme.controlForegroundColor;

              // Apply body background color to a CSS class.
              $('.body').css('background-color', bodyBackgroundColor);
          }
          ```
  - name: platform
    uid: 'office!Office.Context#platform:member'
    package: office!
    fullName: platform
    summary: Provides the platform on which the add-in is running.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'platform: PlatformType;'
      return:
        type: '<xref uid="office!Office.PlatformType:enum" />'
  - name: requirements
    uid: 'office!Office.Context#requirements:member'
    package: office!
    fullName: requirements
    summary: >-
      Provides a method for determining what requirement sets are supported on
      the current host and platform.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'requirements: RequirementSetSupport;'
      return:
        type: '<xref uid="office!Office.RequirementSetSupport:interface" />'
  - name: roamingSettings
    uid: 'office!Office.Context#roamingSettings:member'
    package: office!
    fullName: roamingSettings
    summary: >-
      Gets an object that represents the custom settings or state of a mail
      add-in saved to a user's mailbox.


      The `RoamingSettings` object lets you store and access data for a mail
      add-in that is stored in a user's mailbox, so it's available to that
      add-in when it is running from any host client application used to access
      that mailbox.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      #### Examples


      ```javascript

      // Get the current value of the 'myKey' setting.

      var value = Office.context.roamingSettings.get('myKey');

      // Update the value of the 'myKey' setting.

      Office.context.roamingSettings.set('myKey', 'Hello World!');

      // Persist the change.

      Office.context.roamingSettings.saveAsync();

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'roamingSettings: Office.RoamingSettings;'
      return:
        type: '<xref uid="outlook!Office.RoamingSettings:interface" />'
  - name: touchEnabled
    uid: 'office!Office.Context#touchEnabled:member'
    package: office!
    fullName: touchEnabled
    summary: >-
      Specifies whether the platform and device allows touch interaction. True
      if the add-in is running on a touch device, such as an iPad; false
      otherwise.
    remarks: >-
      **Hosts**: Excel, PowerPoint, Word


      `touchEnabled` is only supported in Office on iPad.


      Use the touchEnabled property to determine when your add-in is running on
      a touch device and if necessary, adjust the kind of controls, and size and
      spacing of elements in your add-in's UI to accommodate touch interactions.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'touchEnabled: boolean;'
      return:
        type: boolean
  - name: ui
    uid: 'office!Office.Context#ui:member'
    package: office!
    fullName: ui
    summary: >-
      Provides objects and methods that you can use to create and manipulate UI
      components, such as dialog boxes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ui: UI;'
      return:
        type: '<xref uid="office!Office.UI:interface" />'
