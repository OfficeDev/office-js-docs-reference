### YamlMime:TSType
name: Office.Context
uid: 'office!Office.Context:interface'
package: office!
fullName: Office.Context
summary: >-
  Represents the runtime environment of the add-in and provides access to key objects of the API. The current context
  exists as a property of Office. It's accessed using `Office.context`<!-- -->.
remarks: >-
  **Support details**


  For more information about Office application and server requirements, see [Requirements for running Office
  Add-ins](https://learn.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


  *Supported applications, by platform* <table> <tr><th> </th><th> Office on the web </th><th> Office on Windows
  </th><th> Office on Mac </th><th> Office on iPad </th><th> Outlook on mobile devices </th></tr> <tr><td><strong> Excel
  </strong></td><td> Supported </td><td> Supported </td><td> Supported </td><td> Supported </td><td> Not applicable
  </td></tr> <tr><td><strong> Outlook </strong></td><td> Supported </td><td> Supported </td><td> Supported </td><td>
  Supported </td><td> Supported </td></tr> <tr><td><strong> PowerPoint </strong></td><td> Supported </td><td> Supported
  </td><td> Supported </td><td> Supported </td><td> Not applicable </td></tr> <tr><td><strong> Project
  </strong></td><td> Not supported </td><td> Supported </td><td> Supported </td><td> Not supported </td><td> Not
  applicable </td></tr> <tr><td><strong> Word </strong></td><td> Supported </td><td> Supported </td><td> Supported
  </td><td> Supported </td><td> Not applicable </td></tr> </table>
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: auth
    uid: 'office!Office.Context#auth:member'
    package: office!
    fullName: auth
    summary: Provides information and access to the signed-in user.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'auth: Auth;'
      return:
        type: '<xref uid="office!Office.Auth:interface" />'
  - name: commerceAllowed
    uid: 'office!Office.Context#commerceAllowed:member'
    package: office!
    fullName: commerceAllowed
    summary: 'True, if the current platform allows the add-in to display a UI for selling or upgrading; otherwise returns False.'
    remarks: >-
      **Applications**: Excel, Word


      `commerceAllowed` is only supported in Office on iPad.


      The iOS App Store doesn't support apps with add-ins that provide links to additional payment systems. However,
      Office Add-ins running in Office on the Windows desktop or in the browser do allow such links. If you want the UI
      of your add-in to provide a link to an external payment system on platforms other than iOS, you can use the
      commerceAllowed property to control when that link is displayed.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'commerceAllowed: boolean;'
      return:
        type: boolean
  - name: contentLanguage
    uid: 'office!Office.Context#contentLanguage:member'
    package: office!
    fullName: contentLanguage
    summary: Gets the locale (language) specified by the user for editing the document or item.
    remarks: >-
      The `contentLanguage` value reflects the **Editing Language** setting specified with **File** &gt;
      **Options** &gt; **Language** in the Office application.


      **Support details**


      For more information about Office application and server requirements, see [Requirements for running Office
      Add-ins](https://learn.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported applications, by platform* <table> <tr><th> </th><th> Office on the web </th><th> Office on Windows
      </th><th> Office on Mac </th><th> Office on iPad </th><th> Outlook on mobile devices </th></tr> <tr><td><strong>
      Excel </strong></td><td> Supported </td><td> Supported </td><td> Not supported </td><td> Supported </td><td> Not
      applicable </td></tr> <tr><td><strong> Outlook </strong></td><td> Supported </td><td> Supported </td><td>
      Supported </td><td> Supported </td><td> Supported </td></tr> <tr><td><strong> PowerPoint </strong></td><td>
      Supported </td><td> Supported </td><td> Not supported </td><td> Supported </td><td> Not applicable </td></tr>
      <tr><td><strong> Project </strong></td><td> Not supported </td><td> Supported </td><td> Not supported </td><td>
      Not supported </td><td> Not applicable </td></tr> <tr><td><strong> Word </strong></td><td> Supported </td><td>
      Supported </td><td> Not supported </td><td> Supported </td><td> Not applicable </td></tr> </table>


      #### Examples


      ```TypeScript

      function sayHelloWithContentLanguage() {
          const myContentLanguage = Office.context.contentLanguage;
          switch (myContentLanguage) {
              case 'en-US':
                  write('Hello!');
                  break;
              case 'en-NZ':
                  write('G\'day mate!');
                  break;
          }
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'contentLanguage: string;'
      return:
        type: string
  - name: diagnostics
    uid: 'office!Office.Context#diagnostics:member'
    package: office!
    fullName: diagnostics
    summary: Gets information about the environment in which the add-in is running.
    remarks: >-
      **Important**: In Outlook, this property is available from Mailbox requirement set 1.5. For all Mailbox
      requirement sets, you can use the
      [Office.context.mailbox.diagnostics](https://learn.microsoft.com/javascript/api/outlook/office.mailbox?view=outlook-js-preview&preserve-view=true#outlook-office-mailbox-diagnostics-member)
      property to get similar information.


      #### Examples


      ```TypeScript

      const contextInfo = Office.context.diagnostics;

      console.log("Office application: " + contextInfo.host);

      console.log("Office version: " + contextInfo.version);

      console.log("Platform: " + contextInfo.platform);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'diagnostics: ContextInformation;'
      return:
        type: '<xref uid="office!Office.ContextInformation:interface" />'
  - name: displayLanguage
    uid: 'office!Office.Context#displayLanguage:member'
    package: office!
    fullName: displayLanguage
    summary: Gets the locale (language) specified by the user for the UI of the Office application.
    remarks: >-
      The returned value is a string in the RFC 1766 Language tag format, such as en-US.


      The `displayLanguage` value reflects the current **Display Language** setting specified with **File** &gt;
      **Options** &gt; **Language** in the Office application.


      When using in Outlook, the applicable modes are Compose or Read.


      **Support details**


      For more information about Office application and server requirements, see [Requirements for running Office
      Add-ins](https://learn.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported applications, by platform* <table> <tr><th> </th><th> Office on the web </th><th> Office on Windows
      </th><th> Office on Mac </th><th> Office on iPad </th><th> Outlook on mobile devices </th></tr> <tr><td><strong>
      Excel </strong></td><td> Supported </td><td> Supported </td><td> Supported </td><td> Supported </td><td> Not
      applicable </td></tr> <tr><td><strong> Outlook </strong></td><td> Supported </td><td> Supported </td><td>
      Supported </td><td> Supported </td><td> Supported </td></tr> <tr><td><strong> PowerPoint </strong></td><td>
      Supported </td><td> Supported </td><td> Supported </td><td> Supported </td><td> Not applicable </td></tr>
      <tr><td><strong> Project </strong></td><td> Not supported </td><td> Supported </td><td> Supported </td><td> Not
      supported </td><td> Not applicable </td></tr> <tr><td><strong> Word </strong></td><td> Not supported </td><td>
      Supported </td><td> Supported </td><td> Supported </td><td> Not applicable </td></tr> </table>


      #### Examples


      ```TypeScript

      function sayHelloWithDisplayLanguage() {
          const myDisplayLanguage = Office.context.displayLanguage;
          switch (myDisplayLanguage) {
              case 'en-US':
                  write('Hello!');
                  break;
              case 'en-NZ':
                  write('G\'day mate!');
                  break;
          }
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayLanguage: string;'
      return:
        type: string
  - name: document
    uid: 'office!Office.Context#document:member'
    package: office!
    fullName: document
    summary: Gets an object that represents the document the content or task pane add-in is interacting with.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'document: Office.Document;'
      return:
        type: '<xref uid="office!Office.Document:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          // Extension initialization code.
          let _document;

          // The initialize function is required for all add-ins.
          Office.initialize = function () {
              // Checks for the DOM to load using the jQuery ready method.
              $(document).ready(function () {
              // After the DOM is loaded, code specific to the add-in can run.
              // Initialize instance variables to access API objects.
              _document = Office.context.document;
              });
          }
          ```
  - name: host
    uid: 'office!Office.Context#host:member'
    package: office!
    fullName: host
    summary: Contains the Office application in which the add-in is running.
    remarks: >-
      **Important**: In Outlook, this property is available from Mailbox requirement set 1.5. You can also use the
      `Office.context.diagnostics` property to get the application starting with requirement set 1.5. For all Mailbox
      requirement sets, you can use the
      [Office.context.mailbox.diagnostics](https://learn.microsoft.com/javascript/api/outlook/office.mailbox?view=outlook-js-preview&preserve-view=true#outlook-office-mailbox-diagnostics-member)
      property to get similar information.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'host: HostType;'
      return:
        type: '<xref uid="office!Office.HostType:enum" />'
  - name: license
    uid: 'office!Office.Context#license:member'
    package: office!
    fullName: license
    summary: Gets the license information for the user's Office installation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'license: string;'
      return:
        type: string
  - name: mailbox
    uid: 'office!Office.Context#mailbox:member'
    package: office!
    fullName: mailbox
    summary: Provides access to the Microsoft Outlook add-in object model.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      **Key properties**:


      - `diagnostics`<!-- -->: Provides diagnostic information to an Outlook add-in.


      - `item`<!-- -->: Provides methods and properties for accessing a message or appointment in an Outlook add-in.


      - `userProfile`<!-- -->: Provides information about the user in an Outlook add-in.


      #### Examples


      ```TypeScript

      // The following line of code access the item object of the JavaScript API for Office.

      const item = Office.context.mailbox.item;

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'mailbox: Office.Mailbox;'
      return:
        type: '<xref uid="outlook!Office.Mailbox:interface" />'
  - name: officeTheme
    uid: 'office!Office.Context#officeTheme:member'
    package: office!
    fullName: officeTheme
    summary: Provides access to the properties for Office theme colors.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'officeTheme: OfficeTheme;'
      return:
        type: '<xref uid="office!Office.OfficeTheme:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          function applyOfficeTheme(){
              // Get office theme colors.
              const bodyBackgroundColor = Office.context.officeTheme.bodyBackgroundColor;
              const bodyForegroundColor = Office.context.officeTheme.bodyForegroundColor;
              const controlBackgroundColor = Office.context.officeTheme.controlBackgroundColor;
              const controlForegroundColor = Office.context.officeTheme.controlForegroundColor;

              // Apply body background color to a CSS class.
              $('.body').css('background-color', bodyBackgroundColor);
          }
          ```
  - name: partitionKey
    uid: 'office!Office.Context#partitionKey:member'
    package: office!
    fullName: partitionKey
    summary: >-
      Gets a partition key for local storage. Add-ins should use this partition key as part of the storage key to
      securely store data. The partition key is `undefined` in environments without partitioning, such as the browser
      controls for Windows applications.
    remarks: >-
      See the article [Persist add-in state and
      settings](https://learn.microsoft.com/office/dev/add-ins/develop/persisting-add-in-state-and-settings) for more
      information.


      #### Examples


      ```TypeScript

      // Store the value "Hello" in local storage with the key "myKey1".

      setInLocalStorage("myKey1", "Hello");


      // ... 


      // Retrieve the value stored in local storage under the key "myKey1".

      const message = getFromLocalStorage("myKey1");

      console.log(message);


      // ...


      function setInLocalStorage(key: string, value: string) {
          const myPartitionKey = Office.context.partitionKey;

          // Check if local storage is partitioned. 
          // If so, use the partition to ensure the data is only accessible by your add-in.
          if (myPartitionKey) {
              localStorage.setItem(myPartitionKey + key, value);
          } else {
              localStorage.setItem(key, value);
          }
      }


      function getFromLocalStorage(key: string) {
          const myPartitionKey = Office.context.partitionKey;

          // Check if local storage is partitioned.
          if (myPartitionKey) {
              return localStorage.getItem(myPartitionKey + key);
          } else {
              return localStorage.getItem(key);
          }
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'partitionKey: string;'
      return:
        type: string
  - name: platform
    uid: 'office!Office.Context#platform:member'
    package: office!
    fullName: platform
    summary: Provides the platform on which the add-in is running.
    remarks: >-
      **Important**:


      - In Outlook, this property is available from Mailbox requirement set 1.5. You can also use the
      `Office.context.diagnostics` property to get the platform starting with requirement set 1.5. For all Mailbox
      requirement sets, you can use the
      [Office.context.mailbox.diagnostics](https://learn.microsoft.com/javascript/api/outlook/office.mailbox?view=outlook-js-preview&preserve-view=true#outlook-office-mailbox-diagnostics-member)
      property to get similar information.


      - In Outlook, `OfficeOnline` is returned if an add-is is running in Outlook on the web or in [new Outlook on
      Windows (preview)](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627)<!-- -->.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'platform: PlatformType;'
      return:
        type: '<xref uid="office!Office.PlatformType:enum" />'
  - name: requirements
    uid: 'office!Office.Context#requirements:member'
    package: office!
    fullName: requirements
    summary: >-
      Provides a method for determining what requirement sets are supported on the current Office application and
      platform.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'requirements: RequirementSetSupport;'
      return:
        type: '<xref uid="office!Office.RequirementSetSupport:interface" />'
  - name: roamingSettings
    uid: 'office!Office.Context#roamingSettings:member'
    package: office!
    fullName: roamingSettings
    summary: >-
      Gets an object that represents the custom settings or state of a mail add-in saved to a user's mailbox.


      The `RoamingSettings` object lets you store and access data for a mail add-in that is stored in a user's mailbox,
      so it's available to that add-in when it is running from any client application used to access that mailbox.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      #### Examples


      ```TypeScript

      // Get the current value of the 'myKey' setting.

      const value = Office.context.roamingSettings.get('myKey');

      // Update the value of the 'myKey' setting.

      Office.context.roamingSettings.set('myKey', 'Hello World!');

      // Persist the change.

      Office.context.roamingSettings.saveAsync();

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'roamingSettings: Office.RoamingSettings;'
      return:
        type: '<xref uid="outlook!Office.RoamingSettings:interface" />'
  - name: sensitivityLabelsCatalog
    uid: 'office!Office.Context#sensitivityLabelsCatalog:member'
    package: office!
    fullName: sensitivityLabelsCatalog
    summary: >-
      Gets the object to check the status of the catalog of sensitivity labels in Outlook and retrieve all available
      sensitivity labels if the catalog is enabled.
    remarks: >-
      \[ [API set: Mailbox 1.13](/office/dev/add-ins/reference/javascript-api-for-office) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      #### Examples


      ```TypeScript

      // Check if the catalog of sensitivity labels is enabled on the current mailbox.

      Office.context.sensitivityLabelsCatalog.getIsEnabledAsync((asyncResult) => {
          // If the catalog is enabled, get all available sensitivity labels.
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded && asyncResult.value == true) {
              Office.context.sensitivityLabelsCatalog.getAsync((asyncResult) => {
                  if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                      const catalog = asyncResult.value;
                      console.log("Sensitivity Labels Catalog:");
                      console.log(JSON.stringify(catalog));
                  } else {
                      console.log("Action failed with error: " + asyncResult.error.message);
                  }
              });
          } else {
              console.log("Action failed with error: " + asyncResult.error.message);
          }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sensitivityLabelsCatalog: Office.SensitivityLabelsCatalog;'
      return:
        type: '<xref uid="outlook!Office.SensitivityLabelsCatalog:interface" />'
  - name: touchEnabled
    uid: 'office!Office.Context#touchEnabled:member'
    package: office!
    fullName: touchEnabled
    summary: >-
      Specifies whether the platform and device allows touch interaction. True if the add-in is running on a touch
      device, such as an iPad; false otherwise.
    remarks: >-
      **Applications**: Excel, PowerPoint, Word


      `touchEnabled` is only supported in Office on iPad.


      Use the touchEnabled property to determine when your add-in is running on a touch device and if necessary, adjust
      the kind of controls, and size and spacing of elements in your add-in's UI to accommodate touch interactions.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'touchEnabled: boolean;'
      return:
        type: boolean
  - name: ui
    uid: 'office!Office.Context#ui:member'
    package: office!
    fullName: ui
    summary: 'Provides objects and methods that you can use to create and manipulate UI components, such as dialog boxes.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ui: UI;'
      return:
        type: '<xref uid="office!Office.UI:interface" />'
  - name: urls
    uid: 'office!Office.Context#urls:member'
    package: office!
    fullName: urls
    summary: Gets the object to retrieve the runtime URLs of an add-in.
    remarks: >-
      \[ [API set: Mailbox preview](/office/dev/add-ins/reference/javascript-api-for-office) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose or Read


      #### Examples


      ```TypeScript

      // Get the value of the first parameter of the JavaScript runtime URL.

      // For example, if the URL is https://wwww.contoso.com/training?key1=value1&key2=value2,

      // the following function logs "First parameter value: value1" to the console.

      const url = Office.context.urls.javascriptRuntimeUrl;

      const regex = /=([^&]+)/;

      console.log(`First parameter value: ${url.match(regex)[1]}`);

      ```
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'urls: Urls;'
      return:
        type: '<xref uid="office!Office.Urls:interface" />'
