### YamlMime:TSType
name: Office.CustomXmlPart
uid: 'office!Office.CustomXmlPart:interface'
package: office!
fullName: Office.CustomXmlPart
summary: >-
  Represents a single CustomXMLPart in an
  [Office.CustomXmlParts](xref:office!Office.CustomXmlParts:interface)
  collection.
remarks: '**Hosts**: Word'
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: builtIn
    uid: 'office!Office.CustomXmlPart#builtIn:member'
    package: office!
    fullName: builtIn
    summary: 'True, if the custom XML part is built in; otherwise false.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'builtIn: boolean;'
      return:
        type: boolean
        description: |-


          #### Examples

          ```javascript
          function showXMLPartBuiltIn() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.builtIn);
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - name: id
    uid: 'office!Office.CustomXmlPart#id:member'
    package: office!
    fullName: id
    summary: Gets the GUID of the CustomXMLPart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```javascript
          function showXMLPartBuiltId() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.id);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - name: namespaceManager
    uid: 'office!Office.CustomXmlPart#namespaceManager:member'
    package: office!
    fullName: namespaceManager
    summary: >-
      Gets the set of namespace prefix mappings
      ([Office.CustomXmlPrefixMappings](xref:office!Office.CustomXmlPrefixMappings:interface)<!--
      -->) used against the current CustomXmlPart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'namespaceManager: CustomXmlPrefixMappings;'
      return:
        type: '<xref uid="office!Office.CustomXmlPrefixMappings:interface" />'
        description: |-


          #### Examples

          ```javascript
          function setXMLPartNamespaceManagerNamespace() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.namespaceManager.addNamespaceAsync("myPrefix", "myNamespace");
              });
          }
          ```
methods:
  - name: 'addHandlerAsync(eventType, handler, options, callback)'
    uid: 'office!Office.CustomXmlPart#addHandlerAsync:member(1)'
    package: office!
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    summary: Adds an event handler to the object using the specified event type.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      You can add multiple event handlers for the specified eventType as long as
      the name of each event handler function is unique.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: (result: any) =>
        void, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<void>) => void): void;
      parameters:
        - id: eventType
          description: >-
            Specifies the type of event to add. For a CustomXmlPart object, the
            eventType parameter can be specified as
            `Office.EventType.NodeDeleted`<!-- -->,
            `Office.EventType.NodeInserted`<!-- -->, and
            `Office.EventType.NodeReplaced`<!-- -->.
          type: '<xref uid="office!Office.EventType:enum" />'
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of type
            [Office.NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)<!--
            -->,
            [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)<!--
            -->, or
            [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)
          type: '(result: any) =&gt; void'
        - id: options
          description: >-
            Provides an option for preserving context data of any type,
            unchanged, for use in a callback.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;void&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'addHandlerAsync(eventType, handler, callback)'
    uid: 'office!Office.CustomXmlPart#addHandlerAsync:member(2)'
    package: office!
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    summary: Adds an event handler to the object using the specified event type.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      You can add multiple event handlers for the specified eventType as long as
      the name of each event handler function is unique.


      #### Examples


      ```javascript

      // To add an event handler for the NodeDeleted event, use the
      addHandlerAsync method of the CustomXmlPart object.

      function addNodeDeletedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                  write("A node has been deleted.");
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message;
      }

      ```

      ```javascript

      // To add an event handler for the NodeInserted event, use the
      addHandlerAsync method of the CustomXmlPart object.

      function addNodeInsertedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                  write("A node has been inserted.");
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message;
      }

      ```

      ```javascript

      // To add an event handler for the NodeReplaced event, use the
      addHandlerAsync method of the CustomXmlPart object.

      function addNodeReplacedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                  write("A node has been replaced.");
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message;
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: (result: any) =>
        void, callback?: (result: AsyncResult<void>) => void): void;
      parameters:
        - id: eventType
          description: >-
            Specifies the type of event to add. For a CustomXmlPart object, the
            eventType parameter can be specified as
            `Office.EventType.NodeDeleted`<!-- -->,
            `Office.EventType.NodeInserted`<!-- -->, and
            `Office.EventType.NodeReplaced`<!-- -->.
          type: '<xref uid="office!Office.EventType:enum" />'
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of type
            [Office.NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)<!--
            -->,
            [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)<!--
            -->, or
            [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)
          type: '(result: any) =&gt; void'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;void&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'deleteAsync(options, callback)'
    uid: 'office!Office.CustomXmlPart#deleteAsync:member(1)'
    package: office!
    fullName: 'deleteAsync(options, callback)'
    summary: Deletes the Custom XML Part.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        deleteAsync(options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<void>) => void): void;
      parameters:
        - id: options
          description: >-
            Provides an option for preserving context data of any type,
            unchanged, for use in a callback.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;void&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: deleteAsync(callback)
    uid: 'office!Office.CustomXmlPart#deleteAsync:member(2)'
    package: office!
    fullName: deleteAsync(callback)
    summary: Deletes the Custom XML Part.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function deleteXMLPart() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.deleteAsync(function (eventArgs) {
                  write("The XML Part has been deleted.");
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'deleteAsync(callback?: (result: AsyncResult<void>) => void): void;'
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;void&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'getNodesAsync(xPath, options, callback)'
    uid: 'office!Office.CustomXmlPart#getNodesAsync:member(1)'
    package: office!
    fullName: 'getNodesAsync(xPath, options, callback)'
    summary: >-
      Asynchronously gets any CustomXmlNodes in this custom XML part which match
      the specified XPath.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getNodesAsync(xPath: string, options?: Office.AsyncContextOptions,
        callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;
      parameters:
        - id: xPath
          description: >-
            An XPath expression that specifies the nodes you want returned.
            Required.
          type: string
        - id: options
          description: >-
            Provides an option for preserving context data of any type,
            unchanged, for use in a callback.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->. The `value` property of the result is an array of CustomXmlNode
            objects that represent the nodes specified by the XPath expression
            passed to the xPath parameter.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref
            uid="office!Office.CustomXmlNode:interface" />[]&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'getNodesAsync(xPath, callback)'
    uid: 'office!Office.CustomXmlPart#getNodesAsync:member(2)'
    package: office!
    fullName: 'getNodesAsync(xPath, callback)'
    summary: >-
      Asynchronously gets any CustomXmlNodes in this custom XML part which match
      the specified XPath.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function showXmlNodeType() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.nodeType);
                  }
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getNodesAsync(xPath: string, callback?: (result:
        AsyncResult<CustomXmlNode[]>) => void): void;
      parameters:
        - id: xPath
          description: >-
            An XPath expression that specifies the nodes you want returned.
            Required.
          type: string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->. The `value` property of the result is an array of CustomXmlNode
            objects that represent the nodes specified by the XPath expression
            passed to the xPath parameter.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref
            uid="office!Office.CustomXmlNode:interface" />[]&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'getXmlAsync(options, callback)'
    uid: 'office!Office.CustomXmlPart#getXmlAsync:member(1)'
    package: office!
    fullName: 'getXmlAsync(options, callback)'
    summary: Asynchronously gets the XML inside this custom XML part.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<string>) => void): void;
      parameters:
        - id: options
          description: >-
            Provides an option for preserving context data of any type,
            unchanged, for use in a callback.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->. The `value` property of the result is a string that contains
            the XML of the referenced CustomXmlPart object.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;string&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: getXmlAsync(callback)
    uid: 'office!Office.CustomXmlPart#getXmlAsync:member(2)'
    package: office!
    fullName: getXmlAsync(callback)
    summary: Asynchronously gets the XML inside this custom XML part.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function showXMLPartInnerXML() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getXmlAsync(function (eventArgs) {
                  write(eventArgs.value);
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->. The `value` property of the result is a string that contains
            the XML of the referenced CustomXmlPart object.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;string&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'removeHandlerAsync(eventType, handler, options, callback)'
    uid: 'office!Office.CustomXmlPart#removeHandlerAsync:member(1)'
    package: office!
    fullName: 'removeHandlerAsync(eventType, handler, options, callback)'
    summary: Removes an event handler for the specified event type.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType, handler?: (result: any)
        => void, options?: RemoveHandlerOptions, callback?: (result:
        AsyncResult<void>) => void): void;
      parameters:
        - id: eventType
          description: >-
            Specifies the type of event to remove. For a CustomXmlPart object,
            the eventType parameter can be specified as
            `Office.EventType.NodeDeleted`<!-- -->,
            `Office.EventType.NodeInserted`<!-- -->, and
            `Office.EventType.NodeReplaced`<!-- -->.
          type: '<xref uid="office!Office.EventType:enum" />'
        - id: handler
          description: The name of the handler to remove.
          type: '(result: any) =&gt; void'
        - id: options
          description: >-
            Provides options to determine which event handler or handlers are
            removed.
          type: '<xref uid="office!Office.RemoveHandlerOptions:interface" />'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;void&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'removeHandlerAsync(eventType, handler, callback)'
    uid: 'office!Office.CustomXmlPart#removeHandlerAsync:member(2)'
    package: office!
    fullName: 'removeHandlerAsync(eventType, handler, callback)'
    summary: Removes an event handler for the specified event type.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function removeNodeInsertedEventHandler() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
              function (result) {
                  var xmlPart = result.value;
                  xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
          });
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType, handler?: (result: any)
        => void, callback?: (result: AsyncResult<void>) => void): void;
      parameters:
        - id: eventType
          description: >-
            Specifies the type of event to remove. For a CustomXmlPart object,
            the eventType parameter can be specified as
            `Office.EventType.NodeDeleted`<!-- -->,
            `Office.EventType.NodeInserted`<!-- -->, and
            `Office.EventType.NodeReplaced`<!-- -->.
          type: '<xref uid="office!Office.EventType:enum" />'
        - id: handler
          description: The name of the handler to remove.
          type: '(result: any) =&gt; void'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;void&gt;) =&gt; void
      return:
        type: void
        description: ''
