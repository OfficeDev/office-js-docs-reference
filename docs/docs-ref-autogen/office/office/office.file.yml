### YamlMime:TSType
name: Office.File
uid: 'office!Office.File:interface'
package: office!
fullName: Office.File
summary: Represents the document file associated with an Office Add-in.
remarks: >-
  Access the File object with the AsyncResult.value property in the callback
  function passed to the Document.getFileAsync method.
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: size
    uid: 'office!Office.File#size:member'
    package: office!
    fullName: size
    summary: Gets the document file size in bytes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'size: number;'
      return:
        type: number
  - name: sliceCount
    uid: 'office!Office.File#sliceCount:member'
    package: office!
    fullName: sliceCount
    summary: Gets the number of slices into which the file is divided.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sliceCount: number;'
      return:
        type: number
methods:
  - name: closeAsync(callback)
    uid: 'office!Office.File#closeAsync:member(1)'
    package: office!
    fullName: closeAsync(callback)
    summary: Closes the document file.
    remarks: >-
      **Requirement set**:
      [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


      No more than two documents are allowed to be in memory; otherwise the
      Document.getFileAsync operation will fail. Use the File.closeAsync method
      to close the file when you are finished working with it.


      In the callback function passed to the closeAsync method, you can use the
      properties of the AsyncResult object to return the following information.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr>
      <td>AsyncResult.value</td> <td>Always returns undefined because there is
      no object or data to retrieve.</td> </tr> <tr> <td>AsyncResult.status</td>
      <td>Determine the success or failure of the operation.</td> </tr> <tr>
      <td>AsyncResult.error</td> <td>Access an Error object that provides error
      information if the operation failed.</td> </tr> <tr>
      <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that
      is returned in the AsyncResult object without being altered.</td> </tr>
      </table>
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'closeAsync(callback?: (result: AsyncResult<void>) => void): void;'
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;void&gt;) =&gt; void
      return:
        type: void
        description: ''
  - name: 'getSliceAsync(sliceIndex, callback)'
    uid: 'office!Office.File#getSliceAsync:member(1)'
    package: office!
    fullName: 'getSliceAsync(sliceIndex, callback)'
    summary: Returns the specified slice.
    remarks: >-
      **Requirement set**:
      [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


      In the callback function passed to the getSliceAsync method, you can use
      the properties of the AsyncResult object to return the following
      information.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr>
      <td>AsyncResult.value</td> <td>Access the Slice object.</td> </tr> <tr>
      <td>AsyncResult.status</td> <td>Determine the success or failure of the
      operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an Error
      object that provides error information if the operation failed.</td> </tr>
      <tr> <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type
      that is returned in the AsyncResult object without being altered.</td>
      </tr> </table>


      #### Examples


      ```typescript

      // This sample shows how to get all the slices of a file. 

      // The asynchronous operation returns a Promise so it can be awaited.

      private getAllSlices(file: any): Promise<any> {
          var self = this;
          var isError = false;

          return new Promise(async (resolve, reject) => {
              var documentFileData = [];
              for (var sliceIndex = 0; (sliceIndex < file.sliceCount) && !isError; sliceIndex++) {
                  var sliceReadPromise = new Promise((sliceResolve, sliceReject) => {
                      file.getSliceAsync(sliceIndex, (asyncResult) => {
                          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                              documentFileData = documentFileData.concat(asyncResult.value.data);
                              sliceResolve({
                                  IsSuccess: true,
                                  Data: documentFileData
                              });
                          } else {
                              file.closeAsync();
                              sliceReject({
                                  IsSuccess: false,
                                  ErrorMessage: `Error in reading the slice: ${sliceIndex} of the document`
                              });
                          }
                      });
                  });
                  await sliceReadPromise.catch((error) => {
                      isError = true;
                  });
              }

              if (isError || !documentFileData.length) {
                  reject('Error while reading document. Please try it again.');
                  return;
              }

              file.closeAsync();

              resolve({
                  IsSuccess: true,
                  Data: documentFileData
              });
          });
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getSliceAsync(sliceIndex: number, callback?: (result:
        AsyncResult<Office.Slice>) => void): void;
      parameters:
        - id: sliceIndex
          description: >-
            Specifies the zero-based index of the slice to be retrieved.
            Required.
          type: number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->. The `value` property of the result is the
            [Office.Slice](xref:office!Office.Slice:interface) object.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref
            uid="office!Office.Slice:interface" />&gt;) =&gt; void
      return:
        type: void
        description: ''
