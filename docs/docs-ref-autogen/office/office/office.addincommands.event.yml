### YamlMime:UniversalReference
items:
  - uid: 'office!Office.AddinCommands.Event:interface'
    summary: >-
      The `Event` object is passed as a parameter to add-in functions invoked by UI-less command buttons. The object
      allows the add-in to identify which button was clicked and to signal the host that it has completed its
      processing.
    remarks: >-
      See [Add-in commands requirement
      sets](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets)
      for more support information.


      **[Minimum permission level
      (Outlook)](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: Restricted


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read
    name: Office.AddinCommands.Event
    fullName: Office.AddinCommands.Event
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.AddinCommands.Event#completed:member(1)'
      - 'office!Office.AddinCommands.Event#source:member'
  - uid: 'office!Office.AddinCommands.Event#completed:member(1)'
    summary: >-
      Indicates that the add-in has completed processing and will automatically be closed.


      This method must be called at the end of a function which was invoked by the following.


      - A UI-less button (i.e., an add-in command defined with an `Action` element where the `xsi:type` attribute is set
      to `ExecuteFunction`<!-- -->)


      - An [event](https://docs.microsoft.com/office/dev/add-ins/reference/manifest/event) defined in the [Events
      extension point](https://docs.microsoft.com/office/dev/add-ins/reference/manifest/extensionpoint#events)<!-- -->,
      e.g., an `ItemSend` event


      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/javascript-api-for-office) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      **Note**: The `options` parameter was introduced in Mailbox 1.8.


      #### Examples


      ```javascript

      // For the following example, the processItem function is

      // defined in the FunctionFile referenced from the add-in manifest,

      // and maps to the FunctionName of the action in the associated button control.

      function processItem(event) {
          // Do some processing

          event.completed();
      }

      ```

      ```javascript

      // For the following example, the checkMessage function was

      // registered as an event handler for ItemSend.

      function checkMessage(event) {
          // Get the item being sent.
          var outgoingMsg = Office.context.mailbox.item;

          // Check if subject contains "BLOCK".
          outgoingMsg.subject.getAsync(function (result) {
              // Subject is in `result.value`.
              // If search term "BLOCK" is found, don't send message.
              const notFound = -1;
              var allowEvent = (result.value.indexOf('BLOCK') === notFound);
              event.completed({allowEvent: allowEvent});
          });
      }

      ```
    name: completed(options)
    fullName: completed(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'completed(options?: EventCompletedOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Optional. An object that specifies behavior options for when the event is completed.
          type:
            - 'office!Office.AddinCommands.EventCompletedOptions:interface'
  - uid: 'office!Office.AddinCommands.Event#source:member'
    summary: Information about the control that triggered calling this function.
    remarks: >-
      This property is supported in Outlook only in [requirement
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)
      Mailbox 1.3 and later.


      #### Examples


      ```javascript

      // In this example, consider a button defined in an add-in manifest as follows:

      //<Control xsi:type="Button" id="eventTestButton">

      //    <Label resid="eventButtonLabel" />

      //    <Tooltip resid="eventButtonTooltip" />

      //    <Supertip>

      //        <Title resid="eventSuperTipTitle" />

      //        <Description resid="eventSuperTipDescription" />

      //    </Supertip>

      //    <Icon>

      //        <bt:Image size="16" resid="blue-icon-16" />

      //        <bt:Image size="32" resid="blue-icon-32" />

      //        <bt:Image size="80" resid="blue-icon-80" />

      //    </Icon>

      //    <Action xsi:type="ExecuteFunction">

      //        <FunctionName>testEventObject</FunctionName>

      //    </Action>

      //</Control>


      // The button has an id attribute set to eventTestButton, and will invoke

      // the testEventObject function defined in the add-in.

      // That function looks like this:

      function testEventObject(event) {
          // The event object implements the Event interface.

          // This value will be "eventTestButton".
          var buttonId = event.source.id;

          // Signal to the host app that processing is complete.
          event.completed();
      }

      ```

      ```javascript

      // Function is used by two buttons:

      // button1 and button2

      function multiButton (event) {
          // Check which button was clicked.
          var buttonId = event.source.id;

          if (buttonId === 'button1') {
              doButton1Action();
          } else {
              doButton2Action();
          }

          event.completed();
      }

      ```
    name: source
    fullName: source
    langs:
      - typeScript
    type: property
    syntax:
      content: 'source:Source;'
      return:
        type:
          - 'office!Office.AddinCommands.Source:interface'
references:
  - uid: 'office!Office.AddinCommands.EventCompletedOptions:interface'
    name: EventCompletedOptions
  - uid: 'office!Office.AddinCommands.Source:interface'
    name: Source
