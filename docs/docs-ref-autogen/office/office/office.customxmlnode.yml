### YamlMime:UniversalReference
items:
  - uid: 'office!Office.CustomXmlNode:interface'
    summary: Represents an XML node in a tree in a document.
    remarks: '**Hosts**: Word'
    name: CustomXmlNode
    fullName: Office.CustomXmlNode
    langs:
      - typeScript
    namespace: 'office!Office:namespace'
    type: interface
    package: office!
    children:
      - 'office!Office.CustomXmlNode#baseName:member'
      - 'office!Office.CustomXmlNode#getNodesAsync:member(1)'
      - 'office!Office.CustomXmlNode#getNodesAsync:member(2)'
      - 'office!Office.CustomXmlNode#getNodeValueAsync:member(1)'
      - 'office!Office.CustomXmlNode#getNodeValueAsync:member(2)'
      - 'office!Office.CustomXmlNode#getTextAsync:member(1)'
      - 'office!Office.CustomXmlNode#getTextAsync:member(2)'
      - 'office!Office.CustomXmlNode#getXmlAsync:member(1)'
      - 'office!Office.CustomXmlNode#getXmlAsync:member(2)'
      - 'office!Office.CustomXmlNode#namespaceUri:member'
      - 'office!Office.CustomXmlNode#nodeType:member'
      - 'office!Office.CustomXmlNode#setNodeValueAsync:member(1)'
      - 'office!Office.CustomXmlNode#setNodeValueAsync:member(2)'
      - 'office!Office.CustomXmlNode#setTextAsync:member(1)'
      - 'office!Office.CustomXmlNode#setTextAsync:member(2)'
      - 'office!Office.CustomXmlNode#setXmlAsync:member(1)'
      - 'office!Office.CustomXmlNode#setXmlAsync:member(2)'
  - uid: 'office!Office.CustomXmlNode#baseName:member'
    summary: 'Gets the base name of the node without the namespace prefix, if one exists.'
    name: baseName
    fullName: baseName
    langs:
      - typeScript
    type: property
    syntax:
      content: 'baseName: string;'
      return:
        type:
          - string
        description: |-


          #### Examples

          ```javascript
          function showXmlNodeBaseNames() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.getNodesAsync('*/*', function (nodeResults) {
                      for (i = 0; i < nodeResults.value.length; i++) {
                          var node = nodeResults.value[i];
                          write(node.baseName);
                      }
                  });
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlNode#getNodesAsync:member(1)'
    summary: Gets the nodes associated with the XPath expression.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'getNodesAsync(xPath, options, callback)'
    fullName: 'getNodesAsync(xPath, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<CustomXmlNode[]>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: The XPath expression that specifies the nodes to get. Required.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to
            the `xPath` parameter.
          type:
            - 'office!Office.CustomXmlNode#getNodesAsync~0:complex'
  - uid: 'office!Office.CustomXmlNode#getNodesAsync:member(2)'
    summary: Gets the nodes associated with the XPath expression.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function showXmlChildNodes() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      node.getNodesAsync('*', function (nodeResults) {
                          write(nodeResults.value.length + " childNodes");
                      });
                  }
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'getNodesAsync(xPath, callback)'
    fullName: 'getNodesAsync(xPath, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: The XPath expression that specifies the nodes to get. Required.
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to
            the `xPath` parameter.
          type:
            - 'office!Office.CustomXmlNode#getNodesAsync~1:complex'
  - uid: 'office!Office.CustomXmlNode#getNodeValueAsync:member(1)'
    summary: Gets the node value.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'getNodeValueAsync(options, callback)'
    fullName: 'getNodeValueAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodeValueAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is a string that contains the value of the referenced node.
          type:
            - 'office!Office.CustomXmlNode#getNodeValueAsync~0:complex'
  - uid: 'office!Office.CustomXmlNode#getNodeValueAsync:member(2)'
    summary: Gets the node value.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function showXmlNodeValues() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      node.getNodeValueAsync(function (asyncResult) {
                          write(asyncResult.value);
                      });
                  }
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: getNodeValueAsync(callback)
    fullName: getNodeValueAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodeValueAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is a string that contains the value of the referenced node.
          type:
            - 'office!Office.CustomXmlNode#getNodeValueAsync~1:complex'
  - uid: 'office!Office.CustomXmlNode#getTextAsync:member(1)'
    summary: Gets the text of an XML node in a custom XML part.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      // Get the built-in core properties XML part by using its ID. This results in a call to Word.

      Office.context.document.customXmlParts.getByIdAsync(
          "{6C3C8BC8-F283-45AE-878A-BAB7291924A1}", function (getByIdAsyncResult) {
          
          // Access the XML part.
          var xmlPart = getByIdAsyncResult.value;
          
          // Add namespaces to the namespace manager. These two calls result in two calls to Word.
          xmlPart.namespaceManager.addNamespaceAsync(
              'cp',
              'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',
              function () {
              xmlPart.namespaceManager.addNamespaceAsync(
                  'dc', 
                  'http://purl.org/dc/elements/1.1/', 
                  function () {

                  // Get XML nodes by using an Xpath expression. This results in a call to Word.
                  xmlPart.getNodesAsync("/cp:coreProperties/dc:title", function (getNodesAsyncResult) {
                      
                      // Get the first node returned by using the Xpath expression. 
                      var node = getNodesAsyncResult.value[0];
                      
                      // Get the text value of the node and use the asyncContext. This results in a call to Word. 
                      // The results are logged to the browser console.
                      node.getTextAsync({asyncContext: "StateNormal"}, function (getTextAsyncResult) {
                        console.log("Text of the title element = " + getTextAsyncResult.value;
                        console.log("The asyncContext value = " + getTextAsyncResult.asyncContext;
                      });
                  });
              });
          });
      });

      ```
    name: 'getTextAsync(options, callback)'
    fullName: 'getTextAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is a string that contains the inner text of the referenced nodes.
          type:
            - 'office!Office.CustomXmlNode#getTextAsync~0:complex'
  - uid: 'office!Office.CustomXmlNode#getTextAsync:member(2)'
    summary: Gets the text of an XML node in a custom XML part.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: getTextAsync(callback)
    fullName: getTextAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is a string that contains the inner text of the referenced nodes.
          type:
            - 'office!Office.CustomXmlNode#getTextAsync~1:complex'
  - uid: 'office!Office.CustomXmlNode#getXmlAsync:member(1)'
    summary: Gets the node's XML.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'getXmlAsync(options, callback)'
    fullName: 'getXmlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is a string that contains the XML of the referenced node.
          type:
            - 'office!Office.CustomXmlNode#getXmlAsync~0:complex'
  - uid: 'office!Office.CustomXmlNode#getXmlAsync:member(2)'
    summary: Gets the node's XML.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function showXmlNodeInnerXml() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      node.getXmlAsync(function (asyncResult) {
                          write(asyncResult.value);
                      });
                  }
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: getXmlAsync(callback)
    fullName: getXmlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is a string that contains the XML of the referenced node.
          type:
            - 'office!Office.CustomXmlNode#getXmlAsync~1:complex'
  - uid: 'office!Office.CustomXmlNode#namespaceUri:member'
    summary: Retrieves the string GUID of the CustomXMLPart.
    name: namespaceUri
    fullName: namespaceUri
    langs:
      - typeScript
    type: property
    syntax:
      content: 'namespaceUri: string;'
      return:
        type:
          - string
        description: |-


          #### Examples

          ```javascript
          function showXmlNamespaceUri() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.getNodesAsync('*/*', function (nodeResults) {
                      for (i = 0; i < nodeResults.value.length; i++) {
                          var node = nodeResults.value[i];
                          write(node.namespaceUri);
                      }
                  });
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlNode#nodeType:member'
    summary: Gets the type of the CustomXMLNode.
    name: nodeType
    fullName: nodeType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'nodeType: string;'
      return:
        type:
          - string
        description: |-


          #### Examples

          ```javascript
          function showXmlNodeType() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.getNodesAsync('*/*', function (nodeResults) {
                      for (i = 0; i < nodeResults.value.length; i++) {
                          var node = nodeResults.value[i];
                          write(node.nodeType);
                      }
                  });
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlNode#setNodeValueAsync:member(1)'
    summary: Sets the node value.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'setNodeValueAsync(value, options, callback)'
    fullName: 'setNodeValueAsync(value, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setNodeValueAsync(value: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: value
          description: The value to be set on the node
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.CustomXmlNode#setNodeValueAsync~0:complex'
  - uid: 'office!Office.CustomXmlNode#setNodeValueAsync:member(2)'
    summary: Sets the node value.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function setXmlNodeValue() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node);
                      node.setNodeValueAsync("item number" + i, function (result) { });
                  }
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'setNodeValueAsync(value, callback)'
    fullName: 'setNodeValueAsync(value, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNodeValueAsync(value: string, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: value
          description: The value to be set on the node
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.CustomXmlNode#setNodeValueAsync~1:complex'
  - uid: 'office!Office.CustomXmlNode#setTextAsync:member(1)'
    summary: Asynchronously sets the text of an XML node in a custom XML part.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      // Learn how to set the text value of a node in a custom XML part from the following example.


      // Get the built-in core properties XML part by using its ID. This results in a call to Word.

      Office.context.document.customXmlParts.getByIdAsync(
          "{6C3C8BC8-F283-45AE-878A-BAB7291924A1}",
          function (getByIdAsyncResult) {
          
          // Access the XML part.
          var xmlPart = getByIdAsyncResult.value;
          
          // Add namespaces to the namespace manager. These two calls result in two calls to Word.
          xmlPart.namespaceManager.addNamespaceAsync(
              'cp', 
              'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', 
              function () {
              xmlPart.namespaceManager.addNamespaceAsync(
                  'dc', 
                  'http://purl.org/dc/elements/1.1/', 
                  function () {

                  // Get XML nodes by using an Xpath expression. This results in a call to the host.
                  xmlPart.getNodesAsync("/cp:coreProperties/dc:subject", function (getNodesAsyncResult) {
                      
                      // Get the first node returned by using the Xpath expression.
                      // This will be the subject element in this example.
                      var subjectNode = getNodesAsyncResult.value[0];
                      
                      // Set the text value of the subject node and use the asyncContext. 
                      // This results in a call to the host.  The results are logged to the browser console.
                      subjectNode.setTextAsync(
                          "newSubject", 
                          {asyncContext: "StateNormal"}, 
                          function (setTextAsyncResult) {
                              console.log("The status of the call: " + setTextAsyncResult.status);
                              console.log("The asyncContext value = " + setTextAsyncResult.asyncContext);
                      });
                  });
              });
          });
      });

      ```
    name: 'setTextAsync(text, options, callback)'
    fullName: 'setTextAsync(text, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setTextAsync(text: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: text
          description: Required. The text value of the XML node.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.CustomXmlNode#setTextAsync~0:complex'
  - uid: 'office!Office.CustomXmlNode#setTextAsync:member(2)'
    summary: Asynchronously sets the text of an XML node in a custom XML part.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'setTextAsync(text, callback)'
    fullName: 'setTextAsync(text, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTextAsync(text: string, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: text
          description: Required. The text value of the XML node.
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.CustomXmlNode#setTextAsync~1:complex'
  - uid: 'office!Office.CustomXmlNode#setXmlAsync:member(1)'
    summary: Sets the node XML.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


      #### Examples


      ```javascript

      function setXmlNodeInnerXml() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      node.setXmlAsync("<childNode>" + i + "</childNode>");
                  }
              });
          });
      }

      ```
    name: 'setXmlAsync(xml, options, callback)'
    fullName: 'setXmlAsync(xml, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setXmlAsync(xml: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xml
          description: The XML to be set on the node
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.CustomXmlNode#setXmlAsync~0:complex'
  - uid: 'office!Office.CustomXmlNode#setXmlAsync:member(2)'
    summary: Sets the node XML.
    remarks: >-
      **Requirement set**:
      [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)
    name: 'setXmlAsync(xml, callback)'
    fullName: 'setXmlAsync(xml, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXmlAsync(xml: string, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xml
          description: The XML to be set on the node
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.CustomXmlNode#setXmlAsync~1:complex'
references:
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: AsyncContextOptions
    fullName: Office.AsyncContextOptions
  - uid: 'office!Office.CustomXmlNode#getNodesAsync~0:complex'
    name: '(result: AsyncResult<CustomXmlNode[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlNode[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlNode:interface'
        name: CustomXmlNode
        fullName: Office.CustomXmlNode
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlNode#getNodesAsync~1:complex'
    name: '(result: AsyncResult<CustomXmlNode[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlNode[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlNode:interface'
        name: CustomXmlNode
        fullName: Office.CustomXmlNode
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlNode#getNodeValueAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlNode#getNodeValueAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlNode#getTextAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlNode#getTextAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlNode#getXmlAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlNode#getXmlAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlNode#setNodeValueAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlNode#setNodeValueAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlNode#setTextAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlNode#setTextAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlNode#setXmlAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlNode#setXmlAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
