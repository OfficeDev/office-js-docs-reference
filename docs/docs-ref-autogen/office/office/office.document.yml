### YamlMime:UniversalReference
items:
  - uid: 'office!Office.Document:interface'
    summary: An abstract class that represents the document the add-in is interacting with.
    remarks: '**Hosts**: Excel, PowerPoint, Project, Word'
    name: Office.Document
    fullName: Office.Document
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.Document#addHandlerAsync:member(1)'
      - 'office!Office.Document#addHandlerAsync:member(2)'
      - 'office!Office.Document#bindings:member'
      - 'office!Office.Document#customXmlParts:member'
      - 'office!Office.Document#getActiveViewAsync:member(1)'
      - 'office!Office.Document#getActiveViewAsync:member(2)'
      - 'office!Office.Document#getFileAsync:member(1)'
      - 'office!Office.Document#getFileAsync:member(2)'
      - 'office!Office.Document#getFilePropertiesAsync:member(1)'
      - 'office!Office.Document#getFilePropertiesAsync:member(2)'
      - 'office!Office.Document#getMaxResourceIndexAsync:member(1)'
      - 'office!Office.Document#getMaxResourceIndexAsync:member(2)'
      - 'office!Office.Document#getMaxTaskIndexAsync:member(1)'
      - 'office!Office.Document#getMaxTaskIndexAsync:member(2)'
      - 'office!Office.Document#getProjectFieldAsync:member(1)'
      - 'office!Office.Document#getProjectFieldAsync:member(2)'
      - 'office!Office.Document#getResourceByIndexAsync:member(1)'
      - 'office!Office.Document#getResourceByIndexAsync:member(2)'
      - 'office!Office.Document#getResourceFieldAsync:member(1)'
      - 'office!Office.Document#getResourceFieldAsync:member(2)'
      - 'office!Office.Document#getSelectedDataAsync:member(1)'
      - 'office!Office.Document#getSelectedDataAsync:member(2)'
      - 'office!Office.Document#getSelectedResourceAsync:member(1)'
      - 'office!Office.Document#getSelectedResourceAsync:member(2)'
      - 'office!Office.Document#getSelectedTaskAsync:member(1)'
      - 'office!Office.Document#getSelectedTaskAsync:member(2)'
      - 'office!Office.Document#getSelectedViewAsync:member(1)'
      - 'office!Office.Document#getSelectedViewAsync:member(2)'
      - 'office!Office.Document#getTaskAsync:member(1)'
      - 'office!Office.Document#getTaskAsync:member(2)'
      - 'office!Office.Document#getTaskByIndexAsync:member(1)'
      - 'office!Office.Document#getTaskByIndexAsync:member(2)'
      - 'office!Office.Document#getTaskFieldAsync:member(1)'
      - 'office!Office.Document#getTaskFieldAsync:member(2)'
      - 'office!Office.Document#getWSSUrlAsync:member(1)'
      - 'office!Office.Document#getWSSUrlAsync:member(2)'
      - 'office!Office.Document#goToByIdAsync:member(1)'
      - 'office!Office.Document#goToByIdAsync:member(2)'
      - 'office!Office.Document#mode:member'
      - 'office!Office.Document#removeHandlerAsync:member(1)'
      - 'office!Office.Document#removeHandlerAsync:member(2)'
      - 'office!Office.Document#setResourceFieldAsync:member(1)'
      - 'office!Office.Document#setResourceFieldAsync:member(2)'
      - 'office!Office.Document#setSelectedDataAsync:member(1)'
      - 'office!Office.Document#setSelectedDataAsync:member(2)'
      - 'office!Office.Document#setTaskFieldAsync:member(1)'
      - 'office!Office.Document#setTaskFieldAsync:member(2)'
      - 'office!Office.Document#settings:member'
      - 'office!Office.Document#url:member'
  - uid: 'office!Office.Document#addHandlerAsync:member(1)'
    summary: Adds an event handler for a Document object event.
    remarks: >-
      **Requirement set**:
      [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?:
        (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: >-
            For a Document object event, the eventType parameter can be specified as
            `Office.EventType.Document.SelectionChanged` or `Office.EventType.Document.ActiveViewChanged`<!-- -->, or
            the corresponding text value of this enumeration.
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of type
            [Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!--
            -->. Required.
          type:
            - any
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#addHandlerAsync:member(2)'
    summary: Adds an event handler for a Document object event.
    remarks: >-
      **Requirement set**:
      [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: >-
            For a Document object event, the eventType parameter can be specified as
            `Office.EventType.Document.SelectionChanged` or `Office.EventType.Document.ActiveViewChanged`<!-- -->, or
            the corresponding text value of this enumeration.
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of type
            [Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!--
            -->. Required.
          type:
            - any
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#bindings:member'
    summary: Gets an object that provides access to the bindings defined in the document.
    remarks: >-
      You don't instantiate the Document object directly in your script. To call members of the Document object to
      interact with the current document or worksheet, use `Office.context.document` in your script.
    name: bindings
    fullName: bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bindings: Bindings;'
      return:
        type:
          - 'office!Office.Bindings:interface'
  - uid: 'office!Office.Document#customXmlParts:member'
    summary: Gets an object that represents the custom XML parts in the document.
    name: customXmlParts
    fullName: customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customXmlParts: CustomXmlParts;'
      return:
        type:
          - 'office!Office.CustomXmlParts:interface'
  - uid: 'office!Office.Document#getActiveViewAsync:member(1)'
    summary: Returns the state of the current view of the presentation (edit or read).
    remarks: >-
      **Requirement set**:
      [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


      Can trigger an event when the view changes.
    name: 'getActiveViewAsync(options, callback)'
    fullName: 'getActiveViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the state of the presentation's current view. The value returned can be either "edit" or "read". "edit"
            corresponds to any of the views in which you can edit slides, such as Normal or Outline View. "read"
            corresponds to either Slide Show or Reading View.
          type:
            - '(result: AsyncResult<"edit" | "read">) => void'
  - uid: 'office!Office.Document#getActiveViewAsync:member(2)'
    summary: Returns the state of the current view of the presentation (edit or read).
    remarks: >-
      **Requirement set**:
      [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


      Can trigger an event when the view changes.
    name: getActiveViewAsync(callback)
    fullName: getActiveViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the state of the presentation's current view. The value returned can be either "edit" or "read". "edit"
            corresponds to any of the views in which you can edit slides, such as Normal or Outline View. "read"
            corresponds to either Slide Show or Reading View.
          type:
            - '(result: AsyncResult<"edit" | "read">) => void'
  - uid: 'office!Office.Document#getFileAsync:member(1)'
    summary: >-
      Returns the entire document file in slices of up to 4194304 bytes (4 MB). For add-ins on iOS, file slice is
      supported up to 65536 (64 KB). Note that specifying file slice size of above permitted limit will result in an
      "Internal Error" failure.
    remarks: >-
      **Requirement sets**:


      -
      [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile)
      (when using `Office.FileType.Compressed`<!-- -->)


      -
      [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


      -
      [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile)
      (when using `Office.FileType.Text`<!-- -->)


      For add-ins running in Office host applications other than Office on iOS, the getFileAsync method supports getting
      files in slices of up to 4194304 bytes (4 MB). For add-ins running in Office apps on iOS, the getFileAsync method
      supports getting files in slices of up to 65536 (64 KB).


      The fileType parameter can be specified by using the [Office.FileType](xref:office!Office.FileType:enum)
      enumeration or text values. But the possible values vary with the host:


      Excel on the web and Windows desktop: `Office.FileType.Compressed`


      Excel on Mac: `Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`


      PowerPoint on the web, Windows desktop, Mac, and iPad: `Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`


      Word on the web, Windows desktop, Mac, and iPad: `Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`<!--
      -->, `Office.FileType.Text`
    name: 'getFileAsync(fileType, options, callback)'
    fullName: 'getFileAsync(fileType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: The format in which the file will be returned
          type:
            - 'office!Office.FileType:enum'
        - id: options
          description: Provides options for setting the size of slices that the document will be divided into.
          type:
            - 'office!Office.GetFileOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the File object.
          type:
            - '(result: AsyncResult<Office.File>) => void'
  - uid: 'office!Office.Document#getFileAsync:member(2)'
    summary: >-
      Returns the entire document file in slices of up to 4194304 bytes (4 MB). For add-ins on iOS, file slice is
      supported up to 65536 (64 KB). Note that specifying file slice size of above permitted limit will result in an
      "Internal Error" failure.
    remarks: >-
      **Requirement sets**:


      -
      [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile)
      (when using `Office.FileType.Compressed`<!-- -->)


      -
      [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


      -
      [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile)
      (when using `Office.FileType.Text`<!-- -->)


      For add-ins running in Office host applications other than Office on iOS, the getFileAsync method supports getting
      files in slices of up to 4194304 bytes (4 MB). For add-ins running in Office on iOS apps, the getFileAsync method
      supports getting files in slices of up to 65536 (64 KB).


      The fileType parameter can be specified by using the [Office.FileType](xref:office!Office.FileType:enum)
      enumeration or text values. But the possible values vary with the host:


      Excel on the web and Windows desktop: `Office.FileType.Compressed`


      Excel on Mac: `Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`


      PowerPoint on the web, Windows desktop, Mac, and iPad: `Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`


      Word on the web, Windows desktop, Mac, and iPad: `Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`<!--
      -->, `Office.FileType.Text`
    name: 'getFileAsync(fileType, callback)'
    fullName: 'getFileAsync(fileType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: The format in which the file will be returned
          type:
            - 'office!Office.FileType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the File object.
          type:
            - '(result: AsyncResult<Office.File>) => void'
  - uid: 'office!Office.Document#getFilePropertiesAsync:member(1)'
    summary: Gets file properties of the current document.
    remarks: >-
      **Requirement sets**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      You get the file's URL with the url property `asyncResult.value.url`<!-- -->.
    name: 'getFilePropertiesAsync(options, callback)'
    fullName: 'getFilePropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<Office.FileProperties>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the file's properties (with the URL found at `asyncResult.value.url`<!-- -->).
          type:
            - '(result: AsyncResult<Office.FileProperties>) => void'
  - uid: 'office!Office.Document#getFilePropertiesAsync:member(2)'
    summary: Gets file properties of the current document.
    remarks: >-
      **Requirement sets**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      You get the file's URL with the url property `asyncResult.value.url`<!-- -->.
    name: getFilePropertiesAsync(callback)
    fullName: getFilePropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the file's properties (with the URL found at `asyncResult.value.url`<!-- -->).
          type:
            - '(result: AsyncResult<Office.FileProperties>) => void'
  - uid: 'office!Office.Document#getMaxResourceIndexAsync:member(1)'
    summary: |-
      Project documents only. Get the maximum index of the collection of resources in the current project.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getMaxResourceIndexAsync(options, callback)'
    fullName: 'getMaxResourceIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the highest index number in the current project's resource collection.
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: 'office!Office.Document#getMaxResourceIndexAsync:member(2)'
    summary: |-
      Project documents only. Get the maximum index of the collection of resources in the current project.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: getMaxResourceIndexAsync(callback)
    fullName: getMaxResourceIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the highest index number in the current project's resource collection.
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: 'office!Office.Document#getMaxTaskIndexAsync:member(1)'
    summary: |-
      Project documents only. Get the maximum index of the collection of tasks in the current project.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getMaxTaskIndexAsync(options, callback)'
    fullName: 'getMaxTaskIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the highest index number in the current project's task collection.
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: 'office!Office.Document#getMaxTaskIndexAsync:member(2)'
    summary: |-
      Project documents only. Get the maximum index of the collection of tasks in the current project.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: getMaxTaskIndexAsync(callback)
    fullName: getMaxTaskIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the highest index number in the current project's task collection.
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: 'office!Office.Document#getProjectFieldAsync:member(1)'
    summary: Project documents only. Get Project field (Ex. ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, options, callback)'
    fullName: 'getProjectFieldAsync(fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fieldId
          description: Project level fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the `fieldValue` property, which represents the value of the specified field.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getProjectFieldAsync:member(2)'
    summary: Project documents only. Get Project field (Ex. ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, callback)'
    fullName: 'getProjectFieldAsync(fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fieldId
          description: Project level fields.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the `fieldValue` property, which represents the value of the specified field.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getResourceByIndexAsync:member(1)'
    summary: |-
      Project documents only. Get the GUID of the resource that has the specified index in the resource collection.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceIndex
          description: The index of the resource in the collection of resources for the project.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getResourceByIndexAsync:member(2)'
    summary: |-
      Project documents only. Get the GUID of the resource that has the specified index in the resource collection.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getResourceByIndexAsync(resourceIndex, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceIndex
          description: The index of the resource in the collection of resources for the project.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getResourceFieldAsync:member(1)'
    summary: Project documents only. Get resource field for provided resource Id. (Ex.ResourceName)
    name: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?:
        (result: AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getResourceFieldAsync:member(2)'
    summary: Project documents only. Get resource field for provided resource Id. (Ex.ResourceName)
    name: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getSelectedDataAsync:member(1)'
    summary: Reads the data contained in the current selection in the document.
    remarks: >-
      **Requirement sets**:


      -
      [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)
      (when using `Office.CoercionType.Html`<!-- -->)


      -
      [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)
      (when using `Office.CoercionType.Matrix`<!-- -->)


      -
      [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)
      (when using `Office.CoercionType.Ooxml`<!-- -->)


      -
      [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


      -
      [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)
      (when using `Office.CoercionType.Table`<!-- -->)


      -
      [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)
      (when using `Office.CoercionType.Text`<!-- -->)


      In the callback function that is passed to the getSelectedDataAsync method, you can use the properties of the
      AsyncResult object to return the following information.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
      undefined because there is no object or data to retrieve.</td> </tr> <tr> <td>AsyncResult.status</td>
      <td>Determine the success or failure of the operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an
      Error object that provides error information if the operation failed.</td> </tr> <tr>
      <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is returned in the AsyncResult object
      without being altered.</td> </tr> </table>


      The possible values for the [Office.CoercionType](xref:office!Office.CoercionType:enum) parameter vary by the
      host.


      <table> <tr> <th>Host</th> <th>Supported coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project, and
      Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Matrix` (array of arrays)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Table` (TableData object)</td> </tr> <tr> <td>Word</td>
      <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open
      XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr>
      <tr> <td>Excel, PowerPoint, and Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result:
        AsyncResult<T>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: The type of data structure to return. See the remarks section for each host's supported coercion types.
          type:
            - 'office!Office.CoercionType:enum'
        - id: options
          description: Provides options for customizing what data is returned and how it is formatted.
          type:
            - 'office!Office.GetSelectedDataOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the data in the current selection. This is returned in the data structure or format you specified with
            the coercionType parameter. (See Remarks for more information about data coercion.)
          type:
            - '(result: AsyncResult<T>) => void'
      typeParameters:
        - id: T
  - uid: 'office!Office.Document#getSelectedDataAsync:member(2)'
    summary: Reads the data contained in the current selection in the document.
    remarks: >-
      **Requirement sets**:


      -
      [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)
      (when using `Office.CoercionType.Html`<!-- -->)


      -
      [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)
      (when using `Office.CoercionType.Matrix`<!-- -->)


      -
      [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)
      (when using `Office.CoercionType.Ooxml`<!-- -->)


      -
      [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


      -
      [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)
      (when using `Office.CoercionType.Table`<!-- -->)


      -
      [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)
      (when using `Office.CoercionType.Text`<!-- -->)


      In the callback function that is passed to the getSelectedDataAsync method, you can use the properties of the
      AsyncResult object to return the following information.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
      undefined because there is no object or data to retrieve.</td> </tr> <tr> <td>AsyncResult.status</td>
      <td>Determine the success or failure of the operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an
      Error object that provides error information if the operation failed.</td> </tr> <tr>
      <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is returned in the AsyncResult object
      without being altered.</td> </tr> </table>


      The possible values for the [Office.CoercionType](xref:office!Office.CoercionType:enum) parameter vary by the
      host.


      <table> <tr> <th>Host</th> <th>Supported coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project, and
      Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Matrix` (array of arrays)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Table` (TableData object)</td> </tr> <tr> <td>Word</td>
      <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open
      XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr>
      <tr> <td>Excel, PowerPoint, and Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: The type of data structure to return. See the remarks section for each host's supported coercion types.
          type:
            - 'office!Office.CoercionType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the data in the current selection. This is returned in the data structure or format you specified with
            the coercionType parameter. (See Remarks for more information about data coercion.)
          type:
            - '(result: AsyncResult<T>) => void'
      typeParameters:
        - id: T
  - uid: 'office!Office.Document#getSelectedResourceAsync:member(1)'
    summary: Project documents only. Get the current selected Resource's Id.
    name: 'getSelectedResourceAsync(options, callback)'
    fullName: 'getSelectedResourceAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getSelectedResourceAsync:member(2)'
    summary: Project documents only. Get the current selected Resource's Id.
    name: getSelectedResourceAsync(callback)
    fullName: getSelectedResourceAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getSelectedTaskAsync:member(1)'
    summary: Project documents only. Get the current selected Task's Id.
    name: 'getSelectedTaskAsync(options, callback)'
    fullName: 'getSelectedTaskAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getSelectedTaskAsync:member(2)'
    summary: Project documents only. Get the current selected Task's Id.
    name: getSelectedTaskAsync(callback)
    fullName: getSelectedTaskAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getSelectedViewAsync:member(1)'
    summary: Project documents only. Get the current selected View Type (Ex. Gantt) and View Name.
    name: 'getSelectedViewAsync(options, callback)'
    fullName: 'getSelectedViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `viewName` - The name of the view, as a ProjectViewTypes constant.
            `viewType` - The type of view, as the integer value of a ProjectViewTypes constant.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getSelectedViewAsync:member(2)'
    summary: Project documents only. Get the current selected View Type (Ex. Gantt) and View Name.
    name: getSelectedViewAsync(callback)
    fullName: getSelectedViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `viewName` - The name of the view, as a ProjectViewTypes constant.
            `viewType` - The type of view, as the integer value of a ProjectViewTypes constant.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getTaskAsync:member(1)'
    summary: 'Project documents only. Get the Task Name, WSS Task Id, and ResourceNames for given taskId.'
    name: 'getTaskAsync(taskId, options, callback)'
    fullName: 'getTaskAsync(taskId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `taskName` - The name of the task. `wssTaskId` - The ID of the task in
            the synchronized SharePoint task list. If the project is not synchronized with a SharePoint task list, the
            value is 0. `resourceNames` - The comma-separated list of the names of resources that are assigned to the
            task.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getTaskAsync:member(2)'
    summary: 'Project documents only. Get the Task Name, WSS Task Id, and ResourceNames for given taskId.'
    name: 'getTaskAsync(taskId, callback)'
    fullName: 'getTaskAsync(taskId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `taskName` - The name of the task. `wssTaskId` - The ID of the task in
            the synchronized SharePoint task list. If the project is not synchronized with a SharePoint task list, the
            value is 0. `resourceNames` - The comma-separated list of the names of resources that are assigned to the
            task.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getTaskByIndexAsync:member(1)'
    summary: |-
      Project documents only. Get the GUID of the task that has the specified index in the task collection.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getTaskByIndexAsync(taskIndex, options, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskIndex
          description: The index of the task in the collection of tasks for the project.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the task as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getTaskByIndexAsync:member(2)'
    summary: |-
      Project documents only. Get the GUID of the task that has the specified index in the task collection.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getTaskByIndexAsync(taskIndex, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskIndex
          description: The index of the task in the collection of tasks for the project.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the task as a string.
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: 'office!Office.Document#getTaskFieldAsync:member(1)'
    summary: Project documents only. Get task field for provided task Id. (Ex. StartDate).
    name: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the `fieldValue` property, which represents the value of the specified field.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getTaskFieldAsync:member(2)'
    summary: Project documents only. Get task field for provided task Id. (Ex. StartDate).
    name: 'getTaskFieldAsync(taskId, fieldId, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the `fieldValue` property, which represents the value of the specified field.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getWSSUrlAsync:member(1)'
    summary: 'Project documents only. Get the WSS Url and list name for the Tasks List, the MPP is synced too.'
    name: 'getWSSUrlAsync(options, callback)'
    fullName: 'getWSSUrlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `listName` - the name of the synchronized SharePoint task list.
            `serverUrl` - the URL of the synchronized SharePoint task list.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#getWSSUrlAsync:member(2)'
    summary: 'Project documents only. Get the WSS Url and list name for the Tasks List, the MPP is synced too.'
    name: getWSSUrlAsync(callback)
    fullName: getWSSUrlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `listName` - the name of the synchronized SharePoint task list.
            `serverUrl` - the URL of the synchronized SharePoint task list.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#goToByIdAsync:member(1)'
    summary: Goes to the specified object or location in the document.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      PowerPoint doesn't support the goToByIdAsync method in Master Views.


      The behavior caused by the selectionMode option varies by host:


      In Excel: `Office.SelectionMode.Selected` selects all content in the binding, or named item.
      Office.SelectionMode.None for text bindings, selects the cell; for matrix bindings, table bindings, and named
      items, selects the first data cell (not first cell in header row for tables).


      In PowerPoint: `Office.SelectionMode.Selected` selects the slide title or first textbox on the slide.
      `Office.SelectionMode.None` doesn't select anything.


      In Word: `Office.SelectionMode.Selected` selects all content in the binding. Office.SelectionMode.None for text
      bindings, moves the cursor to the beginning of the text; for matrix bindings and table bindings, selects the first
      data cell (not first cell in header row for tables).
    name: 'goToByIdAsync(id, goToType, options, callback)'
    fullName: 'goToByIdAsync(id, goToType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result:
        AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: The identifier of the object or location to go to.
          type:
            - string | number
        - id: goToType
          description: The type of the location to go to.
          type:
            - 'office!Office.GoToType:enum'
        - id: options
          description: Provides options for whether to select the location that is navigated to.
          type:
            - 'office!Office.GoToByIdOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the current view.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#goToByIdAsync:member(2)'
    summary: Goes to the specified object or location in the document.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      PowerPoint doesn't support the goToByIdAsync method in Master Views.


      The behavior caused by the selectionMode option varies by host:


      In Excel: `Office.SelectionMode.Selected` selects all content in the binding, or named item.
      Office.SelectionMode.None for text bindings, selects the cell; for matrix bindings, table bindings, and named
      items, selects the first data cell (not first cell in header row for tables).


      In PowerPoint: `Office.SelectionMode.Selected` selects the slide title or first textbox on the slide.
      `Office.SelectionMode.None` doesn't select anything.


      In Word: `Office.SelectionMode.Selected` selects all content in the binding. Office.SelectionMode.None for text
      bindings, moves the cursor to the beginning of the text; for matrix bindings and table bindings, selects the first
      data cell (not first cell in header row for tables).
    name: 'goToByIdAsync(id, goToType, callback)'
    fullName: 'goToByIdAsync(id, goToType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: The identifier of the object or location to go to.
          type:
            - string | number
        - id: goToType
          description: The type of the location to go to.
          type:
            - 'office!Office.GoToType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the current view.
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: 'office!Office.Document#mode:member'
    summary: Gets the mode the document is in.
    name: mode
    fullName: mode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mode: DocumentMode;'
      return:
        type:
          - 'office!Office.DocumentMode:enum'
  - uid: 'office!Office.Document#removeHandlerAsync:member(1)'
    summary: Removes an event handler for the specified event type.
    remarks: >-
      **Requirement set**:
      [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result:
        AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event type. For document can be 'Document.SelectionChanged' or 'Document.ActiveViewChanged'.
          type:
            - 'office!Office.EventType:enum'
        - id: options
          description: Provides options to determine which event handler or handlers are removed.
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#removeHandlerAsync:member(2)'
    summary: Removes an event handler for the specified event type.
    remarks: >-
      **Requirement set**:
      [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event type. For document can be 'Document.SelectionChanged' or 'Document.ActiveViewChanged'.
          type:
            - 'office!Office.EventType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#setResourceFieldAsync:member(1)'
    summary: |-
      Project documents only. Set resource field for specified resource Id.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object,
        options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: fieldValue
          description: Value of the target field.
          type:
            - string | number | boolean | object
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#setResourceFieldAsync:member(2)'
    summary: |-
      Project documents only. Set resource field for specified resource Id.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object,
        callback?: (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: fieldValue
          description: Value of the target field.
          type:
            - string | number | boolean | object
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#setSelectedDataAsync:member(1)'
    summary: Writes the specified data into the current selection.
    remarks: >-
      **Requirement sets**:


      -
      [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!--
      -->, (when using `Office.CoercionType.Html`<!-- -->)


      - [ImageCoercion
      1.1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets)
      (when using `Office.CoercionType.Image`<!-- -->)


      -
      [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)
      (when using `Office.CoercionType.Matrix`<!-- -->)


      -
      [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)
      (when using `Office.CoercionType.Ooxml`<!-- -->)


      -
      [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


      -
      [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)
      (when using `Office.CoercionType.Table`<!-- -->)


      -
      [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)
      (when using `Office.CoercionType.Text`<!-- -->)


      - [ImageCoercion
      1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12)
      (when using `Office.CoercionType.XmlSvg`<!-- -->)


      **Application-specific behaviors**


      The following application-specific actions apply when writing data to a selection.


      <table> <tr> <td>Word</td> <td>If there is no selection and the insertion point is at a valid location, the
      specified `data` is inserted at the insertion point</td> <td>If `data` is a string, the specified text is
      inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is an array of arrays ("matrix") or a TableData
      object, a new Word table is inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is HTML, the specified
      HTML is inserted. (**Important**: If any of the HTML you insert is invalid, Word won't raise an error. Word will
      insert as much of the HTML as it can and omits any invalid data).</td> </tr> <tr> <td></td> <td></td> <td>If
      `data` is Office Open XML, the specified XML is inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is a
      base64 encoded image stream, the specified image is inserted.</td> </tr> <tr> <td></td> <td>If there is a
      selection</td> <td>It will be replaced with the specified `data` following the same rules as above.</td> </tr>
      <tr> <td></td> <td>Insert images</td> <td>Inserted images are placed inline. The imageLeft and imageTop parameters
      are ignored. The image aspect ratio is always locked. If only one of the imageWidth and imageHeight parameter is
      given, the other value will be automatically scaled to keep the original aspect ratio.</td> </tr>


      <tr> <td>Excel</td> <td>If a single cell is selected</td> <td>If `data` is a string, the specified text is
      inserted as the value of the current cell.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is an array of arrays
      ("matrix"), the specified set of rows and columns are inserted, if no other data in surrounding cells will be
      overwritten.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is a TableData object, a new Excel table with the
      specified set of rows and headers is inserted, if no other data in surrounding cells will be overwritten.</td>
      </tr> <tr> <td></td> <td>If multiple cells are selected</td> <td>If the shape does not match the shape of
      `data`<!-- -->, an error is returned.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection
      exactly matches the shape of `data`<!-- -->, the values of the selected cells are updated based on the values in
      `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Insert images</td> <td>Inserted images are floating. The position
      imageLeft and imageTop parameters are relative to currently selected cell(s). Negative imageLeft and imageTop
      values are allowed and possibly readjusted by Excel to position the image inside a worksheet. Image aspect ratio
      is locked unless both imageWidth and imageHeight parameters are provided. If only one of the imageWidth and
      imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect
      ratio.</td> </tr> <tr> <td></td> <td>All other cases</td> <td>An error is returned.</td> </tr>


      <tr> <td>Excel on the web</td> <td>In addition to the behaviors described for Excel above, these limits apply when
      writing data in Excel on the web</td> <td>The total number of cells you can write to a worksheet with the `data`
      parameter can't exceed 20,000 in a single call to this method.</td> </tr> <tr> <td></td> <td></td> <td>The number
      of formatting groups passed to the `cellFormat` parameter can't exceed 100. A single formatting group consists of
      a set of formatting applied to a specified range of cells.</td> </tr>


      <tr> <td>PowerPoint</td> <td>Insert image</td> <td>Inserted images are floating. The position imageLeft and
      imageTop parameters are optional but if provided, both should be present. If a single value is provided, it will
      be ignored. Negative imageLeft and imageTop values are allowed and can position an image outside of a slide. If no
      optional parameter is given and slide has a placeholder, the image will replace the placeholder in the slide.
      Image aspect ratio will be locked unless both imageWidth and imageHeight parameters are provided. If only one of
      the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the
      original aspect ratio.</td> </tr> </table>


      The possible values for the [Office.CoercionType](xref:office!Office.CoercionType:enum) parameter vary by the
      host.


      <table> <tr> <th>Host</th> <th>Supported coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project, and
      Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Matrix` (array of arrays)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Table` (TableData object)</td> </tr> <tr> <td>Word</td>
      <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open
      XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr>
      <tr> <td>Excel, PowerPoint, and Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result:
        AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be set. Either a string or [Office.CoercionType](xref:office!Office.CoercionType:enum) value, 2d
            array or TableData object.


            If the value passed for `data` is:


            - A string: Plain text or anything that can be coerced to a string will be inserted. In Excel, you can also
            specify data as a valid formula to add that formula to the selected cell. For example, setting data to
            "=SUM(A1:A5)" will total the values in the specified range. However, when you set a formula on the bound
            cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell. If
            you call the Document.getSelectedDataAsync method on the selected cell to read its data, the method can
            return only the data displayed in the cell (the formula's result).


            - An array of arrays ("matrix"): Tabular data without headers will be inserted. For example, to write data
            to three rows in two columns, you can pass an array like this: \[\["R1C1", "R1C2"\], \["R2C1", "R2C2"\],
            \["R3C1", "R3C2"\]\]. To write a single column of three rows, pass an array like this: \[\["R1C1"\],
            \["R2C1"\], \["R3C1"\]\]


            In Excel, you can also specify data as an array of arrays that contains valid formulas to add them to the
            selected cells. For example if no other data will be overwritten, setting data to
            \[\["=SUM(A1:A5)","=AVERAGE(A1:A5)"\]\] will add those two formulas to the selection. Just as when setting a
            formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after
            they have been set - you can only read the formulas' results.


            - A TableData object: A table with headers will be inserted. In Excel, if you specify formulas in the
            TableData object you pass for the data parameter, you might not get the results you expect due to the
            "calculated columns" feature of Excel, which automatically duplicates formulas within a column. To work
            around this when you want to write `data` that contains formulas to a selected table, try specifying the
            data as an array of arrays (instead of a TableData object), and specify the coercionType as
            Microsoft.Office.Matrix or "matrix". However, this technique will block the "calculated columns" feature
            only when one of the following conditions is met: (1) you are writing to all the cells of the column, or (2)
            there are already at least two different formulas in the column.
          type:
            - 'string | TableData | any[][]'
        - id: options
          description: Provides options for how to insert data to the selection.
          type:
            - 'office!Office.SetSelectedDataOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The AsyncResult.value property
            always returns undefined because there is no object or data to retrieve.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#setSelectedDataAsync:member(2)'
    summary: Writes the specified data into the current selection.
    remarks: >-
      **Requirement sets**:


      -
      [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!--
      -->, (when using `Office.CoercionType.Html`<!-- -->)


      -
      [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets)
      (when using `Office.CoercionType.Image`<!-- -->)


      -
      [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)
      (when using `Office.CoercionType.Matrix`<!-- -->)


      -
      [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)
      (when using `Office.CoercionType.Ooxml`<!-- -->)


      -
      [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


      -
      [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)
      (when using `Office.CoercionType.Table`<!-- -->)


      -
      [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)
      (when using `Office.CoercionType.Text`<!-- -->)


      - [ImageCoercion
      1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12)
      (when using `Office.CoercionType.XmlSvg`<!-- -->)


      **Application-specific behaviors**


      The following application-specific actions apply when writing data to a selection.


      <table> <tr> <td>Word</td> <td>If there is no selection and the insertion point is at a valid location, the
      specified `data` is inserted at the insertion point</td> <td>If `data` is a string, the specified text is
      inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is an array of arrays ("matrix") or a TableData
      object, a new Word table is inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is HTML, the specified
      HTML is inserted. (**Important**: If any of the HTML you insert is invalid, Word won't raise an error. Word will
      insert as much of the HTML as it can and omits any invalid data).</td> </tr> <tr> <td></td> <td></td> <td>If
      `data` is Office Open XML, the specified XML is inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is a
      base64 encoded image stream, the specified image is inserted.</td></tr></td> </tr> <tr> <td></td> <td>If there is
      a selection</td> <td>It will be replaced with the specified `data` following the same rules as above.</td> </tr>
      <tr> <td></td> <td>Insert images</td> <td>Inserted images are placed inline. The imageLeft and imageTop parameters
      are ignored. The image aspect ratio is always locked. If only one of the imageWidth and imageHeight parameter is
      given, the other value will be automatically scaled to keep the original aspect ratio.</td> </tr>


      <tr> <td>Excel</td> <td>If a single cell is selected</td> <td>If `data` is a string, the specified text is
      inserted as the value of the current cell.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is an array of arrays
      ("matrix"), the specified set of rows and columns are inserted, if no other data in surrounding cells will be
      overwritten.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is a TableData object, a new Excel table with the
      specified set of rows and headers is inserted, if no other data in surrounding cells will be overwritten.</td>
      </tr> <tr> <td></td> <td>If multiple cells are selected</td><td>If the shape does not match the shape of
      `data`<!-- -->, an error is returned.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection
      exactly matches the shape of `data`<!-- -->, the values of the selected cells are updated based on the values in
      `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Insert images</td> <td>Inserted images are floating. The position
      imageLeft and imageTop parameters are relative to currently selected cell(s). Negative imageLeft and imageTop
      values are allowed and possibly readjusted by Excel to position the image inside a worksheet. Image aspect ratio
      is locked unless both imageWidth and imageHeight parameters are provided. If only one of the imageWidth and
      imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect
      ratio.</td> </tr> <tr> <td></td> <td>All other cases</td> <td>An error is returned.</td> </tr>


      <tr> <td>Excel on the web</td> <td>In addition to the behaviors described for Excel above, these limits apply when
      writing data in Excel on the web</td> <td>The total number of cells you can write to a worksheet with the `data`
      parameter can't exceed 20,000 in a single call to this method.</td> </tr> <tr> <td></td> <td></td> <td>The number
      of formatting groups passed to the `cellFormat` parameter can't exceed 100. A single formatting group consists of
      a set of formatting applied to a specified range of cells.</td> </tr>


      <tr> <td>PowerPoint</td> <td>Insert image</td> <td>Inserted images are floating. The position imageLeft and
      imageTop parameters are optional but if provided, both should be present. If a single value is provided, it will
      be ignored. Negative imageLeft and imageTop values are allowed and can position an image outside of a slide. If no
      optional parameter is given and slide has a placeholder, the image will replace the placeholder in the slide.
      Image aspect ratio will be locked unless both imageWidth and imageHeight parameters are provided. If only one of
      the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the
      original aspect ratio.</td> </tr> </table>


      The possible values for the [Office.CoercionType](xref:office!Office.CoercionType:enum) parameter vary by the
      host.


      <table> <tr> <th>Host</th> <th>Supported coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project, and
      Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Matrix` (array of arrays)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Table` (TableData object)</td> </tr> <tr> <td>Word</td>
      <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open
      XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr>
      <tr> <td>Excel, PowerPoint, and Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be set. Either a string or [Office.CoercionType](xref:office!Office.CoercionType:enum) value, 2d
            array or TableData object.


            If the value passed for `data` is:


            - A string: Plain text or anything that can be coerced to a string will be inserted. In Excel, you can also
            specify data as a valid formula to add that formula to the selected cell. For example, setting data to
            "=SUM(A1:A5)" will total the values in the specified range. However, when you set a formula on the bound
            cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell. If
            you call the Document.getSelectedDataAsync method on the selected cell to read its data, the method can
            return only the data displayed in the cell (the formula's result).


            - An array of arrays ("matrix"): Tabular data without headers will be inserted. For example, to write data
            to three rows in two columns, you can pass an array like this: \[\["R1C1", "R1C2"\], \["R2C1", "R2C2"\],
            \["R3C1", "R3C2"\]\]. To write a single column of three rows, pass an array like this: \[\["R1C1"\],
            \["R2C1"\], \["R3C1"\]\]


            In Excel, you can also specify data as an array of arrays that contains valid formulas to add them to the
            selected cells. For example if no other data will be overwritten, setting data to
            \[\["=SUM(A1:A5)","=AVERAGE(A1:A5)"\]\] will add those two formulas to the selection. Just as when setting a
            formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after
            they have been set - you can only read the formulas' results.


            - A TableData object: A table with headers will be inserted. In Excel, if you specify formulas in the
            TableData object you pass for the data parameter, you might not get the results you expect due to the
            "calculated columns" feature of Excel, which automatically duplicates formulas within a column. To work
            around this when you want to write `data` that contains formulas to a selected table, try specifying the
            data as an array of arrays (instead of a TableData object), and specify the coercionType as
            Microsoft.Office.Matrix or "matrix". However, this technique will block the "calculated columns" feature
            only when one of the following conditions is met: (1) you are writing to all the cells of the column, or (2)
            there are already at least two different formulas in the column.
          type:
            - 'string | TableData | any[][]'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The AsyncResult.value property
            always returns undefined because there is no object or data to retrieve.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#setTaskFieldAsync:member(1)'
    summary: |-
      Project documents only. Set task field for specified task Id.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?:
        Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: fieldValue
          description: Value of the target field.
          type:
            - string | number | boolean | object
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#setTaskFieldAsync:member(2)'
    summary: |-
      Project documents only. Set task field for specified task Id.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?:
        (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: fieldValue
          description: Value of the target field.
          type:
            - string | number | boolean | object
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: 'office!Office.Document#settings:member'
    summary: >-
      Gets an object that represents the saved custom settings of the content or task pane add-in for the current
      document.
    name: settings
    fullName: settings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'settings: Settings;'
      return:
        type:
          - 'office!Office.Settings:interface'
  - uid: 'office!Office.Document#url:member'
    summary: Gets the URL of the document that the host application currently has open. Returns null if the URL is unavailable.
    name: url
    fullName: url
    langs:
      - typeScript
    type: property
    syntax:
      content: 'url: string;'
      return:
        type:
          - string
