### YamlMime:UniversalReference
items:
  - uid: 'office!Office.Document:interface'
    summary: An abstract class that represents the document the add-in is interacting with.
    remarks: '**Hosts**: Excel, PowerPoint, Project, Word'
    name: Office.Document
    fullName: Office.Document
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.Document#addHandlerAsync:member(1)'
      - 'office!Office.Document#addHandlerAsync:member(2)'
      - 'office!Office.Document#bindings:member'
      - 'office!Office.Document#customXmlParts:member'
      - 'office!Office.Document#getActiveViewAsync:member(1)'
      - 'office!Office.Document#getActiveViewAsync:member(2)'
      - 'office!Office.Document#getFileAsync:member(1)'
      - 'office!Office.Document#getFileAsync:member(2)'
      - 'office!Office.Document#getFilePropertiesAsync:member(1)'
      - 'office!Office.Document#getFilePropertiesAsync:member(2)'
      - 'office!Office.Document#getMaxResourceIndexAsync:member(1)'
      - 'office!Office.Document#getMaxResourceIndexAsync:member(2)'
      - 'office!Office.Document#getMaxTaskIndexAsync:member(1)'
      - 'office!Office.Document#getMaxTaskIndexAsync:member(2)'
      - 'office!Office.Document#getProjectFieldAsync:member(1)'
      - 'office!Office.Document#getProjectFieldAsync:member(2)'
      - 'office!Office.Document#getResourceByIndexAsync:member(1)'
      - 'office!Office.Document#getResourceByIndexAsync:member(2)'
      - 'office!Office.Document#getResourceFieldAsync:member(1)'
      - 'office!Office.Document#getResourceFieldAsync:member(2)'
      - 'office!Office.Document#getSelectedDataAsync:member(1)'
      - 'office!Office.Document#getSelectedDataAsync:member(2)'
      - 'office!Office.Document#getSelectedResourceAsync:member(1)'
      - 'office!Office.Document#getSelectedResourceAsync:member(2)'
      - 'office!Office.Document#getSelectedTaskAsync:member(1)'
      - 'office!Office.Document#getSelectedTaskAsync:member(2)'
      - 'office!Office.Document#getSelectedViewAsync:member(1)'
      - 'office!Office.Document#getSelectedViewAsync:member(2)'
      - 'office!Office.Document#getTaskAsync:member(1)'
      - 'office!Office.Document#getTaskAsync:member(2)'
      - 'office!Office.Document#getTaskByIndexAsync:member(1)'
      - 'office!Office.Document#getTaskByIndexAsync:member(2)'
      - 'office!Office.Document#getTaskFieldAsync:member(1)'
      - 'office!Office.Document#getTaskFieldAsync:member(2)'
      - 'office!Office.Document#getWSSUrlAsync:member(1)'
      - 'office!Office.Document#getWSSUrlAsync:member(2)'
      - 'office!Office.Document#goToByIdAsync:member(1)'
      - 'office!Office.Document#goToByIdAsync:member(2)'
      - 'office!Office.Document#mode:member'
      - 'office!Office.Document#removeHandlerAsync:member(1)'
      - 'office!Office.Document#removeHandlerAsync:member(2)'
      - 'office!Office.Document#setResourceFieldAsync:member(1)'
      - 'office!Office.Document#setResourceFieldAsync:member(2)'
      - 'office!Office.Document#setSelectedDataAsync:member(1)'
      - 'office!Office.Document#setSelectedDataAsync:member(2)'
      - 'office!Office.Document#setTaskFieldAsync:member(1)'
      - 'office!Office.Document#setTaskFieldAsync:member(2)'
      - 'office!Office.Document#settings:member'
      - 'office!Office.Document#url:member'
  - uid: 'office!Office.Document#addHandlerAsync:member(1)'
    summary: Adds an event handler for a Document object event.
    remarks: >-
      **Requirement set**:
      [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?:
        (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: >-
            For a Document object event, the eventType parameter can be specified as
            `Office.EventType.Document.SelectionChanged` or `Office.EventType.Document.ActiveViewChanged`<!-- -->, or
            the corresponding text value of this enumeration.
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of type
            [Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!--
            -->. Required.
          type:
            - any
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Document#addHandlerAsync~0:complex'
  - uid: 'office!Office.Document#addHandlerAsync:member(2)'
    summary: Adds an event handler for a Document object event.
    remarks: >-
      **Requirement set**:
      [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.


      #### Examples


      ```javascript

      // The following example adds an event handler for the SelectionChanged event of a document

      function addSelectionChangedEventHandler() {
          Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);
      }


      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithDocument(eventArgs.document);
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```

      ```javascript

      // The following code example adds a handler for the ResourceSelectionChanged event.

      // When the resource selection changes in the document, it gets the GUID of the selected resource.

      // The example assumes your add-in has a reference to the jQuery library and that the

      // following page control is defined in the content div in the page body:

      // <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
              });
          };

          // Get the GUID of the selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();


      // For a complete code sample that shows how to use a ResourceSelectionChanged

      // event handler in a Project add-in, see "Create your first task pane add-in

      // for Project 2013 by using a text editor."

      //
      https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor

      ```

      ```javascript

      // The following code example adds a handler for the TaskSelectionChanged event.

      // When the task selection changes in the document, it gets the GUID of the

      // selected task.

      // The example assumes your add-in has a reference to the jQuery library and that

      // the following page control is defined in the content div in the page body:

      // <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.TaskSelectionChanged,
                      getTaskGuid);
                  getTaskGuid();
              });
          };

          // Get the GUID of the selected task and display it in the add-in.
          function getTaskGuid() {
              Office.context.document.getSelectedTaskAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      ```

      ```javascript

      // The following code example adds a handler for the ViewSelectionChanged

      // event. When the active view changes, it gets the name and type of the active view.

      // The example assumes your add-in has a reference to the jQuery library and that

      // the following page control is defined in the content div in the page body:

      // <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  getActiveView();
              });
          };

          // Get the name and type of the active view and display it in the add-in.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, result.value.viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();


      // For an example that shows how to use a ViewSelectionChanged event handler in a

      // Project add-in, see "Create your first task pane add-in for Project 2013 by

      // using a text editor."

      //
      https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor

      ```

      ```javascript

      // The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.

      // When the active view changes, the handler checks the view type. It enables a button if the view is a resource

      // view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected

      // resource and displays it in the add-in.

      // The example assumes that your add-in has a reference to the jQuery library and that the following page controls

      // are defined in the content div in the page body:

      // <input id="get-info" type="button" value="Get info" disabled="disabled" /><br />

      // <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  // Add a ViewSelectionChanged event handler.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  $('#get-info').click(getResourceGuid);

                  // This example calls the handler on page load to get the active view
                  // of the default page.
                  getActiveView();
              });
          };

          // Activate the button based on the active view type of the document.
          // This is the ViewSelectionChanged event handler.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var viewType = result.value.viewType;
                          if (viewType == 6 ||   // ResourceForm
                              viewType == 7 ||   // ResourceSheet
                              viewType == 8 ||   // ResourceGraph
                              viewType == 15) {  // ResourceUsage
                              $('#get-info').removeAttr('disabled');
                          }
                          else {
                              $('#get-info').attr('disabled', 'disabled');
                          }
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();


      // For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,

      // see "Create your first task pane add-in for Project by using a text editor."

      //
      https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor

      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: >-
            For a Document object event, the eventType parameter can be specified as
            `Office.EventType.Document.SelectionChanged` or `Office.EventType.Document.ActiveViewChanged`<!-- -->, or
            the corresponding text value of this enumeration.
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of type
            [Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!--
            -->. Required.
          type:
            - any
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Document#addHandlerAsync~1:complex'
  - uid: 'office!Office.Document#bindings:member'
    summary: Gets an object that provides access to the bindings defined in the document.
    remarks: >-
      You don't instantiate the Document object directly in your script. To call members of the Document object to
      interact with the current document or worksheet, use `Office.context.document` in your script.


      #### Examples


      ```javascript

      function displayAllBindings() {
          Office.context.document.bindings.getAllAsync(function (asyncResult) {
              var bindingString = '';
              for (var i in asyncResult.value) {
                  bindingString += asyncResult.value[i].id + '\n';
              }
              write('Existing bindings: ' + bindingString);
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: bindings
    fullName: bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bindings: Bindings;'
      return:
        type:
          - 'office!Office.Bindings:interface'
  - uid: 'office!Office.Document#customXmlParts:member'
    summary: Gets an object that represents the custom XML parts in the document.
    name: customXmlParts
    fullName: customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customXmlParts: CustomXmlParts;'
      return:
        type:
          - 'office!Office.CustomXmlParts:interface'
        description: |-


          #### Examples

          ```javascript
          function getCustomXmlParts(){
              Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {
                  write('Retrieved ' + asyncResult.value.length + ' custom XML parts');
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.Document#getActiveViewAsync:member(1)'
    summary: Returns the state of the current view of the presentation (edit or read).
    remarks: >-
      **Requirement set**:
      [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


      Can trigger an event when the view changes.
    name: 'getActiveViewAsync(options, callback)'
    fullName: 'getActiveViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the state of the presentation's current view. The value returned can be either "edit" or "read". "edit"
            corresponds to any of the views in which you can edit slides, such as Normal or Outline View. "read"
            corresponds to either Slide Show or Reading View.
          type:
            - 'office!Office.Document#getActiveViewAsync~0:complex'
  - uid: 'office!Office.Document#getActiveViewAsync:member(2)'
    summary: Returns the state of the current view of the presentation (edit or read).
    remarks: >-
      **Requirement set**:
      [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


      Can trigger an event when the view changes.


      #### Examples


      ```javascript

      function getFileView() {
          // Get whether the current view is edit or read.
          Office.context.document.getActiveViewAsync(function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage(asyncResult.value);
              }
          });
      }

      ```
    name: getActiveViewAsync(callback)
    fullName: getActiveViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the state of the presentation's current view. The value returned can be either "edit" or "read". "edit"
            corresponds to any of the views in which you can edit slides, such as Normal or Outline View. "read"
            corresponds to either Slide Show or Reading View.
          type:
            - 'office!Office.Document#getActiveViewAsync~1:complex'
  - uid: 'office!Office.Document#getFileAsync:member(1)'
    summary: >-
      Returns the entire document file in slices of up to 4194304 bytes (4 MB). For add-ins on iPad, file slice is
      supported up to 65536 (64 KB). Note that specifying file slice size of above permitted limit will result in an
      "Internal Error" failure.
    remarks: >-
      **Requirement sets**:


      -
      [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile)
      (when using `Office.FileType.Compressed`<!-- -->)


      -
      [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


      -
      [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile)
      (when using `Office.FileType.Text`<!-- -->)


      For add-ins running in Office host applications other than Office on iPad, the `getFileAsync` method supports
      getting files in slices of up to 4194304 bytes (4 MB). For add-ins running in Office apps on iPad, the
      `getFileAsync` method supports getting files in slices of up to 65536 (64 KB).


      The `fileType` parameter can be specified by using the [Office.FileType](xref:office!Office.FileType:enum)
      enumeration or text values. But the possible values vary with the host:


      *Supported FileTypes, by platform* <table> <tr><th> </th><th> Office on Windows </th><th> Office on the web
      </th><th> Office on iPad </th><th> Office on Mac </th></tr> <tr><td><strong> Excel </strong></td><td>
      `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td>
      `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td>
      `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td>
      `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Word </strong></td><td> `Compressed`<!-- -->, `Pdf`<!--
      -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td>
      `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>


      #### Examples


      ```javascript

      // The following example gets the document in Office Open XML ("compressed") format in 65536 bytes (64 KB) slices.

      // Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office
      Add-ins.

      function getDocumentAsCompressed() {
          Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, 
              function (result) {
                  if (result.status == "succeeded") {
                      // If the getFileAsync call succeeded, then
                      // result.value will return a valid File Object.
                      var myFile = result.value;
                      var sliceCount = myFile.sliceCount;
                      var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];
                      app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);

                      // Get the file slices.
                      getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
                  else {
                      app.showNotification("Error:", result.error.message);
                  }
          });
      }


      function getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {
          file.getSliceAsync(nextSlice, function (sliceResult) {
              if (sliceResult.status == "succeeded") {
                  if (!gotAllSlices) { // Failed to get all slices, no need to continue.
                      return;
                  }

                  // Got one slice, store it in a temporary array.
                  // (Or you can do something else, such as
                  // send it to a third-party server.)
                  docdataSlices[sliceResult.value.index] = sliceResult.value.data;
                  if (++slicesReceived == sliceCount) {
                    // All slices have been received.
                    file.closeAsync();
                    onGotAllSlices(docdataSlices);
                  }
                  else {
                      getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
              }
                  else {
                      gotAllSlices = false;
                      file.closeAsync();
                      app.showNotification("getSliceAsync Error:", sliceResult.error.message);
                  }
          });
      }


      function onGotAllSlices(docdataSlices) {
          var docdata = [];
          for (var i = 0; i < docdataSlices.length; i++) {
              docdata = docdata.concat(docdataSlices[i]);
          }

          var fileContent = new String();
          for (var j = 0; j < docdata.length; j++) {
              fileContent += String.fromCharCode(docdata[j]);
          }

          // Now all the file content is stored in 'fileContent' variable,
          // you can do something with it, such as print, fax...
      }


      // The following example gets the document in PDF format.

      Office.context.document.getFileAsync(Office.FileType.Pdf,
          function(result) {
              if (result.status == "succeeded") {
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);
                  // Now, you can call getSliceAsync to download the files,
                  // as described in the previous code segment (compressed format).
                  
                  myFile.closeAsync();
              }
              else {
                  app.showNotification("Error:", result.error.message);
              }
      }

      );

      ```
    name: 'getFileAsync(fileType, options, callback)'
    fullName: 'getFileAsync(fileType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: The format in which the file will be returned
          type:
            - 'office!Office.FileType:enum'
        - id: options
          description: Provides options for setting the size of slices that the document will be divided into.
          type:
            - 'office!Office.GetFileOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the File object.
          type:
            - 'office!Office.Document#getFileAsync~0:complex'
  - uid: 'office!Office.Document#getFileAsync:member(2)'
    summary: >-
      Returns the entire document file in slices of up to 4194304 bytes (4 MB). For add-ins on iPad, file slice is
      supported up to 65536 (64 KB). Note that specifying file slice size of above permitted limit will result in an
      "Internal Error" failure.
    remarks: >-
      **Requirement sets**:


      -
      [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile)
      (when using `Office.FileType.Compressed`<!-- -->)


      -
      [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


      -
      [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile)
      (when using `Office.FileType.Text`<!-- -->)


      For add-ins running in Office host applications other than Office on iPad, the `getFileAsync` method supports
      getting files in slices of up to 4194304 bytes (4 MB). For add-ins running in Office on iPad apps, the
      `getFileAsync` method supports getting files in slices of up to 65536 (64 KB).


      The `fileType` parameter can be specified by using the [Office.FileType](xref:office!Office.FileType:enum)
      enumeration or text values. But the possible values vary with the host:


      *Supported FileTypes, by platform* <table> <tr><th> </th><th> Office on Windows </th><th> Office on the web
      </th><th> Office on iPad </th><th> Office on Mac </th></tr> <tr><td><strong> Excel </strong></td><td>
      `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td>
      `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td>
      `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td>
      `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Word </strong></td><td> `Compressed`<!-- -->, `Pdf`<!--
      -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td>
      `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>
    name: 'getFileAsync(fileType, callback)'
    fullName: 'getFileAsync(fileType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: The format in which the file will be returned
          type:
            - 'office!Office.FileType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the File object.
          type:
            - 'office!Office.Document#getFileAsync~1:complex'
  - uid: 'office!Office.Document#getFilePropertiesAsync:member(1)'
    summary: Gets file properties of the current document.
    remarks: >-
      **Requirement sets**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      You get the file's URL with the url property `asyncResult.value.url`<!-- -->.
    name: 'getFilePropertiesAsync(options, callback)'
    fullName: 'getFilePropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<Office.FileProperties>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the file's properties (with the URL found at `asyncResult.value.url`<!-- -->).
          type:
            - 'office!Office.Document#getFilePropertiesAsync~0:complex'
  - uid: 'office!Office.Document#getFilePropertiesAsync:member(2)'
    summary: Gets file properties of the current document.
    remarks: >-
      **Requirement sets**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      You get the file's URL with the url property `asyncResult.value.url`<!-- -->.


      #### Examples


      ```javascript

      // To read the URL of the current file, you need to write a callback function that returns the URL.

      // The following example shows how to:

      // 1. Pass an anonymous callback function that returns the value of the file's URL

      //    to the callback parameter of the getFilePropertiesAsync method.

      // 2. Display the value on the add-in's page.

      function getFileUrl() {
          // Get the URL of the current file.
          Office.context.document.getFilePropertiesAsync(function (asyncResult) {
              var fileUrl = asyncResult.value.url;
              if (fileUrl == "") {
                  showMessage("The file hasn't been saved yet. Save the file and try again");
              }
              else {
                  showMessage(fileUrl);
              }
          });
      }

      ```
    name: getFilePropertiesAsync(callback)
    fullName: getFilePropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the file's properties (with the URL found at `asyncResult.value.url`<!-- -->).
          type:
            - 'office!Office.Document#getFilePropertiesAsync~1:complex'
  - uid: 'office!Office.Document#getMaxResourceIndexAsync:member(1)'
    summary: |-
      Project documents only. Get the maximum index of the collection of resources in the current project.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getMaxResourceIndexAsync(options, callback)'
    fullName: 'getMaxResourceIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the highest index number in the current project's resource collection.
          type:
            - 'office!Office.Document#getMaxResourceIndexAsync~0:complex'
  - uid: 'office!Office.Document#getMaxResourceIndexAsync:member(2)'
    summary: |-
      Project documents only. Get the maximum index of the collection of resources in the current project.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: getMaxResourceIndexAsync(callback)
    fullName: getMaxResourceIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection 
          // of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync
          // method to get each resource GUID. The example assumes that your add-in has a reference to the 
          // jQuery library and that the following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the highest index number in the current project's resource collection.
          type:
            - 'office!Office.Document#getMaxResourceIndexAsync~1:complex'
  - uid: 'office!Office.Document#getMaxTaskIndexAsync:member(1)'
    summary: |-
      Project documents only. Get the maximum index of the collection of tasks in the current project.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getMaxTaskIndexAsync(options, callback)'
    fullName: 'getMaxTaskIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the highest index number in the current project's task collection.
          type:
            - 'office!Office.Document#getMaxTaskIndexAsync~0:complex'
  - uid: 'office!Office.Document#getMaxTaskIndexAsync:member(2)'
    summary: |-
      Project documents only. Get the maximum index of the collection of tasks in the current project.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: getMaxTaskIndexAsync(callback)
    fullName: getMaxTaskIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the maximum index
          // of the collection of tasks in the current project. Then it uses the returned value
          // with the getTaskByIndexAsync method to get each task GUID.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the highest index number in the current project's task collection.
          type:
            - 'office!Office.Document#getMaxTaskIndexAsync~1:complex'
  - uid: 'office!Office.Document#getProjectFieldAsync:member(1)'
    summary: Project documents only. Get Project field (Ex. ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, options, callback)'
    fullName: 'getProjectFieldAsync(fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fieldId
          description: Project level fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the `fieldValue` property, which represents the value of the specified field.
          type:
            - 'office!Office.Document#getProjectFieldAsync~0:complex'
  - uid: 'office!Office.Document#getProjectFieldAsync:member(2)'
    summary: Project documents only. Get Project field (Ex. ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, callback)'
    fullName: 'getProjectFieldAsync(fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example gets the values of three specified fields for the active project, 
          // and then displays the values in the add-in.
          // The example calls getProjectFieldAsync recursively, after the previous call returns successfully.
          // It also tracks the calls to determine when all calls are sent.
          // The example assumes your add-in has a reference to the jQuery library and that the 
          // following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information for the active project.
                      getProjectInformation();
                  });
              };

              // Get the specified fields for the active project.
              function getProjectInformation() {
                  var fields =
                      [Office.ProjectProjectFields.Start, 
                       Office.ProjectProjectFields.Finish, 
                       Office.ProjectProjectFields.GUID];
                  var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == fields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }
                      else {
                          Office.context.document.getProjectFieldAsync(
                              fields[index],
                              function (result) {

                                  // If the call is successful, get the field value and then get the next field.
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: fieldId
          description: Project level fields.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the `fieldValue` property, which represents the value of the specified field.
          type:
            - 'office!Office.Document#getProjectFieldAsync~1:complex'
  - uid: 'office!Office.Document#getResourceByIndexAsync:member(1)'
    summary: |-
      Project documents only. Get the GUID of the resource that has the specified index in the resource collection.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceIndex
          description: The index of the resource in the collection of resources for the project.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - 'office!Office.Document#getResourceByIndexAsync~0:complex'
  - uid: 'office!Office.Document#getResourceByIndexAsync:member(2)'
    summary: |-
      Project documents only. Get the GUID of the resource that has the specified index in the resource collection.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getResourceByIndexAsync(resourceIndex, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: >-


          #### Examples


          ```javascript

          // The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's
          resource

          // collection, and then calls getResourceByIndexAsync to get the GUID for each resource.

          // The example assumes that your add-in has a reference to the jQuery library and that the following 

          // page controls are defined in the content div in the page body:

          // <input id="get-info" type="button" value="Get info" /><br />

          // <span id="message"></span>


          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();

          ```
      parameters:
        - id: resourceIndex
          description: The index of the resource in the collection of resources for the project.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - 'office!Office.Document#getResourceByIndexAsync~1:complex'
  - uid: 'office!Office.Document#getResourceFieldAsync:member(1)'
    summary: Project documents only. Get resource field for provided resource Id. (Ex.ResourceName)
    name: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?:
        (result: AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - 'office!Office.Document#getResourceFieldAsync~0:complex'
  - uid: 'office!Office.Document#getResourceFieldAsync:member(2)'
    summary: Project documents only. Get resource field for provided resource Id. (Ex.ResourceName)
    name: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void):
        void;
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource
          // that's currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - 'office!Office.Document#getResourceFieldAsync~1:complex'
  - uid: 'office!Office.Document#getSelectedDataAsync:member(1)'
    summary: Reads the data contained in the current selection in the document.
    remarks: >-
      **Requirement sets**:


      -
      [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)
      (when using `Office.CoercionType.Html`<!-- -->)


      -
      [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)
      (when using `Office.CoercionType.Matrix`<!-- -->)


      -
      [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)
      (when using `Office.CoercionType.Ooxml`<!-- -->)


      -
      [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


      -
      [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)
      (when using `Office.CoercionType.Table`<!-- -->)


      -
      [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)
      (when using `Office.CoercionType.Text`<!-- -->)


      In the callback function that is passed to the getSelectedDataAsync method, you can use the properties of the
      AsyncResult object to return the following information.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
      undefined because there is no object or data to retrieve.</td> </tr> <tr> <td>AsyncResult.status</td>
      <td>Determine the success or failure of the operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an
      Error object that provides error information if the operation failed.</td> </tr> <tr>
      <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is returned in the AsyncResult object
      without being altered.</td> </tr> </table>


      The possible values for the [Office.CoercionType](xref:office!Office.CoercionType:enum) parameter vary by the
      host.


      <table> <tr> <th>Host</th> <th>Supported coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project, and
      Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Matrix` (array of arrays)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Table` (TableData object)</td> </tr> <tr> <td>Word</td>
      <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open
      XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr>
      <tr> <td>Excel, PowerPoint, and Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>


      #### Examples


      ```javascript

      // The following example uses the getSelectedDataAsync method of the Document object to retrieve the

      // user's current selection as text, and then display it in the add-in's page.


      // Display the user's current selection.

      function showSelection() {
          Office.context.document.getSelectedDataAsync(
              "text",                        // coercionType
              {valueFormat: "unformatted",   // valueFormat
              filterType: "all"},            // filterType
              function (result) {            // callback
                  var dataValue; 
                  dataValue = result.value;
                  write('Selected data is: ' + dataValue);
              });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```

      ```javascript

      // To read the value of the current selection, you need to write a callback function that reads the selection.

      // The following example shows how to:

      // 1. Pass an anonymous callback function that reads the value of the current selection

      //    to the callback parameter of the getSelectedDataAsync method.

      // 2. Read the selection as text, unformatted, and not filtered.

      // 3. Display the value on the add-in's page.

      function getText() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, 
              { valueFormat: "unformatted", filterType: "all" },
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  } 
                  else {
                      // Get selected data.
                      var dataValue = asyncResult.value; 
                      write('Selected data is ' + dataValue);
                  }            
              });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```

      ```javascript

      // The following code example gets the values of the selected cells. It uses the optional

      // asyncContext parameter to pass some text to the callback function.

      // The example assumes your add-in has a reference to the jQuery library and that the

      // following page controls are defined in the content div in the page body:

      // <input id="get-info" type="button" value="Get info" /><br />

      // <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getSelectedText);
              });
          };

          // Get the text from the selected cells in the document, and display it in the add-in.
          function getSelectedText() {
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text,
                  {asyncContext: 'Some related info'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'Selected text: {0}<br/>Passed info: {1}',
                              result.value, result.asyncContext);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result:
        AsyncResult<T>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: The type of data structure to return. See the remarks section for each host's supported coercion types.
          type:
            - 'office!Office.CoercionType:enum'
        - id: options
          description: Provides options for customizing what data is returned and how it is formatted.
          type:
            - 'office!Office.GetSelectedDataOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the data in the current selection. This is returned in the data structure or format you specified with
            the coercionType parameter. (See Remarks for more information about data coercion.)
          type:
            - 'office!Office.Document#getSelectedDataAsync~0:complex'
      typeParameters:
        - id: T
  - uid: 'office!Office.Document#getSelectedDataAsync:member(2)'
    summary: Reads the data contained in the current selection in the document.
    remarks: >-
      **Requirement sets**:


      -
      [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)
      (when using `Office.CoercionType.Html`<!-- -->)


      -
      [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)
      (when using `Office.CoercionType.Matrix`<!-- -->)


      -
      [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)
      (when using `Office.CoercionType.Ooxml`<!-- -->)


      -
      [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


      -
      [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)
      (when using `Office.CoercionType.Table`<!-- -->)


      -
      [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)
      (when using `Office.CoercionType.Text`<!-- -->)


      In the callback function that is passed to the getSelectedDataAsync method, you can use the properties of the
      AsyncResult object to return the following information.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
      undefined because there is no object or data to retrieve.</td> </tr> <tr> <td>AsyncResult.status</td>
      <td>Determine the success or failure of the operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an
      Error object that provides error information if the operation failed.</td> </tr> <tr>
      <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is returned in the AsyncResult object
      without being altered.</td> </tr> </table>


      The possible values for the [Office.CoercionType](xref:office!Office.CoercionType:enum) parameter vary by the
      host.


      <table> <tr> <th>Host</th> <th>Supported coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project, and
      Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Matrix` (array of arrays)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Table` (TableData object)</td> </tr> <tr> <td>Word</td>
      <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open
      XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr>
      <tr> <td>Excel, PowerPoint, and Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: The type of data structure to return. See the remarks section for each host's supported coercion types.
          type:
            - 'office!Office.CoercionType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the data in the current selection. This is returned in the data structure or format you specified with
            the coercionType parameter. (See Remarks for more information about data coercion.)
          type:
            - 'office!Office.Document#getSelectedDataAsync~1:complex'
      typeParameters:
        - id: T
  - uid: 'office!Office.Document#getSelectedResourceAsync:member(1)'
    summary: Project documents only. Get the current selected Resource's Id.
    name: 'getSelectedResourceAsync(options, callback)'
    fullName: 'getSelectedResourceAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - 'office!Office.Document#getSelectedResourceAsync~0:complex'
  - uid: 'office!Office.Document#getSelectedResourceAsync:member(2)'
    summary: Project documents only. Get the current selected Resource's Id.
    name: getSelectedResourceAsync(callback)
    fullName: getSelectedResourceAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: >-


          #### Examples


          ```javascript

          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's 

          // currently selected in a resource view. Then it gets three resource field values by calling 

          // getResourceFieldAsync recursively.

          // The example assumes your add-in has a reference to the jQuery library and that the following page controls
          are

          // defined in the content div in the page body:

          // <input id="get-info" type="button" value="Get info" /><br />

          // <span id="message"></span>


          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();

          ```
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - 'office!Office.Document#getSelectedResourceAsync~1:complex'
  - uid: 'office!Office.Document#getSelectedTaskAsync:member(1)'
    summary: Project documents only. Get the current selected Task's Id.
    name: 'getSelectedTaskAsync(options, callback)'
    fullName: 'getSelectedTaskAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - 'office!Office.Document#getSelectedTaskAsync~0:complex'
  - uid: 'office!Office.Document#getSelectedTaskAsync:member(2)'
    summary: Project documents only. Get the current selected Task's Id.
    name: getSelectedTaskAsync(callback)
    fullName: getSelectedTaskAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets task properties by calling getTaskAsync.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the resource as a string.
          type:
            - 'office!Office.Document#getSelectedTaskAsync~1:complex'
  - uid: 'office!Office.Document#getSelectedViewAsync:member(1)'
    summary: Project documents only. Get the current selected View Type (Ex. Gantt) and View Name.
    name: 'getSelectedViewAsync(options, callback)'
    fullName: 'getSelectedViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `viewName` - The name of the view, as a ProjectViewTypes constant.
            `viewType` - The type of view, as the integer value of a ProjectViewTypes constant.
          type:
            - 'office!Office.Document#getSelectedViewAsync~0:complex'
  - uid: 'office!Office.Document#getSelectedViewAsync:member(2)'
    summary: Project documents only. Get the current selected View Type (Ex. Gantt) and View Name.
    name: getSelectedViewAsync(callback)
    fullName: getSelectedViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls adds a ViewSelectionChanged event handler that
          // calls getSelectedViewAsync to get the name and type of the active view in the document.
          // The example assumes your add-in has a reference to the jQuery library and that
          // the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      Office.context.document.addHandlerAsync(
                          Office.EventType.ViewSelectionChanged,
                          getActiveView);
                      getActiveView();
                  });
              };

              // Get the active view's name and type.
              function getActiveView() {
                  Office.context.document.getSelectedViewAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var output = String.format(
                                  'View name: {0}<br/>View type: {1}',
                                  result.value.viewName, viewType);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `viewName` - The name of the view, as a ProjectViewTypes constant.
            `viewType` - The type of view, as the integer value of a ProjectViewTypes constant.
          type:
            - 'office!Office.Document#getSelectedViewAsync~1:complex'
  - uid: 'office!Office.Document#getTaskAsync:member(1)'
    summary: 'Project documents only. Get the Task Name, WSS Task Id, and ResourceNames for given taskId.'
    name: 'getTaskAsync(taskId, options, callback)'
    fullName: 'getTaskAsync(taskId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `taskName` - The name of the task. `wssTaskId` - The ID of the task in
            the synchronized SharePoint task list. If the project is not synchronized with a SharePoint task list, the
            value is 0. `resourceNames` - The comma-separated list of the names of resources that are assigned to the
            task.
          type:
            - 'office!Office.Document#getTaskAsync~0:complex'
  - uid: 'office!Office.Document#getTaskAsync:member(2)'
    summary: 'Project documents only. Get the Task Name, WSS Task Id, and ResourceNames for given taskId.'
    name: 'getTaskAsync(taskId, callback)'
    fullName: 'getTaskAsync(taskId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the task GUID of the currently
          // selected task. Then it calls getTaskAsync to get the properties for the task that are
          // available from the JavaScript API for Office.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `taskName` - The name of the task. `wssTaskId` - The ID of the task in
            the synchronized SharePoint task list. If the project is not synchronized with a SharePoint task list, the
            value is 0. `resourceNames` - The comma-separated list of the names of resources that are assigned to the
            task.
          type:
            - 'office!Office.Document#getTaskAsync~1:complex'
  - uid: 'office!Office.Document#getTaskByIndexAsync:member(1)'
    summary: |-
      Project documents only. Get the GUID of the task that has the specified index in the task collection.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getTaskByIndexAsync(taskIndex, options, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskIndex
          description: The index of the task in the collection of tasks for the project.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the task as a string.
          type:
            - 'office!Office.Document#getTaskByIndexAsync~0:complex'
  - uid: 'office!Office.Document#getTaskByIndexAsync:member(2)'
    summary: |-
      Project documents only. Get the GUID of the task that has the specified index in the task collection.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'getTaskByIndexAsync(taskIndex, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the
          // maximum index in the project's task collection, and then
          // calls getTaskByIndexAsync to get the GUID for each task.
          // The example assumes that your add-in has a reference to the
          // jQuery library and that the following page controls are defined
          // in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskIndex
          description: The index of the task in the collection of tasks for the project.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the GUID of the task as a string.
          type:
            - 'office!Office.Document#getTaskByIndexAsync~1:complex'
  - uid: 'office!Office.Document#getTaskFieldAsync:member(1)'
    summary: Project documents only. Get task field for provided task Id. (Ex. StartDate).
    name: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result:
        AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the `fieldValue` property, which represents the value of the specified field.
          type:
            - 'office!Office.Document#getTaskFieldAsync~0:complex'
  - uid: 'office!Office.Document#getTaskFieldAsync:member(2)'
    summary: Project documents only. Get task field for provided task Id. (Ex. StartDate).
    name: 'getTaskFieldAsync(taskId, fieldId, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected task.
              function getTaskFields(taskGuid) {
                  var output = '';
                  var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];
                  var fieldValues = ['Priority: ', '% Complete: '];
                  var index = 0;
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // Get the field value. If the call is successful, then get the next field.
                      else {
                          Office.context.document.getTaskFieldAsync(
                              taskGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the `fieldValue` property, which represents the value of the specified field.
          type:
            - 'office!Office.Document#getTaskFieldAsync~1:complex'
  - uid: 'office!Office.Document#getWSSUrlAsync:member(1)'
    summary: 'Project documents only. Get the WSS Url and list name for the Tasks List, the MPP is synced too.'
    name: 'getWSSUrlAsync(options, callback)'
    fullName: 'getWSSUrlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `listName` - the name of the synchronized SharePoint task list.
            `serverUrl` - the URL of the synchronized SharePoint task list.
          type:
            - 'office!Office.Document#getWSSUrlAsync~0:complex'
  - uid: 'office!Office.Document#getWSSUrlAsync:member(2)'
    summary: 'Project documents only. Get the WSS Url and list name for the Tasks List, the MPP is synced too.'
    name: getWSSUrlAsync(callback)
    fullName: getWSSUrlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            contains the following properties: `listName` - the name of the synchronized SharePoint task list.
            `serverUrl` - the URL of the synchronized SharePoint task list.
          type:
            - 'office!Office.Document#getWSSUrlAsync~1:complex'
  - uid: 'office!Office.Document#goToByIdAsync:member(1)'
    summary: Goes to the specified object or location in the document.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      PowerPoint doesn't support the goToByIdAsync method in Master Views.


      The behavior caused by the selectionMode option varies by host:


      In Excel: `Office.SelectionMode.Selected` selects all content in the binding, or named item.
      Office.SelectionMode.None for text bindings, selects the cell; for matrix bindings, table bindings, and named
      items, selects the first data cell (not first cell in header row for tables).


      In PowerPoint: `Office.SelectionMode.Selected` selects the slide title or first textbox on the slide.
      `Office.SelectionMode.None` doesn't select anything.


      In Word: `Office.SelectionMode.Selected` selects all content in the binding. Office.SelectionMode.None for text
      bindings, moves the cursor to the beginning of the text; for matrix bindings and table bindings, selects the first
      data cell (not first cell in header row for tables).
    name: 'goToByIdAsync(id, goToType, options, callback)'
    fullName: 'goToByIdAsync(id, goToType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result:
        AsyncResult<any>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: The identifier of the object or location to go to.
          type:
            - string | number
        - id: goToType
          description: The type of the location to go to.
          type:
            - 'office!Office.GoToType:enum'
        - id: options
          description: Provides options for whether to select the location that is navigated to.
          type:
            - 'office!Office.GoToByIdOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the current view.
          type:
            - 'office!Office.Document#goToByIdAsync~0:complex'
  - uid: 'office!Office.Document#goToByIdAsync:member(2)'
    summary: Goes to the specified object or location in the document.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      PowerPoint doesn't support the goToByIdAsync method in Master Views.


      The behavior caused by the selectionMode option varies by host:


      In Excel: `Office.SelectionMode.Selected` selects all content in the binding, or named item.
      Office.SelectionMode.None for text bindings, selects the cell; for matrix bindings, table bindings, and named
      items, selects the first data cell (not first cell in header row for tables).


      In PowerPoint: `Office.SelectionMode.Selected` selects the slide title or first textbox on the slide.
      `Office.SelectionMode.None` doesn't select anything.


      In Word: `Office.SelectionMode.Selected` selects all content in the binding. Office.SelectionMode.None for text
      bindings, moves the cursor to the beginning of the text; for matrix bindings and table bindings, selects the first
      data cell (not first cell in header row for tables).


      #### Examples


      ```javascript

      // Go to a binding by id (Word and Excel)

      // The following example shows how to:

      // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.

      // 2. Specify that binding as the binding to go to.

      // 3. Pass an anonymous callback function that returns the status of the operation

      //    to the callback parameter of the goToByIdAsync method.

      // 4. Display the value on the add-in's page.

      function gotoBinding() {
          // Create a new table binding for the selected table.
          Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
          if (asyncResult.status == "failed") {
                    showMessage("Action failed with error: " + asyncResult.error.message);
                }
                else {
                    showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
                }
          });

          // Go to binding by id.
          Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }


      // Go to a table in a spreadsheet (Excel)

      // The following example shows how to:

      // 1. Specify a table by name as the table to go to.

      // 2. Pass an anonymous callback function that returns the status of the operation

      //    to the callback parameter of the goToByIdAsync method.

      // 3. Display the value on the add-in's page.

      function goToTable() {
          Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }


      // Go to the currently selected slide by id (PowerPoint)

      // The following example shows how to:

      // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.

      // 2. Specify the returned id as the slide to go to.

      // 3. Pass an anonymous callback function that returns the status of the operation

      //    to the callback parameter of the goToByIdAsync method.

      // 4. Display the value of the stringified JSON object returned by asyncResult.value,

      //    which contains information about the selected slides, on the add-in's page.

      var firstSlideId = 0;

      function gotoSelectedSlide() {
          //Get currently selected slide's id
          Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  firstSlideId = asyncResult.value.slides[0].id;
                  app.showNotification(JSON.stringify(asyncResult.value));
              }
          });
          //Go to slide by id.
          Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  app.showNotification("Navigation successful");
              }
          });
      }


      // Go to slide by index (PowerPoint)

      // The following example shows how to:

      // 1. Specify the index of the first, last, previous, or next slide to go to.

      // 2. Pass an anonymous callback function that returns the status of the operation

      //    to the callback parameter of the goToByIdAsync method.

      // 3. Display the value on the add-in's page.

      function goToSlideByIndex() {
          var goToFirst = Office.Index.First;
          var goToLast = Office.Index.Last;
          var goToPrevious = Office.Index.Previous;
          var goToNext = Office.Index.Next;

          Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      ```
    name: 'goToByIdAsync(id, goToType, callback)'
    fullName: 'goToByIdAsync(id, goToType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: The identifier of the object or location to go to.
          type:
            - string | number
        - id: goToType
          description: The type of the location to go to.
          type:
            - 'office!Office.GoToType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is the current view.
          type:
            - 'office!Office.Document#goToByIdAsync~1:complex'
  - uid: 'office!Office.Document#mode:member'
    summary: Gets the mode the document is in.
    name: mode
    fullName: mode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mode: DocumentMode;'
      return:
        type:
          - 'office!Office.DocumentMode:enum'
        description: |-


          #### Examples

          ```javascript
          function displayDocumentMode() {
              write(Office.context.document.mode);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
          ```javascript
          // The following example initializes the add-in and then gets properties of the
          // Document object that are available in the context of a Project document.
          // A Project document is the opened, active project. To access members of the
          // ProjectDocument object, use the Office.context.document object as shown in
          // the code examples for ProjectDocument methods and events.
          // The example assumes your add-in has a reference to the jQuery library and
          // that the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information about the document.
                      showDocumentProperties();
                  });
              };

              // Get the document mode and the URL of the active project.
              function showDocumentProperties() {
                  var output = String.format(
                      'The document mode is {0}.<br/>The URL of the active project is {1}.',
                      Office.context.document.mode,
                      Office.context.document.url);
                  $('#message').html(output);
              }
          })();
          ```
  - uid: 'office!Office.Document#removeHandlerAsync:member(1)'
    summary: Removes an event handler for the specified event type.
    remarks: >-
      **Requirement set**:
      [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result:
        AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event type. For document can be 'Document.SelectionChanged' or 'Document.ActiveViewChanged'.
          type:
            - 'office!Office.EventType:enum'
        - id: options
          description: Provides options to determine which event handler or handlers are removed.
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Document#removeHandlerAsync~0:complex'
  - uid: 'office!Office.Document#removeHandlerAsync:member(2)'
    summary: Removes an event handler for the specified event type.
    remarks: >-
      **Requirement set**:
      [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


      #### Examples


      ```javascript

      // The following example removes the event handler named 'MyHandler'.

      function removeSelectionChangedEventHandler() {
          Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
      }


      function MyHandler(eventArgs) {
          doSomethingWithDocument(eventArgs.document);
      }

      ```

      ```javascript

      // The following code example uses addHandlerAsync to add an event handler for the

      // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.

      // When a resource is selected in a resource view, the handler displays the

      // resource GUID. When the handler is removed, the GUID is not displayed.

      // The example assumes that your add-in has a reference to the jQuery library and

      // that the following page control is defined in the content div in the page body:

      // <input id="remove-handler" type="button" value="Remove handler" /><br />

      // <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
                  $('#remove-handler').click(removeEventHandler);
              });
          };

          // Remove the event handler.
          function removeEventHandler() {
              Office.context.document.removeHandlerAsync(
                  Office.EventType.ResourceSelectionChanged,
                  {handler:getResourceGuid,
                  asyncContext:'The handler is removed.'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#remove-handler').attr('disabled', 'disabled');
                          $('#message').html(result.asyncContext);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event type. For document can be 'Document.SelectionChanged' or 'Document.ActiveViewChanged'.
          type:
            - 'office!Office.EventType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Document#removeHandlerAsync~1:complex'
  - uid: 'office!Office.Document#setResourceFieldAsync:member(1)'
    summary: |-
      Project documents only. Set resource field for specified resource Id.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object,
        options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: fieldValue
          description: Value of the target field.
          type:
            - string | number | boolean | object
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Document#setResourceFieldAsync~0:complex'
  - uid: 'office!Office.Document#setResourceFieldAsync:member(2)'
    summary: |-
      Project documents only. Set resource field for specified resource Id.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object,
        callback?: (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's
          // currently selected in a resource view. Then it sets two resource field values by calling
          // setResourceFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync
          // method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setResourceInfo);
                  });
              };

              // Get the GUID of the resource, and then get the resource fields.
              function setResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          setResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected resource.
              function setResourceFields(resourceGuid) {
                  var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];
                  var fieldValues = [.28, 'Notes for the resource.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setResourceFieldAsync(
                          resourceGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: fieldValue
          description: Value of the target field.
          type:
            - string | number | boolean | object
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Document#setResourceFieldAsync~1:complex'
  - uid: 'office!Office.Document#setSelectedDataAsync:member(1)'
    summary: Writes the specified data into the current selection.
    remarks: >-
      **Requirement sets**:


      -
      [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!--
      -->, (when using `Office.CoercionType.Html`<!-- -->)


      - [ImageCoercion
      1.1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets)
      (when using `Office.CoercionType.Image`<!-- -->)


      -
      [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)
      (when using `Office.CoercionType.Matrix`<!-- -->)


      -
      [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)
      (when using `Office.CoercionType.Ooxml`<!-- -->)


      -
      [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


      -
      [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)
      (when using `Office.CoercionType.Table`<!-- -->)


      -
      [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)
      (when using `Office.CoercionType.Text`<!-- -->)


      - [ImageCoercion
      1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12)
      (when using `Office.CoercionType.XmlSvg`<!-- -->)


      **Application-specific behaviors**


      The following application-specific actions apply when writing data to a selection.


      <table> <tr> <td>Word</td> <td>If there is no selection and the insertion point is at a valid location, the
      specified `data` is inserted at the insertion point</td> <td>If `data` is a string, the specified text is
      inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is an array of arrays ("matrix") or a TableData
      object, a new Word table is inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is HTML, the specified
      HTML is inserted. (**Important**: If any of the HTML you insert is invalid, Word won't raise an error. Word will
      insert as much of the HTML as it can and omits any invalid data).</td> </tr> <tr> <td></td> <td></td> <td>If
      `data` is Office Open XML, the specified XML is inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is a
      base64 encoded image stream, the specified image is inserted.</td> </tr> <tr> <td></td> <td>If there is a
      selection</td> <td>It will be replaced with the specified `data` following the same rules as above.</td> </tr>
      <tr> <td></td> <td>Insert images</td> <td>Inserted images are placed inline. The imageLeft and imageTop parameters
      are ignored. The image aspect ratio is always locked. If only one of the imageWidth and imageHeight parameter is
      given, the other value will be automatically scaled to keep the original aspect ratio.</td> </tr>


      <tr> <td>Excel</td> <td>If a single cell is selected</td> <td>If `data` is a string, the specified text is
      inserted as the value of the current cell.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is an array of arrays
      ("matrix"), the specified set of rows and columns are inserted, if no other data in surrounding cells will be
      overwritten.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is a TableData object, a new Excel table with the
      specified set of rows and headers is inserted, if no other data in surrounding cells will be overwritten.</td>
      </tr> <tr> <td></td> <td>If multiple cells are selected</td> <td>If the shape does not match the shape of
      `data`<!-- -->, an error is returned.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection
      exactly matches the shape of `data`<!-- -->, the values of the selected cells are updated based on the values in
      `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Insert images</td> <td>Inserted images are floating. The position
      imageLeft and imageTop parameters are relative to currently selected cell(s). Negative imageLeft and imageTop
      values are allowed and possibly readjusted by Excel to position the image inside a worksheet. Image aspect ratio
      is locked unless both imageWidth and imageHeight parameters are provided. If only one of the imageWidth and
      imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect
      ratio.</td> </tr> <tr> <td></td> <td>All other cases</td> <td>An error is returned.</td> </tr>


      <tr> <td>Excel on the web</td> <td>In addition to the behaviors described for Excel above, these limits apply when
      writing data in Excel on the web</td> <td>The total number of cells you can write to a worksheet with the `data`
      parameter can't exceed 20,000 in a single call to this method.</td> </tr> <tr> <td></td> <td></td> <td>The number
      of formatting groups passed to the `cellFormat` parameter can't exceed 100. A single formatting group consists of
      a set of formatting applied to a specified range of cells.</td> </tr>


      <tr> <td>PowerPoint</td> <td>Insert image</td> <td>Inserted images are floating. The position imageLeft and
      imageTop parameters are optional but if provided, both should be present. If a single value is provided, it will
      be ignored. Negative imageLeft and imageTop values are allowed and can position an image outside of a slide. If no
      optional parameter is given and slide has a placeholder, the image will replace the placeholder in the slide.
      Image aspect ratio will be locked unless both imageWidth and imageHeight parameters are provided. If only one of
      the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the
      original aspect ratio.</td> </tr> </table>


      **Type-specific behaviors**


      <table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>(Excel only): In Excel builds between 16.0.11526.10000 and
      16.0.12309.10000, there is a 64KB size limitation for SVG insertions.</td> </tr> </table>


      **Hosts**


      The possible values for the [Office.CoercionType](xref:office!Office.CoercionType:enum) parameter vary by the
      host.


      <table> <tr> <th>Host</th> <th>Supported coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project, and
      Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Matrix` (array of arrays)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Table` (TableData object)</td> </tr> <tr> <td>Word</td>
      <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open
      XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr>
      <tr> <td>Excel, PowerPoint, and Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>


      #### Examples


      ```javascript

      // The following example sets the selected text or cell to "Hello World!", 

      // and if that fails, displays the value of the error.message property.

      function writeText() {
          Office.context.document.setSelectedDataAsync("Hello World!",
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write

      // to a selection. The following example writes data as an array of three rows of two columns, 

      // specifying the coercionType as `Matrix` for that data structure, and if that fails, 

      // displays the value of the error.message property.

      function writeMatrix() {
          Office.context.document.setSelectedDataAsync(
              [["Red", "Rojo"], ["Green", "Verde"], ["Blue", "Azul"]],
              {coercionType: Office.CoercionType.Matrix}
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // The following example writes data as a one column table with a header and four rows, 

      // specifying the coercionType as `Table` for that data structure, and if that fails, 

      // displays the value of the error.message property.

      function writeTable() {
          // Build table.
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];

          // Write table.
          Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},
              function (result) {
                  var error = result.error
                  if (result.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  }
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`

      // as shown in the following example, which uses HTML <b> tags to make "Hello" bold.

      function writeHtmlData() {
          Office.context.document.setSelectedDataAsync(
              "<b>Hello</b> World!", {coercionType: Office.CoercionType.Html}, function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write('Error: ' + asyncResult.error.message);
                  }
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType

      // parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.

      function insertPictureAtSelection(base64EncodedImageStr) {

          Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {
              coercionType: Office.CoercionType.Image,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 100,
              imageHeight: 100
          },
          function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  console.log("Action failed with error: " + asyncResult.error.message);
              }
          });
      }


      // In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can
      specify the 

      // coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are
      ignored by Word.

      function insertSvgAtSelection(base64EncodedImageStr) {
          Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {
              coercionType: Office.CoercionType.XmlSvg,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 400
          },
              function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      console.log(asyncResult.error.message);
                  }
              });
      }

      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result:
        AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be set. Either a string or [Office.CoercionType](xref:office!Office.CoercionType:enum) value, 2d
            array or TableData object.


            If the value passed for `data` is:


            - A string: Plain text or anything that can be coerced to a string will be inserted. In Excel, you can also
            specify data as a valid formula to add that formula to the selected cell. For example, setting data to
            "=SUM(A1:A5)" will total the values in the specified range. However, when you set a formula on the bound
            cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell. If
            you call the Document.getSelectedDataAsync method on the selected cell to read its data, the method can
            return only the data displayed in the cell (the formula's result).


            - An array of arrays ("matrix"): Tabular data without headers will be inserted. For example, to write data
            to three rows in two columns, you can pass an array like this: \[\["R1C1", "R1C2"\], \["R2C1", "R2C2"\],
            \["R3C1", "R3C2"\]\]. To write a single column of three rows, pass an array like this: \[\["R1C1"\],
            \["R2C1"\], \["R3C1"\]\]


            In Excel, you can also specify data as an array of arrays that contains valid formulas to add them to the
            selected cells. For example if no other data will be overwritten, setting data to
            \[\["=SUM(A1:A5)","=AVERAGE(A1:A5)"\]\] will add those two formulas to the selection. Just as when setting a
            formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after
            they have been set - you can only read the formulas' results.


            - A TableData object: A table with headers will be inserted. In Excel, if you specify formulas in the
            TableData object you pass for the data parameter, you might not get the results you expect due to the
            "calculated columns" feature of Excel, which automatically duplicates formulas within a column. To work
            around this when you want to write `data` that contains formulas to a selected table, try specifying the
            data as an array of arrays (instead of a TableData object), and specify the coercionType as
            Microsoft.Office.Matrix or "matrix". However, this technique will block the "calculated columns" feature
            only when one of the following conditions is met: (1) you are writing to all the cells of the column, or (2)
            there are already at least two different formulas in the column.
          type:
            - 'office!Office.Document#setSelectedDataAsync~0:complex'
        - id: options
          description: Provides options for how to insert data to the selection.
          type:
            - 'office!Office.SetSelectedDataOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The AsyncResult.value property
            always returns undefined because there is no object or data to retrieve.
          type:
            - 'office!Office.Document#setSelectedDataAsync~1:complex'
  - uid: 'office!Office.Document#setSelectedDataAsync:member(2)'
    summary: Writes the specified data into the current selection.
    remarks: >-
      **Requirement sets**:


      -
      [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!--
      -->, (when using `Office.CoercionType.Html`<!-- -->)


      -
      [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets)
      (when using `Office.CoercionType.Image`<!-- -->)


      -
      [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion)
      (when using `Office.CoercionType.Matrix`<!-- -->)


      -
      [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion)
      (when using `Office.CoercionType.Ooxml`<!-- -->)


      -
      [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


      -
      [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion)
      (when using `Office.CoercionType.Table`<!-- -->)


      -
      [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion)
      (when using `Office.CoercionType.Text`<!-- -->)


      - [ImageCoercion
      1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12)
      (when using `Office.CoercionType.XmlSvg`<!-- -->)


      **Application-specific behaviors**


      The following application-specific actions apply when writing data to a selection.


      <table> <tr> <td>Word</td> <td>If there is no selection and the insertion point is at a valid location, the
      specified `data` is inserted at the insertion point</td> <td>If `data` is a string, the specified text is
      inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is an array of arrays ("matrix") or a TableData
      object, a new Word table is inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is HTML, the specified
      HTML is inserted. (**Important**: If any of the HTML you insert is invalid, Word won't raise an error. Word will
      insert as much of the HTML as it can and omits any invalid data).</td> </tr> <tr> <td></td> <td></td> <td>If
      `data` is Office Open XML, the specified XML is inserted.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is a
      base64 encoded image stream, the specified image is inserted.</td></tr></td> </tr> <tr> <td></td> <td>If there is
      a selection</td> <td>It will be replaced with the specified `data` following the same rules as above.</td> </tr>
      <tr> <td></td> <td>Insert images</td> <td>Inserted images are placed inline. The imageLeft and imageTop parameters
      are ignored. The image aspect ratio is always locked. If only one of the imageWidth and imageHeight parameter is
      given, the other value will be automatically scaled to keep the original aspect ratio.</td> </tr>


      <tr> <td>Excel</td> <td>If a single cell is selected</td> <td>If `data` is a string, the specified text is
      inserted as the value of the current cell.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is an array of arrays
      ("matrix"), the specified set of rows and columns are inserted, if no other data in surrounding cells will be
      overwritten.</td> </tr> <tr> <td></td> <td></td> <td>If `data` is a TableData object, a new Excel table with the
      specified set of rows and headers is inserted, if no other data in surrounding cells will be overwritten.</td>
      </tr> <tr> <td></td> <td>If multiple cells are selected</td><td>If the shape does not match the shape of
      `data`<!-- -->, an error is returned.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection
      exactly matches the shape of `data`<!-- -->, the values of the selected cells are updated based on the values in
      `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Insert images</td> <td>Inserted images are floating. The position
      imageLeft and imageTop parameters are relative to currently selected cell(s). Negative imageLeft and imageTop
      values are allowed and possibly readjusted by Excel to position the image inside a worksheet. Image aspect ratio
      is locked unless both imageWidth and imageHeight parameters are provided. If only one of the imageWidth and
      imageHeight parameter is given, the other value will be automatically scaled to keep the original aspect
      ratio.</td> </tr> <tr> <td></td> <td>All other cases</td> <td>An error is returned.</td> </tr>


      <tr> <td>Excel on the web</td> <td>In addition to the behaviors described for Excel above, these limits apply when
      writing data in Excel on the web</td> <td>The total number of cells you can write to a worksheet with the `data`
      parameter can't exceed 20,000 in a single call to this method.</td> </tr> <tr> <td></td> <td></td> <td>The number
      of formatting groups passed to the `cellFormat` parameter can't exceed 100. A single formatting group consists of
      a set of formatting applied to a specified range of cells.</td> </tr>


      <tr> <td>PowerPoint</td> <td>Insert image</td> <td>Inserted images are floating. The position imageLeft and
      imageTop parameters are optional but if provided, both should be present. If a single value is provided, it will
      be ignored. Negative imageLeft and imageTop values are allowed and can position an image outside of a slide. If no
      optional parameter is given and slide has a placeholder, the image will replace the placeholder in the slide.
      Image aspect ratio will be locked unless both imageWidth and imageHeight parameters are provided. If only one of
      the imageWidth and imageHeight parameter is given, the other value will be automatically scaled to keep the
      original aspect ratio.</td> </tr> </table>


      **Type-specific behaviors**


      <table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>(Excel only): There is a 64KB size limitation for SVG
      insertions as of build 16.0.11526.10000.</td> </tr> </table>


      **Hosts**


      The possible values for the [Office.CoercionType](xref:office!Office.CoercionType:enum) parameter vary by the
      host.


      <table> <tr> <th>Host</th> <th>Supported coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project, and
      Word</td> <td>`Office.CoercionType.Text` (string)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Matrix` (array of arrays)</td> </tr> <tr> <td>Excel and Word</td>
      <td>`Office.CoercionType.Table` (TableData object)</td> </tr> <tr> <td>Word</td>
      <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open
      XML)</td> </tr> <tr> <td>PowerPoint on the web and Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr>
      <tr> <td>Excel, PowerPoint, and Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be set. Either a string or [Office.CoercionType](xref:office!Office.CoercionType:enum) value, 2d
            array or TableData object.


            If the value passed for `data` is:


            - A string: Plain text or anything that can be coerced to a string will be inserted. In Excel, you can also
            specify data as a valid formula to add that formula to the selected cell. For example, setting data to
            "=SUM(A1:A5)" will total the values in the specified range. However, when you set a formula on the bound
            cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell. If
            you call the Document.getSelectedDataAsync method on the selected cell to read its data, the method can
            return only the data displayed in the cell (the formula's result).


            - An array of arrays ("matrix"): Tabular data without headers will be inserted. For example, to write data
            to three rows in two columns, you can pass an array like this: \[\["R1C1", "R1C2"\], \["R2C1", "R2C2"\],
            \["R3C1", "R3C2"\]\]. To write a single column of three rows, pass an array like this: \[\["R1C1"\],
            \["R2C1"\], \["R3C1"\]\]


            In Excel, you can also specify data as an array of arrays that contains valid formulas to add them to the
            selected cells. For example if no other data will be overwritten, setting data to
            \[\["=SUM(A1:A5)","=AVERAGE(A1:A5)"\]\] will add those two formulas to the selection. Just as when setting a
            formula on a single cell as "text", you can't read the added formulas (or any pre-existing formulas) after
            they have been set - you can only read the formulas' results.


            - A TableData object: A table with headers will be inserted. In Excel, if you specify formulas in the
            TableData object you pass for the data parameter, you might not get the results you expect due to the
            "calculated columns" feature of Excel, which automatically duplicates formulas within a column. To work
            around this when you want to write `data` that contains formulas to a selected table, try specifying the
            data as an array of arrays (instead of a TableData object), and specify the coercionType as
            Microsoft.Office.Matrix or "matrix". However, this technique will block the "calculated columns" feature
            only when one of the following conditions is met: (1) you are writing to all the cells of the column, or (2)
            there are already at least two different formulas in the column.
          type:
            - 'office!Office.Document#setSelectedDataAsync~2:complex'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The AsyncResult.value property
            always returns undefined because there is no object or data to retrieve.
          type:
            - 'office!Office.Document#setSelectedDataAsync~3:complex'
  - uid: 'office!Office.Document#setTaskFieldAsync:member(1)'
    summary: |-
      Project documents only. Set task field for specified task Id.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?:
        Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: fieldValue
          description: Value of the target field.
          type:
            - string | number | boolean | object
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Document#setTaskFieldAsync~0:complex'
  - uid: 'office!Office.Document#setTaskFieldAsync:member(2)'
    summary: |-
      Project documents only. Set task field for specified task Id.

      **Important**: This API works only in Project 2016 on Windows desktop.
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?:
        (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's
          // currently selected in a task view. Then it sets two task field values by calling
          // setTaskFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the
          // addHandlerAsync method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function setTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          setTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected task.
              function setTaskFields(taskGuid) {
                  var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];
                  var fieldValues = [true, 'Notes for the task.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setTaskFieldAsync(
                          taskGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: fieldValue
          description: Value of the target field.
          type:
            - string | number | boolean | object
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Document#setTaskFieldAsync~1:complex'
  - uid: 'office!Office.Document#settings:member'
    summary: >-
      Gets an object that represents the saved custom settings of the content or task pane add-in for the current
      document.
    name: settings
    fullName: settings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'settings: Settings;'
      return:
        type:
          - 'office!Office.Settings:interface'
  - uid: 'office!Office.Document#url:member'
    summary: Gets the URL of the document that the host application currently has open. Returns null if the URL is unavailable.
    name: url
    fullName: url
    langs:
      - typeScript
    type: property
    syntax:
      content: 'url: string;'
      return:
        type:
          - string
        description: |-


          #### Examples

          ```javascript
          function displayDocumentUrl() {
              write(Office.context.document.url);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.Document#addHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#addHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Bindings:interface'
    name: Bindings
  - uid: 'office!Office.CustomXmlParts:interface'
    name: CustomXmlParts
  - uid: 'office!Office.Document#getActiveViewAsync~0:complex'
    name: '(result: AsyncResult<"edit" | "read">) => void'
    fullName: '(result: Office.AsyncResult<"edit" | "read">) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <"edit" | "read">) => void
        fullName: <"edit" | "read">) => void
  - uid: 'office!Office.Document#getActiveViewAsync~1:complex'
    name: '(result: AsyncResult<"edit" | "read">) => void'
    fullName: '(result: Office.AsyncResult<"edit" | "read">) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <"edit" | "read">) => void
        fullName: <"edit" | "read">) => void
  - uid: 'office!Office.FileType:enum'
    name: FileType
  - uid: 'office!Office.GetFileOptions:interface'
    name: GetFileOptions
  - uid: 'office!Office.Document#getFileAsync~0:complex'
    name: '(result: AsyncResult<Office.File>) => void'
    fullName: '(result: Office.AsyncResult<Office.File>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.File:interface'
        name: Office.File
        fullName: Office.File
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.Document#getFileAsync~1:complex'
    name: '(result: AsyncResult<Office.File>) => void'
    fullName: '(result: Office.AsyncResult<Office.File>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.File:interface'
        name: Office.File
        fullName: Office.File
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.Document#getFilePropertiesAsync~0:complex'
    name: '(result: AsyncResult<Office.FileProperties>) => void'
    fullName: '(result: Office.AsyncResult<Office.FileProperties>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.FileProperties:interface'
        name: Office.FileProperties
        fullName: Office.FileProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.Document#getFilePropertiesAsync~1:complex'
    name: '(result: AsyncResult<Office.FileProperties>) => void'
    fullName: '(result: Office.AsyncResult<Office.FileProperties>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.FileProperties:interface'
        name: Office.FileProperties
        fullName: Office.FileProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.Document#getMaxResourceIndexAsync~0:complex'
    name: '(result: AsyncResult<number>) => void'
    fullName: '(result: Office.AsyncResult<number>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <number>) => void
        fullName: <number>) => void
  - uid: 'office!Office.Document#getMaxResourceIndexAsync~1:complex'
    name: '(result: AsyncResult<number>) => void'
    fullName: '(result: Office.AsyncResult<number>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <number>) => void
        fullName: <number>) => void
  - uid: 'office!Office.Document#getMaxTaskIndexAsync~0:complex'
    name: '(result: AsyncResult<number>) => void'
    fullName: '(result: Office.AsyncResult<number>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <number>) => void
        fullName: <number>) => void
  - uid: 'office!Office.Document#getMaxTaskIndexAsync~1:complex'
    name: '(result: AsyncResult<number>) => void'
    fullName: '(result: Office.AsyncResult<number>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <number>) => void
        fullName: <number>) => void
  - uid: 'office!Office.Document#getProjectFieldAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getProjectFieldAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getResourceByIndexAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getResourceByIndexAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getResourceFieldAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getResourceFieldAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CoercionType:enum'
    name: Office.CoercionType
  - uid: 'office!Office.GetSelectedDataOptions:interface'
    name: GetSelectedDataOptions
  - uid: 'office!Office.Document#getSelectedDataAsync~0:complex'
    name: '(result: AsyncResult<T>) => void'
    fullName: '(result: Office.AsyncResult<T>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <T>) => void
        fullName: <T>) => void
  - uid: 'office!Office.Document#getSelectedDataAsync~1:complex'
    name: '(result: AsyncResult<T>) => void'
    fullName: '(result: Office.AsyncResult<T>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <T>) => void
        fullName: <T>) => void
  - uid: 'office!Office.Document#getSelectedResourceAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getSelectedResourceAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getSelectedTaskAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getSelectedTaskAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getSelectedViewAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getSelectedViewAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getTaskAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getTaskAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getTaskByIndexAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getTaskByIndexAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getTaskFieldAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getTaskFieldAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getWSSUrlAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getWSSUrlAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.GoToType:enum'
    name: GoToType
  - uid: 'office!Office.GoToByIdOptions:interface'
    name: GoToByIdOptions
  - uid: 'office!Office.Document#goToByIdAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#goToByIdAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.DocumentMode:enum'
    name: DocumentMode
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.Document#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setResourceFieldAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setResourceFieldAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setSelectedDataAsync~0:complex'
    name: 'string | TableData | any[][]'
    fullName: 'string | Office.TableData | any[][]'
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any[][]'
        fullName: ' | any[][]'
  - uid: 'office!Office.SetSelectedDataOptions:interface'
    name: SetSelectedDataOptions
  - uid: 'office!Office.Document#setSelectedDataAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setSelectedDataAsync~2:complex'
    name: 'string | TableData | any[][]'
    fullName: 'string | Office.TableData | any[][]'
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any[][]'
        fullName: ' | any[][]'
  - uid: 'office!Office.Document#setSelectedDataAsync~3:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setTaskFieldAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setTaskFieldAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings:interface'
    name: Settings
