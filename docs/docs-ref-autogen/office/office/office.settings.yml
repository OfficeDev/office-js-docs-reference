### YamlMime:UniversalReference
items:
  - uid: 'office!Office.Settings:interface'
    summary: >-
      Represents custom settings for a task pane or content add-in that are stored in the host document as name/value
      pairs.
    remarks: >-
      **Hosts**: Excel, PowerPoint, Word


      The settings created by using the methods of the Settings object are saved per add-in and per document. That is,
      they are available only to the add-in that created them, and only from the document in which they are saved.


      The name of a setting is a string, while the value can be a string, number, boolean, null, object, or array.


      The Settings object is automatically loaded as part of the Document object, and is available by calling the
      settings property of that object when the add-in is activated.


      The developer is responsible for calling the saveAsync method after adding or deleting settings to save the
      settings in the document.
    name: Office.Settings
    fullName: Office.Settings
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.Settings#addHandlerAsync:member(1)'
      - 'office!Office.Settings#addHandlerAsync:member(2)'
      - 'office!Office.Settings#get:member(1)'
      - 'office!Office.Settings#refreshAsync:member(1)'
      - 'office!Office.Settings#remove:member(1)'
      - 'office!Office.Settings#removeHandlerAsync:member(1)'
      - 'office!Office.Settings#removeHandlerAsync:member(2)'
      - 'office!Office.Settings#saveAsync:member(1)'
      - 'office!Office.Settings#saveAsync:member(2)'
      - 'office!Office.Settings#set:member(1)'
  - uid: 'office!Office.Settings#addHandlerAsync:member(1)'
    summary: >-
      Adds an event handler for the settingsChanged event.


      **Important**: Your add-in's code can register a handler for the settingsChanged event when the add-in is running
      with any Excel client, but the event will fire only when the add-in is loaded with a spreadsheet that is opened in
      Excel on the web, and more than one user is editing the spreadsheet (coauthoring). Therefore, effectively the
      settingsChanged event is supported only in Excel on the web in coauthoring scenarios.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?:
        (result: AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Specifies the type of event to add. Required.
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of type
            [Office.SettingsChangedEventArgs](xref:office!Office.SettingsChangedEventArgs:interface)<!-- -->. Required.
          type:
            - any
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.


            <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
            undefined because there is no data or object to retrieve when adding an event handler.</td> </tr> <tr>
            <td>AsyncResult.status</td> <td>Determine the success or failure of the operation.</td> </tr> <tr>
            <td>AsyncResult.error</td> <td>Access an Error object that provides error information if the operation
            failed.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is
            returned in the AsyncResult object without being altered.</td> </tr> </table>
          type:
            - 'office!Office.Settings#addHandlerAsync~0:complex'
  - uid: 'office!Office.Settings#addHandlerAsync:member(2)'
    summary: >-
      Adds an event handler for the settingsChanged event.


      **Important**: Your add-in's code can register a handler for the settingsChanged event when the add-in is running
      with any Excel client, but the event will fire only when the add-in is loaded with a spreadsheet that is opened in
      Excel on the web, and more than one user is editing the spreadsheet (coauthoring). Therefore, effectively the
      settingsChanged event is supported only in Excel on the web in coauthoring scenarios.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.


      #### Examples


      ```javascript

      function addSelectionChangedEventHandler() {
          Office.context.document.settings.addHandlerAsync(Office.EventType.SettingsChanged, MyHandler);
      }


      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithSettings(eventArgs.settings);
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Specifies the type of event to add. Required.
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of type
            [Office.SettingsChangedEventArgs](xref:office!Office.SettingsChangedEventArgs:interface)<!-- -->. Required.
          type:
            - any
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.


            <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
            undefined because there is no data or object to retrieve when adding an event handler.</td> </tr> <tr>
            <td>AsyncResult.status</td> <td>Determine the success or failure of the operation.</td> </tr> <tr>
            <td>AsyncResult.error</td> <td>Access an Error object that provides error information if the operation
            failed.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is
            returned in the AsyncResult object without being altered.</td> </tr> </table>
          type:
            - 'office!Office.Settings#addHandlerAsync~1:complex'
  - uid: 'office!Office.Settings#get:member(1)'
    summary: Retrieves the specified setting.
    remarks: >-
      **Requirement set**:
      [Settings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)


      #### Examples


      ```javascript

      function displayMySetting() {
          write('Current value for mySetting: ' + Office.context.document.settings.get('mySetting'));
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: get(name)
    fullName: get(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'get(name: string): any;'
      return:
        type:
          - any
        description: An object that has property names mapped to JSON serialized values.
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'office!Office.Settings#refreshAsync:member(1)'
    summary: >-
      Reads all settings persisted in the document and refreshes the content or task pane add-in's copy of those
      settings held in memory.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      This method is useful in Excel, Word, and PowerPoint coauthoring scenarios when multiple instances of the same
      add-in are working against the same document. Because each add-in is working against an in-memory copy of the
      settings loaded from the document at the time the user opened it, the settings values used by each user can get
      out of sync. This can happen whenever an instance of the add-in calls the Settings.saveAsync method to persist all
      of that user's settings to the document. Calling the refreshAsync method from the event handler for the
      settingsChanged event of the add-in will refresh the settings values for all users.


      In the callback function passed to the refreshAsync method, you can use the properties of the AsyncResult object
      to return the following information.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Access a Settings
      object with the refreshed values.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determine the success or failure
      of the operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an Error object that provides error
      information if the operation failed.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>A user-defined item of
      any type that is returned in the AsyncResult object without being altered.</td> </tr> </table>


      #### Examples


      ```javascript

      function refreshSettings() {
          Office.context.document.settings.refreshAsync(function (asyncResult) {
              write('Settings refreshed with status: ' + asyncResult.status);
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: refreshAsync(callback)
    fullName: refreshAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAsync(callback?: (result: AsyncResult<Office.Settings>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. The `value` property of the result
            is an [Office.Settings](xref:office!Office.Settings:interface) object with the refreshed values.
          type:
            - 'office!Office.Settings#refreshAsync~0:complex'
  - uid: 'office!Office.Settings#remove:member(1)'
    summary: >-
      Removes the specified setting.


      **Important**: Be aware that the Settings.remove method affects only the in-memory copy of the settings property
      bag. To persist the removal of the specified setting in the document, at some point after calling the
      Settings.remove method and before the add-in is closed, you must call the Settings.saveAsync method.
    remarks: >-
      **Requirement set**:
      [Settings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)


      null is a valid value for a setting. Therefore, assigning null to the setting will not remove it from the settings
      property bag.


      #### Examples


      ```javascript

      function removeMySetting() {
          Office.context.document.settings.remove('mySetting');
      }

      ```
    name: remove(name)
    fullName: remove(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'remove(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'office!Office.Settings#removeHandlerAsync:member(1)'
    summary: Removes an event handler for the settingsChanged event.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      If the optional handler parameter is omitted when calling the removeHandlerAsync method, all event handlers for
      the specified eventType will be removed.


      When the function you passed to the callback parameter executes, it receives an AsyncResult object that you can
      access from the callback function's only parameter.


      In the callback function passed to the removeHandlerAsync method, you can use the properties of the AsyncResult
      object to return the following information.
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result:
        AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Specifies the type of event to remove. Required.
          type:
            - 'office!Office.EventType:enum'
        - id: options
          description: Provides options to determine which event handler or handlers are removed.
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Settings#removeHandlerAsync~0:complex'
  - uid: 'office!Office.Settings#removeHandlerAsync:member(2)'
    summary: Removes an event handler for the settingsChanged event.
    remarks: >-
      **Requirement set**: [Not in a
      set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


      If the optional handler parameter is omitted when calling the removeHandlerAsync method, all event handlers for
      the specified eventType will be removed.


      When the function you passed to the callback parameter executes, it receives an AsyncResult object that you can
      access from the callback function's only parameter.


      In the callback function passed to the removeHandlerAsync method, you can use the properties of the AsyncResult
      object to return the following information.


      #### Examples


      ```javascript

      function removeSettingsChangedEventHandler() {
          Office.context.document.settings.removeHandlerAsync(Office.EventType.SettingsChanged, MyHandler);
      }


      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithSettings(eventArgs.settings);
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Specifies the type of event to remove. Required.
          type:
            - 'office!Office.EventType:enum'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Settings#removeHandlerAsync~1:complex'
  - uid: 'office!Office.Settings#saveAsync:member(1)'
    summary: Persists the in-memory copy of the settings property bag in the document.
    remarks: >-
      **Requirement set**:
      [Settings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)


      Any settings previously saved by an add-in are loaded when it is initialized, so during the lifetime of the
      session you can just use the set and get methods to work with the in-memory copy of the settings property bag.
      When you want to persist the settings so that they are available the next time the add-in is used, use the
      saveAsync method.


      **Note**: The saveAsync method persists the in-memory settings property bag into the document file. However, the
      changes to the document file itself are saved only when the user (or AutoRecover setting) saves the document to
      the file system. The refreshAsync method is only useful in coauthoring scenarios when other instances of the same
      add-in might change the settings and those changes should be made available to all instances.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
      undefined because there is no object or data to retrieve.</td> </tr> <tr> <td>AsyncResult.status</td>
      <td>Determine the success or failure of the operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an
      Error object that provides error information if the operation failed.</td> </tr> <tr>
      <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is returned in the AsyncResult object
      without being altered.</td> </tr> </table>
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options?: SaveSettingsOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Provides options for saving settings.
          type:
            - 'office!Office.SaveSettingsOptions:interface'
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Settings#saveAsync~0:complex'
  - uid: 'office!Office.Settings#saveAsync:member(2)'
    summary: Persists the in-memory copy of the settings property bag in the document.
    remarks: >-
      **Requirement set**:
      [Settings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)


      Any settings previously saved by an add-in are loaded when it is initialized, so during the lifetime of the
      session you can just use the set and get methods to work with the in-memory copy of the settings property bag.
      When you want to persist the settings so that they are available the next time the add-in is used, use the
      saveAsync method.


      **Note**: The saveAsync method persists the in-memory settings property bag into the document file. However, the
      changes to the document file itself are saved only when the user (or AutoRecover setting) saves the document to
      the file system. The refreshAsync method is only useful in coauthoring scenarios when other instances of the same
      add-in might change the settings and those changes should be made available to all instances.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
      undefined because there is no object or data to retrieve.</td> </tr> <tr> <td>AsyncResult.status</td>
      <td>Determine the success or failure of the operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an
      Error object that provides error information if the operation failed.</td> </tr> <tr>
      <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is returned in the AsyncResult object
      without being altered.</td> </tr> </table>


      #### Examples


      ```javascript

      function persistSettings() {
          Office.context.document.settings.saveAsync(function (asyncResult) {
              write('Settings saved with status: ' + asyncResult.status);
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
          type:
            - 'office!Office.Settings#saveAsync~1:complex'
  - uid: 'office!Office.Settings#set:member(1)'
    summary: >-
      Sets or creates the specified setting.


      **Important**: Be aware that the Settings.set method affects only the in-memory copy of the settings property bag.
      To make sure that additions or changes to settings will be available to your add-in the next time the document is
      opened, at some point after calling the Settings.set method and before the add-in is closed, you must call the
      Settings.saveAsync method to persist settings in the document.
    remarks: >-
      **Requirement set**:
      [Settings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)


      The set method creates a new setting of the specified name if it does not already exist, or sets an existing
      setting of the specified name in the in-memory copy of the settings property bag. After you call the
      Settings.saveAsync method, the value is stored in the document as the serialized JSON representation of its data
      type.


      #### Examples


      ```javascript

      function setMySetting() {
          Office.context.document.settings.set('mySetting', 'mySetting value');
      }

      ```
    name: 'set(name, value)'
    fullName: 'set(name, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(name: string, value: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: value
          description: Specifies the value to be stored.
          type:
            - any
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.Settings#addHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings#addHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings#refreshAsync~0:complex'
    name: '(result: AsyncResult<Office.Settings>) => void'
    fullName: '(result: Office.AsyncResult<Office.Settings>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.Settings:interface'
        name: Office.Settings
        fullName: Office.Settings
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.Settings#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.SaveSettingsOptions:interface'
    name: SaveSettingsOptions
  - uid: 'office!Office.Settings#saveAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings#saveAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
