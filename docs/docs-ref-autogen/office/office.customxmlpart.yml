### YamlMime:UniversalReference
items:
  - uid: office.Office.CustomXmlPart
    summary: 'Represents a single CustomXMLPart in an [Office.CustomXmlParts](xref:office.Office.CustomXmlParts) collection.'
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>


      **Support details**


      A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this interface.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><th> Word </th><td> Y </td><td> Y </td><td> Y </td></tr>
      </table>
    name: Office.CustomXmlPart
    fullName: office.Office.CustomXmlPart
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.CustomXmlPart.addHandlerAsync
      - office.Office.CustomXmlPart.builtIn
      - office.Office.CustomXmlPart.deleteAsync
      - office.Office.CustomXmlPart.getNodesAsync
      - office.Office.CustomXmlPart.getXmlAsync
      - office.Office.CustomXmlPart.id
      - office.Office.CustomXmlPart.namespaceManager
      - office.Office.CustomXmlPart.removeHandlerAsync
  - uid: office.Office.CustomXmlPart.addHandlerAsync
    summary: Adds an event handler to the object using the specified event type.
    remarks: >-
      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.

      #### Examples


      ```javascript

      // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.

      function addNodeDeletedEvent() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                  write("A node has been deleted.");
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message;
      }

      ```

      ```javascript

      // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.

      function addNodeInsertedEvent() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                  write("A node has been inserted.");
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message;
      }

      ```

      ```javascript

      // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.

      function addNodeReplacedEvent() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                  write("A node has been replaced.");
              });
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message;
      }

      ```
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: office.Office.CustomXmlPart.addHandlerAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?:
        Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: >-
            Specifies the type of event to add. For a CustomXmlPart object, the eventType parameter can be specified as
            `Office.EventType.NodeDeleted`, `Office.EventType.NodeInserted`, and `Office.EventType.NodeReplaced`.
          type:
            - Office.EventType
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of
            type[Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)<!-- -->,
            [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->, or
            [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)
          type:
            - '(result: any) => void'
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlPart.builtIn
    summary: 'True, if the custom XML part is built in; otherwise false.'
    name: builtIn
    fullName: office.Office.CustomXmlPart.builtIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'builtIn: boolean;'
      return:
        type:
          - boolean
        description: |-

          #### Examples

          ```javascript
          function showXMLPartBuiltIn() {
              Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.builtIn);
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.CustomXmlPart.deleteAsync
    summary: Deletes the Custom XML Part.
    name: 'deleteAsync(options, callback)'
    fullName: office.Office.CustomXmlPart.deleteAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: |-

          #### Examples

          ```javascript
          function deleteXMLPart() {
              Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.deleteAsync(function (eventArgs) {
                      write("The XML Part has been deleted.");
                  });
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlPart.getNodesAsync
    summary: Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.
    name: 'getNodesAsync(xPath, options, callback)'
    fullName: office.Office.CustomXmlPart.getNodesAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: |-

          #### Examples

          ```javascript
          function showXmlNodeType() {
              Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.getNodesAsync('*/*', function (nodeResults) {
                      for (i = 0; i < nodeResults.value.length; i++) {
                          var node = nodeResults.value[i];
                          write(node.nodeType);
                      }
                  });
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
      parameters:
        - id: xPath
          description: An XPath expression that specifies the nodes you want returned. Required.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlPart.getXmlAsync
    summary: Asynchronously gets the XML inside this custom XML part.
    name: 'getXmlAsync(options, callback)'
    fullName: office.Office.CustomXmlPart.getXmlAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: |-

          #### Examples

          ```javascript
          function showXMLPartInnerXML() {
              Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.getXmlAsync({}, function (eventArgs) {
                      write(eventArgs.value);
                  });
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlPart.id
    summary: Gets the GUID of the CustomXMLPart.
    name: id
    fullName: office.Office.CustomXmlPart.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-

          #### Examples

          ```javascript
          function showXMLPartBuiltId() {
              Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.id);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.CustomXmlPart.namespaceManager
    summary: >-
      Gets the set of namespace prefix mappings
      ([Office.CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)<!-- -->) used against the current
      CustomXMLPart.
    name: namespaceManager
    fullName: office.Office.CustomXmlPart.namespaceManager
    langs:
      - typeScript
    type: property
    syntax:
      content: 'namespaceManager: CustomXmlPrefixMappings;'
      return:
        type:
          - office.Office.CustomXmlPrefixMappings
        description: |-

          #### Examples

          ```javascript
          function setXMLPartNamespaceManagerNamespace() {
              Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.namespaceManager.addNamespaceAsync("myPrefix", "myNamespace");
              });
          }
          ```
  - uid: office.Office.CustomXmlPart.removeHandlerAsync
    summary: Removes an event handler for the specified event type.
    name: 'removeHandlerAsync(eventType, handler, options, callback)'
    fullName: office.Office.CustomXmlPart.removeHandlerAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions,
        callback?: (result: AsyncResult) => void): void;
      return:
        type:
          - void
        description: |-

          #### Examples

          ```javascript
          function removeNodeInsertedEventHandler() {
              Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
                  function (result) {
                      var xmlPart = result.value;
                      xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
              });
          }
          ```
      parameters:
        - id: eventType
          description: >-
            Specifies the type of event to remove. For a CustomXmlPart object, the eventType parameter can be specified
            as `Office.EventType.NodeDeleted`, `Office.EventType.NodeInserted`, and `Office.EventType.NodeReplaced`.
          type:
            - Office.EventType
        - id: handler
          description: The name of the handler to remove.
          type:
            - '(result: any) => void'
        - id: options
          description: Provides options to determine which event handler or handlers are removed.
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
