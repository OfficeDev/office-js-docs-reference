### YamlMime:UniversalReference
items:
  - uid: office.Office.Context
    summary: Represents the runtime environment of the add-in and provides access to key objects of the API.
    remarks: 'Hosts: Access, Excel, Outlook, PowerPoint, Project, Word'
    name: Office.Context
    fullName: office.Office.Context
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Context.auth
      - office.Office.Context.commerceAllowed
      - office.Office.Context.contentLanguage
      - office.Office.Context.diagnostics
      - office.Office.Context.displayLanguage
      - office.Office.Context.document
      - office.Office.Context.host
      - office.Office.Context.license
      - office.Office.Context.mailbox
      - office.Office.Context.officeTheme
      - office.Office.Context.platform
      - office.Office.Context.requirements
      - office.Office.Context.roamingSettings
      - office.Office.Context.touchEnabled
      - office.Office.Context.ui
  - uid: office.Office.Context.auth
    summary: Provides information and access to the signed-in user.
    name: auth
    fullName: office.Office.Context.auth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'auth: Auth;'
      return:
        type:
          - Auth
  - uid: office.Office.Context.commerceAllowed
    summary: 'True, if the current platform allows the add-in to display a UI for selling or upgrading; otherwise returns False.'
    remarks: >-
      The iOS App Store doesn't support apps with add-ins that provide links to additional payment systems. However,
      Office Add-ins running on the Windows desktop or for Office Online in the browser, do allow such links. If you
      want the UI of your add-in to provide a link to an external payment system on platforms other than iOS, you can
      use the commerceAllowed property to control when that link is displayed.
    name: commerceAllowed
    fullName: office.Office.Context.commerceAllowed
    langs:
      - typeScript
    type: property
    syntax:
      content: 'commerceAllowed: boolean;'
      return:
        type:
          - boolean
  - uid: office.Office.Context.contentLanguage
    summary: Gets the locale (language) specified by the user for editing the document or item.
    name: contentLanguage
    fullName: office.Office.Context.contentLanguage
    langs:
      - typeScript
    type: property
    syntax:
      content: 'contentLanguage: string;'
      return:
        type:
          - string
    remarks: |


      #### Examples

      ```javascript
      function sayHelloWithContentLanguage() {
          var myContentLanguage = Office.context.contentLanguage;
          switch (myContentLanguage) {
              case 'en-US':
                  write('Hello!');
                  break;
              case 'en-NZ':
                  write('G\'day mate!');
                  break;
          }
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
  - uid: office.Office.Context.diagnostics
    summary: Gets information about the environment in which the add-in is running.
    name: diagnostics
    fullName: office.Office.Context.diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: ContextInformation;'
      return:
        type:
          - ContextInformation
  - uid: office.Office.Context.displayLanguage
    summary: Gets the locale (language) specified by the user for the UI of the Office host application.
    remarks: |
      When using in Outlook,the applicable modes are Compose or read.

      #### Examples

      ```javascript
      function sayHelloWithDisplayLanguage() {
          var myDisplayLanguage = Office.context.displayLanguage;
          switch (myDisplayLanguage) {
              case 'en-US':
                  write('Hello!');
                  break;
              case 'en-NZ':
                  write('G\'day mate!');
                  break;
          }
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: displayLanguage
    fullName: office.Office.Context.displayLanguage
    langs:
      - typeScript
    type: property
    syntax:
      content: 'displayLanguage: string;'
      return:
        type:
          - string
  - uid: office.Office.Context.document
    summary: Gets an object that represents the document the content or task pane add-in is interacting with.
    name: document
    fullName: office.Office.Context.document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'document: Document;'
      return:
        type:
          - Document
    remarks: |


      #### Examples

      ```javascript
      // Extension initialization code.
      var _document;

      // The initialize function is required for all add-ins.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
          // After the DOM is loaded, code specific to the add-in can run.
          // Initialize instance variables to access API objects.
          _document = Office.context.document;
          });
      }
      ```
  - uid: office.Office.Context.host
    summary: Contains the Office application host in which the add-in is running.
    name: host
    fullName: office.Office.Context.host
    langs:
      - typeScript
    type: property
    syntax:
      content: 'host: HostType;'
      return:
        type:
          - HostType
  - uid: office.Office.Context.license
    summary: Gets the license information for the user's Office installation.
    name: license
    fullName: office.Office.Context.license
    langs:
      - typeScript
    type: property
    syntax:
      content: 'license: string;'
      return:
        type:
          - string
  - uid: office.Office.Context.mailbox
    summary: |-
      Provides access to the Outlook Add-in object model for Microsoft Outlook and Microsoft Outlook on the web.

      Namespaces:

      - diagnostics: Provides diagnostic information to an Outlook add-in.

      - item: Provides methods and properties for accessing a message or appointment in an Outlook add-in.

      - userProfile: Provides information about the user in an Outlook add-in.

      \[ [API set: Mailbox 1.0](/javascript/office/javascript-api-for-office) \]
    remarks: >
      [Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->: Restricted


      Applicable Outlook mode: Compose or read


      #### Examples


      ```javascript

      // The following line of code access the item object of the JavaScript API for Office.

      var item = Office.context.mailbox.item;

      ```
    name: mailbox
    fullName: office.Office.Context.mailbox
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mailbox: Mailbox;'
      return:
        type:
          - Mailbox
  - uid: office.Office.Context.officeTheme
    summary: Provides access to the properties for Office theme colors.
    name: officeTheme
    fullName: office.Office.Context.officeTheme
    langs:
      - typeScript
    type: property
    syntax:
      content: 'officeTheme: OfficeTheme;'
      return:
        type:
          - OfficeTheme
    remarks: |


      #### Examples

      ```javascript
      function applyOfficeTheme(){
          // Get office theme colors.
          var bodyBackgroundColor = Office.context.officeTheme.bodyBackgroundColor;
          var bodyForegroundColor = Office.context.officeTheme.bodyForegroundColor;
          var controlBackgroundColor = Office.context.officeTheme.controlBackgroundColor
          var controlForegroundColor = Office.context.officeTheme.controlForegroundColor;

          // Apply body background color to a CSS class.
          $('.body').css('background-color', bodyBackgroundColor);
      }
      ```
  - uid: office.Office.Context.platform
    summary: Provides the platform on which the add-in is running.
    name: platform
    fullName: office.Office.Context.platform
    langs:
      - typeScript
    type: property
    syntax:
      content: 'platform: PlatformType;'
      return:
        type:
          - PlatformType
  - uid: office.Office.Context.requirements
    summary: Provides a method for determining what requirement sets are supported on the current host and platform.
    name: requirements
    fullName: office.Office.Context.requirements
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requirements: RequirementSetSupport;'
      return:
        type:
          - RequirementSetSupport
  - uid: office.Office.Context.roamingSettings
    summary: >-
      Gets an object that represents the custom settings or state of a mail add-in saved to a user's mailbox.


      The RoamingSettings object lets you store and access data for a mail add-in that is stored in a user's mailbox, so
      that is available to that add-in when it is running from any host client application used to access that mailbox.


      \[ [API set: Mailbox 1.0](/javascript/office/javascript-api-for-office) \]
    remarks: >-
      [Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->: Restricted


      Applicable Outlook mode: Compose or read
    name: roamingSettings
    fullName: office.Office.Context.roamingSettings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'roamingSettings: RoamingSettings;'
      return:
        type:
          - RoamingSettings
  - uid: office.Office.Context.touchEnabled
    summary: Specifies whether the platform and device allows touch interaction.
    remarks: >-
      Use the touchEnabled property to determine when your add-in is running on a touch device and if necessary, adjust
      the kind of controls, and size and spacing of elements in your add-in's UI to accommodate touch interactions.
    name: touchEnabled
    fullName: office.Office.Context.touchEnabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'touchEnabled: boolean;'
      return:
        type:
          - boolean
  - uid: office.Office.Context.ui
    summary: 'Provides objects and methods that you can use to create and manipulate UI components, such as dialog boxes.'
    name: ui
    fullName: office.Office.Context.ui
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ui: UI;'
      return:
        type:
          - UI
