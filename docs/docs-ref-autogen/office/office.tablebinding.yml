### YamlMime:UniversalReference
items:
  - uid: office.Office.TableBinding
    summary: 'Represents a binding in two dimensions of rows and columns, optionally with headers.'
    remarks: >-
      Hosts: Access, Excel, PowerPoint, Project, Word


      Available in Requirement set: TableBindings


      The TableBinding object inherits the id property, type property, getDataAsync method, and setDataAsync method from
      the Binding object.


      For Excel, note that after you establish a table binding in Excel, each new row a user adds to the table is
      automatically included in the binding and rowCount increases.
    name: Office.TableBinding
    fullName: office.Office.TableBinding
    langs:
      - typeScript
    type: interface
    extends:
      - Binding
    package: office
    children:
      - office.Office.TableBinding.addColumnsAsync
      - office.Office.TableBinding.addRowsAsync
      - office.Office.TableBinding.clearFormatsAsync
      - office.Office.TableBinding.columnCount
      - office.Office.TableBinding.deleteAllDataValuesAsync
      - office.Office.TableBinding.getFormatsAsync
      - office.Office.TableBinding.hasHeaders
      - office.Office.TableBinding.rowCount
      - office.Office.TableBinding.setFormatsAsync
      - office.Office.TableBinding.setTableOptionsAsync
  - uid: office.Office.TableBinding.addColumnsAsync
    summary: Adds the specified data to the table as additional columns.
    remarks: >-
      Hosts: Excel, Word


      Available in Requirement set: TableBindings


      To add one or more columns specifying the values of the data and headers, pass a TableData object as the data
      parameter. To add one or more columns specifying only the data, pass an array of arrays ("matrix") as the data
      parameter.


      The success or failure of an addColumnsAsync operation is atomic. That is, the entire add columns operation must
      succeed, or it will be completely rolled back (and the AsyncResult.status property returned to the callback will
      report failure):


      - Each row in the array you pass as the data argument must have the same number of rows as the table being
      updated. If not, the entire operation will fail.


      - Each row and cell in the array must successfully add that row or cell to the table in the newly added column(s).
      If any row or cell fails to be set for any reason, the entire operation will fail.


      - If you pass a TableData object as the data argument, the number of header rows must match that of the table
      being updated.


      Additional remark for Excel Online: The total number of cells in the TableData object passed to the data parameter
      can't exceed 20,000 in a single call to this method.
    name: 'addColumnsAsync(tableData, options, callback)'
    fullName: office.Office.TableBinding.addColumnsAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addColumnsAsync(tableData: TableData | any[][], options?: AsyncContextOptions, callback?: (result: AsyncResult)
        => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableData
          description: >-
            An array of arrays ("matrix") or a TableData object that contains one or more columns of data to add to the
            table. Required.
          type:
            - 'TableData | any[][]'
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.TableBinding.addRowsAsync
    summary: Adds the specified data to the table as additional rows.
    remarks: >-
      Hosts: Access, Excel, Word


      Available in Requirement set: TableBindings


      To add one or more columns specifying the values of the data and headers, pass a TableData object as the data
      parameter. To add one or more columns specifying only the data, pass an array of arrays ("matrix") as the data
      parameter.


      The success or failure of an addRowsAsync operation is atomic. That is, the entire add columns operation must
      succeed, or it will be completely rolled back (and the AsyncResult.status property returned to the callback will
      report failure):


      - Each row in the array you pass as the data argument must have the same number of columns as the table being
      updated. If not, the entire operation will fail.


      - Each column and cell in the array must successfully add that column or cell to the table in the newly added
      rows(s). If any column or cell fails to be set for any reason, the entire operation will fail.


      - If you pass a TableData object as the data argument, the number of header rows must match that of the table
      being updated.


      Additional remark for Excel Online: The total number of cells in the TableData object passed to the data parameter
      can't exceed 20,000 in a single call to this method.
    name: 'addRowsAsync(rows, options, callback)'
    fullName: office.Office.TableBinding.addRowsAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addRowsAsync(rows: TableData | any[][], options?: AsyncContextOptions, callback?: (result: AsyncResult) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rows
          description: >-
            An array of arrays ("matrix") or a TableData object that contains one or more rows of data to add to the
            table. Required.
          type:
            - 'TableData | any[][]'
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.TableBinding.clearFormatsAsync
    summary: Clears formatting on the bound table.
    remarks: >-
      Hosts: Excel


      Available in Requirement set: Not in a set


      See [Format tables in add-ins for
      Excel](https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) for more
      information.
    name: 'clearFormatsAsync(options, callback)'
    fullName: office.Office.TableBinding.clearFormatsAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFormatsAsync(options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.TableBinding.columnCount
    summary: 'Gets the number of columns in the TableBinding, as an integer value.'
    remarks: |-
      Hosts: Access, Excel,Word

      Available in Requirement set: TableBindings
    name: columnCount
    fullName: office.Office.TableBinding.columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnCount: number;'
      return:
        type:
          - number
  - uid: office.Office.TableBinding.deleteAllDataValuesAsync
    summary: 'Deletes all non-header rows and their values in the table, shifting appropriately for the host application.'
    remarks: |-
      Hosts: Access, Excel, Word

      Available in Requirement set: TableBindings

      In Excel, if the table has no header row, this method will delete the table itself.
    name: 'deleteAllDataValuesAsync(options, callback)'
    fullName: office.Office.TableBinding.deleteAllDataValuesAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAllDataValuesAsync(options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.TableBinding.getFormatsAsync
    summary: Gets the formatting on specified items in the table.
    name: 'getFormatsAsync(cellReference, formats, options, callback)'
    fullName: office.Office.TableBinding.getFormatsAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getFormatsAsync(cellReference?: any, formats?: any[], options?: AsyncContextOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellReference
          description: An object literal containing name-value pairs that specify the range of cells to get formatting from.
          type:
            - any
        - id: formats
          description: An array specifying the format properties to get.
          type:
            - 'any[]'
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.TableBinding.hasHeaders
    summary: 'True, if the table has headers; otherwise false.'
    remarks: |-
      Hosts: Access, Excel, PowerPoint, Project, Word

      Available in Requirement set: TableBindings
    name: hasHeaders
    fullName: office.Office.TableBinding.hasHeaders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hasHeaders: boolean;'
      return:
        type:
          - boolean
  - uid: office.Office.TableBinding.rowCount
    summary: 'Gets the number of rows in the TableBinding, as an integer value.'
    remarks: >-
      Hosts: Access, Excel,Word


      Available in Requirement set: TableBindings


      When you insert an empty table by selecting a single row in Excel 2013 and Excel Online (using Table on the Insert
      tab), both Office host applications create a single row of headers followed by a single blank row. However, if
      your add-in's script creates a binding for this newly inserted table (for example, by using the
      addFromSelectionAsync method), and then checks the value of the rowCount property, the value returned will differ
      depending whether the spreadsheet is open in Excel 2013 or Excel Online.


      - In Excel on the desktop, rowCount will return 0 (the blank row following the headers is not counted).


      - In Excel Online, rowCount will return 1 (the blank row following the headers is counted).


      You can work around this difference in your script by checking if rowCount == 1, and if so, then checking if the
      row contains all empty strings.


      In content add-ins for Access, for performance reasons the rowCount property always returns -1.
    name: rowCount
    fullName: office.Office.TableBinding.rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowCount: number;'
      return:
        type:
          - number
  - uid: office.Office.TableBinding.setFormatsAsync
    summary: Sets formatting on specified items and data in the table.
    remarks: |-
      Hosts: Excel

      Available in Requirement set: Not in a set
    name: 'setFormatsAsync(formatsInfo, options, callback)'
    fullName: office.Office.TableBinding.setFormatsAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setFormatsAsync(formatsInfo?: any[], options?: AsyncContextOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formatsInfo
          description: >-
            Array elements are themselves three-element arrays:\[target, type, formats\] target: The identifier of the
            item to format. String. type: The kind of item to format. String. formats: An object literal containing a
            list of property name-value pairs that define the formatting to apply.
          type:
            - 'any[]'
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.TableBinding.setTableOptionsAsync
    summary: Updates table formatting options on the bound table.
    remarks: |-
      Hosts: Excel

      Available in Requirement set: Not in a set
    name: 'setTableOptionsAsync(tableOptions, options, callback)'
    fullName: office.Office.TableBinding.setTableOptionsAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setTableOptionsAsync(tableOptions: any, options?: AsyncContextOptions, callback?: (result: AsyncResult) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableOptions
          description: An object literal containing a list of property name-value pairs that define the table options to apply.
          type:
            - any
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
