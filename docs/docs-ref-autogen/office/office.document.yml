### YamlMime:UniversalReference
items:
  - uid: office.Office.Document
    summary: An abstract class that represents the document the add-in is interacting with.
    remarks: |
      Hosts: Access, Excel, PowerPoint, Project, Word

      #### Examples

      ```javascript
      // The following example uses the getSelectedDataAsync method of the Document object to retrieve the
      // user's current selection as text, and then display it in the add-in's page.

      // Display the user's current selection.
      function showSelection() {
          Office.context.document.getSelectedDataAsync(
              "text",                        // coercionType
              {valueFormat: "unformatted",   // valueFormat
              filterType: "all"},            // filterType
              function (result) {            // callback
                  var dataValue; 
                  dataValue = result.value;
                  write('Selected data is: ' + dataValue);
              });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```

      ```javascript
      // The following example initializes the add-in and then gets properties of the
      // Document object that are available in the context of a Project document.
      // A Project document is the opened, active project. To access members of the
      // ProjectDocument object, use the Office.context.document object as shown in
      // the code examples for ProjectDocument methods and events.
      // The example assumes your add-in has a reference to the jQuery library and
      // that the following page control is defined in the content div in the page body:
      <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // Get information about the document.
                  showDocumentProperties();
              });
          };

          // Get the document mode and the URL of the active project.
          function showDocumentProperties() {
              var output = String.format(
                  'The document mode is {0}.<br/>The URL of the active project is {1}.',
                  Office.context.document.mode,
                  Office.context.document.url);
              $('#message').html(output);
          }
      })();
      ```
    name: Office.Document
    fullName: office.Office.Document
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Document.addHandlerAsync
      - office.Office.Document.bindings
      - office.Office.Document.customXmlParts
      - office.Office.Document.getActiveViewAsync
      - office.Office.Document.getFileAsync
      - office.Office.Document.getFilePropertiesAsync
      - office.Office.Document.getProjectFieldAsync
      - office.Office.Document.getResourceFieldAsync
      - office.Office.Document.getSelectedDataAsync
      - office.Office.Document.getSelectedResourceAsync
      - office.Office.Document.getSelectedTaskAsync
      - office.Office.Document.getSelectedViewAsync
      - office.Office.Document.getTaskAsync
      - office.Office.Document.getTaskFieldAsync
      - office.Office.Document.getWSSUrlAsync
      - office.Office.Document.goToByIdAsync
      - office.Office.Document.mode
      - office.Office.Document.removeHandlerAsync
      - office.Office.Document.setSelectedDataAsync
      - office.Office.Document.settings
      - office.Office.Document.url
  - uid: office.Office.Document.addHandlerAsync
    summary: Adds an event handler for a Document object event.
    remarks: >
      Hosts: Excel, PowerPoint, Project, Word


      Available in Requirement set: DocumentEvents


      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.


      #### Examples


      ```javascript

      function addSelectionChangedEventHandler() {
          Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);
      }


      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithDocument(eventArgs.document);
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```


      ```javascript

      // The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.

      // When the active view changes, the handler checks the view type. It enables a button if the view is a resource

      // view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected

      // resource and displays it in the add-in.

      // The example assumes that your add-in has a reference to the jQuery library and that the following page controls

      // are defined in the content div in the page body.

      <input id="get-info" type="button" value="Get info" disabled="disabled" /><br />

      <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  // Add a ViewSelectionChanged event handler.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  $('#get-info').click(getResourceGuid);

                  // This example calls the handler on page load to get the active view
                  // of the default page.
                  getActiveView();
              });
          };

          // Activate the button based on the active view type of the document.
          // This is the ViewSelectionChanged event handler.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var viewType = result.value.viewType;
                          if (viewType == 6 ||   // ResourceForm
                              viewType == 7 ||   // ResourceSheet
                              viewType == 8 ||   // ResourceGraph
                              viewType == 15) {  // ResourceUsage
                              $('#get-info').removeAttr('disabled');
                          }
                          else {
                              $('#get-info').attr('disabled', 'disabled');
                          }
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();


      // For a complete code sample that shows how to use a TaskSelectionChanged event handler in a Project add-in,

      // see "Create your first task pane add-in for Project by using a text editor."

      //
      https://docs.microsoft.com/en-us/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor

      ```
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: office.Office.Document.addHandlerAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: EventType, handler: any, options?: AsyncContextOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: >-
            For a Document object event, the eventType parameter can be specified as
            `Office.EventType.Document.SelectionChanged` or `Office.EventType.Document.ActiveViewChanged`, or the
            corresponding text value of this enumeration.
          type:
            - EventType
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of
            type[Office.DocumentSelectionChangedEventArgs](xref:office.Office.DocumentSelectionChangedEventArgs)<!--
            -->. Required.
          type:
            - any
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.bindings
    summary: Gets an object that provides access to the bindings defined in the document.
    remarks: >
      Hosts: Access, Excel, Word


      You don't instantiate the Document object directly in your script. To call members of the Document object to
      interact with the current document or worksheet, use `Office.context.document` in your script.


      #### Examples


      ```javascript

      function displayAllBindings() {
          Office.context.document.bindings.getAllAsync(function (asyncResult) {
              var bindingString = '';
              for (var i in asyncResult.value) {
                  bindingString += asyncResult.value[i].id + '\n';
              }
              write('Existing bindings: ' + bindingString);
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: bindings
    fullName: office.Office.Document.bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bindings: Bindings;'
      return:
        type:
          - Bindings
  - uid: office.Office.Document.customXmlParts
    summary: Gets an object that represents the custom XML parts in the document.
    remarks: |
      Hosts: Word

      #### Examples

      ```javascript
      function getCustomXmlParts(){
          Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {
              write('Retrieved ' + asyncResult.value.length + ' custom XML parts');
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: customXmlParts
    fullName: office.Office.Document.customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customXmlParts: CustomXmlParts;'
      return:
        type:
          - CustomXmlParts
  - uid: office.Office.Document.getActiveViewAsync
    summary: Returns the state of the current view of the presentation (edit or read).
    remarks: |
      Hosts: Excel, PowerPoint, Word

      Available in Requirement set: ActiveView

      Can trigger an event when the view changes.

      #### Examples

      ```javascript
      function getFileView() {
          // Get whether the current view is edit or read.
          Office.context.document.getActiveViewAsync(function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage(asyncResult.value);
              }
          });
      }
      ```
    name: 'getActiveViewAsync(options, callback)'
    fullName: office.Office.Document.getActiveViewAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.getFileAsync
    summary: >-
      Returns the entire document file in slices of up to 4194304 bytes (4 MB). For add-ins for iOS, file slice is
      supported up to 65536 (64 KB). Note that specifying file slice size of above permitted limit will result in an
      "Internal Error" failure.
    remarks: >
      Hosts: Excel, PowerPoint, Word


      Available in Requirement set: File


      For add-ins running in Office host applications other than Office for iOS, the getFileAsync method supports
      getting files in slices of up to 4194304 bytes (4 MB). For add-ins running in Office for iOS apps, the
      getFileAsync method supports getting files in slices of up to 65536 (64 KB).


      The fileType parameter can be specified by using the [Office.FileType](xref:office.Office.FileType) enumeration or
      text values. But the possible values vary with the host:


      Excel Online, Win32, Mac, and iOS: `Office.FileType.Compressed`


      PowerPoint on Windows desktop, Mac, and iPad, and PowerPoint Online: `Office.FileType.Compressed`,
      `Office.FileType.Pdf`


      Word on Windows desktop, Word on Mac, and Word Online: `Office.FileType.Compressed`, `Office.FileType.Pdf`,
      `Office.FileType.Text`


      Word on iPad: `Office.FileType.Compressed`, `Office.FileType.Text`


      #### Examples


      ```javascript

      // The following example gets the document in Office Open XML ("compressed") format in 65536 bytes (64 KB) slices.

      // Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office
      Add-ins.

      function getDocumentAsCompressed() {
          Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, 
              function (result) {
                  if (result.status == "succeeded") {
                  // If the getFileAsync call succeeded, then
                  // result.value will return a valid File Object.
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);

                  // Get the file slices.
                  getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
                  else {
                  app.showNotification("Error:", result.error.message);
                  }
          });
      }


      function getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {
          file.getSliceAsync(nextSlice, function (sliceResult) {
              if (sliceResult.status == "succeeded") {
                  if (!gotAllSlices) { // Failed to get all slices, no need to continue.
                      return;
                  }

                  // Got one slice, store it in a temporary array.
                  // (Or you can do something else, such as
                  // send it to a third-party server.)
                  docdataSlices[sliceResult.value.index] = sliceResult.value.data;
                  if (++slicesReceived == sliceCount) {
                    // All slices have been received.
                    file.closeAsync();
                    onGotAllSlices(docdataSlices);
                  }
                  else {
                      getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
              }
                  else {
                      gotAllSlices = false;
                      file.closeAsync();
                      app.showNotification("getSliceAsync Error:", sliceResult.error.message);
                  }
          });
      }


      function onGotAllSlices(docdataSlices) {
          var docdata = [];
          for (var i = 0; i < docdataSlices.length; i++) {
              docdata = docdata.concat(docdataSlices[i]);
          }

          var fileContent = new String();
          for (var j = 0; j < docdata.length; j++) {
              fileContent += String.fromCharCode(docdata[j]);
          }

          // Now all the file content is stored in 'fileContent' variable,
          // you can do something with it, such as print, fax...
      }


      // The following example gets the document in PDF format.

      Office.context.document.getFileAsync(Office.FileType.Pdf,
          function(result) {
              if (result.status == "succeeded") {
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);
                  // Now, you can call getSliceAsync to download the files, as described in the previous code segment (compressed format).
                  
                  myFile.closeAsync();
              }
              else {
                  app.showNotification("Error:", result.error.message);
              }
      }

      );

      ```
    name: 'getFileAsync(fileType, options, callback)'
    fullName: office.Office.Document.getFileAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: The format in which the file will be returned
          type:
            - FileType
        - id: options
          description: Provides options for setting the size of slices that the document will be divided into.
          type:
            - GetFileOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.getFilePropertiesAsync
    summary: Gets file properties of the current document.
    remarks: >
      Hosts: Excel, PowerPoint, Word


      Available in Requirement set: not in a set


      You get the file's URL with the url property (`asyncResult.value.url`).


      #### Examples


      ```javascript

      // To read the URL of the current file, you need to write a callback function that returns the URL.

      // The following example shows how to:

      // 1. Pass an anonymous callback function that returns the value of the file's URL to the callback parameter of
      the getFilePropertiesAsync method.

      // 2. Display the value on the add-in's page.

      function getFileUrl() {
          // Get the URL of the current file.
          Office.context.document.getFilePropertiesAsync(function (asyncResult) {
              var fileUrl = asyncResult.value.url;
              if (fileUrl == "") {
                  showMessage("The file hasn't been saved yet. Save the file and try again");
              }
              else {
                  showMessage(fileUrl);
              }
          });
      }

      ```
    name: 'getFilePropertiesAsync(options, callback)'
    fullName: office.Office.Document.getFilePropertiesAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.getProjectFieldAsync
    summary: Project documents only. Get Project field (Ex. ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, options, callback)'
    fullName: office.Office.Document.getProjectFieldAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getProjectFieldAsync(fieldId: number, options?: AsyncContextOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fieldId
          description: Project level fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
    remarks: >


      #### Examples


      ```javascript

      // The following code example gets the values of three specified fields for the active project, and then displays

      // the values in the add-in.

      // The example calls getProjectFieldAsync recursively, after the previous call returns successfully. It also
      tracks

      // the calls to determine when all calls are sent.

      // The example assumes your add-in has a reference to the jQuery library and that the following page control is
      defined

      // in the content div in the page body.

      <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // Get information for the active project.
                  getProjectInformation();
              });
          };

          // Get the specified fields for the active project.
          function getProjectInformation() {
              var fields =
                  [Office.ProjectProjectFields.Start, Office.ProjectProjectFields.Finish, Office.ProjectProjectFields.GUID];
              var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];
              var index = 0; 
              getField();

              // Get each field, and then display the field values in the add-in.
              function getField() {
                  if (index == fields.length) {
                      var output = '';
                      for (var i = 0; i < fieldValues.length; i++) {
                          output += fieldValues[i] + '<br />';
                      }
                      $('#message').html(output);
                  }
                  else {
                      Office.context.document.getProjectFieldAsync(
                          fields[index],
                          function (result) {

                              // If the call is successful, get the field value and then get the next field.
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  fieldValues[index] += result.value.fieldValue;
                                  getField(index++);
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      ```
  - uid: office.Office.Document.getResourceFieldAsync
    summary: Project documents only. Get resource field for provided resource Id. (Ex.ResourceName)
    name: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    fullName: office.Office.Document.getResourceFieldAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getResourceFieldAsync(resourceId: string, fieldId: number, options?: AsyncContextOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Either a string or value of the Resource Id.
          type:
            - string
        - id: fieldId
          description: Resource Fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
    remarks: >


      #### Examples


      ```javascript

      // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's currently
      selected

      // in a resource view. Then it gets three resource field values by calling getResourceFieldAsync recursively.

      // The example assumes your add-in has a reference to the jQuery library and that the following page controls are

      // defined in the content div in the page body.

      <input id="get-info" type="button" value="Get info" /><br />

      <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getResourceInfo);
              });
          };

          // Get the GUID of the resource and then get the resource fields.
          function getResourceInfo() {
              getResourceGuid().then(
                  function (data) {
                      getResourceFields(data);
                  }
              );
          }

          // Get the GUID of the selected resource.
          function getResourceGuid() {
              var defer = $.Deferred();
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          defer.resolve(result.value);
                      }
                  }
              );
              return defer.promise();
          }

          // Get the specified fields for the selected resource.
          function getResourceFields(resourceGuid) {
              var targetFields =
                  [Office.ProjectResourceFields.Name, Office.ProjectResourceFields.Units, Office.ProjectResourceFields.BaseCalendar];
              var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
              var index = 0; 
              getField();

              // Get each field, and then display the field values in the add-in.
              function getField() {
                  if (index == targetFields.length) {
                      var output = '';
                      for (var i = 0; i < fieldValues.length; i++) {
                          output += fieldValues[i] + '<br />';
                      }
                      $('#message').html(output);
                  }

                  // If the call is successful, get the field value and then get the next field.
                  else {
                      Office.context.document.getResourceFieldAsync(
                          resourceGuid,
                          targetFields[index],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  fieldValues[index] += result.value.fieldValue;
                                  getField(index++);
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      ```
  - uid: office.Office.Document.getSelectedDataAsync
    summary: Reads the data contained in the current selection in the document.
    remarks: >
      Hosts: Access, Excel, PowerPoint, Project, Word


      Available in Requirement set: Selection


      In the callback function that is passed to the getSelectedDataAsync method, you can use the properties of the
      AsyncResult object to return the following information.


      <table> <tr> <th>Property</th> <th>Use to...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Always returns
      undefined because there is no object or data to retrieve.</td> </tr> <tr> <td>AsyncResult.status</td>
      <td>Determine the success or failure of the operation.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Access an
      Error object that provides error information if the operation failed.</td> </tr> <tr>
      <td>AsyncResult.asyncContext</td> <td>A user-defined item of any type that is returned in the AsyncResult object
      without being altered.</td> </tr> </table>


      #### Examples


      ```javascript

      // To read the value of the current selection, you need to write a callback function that reads the selection.

      // The following example shows how to:

      // 1. Pass an anonymous callback function that reads the value of the current selection to the callback parameter
      of the getSelectedDataAsync method.

      // 2. Read the selection as text, unformatted, and not filtered.

      // 3. Display the value on the add-in's page.

      function getText() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, 
              { valueFormat: "unformatted", filterType: "all" },
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  } 
                  else {
                      // Get selected data.
                      var dataValue = asyncResult.value; 
                      write('Selected data is ' + dataValue);
                  }            
              });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```


      ```javascript

      // The following code example gets the values of the selected cells. It uses the optional

      // asyncContext parameter to pass some text to the callback function.

      // The example assumes your add-in has a reference to the jQuery library and that the

      // following page controls are defined in the content div in the page body.

      <input id="get-info" type="button" value="Get info" /><br />

      <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getSelectedText);
              });
          };

          // Get the text from the selected cells in the document, and display it in the add-in.
          function getSelectedText() {
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text,
                  {asyncContext: 'Some related info'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'Selected text: {0}<br/>Passed info: {1}',
                              result.value, result.asyncContext);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: office.Office.Document.getSelectedDataAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSelectedDataAsync(coercionType: CoercionType, options?: GetSelectedDataOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: >-
            The type of data structure to return. The possible values for
            the[Office.CoercionType](xref:office.Office.CoercionType) parameter vary by the host:


            - Excel, Excel Online, PowerPoint, PowerPoint Online, Word, and Word Online only: `Office.CoercionType.Text`
            (string)


            - Excel, Word, and Word Online only: `Office.CoercionType.Matrix` (array of arrays)


            - Access, Excel, Word, and Word Online only: `Office.CoercionType.Table` (TableData object)


            - Word only: `Office.CoercionType.Html`


            - Word and Word Online only: `Office.CoercionType.Ooxml` (Office Open XML)


            - PowerPoint and PowerPoint Online only: `Office.CoercionType.SlideRange`
          type:
            - CoercionType
        - id: options
          description: Provides options for customizing what data is returned and how it is formatted.
          type:
            - GetSelectedDataOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.getSelectedResourceAsync
    summary: Project documents only. Get the current selected Resource's Id.
    name: 'getSelectedResourceAsync(options, callback)'
    fullName: office.Office.Document.getSelectedResourceAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
    remarks: >


      #### Examples


      ```javascript

      // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's currently
      selected

      // in a resource view. Then it gets three resource field values by calling getResourceFieldAsync recursively.

      // The example assumes your add-in has a reference to the jQuery library and that the following page controls are

      // defined in the content div in the page body.

      <input id="get-info" type="button" value="Get info" /><br />

      <span id="message"></span>


      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getResourceInfo);
              });
          };

          // Get the GUID of the resource and then get the resource fields.
          function getResourceInfo() {
              getResourceGuid().then(
                  function (data) {
                      getResourceFields(data);
                  }
              );
          }

          // Get the GUID of the selected resource.
          function getResourceGuid() {
              var defer = $.Deferred();
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          defer.resolve(result.value);
                      }
                  }
              );
              return defer.promise();
          }

          // Get the specified fields for the selected resource.
          function getResourceFields(resourceGuid) {
              var targetFields =
                  [Office.ProjectResourceFields.Name, Office.ProjectResourceFields.Units, Office.ProjectResourceFields.BaseCalendar];
              var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
              var index = 0; 
              getField();

              // Get each field, and then display the field values in the add-in.
              function getField() {
                  if (index == targetFields.length) {
                      var output = '';
                      for (var i = 0; i < fieldValues.length; i++) {
                          output += fieldValues[i] + '<br />';
                      }
                      $('#message').html(output);
                  }

                  // If the call is successful, get the field value and then get the next field.
                  else {
                      Office.context.document.getResourceFieldAsync(
                          resourceGuid,
                          targetFields[index],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  fieldValues[index] += result.value.fieldValue;
                                  getField(index++);
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      ```
  - uid: office.Office.Document.getSelectedTaskAsync
    summary: Project documents only. Get the current selected Task's Id.
    name: 'getSelectedTaskAsync(options, callback)'
    fullName: office.Office.Document.getSelectedTaskAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
    remarks: |


      #### Examples

      ```javascript
      // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
      // selected in a task view. Then it gets task properties by calling getTaskAsync.
      // The example assumes your add-in has a reference to the jQuery library and that the following page
      // controls are defined in the content div in the page body.
      <input id="get-info" type="button" value="Get info" /><br />
      <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getTaskInfo);
              });
          };

          // // Get the GUID of the task, and then get local task properties.
          function getTaskInfo() {
              getTaskGuid().then(
                  function (data) {
                      getTaskProperties(data);
                  }
              );
          }

          // Get the GUID of the selected task.
          function getTaskGuid() {
              var defer = $.Deferred();
              Office.context.document.getSelectedTaskAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          defer.resolve(result.value);
                      }
                  }
              );
              return defer.promise();
          }

          // Get local properties for the selected task, and then display it in the add-in.
          function getTaskProperties(taskGuid) {
              Office.context.document.getTaskAsync(
                  taskGuid,
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var taskInfo = result.value;
                          var output = String.format(
                              'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                              taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
  - uid: office.Office.Document.getSelectedViewAsync
    summary: Project documents only. Get the current selected View Type (Ex. Gantt) and View Name.
    name: 'getSelectedViewAsync(options, callback)'
    fullName: office.Office.Document.getSelectedViewAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
    remarks: |


      #### Examples

      ```javascript
      // The following code example calls adds a ViewSelectionChanged event handler that
      // calls getSelectedViewAsync to get the name and type of the active view in the document.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body.
      <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  getActiveView();
              });
          };

          // Get the active view's name and type.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
  - uid: office.Office.Document.getTaskAsync
    summary: 'Project documents only. Get the Task Name, WSS Task Id, and ResourceNames for given taskId.'
    name: 'getTaskAsync(taskId, options, callback)'
    fullName: office.Office.Document.getTaskAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
    remarks: |


      #### Examples

      ```javascript
      // The following code example calls getSelectedTaskAsync to get the task GUID of the currently
      // selected task. Then it calls getTaskAsync to get the properties for the task that are
      // available from the JavaScript API for Office.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page controls are defined in the content div in the page body.
      <input id="get-info" type="button" value="Get info" /><br />
      <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getTaskInfo);
              });
          };

          // Get the GUID of the task, and then get local task properties.
          function getTaskInfo() {
              getTaskGuid().then(
                  function (data) {
                      getTaskProperties(data);
                  }
              );
          }

          // Get the GUID of the selected task.
          function getTaskGuid() {
              var defer = $.Deferred();
              Office.context.document.getSelectedTaskAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          defer.resolve(result.value);
                      }
                  }
              );
              return defer.promise();
          }

          // Get local properties for the selected task, and then display it in the add-in.
          function getTaskProperties(taskGuid) {
              Office.context.document.getTaskAsync(
                  taskGuid,
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var taskInfo = result.value;
                          var output = String.format(
                              'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                              taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
  - uid: office.Office.Document.getTaskFieldAsync
    summary: Project documents only. Get task field for provided task Id. (Ex. StartDate).
    name: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    fullName: office.Office.Document.getTaskFieldAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getTaskFieldAsync(taskId: string, fieldId: number, options?: AsyncContextOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Either a string or value of the Task Id.
          type:
            - string
        - id: fieldId
          description: Task Fields.
          type:
            - number
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
    remarks: |


      #### Examples

      ```javascript
      // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
      // selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.
      // The example assumes your add-in has a reference to the jQuery library and that the following page
      // controls are defined in the content div in the page body.
      <input id="get-info" type="button" value="Get info" /><br />
      <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {
                  
                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getTaskInfo);
              });
          };

          // Get the GUID of the task, and then get the task fields.
          function getTaskInfo() {
              getTaskGuid().then(
                  function (data) {
                      getTaskFields(data);
                  }
              );
          }

          // Get the GUID of the selected task.
          function getTaskGuid() {
              var defer = $.Deferred();
              Office.context.document.getSelectedTaskAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          defer.resolve(result.value);
                      }
                  }
              );
              return defer.promise();
          }

          // Get the specified fields for the selected task.
          function getTaskFields(taskGuid) {
              var output = '';
              var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];
              var fieldValues = ['Priority: ', '% Complete: '];
              var index = 0;
              getField();

              // Get each field, and then display the field values in the add-in.
              function getField() {
                  if (index == targetFields.length) {
                      for (var i = 0; i < fieldValues.length; i++) {
                          output += fieldValues[i] + '<br />';
                      }
                      $('#message').html(output);
                  }

                  // Get the field value. If the call is successful, then get the next field.
                  else {
                      Office.context.document.getTaskFieldAsync(
                          taskGuid,
                          targetFields[index],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  fieldValues[index] += result.value.fieldValue;
                                  getField(index++);
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
  - uid: office.Office.Document.getWSSUrlAsync
    summary: 'Project documents only. Get the WSS Url and list name for the Tasks List, the MPP is synced too.'
    name: 'getWSSUrlAsync(options, callback)'
    fullName: office.Office.Document.getWSSUrlAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(options?: AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.goToByIdAsync
    summary: Goes to the specified object or location in the document.
    remarks: >
      Hosts: Excel, PowerPoint, Word


      Available in Requirement set: not in a set


      PowerPoint doesn't support the goToByIdAsync method in Master Views.


      The behavior caused by the selectionMode option varies by host:


      In Excel: Office.SelectionMode.Selected selects all content in the binding, or named item.
      Office.SelectionMode.None for text bindings, selects the cell; for matrix bindings, table bindings, and named
      items, selects the first data cell (not first cell in header row for tables).


      In PowerPoint: Office.SelectionMode.Selected selects the slide title or first textbox on the slide.
      Office.SelectionMode.None Doesn't select anything.


      In Word: Office.SelectionMode.Selected selects all content in the binding. Office.SelectionMode.None for text
      bindings, moves the cursor to the beginning of the text; for matrix bindings and table bindings, selects the first
      data cell (not first cell in header row for tables).


      #### Examples


      ```javascript

      // Go to a binding by id (Word and Excel)

      // The following example shows how to:

      // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.

      // 2. Specify that binding as the binding to go to.

      // 3. Pass an anonymous callback function that returns the status of the operation to the callback parameter of
      the goToByIdAsync method.

      // 4. Display the value on the add-in's page.

      function gotoBinding() {
          // Create a new table binding for the selected table.
          Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
          if (asyncResult.status == "failed") {
                    showMessage("Action failed with error: " + asyncResult.error.message);
                }
                else {
                    showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
                }
          });

          // Go to binding by id.
          Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }


      // Go to a table in a spreadsheet (Excel)

      // The following example shows how to:

      // 1. Specify a table by name as the table to go to.

      // 2. Pass an anonymous callback function that returns the status of the operation to the callback parameter of
      the goToByIdAsync method.

      // 3. Display the value on the add-in's page.

      function goToTable() {
          Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }


      // Go to the currently selected slide by id (PowerPoint)

      // The following example shows how to:

      // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.

      // 2. Specify the returned id as the slide to go to.

      // 3. Pass an anonymous callback function that returns the status of the operation to the callback parameter of
      the goToByIdAsync method.

      // 4. Display the value of the stringified JSON object returned by asyncResult.value, which contains information
      about the selected slides, on the add-in's page.

      var firstSlideId = 0;

      function gotoSelectedSlide() {
          //Get currently selected slide's id
          Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  firstSlideId = asyncResult.value.slides[0].id;
                  app.showNotification(JSON.stringify(asyncResult.value));
              }
          });
          //Go to slide by id.
          Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  app.showNotification("Navigation successful");
              }
          });
      }


      // Go to slide by index (PowerPoint)

      // The following example shows how to:

      // 1. Specify the index of the first, last, previous, or next slide to go to.

      // 2. Pass an anonymous callback function that returns the status of the operation to the callback parameter of
      the goToByIdAsync method.

      // 3. Display the value on the add-in's page.

      function goToSlideByIndex() {
          var goToFirst = Office.Index.First;
          var goToLast = Office.Index.Last;
          var goToPrevious = Office.Index.Previous;
          var goToNext = Office.Index.Next;

          Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      ```
    name: 'goToByIdAsync(id, goToType, options, callback)'
    fullName: office.Office.Document.goToByIdAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: The identifier of the object or location to go to.
          type:
            - string | number
        - id: goToType
          description: The type of the location to go to.
          type:
            - GoToType
        - id: options
          description: Provides options for whether to select the location that is navigated to.
          type:
            - GoToByIdOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.mode
    summary: Gets the mode the document is in.
    remarks: |
      Hosts: Word

      #### Examples

      ```javascript
      function displayDocumentMode() {
          write(Office.context.document.mode);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: mode
    fullName: office.Office.Document.mode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mode: DocumentMode;'
      return:
        type:
          - DocumentMode
  - uid: office.Office.Document.removeHandlerAsync
    summary: Removes an event handler for the specified event type.
    remarks: |
      Hosts: Excel, PowerPoint, Project, Word

      Available in Requirement set: DocumentEvents

      #### Examples

      ```javascript
      // The following example removes the event handler named 'MyHandler'.
      function removeSelectionChangedEventHandler() {
          Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
      }
      ```

      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the
      // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.
      // When a resource is selected in a resource view, the handler displays the
      // resource GUID. When the handler is removed, the GUID is not displayed.
      // The example assumes that your add-in has a reference to the jQuery library and
      // that the following page control is defined in the content div in the page body.
      <input id="remove-handler" type="button" value="Remove handler" /><br />
      <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
                  $('#remove-handler').click(removeEventHandler);
              });
          };

          // Remove the event handler.
          function removeEventHandler() {
              Office.context.document.removeHandlerAsync(
                  Office.EventType.ResourceSelectionChanged,
                  {handler:getResourceGuid,
                  asyncContext:'The handler is removed.'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#remove-handler').attr('disabled', 'disabled');
                          $('#message').html(result.asyncContext);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: office.Office.Document.removeHandlerAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event type. For document can be 'Document.SelectionChanged' or 'Document.ActiveViewChanged'.
          type:
            - EventType
        - id: options
          description: Provides options to determine which event handler or handlers are removed.
          type:
            - RemoveHandlerOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.setSelectedDataAsync
    summary: Writes the specified data into the current selection.
    remarks: >
      Hosts: Access, Excel, PowerPoint, Project, Word, Word Online


      Available in Requirement set: Selection


      **Application-specific behaviors**


      The following application-specific actions apply when writing data to a selection.


      - Word


      - If there is no selection and the insertion point is at a valid location, the specified `data` is inserted at the
      insertion point as follows:


      - If `data` is a string, the specified text is inserted.


      - If `data` is an array of arrays ("matrix") or a TableData object, a new Word table is inserted.


      - If `data` is HTML, the specified HTML is inserted. (Important: If any of the HTML you insert is invalid, Word
      won't raise an error. Word will insert as much of the HTML as it can and omits any invalid data).


      - If `data` is Office Open XML, the specified XML is inserted.


      - If `data` is a base64 encoded image stream, the specified image is inserted.


      - If there is a selection, it will be replaced with the specified `data` following the same rules as above.


      - Insert images: Inserted images are placed inline. The imageLeft and imageTop parameters are ignored. The image
      aspect ratio is always locked. If only one of the imageWidth and imageHeight parameter is given, the other value
      will be automatically scaled to keep the original aspect ratio.


      - Excel


      - If a single cell is selected:


      - If `data` is a string, the specified text is inserted as the value of the current cell.


      - If `data` is an array of arrays ("matrix"), the specified set of rows and columns are inserted, if no other data
      in surrounding cells will be overwritten.


      - If `data` is a TableData object, a new Excel table with the specified set of rows and headers is inserted, if no
      other data in surrounding cells will be overwritten.


      - If multiple cells are selected and the shape does not match the shape of `data`, an error is returned.


      - If multiple cells are selected and the shape of the selection exactly matches the shape of `data`, the values of
      the selected cells are updated based on the values in `data`.


      - Insert images: Inserted images are floating. The position imageLeft and imageTop parameters are relative to
      currently selected cell(s). Negative imageLeft and imageTop values are allowed and possibly readjusted by Excel to
      position the image inside a worksheet. Image aspect ratio is locked unless both imageWidth and imageHeight
      parameters are provided. If only one of the imageWidth and imageHeight parameter is given, the other value will be
      automatically scaled to keep the original aspect ratio.


      - In all other cases, an error is returned.


      - Excel Online


      - In addition to the behaviors described for Excel above, the following limits apply when writing data in Excel
      Online.


      - The total number of cells you can write to a worksheet with the `data` parameter can't exceed 20,000 in a single
      call to this method.


      - The number of formatting groups passed to the `cellFormat` parameter can't exceed 100. A single formatting group
      consists of a set of formatting applied to a specified range of cells.


      - PowerPoint


      - Inserted images are floating. The position imageLeft and imageTop parameters are optional but if provided, both
      should be present. If a single value is provided, it will be ignored. Negative imageLeft and imageTop values are
      allowed and can position an image outside of a slide. If no optional parameter is given and slide has a
      placeholder, the image will replace the placeholder in the slide. Image aspect ratio will be locked unless both
      imageWidth and imageHeight parameters are provided. If only one of the imageWidth and imageHeight parameter is
      given, the other value will be automatically scaled to keep the original aspect ratio.


      #### Examples


      ```javascript

      // The following example sets the selected text or cell to "Hello World!", and if that fails, displays the value
      of the

      // error.message property.

      function writeText() {
          Office.context.document.setSelectedDataAsync("Hello World!",
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a
      selection.

      // The following example writes data as an array of three rows of two columns, specifying the coercionType as
      "matrix"

      // for that data structure, and if that fails, displays the value of the error.message property.

      function writeMatrix() {
          Office.context.document.setSelectedDataAsync([["Red", "Rojo"], ["Green", "Verde"], ["Blue", "Azul"]], {coercionType: Office.CoercionType.Matrix}
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // The following example writes data as a one column table with a header and four rows, specifying the
      coercionType as "table"

      // for that data structure, and if that fails, displays the value of the error.message property.

      function writeTable() {
          // Build table.
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];

          // Write table.
          Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},
              function (result) {
                  var error = result.error
                  if (result.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  }
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // In Word if you want to write HTML to the selection, you can specify the coercionType parameter as "html" as
      shown

      // in the following example, which uses HTML <b> tags to make "Hello" bold.

      function writeHtmlData() {
          Office.context.document.setSelectedDataAsync("<b>Hello</b> World!", {coercionType: Office.CoercionType.Html}, function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  write('Error: ' + asyncResult.error.message);
              }
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType
      parameter

      // as "image" as shown in the following example. Note that imageLeft and imageTop are ignored by Word.

      function insertPictureAtSelection(base64EncodedImageStr) {

          Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {
          coercionType: Office.CoercionType.Image,
          imageLeft: 50,
          imageTop: 50,
          imageWidth: 100,
          imageHeight: 100
          },
          function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  console.log("Action failed with error: " + asyncResult.error.message);
              }
          });
      }

      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: office.Office.Document.setSelectedDataAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be set. Either a string or[Office.CoercionType](xref:office.Office.CoercionType) value, 2d array
            or TableData object.


            The possible CoercionTypes that can be used for the data parameter, or for the coercionType option, vary by
            host:


            - Office.CoercionType.Text: Excel, Word, PowerPoint


            - Office.CoercionType.Matrix: Excel, Word


            - Office.CoercionType.Table: Access, Excel, Word


            - Office.CoercionType.Html: Word


            - Office.CoercionType.Ooxml: Word


            - Office.CoercionType.Image: Excel, Word, PowerPoint


            If the value passed for `data` is:


            - A string: Plain text or anything that can be coerced to a string will be inserted. In Excel, you can also
            specify data as a valid formula to add that formula to the selected cell. For example, setting data to
            "=SUM(A1:A5)" will total the values in the specified range. However, when you set a formula on the bound
            cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell. If
            you call the Document.getSelectedDataAsync method on the selected cell to read its data, the method can
            return only the data displayed in the cell (the formula's result).


            - An array of arrays ("matrix"): Tabular data without headers will be inserted. For example, to write data
            to three rows in two columns, you can pass an array like this: \[\["R1C1", "R1C2"\], \["R2C1", "R2C2"\],
            \["R3C1", "R3C2"\]\]. To write a single column of three rows, pass an array like this: \[\["R1C1"\],
            \["R2C1"\], \["R3C1"\]\] In Excel, you can also specify data as an array of arrays that contains valid
            formulas to add them to the selected cells. For example if no other data will be overwritten, setting data
            to \[\["=SUM(A1:A5)","=AVERAGE(A1:A5)"\]\] will add those two formulas to the selection. Just as when
            setting a formula on a single cell as "text", you can't read the added formulas (or any pre-existing
            formulas) after they have been set - you can only read the formulas' results.


            - A TableData object: A table with headers will be inserted. In Excel, if you specify formulas in the
            TableData object you pass for the data parameter, you might not get the results you expect due to the
            "calculated columns" feature of Excel, which automatically duplicates formulas within a column. To work
            around this when you want to write `data` that contains formulas to a selected table, try specifying the
            data as an array of arrays (instead of a TableData object), and specify the coercionType as
            Microsoft.Office.Matrix or "matrix".
          type:
            - 'string | TableData | any[][]'
        - id: options
          description: Provides options for how to insert data to the selection.
          type:
            - SetSelectedDataOptions
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.
            The AsyncResult.value property always returns undefined because there is no object or data to retrieve.
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Document.settings
    summary: >-
      Gets an object that represents the saved custom settings of the content or task pane add-in for the current
      document.
    remarks: 'Hosts: Word'
    name: settings
    fullName: office.Office.Document.settings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'settings: Settings;'
      return:
        type:
          - Settings
  - uid: office.Office.Document.url
    summary: Gets the URL of the document that the host application currently has open. Returns null if the URL is unavailable.
    remarks: |
      Hosts: Word

      #### Examples

      ```javascript
      function displayDocumentUrl() {
          write(Office.context.document.url);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: url
    fullName: office.Office.Document.url
    langs:
      - typeScript
    type: property
    syntax:
      content: 'url: string;'
      return:
        type:
          - string
