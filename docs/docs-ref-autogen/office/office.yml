### YamlMime:TSPackage
uid: office!
name: office
type: package
summary: ''
interfaces:
  - 'office!Office.Actions:interface'
  - 'office!Office.AddBindingFromNamedItemOptions:interface'
  - 'office!Office.AddBindingFromPromptOptions:interface'
  - 'office!Office.AddBindingFromSelectionOptions:interface'
  - 'office!Office.Addin:interface'
  - 'office!Office.AddinCommands.Event:interface'
  - 'office!Office.AddinCommands.EventCompletedOptions:interface'
  - 'office!Office.AddinCommands.Source:interface'
  - 'office!Office.AsyncContextOptions:interface'
  - 'office!Office.AsyncResult:interface'
  - 'office!Office.Auth:interface'
  - 'office!Office.AuthOptions:interface'
  - 'office!Office.Binding:interface'
  - 'office!Office.BindingDataChangedEventArgs:interface'
  - 'office!Office.Bindings:interface'
  - 'office!Office.BindingSelectionChangedEventArgs:interface'
  - 'office!Office.Context:interface'
  - 'office!Office.ContextInformation:interface'
  - 'office!Office.Control:interface'
  - 'office!Office.CustomXmlNode:interface'
  - 'office!Office.CustomXmlPart:interface'
  - 'office!Office.CustomXmlParts:interface'
  - 'office!Office.CustomXmlPrefixMappings:interface'
  - 'office!Office.Dialog:interface'
  - 'office!Office.DialogOptions:interface'
  - 'office!Office.DialogParentMessageReceivedEventArgs:interface'
  - 'office!Office.Document:interface'
  - 'office!Office.DocumentSelectionChangedEventArgs:interface'
  - 'office!Office.Error:interface'
  - 'office!Office.File:interface'
  - 'office!Office.FileProperties:interface'
  - 'office!Office.GetBindingDataOptions:interface'
  - 'office!Office.GetFileOptions:interface'
  - 'office!Office.GetSelectedDataOptions:interface'
  - 'office!Office.GoToByIdOptions:interface'
  - 'office!Office.IPromiseConstructor:interface'
  - 'office!Office.MatrixBinding:interface'
  - 'office!Office.NodeDeletedEventArgs:interface'
  - 'office!Office.NodeInsertedEventArgs:interface'
  - 'office!Office.NodeReplacedEventArgs:interface'
  - 'office!Office.OfficeTheme:interface'
  - 'office!Office.RangeCoordinates:interface'
  - 'office!Office.RangeFormatConfiguration:interface'
  - 'office!Office.RemoveHandlerOptions:interface'
  - 'office!Office.RequirementSetSupport:interface'
  - 'office!Office.Ribbon:interface'
  - 'office!Office.RibbonUpdaterData:interface'
  - 'office!Office.SaveSettingsOptions:interface'
  - 'office!Office.SetBindingDataOptions:interface'
  - 'office!Office.SetSelectedDataOptions:interface'
  - 'office!Office.Settings:interface'
  - 'office!Office.SettingsChangedEventArgs:interface'
  - 'office!Office.Slice:interface'
  - 'office!Office.Tab:interface'
  - 'office!Office.TableBinding:interface'
  - 'office!Office.TextBinding:interface'
  - 'office!Office.UI:interface'
  - 'office!Office.VisibilityModeChangedMessage:interface'
  - 'office!OfficeExtension.DebugInfo:interface'
  - 'office!OfficeExtension.EmbeddedOptions:interface'
  - 'office!OfficeExtension.EventInfo:interface'
  - 'office!OfficeExtension.LoadOption:interface'
  - 'office!OfficeExtension.RequestContextDebugInfo:interface'
  - 'office!OfficeExtension.RequestUrlAndHeaderInfo:interface'
  - 'office!OfficeExtension.RunOptions:interface'
  - 'office!OfficeExtension.UpdateOptions:interface'
enums:
  - 'office!Office.ActiveView:enum'
  - 'office!Office.AsyncResultStatus:enum'
  - 'office!Office.BindingType:enum'
  - 'office!Office.CoercionType:enum'
  - 'office!Office.CustomXMLNodeType:enum'
  - 'office!Office.DocumentMode:enum'
  - 'office!Office.EventType:enum'
  - 'office!Office.FileType:enum'
  - 'office!Office.FilterType:enum'
  - 'office!Office.GoToType:enum'
  - 'office!Office.HostType:enum'
  - 'office!Office.Index:enum'
  - 'office!Office.InitializationReason:enum'
  - 'office!Office.PlatformType:enum'
  - 'office!Office.ProjectProjectFields:enum'
  - 'office!Office.ProjectResourceFields:enum'
  - 'office!Office.ProjectTaskFields:enum'
  - 'office!Office.ProjectViewTypes:enum'
  - 'office!Office.SelectionMode:enum'
  - 'office!Office.StartupBehavior:enum'
  - 'office!Office.Table:enum'
  - 'office!Office.ValueFormat:enum'
  - 'office!Office.VisibilityMode:enum'
classes:
  - 'office!Office.TableData:class'
  - 'office!OfficeExtension.ClientObject:class'
  - 'office!OfficeExtension.ClientRequestContext:class'
  - 'office!OfficeExtension.ClientResult:class'
  - 'office!OfficeExtension.EmbeddedSession:class'
  - 'office!OfficeExtension.Error:class'
  - 'office!OfficeExtension.ErrorCodes:class'
  - 'office!OfficeExtension.EventHandlerResult:class'
  - 'office!OfficeExtension.EventHandlers:class'
  - 'office!OfficeExtension.TrackedObjects:class'
functions:
  - name: Office.initialize(reason)
    uid: 'office!Office.initialize:function(1)'
    package: office!
    summary: >-
      Occurs when the runtime environment is loaded and the add-in is ready to
      start interacting with the application and hosted document.


      The reason parameter of the initialize event listener function returns an
      `InitializationReason` enumeration value that specifies how initialization
      occurred. A task pane or content add-in can be initialized in two ways:


      - The user just inserted it from Recently Used Add-ins section of the
      Add-in drop-down list on the Insert tab of the ribbon in the Office host
      application, or from Insert add-in dialog box.


      - The user opened a document that already contains the add-in.


      *Note*: The reason parameter of the initialize event listener function
      only returns an `InitializationReason` enumeration value for task pane and
      content add-ins. It does not return a value for Outlook add-ins.
    remarks: >-
      **Support details**


      A capital Y in the following matrix indicates that this method is
      supported in the corresponding Office host application. An empty cell
      indicates that the Office host application doesn't support this method.


      For more information about Office host application and server
      requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!--
      -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office on
      Windows </th><th> Office in web browser </th><th> Office on iPad </th><th>
      Outlook on mobile devices </th><th> Office on Mac </th></tr>
      <tr><td><strong> Excel </strong></td><td> Y </td><td> Y </td><td> Y
      </td><td> </td><td> Y </td></tr> <tr><td><strong> Outlook
      </strong></td><td> Y </td><td> Y </td><td> </td><td> Y </td><td> Y
      </td></tr> <tr><td><strong> PowerPoint </strong></td><td> Y </td><td> Y
      </td><td> Y </td><td> </td><td> Y </td></tr> <tr><td><strong> Project
      </strong></td><td> Y </td><td> </td><td> </td><td> </td><td> Y </td></tr>
      <tr><td><strong> Word </strong></td><td> Y </td><td> Y </td><td> Y
      </td><td> </td><td> Y </td></tr> </table>


      #### Examples


      ```javascript

      // You can use the value of the InitializationEnumeration to implement
      different logic for

      // when the add-in is first inserted versus when it is already part of the
      document.

      // The following example shows some simple logic that uses the value of
      the reason parameter

      // to display how the task pane or content add-in was initialized.

      Office.initialize = function (reason) {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
          // After the DOM is loaded, code specific to the add-in can run.
          // Display initialization reason.
          if (reason == "inserted")
          write("The add-in was just inserted.");

          if (reason == "documentOpened")
          write("The add-in is already part of the document.");
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export function initialize(reason: InitializationReason): void;'
      parameters:
        - id: reason
          description: Indicates how the app was initialized.
          type: '<xref uid="office!Office.InitializationReason:enum" />'
      return:
        type: void
        description: ''
  - name: 'Office.isSetSupported(name, minVersion)'
    uid: 'office!Office.isSetSupported:function(1)'
    package: office!
    summary: >-
      Checks if the specified requirement set is supported by the host Office
      application.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function isSetSupported(name: string, minVersion?: string):
        boolean;
      parameters:
        - id: name
          description: 'Set name; e.g., "MatrixBindings".'
          type: string
        - id: minVersion
          description: 'The minimum required version; e.g., "1.4".'
          type: string
      return:
        type: boolean
        description: ''
  - name: Office.onReady(callback)
    uid: 'office!Office.onReady:function(1)'
    package: office!
    summary: >-
      Ensures that the Office JavaScript APIs are ready to be called by the
      add-in. If the framework hasn't initialized yet, the callback or promise
      will wait until the Office host is ready to accept API calls. Note that
      though this API is intended to be used inside an Office add-in, it can
      also be used outside the add-in. In that case, once Office.js determines
      that it is running outside of an Office host application, it will call the
      callback and resolve the promise with "null" for both the host and
      platform.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function onReady(callback?: (info: { host: HostType, platform:
        PlatformType }) => any): Promise<{ host: HostType, platform:
        PlatformType }>;
      parameters:
        - id: callback
          description: >-
            An optional callback method, that will receive the host and platform
            info. Alternatively, rather than use a callback, an add-in may
            simply wait for the Promise returned by the function to resolve.
          type: >-
            (info: { host: <xref uid="office!Office.HostType:enum" />, platform:
            <xref uid="office!Office.PlatformType:enum" /> }) =&gt; any
      return:
        type: >-
          Promise&lt;{ host: <xref uid="office!Office.HostType:enum" />,
          platform: <xref uid="office!Office.PlatformType:enum" /> }&gt;
        description: >-
          A Promise that contains the host and platform info, once
          initialization is completed.
  - name: 'Office.select(expression, callback)'
    uid: 'office!Office.select:function(1)'
    package: office!
    summary: >-
      Returns a promise of an object described in the expression. Callback is
      invoked only if method fails.
    remarks: >-
      **Support details**


      A capital Y in the following matrix indicates that this method is
      supported in the corresponding Office host application. An empty cell
      indicates that the Office host application doesn't support this method.


      For more information about Office host application and server
      requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!--
      -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office on
      Windows </th><th> Office in web browser </th><th> Office on iPad
      </th></tr> <tr><td><strong> Excel </strong></td><td> Y </td><td> Y
      </td><td> Y </td></tr> <tr><td><strong> Word </strong></td><td> Y
      </td><td> </td><td> Y </td></tr> </table>


      #### Examples


      ```javascript

      // The following code example uses the select method to retrieve a binding
      with the id "cities" from

      // the Bindings collection, and then calls the addHandlerAsync method to
      add an event handler for the

      // dataChanged event of the binding.

      function addBindingDataChangedEventHandler() {
          Office.select("bindings#cities", function onError(){}).addHandlerAsync(Office.EventType.BindingDataChanged,
          function (eventArgs) {
              doSomethingWithBinding(eventArgs.binding);
          });
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function select(expression: string, callback?: (result:
        AsyncResult<any>) => void): Binding;
      parameters:
        - id: expression
          description: >-
            The object to be retrieved. Example "bindings\#BindingName",
            retrieves a binding promise for a binding named 'BindingName'
          type: string
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns,
            whose only parameter is of type
            [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!--
            -->.
          type: >-
            (result: <xref uid="office!Office.AsyncResult:interface"
            />&lt;any&gt;) =&gt; void
      return:
        type: '<xref uid="office!Office.Binding:interface" />'
        description: ''
  - name: Office.useShortNamespace(useShortNamespace)
    uid: 'office!Office.useShortNamespace:function(1)'
    package: office!
    summary: >-
      Toggles on and off the `Office` alias for the full
      `Microsoft.Office.WebExtension` namespace.
    remarks: >-
      **Support details**


      A capital Y in the following matrix indicates that this method is
      supported in the corresponding Office host application. An empty cell
      indicates that the Office host application doesn't support this method.


      For more information about Office host application and server
      requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!--
      -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office on
      Windows </th><th> Office in web browser </th><th> Office on iPad </th><th>
      Outlook on mobile devices </th><th> Office on Mac </th></tr>
      <tr><td><strong> Excel </strong></td><td> Y </td><td> Y </td><td> Y
      </td><td> </td><td> </td></tr> <tr><td><strong> Outlook </strong></td><td>
      Y </td><td> Y </td><td> </td><td> Y </td><td> Y </td></tr>
      <tr><td><strong> PowerPoint </strong></td><td> Y </td><td> Y </td><td> Y
      </td><td> </td><td> </td></tr> <tr><td><strong> Project </strong></td><td>
      Y </td><td> </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Word
      </strong></td><td> Y </td><td> Y </td><td> Y </td><td> </td><td>
      </td></tr> </table>


      #### Examples


      ```javascript

      function startUsingShortNamespace() {
          if (typeof Office === 'undefined') {
              Microsoft.Office.WebExtension.useShortNamespace(true);
          }
          else {
              Office.useShortNamespace(true);
          }
          write('Office alias is now ' + typeof Office);
      }


      function stopUsingShortNamespace() {
          if (typeof Office === 'undefined') {
              Microsoft.Office.WebExtension.useShortNamespace(false);
          }
          else {
              Office.useShortNamespace(false);
          }
          write('Office alias is now ' + typeof Office);
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export function useShortNamespace(useShortNamespace: boolean): void;'
      parameters:
        - id: useShortNamespace
          description: >-
            True to use the shortcut alias; otherwise false to disable it. The
            default is true.
          type: boolean
      return:
        type: void
        description: ''
