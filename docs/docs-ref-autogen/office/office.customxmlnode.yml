### YamlMime:UniversalReference
items:
  - uid: office.Office.CustomXmlNode
    summary: Represents an XML node in a tree in a document.
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>


      **Support details**


      A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host
      application. An empty cell indicates that the Office host application doesn't support this interface.


      For more information about Office host application and server requirements, see [Requirements for running Office
      Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


      *Supported hosts, by platform* <table> <tr><th> </th><th> Office for Windows desktop </th><th> Office Online (in
      browser) </th><th> Office for iPad </th></tr> <tr><td><strong> Word </strong></td><td> Y </td><td> Y </td><td> Y
      </td></tr> </table>
    name: Office.CustomXmlNode
    fullName: office.Office.CustomXmlNode
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.CustomXmlNode.baseName
      - office.Office.CustomXmlNode.getNodesAsync
      - office.Office.CustomXmlNode.getNodeValueAsync
      - office.Office.CustomXmlNode.getTextAsync
      - office.Office.CustomXmlNode.getXmlAsync
      - office.Office.CustomXmlNode.namespaceUri
      - office.Office.CustomXmlNode.nodeType
      - office.Office.CustomXmlNode.setNodeValueAsync
      - office.Office.CustomXmlNode.setTextAsync
      - office.Office.CustomXmlNode.setXmlAsync
  - uid: office.Office.CustomXmlNode.baseName
    summary: 'Gets the base name of the node without the namespace prefix, if one exists.'
    remarks: |-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
      #### Examples

      ```javascript
      function showXmlNodeBaseNames() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.baseName);
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: baseName
    fullName: office.Office.CustomXmlNode.baseName
    langs:
      - typeScript
    type: property
    syntax:
      content: 'baseName: string;'
      return:
        type:
          - string
  - uid: office.Office.CustomXmlNode.getNodesAsync
    summary: Gets the nodes associated with the XPath expression.
    remarks: |-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
      #### Examples

      ```javascript
      function showXmlChildNodes() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      node.getNodesAsync('*', function (nodeResults) {
                          write(nodeResults.value.length + " childNodes");
                      });
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getNodesAsync(xPath, options, callback)'
    fullName: office.Office.CustomXmlNode.getNodesAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: The XPath expression that specifies the nodes to get. Required.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of
            type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlNode.getNodeValueAsync
    summary: Gets the node value.
    remarks: |-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
      #### Examples

      ```javascript
      function showXmlNodeValues() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      node.getNodeValueAsync(function (asyncResult) {
                          write(asyncResult.value);
                      });
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getNodeValueAsync(options, callback)'
    fullName: office.Office.CustomXmlNode.getNodeValueAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodeValueAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of
            type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlNode.getTextAsync
    summary: Gets the text of an XML node in a custom XML part.
    remarks: >-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>

      #### Examples


      ```javascript

      // Get the built-in core properties XML part by using its ID. This results in a call to Word.

      Office.context.document.customXmlParts.getByIdAsync("{6C3C8BC8-F283-45AE-878A-BAB7291924A1}", function
      (getByIdAsyncResult) {
          
          // Access the XML part.
          var xmlPart = getByIdAsyncResult.value;
          
          // Add namespaces to the namespace manager. These two calls result in two calls to Word.
          xmlPart.namespaceManager.addNamespaceAsync('cp', 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', function () {
              xmlPart.namespaceManager.addNamespaceAsync('dc', 'http://purl.org/dc/elements/1.1/', function () {

                  // Get XML nodes by using an Xpath expression. This results in a call to Word.
                  xmlPart.getNodesAsync("/cp:coreProperties/dc:title", function (getNodesAsyncResult) {
                      
                      // Get the first node returned by using the Xpath expression. 
                      var node = getNodesAsyncResult.value[0];
                      
                      // Get the text value of the node and use the asyncContext. This results in a call to Word. 
                      // The results are logged to the browser console.
                      node.getTextAsync({asyncContext: "StateNormal"}, function (getTextAsyncResult) {
                        console.log("Text of the title element = " + getTextAsyncResult.value;
                        console.log("The asyncContext value = " + getTextAsyncResult.asyncContext;
                      });
                  });
              });
          });
      });

      ```
    name: 'getTextAsync(options, callback)'
    fullName: office.Office.CustomXmlNode.getTextAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of
            type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlNode.getXmlAsync
    summary: Gets the node's XML.
    remarks: |-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
      #### Examples

      ```javascript
      function showXmlNodeInnerXml() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      node.getXmlAsync(function (asyncResult) {
                          write(asyncResult.value);
                      });
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getXmlAsync(options, callback)'
    fullName: office.Office.CustomXmlNode.getXmlAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of
            type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlNode.namespaceUri
    summary: Retrieves the string GUID of the CustomXMLPart.
    remarks: |-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
      #### Examples

      ```javascript
      function showXmlNamespaceUri() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.namespaceUri);
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: namespaceUri
    fullName: office.Office.CustomXmlNode.namespaceUri
    langs:
      - typeScript
    type: property
    syntax:
      content: 'namespaceUri: string;'
      return:
        type:
          - string
  - uid: office.Office.CustomXmlNode.nodeType
    summary: Gets the type of the CustomXMLNode.
    remarks: |-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
      #### Examples

      ```javascript
      function showXmlNodeType() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.nodeType);
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: nodeType
    fullName: office.Office.CustomXmlNode.nodeType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'nodeType: string;'
      return:
        type:
          - string
  - uid: office.Office.CustomXmlNode.setNodeValueAsync
    summary: Sets the node value.
    remarks: |-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
      #### Examples

      ```javascript
      function setXmlNodeValue() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node);
                      node.setNodeValueAsync("item number" + i, {}, function (result) { });
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'setNodeValueAsync(value, options, callback)'
    fullName: office.Office.CustomXmlNode.setNodeValueAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setNodeValueAsync(value: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: value
          description: The value to be set on the node
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of
            type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlNode.setTextAsync
    summary: Asynchronously sets the text of an XML node in a custom XML part.
    remarks: >-
      <table><tr><td>Hosts</td><td>Word</td></tr>


      <tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>

      #### Examples


      ```javascript

      // Learn how to set the text value of a node in a custom XML part from the following example.


      // Get the built-in core properties XML part by using its ID. This results in a call to Word.

      Office.context.document.customXmlParts.getByIdAsync("{6C3C8BC8-F283-45AE-878A-BAB7291924A1}", function
      (getByIdAsyncResult) {
          
          // Access the XML part.
          var xmlPart = getByIdAsyncResult.value;
          
          // Add namespaces to the namespace manager. These two calls result in two calls to Word.
          xmlPart.namespaceManager.addNamespaceAsync('cp', 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', function () {
              xmlPart.namespaceManager.addNamespaceAsync('dc', 'http://purl.org/dc/elements/1.1/', function () {

                  // Get XML nodes by using an Xpath expression. This results in a call to the host.
                  xmlPart.getNodesAsync("/cp:coreProperties/dc:subject", function (getNodesAsyncResult) {
                      
                      // Get the first node returned by using the Xpath expression. This will be the subject element in this example.
                      var subjectNode = getNodesAsyncResult.value[0];
                      
                      // Set the text value of the subject node and use the asyncContext. This results in a call to the host. 
                      // The results are logged to the browser console. 
                      subjectNode.setTextAsync("newSubject", {asyncContext: "StateNormal"}, function (setTextAsyncResult) {
                        console.log("The status of the call: " + setTextAsyncResult.status);
                        console.log("The asyncContext value = " + setTextAsyncResult.asyncContext);
                      });
                  });
              });
          });
      });

      ```
    name: 'setTextAsync(text, options, callback)'
    fullName: office.Office.CustomXmlNode.setTextAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setTextAsync(text: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: text
          description: Required. The text value of the XML node.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of
            type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlNode.setXmlAsync
    summary: Sets the node XML.
    remarks: |-
      <table><tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
      #### Examples

      ```javascript
      function setXmlNodeInnerXml() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      node.setXmlAsync("<childNode>" + i + "</childNode>");
                  }
              });
          });
      }
      ```
    name: 'setXmlAsync(xml, options, callback)'
    fullName: office.Office.CustomXmlNode.setXmlAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXmlAsync(xml: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xml
          description: The XML to be set on the node
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: >-
            Optional. A function that is invoked when the callback returns, whose only parameter is of
            type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
          type:
            - '(result: AsyncResult) => void'
