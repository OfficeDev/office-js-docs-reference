### YamlMime:UniversalReference
items:
  - uid: office.Office.Binding
    summary: Represents a binding to a section of the document.
    remarks: >-
      Hosts: Access, Excel, Word


      Available in Requirement sets: MatrixBinding, TableBinding, TextBinding


      The Binding object exposes the functionality possessed by all bindings regardless of type.


      The Binding object is never called directly. It is the abstract parent class of the objects that represent each
      type of binding: MatrixBinding, TableBinding, or TextBinding. All three of these objects inherit the getDataAsync
      and setDataAsync methods from the Binding object that enable to you interact with the data in the binding. They
      also inherit the id and type properties for querying those property values. Additionally, the MatrixBinding and
      TableBinding objects expose additional methods for matrix- and table-specific features, such as counting the
      number of rows and columns.
    name: Office.Binding
    fullName: office.Office.Binding
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Binding.addHandlerAsync
      - office.Office.Binding.document
      - office.Office.Binding.getDataAsync
      - office.Office.Binding.id
      - office.Office.Binding.removeHandlerAsync
      - office.Office.Binding.setDataAsync
      - office.Office.Binding.type
  - uid: office.Office.Binding.addHandlerAsync
    summary: >-
      Adds an event handler to the object for the specified [Office.EventType](xref:office.Office.EventType)<!-- -->.
      Supported EventTypes are \`Office.EventType.BindingDataChanged\` and \`Office.EventType.BindingSelectionChanged\`.
    remarks: >
      You can add multiple event handlers for the specified eventType as long as the name of each event handler function
      is unique.


      #### Examples


      ```javascript

      // The following code sample calls the select method of the Office object to access the binding with ID
      "MyBinding",

      // and then calls the addHandlerAsync method to add a handler function for the bindingDataChanged event of that
      binding.

      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(Office.EventType.BindingDataChanged, onBindingDataChanged);
      }


      function onBindingDataChanged(eventArgs) {
          write("Data has changed in binding: " + eventArgs.binding.id);
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```


      ```javascript

      // To add an event handler for the BindingSelectionChanged event of a binding, use the addHandlerAsync method of
      the Binding object.

      // The event handler receives an argument of type BindingSelectionChangedEventArgs.

      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);
      }


      function onBindingSelectionChanged(eventArgs) {
          write(eventArgs.binding.id + " has been selected.");
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: office.Office.Binding.addHandlerAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: EventType, handler: any, options?: AsyncContextOptions, callback?: (result:
        AsyncResult) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: >-
            The event type. For bindings, it can be \`Office.EventType.BindingDataChanged\` or
            \`Office.EventType.BindingSelectionChanged\`.
          type:
            - EventType
        - id: handler
          description: >-
            The event handler function to add, whose only parameter is of
            type[Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) or
            [Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.
          type:
            - any
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Binding.document
    summary: Get the Document object associated with the binding.
    remarks: |
      Hosts: Access, Excel, Word

      #### Examples

      ```javascript
      Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
          write(asyncResult.value.document.url);
      });

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: document
    fullName: office.Office.Binding.document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'document: Document;'
      return:
        type:
          - Document
  - uid: office.Office.Binding.getDataAsync
    summary: Returns the data contained within the binding.
    remarks: >
      Hosts: Access, Excel, Word


      Available in Requirement sets: MatrixBindings, TableBindings, TextBindings


      When called from a MatrixBinding or TableBinding, the getDataAsync method will return a subset of the bound values
      if the optional startRow, startColumn, rowCount, and columnCount parameters are specified (and they specify a
      contiguous and valid range).


      #### Examples


      ```javascript

      function showBindingData() {
          Office.select("bindings#MyBinding").getDataAsync(function (asyncResult) {
              write(asyncResult.value)
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // There is an important difference in behavior between using the "table" and "matrix" coercionType with the

      // Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following

      // two examples. These code examples show event handler functions for the Binding.SelectionChanged event.


      // If you specify the "table" coercionType, the TableData.rows property ( result.value.rows in the following

      // code example) returns an array that contains only the body rows of the table. So, its 0th row will be the

      // first non-header row in the table.

      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync({ coercionType: 'table', startRow: evtArgs.startRow, startCol: 0, rowCount: 1, columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value.rows[0][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     

      // Function that writes to a div with id='message' on the page. 

      function write(message){ 
          document.getElementById('message').innerText += message; 
      }


      // However, if you specify the "matrix" coercionType, result.value in the following code example returns an array

      // that contains the table header in the 0th row. If the table header contains multiple rows, then these are all

      // included in the result.value matrix as separate rows before the table body rows are included.

      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync({ coercionType: 'matrix', startRow: evtArgs.startRow, startCol: 0, rowCount: 1, columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value[1][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     

      // Function that writes to a div with id='message' on the page. 

      function write(message){ 
          document.getElementById('message').innerText += message; 
      }

      ```
    name: 'getDataAsync(options, callback)'
    fullName: office.Office.Binding.getDataAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync(options?: GetBindingDataOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Provides options for how to get the data in a binding.
          type:
            - GetBindingDataOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Binding.id
    summary: A string that uniquely identifies this binding among the bindings in the same Document object.
    remarks: |
      Hosts: Access, Excel, Word

      #### Examples

      ```javascript
      Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
          write(asyncResult.value.id);
      });

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: id
    fullName: office.Office.Binding.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
  - uid: office.Office.Binding.removeHandlerAsync
    summary: Removes the specified handler from the binding for the specified event type.
    remarks: |
      Hosts: Access, Excel, Word

      Available in Requirement set: BindingEvents

      #### Examples

      ```javascript
      function removeEventHandlerFromBinding() {
          Office.select("bindings#MyBinding").removeHandlerAsync(Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
      }
      ```
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: office.Office.Binding.removeHandlerAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: >-
            The event type. For bindings, it can be \`Office.EventType.BindingDataChanged\` or
            \`Office.EventType.BindingSelectionChanged\`.
          type:
            - EventType
        - id: options
          description: Provides options to determine which event handler or handlers are removed.
          type:
            - RemoveHandlerOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Binding.setDataAsync
    summary: Writes data to the bound section of the document represented by the specified binding object.
    remarks: >
      Hosts: Access, Excel, Word


      Available in Requirement sets: MatrixBindings, TableBindings, TextBindings


      #### Examples


      ```javascript

      function setBindingData() {
          Office.select("bindings#MyBinding").setDataAsync('Hello World!', function (asyncResult) { });
      }


      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a
      binding.

      // For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter as
      "html"

      // as shown in the following example, which uses HTML <b> tags to make "Hello" bold.

      function writeHtmlData() {
          Office.select("bindings#myBinding").setDataAsync("<b>Hello</b> World!", {coercionType: "html"}, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              }
          });
      }


      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // In this example, the call to setDataAsync passes the data parameter as an array of arrays

      // (to create a single column of three rows), and specifies the data structure with the coercionType parameter as
      a "matrix".

      function writeBoundDataMatrix() {
          Office.select("bindings#myBinding").setDataAsync([['Berlin'],['Munich'],['Duisburg']],{ coercionType: "matrix" }, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }

      // Function that writes to a div with id='message' on the page.

      function write(message){
          document.getElementById('message').innerText += message; 
      }


      // In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter as a
      TableData object

      // (to write three columns and three rows), and specifies the data structure with the coercionType parameter as a
      "table".


      // In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData
      object,

      // but as a single column with a new header and three rows, to update the values in the last column of the table
      created

      // with the writeBoundDataTable function. The optional zero-based startColumn parameter is specified as 2 to
      replace the values

      // in the third column of the table.

      function writeBoundDataTable() {
          // Create a TableData object.
          var myTable = new Office.TableData();
          myTable.headers = ['First Name', 'Last Name', 'Grade'];
          myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];

          // Set myTable in the binding.
          Office.select("bindings#myBinding").setDataAsync(myTable, { coercionType: "table" }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }


      // Replace last column with different data.

      function updateTableData() {
          var newTable = new Office.TableData();
          newTable.headers = ["Gender"];
          newTable.rows = [["M"],["M"],["F"]];
          Office.select("bindings#myBinding").setDataAsync(newTable, { coercionType: "table", startColumn:2 }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }     
          });   
      }


      // In this example, the following call passes two formatting groups to cellFormat.

      Office.select("bindings#myBinding").setDataAsync([['Berlin'],['Munich'],['Duisburg']],
        {cellFormat:[{cells: {row: 1}, format: {fontColor: "yellow"}}, 
            {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}]}, 
        function (asyncResult){});
      ```
    name: 'setDataAsync(data, options, callback)'
    fullName: office.Office.Binding.setDataAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: >-
            The data to be set in the current selection. Possible data types by host: string: Excel, Excel Online, Word,
            and Word Online only array of arrays: Excel and Word
            only[Office.TableData](xref:office.Office.TableData)<!-- -->: Access, Excel, and Word only


            HTML: Word and Word Online only


            Office Open XML: Word only
          type:
            - TableData | any
        - id: options
          description: Provides options for how to set the data in a binding.
          type:
            - SetBindingDataOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.Binding.type
    summary: Gets the type of the binding.
    remarks: |
      Hosts: Access, Excel, Word

      #### Examples

      ```javascript
      Office.context.document.bindings.getByIdAsync("MyBinding", function (asyncResult) { 
          write(asyncResult.value.type); 
      }) 

      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message;  
      }
      ```
    name: type
    fullName: office.Office.Binding.type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'type: BindingType;'
      return:
        type:
          - BindingType
