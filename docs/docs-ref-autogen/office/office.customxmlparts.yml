### YamlMime:UniversalReference
items:
  - uid: office.Office.CustomXmlParts
    summary: Represents a collection of CustomXmlPart objects.
    remarks: |-
      <table><tr><td>Hosts</td><td>Word</td></tr>

      <tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>
    name: Office.CustomXmlParts
    fullName: office.Office.CustomXmlParts
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.CustomXmlParts.addAsync
      - office.Office.CustomXmlParts.getByIdAsync
      - office.Office.CustomXmlParts.getByNamespaceAsync
  - uid: office.Office.CustomXmlParts.addAsync
    summary: Asynchronously adds a new custom XML part to a file.
    remarks: |
      <table><tr><td>Hosts</td><td>Word</td></tr>

      <tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>

      #### Examples

      ```javascript
      function addXMLPart() {
          Office.context.document.customXmlParts.addAsync('<root categoryId="1" xmlns="http://tempuri.org"><item name="Cheap Item" price="$193.95"/><item name="Expensive Item" price="$931.88"/></root>', function (result) {
              });
      }

      function addXMLPartandHandler() {
          Office.context.document.customXmlParts.addAsync("<testns:book xmlns:testns='http://testns.com'><testns:page number='1'>Hello</testns:page><testns:page number='2'>world!</testns:page></testns:book>",
              function(r) { r.value.addHandlerAsync(Office.EventType.DataNodeDeleted,
                  function(a) {write(a.type)
                  },
                      function(s) {write(s.status)
                      });
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
    name: 'addAsync(xml, options, callback)'
    fullName: office.Office.CustomXmlParts.addAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAsync(xml: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xml
          description: The XML to add to the newly created custom XML part.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlParts.getByIdAsync
    summary: Asynchronously gets the specified custom XML part by its id.
    remarks: |
      <table><tr><td>Hosts</td><td>Word</td></tr>

      <tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>

      #### Examples

      ```javascript
      function showXMLPartInnerXML() {
          Office.context.document.customXmlParts.getByIdAsync("{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getXmlAsync({}, function (eventArgs) {
                  write(eventArgs.value);
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getByIdAsync(id, options, callback)'
    fullName: office.Office.CustomXmlParts.getByIdAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByIdAsync(id: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: 'The GUID of the custom XML part, including opening and closing braces.'
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
  - uid: office.Office.CustomXmlParts.getByNamespaceAsync
    summary: Asynchronously gets the specified custom XML part(s) by its namespace.
    remarks: |
      <table><tr><td>Hosts</td><td>Word</td></tr>

      <tr><td>Requirement Sets</td><td>CustomXmlParts</td></tr></table>

      #### Examples

      ```javascript
      function showXMLPartsInNamespace() {
          Office.context.document.customXmlParts.getByNamespaceAsync("http://tempuri.org", function (eventArgs) {
              write("Found " + eventArgs.value.length + " parts with this namespace");
          }); 
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getByNamespaceAsync(ns, options, callback)'
    fullName: office.Office.CustomXmlParts.getByNamespaceAsync
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getByNamespaceAsync(ns: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult) => void):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: ns
          description: The namespace URI.
          type:
            - string
        - id: options
          description: 'Provides an option for preserving context data of any type, unchanged, for use in a callback.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. A function that is invoked when the callback returns, whose only parameter is of type AsyncResult.'
          type:
            - '(result: AsyncResult) => void'
