### YamlMime:TSType
name: Excel.EntityViewLayouts
uid: excel!Excel.EntityViewLayouts:interface
package: excel!
fullName: Excel.EntityViewLayouts
summary: Represents layout information for various views of the entity.
remarks: >-
  \[ [API set: ExcelApi
  1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-entity-attribution.yaml


  function makeProductEntity(productID: number, productName: string, product?:
  any) {
    const entity: Excel.EntityCellValue = {
      type: Excel.CellValueType.entity,
      text: productName,
      properties: { /* Excel.EntityPropertyType */
        "Product ID": {
          type: Excel.CellValueType.string,
          basicValue: productID.toString() || ""
        },
        "Product Name": {
          type: Excel.CellValueType.string,
          basicValue: productName || ""
        },
        "Quantity Per Unit": {
          type: Excel.CellValueType.string,
          basicValue: product.quantityPerUnit || ""
        },
        // Add Unit Price as a formatted number.
        "Unit Price": {
          type: Excel.CellValueType.formattedNumber,
          basicValue: product.unitPrice,
          numberFormat: "$* #,##0.00"
        }
      },
      layouts: { /* Excel.EntityViewLayouts */
        card: { /* Excel.EntityCardLayout */
          title: { property: "Product Name" },
          sections: [ /* Excel.CardLayoutSection */
            {
              layout: "List",
              properties: ["Product ID"]
            },
            {
              layout: "List",
              title: "Quantity and price",
              collapsible: true,
              collapsed: false,
              properties: ["Quantity Per Unit", "Unit Price"]
            }
          ]
        }
      },
      provider: {
        description: product.providerName, // Name of the data provider. Displays as a tooltip when hovering over the logo. Also displays as a fallback if the source address for the image is broken.
        logoSourceAddress: product.sourceAddress, // Source URL of the logo to display.
        logoTargetAddress: product.targetAddress // Destination URL that the logo navigates to when clicked.
      }
    };

    return entity;
  }

  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: card
    uid: excel!Excel.EntityViewLayouts#card:member
    package: excel!
    fullName: card
    summary: >-
      Represents the layout of this entity in card view. If the `CardLayout`
      object does not have a layout property, it is assumed to be "Entity".
    remarks: >-
      \[ [API set: ExcelApi
      1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'card?: CardLayout;'
      return:
        type: <xref uid="excel!Excel.CardLayout:type" />
  - name: compact
    uid: excel!Excel.EntityViewLayouts#compact:member
    package: excel!
    fullName: compact
    summary: >-
      Represents the layout used when there is limited space to represent the
      entity.
    remarks: >-
      \[ [API set: ExcelApi
      1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'compact?: CompactLayout;'
      return:
        type: <xref uid="excel!Excel.CompactLayout:type" />
