### YamlMime:TSType
name: Excel.CellBorder
uid: excel!Excel.CellBorder:interface
package: excel!
fullName: Excel.CellBorder
summary: >-
  Represents the properties of a single border returned by
  `getCellProperties`<!-- -->, `getRowProperties`<!-- -->, and
  `getColumnProperties`<!-- -->, or the border property input parameter of
  `setCellProperties`<!-- -->, `setRowProperties`<!-- -->, and
  `setColumnProperties`<!-- -->.
remarks: >-
  \[ [API set: ExcelApi
  1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getActiveWorksheet();

      // Creating the SettableCellProperties objects to use for the range.
      // In your add-in, these should be created once, outside the function.
      const topHeaderProps: Excel.SettableCellProperties = {
          // The style property takes a string matching the name of an Excel style.
          // Built-in style names are listed in the `BuiltInStyle` enum.
          // Note that a style will overwrite any formatting,
          // so do not use the format property with the style property.
          style: "Heading1"
      };

      const headerProps: Excel.SettableCellProperties = {
          // Any subproperties of format that are not set will not be changed when these cell properties are set.
          format: {
              fill: {
                  color: "Blue"
              },
              font: {
                  color: "White",
                  bold: true
              }
          }
      };

      const nonApplicableProps: Excel.SettableCellProperties = {
          format: {
              fill: {
                  pattern: Excel.FillPattern.gray25
              },
              font: {
                  color: "Gray",
                  italic: true
              }
          }
      };

      const matchupScoreProps: Excel.SettableCellProperties = {
          format: {
              borders: {
                  bottom: {
                      style: Excel.BorderLineStyle.continuous
                  },
                  left: {
                      style: Excel.BorderLineStyle.continuous
                  },
                  right: {
                      style: Excel.BorderLineStyle.continuous
                  },
                  top: {
                      style: Excel.BorderLineStyle.continuous
                  }
              }
          }
      };

      const range = sheet.getRange("A1:E5");

      // You can use empty JSON objects to avoid changing a cell's properties.
      range.setCellProperties([
          [topHeaderProps, {}, {}, {}, {}],
          [{}, {}, headerProps, headerProps, headerProps],
          [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
          [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
          [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
      ]);

      sheet.getUsedRange().format.autofitColumns();
      await context.sync();
  });

  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: color
    uid: excel!Excel.CellBorder#color:member
    package: excel!
    fullName: color
    summary: Represents the `color` property of a single border.
    remarks: >-
      \[ [API set: ExcelApi
      1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'color?: string;'
      return:
        type: string
  - name: style
    uid: excel!Excel.CellBorder#style:member
    package: excel!
    fullName: style
    summary: Represents the `style` property of a single border.
    remarks: >-
      \[ [API set: ExcelApi
      1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        style?: Excel.BorderLineStyle | "None" | "Continuous" | "Dash" |
        "DashDot" | "DashDotDot" | "Dot" | "Double" | "SlantDashDot";
      return:
        type: >-
          <xref uid="excel!Excel.BorderLineStyle:enum" /> | "None" |
          "Continuous" | "Dash" | "DashDot" | "DashDotDot" | "Dot" | "Double" |
          "SlantDashDot"
  - name: tintAndShade
    uid: excel!Excel.CellBorder#tintAndShade:member
    package: excel!
    fullName: tintAndShade
    summary: Represents the `tintAndShade` property of a single border.
    remarks: >-
      \[ [API set: ExcelApi
      1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tintAndShade?: number;'
      return:
        type: number
  - name: weight
    uid: excel!Excel.CellBorder#weight:member
    package: excel!
    fullName: weight
    summary: Represents the `weight` property of a single border.
    remarks: >-
      \[ [API set: ExcelApi
      1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'weight?: Excel.BorderWeight | "Hairline" | "Thin" | "Medium" | "Thick";'
      return:
        type: >-
          <xref uid="excel!Excel.BorderWeight:enum" /> | "Hairline" | "Thin" |
          "Medium" | "Thick"
