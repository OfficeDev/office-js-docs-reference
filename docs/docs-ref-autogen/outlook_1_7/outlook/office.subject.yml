### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Subject:interface'
    summary: |-
      Provides methods to get and set the subject of an appointment or message in an Outlook add-in.

      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose
    name: Office.Subject
    fullName: Office.Subject
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Subject#getAsync:member(1)'
      - 'outlook!Office.Subject#getAsync:member(2)'
      - 'outlook!Office.Subject#setAsync:member(1)'
      - 'outlook!Office.Subject#setAsync:member(2)'
  - uid: 'outlook!Office.Subject#getAsync:member(1)'
    summary: >-
      Gets the subject of an appointment or message.


      The `getAsync` method starts an asynchronous call to the Exchange server to get the subject of an appointment or
      message.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose
    name: 'getAsync(options, callback)'
    fullName: 'getAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback method.
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->. The `value` property of the result is the subject of the item.
          type:
            - 'outlook!Office.Subject#getAsync~0:complex'
  - uid: 'outlook!Office.Subject#getAsync:member(2)'
    summary: >-
      Gets the subject of an appointment or message.


      The getAsync method starts an asynchronous call to the Exchange server to get the subject of an appointment or
      message.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose


      #### Examples


      ```javascript

      Office.context.mailbox.item.subject.getAsync(callback);


      function callback(asyncResult) {
          var subject = asyncResult.value;
      }

      ```
    name: getAsync(callback)
    fullName: getAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->. The `value` property of the result is the subject of the item.
          type:
            - 'outlook!Office.Subject#getAsync~1:complex'
  - uid: 'outlook!Office.Subject#setAsync:member(1)'
    summary: >-
      Sets the subject of an appointment or message.


      The `setAsync` method starts an asynchronous call to the Exchange server to set the subject of an appointment or
      message. Setting the subject overwrites the current subject, but leaves any prefixes, such as "Fwd:" or "Re:" in
      place.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose


      **Errors**:


      - `DataExceedsMaximumSize`<!-- -->: The subject parameter is longer than 255 characters.
    name: 'setAsync(subject, options, callback)'
    fullName: 'setAsync(subject, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        setAsync(subject: string, options?: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: subject
          description: The subject of the appointment or message. The string is limited to 255 characters.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. `asyncContext`<!-- -->:
            Developers can provide any object they wish to access in the callback method.
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. If setting the subject fails, the `asyncResult.error`
            property will contain an error code.
          type:
            - 'outlook!Office.Subject#setAsync~0:complex'
  - uid: 'outlook!Office.Subject#setAsync:member(2)'
    summary: >-
      Sets the subject of an appointment or message.


      The `setAsync` method starts an asynchronous call to the Exchange server to set the subject of an appointment or
      message. Setting the subject overwrites the current subject, but leaves any prefixes, such as "Fwd:" or "Re:" in
      place.


      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose


      **Errors**:


      - `DataExceedsMaximumSize`<!-- -->: The subject parameter is longer than 255 characters.


      #### Examples


      ```javascript

      Office.context.mailbox.item.subject.setAsync("New subject!", function (asyncResult) {
          if (asyncResult.status === "failed") {
              console.log("Action failed with error: " + asyncResult.error.message);
          }
      });

      ```
    name: 'setAsync(data, callback)'
    fullName: 'setAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: ''
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. If setting the subject fails, the `asyncResult.error`
            property will contain an error code.
          type:
            - 'outlook!Office.Subject#setAsync~1:complex'
references:
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Subject#getAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Subject#getAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Subject#setAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject#setAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
