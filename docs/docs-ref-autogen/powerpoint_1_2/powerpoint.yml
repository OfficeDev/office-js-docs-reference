### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
interfaces:
  - 'powerpoint!PowerPoint.AddSlideOptions:interface'
  - 'powerpoint!PowerPoint.InsertSlideOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.PresentationData:interface'
  - 'powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.ShapeCollectionData:interface'
  - 'powerpoint!PowerPoint.Interfaces.ShapeCollectionLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.ShapeCollectionUpdateData:interface'
  - 'powerpoint!PowerPoint.Interfaces.ShapeData:interface'
  - 'powerpoint!PowerPoint.Interfaces.ShapeLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideCollectionLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionUpdateData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideLayoutData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideLayoutLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideMasterCollectionData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideMasterCollectionLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideMasterCollectionUpdateData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideMasterData:interface'
  - 'powerpoint!PowerPoint.Interfaces.SlideMasterLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.TagCollectionData:interface'
  - 'powerpoint!PowerPoint.Interfaces.TagCollectionLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.TagCollectionUpdateData:interface'
  - 'powerpoint!PowerPoint.Interfaces.TagData:interface'
  - 'powerpoint!PowerPoint.Interfaces.TagLoadOptions:interface'
  - 'powerpoint!PowerPoint.Interfaces.TagUpdateData:interface'
classes:
  - 'powerpoint!PowerPoint.Application:class'
  - 'powerpoint!PowerPoint.Presentation:class'
  - 'powerpoint!PowerPoint.RequestContext:class'
  - 'powerpoint!PowerPoint.Shape:class'
  - 'powerpoint!PowerPoint.ShapeCollection:class'
  - 'powerpoint!PowerPoint.Slide:class'
  - 'powerpoint!PowerPoint.SlideCollection:class'
  - 'powerpoint!PowerPoint.SlideLayout:class'
  - 'powerpoint!PowerPoint.SlideLayoutCollection:class'
  - 'powerpoint!PowerPoint.SlideMaster:class'
  - 'powerpoint!PowerPoint.SlideMasterCollection:class'
  - 'powerpoint!PowerPoint.Tag:class'
  - 'powerpoint!PowerPoint.TagCollection:class'
enums:
  - 'powerpoint!PowerPoint.ErrorCodes:enum'
  - 'powerpoint!PowerPoint.InsertSlideFormatting:enum'
functions:
  - name: PowerPoint.createPresentation(base64File)
    uid: 'powerpoint!PowerPoint.createPresentation:function(1)'
    package: powerpoint!
    summary: >-
      Creates and opens a new presentation. Optionally, the presentation can be pre-populated with a base64-encoded
      .pptx file.


      \[ [API set: PowerPointApi 1.1](/office/dev/add-ins/reference/javascript-api-for-office) \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export function createPresentation(base64File?: string): Promise<void>;'
      parameters:
        - id: base64File
          description: Optional. The base64-encoded .pptx file. The default value is null.
          type: string
      return:
        type: Promise&lt;void&gt;
        description: |-


          #### Examples

          ```javascript
          var myFile = document.getElementById("file");
          var reader = new FileReader();

          reader.onload = function (event) {
              // strip off the metadata before the base64-encoded string
              var startIndex = event.target.result.indexOf("base64,");
              var copyBase64 = event.target.result.substr(startIndex + 7);

              PowerPoint.createPresentation(copyBase64);        
          };

          // read in the file as a data URL so we can parse the base64-encoded string
          reader.readAsDataURL(myFile.files[0]);
          ```
  - name: PowerPoint.run(batch)
    uid: 'powerpoint!PowerPoint.run:function(1)'
    package: powerpoint!
    summary: >-
      Executes a batch script that performs actions on the PowerPoint object model, using a new RequestContext. When the
      promise is resolved, any tracked objects that were automatically allocated during execution will be released.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
      parameters:
        - id: batch
          description: >-
            A function that takes in a RequestContext and returns a promise (typically, just the result of
            "context.sync()"). The context parameter facilitates requests to the PowerPoint application. Since the
            Office add-in and the PowerPoint application run in two different processes, the RequestContext is required
            to get access to the PowerPoint object model from the add-in.
          type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
      return:
        type: Promise&lt;T&gt;
        description: ''
  - name: 'PowerPoint.run(object, batch)'
    uid: 'powerpoint!PowerPoint.run:function(2)'
    package: powerpoint!
    summary: >-
      Executes a batch script that performs actions on the PowerPoint object model, using the RequestContext of a
      previously-created API object. When the promise is resolved, any tracked objects that were automatically allocated
      during execution will be released.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) =>
        Promise<T>): Promise<T>;
      parameters:
        - id: object
          description: >-
            A previously-created API object. The batch will use the same RequestContext as the passed-in object, which
            means that any changes applied to the object will be picked up by "context.sync()".
          type: '<xref uid="office!OfficeExtension.ClientObject:class" />'
        - id: batch
          description: >-
            A function that takes in a RequestContext and returns a promise (typically, just the result of
            "context.sync()"). The context parameter facilitates requests to the PowerPoint application. Since the
            Office add-in and the PowerPoint application run in two different processes, the RequestContext is required
            to get access to the PowerPoint object model from the add-in.
          type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
      return:
        type: Promise&lt;T&gt;
        description: ''
  - name: 'PowerPoint.run(objects, batch)'
    uid: 'powerpoint!PowerPoint.run:function(3)'
    package: powerpoint!
    summary: >-
      Executes a batch script that performs actions on the PowerPoint object model, using the RequestContext of
      previously-created API objects.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) =>
        Promise<T>): Promise<T>;
      parameters:
        - id: objects
          description: >-
            An array of previously-created API objects. The array will be validated to make sure that all of the objects
            share the same context. The batch will use this shared RequestContext, which means that any changes applied
            to these objects will be picked up by "context.sync()".
          type: '<xref uid="office!OfficeExtension.ClientObject:class" />[]'
        - id: batch
          description: >-
            A function that takes in a RequestContext and returns a promise (typically, just the result of
            "context.sync()"). The context parameter facilitates requests to the PowerPoint application. Since the
            Office add-in and the PowerPoint application run in two different processes, the RequestContext is required
            to get access to the PowerPoint object model from the add-in.
          type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
      return:
        type: Promise&lt;T&gt;
        description: ''
