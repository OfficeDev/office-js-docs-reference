### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.AppointmentRead:interface'
    summary: >-
      The appointment attendee mode of [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


      **Important**: This is an internal Outlook object, not directly exposed through existing interfaces. You should
      treat this as a mode of Office.context.mailbox.item. Refer to the [Object
      Model](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.4/office.context.mailbox.item)
      page for more information.


      Parent interfaces:


      - [ItemRead](xref:outlook!Office.ItemRead:interface)


      - [Appointment](xref:outlook!Office.Appointment:interface)
    name: Office.AppointmentRead
    fullName: Office.AppointmentRead
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Appointment:interface'
      - 'outlook!Office.ItemRead:interface'
    package: outlook!
    children:
      - 'outlook!Office.AppointmentRead#attachments:member'
      - 'outlook!Office.AppointmentRead#body:member'
      - 'outlook!Office.AppointmentRead#dateTimeCreated:member'
      - 'outlook!Office.AppointmentRead#dateTimeModified:member'
      - 'outlook!Office.AppointmentRead#displayReplyAllForm:member(1)'
      - 'outlook!Office.AppointmentRead#displayReplyForm:member(1)'
      - 'outlook!Office.AppointmentRead#end:member'
      - 'outlook!Office.AppointmentRead#getEntities:member(1)'
      - 'outlook!Office.AppointmentRead#getEntitiesByType:member(1)'
      - 'outlook!Office.AppointmentRead#getFilteredEntitiesByName:member(1)'
      - 'outlook!Office.AppointmentRead#getRegExMatches:member(1)'
      - 'outlook!Office.AppointmentRead#getRegExMatchesByName:member(1)'
      - 'outlook!Office.AppointmentRead#itemClass:member'
      - 'outlook!Office.AppointmentRead#itemId:member'
      - 'outlook!Office.AppointmentRead#itemType:member'
      - 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentRead#location:member'
      - 'outlook!Office.AppointmentRead#normalizedSubject:member'
      - 'outlook!Office.AppointmentRead#notificationMessages:member'
      - 'outlook!Office.AppointmentRead#optionalAttendees:member'
      - 'outlook!Office.AppointmentRead#organizer:member'
      - 'outlook!Office.AppointmentRead#requiredAttendees:member'
      - 'outlook!Office.AppointmentRead#start:member'
      - 'outlook!Office.AppointmentRead#subject:member'
  - uid: 'outlook!Office.AppointmentRead#attachments:member'
    summary: Gets the item's attachments as an array.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      **Note**: Certain types of files are blocked by Outlook due to potential security issues and are therefore not
      returned. For more information, see [Blocked attachments in
      Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!--
      -->.


      #### Examples


      ```javascript

      // The following code builds an HTML string with details of all attachments on the current item.

      var item = Office.context.mailbox.item;

      var outputString = "";


      if (item.attachments.length > 0) {
          for (i = 0 ; i < item.attachments.length ; i++) {
              var attachment = item.attachments[i];
              outputString += "<BR>" + i + ". Name: ";
              outputString += attachment.name;
              outputString += "<BR>ID: " + attachment.id;
              outputString += "<BR>contentType: " + attachment.contentType;
              outputString += "<BR>size: " + attachment.size;
              outputString += "<BR>attachmentType: " + attachment.attachmentType;
              outputString += "<BR>isInline: " + attachment.isInline;
          }
      }


      console.log(outputString);

      ```

      ```javascript

      var attachments = Office.context.mailbox.item.attachments;

      console.log(attachments);

      ```
    name: attachments
    fullName: attachments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#attachments~0:complex'
  - uid: 'outlook!Office.AppointmentRead#body:member'
    summary: |-
      Gets an object that provides methods for manipulating the body of an item.

      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // This example gets the body of the item as plain text.

      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.

      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }

      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.AppointmentRead#dateTimeCreated:member'
    summary: Gets the date and time that an item was created.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;

      console.log("Date and time created: " + dateTimeCreated);

      ```
    name: dateTimeCreated
    fullName: dateTimeCreated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#dateTimeModified:member'
    summary: |-
      Gets the date and time that an item was last modified.

      **Note**: This member is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var dateTimeModified = Office.context.mailbox.item.dateTimeModified;

      console.log("Date and time modified: " + dateTimeModified);

      ```
    name: dateTimeModified
    fullName: dateTimeModified
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeModified: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#displayReplyAllForm:member(1)'
    summary: >-
      Displays a reply form that includes the sender and all recipients of the selected message or the organizer and all
      attendees of the selected appointment.


      In Outlook on the web, the reply form is displayed as a pop-out form in the 3-column view and a pop-up form in the
      2- or 1-column view.


      If any of the string parameters exceed their limits, displayReplyAllForm throws an exception.


      When attachments are specified in the formData.attachments parameter, Outlook on the web and desktop clients
      attempt to download all attachments and attach them to the reply form. If any attachments fail to be added, an
      error is shown in the form UI. If this isn't possible, then no error message is thrown.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // The following code passes a string to the `displayReplyAllForm` function.

      Office.context.mailbox.item.displayReplyAllForm('hello there');

      Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


      // Reply with an empty body.

      Office.context.mailbox.item.displayReplyAllForm({});


      // Reply with just a body.

      Office.context.mailbox.item.displayReplyAllForm(

      {

      'htmlBody' : 'hi'

      });


      // Reply with a body and a file attachment.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : Office.MailboxEnums.AttachmentType.File,
              'name' : 'squirrel.png',
              'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });


      // Reply with a body and an item attachment.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : 'item',
              'name' : 'rand',
              'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });


      // Reply with a body, file attachment, item attachment, and a callback.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });

      ```

      ```javascript

      Office.context.mailbox.item.displayReplyAllForm(
        "This is a reply ALL with <b>some bold text</b>."
      );

      ```
    name: 'displayReplyAllForm(formData, callback)'
    fullName: 'displayReplyAllForm(formData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        displayReplyAllForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: >-
            A string that contains text and HTML and that represents the body of the reply form. The string is limited
            to 32 KB OR a [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) object that contains body or
            attachment data and a callback function.
          type:
            - 'outlook!Office.AppointmentRead#displayReplyAllForm~0:complex'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an Office.AsyncResult object.
          type:
            - 'outlook!Office.AppointmentRead#displayReplyAllForm~1:complex'
  - uid: 'outlook!Office.AppointmentRead#displayReplyForm:member(1)'
    summary: >-
      Displays a reply form that includes only the sender of the selected message or the organizer of the selected
      appointment.


      In Outlook on the web, the reply form is displayed as a pop-out form in the 3-column view and a pop-up form in the
      2- or 1-column view.


      If any of the string parameters exceed their limits, displayReplyForm throws an exception.


      When attachments are specified in the formData.attachments parameter, Outlook on the web and desktop clients
      attempt to download all attachments and attach them to the reply form. If any attachments fail to be added, an
      error is shown in the form UI. If this isn't possible, then no error message is thrown.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // The following code passes a string to the `displayReplyForm` function.

      Office.context.mailbox.item.displayReplyForm('hello there');

      Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


      // Reply with an empty body.

      Office.context.mailbox.item.displayReplyForm({});


      // Reply with just a body.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi'
      });


      // Reply with a body and a file attachment.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });


      // Reply with a body and an item attachment.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });


      // Reply with a body, file attachment, item attachment, and a callback.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });

      ```

      ```javascript

      Office.context.mailbox.item.displayReplyForm(
        "This is a reply with <i>some text in italics</i>."
      );

      ```

      ```javascript

      Office.context.mailbox.item.displayReplyForm(

      {
          htmlBody : "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
          attachments :
          [
              { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
              { type: "item", itemId : Office.context.mailbox.item.itemId, name: "test_email.msg" }
          ],
          options : { asyncContext: null },
          callback : function (result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded)
              {
                  console.error(`Action failed with message ${result.error.message}`);
              }
          }
      });

      ```
    name: 'displayReplyForm(formData, callback)'
    fullName: 'displayReplyForm(formData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        displayReplyForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: >-
            A string that contains text and HTML and that represents the body of the reply form. The string is limited
            to 32 KB OR a [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) object that contains body or
            attachment data and a callback function.
          type:
            - 'outlook!Office.AppointmentRead#displayReplyForm~0:complex'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an Office.AsyncResult object.
          type:
            - 'outlook!Office.AppointmentRead#displayReplyForm~1:complex'
  - uid: 'outlook!Office.AppointmentRead#end:member'
    summary: >-
      Gets the date and time that the appointment is to end.


      The end property is a Date object expressed as a Coordinated Universal Time (UTC) date and time value. You can use
      the convertToLocalClientTime method to convert the end property value to the client's local date and time.


      When you use the Time.setAsync method to set the end time, you should use the convertToUtcClientTime method to
      convert the local time on the client to UTC for the server.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var end = Office.context.mailbox.item.end;

      console.log("Appointment end: " + end);

      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#getEntities:member(1)'
    summary: |-
      Gets the entities found in the selected item's body.

      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // The following example accesses the contacts entities in the current item's body.


      var contacts = Office.context.mailbox.item.getEntities().contacts;

      ```

      ```javascript

      var entities = Office.context.mailbox.item.getEntities();

      var entityTypesFound = 0;

      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }

      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }

      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }

      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }

      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }

      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }

      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }

      if (entityTypesFound == 0)

      {
          console.log("No entities found on this item.");
      }

      ```
    name: getEntities()
    fullName: getEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType:member(1)'
    summary: |-
      Gets an array of all the entities of the specified entity type found in the selected item's body.

      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      While the minimum permission level to use this method is Restricted, some entity types require ReadItem to access,
      as specified in the following table.


      <table> <tr> <th>Value of entityType</th> <th>Type of objects in returned array</th> <th>Required Permission
      Level</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Contact</td>
      <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr>
      <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td>
      <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td>
      <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restricted</td> </tr> </table>


      #### Examples


      ```javascript

      // The following example shows how to access an array of strings that represent

      // postal addresses in the current item's body.


      // The initialize function is required for all apps.

      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, app-specific code can run.
              var item = Office.context.mailbox.item;
              // Get an array of strings that represent postal addresses in the current item's body.
              var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
              // Continue processing the array of addresses.
          });
      };

      ```

      ```javascript

      console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));

      ```
    name: getEntitiesByType(entityType)
    fullName: getEntitiesByType(entityType)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion |
        PhoneNumber | TaskSuggestion)[];
      return:
        type:
          - 'outlook!Office.AppointmentRead#getEntitiesByType~0:complex'
        description: >-
          If the value passed in entityType is not a valid member of the EntityType enumeration, the method returns
          null. If no entities of the specified type are present in the item's body, the method returns an empty array.
          Otherwise, the type of the objects in the returned array depends on the type of entity requested in the
          entityType parameter.
      parameters:
        - id: entityType
          description: One of the EntityType enumeration values.
          type:
            - 'outlook!Office.AppointmentRead#getEntitiesByType~1:complex'
  - uid: 'outlook!Office.AppointmentRead#getFilteredEntitiesByName:member(1)'
    summary: >-
      Returns well-known entities in the selected item that pass the named filter defined in the manifest XML file.


      The getFilteredEntitiesByName method returns the entities that match the regular expression defined in the
      ItemHasKnownEntity rule element in the manifest XML file with the specified FilterName element value.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // This API would only work when you click on highlighted physical address that has the word "Way" in it.

      console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));

      ```
    name: getFilteredEntitiesByName(name)
    fullName: getFilteredEntitiesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber |
        TaskSuggestion)[];
      return:
        type:
          - 'outlook!Office.AppointmentRead#getFilteredEntitiesByName~0:complex'
        description: >-
          If there is no ItemHasKnownEntity element in the manifest with a FilterName element value that matches the
          name parameter, the method returns null. If the name parameter does match an ItemHasKnownEntity element in the
          manifest, but there are no entities in the current item that match, the method return an empty array.
      parameters:
        - id: name
          description: The name of the ItemHasKnownEntity rule element that defines the filter to match.
          type:
            - string
  - uid: 'outlook!Office.AppointmentRead#getRegExMatches:member(1)'
    summary: >-
      Returns string values in the selected item that match the regular expressions defined in the manifest XML file.


      The getRegExMatches method returns the strings that match the regular expression defined in each
      ItemHasRegularExpressionMatch or ItemHasKnownEntity rule element in the manifest XML file. For an
      ItemHasRegularExpressionMatch rule, a matching string has to occur in the property of the item that is specified
      by that rule. The PropertyName simple type defines the supported properties.


      If you specify an ItemHasRegularExpressionMatch rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results. Instead,
      use the Body.getAsync method to retrieve the entire body.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // Consider an add-in manifest has the following `Rule` element:

      //<Rule xsi:type="RuleCollection" Mode="And">

      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

      //  <Rule xsi:type="RuleCollection" Mode="Or">

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut"
      PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
      RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //  </Rule>

      //</Rule>


      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

      //{

      //'fruits': ['apple','banana','Banana','coconut'],

      //'veggies': ['tomato','onion','spinach','broccoli']

      //}


      // The following example shows how to access the array of

      // matches for the regular expression rule elements `fruits`

      // and `veggies`, which are specified in the manifest.

      var allMatches = Office.context.mailbox.item.getRegExMatches();

      var fruits = allMatches.fruits;

      var veggies = allMatches.veggies;

      ```

      ```javascript

      // This API would only work when you click on highlighted word "ScriptLab".

      console.log(Office.context.mailbox.item.getRegExMatches());

      ```
    name: getRegExMatches()
    fullName: getRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type:
          - any
        description: >-
          An object that contains arrays of strings that match the regular expressions defined in the manifest XML file.
          The name of each array is equal to the corresponding value of the RegExName attribute of the matching
          ItemHasRegularExpressionMatch rule or the FilterName attribute of the matching ItemHasKnownEntity rule.
  - uid: 'outlook!Office.AppointmentRead#getRegExMatchesByName:member(1)'
    summary: >-
      Returns string values in the selected item that match the named regular expression defined in the manifest XML
      file.


      The getRegExMatchesByName method returns the strings that match the regular expression defined in the
      ItemHasRegularExpressionMatch rule element in the manifest XML file with the specified RegExName element value.


      If you specify an ItemHasRegularExpressionMatch rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // Consider an add-in manifest has the following `Rule` element:

      //<Rule xsi:type="RuleCollection" Mode="And">

      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

      //  <Rule xsi:type="RuleCollection" Mode="Or">

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut"
      PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
      RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //  </Rule>

      //</Rule>


      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

      //{

      //'fruits': ['apple','banana','Banana','coconut'],

      //'veggies': ['tomato','onion','spinach','broccoli']

      //}


      var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

      var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

      ```

      ```javascript

      // This API would only work when you click on highlighted word "ScriptLab".

      console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));

      ```
    name: getRegExMatchesByName(name)
    fullName: getRegExMatchesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      return:
        type:
          - 'string[]'
        description: An array that contains the strings that match the regular expression defined in the manifest XML file.
      parameters:
        - id: name
          description: The name of the ItemHasRegularExpressionMatch rule element that defines the filter to match.
          type:
            - string
  - uid: 'outlook!Office.AppointmentRead#itemClass:member'
    summary: >-
      Gets the Exchange Web Services item class of the selected item.


      You can create custom message classes that extends a default message class, for example, a custom appointment
      message class IPM.Appointment.Contoso.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      The itemClass property specifies the message class of the selected item. The following are the default message
      classes for the message or appointment item.


      <table> <tr> <th>Type</th> <th>Description</th> <th>Item Class</th> </tr> <tr> <td>Appointment items</td>
      <td>These are calendar items of the item class IPM.Appointment or IPM.Appointment.Occurrence.</td>
      <td>IPM.Appointment,IPM.Appointment.Occurrence</td> </tr> <tr> <td>Message items</td> <td>These include email
      messages that have the default message class IPM.Note, and meeting requests, responses, and cancellations, that
      use IPM.Schedule.Meeting as the base message class.</td>
      <td>IPM.Note,IPM.Schedule.Meeting.Request,IPM.Schedule.Meeting.Neg,IPM.Schedule.Meeting.Pos,IPM.Schedule.Meeting.Tent,IPM.Schedule.Meeting.Canceled</td>
      </tr> </table>


      #### Examples


      ```javascript

      var itemClass = Office.context.mailbox.item.itemClass;

      console.log("Item class: " + itemClass);

      ```
    name: itemClass
    fullName: itemClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemClass: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#itemId:member'
    summary: >-
      Gets the [Exchange Web Services item
      identifier](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)
      for the current item.


      The itemId property is not available in compose mode. If an item identifier is required, the saveAsync method can
      be used to save the item to the store, which will return the item identifier in the asyncResult.value parameter in
      the callback function.


      **Note**: The identifier returned by the itemId property is the same as the [Exchange Web Services item
      identifier](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)<!--
      -->. The itemId property is not identical to the Outlook Entry ID or the ID used by the Outlook REST API. Before
      making REST API calls using this value, it should be converted using Office.context.mailbox.convertToRestId. For
      more details, see [Use the Outlook REST APIs from an Outlook
      add-in](https://docs.microsoft.com/outlook/add-ins/use-rest-api#get-the-item-id)<!-- -->.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // The following code checks for the presence of an item

      // identifier. If the `itemId` property returns `null` or

      // `undefined`, it saves the item to the store and gets the

      // item identifier from the asynchronous result.

      // **Important**: `saveAsync` was introduced with requirement set 1.3

      // so you can't get the `itemId` in Compose mode in earlier sets.

      var itemId = Office.context.mailbox.item.itemId;

      if (itemId === null || itemId == undefined) {
          Office.context.mailbox.item.saveAsync(function(result) {
              itemId = result.value;
          });
      }

      ```
    name: itemId
    fullName: itemId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#itemType:member'
    summary: >-
      Gets the type of item that an instance represents.


      The itemType property returns one of the ItemType enumeration values, indicating whether the item object instance
      is a message or an appointment.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Appointment) {
          // Do something.
      } else {
          // Do something else.
      }

      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.AppointmentRead#itemType~0:complex'
  - uid: 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync:member(1)'
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key/value pairs on a per-app, per-item basis. This method returns a
      CustomProperties object in the callback, which provides methods to access the custom properties specific to the
      current item and the current add-in. Custom properties are not encrypted on the item, so this should not be used
      as secure storage.


      The custom properties are provided as a CustomProperties object in the asyncResult.value property. This object can
      be used to get, set, and remove custom properties from the item and save changes to the custom property set back
      to the server.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // The following example shows how to use the loadCustomPropertiesAsync method

      // to asynchronously load custom properties that are specific to the current item.

      // The example also shows how to use the saveAsync method to save these properties

      // back to the server. After loading the custom properties, the example uses the

      // get method to read the custom property myProp, the set method to write the

      // custom property otherProp, and then finally calls the saveAsync method to save

      // the custom properties.

      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };


      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }


      function saveCallback(asyncResult) {

      }

      ```

      ```javascript

      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });

      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void,
        userContext?: any): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: >-
            Optional. Developers can provide any object they wish to access in the callback function. This object can be
            accessed by the asyncResult.asyncContext property in the callback function.
          type:
            - any
  - uid: 'outlook!Office.AppointmentRead#location:member'
    summary: |-
      Gets the location of an appointment.

      The location property returns a string that contains the location of the appointment.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var location = Office.context.mailbox.item.location;

      console.log("location: " + location);

      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#normalizedSubject:member'
    summary: >-
      Gets the subject of an item, with all prefixes removed (including RE: and FWD:).


      The normalizedSubject property gets the subject of the item, with any standard prefixes (such as RE: and FW:) that
      are added by email programs. To get the subject of the item with the prefixes intact, use the subject property.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var normalizedSubject = Office.context.mailbox.item.normalizedSubject;

      console.log("Normalized subject: " + normalizedSubject);

      ```
    name: normalizedSubject
    fullName: normalizedSubject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#notificationMessages:member'
    summary: |-
      Gets the notification messages for an item.

      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // Get all notifications.

      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );

      ```

      ```javascript

      var id = $("#notificationId").val();

      var details =
        {
          type: "progressIndicator",
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

      ```

      ```javascript

      var id = $("#notificationId").val();

      var details =
        {
          type: "informationalMessage",
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

      ```

      ```javascript

      var id = $("#notificationId").val();

      var details =
        {
          type: "informationalMessage",
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

      ```

      ```javascript

      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          

      ```

      ```javascript

      var id = $("#notificationId").val();

      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: "informationalMessage",
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);
      ```

      ```javascript

      var id = $("#notificationId").val();

      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);

      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.AppointmentRead#optionalAttendees:member'
    summary: >-
      Provides access to the optional attendees of an event. The type of object and level of access depends on the mode
      of the current item.


      The optionalAttendees property returns an array that contains an
      [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) object for each optional attendee to the
      meeting. By default, the collection is limited to a maximum of 100 members. However, on Windows and Mac, you can
      get 500 members maximum.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var optionalAttendees = Office.context.mailbox.item.optionalAttendees;

      console.log("Optional attendees: " + JSON.stringify(optionalAttendees));

      ```

      ```javascript

      var apptOptionalAttendees = Office.context.mailbox.item.optionalAttendees;

      console.log("Optional attendees:");

      for (var i = 0; i < apptOptionalAttendees.length; i++) {
        console.log(
          apptOptionalAttendees[i].displayName +
            " (" +
            apptOptionalAttendees[i].emailAddress +
            ") - response: " +
            apptOptionalAttendees[i].appointmentResponse
        );
      }

      ```
    name: optionalAttendees
    fullName: optionalAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'optionalAttendees: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#optionalAttendees~0:complex'
  - uid: 'outlook!Office.AppointmentRead#organizer:member'
    summary: Gets the email address of the meeting organizer for a specified meeting.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var organizerName = Office.context.mailbox.item.organizer.displayName;

      var organizerAddress = Office.context.mailbox.item.organizer.emailAddress;

      console.log("Organizer: " + organizerName + " (" + organizerAddress + ")");

      ```

      ```javascript

      var apptOrganizer = Office.context.mailbox.item.organizer;

      console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");

      ```
    name: organizer
    fullName: organizer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'organizer: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.AppointmentRead#requiredAttendees:member'
    summary: >-
      Provides access to the required attendees of an event. The type of object and level of access depends on the mode
      of the current item.


      The requiredAttendees property returns an array that contains an
      [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) object for each required attendee to the
      meeting. By default, the collection is limited to a maximum of 100 members. However, on Windows and Mac, you can
      get 500 members maximum.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var requiredAttendees = Office.context.mailbox.item.requiredAttendees;

      console.log("Required attendees: " + JSON.stringify(requiredAttendees));

      ```

      ```javascript

      var apptRequiredAttendees = Office.context.mailbox.item.requiredAttendees;

      console.log("Required attendees:");

      for (var i = 0; i < apptRequiredAttendees.length; i++) {
        console.log(
          apptRequiredAttendees[i].displayName +
            " (" +
            apptRequiredAttendees[i].emailAddress +
            ") - response: " +
            apptRequiredAttendees[i].appointmentResponse
        );
      }

      ```
    name: requiredAttendees
    fullName: requiredAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requiredAttendees: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#requiredAttendees~0:complex'
  - uid: 'outlook!Office.AppointmentRead#start:member'
    summary: >-
      Gets the date and time that the appointment is to begin.


      The start property is a Date object expressed as a Coordinated Universal Time (UTC) date and time value. You can
      use the convertToLocalClientTime method to convert the value to the client's local date and time.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      var start = Office.context.mailbox.item.start;

      console.log("Appointment start: " + JSON.stringify(start));

      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#subject:member'
    summary: >-
      Gets the description that appears in the subject field of an item.


      The subject property gets or sets the entire subject of the item, as sent by the email server.


      The subject property returns a string. Use the normalizedSubject property to get the subject minus any leading
      prefixes such as RE: and FW:.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Attendee


      #### Examples


      ```javascript

      // The following JavaScript code example shows how to access the

      // `subject` property of the current item in Outlook.


      // The initialize function is required for all apps.

      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, app-specific code can run.
              var item = Office.context.mailbox.item;
              var subject = item.subject;
              // Continue with processing the subject of the
              // current item, which can be a message or appointment.
          });
      };

      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: string;'
      return:
        type:
          - string
references:
  - uid: 'outlook!Office.Appointment:interface'
    name: Appointment
  - uid: 'outlook!Office.ItemRead:interface'
    name: ItemRead
  - uid: 'outlook!Office.AppointmentRead#attachments~0:complex'
    name: 'AttachmentDetails[]'
    fullName: 'Office.AttachmentDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.AppointmentRead#displayReplyAllForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.AppointmentRead#displayReplyAllForm~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentRead#displayReplyForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.AppointmentRead#displayReplyForm~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Entities:interface'
    name: Entities
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType~1:complex'
    name: MailboxEnums.EntityType | string
    fullName: Office.MailboxEnums.EntityType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.EntityType:enum'
        name: MailboxEnums.EntityType
        fullName: Office.MailboxEnums.EntityType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#getFilteredEntitiesByName~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.AppointmentRead#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.AppointmentRead#optionalAttendees~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.EmailAddressDetails:interface'
    name: EmailAddressDetails
  - uid: 'outlook!Office.AppointmentRead#requiredAttendees~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
