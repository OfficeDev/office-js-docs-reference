### YamlMime:TSType
name: PowerPoint.BindingCollection
uid: 'powerpoint!PowerPoint.BindingCollection:class'
package: powerpoint!
fullName: PowerPoint.BindingCollection
summary: Represents the collection of all the binding objects that are part of the presentation.
remarks: >-
  \[ [API set: PowerPointApi BETA (PREVIEW
  ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
isPreview: true
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'powerpoint!PowerPoint.BindingCollection#context:member'
    package: powerpoint!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.RequestContext:class" />'
  - name: items
    uid: 'powerpoint!PowerPoint.BindingCollection#items:member'
    package: powerpoint!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'readonly items: PowerPoint.Binding[];'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Binding:class" />[]'
methods:
  - name: 'add(shape, bindingType, id)'
    uid: 'powerpoint!PowerPoint.BindingCollection#add:member(1)'
    package: powerpoint!
    fullName: 'add(shape, bindingType, id)'
    summary: >-
      Adds a new binding to a particular Shape. If the provided ID is already being used by a binding, the existing
      binding will be overwritten.
    remarks: >-
      \[ [API set: PowerPointApi BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'add(shape: PowerPoint.Shape, bindingType: PowerPoint.BindingType, id: string): PowerPoint.Binding;'
      parameters:
        - id: shape
          description: Shape to which the binding is added.
          type: '<xref uid="powerpoint!PowerPoint.Shape:class" />'
        - id: bindingType
          description: Type of binding. See `BindingType`<!-- -->.
          type: '<xref uid="powerpoint!PowerPoint.BindingType:enum" />'
        - id: id
          description: ID of the binding.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Binding:class" />'
        description: ''
  - name: 'add(shape, bindingTypeString, id)'
    uid: 'powerpoint!PowerPoint.BindingCollection#add:member(2)'
    package: powerpoint!
    fullName: 'add(shape, bindingTypeString, id)'
    summary: >-
      Adds a new binding to a particular Shape. If the provided ID is already being used by a binding, the existing
      binding will be overwritten.
    remarks: >-
      \[ [API set: PowerPointApi BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'add(shape: PowerPoint.Shape, bindingTypeString: "Shape", id: string): PowerPoint.Binding;'
      parameters:
        - id: shape
          description: Shape to which the binding is added.
          type: '<xref uid="powerpoint!PowerPoint.Shape:class" />'
        - id: bindingTypeString
          description: Type of binding. See `BindingType`<!-- -->.
          type: '"Shape"'
        - id: id
          description: ID of the binding.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Binding:class" />'
        description: ''
  - name: 'addFromSelection(bindingType, id)'
    uid: 'powerpoint!PowerPoint.BindingCollection#addFromSelection:member(1)'
    package: powerpoint!
    fullName: 'addFromSelection(bindingType, id)'
    summary: >-
      Adds a new binding based on the current selection. If the selection has multiple areas, the `InvalidReference`
      error will be returned.
    remarks: >-
      \[ [API set: PowerPointApi BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'addFromSelection(bindingType: PowerPoint.BindingType, id: string): PowerPoint.Binding;'
      parameters:
        - id: bindingType
          description: Type of binding. See `BindingType`<!-- -->.
          type: '<xref uid="powerpoint!PowerPoint.BindingType:enum" />'
        - id: id
          description: ID of the binding.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Binding:class" />'
        description: ''
  - name: 'addFromSelection(bindingTypeString, id)'
    uid: 'powerpoint!PowerPoint.BindingCollection#addFromSelection:member(2)'
    package: powerpoint!
    fullName: 'addFromSelection(bindingTypeString, id)'
    summary: >-
      Adds a new binding based on the current selection. If the selection has multiple areas, the `InvalidReference`
      error will be returned.
    remarks: >-
      \[ [API set: PowerPointApi BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'addFromSelection(bindingTypeString: "Shape", id: string): PowerPoint.Binding;'
      parameters:
        - id: bindingTypeString
          description: Type of binding. See `BindingType`<!-- -->.
          type: '"Shape"'
        - id: id
          description: ID of the binding.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Binding:class" />'
        description: ''
  - name: getCount()
    uid: 'powerpoint!PowerPoint.BindingCollection#getCount:member(1)'
    package: powerpoint!
    fullName: getCount()
    summary: Gets the number of bindings in the collection.
    remarks: >-
      \[ [API set: PowerPointApi BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getItem(key)
    uid: 'powerpoint!PowerPoint.BindingCollection#getItem:member(1)'
    package: powerpoint!
    fullName: getItem(key)
    summary: Gets a binding object by ID. Throws an ItemNotFoundException if there's no binding with that ID.
    remarks: >-
      \[ [API set: PowerPointApi BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): PowerPoint.Binding;'
      parameters:
        - id: key
          description: ID of the binding object to be retrieved.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Binding:class" />'
        description: ''
  - name: getItemAt(index)
    uid: 'powerpoint!PowerPoint.BindingCollection#getItemAt:member(1)'
    package: powerpoint!
    fullName: getItemAt(index)
    summary: >-
      Gets a binding object based on its position in the items array. Throws an InvalidArgumentException if the index
      less than 0, or greater than or equal to the count of items in the collection.
    remarks: >-
      \[ [API set: PowerPointApi BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): PowerPoint.Binding;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="powerpoint!PowerPoint.Binding:class" />'
        description: ''
  - name: getItemOrNullObject(id)
    uid: 'powerpoint!PowerPoint.BindingCollection#getItemOrNullObject:member(1)'
    package: powerpoint!
    fullName: getItemOrNullObject(id)
    summary: >-
      Gets a binding object by ID. If the binding object doesn't exist, then this method returns an object with its
      `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: >-
      \[ [API set: PowerPointApi BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(id: string): PowerPoint.Binding;'
      parameters:
        - id: id
          description: ID of the binding object to be retrieved.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Binding:class" />'
        description: ''
  - name: load(options)
    uid: 'powerpoint!PowerPoint.BindingCollection#load:member(1)'
    package: powerpoint!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        load(options?: PowerPoint.Interfaces.BindingCollectionLoadOptions &
        PowerPoint.Interfaces.CollectionLoadOptions): PowerPoint.BindingCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="powerpoint!PowerPoint.Interfaces.BindingCollectionLoadOptions:interface" /> & <xref
            uid="powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="powerpoint!PowerPoint.BindingCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'powerpoint!PowerPoint.BindingCollection#load:member(2)'
    package: powerpoint!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.BindingCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="powerpoint!PowerPoint.BindingCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'powerpoint!PowerPoint.BindingCollection#load:member(3)'
    package: powerpoint!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): PowerPoint.BindingCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="powerpoint!PowerPoint.BindingCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'powerpoint!PowerPoint.BindingCollection#toJSON:member(1)'
    package: powerpoint!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `PowerPoint.BindingCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `PowerPoint.Interfaces.BindingCollectionData`<!-- -->) that contains
      an "items" array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.BindingCollectionData;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Interfaces.BindingCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
