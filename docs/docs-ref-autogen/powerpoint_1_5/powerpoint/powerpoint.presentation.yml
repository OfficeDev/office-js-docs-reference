### YamlMime:TSType
name: PowerPoint.Presentation
uid: 'powerpoint!PowerPoint.Presentation:class'
package: powerpoint!
fullName: PowerPoint.Presentation
summary: ''
remarks: '\[ [API set: PowerPointApi 1.0](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'powerpoint!PowerPoint.Presentation#context:member'
    package: powerpoint!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.RequestContext:class" />'
  - name: slideMasters
    uid: 'powerpoint!PowerPoint.Presentation#slideMasters:member'
    package: powerpoint!
    fullName: slideMasters
    summary: Returns the collection of `SlideMaster` objects that are in the presentation.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly slideMasters: PowerPoint.SlideMasterCollection;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideMasterCollection:class" />'
  - name: slides
    uid: 'powerpoint!PowerPoint.Presentation#slides:member'
    package: powerpoint!
    fullName: slides
    summary: Returns an ordered collection of slides in the presentation.
    remarks: '\[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly slides: PowerPoint.SlideCollection;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideCollection:class" />'
  - name: tags
    uid: 'powerpoint!PowerPoint.Presentation#tags:member'
    package: powerpoint!
    fullName: tags
    summary: Returns a collection of tags attached to the presentation.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly tags: PowerPoint.TagCollection;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.TagCollection:class" />'
  - name: title
    uid: 'powerpoint!PowerPoint.Presentation#title:member'
    package: powerpoint!
    fullName: title
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly title: string;'
      return:
        type: string
methods:
  - name: getSelectedShapes()
    uid: 'powerpoint!PowerPoint.Presentation#getSelectedShapes:member(1)'
    package: powerpoint!
    fullName: getSelectedShapes()
    summary: >-
      Returns the selected shapes in the current slide of the presentation. If no shapes are selected, an empty
      collection is returned.
    remarks: >-
      \[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

      // Arranges the selected shapes in a line from left to right.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedShapes();
        const shapeCount = shapes.getCount();
        shapes.load("items");
        await context.sync();
        let maxHeight = 0;
        shapes.items.map((shape) => {
          shape.load("width,height");
        });
        await context.sync();
        shapes.items.map((shape) => {
          shape.left = currentLeft;
          shape.top = currentTop;
          currentLeft += shape.width;
          if (shape.height > maxHeight) maxHeight = shape.height;
        });
        await context.sync();
        currentLeft = 0;
        if (currentTop > slideHeight - 200) currentTop = 0;
      });


      ...

      // Gets the shapes you selected on the slide and displays their IDs on the task pane.

      await PowerPoint.run(async (context) => {
        let finalTable = "";
        const shapes = context.presentation.getSelectedShapes();
        const shapeCount = shapes.getCount();
        await context.sync();
        finalTable += "<br>getSelectedShapes.getCount returned:<b>" + shapeCount.value + "</b><br>";
        finalTable +=
          "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
        shapes.load("items");
        await context.sync();
        shapes.items.map((shape, index) => {
          finalTable += "<tr><td>" + index + "</td><td>" + shape.id + "</td></tr>";
        });
        finalTable += "</table>";
        $("#outputSpan").empty();
        $("#outputSpan").append(finalTable);
      });


      ...

      // Saves which shapes are selected so that they can be reselected later.

      await PowerPoint.run(async (context) => {
        context.presentation.load("slides");
        await context.sync();
        const slides = context.presentation.getSelectedSlides();
        const slideCount = slides.getCount();
        slides.load("items");
        await context.sync();
        savedSlideSelection = [];
        slides.items.map((slide) => {
          savedSlideSelection.push(slide.id);
        });
        const shapes = context.presentation.getSelectedShapes();
        const shapeCount = shapes.getCount();
        shapes.load("items");
        await context.sync();
        shapes.items.map((shape) => {
          savedShapeSelection.push(shape.id);
        });
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedShapes(): PowerPoint.ShapeScopedCollection;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.ShapeScopedCollection:class" />'
        description: ''
  - name: getSelectedSlides()
    uid: 'powerpoint!PowerPoint.Presentation#getSelectedSlides:member(1)'
    package: powerpoint!
    fullName: getSelectedSlides()
    summary: >-
      Returns the selected slides in the current view of the presentation. The first item in the collection is the
      active slide that is visible in the editing area. If no slides are selected, an empty collection is returned.
    remarks: >-
      \[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

      // Gets the selected slides and displays their IDs on the task pane.

      await PowerPoint.run(async (context) => {
        let finalTable = "";
        context.presentation.load("slides");
        await context.sync();
        const allSlidesList = {};
        const allSlidesCount = context.presentation.slides.getCount();
        context.presentation.slides.load("items");
        await context.sync();
        let allSlideItems = context.presentation.slides.items;
        allSlideItems.map((slide, index) => {
          allSlidesList[slide.id] = `Slide ${index + 1}`;
        });

        if ($("#id-check-usenative").is(":checked")) {
          context.presentation.load("tags");
        }
        const slides = context.presentation.getSelectedSlides();
        const slideCount = slides.getCount();
        slides.load("items");
        await context.sync();
        finalTable += "<br>getSelectedSlides.getCount returned:<b>" + slideCount.value + "</b><br>";
        finalTable +=
          "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
        slides.items.map((slide, index) => {
          finalTable += "<tr><td>" + index + " - " + allSlidesList[slide.id] + "</td><td>" + slide.id + "</td></tr>";
        });
        finalTable += "</table>";
        $("#outputSpan").empty();
        $("#outputSpan").append(finalTable);
      });


      ...

      // Saves which slides are currently selected so they can be reselected later.

      await PowerPoint.run(async (context) => {
        let finalTable = "";
        context.presentation.load("slides");
        await context.sync();
        const slides = context.presentation.getSelectedSlides();
        const slideCount = slides.getCount();
        await context.sync();
        finalTable += "<br>getSelectedSlides.getCount returned:<b>" + slideCount.value + "</b><br>";
        finalTable +=
          "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
        savedSlideSelection = [];
        slides.load("items");
        await context.sync();
        slides.items.map((slide, index) => {
          finalTable += "<tr><td>" + index + "</td><td>" + slide.id + "</td></tr>";
          savedSlideSelection.push(slide.id);
        });
        finalTable += "</table>";
        $("#outputSpan").empty();
        $("#outputSpan").append(finalTable);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedSlides(): PowerPoint.SlideScopedCollection;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideScopedCollection:class" />'
        description: ''
  - name: getSelectedTextRange()
    uid: 'powerpoint!PowerPoint.Presentation#getSelectedTextRange:member(1)'
    package: powerpoint!
    fullName: getSelectedTextRange()
    summary: >-
      Returns the selected [PowerPoint.TextRange](xref:powerpoint!PowerPoint.TextRange:class) in the current view of the
      presentation. Throws an exception if no text is selected.
    remarks: >-
      \[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/text/get-set-textrange.yaml

      // Gets the selected text range and prints data about the range on the task pane.

      await PowerPoint.run(async (context) => {
        const textRange = context.presentation.getSelectedTextRange();
        try {
          await context.sync();
        } catch (error) {
          console.warn("You must select only one range of text for this action to work.");
          return;
        }
        textRange.load("text");
        textRange.load("start");
        textRange.load("length");
        await context.sync();
        let txtHtml = textRange.text;
        txtHtml = txtHtml.replace(/\n/g, "<br>");
        txtHtml = txtHtml.replace(/\r/g, "<br>");
        txtHtml = txtHtml.replace(/\v/g, "<br>");
        let txtExplained = textRange.text;
        txtExplained = txtExplained.replace(/\n/g, "<font color=red>NL</font>");
        txtExplained = txtExplained.replace(/\r/g, "<font color=red>CR</font>");
        txtExplained = txtExplained.replace(/\v/g, "<font color=red>VV</font>");
        let finalTable = "";
        finalTable +=
          "<br><table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Index</font></td><td bgcolor=#3333EE><font color=white>Id</font></td></tr>";
        finalTable += "<tr><td>Raw</td><td>" + textRange.text + "</td></tr>";
        finalTable += "<tr><td>Html</td><td>" + txtHtml + "</td></tr>";
        finalTable += "<tr><td>Exp</td><td>" + txtExplained + "</td></tr>";
        finalTable += "<tr><td>Start</td><td>" + textRange.start + "</td></tr>";
        finalTable += "<tr><td>Length</td><td>" + textRange.length + "</td></tr>";
        finalTable += "</table>";
        $("#outputSpan").empty();
        $("#outputSpan").append(finalTable);
      });


      ...

      // Sets the range selection to the range that was saved previously.

      await PowerPoint.run(async (context) => {
        const slide1 = context.presentation.slides.getItem(savedTextSlideSelection[0]);
        const shape1 = slide1.shapes.getItem(savedTextShapeSelection[0]);
        const textRange = shape1.textFrame.textRange.getSubstring(savedTextTextRangeStart, savedTextTextRangeLength);
        textRange.setSelected();
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedTextRange(): PowerPoint.TextRange;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.TextRange:class" />'
        description: ''
  - name: getSelectedTextRangeOrNullObject()
    uid: 'powerpoint!PowerPoint.Presentation#getSelectedTextRangeOrNullObject:member(1)'
    package: powerpoint!
    fullName: getSelectedTextRangeOrNullObject()
    summary: >-
      Returns the selected [PowerPoint.TextRange](xref:powerpoint!PowerPoint.TextRange:class) in the current view of the
      presentation. If no text is selected, an object with an `isNullObject` property set to `true` is returned.
    remarks: '\[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedTextRangeOrNullObject(): PowerPoint.TextRange;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.TextRange:class" />'
        description: ''
  - name: 'insertSlidesFromBase64(base64File, options)'
    uid: 'powerpoint!PowerPoint.Presentation#insertSlidesFromBase64:member(1)'
    package: powerpoint!
    fullName: 'insertSlidesFromBase64(base64File, options)'
    summary: Inserts the specified slides from a presentation into the current presentation.
    remarks: >-
      \[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/insert-slides.yaml

      await PowerPoint.run(async function(context) {
          const selectedSlideID = await getSelectedSlideID();

          context.presentation.insertSlidesFromBase64(chosenFileBase64, {
              formatting: PowerPoint.InsertSlideFormatting.useDestinationTheme,
              targetSlideId: selectedSlideID + "#"
          });
          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insertSlidesFromBase64(base64File: string, options?: PowerPoint.InsertSlideOptions): void;'
      parameters:
        - id: base64File
          description: The base64-encoded string representing the source presentation file.
          type: string
        - id: options
          description: >-
            The options that define which slides will be inserted, where the new slides will go, and which
            presentation's formatting will be used.
          type: '<xref uid="powerpoint!PowerPoint.InsertSlideOptions:interface" />'
      return:
        type: void
        description: ''
  - name: load(options)
    uid: 'powerpoint!PowerPoint.Presentation#load:member(1)'
    package: powerpoint!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: PowerPoint.Interfaces.PresentationLoadOptions): PowerPoint.Presentation;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface" />'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Presentation:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'powerpoint!PowerPoint.Presentation#load:member(2)'
    package: powerpoint!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.Presentation;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Presentation:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'powerpoint!PowerPoint.Presentation#load:member(3)'
    package: powerpoint!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): PowerPoint.Presentation;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="powerpoint!PowerPoint.Presentation:class" />'
        description: ''
  - name: setSelectedSlides(slideIds)
    uid: 'powerpoint!PowerPoint.Presentation#setSelectedSlides:member(1)'
    package: powerpoint!
    fullName: setSelectedSlides(slideIds)
    summary: >-
      Selects the slides in the current view of the presentation. Existing slide selection is replaced with the new
      selection.
    remarks: >-
      \[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

      // Sets selection to the slides that were saved.

      await PowerPoint.run(async (context) => {
        context.presentation.setSelectedSlides(savedSlideSelection);
        await context.sync();
      });


      ...

      // Selects slides 2, 4, and 5.

      await PowerPoint.run(async (context) => {
        context.presentation.load("slides");
        await context.sync();
        const slide2 = context.presentation.slides.getItemAt(1);
        const slide4 = context.presentation.slides.getItemAt(3);
        const slide5 = context.presentation.slides.getItemAt(4);
        slide2.load("id");
        slide4.load("id");
        slide5.load("id");
        try {
          await context.sync();
        } catch (error) {
          console.warn("This action requires at least 5 slides in the presentation.");
          return;
        }
        await context.sync();
        context.presentation.setSelectedSlides([slide2.id, slide4.id, slide5.id]);
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setSelectedSlides(slideIds: string[]): void;'
      parameters:
        - id: slideIds
          description: 'List of slide IDs to select in the presentation. If the list is empty, selection is cleared.'
          type: 'string[]'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'powerpoint!PowerPoint.Presentation#toJSON:member(1)'
    package: powerpoint!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original PowerPoint.Presentation object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `PowerPoint.Interfaces.PresentationData`<!-- -->) that contains shallow copies
      of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.PresentationData;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Interfaces.PresentationData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
