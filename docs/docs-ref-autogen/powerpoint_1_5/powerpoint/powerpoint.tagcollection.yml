### YamlMime:TSType
name: PowerPoint.TagCollection
uid: 'powerpoint!PowerPoint.TagCollection:class'
package: powerpoint!
fullName: PowerPoint.TagCollection
summary: Represents the collection of tags.
remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'powerpoint!PowerPoint.TagCollection#context:member'
    package: powerpoint!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.RequestContext:class" />'
  - name: items
    uid: 'powerpoint!PowerPoint.TagCollection#items:member'
    package: powerpoint!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: PowerPoint.Tag[];'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Tag:class" />[]'
methods:
  - name: 'add(key, value)'
    uid: 'powerpoint!PowerPoint.TagCollection#add:member(1)'
    package: powerpoint!
    fullName: 'add(key, value)'
    summary: >-
      Adds a new tag at the end of the collection. If the `key` already exists in the collection, the value of the
      existing tag will be replaced with the given `value`<!-- -->.
    remarks: >-
      \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

      await PowerPoint.run(async function(context) {
        const slide = context.presentation.slides.getItemAt(0);
        slide.tags.add("OCEAN", "Indian");
        slide.tags.add("PLANET", "Jupiter");
        slide.tags.add("CONTINENT", "Antarctica");

        await context.sync();

        slide.tags.load("key, value");

        await context.sync();

        for (let i = 0; i < slide.tags.items.length; i++) {
          console.log("Added key " + JSON.stringify(slide.tags.items[i].key) + " with value " +        JSON.stringify(slide.tags.items[i].value));
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(key: string, value: string): void;'
      parameters:
        - id: key
          description: >-
            The unique ID of a tag, which is unique within this `TagCollection`<!-- -->. 'key' parameter is
            case-insensitive, but it is always capitalized when saved in the document.
          type: string
        - id: value
          description: The value of the tag.
          type: string
      return:
        type: void
        description: ''
  - name: delete(key)
    uid: 'powerpoint!PowerPoint.TagCollection#delete:member(1)'
    package: powerpoint!
    fullName: delete(key)
    summary: Deletes the tag with the given `key` in this collection. Does nothing if the `key` does not exist.
    remarks: >-
      \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

      await PowerPoint.run(async function (context) {
        let presentationTags = context.presentation.tags;

        presentationTags.delete("COLOR");

        await context.sync();

        console.log(JSON.stringify(presentationTags));
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(key: string): void;'
      parameters:
        - id: key
          description: >-
            The unique ID of a tag, which is unique within this `TagCollection`<!-- -->. `key` parameter is
            case-insensitive.
          type: string
      return:
        type: void
        description: ''
  - name: getCount()
    uid: 'powerpoint!PowerPoint.TagCollection#getCount:member(1)'
    package: powerpoint!
    fullName: getCount()
    summary: Gets the number of tags in the collection.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: The number of tags in the collection.
  - name: getItem(key)
    uid: 'powerpoint!PowerPoint.TagCollection#getItem:member(1)'
    package: powerpoint!
    fullName: getItem(key)
    summary: Gets a tag using its unique ID. An error is thrown if the tag does not exist.
    remarks: >-
      \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml

      await PowerPoint.run(async function(context) {
        let selectedSlideIndex = await getSelectedSlideIndex();

        // Decrement because the getSelectedSlideByIndex method is 1-based,
        // but the getItemAt method is 0-based.
        selectedSlideIndex = selectedSlideIndex - 1;
        const slide = context.presentation.slides.getItemAt(selectedSlideIndex);
        slide.tags.add("CUSTOMER_TYPE", "Premium");

        await context.sync();

        const audienceTag = slide.tags.getItem("CUSTOMER_TYPE");
        audienceTag.load("key, value");

        await context.sync();

        console.log("Added key " + JSON.stringify(audienceTag.key) + " with value " + JSON.stringify(audienceTag.value));
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): PowerPoint.Tag;'
      parameters:
        - id: key
          description: The ID of the tag. The `key` parameter is case-sensitive.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Tag:class" />'
        description: 'The tag with the unique ID. If such a tag does not exist, an error is thrown.'
  - name: getItemAt(index)
    uid: 'powerpoint!PowerPoint.TagCollection#getItemAt:member(1)'
    package: powerpoint!
    fullName: getItemAt(index)
    summary: Gets a tag using its zero-based index in the collection. An error is thrown if the index is out of range.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): PowerPoint.Tag;'
      parameters:
        - id: index
          description: The index of the tag in the collection.
          type: number
      return:
        type: '<xref uid="powerpoint!PowerPoint.Tag:class" />'
        description: The tag at the given index. An error is thrown if index is out of range.
  - name: getItemOrNullObject(key)
    uid: 'powerpoint!PowerPoint.TagCollection#getItemOrNullObject:member(1)'
    package: powerpoint!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a tag using its unique ID. If such a tag does not exist, an object with an `isNullObject` property set to
      true is returned.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): PowerPoint.Tag;'
      parameters:
        - id: key
          description: The ID of the tag. The `key` parameter is case-sensitive.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Tag:class" />'
        description: >-
          The tag with the unique ID. If such a tag does not exist, an object with an `isNullObject` property set to
          true is returned.
  - name: load(options)
    uid: 'powerpoint!PowerPoint.TagCollection#load:member(1)'
    package: powerpoint!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: PowerPoint.Interfaces.TagCollectionLoadOptions & PowerPoint.Interfaces.CollectionLoadOptions):
        PowerPoint.TagCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="powerpoint!PowerPoint.Interfaces.TagCollectionLoadOptions:interface" /> & <xref
            uid="powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="powerpoint!PowerPoint.TagCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'powerpoint!PowerPoint.TagCollection#load:member(2)'
    package: powerpoint!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.TagCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="powerpoint!PowerPoint.TagCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'powerpoint!PowerPoint.TagCollection#load:member(3)'
    package: powerpoint!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): PowerPoint.TagCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="powerpoint!PowerPoint.TagCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'powerpoint!PowerPoint.TagCollection#toJSON:member(1)'
    package: powerpoint!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `PowerPoint.TagCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `PowerPoint.Interfaces.TagCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.TagCollectionData;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Interfaces.TagCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
