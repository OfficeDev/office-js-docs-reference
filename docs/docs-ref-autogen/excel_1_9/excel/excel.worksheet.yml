### YamlMime:TSType
name: Excel.Worksheet
uid: 'excel!Excel.Worksheet:class'
package: excel!
fullName: Excel.Worksheet
summary: >-
  An Excel worksheet is a grid of cells. It can contain data, tables, charts,
  etc. To learn more about the worksheet object model, read [Work with
  worksheets using the Excel JavaScript
  API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!--
  -->.


  \[ [API set: ExcelApi
  1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: autoFilter
    uid: 'excel!Excel.Worksheet#autoFilter:member'
    package: excel!
    fullName: autoFilter
    summary: >-
      Represents the AutoFilter object of the worksheet.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly autoFilter: Excel.AutoFilter;'
      return:
        type: '<xref uid="excel!Excel.AutoFilter:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-auto-filter.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          });

          ```
  - name: charts
    uid: 'excel!Excel.Worksheet#charts:member'
    package: excel!
    fullName: charts
    summary: >-
      Returns a collection of charts that are part of the worksheet.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type: '<xref uid="excel!Excel.ChartCollection:class" />'
  - name: context
    uid: 'excel!Excel.Worksheet#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: enableCalculation
    uid: 'excel!Excel.Worksheet#enableCalculation:member'
    package: excel!
    fullName: enableCalculation
    summary: >-
      Determines if Excel should recalculate the worksheet when necessary. True
      if Excel recalculates the worksheet when necessary. False if Excel doesn't
      recalculate the sheet.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type: boolean
  - name: freezePanes
    uid: 'excel!Excel.Worksheet#freezePanes:member'
    package: excel!
    fullName: freezePanes
    summary: >-
      Gets an object that can be used to manipulate frozen panes on the
      worksheet.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type: '<xref uid="excel!Excel.WorksheetFreezePanes:class" />'
  - name: horizontalPageBreaks
    uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    package: excel!
    fullName: horizontalPageBreaks
    summary: >-
      Gets the horizontal page break collection for the worksheet. This
      collection only contains manual page breaks.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
      return:
        type: '<xref uid="excel!Excel.PageBreakCollection:class" />'
  - name: id
    uid: 'excel!Excel.Worksheet#id:member'
    package: excel!
    fullName: id
    summary: >-
      Returns a value that uniquely identifies the worksheet in a given
      workbook. The value of the identifier remains the same even when the
      worksheet is renamed or moved.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: name
    uid: 'excel!Excel.Worksheet#name:member'
    package: excel!
    fullName: name
    summary: >-
      The display name of the worksheet.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: names
    uid: 'excel!Excel.Worksheet#names:member'
    package: excel!
    fullName: names
    summary: >-
      Collection of names scoped to the current worksheet.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type: '<xref uid="excel!Excel.NamedItemCollection:class" />'
  - name: onActivated
    uid: 'excel!Excel.Worksheet#onActivated:member'
    package: excel!
    fullName: onActivated
    summary: >-
      Occurs when the worksheet is activated.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onActivated:
        OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetActivatedEventArgs:interface" />&gt;
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run(function (context) {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - name: onCalculated
    uid: 'excel!Excel.Worksheet#onCalculated:member'
    package: excel!
    fullName: onCalculated
    summary: >-
      Occurs when the worksheet is calculated.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onCalculated:
        OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetCalculatedEventArgs:interface" />&gt;
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run(function (context) {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - name: onChanged
    uid: 'excel!Excel.Worksheet#onChanged:member'
    package: excel!
    fullName: onChanged
    summary: >-
      Occurs when data changed on a specific worksheet.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onChanged:
        OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetChangedEventArgs:interface" />&gt;
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-worksheet.yaml

          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);
              await context.sync();

              console.log("Added a worksheet-level data-changed event handler.");
          });

          ```
  - name: onDeactivated
    uid: 'excel!Excel.Worksheet#onDeactivated:member'
    package: excel!
    fullName: onDeactivated
    summary: >-
      Occurs when the worksheet is deactivated.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onDeactivated:
        OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetDeactivatedEventArgs:interface" />&gt;
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run(function (context) {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - name: onFormatChanged
    uid: 'excel!Excel.Worksheet#onFormatChanged:member'
    package: excel!
    fullName: onFormatChanged
    summary: >-
      Occurs when format changed on a specific worksheet.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onFormatChanged:
        OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetFormatChangedEventArgs:interface" />&gt;
  - name: onSelectionChanged
    uid: 'excel!Excel.Worksheet#onSelectionChanged:member'
    package: excel!
    fullName: onSelectionChanged
    summary: >-
      Occurs when the selection changes on a specific worksheet.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onSelectionChanged:
        OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetSelectionChangedEventArgs:interface" />&gt;
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run(function (context) {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - name: pageLayout
    uid: 'excel!Excel.Worksheet#pageLayout:member'
    package: excel!
    fullName: pageLayout
    summary: >-
      Gets the PageLayout object of the worksheet.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pageLayout: Excel.PageLayout;'
      return:
        type: '<xref uid="excel!Excel.PageLayout:class" />'
  - name: pivotTables
    uid: 'excel!Excel.Worksheet#pivotTables:member'
    package: excel!
    fullName: pivotTables
    summary: >-
      Collection of PivotTables that are part of the worksheet.


      \[ [API set: ExcelApi
      1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type: '<xref uid="excel!Excel.PivotTableCollection:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-get-pivottables.yaml

          await Excel.run(async (context) => {
            // Get the names of all the PivotTables in the current worksheet.
            const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;
            pivotTables.load("name");
            await context.sync();

            // Display the names in the console.
            console.log("PivotTables in the current worksheet:")
            pivotTables.items.forEach((pivotTable) => {
              console.log(`\t${pivotTable.name}`);
            });
          });

          ```
  - name: position
    uid: 'excel!Excel.Worksheet#position:member'
    package: excel!
    fullName: position
    summary: >-
      The zero-based position of the worksheet within the workbook.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'position: number;'
      return:
        type: number
        description: |-


          #### Examples

          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: protection
    uid: 'excel!Excel.Worksheet#protection:member'
    package: excel!
    fullName: protection
    summary: >-
      Returns sheet protection object for a worksheet.


      \[ [API set: ExcelApi
      1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type: '<xref uid="excel!Excel.WorksheetProtection:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function(ctx) {
            // get a reference to Sheet1
            var sheet = ctx.workbook.worksheets.getItem("Sheet1");

            // Protect inserting or deleting rows in Sheet1
            sheet.protection.protect({
              allowInsertRows: false,
              allowDeleteRows: false
            });

            return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Unprotecting a worksheet with unprotect() will remove all 
          // WorksheetProtectionOptions options applied to a worksheet.
          // To remove only a subset of WorksheetProtectionOptions use the 
          // protect() method and set the options you wish to remove to true.
          Excel.run(function(ctx) {
            var sheet = ctx.workbook.worksheets.getItem("Sheet1");
            sheet.protection.protect({
              allowInsertRows: false, // Protect row insertion
              allowDeleteRows: true // Unprotect row deletion
            });
          });
          ```
  - name: shapes
    uid: 'excel!Excel.Worksheet#shapes:member'
    package: excel!
    fullName: shapes
    summary: >-
      Returns the collection of all the Shape objects on the worksheet.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly shapes: Excel.ShapeCollection;'
      return:
        type: '<xref uid="excel!Excel.ShapeCollection:class" />'
  - name: showGridlines
    uid: 'excel!Excel.Worksheet#showGridlines:member'
    package: excel!
    fullName: showGridlines
    summary: >-
      Specifies if gridlines are visible to the user.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type: boolean
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/gridlines.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });

          ```
  - name: showHeadings
    uid: 'excel!Excel.Worksheet#showHeadings:member'
    package: excel!
    fullName: showHeadings
    summary: >-
      Specifies if headings are visible to the user.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type: boolean
  - name: standardHeight
    uid: 'excel!Excel.Worksheet#standardHeight:member'
    package: excel!
    fullName: standardHeight
    summary: >-
      Returns the standard (default) height of all the rows in the worksheet, in
      points.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type: number
  - name: standardWidth
    uid: 'excel!Excel.Worksheet#standardWidth:member'
    package: excel!
    fullName: standardWidth
    summary: >-
      Specifies the standard (default) width of all the columns in the
      worksheet. One unit of column width is equal to the width of one character
      in the Normal style. For proportional fonts, the width of the character 0
      (zero) is used.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'standardWidth: number;'
      return:
        type: number
  - name: tabColor
    uid: 'excel!Excel.Worksheet#tabColor:member'
    package: excel!
    fullName: tabColor
    summary: >-
      The tab color of the worksheet. When retrieving the tab color, if the
      worksheet is invisible, the value will be null. If the worksheet is
      visible but the tab color is set to auto, an empty string will be
      returned. Otherwise, the property will be set to a color, in the form
      "\#123456" When setting the color, use an empty-string to set an "auto"
      color, or a real color otherwise.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tabColor: string;'
      return:
        type: string
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/tab-color.yaml

          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });

          ```
  - name: tables
    uid: 'excel!Excel.Worksheet#tables:member'
    package: excel!
    fullName: tables
    summary: >-
      Collection of tables that are part of the worksheet.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type: '<xref uid="excel!Excel.TableCollection:class" />'
  - name: verticalPageBreaks
    uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    package: excel!
    fullName: verticalPageBreaks
    summary: >-
      Gets the vertical page break collection for the worksheet. This collection
      only contains manual page breaks.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
      return:
        type: '<xref uid="excel!Excel.PageBreakCollection:class" />'
  - name: visibility
    uid: 'excel!Excel.Worksheet#visibility:member'
    package: excel!
    fullName: visibility
    summary: >-
      The Visibility of the worksheet.


      \[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting
      it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type: >-
          <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden"
          | "VeryHidden"
methods:
  - name: activate()
    uid: 'excel!Excel.Worksheet#activate:member(1)'
    package: excel!
    fullName: activate()
    summary: >-
      Activate the worksheet in the Excel UI.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'activate(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: calculate(markAllDirty)
    uid: 'excel!Excel.Worksheet#calculate:member(1)'
    package: excel!
    fullName: calculate(markAllDirty)
    summary: >-
      Calculates all cells on a worksheet.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      parameters:
        - id: markAllDirty
          description: 'True, to mark all as dirty.'
          type: boolean
      return:
        type: void
        description: ''
  - name: 'copy(positionType, relativeTo)'
    uid: 'excel!Excel.Worksheet#copy:member(1)'
    package: excel!
    fullName: 'copy(positionType, relativeTo)'
    summary: >-
      Copies a worksheet and places it at the specified position.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        copy(positionType?: Excel.WorksheetPositionType, relativeTo?:
        Excel.Worksheet): Excel.Worksheet;
      parameters:
        - id: positionType
          description: >-
            The location in the workbook to place the newly created worksheet.
            The default value is "None", which inserts the worksheet at the
            beginning of the worksheet.
          type: '<xref uid="excel!Excel.WorksheetPositionType:enum" />'
        - id: relativeTo
          description: >-
            The existing worksheet which determines the newly created
            worksheet's position. This is only needed if `positionType` is
            "Before" or "After".
          type: '<xref uid="excel!Excel.Worksheet:class" />'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: >-
          The newly created worksheet.


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-copy.yaml

          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });

          ```
  - name: 'copy(positionTypeString, relativeTo)'
    uid: 'excel!Excel.Worksheet#copy:member(2)'
    package: excel!
    fullName: 'copy(positionTypeString, relativeTo)'
    summary: >-
      Copies a worksheet and places it at the specified position.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" |
        "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;
      parameters:
        - id: positionTypeString
          description: >-
            The location in the workbook to place the newly created worksheet.
            The default value is "None", which inserts the worksheet at the
            beginning of the worksheet.
          type: '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: >-
            The existing worksheet which determines the newly created
            worksheet's position. This is only needed if `positionType` is
            "Before" or "After".
          type: '<xref uid="excel!Excel.Worksheet:class" />'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: The newly created worksheet.
  - name: delete()
    uid: 'excel!Excel.Worksheet#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: >-
      Deletes the worksheet from the workbook. Note that if the worksheet's
      visibility is set to "VeryHidden", the delete operation will fail with an
      `InvalidOperation` exception. You should first change its visibility to
      hidden or visible before deleting it.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'findAll(text, criteria)'
    uid: 'excel!Excel.Worksheet#findAll:member(1)'
    package: excel!
    fullName: 'findAll(text, criteria)'
    summary: >-
      Finds all occurrences of the given string based on the criteria specified
      and returns them as a RangeAreas object, comprising one or more
      rectangular ranges.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        findAll(text: string, criteria: Excel.WorksheetSearchCriteria):
        Excel.RangeAreas;
      parameters:
        - id: text
          description: The string to find.
          type: string
        - id: criteria
          description: >-
            Additional search criteria, including whether the search needs to
            match the entire cell or be case sensitive.
          type: '<xref uid="excel!Excel.WorksheetSearchCriteria:interface" />'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: >-
          A RangeArea object, comprising one or more rectangular ranges, that
          matches the search criteria. If no cells meet this criteria, an
          ItemNotFound error will be thrown.
  - name: 'findAllOrNullObject(text, criteria)'
    uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    package: excel!
    fullName: 'findAllOrNullObject(text, criteria)'
    summary: >-
      Finds all occurrences of the given string based on the criteria specified
      and returns them as a RangeAreas object, comprising one or more
      rectangular ranges.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        findAllOrNullObject(text: string, criteria:
        Excel.WorksheetSearchCriteria): Excel.RangeAreas;
      parameters:
        - id: text
          description: The string to find.
          type: string
        - id: criteria
          description: >-
            Additional search criteria, including whether the search needs to
            match the entire cell or be case sensitive.
          type: '<xref uid="excel!Excel.WorksheetSearchCriteria:interface" />'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: >-
          A RangeArea object, comprising one or more rectangular ranges, that
          matches the search criteria. If there are no matches, this function
          will return a null object.


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-find-all.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          });

          ```
  - name: 'getCell(row, column)'
    uid: 'excel!Excel.Worksheet#getCell:member(1)'
    package: excel!
    fullName: 'getCell(row, column)'
    summary: >-
      Gets the range object containing the single cell based on row and column
      numbers. The cell can be outside the bounds of its parent range, so long
      as it stays within the worksheet grid.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      parameters:
        - id: row
          description: The row number of the cell to be retrieved. Zero-indexed.
          type: number
        - id: column
          description: the column number of the cell to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getNext(visibleOnly)
    uid: 'excel!Excel.Worksheet#getNext:member(1)'
    package: excel!
    fullName: getNext(visibleOnly)
    summary: >-
      Gets the worksheet that follows this one. If there are no worksheets
      following this one, this method will throw an error.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });

          ```
  - name: getNextOrNullObject(visibleOnly)
    uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    package: excel!
    fullName: getNextOrNullObject(visibleOnly)
    summary: >-
      Gets the worksheet that follows this one. If there are no worksheets
      following this one, this method will return a null object.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getPrevious(visibleOnly)
    uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    package: excel!
    fullName: getPrevious(visibleOnly)
    summary: >-
      Gets the worksheet that precedes this one. If there are no previous
      worksheets, this method will throw an error.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });

          ```
  - name: getPreviousOrNullObject(visibleOnly)
    uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    package: excel!
    fullName: getPreviousOrNullObject(visibleOnly)
    summary: >-
      Gets the worksheet that precedes this one. If there are no previous
      worksheets, this method will return a null objet.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getRange(address)
    uid: 'excel!Excel.Worksheet#getRange:member(1)'
    package: excel!
    fullName: getRange(address)
    summary: >-
      Gets the range object, representing a single rectangular block of cells,
      specified by the address or name.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      parameters:
        - id: address
          description: >-
            Optional. The string representing the address or name of the range.
            For example, "A1:B2". If not specified, the entire worksheet range
            is returned.
          type: string
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    package: excel!
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    summary: >-
      Gets the range object beginning at a particular row index and column
      index, and spanning a certain number of rows and columns.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getRangeByIndexes(startRow: number, startColumn: number, rowCount:
        number, columnCount: number): Excel.Range;
      parameters:
        - id: startRow
          description: Start row (zero-indexed).
          type: number
        - id: startColumn
          description: Start column (zero-indexed).
          type: number
        - id: rowCount
          description: Number of rows to include in the range.
          type: number
        - id: columnCount
          description: Number of columns to include in the range.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: getRanges(address)
    uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    package: excel!
    fullName: getRanges(address)
    summary: >-
      Gets the RangeAreas object, representing one or more blocks of rectangular
      ranges, specified by the address or name.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRanges(address?: string): Excel.RangeAreas;'
      parameters:
        - id: address
          description: >-
            Optional. A string containing the comma-separated addresses or names
            of the individual ranges. For example, "A1:B2, A5:B5". If not
            specified, an RangeArea object for the entire worksheet is returned.
          type: string
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml

          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })

          ```
  - name: getUsedRange(valuesOnly)
    uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    package: excel!
    fullName: getUsedRange(valuesOnly)
    summary: >-
      The used range is the smallest range that encompasses any cells that have
      a value or formatting assigned to them. If the entire worksheet is blank,
      this function will return the top left cell (i.e. it will *not* throw an
      error).


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      parameters:
        - id: valuesOnly
          description: >-
            Optional. If true, considers only cells with values as used cells
            (ignoring formatting). \[Api set: ExcelApi 1.2\]
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getUsedRangeOrNullObject(valuesOnly)
    uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    package: excel!
    fullName: getUsedRangeOrNullObject(valuesOnly)
    summary: >-
      The used range is the smallest range that encompasses any cells that have
      a value or formatting assigned to them. If the entire worksheet is blank,
      this function will return a null object.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      parameters:
        - id: valuesOnly
          description: Optional. Considers only cells with values as used cells.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.Worksheet#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="excel!Excel.Interfaces.WorksheetLoadOptions:interface" />'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.Worksheet#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: |-


          #### Examples

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.Worksheet#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Worksheet;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: 'replaceAll(text, replacement, criteria)'
    uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    package: excel!
    fullName: 'replaceAll(text, replacement, criteria)'
    summary: >-
      Finds and replaces the given string based on the criteria specified within
      the current worksheet.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        replaceAll(text: string, replacement: string, criteria:
        Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;
      parameters:
        - id: text
          description: String to find.
          type: string
        - id: replacement
          description: String to replace the original with.
          type: string
        - id: criteria
          description: Additional Replace Criteria.
          type: '<xref uid="excel!Excel.ReplaceCriteria:interface" />'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: The number of replacements performed.
  - name: 'set(properties, options)'
    uid: 'excel!Excel.Worksheet#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.Worksheet): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.WorksheetUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: '<xref uid="excel!Excel.Interfaces.WorksheetUpdateData:interface" />'
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.Worksheet#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.Worksheet:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.Worksheet#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Excel.Worksheet object
      is an API object, the `toJSON` method returns a plain JavaScript object
      (typed as `Excel.Interfaces.WorksheetData`<!-- -->) that contains shallow
      copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.WorksheetData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
