### YamlMime:TSType
name: Office.NotificationMessageAction
uid: 'outlook!Office.NotificationMessageAction:interface'
package: outlook!
fullName: Office.NotificationMessageAction
summary: The definition of the action for a notification message.
remarks: >-
  \[ [API set: Mailbox 1.10](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


  **[Minimum permission
  level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
  **read item**


  **[Applicable Outlook
  mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
  Compose or Read


  **Important**: In modern Outlook on the web and [new Outlook on
  Windows](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627)<!-- -->, the
  `NotificationMessageAction` object is available in Compose mode only.


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml


  // Adds an informational message with actions to the mail item.

  const id = $("#notificationId").val().toString();


  const itemId = Office.context.mailbox.item.itemId;

  const details = {
    type: Office.MailboxEnums.ItemNotificationMessageType.InsightMessage,
    message: "This is an insight notification with id = " + id,
    icon: "icon1",
    actions: [
      {
        actionText: "Open insight",
        actionType: Office.MailboxEnums.ActionType.ShowTaskPane,
        // Identify whether the current mail item is in read or compose mode to set the appropriate commandId value.
        commandId: (itemId == undefined ? "PG.HelpCommand.Compose" : "PG.HelpCommand.Read"),
        contextData: { a: "aValue", b: "bValue" }
      }
    ]
  };


  Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

  ```
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: actionText
    uid: 'outlook!Office.NotificationMessageAction#actionText:member'
    package: outlook!
    fullName: actionText
    summary: The text of the action link.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'actionText: string;'
      return:
        type: string
  - name: actionType
    uid: 'outlook!Office.NotificationMessageAction#actionType:member'
    package: outlook!
    fullName: actionType
    summary: The type of action to be performed. `ActionType.ShowTaskPane` is the only supported action.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'actionType: string | MailboxEnums.ActionType;'
      return:
        type: 'string | <xref uid="outlook!Office.MailboxEnums.ActionType:enum" />'
  - name: commandId
    uid: 'outlook!Office.NotificationMessageAction#commandId:member'
    package: outlook!
    fullName: commandId
    summary: The button defined in the manifest.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'commandId: string;'
      return:
        type: string
  - name: contextData
    uid: 'outlook!Office.NotificationMessageAction#contextData:member'
    package: outlook!
    fullName: contextData
    summary: Any JSON data the action button needs to pass on to the add-in.
    remarks: >-
      **Important**:


      - In Outlook on Windows, the `any` type is supported starting in Version 2402 (Build 17308.20000). In earlier
      versions of Outlook on Windows, only the `string` type is supported.


      - To retrieve the JSON data, call `Office.context.mailboxitem.getInitializationContextAsync`<!-- -->. If you
      create a JSON string using `JSON.stringify()` and assign it to the `contextData` property, you must parse the
      string using `JSON.parse()` once you retrieve it.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'contextData: any;'
      return:
        type: any
