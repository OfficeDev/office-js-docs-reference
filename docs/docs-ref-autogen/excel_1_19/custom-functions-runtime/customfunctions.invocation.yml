### YamlMime:TSType
name: CustomFunctions.Invocation
uid: custom-functions-runtime!CustomFunctions.Invocation:interface
package: custom-functions-runtime!
fullName: CustomFunctions.Invocation
summary: Provides information about the invocation of a custom function.
remarks: |-


  #### Examples

  ```TypeScript
  /**
  * Return the address of the cell that invoked the custom function. 
  * @customfunction
  * @param {number} first First parameter.
  * @param {number} second Second parameter.
  * @param {CustomFunctions.Invocation} invocation Invocation object. 
  * @requiresAddress 
  */
  function getAddress(first, second, invocation) {
    const address = invocation.address;
    return address;
  }
  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: address
    uid: custom-functions-runtime!CustomFunctions.Invocation#address:member
    package: custom-functions-runtime!
    fullName: address
    summary: >-
      The cell address where the function is being called, if requested,
      otherwise undefined.


      To request the address for the function, in the metadata JSON file, the
      function options should specify: `{ "requiresAddress": true }`


      If the metadata JSON file is being generated from JSDoc comments, include
      the tag `@requiresAddress`<!-- -->.
    remarks: >-
      \[ [API set: CustomFunctionsRuntime
      1.1](/javascript/api/requirement-sets/excel/custom-functions-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      /**

      * Return the address of the cell that invoked the custom function. 

      * @customfunction

      * @param {number} first First parameter.

      * @param {number} second Second parameter.

      * @param {CustomFunctions.Invocation} invocation Invocation object. 

      * @requiresAddress 

      */

      function getAddress(first, second, invocation) {
        const address = invocation.address;
        return address;
      }

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'address?: string;'
      return:
        type: string
  - name: functionName
    uid: custom-functions-runtime!CustomFunctions.Invocation#functionName:member
    package: custom-functions-runtime!
    fullName: functionName
    summary: The name of this function.
    remarks: >-
      \[ [API set: CustomFunctionsRuntime
      1.1](/javascript/api/requirement-sets/excel/custom-functions-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'functionName?: string;'
      return:
        type: string
  - name: isInValuePreview
    uid: >-
      custom-functions-runtime!CustomFunctions.Invocation#isInValuePreview:member
    package: custom-functions-runtime!
    fullName: isInValuePreview
    summary: >-
      Indicates whether the function is invoked as part of the formula value
      preview. `isInValuePreview` is read-only and can't be set by a custom
      functions add-in. This value is `true` if the function is invoked to
      preview the formula value; otherwise it is `false`<!-- -->.
    remarks: >-
      \[ [API set: CustomFunctionsRuntime BETA (PREVIEW
      ONLY)](/javascript/api/requirement-sets/excel/custom-functions-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      /**

      * Get the listing price for a house on the market for the given address.

      * @customfunction

      * @param address The address of the house.

      * @param invocation Custom function handler.

      * @returns The price of the house at the address.

      */

      function getHousePrice(address: string, invocation:
      CustomFunctions.Invocation): number {
        // Check if this call is for formula value preview mode.
        if (invocation.isInValuePreview) { 
          // Avoid long-running expensive service calls. 
          // Return a usable but fake number.
          return 450000; 
        } else { 
          // Make the actual service calls in this block. 
          const price = callHouseServiceAPI(address);
          return price; 
        } 
      }

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isInValuePreview?: string;'
      return:
        type: string
  - name: parameterAddresses
    uid: >-
      custom-functions-runtime!CustomFunctions.Invocation#parameterAddresses:member
    package: custom-functions-runtime!
    fullName: parameterAddresses
    summary: >-
      The range addresses where the function parameters are located, if
      requested, otherwise undefined.


      To request the parameter addresses for the function, in the metadata JSON
      file, the function options should specify: `{
      "requiresParameterAddresses": true }`


      If the metadata JSON file is being generated from JSDoc comments, include
      the tag `@requiresParameterAddresses`<!-- -->.
    remarks: >-
      \[ [API set: CustomFunctionsRuntime
      1.3](/javascript/api/requirement-sets/excel/custom-functions-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      /**

      * Return the addresses of three parameters. 

      * @customfunction

      * @param {string} firstParameter First parameter.

      * @param {string} secondParameter Second parameter.

      * @param {string} thirdParameter Third parameter.

      * @param {CustomFunctions.Invocation} invocation Invocation object. 

      * @returns {string[][]} The addresses of the parameters, as a
      2-dimensional array. 

      * @requiresParameterAddresses

      */

      function getParameterAddresses(firstParameter, secondParameter,
      thirdParameter, invocation) {
        const addresses = [
          [invocation.parameterAddresses[0]],
          [invocation.parameterAddresses[1]],
          [invocation.parameterAddresses[2]]
        ];
        return addresses;
      }

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parameterAddresses?: string[];'
      return:
        type: string[]
