### YamlMime:TSType
name: Excel.BindingCollection
uid: 'excel!Excel.BindingCollection:class'
package: excel!
fullName: Excel.BindingCollection
summary: >-
  Represents the collection of all the binding objects that are part of the
  workbook.


  \[ [API set: ExcelApi
  1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.BindingCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: count
    uid: 'excel!Excel.BindingCollection#count:member'
    package: excel!
    fullName: count
    summary: >-
      Returns the number of bindings in the collection.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly count: number;'
      return:
        type: number
  - name: items
    uid: 'excel!Excel.BindingCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Binding[];'
      return:
        type: '<xref uid="excel!Excel.Binding:class" />[]'
methods:
  - name: 'add(range, bindingType, id)'
    uid: 'excel!Excel.BindingCollection#add:member(1)'
    package: excel!
    fullName: 'add(range, bindingType, id)'
    summary: >-
      Add a new binding to a particular Range.


      \[ [API set: ExcelApi
      1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        add(range: Range | string, bindingType: Excel.BindingType, id: string):
        Excel.Binding;
      parameters:
        - id: range
          description: >-
            Range to bind the binding to. May be an Excel Range object, or a
            string. If string, must contain the full address, including the
            sheet name
          type: '<xref uid="excel!Excel.Range:class" /> | string'
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type: '<xref uid="excel!Excel.BindingType:enum" />'
        - id: id
          description: Name of binding.
          type: string
      return:
        type: '<xref uid="excel!Excel.Binding:class" />'
        description: ''
  - name: 'add(range, bindingTypeString, id)'
    uid: 'excel!Excel.BindingCollection#add:member(2)'
    package: excel!
    fullName: 'add(range, bindingTypeString, id)'
    summary: >-
      Add a new binding to a particular Range.


      \[ [API set: ExcelApi
      1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        add(range: Range | string, bindingTypeString: "Range" | "Table" |
        "Text", id: string): Excel.Binding;
      parameters:
        - id: range
          description: >-
            Range to bind the binding to. May be an Excel Range object, or a
            string. If string, must contain the full address, including the
            sheet name
          type: '<xref uid="excel!Excel.Range:class" /> | string'
        - id: bindingTypeString
          description: Type of binding. See Excel.BindingType.
          type: '"Range" | "Table" | "Text"'
        - id: id
          description: Name of binding.
          type: string
      return:
        type: '<xref uid="excel!Excel.Binding:class" />'
        description: ''
  - name: 'addFromNamedItem(name, bindingType, id)'
    uid: 'excel!Excel.BindingCollection#addFromNamedItem:member(1)'
    package: excel!
    fullName: 'addFromNamedItem(name, bindingType, id)'
    summary: >-
      Add a new binding based on a named item in the workbook. If the named item
      references to multiple areas, the "InvalidReference" error will be
      returned.


      \[ [API set: ExcelApi
      1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addFromNamedItem(name: string, bindingType: Excel.BindingType, id:
        string): Excel.Binding;
      parameters:
        - id: name
          description: Name from which to create binding.
          type: string
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type: '<xref uid="excel!Excel.BindingType:enum" />'
        - id: id
          description: Name of binding.
          type: string
      return:
        type: '<xref uid="excel!Excel.Binding:class" />'
        description: ''
  - name: 'addFromNamedItem(name, bindingTypeString, id)'
    uid: 'excel!Excel.BindingCollection#addFromNamedItem:member(2)'
    package: excel!
    fullName: 'addFromNamedItem(name, bindingTypeString, id)'
    summary: >-
      Add a new binding based on a named item in the workbook. If the named item
      references to multiple areas, the "InvalidReference" error will be
      returned.


      \[ [API set: ExcelApi
      1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addFromNamedItem(name: string, bindingTypeString: "Range" | "Table" |
        "Text", id: string): Excel.Binding;
      parameters:
        - id: name
          description: Name from which to create binding.
          type: string
        - id: bindingTypeString
          description: Type of binding. See Excel.BindingType.
          type: '"Range" | "Table" | "Text"'
        - id: id
          description: Name of binding.
          type: string
      return:
        type: '<xref uid="excel!Excel.Binding:class" />'
        description: ''
  - name: 'addFromSelection(bindingType, id)'
    uid: 'excel!Excel.BindingCollection#addFromSelection:member(1)'
    package: excel!
    fullName: 'addFromSelection(bindingType, id)'
    summary: >-
      Add a new binding based on the current selection. If the selection has
      multiple areas, the "InvalidReference" error will be returned.


      \[ [API set: ExcelApi
      1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addFromSelection(bindingType: Excel.BindingType, id: string):
        Excel.Binding;
      parameters:
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type: '<xref uid="excel!Excel.BindingType:enum" />'
        - id: id
          description: Name of binding.
          type: string
      return:
        type: '<xref uid="excel!Excel.Binding:class" />'
        description: ''
  - name: 'addFromSelection(bindingTypeString, id)'
    uid: 'excel!Excel.BindingCollection#addFromSelection:member(2)'
    package: excel!
    fullName: 'addFromSelection(bindingTypeString, id)'
    summary: >-
      Add a new binding based on the current selection. If the selection has
      multiple areas, the "InvalidReference" error will be returned.


      \[ [API set: ExcelApi
      1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addFromSelection(bindingTypeString: "Range" | "Table" | "Text", id:
        string): Excel.Binding;
      parameters:
        - id: bindingTypeString
          description: Type of binding. See Excel.BindingType.
          type: '"Range" | "Table" | "Text"'
        - id: id
          description: Name of binding.
          type: string
      return:
        type: '<xref uid="excel!Excel.Binding:class" />'
        description: ''
  - name: getItem(id)
    uid: 'excel!Excel.BindingCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(id)
    summary: >-
      Gets a binding object by ID.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(id: string): Excel.Binding;'
      parameters:
        - id: id
          description: Id of the binding object to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.Binding:class" />'
        description: >-


          #### Examples


          ```javascript

          // Create a table binding to monitor data changes in the table. 

          // When data is changed, the background color of the table will be
          changed to orange.

          function addEventHandler() {
              // Create Table1
              Excel.run(function (ctx) { 
                  ctx.workbook.tables.add("Sheet1!A1:C4", true);
                  return ctx.sync().then(function() {
                          console.log("My Diet Data Inserted!");
                  })
                  .catch(function (error) {
                          console.log(JSON.stringify(error));
                  });
              });
              //Create a new table binding for Table1
              Office.context.document.bindings.addFromNamedItemAsync(
                  "Table1", Office.CoercionType.Table, { id: "myBinding" }, function (asyncResult) {
                  if (asyncResult.status == "failed") {
                      console.log("Action failed with error: " + asyncResult.error.message);
                  }
                  else {
                      // If succeeded, then add event handler to the table binding.
                      Office.select("bindings#myBinding").addHandlerAsync(
                          Office.EventType.BindingDataChanged, onBindingDataChanged);
                  }
              });
          }
              
          // when data in the table is changed, this event will be triggered.

          function onBindingDataChanged(eventArgs) {
              Excel.run(function (ctx) { 
                  // highlight the table in orange to indicate data has been changed.
                  ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
                  return ctx.sync().then(function() {
                          console.log("The value in this table got changed!");
                  })
                  .catch(function (error) {
                          console.log(JSON.stringify(error));
                  });
              });
          }

          ```
  - name: getItemAt(index)
    uid: 'excel!Excel.BindingCollection#getItemAt:member(1)'
    package: excel!
    fullName: getItemAt(index)
    summary: >-
      Gets a binding object based on its position in the items array.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Excel.Binding;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Binding:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var lastPosition = ctx.workbook.bindings.count - 1;
              var binding = ctx.workbook.bindings.getItemAt(lastPosition);
              binding.load('type')
              return ctx.sync().then(function() {
                      console.log(binding.type); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(options)
    uid: 'excel!Excel.BindingCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.BindingCollectionLoadOptions &
        Excel.Interfaces.CollectionLoadOptions): Excel.BindingCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.BindingCollectionLoadOptions:interface"
            /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.BindingCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.BindingCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.BindingCollection:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var bindings = ctx.workbook.bindings;
              bindings.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < bindings.items.length; i++)
                  {
                      console.log(bindings.items[i].id);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Get the number of bindings
          Excel.run(function (ctx) { 
              var bindings = ctx.workbook.bindings;
              bindings.load('count');
              return ctx.sync().then(function() {
                  console.log("Bindings: Count= " + bindings.count);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.BindingCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption):
        Excel.BindingCollection;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.BindingCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.BindingCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      `Excel.BindingCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as
      `Excel.Interfaces.BindingCollectionData`<!-- -->) that contains an "items"
      array with shallow copies of any loaded properties from the collection's
      items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.BindingCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
