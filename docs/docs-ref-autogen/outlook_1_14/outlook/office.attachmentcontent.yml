### YamlMime:TSType
name: Office.AttachmentContent
uid: outlook!Office.AttachmentContent:interface
package: outlook!
fullName: Office.AttachmentContent
summary: Represents the content of an attachment on a message or appointment item.
remarks: >-
  \[ [API set: Mailbox
  1.8](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


  **[Minimum permission
  level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
  -->**: **read item**


  **[Applicable Outlook
  mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
  -->**: Compose or Read


  #### Examples


  ```TypeScript

  Office.context.mailbox.item.getAttachmentsAsync((result) => {
      if (result.value.length > 0) {
          for (let i = 0 ; i < result.value.length ; i++) {
              Office.context.mailbox.item.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
          }
      }
  });


  function handleAttachmentsCallback(result) {
      // Identify if an attachment is a Base64-encoded string, .eml file, .icalendar file, or a URL.
      switch (result.value.format) {
          case Office.MailboxEnums.AttachmentContentFormat.Base64:
              // Handle file attachment.
              console.log("Attachment is a Base64-encoded string.");
              break;
          case Office.MailboxEnums.AttachmentContentFormat.Eml:
              // Handle email item attachment.
              console.log("Attachment is a message.");
              break;
          case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
              // Handle .icalender attachment.
              console.log("Attachment is a calendar item.");
              break;
          case Office.MailboxEnums.AttachmentContentFormat.Url:
              // Handle cloud attachment.
              console.log("Attachment is a cloud attachment.");
              break;
          default:
              // Handle attachment formats that aren't supported.
      }

      // Log the content of the attachments as a string.
      console.log(result.value.content);
  }

  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: content
    uid: outlook!Office.AttachmentContent#content:member
    package: outlook!
    fullName: content
    summary: The content of an attachment as a string.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'content: string;'
      return:
        type: string
  - name: format
    uid: outlook!Office.AttachmentContent#format:member
    package: outlook!
    fullName: format
    summary: >-
      The string format to use for an attachment's content.


      For file attachments, the formatting is a Base64-encoded string.


      For item attachments that represent messages and were attached by
      drag-and-drop or "Attach Item", the formatting is a string representing an
      .eml formatted file.


      For item attachments that represent calendar items and were attached by
      drag-and-drop or "Attach Item", the formatting is a string representing an
      .icalendar file.


      **Important**: If a message or calendar item was attached by
      drag-and-drop in Outlook on the web or [new Outlook on
      Windows](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627)<!--
      -->, then `getAttachmentContentAsync` throws an error.


      For cloud attachments, the formatting is a URL string.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'format: MailboxEnums.AttachmentContentFormat | string;'
      return:
        type: >-
          <xref uid="outlook!Office.MailboxEnums.AttachmentContentFormat:enum"
          /> | string
