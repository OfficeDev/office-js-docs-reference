### YamlMime:TSType
name: Office.SmartAlertsEventCompletedOptions
uid: 'outlook!Office.SmartAlertsEventCompletedOptions:interface'
package: outlook!
fullName: Office.SmartAlertsEventCompletedOptions
summary: >-
  Specifies the behavior of a [Smart Alerts
  add-in](https://learn.microsoft.com/office/dev/add-ins/outlook/onmessagesend-onappointmentsend-events) when it
  completes processing an `OnMessageSend` or `OnAppointmentSend` event.
remarks: >-
  \[ [API set: Mailbox 1.12](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


  **[Minimum permission level
  (Outlook)](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
  -->**: **restricted**


  **[Applicable Outlook
  mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
  Compose


  #### Examples


  ```TypeScript

  // The following example checks whether a location is specified in an appointment before it's sent.

  function onAppointmentSendHandler(event) {
      Office.context.mailbox.item.location.getAsync({ asyncContext: event }, asyncResult => {
          const event = asyncResult.asyncContext;
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.log(asyncResult.error.message);
              // If the add-in is unable to retrieve the appointment's location, the appointment isn't sent.
              event.completed({ allowEvent: false, errorMessage: "Failed to get the appointment's location." });
              return;
          }

          if (asyncResult.value === "") {
              // If no location is specified, the appointment isn't sent and the user is alerted to include a location.
              event.completed(
                  {
                      allowEvent: false,
                      cancelLabel: "Add a location",
                      commandId: "msgComposeOpenPaneButton",
                      contextData: JSON.stringify({ a: "aValue", b: "bValue" }),
                      errorMessage: "Don't forget to add a meeting location.",
                      errorMessageMarkdown: `
                          Don't forget to add a meeting location.\n\n
                          **Tip**: For a list of locations,
                          see [Meeting Locations]("https://www.contoso.com/meeting-locations).`,
                      sendModeOverride: Office.MailboxEnums.SendModeOverride.PromptUser
                  }
              );
          } else {
              // If a location is specified, the appointment is sent.
              event.completed({ allowEvent: true });
          }
      });
  }

  ```
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: allowEvent
    uid: 'outlook!Office.SmartAlertsEventCompletedOptions#allowEvent:member'
    package: outlook!
    fullName: allowEvent
    summary: >-
      When you use the [completed
      method](https://learn.microsoft.com/javascript/api/outlook/office.mailboxevent#outlook-office-mailboxevent-completed-member(1))
      to signal completion of an event handler, this value indicates if the handled event should continue execution or
      be canceled. For example, an add-in that handles the `OnMessageSend` or `OnAppointmentSend` event can set
      `allowEvent` to `false` to cancel the sending of an item. For a complete sample, see the [Smart Alerts
      walkthrough](https://learn.microsoft.com/office/dev/add-ins/outlook/smart-alerts-onmessagesend-walkthrough)<!--
      -->.
    remarks: >-
      \[ [API set: Mailbox 1.12](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission level
      (Outlook)](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'allowEvent?: boolean;'
      return:
        type: boolean
  - name: cancelLabel
    uid: 'outlook!Office.SmartAlertsEventCompletedOptions#cancelLabel:member'
    package: outlook!
    fullName: cancelLabel
    summary: >-
      When you use the [completed
      method](https://learn.microsoft.com/javascript/api/outlook/office.mailboxevent#outlook-office-mailboxevent-completed-member(1))
      to signal completion of an event handler and set its `allowEvent` property to `false`<!-- -->, this property
      customizes the text of the **Don't Send** button in the Smart Alerts dialog. Custom text must be 20 characters
      or less.


      For an example, see the [Smart Alerts
      walkthrough](https://learn.microsoft.com/office/dev/add-ins/outlook/smart-alerts-onmessagesend-walkthrough#customize-the-dont-send-button-optional)<!--
      -->.
    remarks: >-
      \[ [API set: Mailbox 1.14](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission level
      (Outlook)](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cancelLabel?: string;'
      return:
        type: string
  - name: commandId
    uid: 'outlook!Office.SmartAlertsEventCompletedOptions#commandId:member'
    package: outlook!
    fullName: commandId
    summary: >-
      When you use the [completed
      method](https://learn.microsoft.com/javascript/api/outlook/office.mailboxevent#outlook-office-mailboxevent-completed-member(1))
      to signal completion of an event handler and set its `allowEvent` property to `false`<!-- -->, this property
      specifies the ID of the task pane or function that runs when the **Don't Send** button is selected from the
      Smart Alerts dialog.


      For an example, see the [Smart Alerts
      walkthrough](https://learn.microsoft.com/office/dev/add-ins/outlook/smart-alerts-onmessagesend-walkthrough#customize-the-dont-send-button-optional)<!--
      -->.
    remarks: >-
      \[ [API set: Mailbox 1.14](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission level
      (Outlook)](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Important**:


      The `commandId` value must match the task pane or function ID specified in the manifest of your add-in. The markup
      depends on the type of manifest your add-in uses.


      - **Add-in only manifest**: The `id` attribute of the
      [Control](https://learn.microsoft.com/javascript/api/manifest/control) element representing the task pane or
      function.


      - **Unified manifest for Microsoft 365**: The "id" property of the task pane or function command in the
      "controls" array.


      If you specify the `contextData` option in your `event.completed` call, you must also assign a task pane or
      function ID to the `commandId` option. Otherwise, the JSON data assigned to `contextData` is ignored.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'commandId?: string;'
      return:
        type: string
  - name: contextData
    uid: 'outlook!Office.SmartAlertsEventCompletedOptions#contextData:member'
    package: outlook!
    fullName: contextData
    summary: >-
      When you use the [completed
      method](https://learn.microsoft.com/javascript/api/outlook/office.mailboxevent#outlook-office-mailboxevent-completed-member(1))
      to signal completion of an event handler and set its `allowEvent` property to `false`<!-- -->, this property
      specifies any JSON data passed to the add-in for processing when the **Don't Send** button is selected from
      the Smart Alerts dialog.
    remarks: >-
      \[ [API set: Mailbox 1.14](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission level
      (Outlook)](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Important**:


      - In Outlook on Windows, the `any` type is supported starting in Version 2402 (Build 17308.20000). In earlier
      versions of Outlook on Windows, only the `string` type is supported.


      - If you specify the `contextData` option in your `event.completed` call, you must also assign a task pane ID to
      the `commandId` option. Otherwise, the JSON data assigned to `contextData` is ignored.


      - To retrieve the value of the `contextData` property, you must call
      `Office.context.mailbox.item.getInitializationContextAsync` in the JavaScript implementation of your task pane. If
      you create a JSON string using `JSON.stringify()` and assign it to the `contextData` property, you must parse the
      string using `JSON.parse()` once you retrieve it.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'contextData?: any;'
      return:
        type: any
  - name: errorMessage
    uid: 'outlook!Office.SmartAlertsEventCompletedOptions#errorMessage:member'
    package: outlook!
    fullName: errorMessage
    summary: >-
      When you use the [completed
      method](https://learn.microsoft.com/javascript/api/outlook/office.mailboxevent#outlook-office-mailboxevent-completed-member(1))
      to signal completion of an event handler and set its `allowEvent` property to `false`<!-- -->, this property sets
      the error message that will be displayed to the user. For an example, see the [Smart Alerts
      walkthrough](https://learn.microsoft.com/office/dev/add-ins/outlook/smart-alerts-onmessagesend-walkthrough)<!--
      -->.
    remarks: >-
      \[ [API set: Mailbox 1.12](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission level
      (Outlook)](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'errorMessage?: string;'
      return:
        type: string
  - name: sendModeOverride
    uid: 'outlook!Office.SmartAlertsEventCompletedOptions#sendModeOverride:member'
    package: outlook!
    fullName: sendModeOverride
    summary: >-
      When you use the [completed
      method](https://learn.microsoft.com/javascript/api/outlook/office.mailboxevent#outlook-office-mailboxevent-completed-member(1))
      to signal completion of an event handler and set its `allowEvent` property to `false`<!-- -->, this property
      overrides the [send mode
      option](https://learn.microsoft.com/office/dev/add-ins/outlook/onmessagesend-onappointmentsend-events#available-send-mode-options)
      specified in the manifest at runtime.


      For an example, see the [Smart Alerts
      walkthrough](https://learn.microsoft.com/office/dev/add-ins/outlook/smart-alerts-onmessagesend-walkthrough#override-the-send-mode-option-at-runtime-optional)<!--
      -->.
    remarks: >-
      \[ [API set: Mailbox 1.14](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission level
      (Outlook)](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Compose


      **Important**: Currently, `sendModeOverride` can only be set to the [prompt
      user](https://learn.microsoft.com/office/dev/add-ins/outlook/onmessagesend-onappointmentsend-events#prompt-user)
      option.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sendModeOverride?: MailboxEnums.SendModeOverride | string;'
      return:
        type: '<xref uid="outlook!Office.MailboxEnums.SendModeOverride:enum" /> | string'
