### YamlMime:TSType
name: Excel.SettingCollection
uid: 'excel!Excel.SettingCollection:class'
package: excel!
fullName: Excel.SettingCollection
summary: >-
  Represents a collection of key-value pair setting objects that are part of the
  workbook. The scope is limited to per file and add-in (task-pane or content)
  combination.


  \[ [API set: ExcelApi
  1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.SettingCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: items
    uid: 'excel!Excel.SettingCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Setting[];'
      return:
        type: '<xref uid="excel!Excel.Setting:class" />[]'
  - name: onSettingsChanged
    uid: 'excel!Excel.SettingCollection#onSettingsChanged:member'
    package: excel!
    fullName: onSettingsChanged
    summary: >-
      Occurs when the Settings in the document are changed.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onSettingsChanged:
        OfficeExtension.EventHandlers<Excel.SettingsChangedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.SettingsChangedEventArgs:interface" />&gt;
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

          await Excel.run(async (context) => {
              const settings = context.workbook.settings; 
              settings.onSettingsChanged.add(onChangedSetting);

              await context.sync();
              console.log("Settings changed handler registered.");
          });

          ```
methods:
  - name: 'add(key, value)'
    uid: 'excel!Excel.SettingCollection#add:member(1)'
    package: excel!
    fullName: 'add(key, value)'
    summary: >-
      Sets or adds the specified setting to the workbook.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        add(key: string, value: string | number | boolean | Date | Array<any> |
        any): Excel.Setting;
      parameters:
        - id: key
          description: The Key of the new setting.
          type: string
        - id: value
          description: The Value for the new setting.
          type: string | number | boolean | Date | Array&lt;any&gt; | any
      return:
        type: '<xref uid="excel!Excel.Setting:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

          await Excel.run(async (context) => {
              const settings = context.workbook.settings; 
              settings.onSettingsChanged.add(onChangedSetting);

              await context.sync();
              console.log("Settings changed handler registered.");
          });

          ```
  - name: getCount()
    uid: 'excel!Excel.SettingCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: >-
      Gets the number of Settings in the collection.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getItem(key)
    uid: 'excel!Excel.SettingCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(key)
    summary: >-
      Gets a Setting entry via the key.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Excel.Setting;'
      parameters:
        - id: key
          description: Key of the setting.
          type: string
      return:
        type: '<xref uid="excel!Excel.Setting:class" />'
        description: ''
  - name: getItemOrNullObject(key)
    uid: 'excel!Excel.SettingCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a Setting entry via the key. If the Setting does not exist, will
      return a null object.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Setting;'
      parameters:
        - id: key
          description: The key of the setting.
          type: string
      return:
        type: '<xref uid="excel!Excel.Setting:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/create-get-change-delete-settings.yaml

          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              let needsReview = settings.getItem("NeedsReview");
              needsReview.delete();
              needsReview = settings.getItemOrNullObject("NeedsReview");

              await context.sync();

              if (needsReview.isNullObject) {
                  console.log("The setting has been deleted");
              } else {
                  console.log("The setting was not deleted");
              }

              await context.sync();
          });

          ```
  - name: load(options)
    uid: 'excel!Excel.SettingCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.SettingCollectionLoadOptions &
        Excel.Interfaces.CollectionLoadOptions): Excel.SettingCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.SettingCollectionLoadOptions:interface"
            /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.SettingCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.SettingCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SettingCollection;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.SettingCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.SettingCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption):
        Excel.SettingCollection;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.SettingCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.SettingCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      `Excel.SettingCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as
      `Excel.Interfaces.SettingCollectionData`<!-- -->) that contains an "items"
      array with shallow copies of any loaded properties from the collection's
      items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.SettingCollectionData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.SettingCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
