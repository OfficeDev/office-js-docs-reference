### YamlMime:TSType
name: Excel.CommentCollection
uid: 'excel!Excel.CommentCollection:class'
package: excel!
fullName: Excel.CommentCollection
summary: Represents a collection of comment objects that are part of the workbook.
remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.CommentCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: items
    uid: 'excel!Excel.CommentCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Comment[];'
      return:
        type: '<xref uid="excel!Excel.Comment:class" />[]'
methods:
  - name: 'add(cellAddress, content, contentType)'
    uid: 'excel!Excel.CommentCollection#add:member(1)'
    package: excel!
    fullName: 'add(cellAddress, content, contentType)'
    summary: >-
      Creates a new comment with the given content on the given cell. An `InvalidArgument` error is thrown if the
      provided range is larger than one cell.
    remarks: >-
      \[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Comments");

          // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
          sheet.comments.add("A2", "TODO: add data.");
          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        add(cellAddress: Range | string, content: CommentRichContent | string, contentType?: Excel.ContentType):
        Excel.Comment;
      parameters:
        - id: cellAddress
          description: >-
            The cell to which the comment is added. This can be a `Range` object or a string. If it's a string, it must
            contain the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided
            range is larger than one cell.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
        - id: content
          description: >-
            The comment's content. This can be either a string or `CommentRichContent` object. Strings are used for
            plain text. `CommentRichContent` objects allow for other comment features, such as mentions. \[Api set:
            ExcelApi 1.10 for string, 1.11 for CommentRichContent object\]
          type: '<xref uid="excel!Excel.CommentRichContent:interface" /> | string'
        - id: contentType
          description: >-
            Optional. The type of content contained within the comment. The default value is enum
            `ContentType.Plain`<!-- -->. \[Api set: ExcelApi 1.10 for Enum ContentType.Plain, 1.11 for Enum
            ContentType.Mention\]
          type: '<xref uid="excel!Excel.ContentType:enum" />'
      return:
        type: '<xref uid="excel!Excel.Comment:class" />'
        description: ''
  - name: 'add(cellAddress, content, contentTypeString)'
    uid: 'excel!Excel.CommentCollection#add:member(2)'
    package: excel!
    fullName: 'add(cellAddress, content, contentTypeString)'
    summary: >-
      Creates a new comment with the given content on the given cell. An `InvalidArgument` error is thrown if the
      provided range is larger than one cell.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        add(cellAddress: Range | string, content: CommentRichContent | string, contentTypeString?: "Plain" | "Mention"):
        Excel.Comment;
      parameters:
        - id: cellAddress
          description: >-
            The cell to which the comment is added. This can be a `Range` object or a string. If it's a string, it must
            contain the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided
            range is larger than one cell.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
        - id: content
          description: >-
            The comment's content. This can be either a string or `CommentRichContent` object. Strings are used for
            plain text. `CommentRichContent` objects allow for other comment features, such as mentions. \[Api set:
            ExcelApi 1.10 for string, 1.11 for CommentRichContent object\]
          type: '<xref uid="excel!Excel.CommentRichContent:interface" /> | string'
        - id: contentTypeString
          description: >-
            Optional. The type of content contained within the comment. The default value is enum
            `ContentType.Plain`<!-- -->. \[Api set: ExcelApi 1.10 for Enum ContentType.Plain, 1.11 for Enum
            ContentType.Mention\]
          type: '"Plain" | "Mention"'
      return:
        type: '<xref uid="excel!Excel.Comment:class" />'
        description: ''
  - name: getCount()
    uid: 'excel!Excel.CommentCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: Gets the number of comments in the collection.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getItem(commentId)
    uid: 'excel!Excel.CommentCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(commentId)
    summary: Gets a comment from the collection based on its ID.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(commentId: string): Excel.Comment;'
      parameters:
        - id: commentId
          description: The identifier for the comment.
          type: string
      return:
        type: '<xref uid="excel!Excel.Comment:class" />'
        description: ''
  - name: getItemAt(index)
    uid: 'excel!Excel.CommentCollection#getItemAt:member(1)'
    package: excel!
    fullName: getItemAt(index)
    summary: Gets a comment from the collection based on its position.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Excel.Comment;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Comment:class" />'
        description: ''
  - name: getItemByCell(cellAddress)
    uid: 'excel!Excel.CommentCollection#getItemByCell:member(1)'
    package: excel!
    fullName: getItemByCell(cellAddress)
    summary: Gets the comment from the specified cell.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemByCell(cellAddress: Range | string): Excel.Comment;'
      parameters:
        - id: cellAddress
          description: >-
            The cell which the comment is on. This can be a `Range` object or a string. If it's a string, it must
            contain the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided
            range is larger than one cell.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
      return:
        type: '<xref uid="excel!Excel.Comment:class" />'
        description: ''
  - name: getItemByReplyId(replyId)
    uid: 'excel!Excel.CommentCollection#getItemByReplyId:member(1)'
    package: excel!
    fullName: getItemByReplyId(replyId)
    summary: Gets the comment to which the given reply is connected.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemByReplyId(replyId: string): Excel.Comment;'
      parameters:
        - id: replyId
          description: The identifier of comment reply.
          type: string
      return:
        type: '<xref uid="excel!Excel.Comment:class" />'
        description: ''
  - name: getItemOrNullObject(commentId)
    uid: 'excel!Excel.CommentCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(commentId)
    summary: >-
      Gets a comment from the collection based on its ID. If the comment object does not exist, then this method returns
      an object with its `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject
      methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: ExcelApi 1.14](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(commentId: string): Excel.Comment;'
      parameters:
        - id: commentId
          description: The identifier for the comment.
          type: string
      return:
        type: '<xref uid="excel!Excel.Comment:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.CommentCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.CommentCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.CommentCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="excel!Excel.Interfaces.CommentCollectionLoadOptions:interface" /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.CommentCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.CommentCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CommentCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.CommentCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.CommentCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.CommentCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.CommentCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.CommentCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Excel.CommentCollection` object is an API object, the `toJSON` method returns
      a plain JavaScript object (typed as `Excel.Interfaces.CommentCollectionData`<!-- -->) that contains an "items"
      array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.CommentCollectionData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.CommentCollectionData:interface" />'
        description: ''
events:
  - name: onAdded
    uid: 'excel!Excel.CommentCollection#onAdded:member'
    package: excel!
    fullName: onAdded
    summary: Occurs when the comments are added.
    remarks: >-
      \[ [API set: ExcelApi 1.12](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

      await Excel.run(async (context) => {
          const comments = context.workbook.worksheets.getActiveWorksheet().comments;

          // Register the onAdded, onChanged, and onDeleted comment event handlers.
          comments.onAdded.add(commentAdded);
          comments.onChanged.add(commentChanged);
          comments.onDeleted.add(commentDeleted);

          await context.sync();

          console.log("Added event handlers for when comments are added, changed, or deleted.");
      });


      ...

      async function commentAdded(event: Excel.CommentAddedEventArgs) {
          // Retrieve the added comment using the comment ID.
          // Note: This function assumes only a single comment is added at a time. 
          await Excel.run(async (context) => {
              const addedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);

              // Load the added comment's data.
              addedComment.load(["content", "authorName", "creationDate"]);

              await context.sync();

              // Print out the added comment's data.
              console.log(`A comment was added:`);
              console.log(`    ID: ${event.commentDetails[0].commentId}`);
              console.log(`    Comment content:${addedComment.content}`);
              console.log(`    Comment author:${addedComment.authorName}`);
              console.log(`    Creation date:${addedComment.creationDate}`);
          });
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.CommentAddedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.CommentAddedEventArgs:interface" />&gt;
  - name: onChanged
    uid: 'excel!Excel.CommentCollection#onChanged:member'
    package: excel!
    fullName: onChanged
    summary: 'Occurs when comments or replies in a comment collection are changed, including when replies are deleted.'
    remarks: >-
      \[ [API set: ExcelApi 1.12](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

      await Excel.run(async (context) => {
          const comments = context.workbook.worksheets.getActiveWorksheet().comments;

          // Register the onAdded, onChanged, and onDeleted comment event handlers.
          comments.onAdded.add(commentAdded);
          comments.onChanged.add(commentChanged);
          comments.onDeleted.add(commentDeleted);

          await context.sync();

          console.log("Added event handlers for when comments are added, changed, or deleted.");
      });


      ...

      async function commentChanged(event: Excel.CommentChangedEventArgs) {
          // Retrieve the changed comment using the comment ID.
          // Note: This function assumes only a single comment is changed at a time. 
          await Excel.run(async (context) => {
              const changedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);

              // Load the changed comment's data.
              changedComment.load(["content", "authorName", "creationDate"]);

              await context.sync();

              // Print out the changed comment's data.
              console.log(`A comment was changed:`);
              console.log(`    ID: ${event.commentDetails[0].commentId}`);
              console.log(`    Updated comment content: ${changedComment.content}`);
              console.log(`    Comment author: ${changedComment.authorName}`);
              console.log(`    Creation date: ${changedComment.creationDate}`);
          });
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.CommentChangedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.CommentChangedEventArgs:interface" />&gt;
  - name: onDeleted
    uid: 'excel!Excel.CommentCollection#onDeleted:member'
    package: excel!
    fullName: onDeleted
    summary: Occurs when comments are deleted in the comment collection.
    remarks: >-
      \[ [API set: ExcelApi 1.12](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml

      await Excel.run(async (context) => {
          const comments = context.workbook.worksheets.getActiveWorksheet().comments;

          // Register the onAdded, onChanged, and onDeleted comment event handlers.
          comments.onAdded.add(commentAdded);
          comments.onChanged.add(commentChanged);
          comments.onDeleted.add(commentDeleted);

          await context.sync();

          console.log("Added event handlers for when comments are added, changed, or deleted.");
      });


      ...

      async function commentDeleted(event: Excel.CommentDeletedEventArgs) {
          // Print out the deleted comment's ID.
          // Note: This function assumes only a single comment is deleted at a time. 
          await Excel.run(async (context) => {
              console.log(`A comment was deleted:`);
              console.log(`    ID: ${event.commentDetails[0].commentId}`);
          });
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.CommentDeletedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.CommentDeletedEventArgs:interface" />&gt;
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
