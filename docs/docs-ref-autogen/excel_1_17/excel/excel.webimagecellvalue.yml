### YamlMime:TSType
name: Excel.WebImageCellValue
uid: 'excel!Excel.WebImageCellValue:interface'
package: excel!
fullName: Excel.WebImageCellValue
summary: Represents the value of a cell containing an image downloaded from the internet.
remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: address
    uid: 'excel!Excel.WebImageCellValue#address:member'
    package: excel!
    fullName: address
    summary: >-
      Represents the URL from which the image will be downloaded. This image must be hosted on a server that supports
      HTTPS.
    remarks: >-
      \[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-web-image.yaml

      // This function retrieves the image URL from the selected cell and opens that image in a new browser tab.

      await Excel.run(async (context) => {
        // Load the active cell information.
        const activeCell = context.workbook.getActiveCell();
        activeCell.load("valuesAsJson");
        await context.sync();

        // Get image URL from the active cell.
        const values = activeCell.valuesAsJson;
        const webImageData = values[0][0] as Excel.WebImageCellValue;
        const webImageUrl = webImageData.address;

        if (!webImageUrl) {
          console.log("The selected cell is missing an image URL. Select a cell that contains an image.");
          return;
        }

        // Open the image URL in a new browser tab.
        const tab = window.open(webImageData.address, "_blank");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'address: string;'
      return:
        type: string
  - name: altText
    uid: 'excel!Excel.WebImageCellValue#altText:member'
    package: excel!
    fullName: altText
    summary: Represents the alternate text that can be used in accessibility scenarios to describe what the image represents.
    remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'altText?: string;'
      return:
        type: string
  - name: attribution
    uid: 'excel!Excel.WebImageCellValue#attribution:member'
    package: excel!
    fullName: attribution
    summary: Represents attribution information to describe the source and license requirements for using this image.
    remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'attribution?: CellValueAttributionAttributes[];'
      return:
        type: '<xref uid="excel!Excel.CellValueAttributionAttributes:interface" />[]'
  - name: basicType
    uid: 'excel!Excel.WebImageCellValue#basicType:member'
    package: excel!
    fullName: basicType
    summary: Represents the value that would be returned by `Range.valueTypes` for a cell with this value.
    remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'basicType?: RangeValueType.error | "Error";'
      return:
        type: '<xref uid="excel!Excel.RangeValueType.error:member" /> | "Error"'
  - name: basicValue
    uid: 'excel!Excel.WebImageCellValue#basicValue:member'
    package: excel!
    fullName: basicValue
    summary: >-
      Represents the value that would be returned by `Range.values` for a cell with this value. When accessed through a
      `valuesAsJson` property, this string value aligns with the en-US locale. When accessed through a
      `valuesAsJsonLocal` property, this string value aligns with the user's display locale.
    remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'basicValue?: "#VALUE!" | string;'
      return:
        type: '"#VALUE!" | string'
  - name: provider
    uid: 'excel!Excel.WebImageCellValue#provider:member'
    package: excel!
    fullName: provider
    summary: >-
      Represents information that describes the entity or individual who provided the image. This information can be
      used for branding in image cards.
    remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'provider?: CellValueProviderAttributes;'
      return:
        type: '<xref uid="excel!Excel.CellValueProviderAttributes:interface" />'
  - name: relatedImagesAddress
    uid: 'excel!Excel.WebImageCellValue#relatedImagesAddress:member'
    package: excel!
    fullName: relatedImagesAddress
    summary: Represents the URL of a webpage with images that are considered related to this `WebImageCellValue`<!-- -->.
    remarks: '\[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'relatedImagesAddress?: string;'
      return:
        type: string
  - name: type
    uid: 'excel!Excel.WebImageCellValue#type:member'
    package: excel!
    fullName: type
    summary: Represents the type of this cell value.
    remarks: >-
      \[ [API set: ExcelApi 1.16](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/20-data-types/data-types-web-image.yaml

      // This function inserts a web image into the currently selected cell.

      await Excel.run(async (context) => {
        // Retrieve image data from the task pane and then clear the input fields.
        const imageUrl = $("#url").val() as string;
        const imageAltText = $("#alt-text").val() as string;
        clearForm();

        // Load the active cell.
        const activeCell = context.workbook.getActiveCell();
        activeCell.load();
        await context.sync();

        if (!imageUrl) {
          console.log("Please enter an image URL.");
          return;
        }

        // Create a web image object and assign the image details.
        const webImage: Excel.WebImageCellValue = {
          type: "WebImage", /* The string equivalent of `Excel.CellValueType.webImage`. */
          address: imageUrl,
          altText: imageAltText     
        };

        // Insert web image into the active cell.
        activeCell.valuesAsJson = [[webImage]];

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'type: CellValueType.webImage | "WebImage";'
      return:
        type: '<xref uid="excel!Excel.CellValueType.webImage:member" /> | "WebImage"'
