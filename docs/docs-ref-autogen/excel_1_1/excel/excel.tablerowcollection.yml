### YamlMime:TSType
name: Excel.TableRowCollection
uid: 'excel!Excel.TableRowCollection:class'
package: excel!
fullName: Excel.TableRowCollection
summary: >-
  Represents a collection of all the rows that are part of the table.


  Note that unlike Ranges or Columns, which will adjust if new rows/columns are
  added before them, a TableRow object represent the physical location of the
  table row, but not the data. That is, if the data is sorted or if new rows are
  added, a table row will continue to point at the index for which it was
  created.


  \[ [API set: ExcelApi
  1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.TableRowCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: count
    uid: 'excel!Excel.TableRowCollection#count:member'
    package: excel!
    fullName: count
    summary: >-
      Returns the number of rows in the table.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly count: number;'
      return:
        type: number
  - name: items
    uid: 'excel!Excel.TableRowCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.TableRow[];'
      return:
        type: '<xref uid="excel!Excel.TableRow:class" />[]'
methods:
  - name: 'add(index, values)'
    uid: 'excel!Excel.TableRowCollection#add:member(1)'
    package: excel!
    fullName: 'add(index, values)'
    summary: >-
      Adds one or more rows to the table. The return object will be the top of
      the newly added row(s).


      Note that unlike Ranges or Columns, which will adjust if new rows/columns
      are added before them, a TableRow object represent the physical location
      of the table row, but not the data. That is, if the data is sorted or if
      new rows are added, a table row will continue to point at the index for
      which it was created.


      \[ [API set: ExcelApi 1.1 for adding a single row; 1.4 allows adding of
      multiple
      rows.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        add(index?: number, values?: Array<Array<boolean | string | number>> |
        boolean | string | number): Excel.TableRow;
      parameters:
        - id: index
          description: >-
            Optional. Specifies the relative position of the new row. If null or
            -1, the addition happens at the end. Any rows below the inserted row
            are shifted downwards. Zero-indexed.
          type: number
        - id: values
          description: >-
            Optional. A 2-dimensional array of unformatted values of the table
            row.
          type: >-
            Array&lt;Array&lt;boolean | string | number&gt;&gt; | boolean |
            string | number
      return:
        type: '<xref uid="excel!Excel.TableRow:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var values = [["Sample", "Values", "For", "New", "Row"]];
              var row = tables.getItem("Table1").rows.add(null, values);
              row.load('index');
              return ctx.sync().then(function() {
                  console.log(row.index);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getItemAt(index)
    uid: 'excel!Excel.TableRowCollection#getItemAt:member(1)'
    package: excel!
    fullName: getItemAt(index)
    summary: >-
      Gets a row based on its position in the collection.


      Note that unlike Ranges or Columns, which will adjust if new rows/columns
      are added before them, a TableRow object represent the physical location
      of the table row, but not the data. That is, if the data is sorted or if
      new rows are added, a table row will continue to point at the index for
      which it was created.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Excel.TableRow;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.TableRow:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tablerow = ctx.workbook.tables.getItem('Table1').rows.getItemAt(0);
              tablerow.load('name');
              return ctx.sync().then(function() {
                      console.log(tablerow.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(options)
    uid: 'excel!Excel.TableRowCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.TableRowCollectionLoadOptions &
        Excel.Interfaces.CollectionLoadOptions): Excel.TableRowCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.TableRowCollectionLoadOptions:interface"
            /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.TableRowCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.TableRowCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableRowCollection;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.TableRowCollection:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tablerows = ctx.workbook.tables.getItem('Table1').rows;
              tablerows.load('items');
              return ctx.sync().then(function() {
                  console.log("tablerows Count: " + tablerows.count);
                  for (var i = 0; i < tablerows.items.length; i++) {
                      console.log(tablerows.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // In the example, we'll select the top 100 rows of the table.
          Excel.run(function (ctx) { 
              var table = ctx.workbook.tables.getItem("Table1");
              var tableRows = table.rows.load({"select" : "index, values","top": 100, "skip": 0 })
              return ctx.sync().then(function() {
                  for (var i = 0; i < tableRows.items.length; i++) {
                      console.log(tableRows.items[i].index);
                      console.log(tableRows.items[i].values);
                  }
              });
          }).catch(function(error) {
                  console.log("Error: " + error);
                  if (error instanceof OfficeExtension.Error) {
                      console.log("Debug info: " + JSON.stringify(error.debugInfo));
                  }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.TableRowCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption):
        Excel.TableRowCollection;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.TableRowCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.TableRowCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      `Excel.TableRowCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as
      `Excel.Interfaces.TableRowCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the
      collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableRowCollectionData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.TableRowCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
