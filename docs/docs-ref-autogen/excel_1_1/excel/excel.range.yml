### YamlMime:TSType
name: Excel.Range
uid: 'excel!Excel.Range:class'
package: excel!
fullName: Excel.Range
summary: >-
  Range represents a set of one or more contiguous cells such as a cell, a row,
  a column, block of cells, etc. To learn more about how ranges are used
  throughout the API, read [Work with ranges using the Excel JavaScript
  API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)
  and [Work with ranges using the Excel JavaScript API
  (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)<!--
  -->.


  \[ [API set: ExcelApi
  1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: address
    uid: 'excel!Excel.Range#address:member'
    package: excel!
    fullName: address
    summary: >-
      Specifies the range reference in A1-style. Address value will contain the
      Sheet reference (e.g., "Sheet1!A1:B4").


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly address: string;'
      return:
        type: string
  - name: addressLocal
    uid: 'excel!Excel.Range#addressLocal:member'
    package: excel!
    fullName: addressLocal
    summary: >-
      Specifies the range reference for the specified range in the language of
      the user.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type: string
  - name: cellCount
    uid: 'excel!Excel.Range#cellCount:member'
    package: excel!
    fullName: cellCount
    summary: >-
      Specifies the number of cells in the range. This API will return -1 if the
      cell count exceeds 2^31-1 (2,147,483,647).


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type: number
  - name: columnCount
    uid: 'excel!Excel.Range#columnCount:member'
    package: excel!
    fullName: columnCount
    summary: >-
      Specifies the total number of columns in the range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type: number
  - name: columnIndex
    uid: 'excel!Excel.Range#columnIndex:member'
    package: excel!
    fullName: columnIndex
    summary: >-
      Specifies the column number of the first cell in the range. Zero-indexed.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type: number
  - name: context
    uid: 'excel!Excel.Range#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: format
    uid: 'excel!Excel.Range#format:member'
    package: excel!
    fullName: format
    summary: >-
      Returns a format object, encapsulating the range's font, fill, borders,
      alignment, and other properties.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type: '<xref uid="excel!Excel.RangeFormat:class" />'
  - name: formulas
    uid: 'excel!Excel.Range#formulas:member'
    package: excel!
    fullName: formulas
    summary: >-
      Represents the formula in A1-style notation. If a cell has no formula, its
      value is returned instead.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formulas: any[][];'
      return:
        type: 'any[][]'
  - name: formulasLocal
    uid: 'excel!Excel.Range#formulasLocal:member'
    package: excel!
    fullName: formulasLocal
    summary: >-
      Represents the formula in A1-style notation, in the user's language and
      number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula
      would become "=SUMME(A1; 1,5)" in German. If a cell has no formula, its
      value is returned instead.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type: 'any[][]'
  - name: numberFormat
    uid: 'excel!Excel.Range#numberFormat:member'
    package: excel!
    fullName: numberFormat
    summary: >-
      Represents Excel's number format code for the given range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type: 'any[][]'
        description: >-


          #### Examples


          ```javascript

          // The example below sets number-format, values and formulas on a grid
          that contains 2x3 grid.

          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });

          ```
  - name: rowCount
    uid: 'excel!Excel.Range#rowCount:member'
    package: excel!
    fullName: rowCount
    summary: >-
      Returns the total number of rows in the range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type: number
  - name: rowIndex
    uid: 'excel!Excel.Range#rowIndex:member'
    package: excel!
    fullName: rowIndex
    summary: >-
      Returns the row number of the first cell in the range. Zero-indexed.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type: number
  - name: text
    uid: 'excel!Excel.Range#text:member'
    package: excel!
    fullName: text
    summary: >-
      Text values of the specified range. The Text value will not depend on the
      cell width. The \# sign substitution that happens in Excel UI will not
      affect the text value returned by the API.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly text: string[][];'
      return:
        type: 'string[][]'
  - name: values
    uid: 'excel!Excel.Range#values:member'
    package: excel!
    fullName: values
    summary: >-
      Represents the raw values of the specified range. The data returned could
      be of type string, number, or a boolean. Cells that contain an error will
      return the error string.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'values: any[][];'
      return:
        type: 'any[][]'
  - name: valueTypes
    uid: 'excel!Excel.Range#valueTypes:member'
    package: excel!
    fullName: valueTypes
    summary: >-
      Specifies the type of data in each cell.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type: '<xref uid="excel!Excel.RangeValueType:enum" />[][]'
  - name: worksheet
    uid: 'excel!Excel.Range#worksheet:member'
    package: excel!
    fullName: worksheet
    summary: >-
      The worksheet containing the current range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
methods:
  - name: clear(applyTo)
    uid: 'excel!Excel.Range#clear:member(1)'
    package: excel!
    fullName: clear(applyTo)
    summary: >-
      Clear range values, format, fill, border, etc.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      parameters:
        - id: applyTo
          description: >-
            Optional. Determines the type of clear action. See
            Excel.ClearApplyTo for details.
          type: '<xref uid="excel!Excel.ClearApplyTo:enum" />'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: clear(applyToString)
    uid: 'excel!Excel.Range#clear:member(2)'
    package: excel!
    fullName: clear(applyToString)
    summary: >-
      Clear range values, format, fill, border, etc.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" |
        "RemoveHyperlinks"): void;
      parameters:
        - id: applyToString
          description: >-
            Optional. Determines the type of clear action. See
            Excel.ClearApplyTo for details.
          type: '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
      return:
        type: void
        description: ''
  - name: delete(shift)
    uid: 'excel!Excel.Range#delete:member(1)'
    package: excel!
    fullName: delete(shift)
    summary: >-
      Deletes the cells associated with the range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      parameters:
        - id: shift
          description: >-
            Specifies which way to shift the cells. See
            Excel.DeleteShiftDirection for details.
          type: '<xref uid="excel!Excel.DeleteShiftDirection:enum" />'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: delete(shiftString)
    uid: 'excel!Excel.Range#delete:member(2)'
    package: excel!
    fullName: delete(shiftString)
    summary: >-
      Deletes the cells associated with the range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      parameters:
        - id: shiftString
          description: >-
            Specifies which way to shift the cells. See
            Excel.DeleteShiftDirection for details.
          type: '"Up" | "Left"'
      return:
        type: void
        description: ''
  - name: getBoundingRect(anotherRange)
    uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    package: excel!
    fullName: getBoundingRect(anotherRange)
    summary: >-
      Gets the smallest range object that encompasses the given ranges. For
      example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      parameters:
        - id: anotherRange
          description: The range object or address or range name.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'getCell(row, column)'
    uid: 'excel!Excel.Range#getCell:member(1)'
    package: excel!
    fullName: 'getCell(row, column)'
    summary: >-
      Gets the range object containing the single cell based on row and column
      numbers. The cell can be outside the bounds of its parent range, so long
      as it stays within the worksheet grid. The returned cell is located
      relative to the top left cell of the range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      parameters:
        - id: row
          description: Row number of the cell to be retrieved. Zero-indexed.
          type: number
        - id: column
          description: Column number of the cell to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getColumn(column)
    uid: 'excel!Excel.Range#getColumn:member(1)'
    package: excel!
    fullName: getColumn(column)
    summary: >-
      Gets a column contained in the range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      parameters:
        - id: column
          description: Column number of the range to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getEntireColumn()
    uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    package: excel!
    fullName: getEntireColumn()
    summary: >-
      Gets an object that represents the entire column of the range (for
      example, if the current range represents cells "B4:E11", its
      `getEntireColumn` is a range that represents columns "B:E").


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: >-


          #### Examples


          ```javascript

          // Note: the grid properties of the Range (values, numberFormat,
          formulas) 

          // contains null since the Range in question is unbounded.

          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });

          ```
  - name: getEntireRow()
    uid: 'excel!Excel.Range#getEntireRow:member(1)'
    package: excel!
    fullName: getEntireRow()
    summary: >-
      Gets an object that represents the entire row of the range (for example,
      if the current range represents cells "B4:E11", its `GetEntireRow` is a
      range that represents rows "4:11").


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getIntersection(anotherRange)
    uid: 'excel!Excel.Range#getIntersection:member(1)'
    package: excel!
    fullName: getIntersection(anotherRange)
    summary: >-
      Gets the range object that represents the rectangular intersection of the
      given ranges.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      parameters:
        - id: anotherRange
          description: >-
            The range object or range address that will be used to determine the
            intersection of ranges.
          type: '<xref uid="excel!Excel.Range:class" /> | string'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getLastCell()
    uid: 'excel!Excel.Range#getLastCell:member(1)'
    package: excel!
    fullName: getLastCell()
    summary: >-
      Gets the last cell within the range. For example, the last cell of "B2:D5"
      is "D5".


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getLastColumn()
    uid: 'excel!Excel.Range#getLastColumn:member(1)'
    package: excel!
    fullName: getLastColumn()
    summary: >-
      Gets the last column within the range. For example, the last column of
      "B2:D5" is "D2:D5".


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getLastRow()
    uid: 'excel!Excel.Range#getLastRow:member(1)'
    package: excel!
    fullName: getLastRow()
    summary: >-
      Gets the last row within the range. For example, the last row of "B2:D5"
      is "B5:D5".


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'getOffsetRange(rowOffset, columnOffset)'
    uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    package: excel!
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    summary: >-
      Gets an object which represents a range that's offset from the specified
      range. The dimension of the returned range will match this range. If the
      resulting range is forced outside the bounds of the worksheet grid, an
      error will be thrown.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the range is
            to be offset. Positive values are offset downward, and negative
            values are offset upward.
          type: number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the range
            is to be offset. Positive values are offset to the right, and
            negative values are offset to the left.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:J5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getRow(row)
    uid: 'excel!Excel.Range#getRow:member(1)'
    package: excel!
    fullName: getRow(row)
    summary: >-
      Gets a row contained in the range.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      parameters:
        - id: row
          description: Row number of the range to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: insert(shift)
    uid: 'excel!Excel.Range#insert:member(1)'
    package: excel!
    fullName: insert(shift)
    summary: >-
      Inserts a cell or a range of cells into the worksheet in place of this
      range, and shifts the other cells to make space. Returns a new Range
      object at the now blank space.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      parameters:
        - id: shift
          description: >-
            Specifies which way to shift the cells. See
            Excel.InsertShiftDirection for details.
          type: '<xref uid="excel!Excel.InsertShiftDirection:enum" />'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: insert(shiftString)
    uid: 'excel!Excel.Range#insert:member(2)'
    package: excel!
    fullName: insert(shiftString)
    summary: >-
      Inserts a cell or a range of cells into the worksheet in place of this
      range, and shifts the other cells to make space. Returns a new Range
      object at the now blank space.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      parameters:
        - id: shiftString
          description: >-
            Specifies which way to shift the cells. See
            Excel.InsertShiftDirection for details.
          type: '"Down" | "Right"'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.Range#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="excel!Excel.Interfaces.RangeLoadOptions:interface" />'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.Range#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.Range#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: select()
    uid: 'excel!Excel.Range#select:member(1)'
    package: excel!
    fullName: select()
    summary: >-
      Selects the specified range in the Excel UI.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'set(properties, options)'
    uid: 'excel!Excel.Range#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: >-
      This method has the following additional signature:


      `set(properties: Excel.Range): void`


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/multiple-property-set.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });

      ```

      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/multiple-property-set.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.RangeUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: '<xref uid="excel!Excel.Interfaces.RangeUpdateData:interface" />'
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.Range#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.Range): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.Range:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.Range#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Excel.Range object is
      an API object, the `toJSON` method returns a plain JavaScript object
      (typed as `Excel.Interfaces.RangeData`<!-- -->) that contains shallow
      copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.RangeData:interface" />'
        description: ''
  - name: track()
    uid: 'excel!Excel.Range#track:member(1)'
    package: excel!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this
      object across `.sync` calls and outside the sequential execution of a
      ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: untrack()
    uid: 'excel!Excel.Range#untrack:member(1)'
    package: excel!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked
      objects slows down the host application, so please remember to free any
      objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: |-


          #### Examples

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
