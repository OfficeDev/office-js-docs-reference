### YamlMime:TSType
name: Word.Section
uid: 'word!Word.Section:class'
package: word!
fullName: Word.Section
summary: Represents a section in a Word document.
remarks: >-
  \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```typescript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-section-breaks.yaml

  // Inserts a section break on the next page.

  await Word.run(async (context) => {
    const body = context.document.body;
    body.insertBreak(Word.BreakType.sectionNext, Word.InsertLocation.end);

    await context.sync();

    console.log("Inserted section break on next page");
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: body
    uid: 'word!Word.Section#body:member'
    package: word!
    fullName: body
    summary: Gets the body object of the section. This does not include the header/footer and other section metadata.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly body: Word.Body;'
      return:
        type: '<xref uid="word!Word.Body:class" />'
  - name: context
    uid: 'word!Word.Section#context:member'
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="word!Word.RequestContext:class" />'
methods:
  - name: getFooter(type)
    uid: 'word!Word.Section#getFooter:member(1)'
    package: word!
    fullName: getFooter(type)
    summary: Gets one of the section's footers.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {
          
          // Create a proxy sectionsCollection object.
          const mySections = context.document.sections;
          
          // Queue a command to load the sections.
          mySections.load('body/style');
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          await context.sync();
              
          // Create a proxy object the primary footer of the first section.
          // Note that the footer is a body object.
          const myFooter = mySections.items[0].getFooter(Word.HeaderFooterType.primary);
          
          // Queue a command to insert text at the end of the footer.
          myFooter.insertText("This is a footer.", Word.InsertLocation.end);
          
          // Queue a command to wrap the header in a content control.
          myFooter.insertContentControl();
                                  
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          await context.sync();
          console.log("Added a footer to the first section.");   
      });  
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFooter(type: Word.HeaderFooterType): Word.Body;'
      parameters:
        - id: type
          description: 'Required. The type of footer to return. This value must be: ''Primary'', ''FirstPage'', or ''EvenPages''.'
          type: '<xref uid="word!Word.HeaderFooterType:enum" />'
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
  - name: getFooter(typeString)
    uid: 'word!Word.Section#getFooter:member(2)'
    package: word!
    fullName: getFooter(typeString)
    summary: Gets one of the section's footers.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-header-and-footer.yaml

      await Word.run(async (context) => {
        context.document.sections
          .getFirst()
          .getFooter("Primary")
          .insertParagraph("This is a primary footer.", "End");

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFooter(typeString: "Primary" | "FirstPage" | "EvenPages"): Word.Body;'
      parameters:
        - id: typeString
          description: 'Required. The type of footer to return. This value must be: ''Primary'', ''FirstPage'', or ''EvenPages''.'
          type: '"Primary" | "FirstPage" | "EvenPages"'
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
  - name: getHeader(type)
    uid: 'word!Word.Section#getHeader:member(1)'
    package: word!
    fullName: getHeader(type)
    summary: Gets one of the section's headers.
    remarks: >-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-header-and-footer.yaml

      await Word.run(async (context) => {
        context.document.sections
          .getFirst()
          .getHeader(Word.HeaderFooterType.primary)
          .insertParagraph("This is a primary header.", "End");

        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHeader(type: Word.HeaderFooterType): Word.Body;'
      parameters:
        - id: type
          description: 'Required. The type of header to return. This value must be: ''Primary'', ''FirstPage'', or ''EvenPages''.'
          type: '<xref uid="word!Word.HeaderFooterType:enum" />'
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
  - name: getHeader(typeString)
    uid: 'word!Word.Section#getHeader:member(2)'
    package: word!
    fullName: getHeader(typeString)
    summary: Gets one of the section's headers.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {
          
          // Create a proxy sectionsCollection object.
          const mySections = context.document.sections;
          
          // Queue a command to load the sections.
          mySections.load('body/style');
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          await context.sync();
          
          // Create a proxy object the primary header of the first section.
          // Note that the header is a body object.
          const myHeader = mySections.items[0].getHeader("Primary");
          
          // Queue a command to insert text at the end of the header.
          myHeader.insertText("This is a header.", Word.InsertLocation.end);
          
          // Queue a command to wrap the header in a content control.
          myHeader.insertContentControl();
                                  
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          await context.sync();
          console.log("Added a header to the first section.");
      });  
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHeader(typeString: "Primary" | "FirstPage" | "EvenPages"): Word.Body;'
      parameters:
        - id: typeString
          description: 'Required. The type of header to return. This value must be: ''Primary'', ''FirstPage'', or ''EvenPages''.'
          type: '"Primary" | "FirstPage" | "EvenPages"'
      return:
        type: '<xref uid="word!Word.Body:class" />'
        description: ''
  - name: getNext()
    uid: 'word!Word.Section#getNext:member(1)'
    package: word!
    fullName: getNext()
    summary: Gets the next section. Throws an `ItemNotFound` error if this section is the last one.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNext(): Word.Section;'
      return:
        type: '<xref uid="word!Word.Section:class" />'
        description: ''
  - name: getNextOrNullObject()
    uid: 'word!Word.Section#getNextOrNullObject:member(1)'
    package: word!
    fullName: getNextOrNullObject()
    summary: >-
      Gets the next section. If this section is the last one, then this method will return an object with its
      `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNextOrNullObject(): Word.Section;'
      return:
        type: '<xref uid="word!Word.Section:class" />'
        description: ''
  - name: load(options)
    uid: 'word!Word.Section#load:member(1)'
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.SectionLoadOptions): Word.Section;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="word!Word.Interfaces.SectionLoadOptions:interface" />'
      return:
        type: '<xref uid="word!Word.Section:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'word!Word.Section#load:member(2)'
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Section;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="word!Word.Section:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'word!Word.Section#load:member(3)'
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Section;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="word!Word.Section:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'word!Word.Section#set:member(1)'
    package: word!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.SectionUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="word!Word.Interfaces.SectionUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'word!Word.Section#set:member(2)'
    package: word!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Section): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="word!Word.Section:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'word!Word.Section#toJSON:member(1)'
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Word.Section object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.SectionData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.SectionData;'
      return:
        type: '<xref uid="word!Word.Interfaces.SectionData:interface" />'
        description: ''
  - name: track()
    uid: 'word!Word.Section#track:member(1)'
    package: word!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://docs.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Section;'
      return:
        type: '<xref uid="word!Word.Section:class" />'
        description: ''
  - name: untrack()
    uid: 'word!Word.Section#untrack:member(1)'
    package: word!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://docs.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You will need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Section;'
      return:
        type: '<xref uid="word!Word.Section:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
