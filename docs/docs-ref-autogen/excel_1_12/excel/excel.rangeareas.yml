### YamlMime:TSType
name: Excel.RangeAreas
uid: 'excel!Excel.RangeAreas:class'
package: excel!
fullName: Excel.RangeAreas
summary: >-
  RangeAreas represents a collection of one or more rectangular ranges in the
  same worksheet. To learn how to use discontinguous ranges, read [Work with
  multiple ranges simultaneously in Excel
  add-ins](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-multiple-ranges)<!--
  -->.


  \[ [API set: ExcelApi
  1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: address
    uid: 'excel!Excel.RangeAreas#address:member'
    package: excel!
    fullName: address
    summary: >-
      Returns the RangeAreas reference in A1-style. Address value will contain
      the worksheet name for each rectangular block of cells (e.g.,
      "Sheet1!A1:B4, Sheet1!D1:D4").


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly address: string;'
      return:
        type: string
  - name: addressLocal
    uid: 'excel!Excel.RangeAreas#addressLocal:member'
    package: excel!
    fullName: addressLocal
    summary: >-
      Returns the RangeAreas reference in the user locale.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type: string
  - name: areaCount
    uid: 'excel!Excel.RangeAreas#areaCount:member'
    package: excel!
    fullName: areaCount
    summary: >-
      Returns the number of rectangular ranges that comprise this RangeAreas
      object.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly areaCount: number;'
      return:
        type: number
  - name: areas
    uid: 'excel!Excel.RangeAreas#areas:member'
    package: excel!
    fullName: areas
    summary: >-
      Returns a collection of rectangular ranges that comprise this RangeAreas
      object.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly areas: Excel.RangeCollection;'
      return:
        type: '<xref uid="excel!Excel.RangeCollection:class" />'
  - name: cellCount
    uid: 'excel!Excel.RangeAreas#cellCount:member'
    package: excel!
    fullName: cellCount
    summary: >-
      Returns the number of cells in the RangeAreas object, summing up the cell
      counts of all of the individual rectangular ranges. Returns -1 if the cell
      count exceeds 2^31-1 (2,147,483,647).


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type: number
  - name: conditionalFormats
    uid: 'excel!Excel.RangeAreas#conditionalFormats:member'
    package: excel!
    fullName: conditionalFormats
    summary: >-
      Returns a collection of ConditionalFormats that intersect with any cells
      in this RangeAreas object.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type: '<xref uid="excel!Excel.ConditionalFormatCollection:class" />'
  - name: context
    uid: 'excel!Excel.RangeAreas#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: dataValidation
    uid: 'excel!Excel.RangeAreas#dataValidation:member'
    package: excel!
    fullName: dataValidation
    summary: >-
      Returns a dataValidation object for all ranges in the RangeAreas.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type: '<xref uid="excel!Excel.DataValidation:class" />'
  - name: format
    uid: 'excel!Excel.RangeAreas#format:member'
    package: excel!
    fullName: format
    summary: >-
      Returns a RangeFormat object, encapsulating the the font, fill, borders,
      alignment, and other properties for all ranges in the RangeAreas object.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type: '<xref uid="excel!Excel.RangeFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml

          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with formulas.
              const formulaRanges = usedRange.getSpecialCells("Formulas");
              formulaRanges.format.fill.color = "lightgreen";

              await context.sync();
          });

          ```
  - name: isEntireColumn
    uid: 'excel!Excel.RangeAreas#isEntireColumn:member'
    package: excel!
    fullName: isEntireColumn
    summary: >-
      Specifies if all the ranges on this RangeAreas object represent entire
      columns (e.g., "A:C, Q:Z").


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type: boolean
  - name: isEntireRow
    uid: 'excel!Excel.RangeAreas#isEntireRow:member'
    package: excel!
    fullName: isEntireRow
    summary: >-
      Specifies if all the ranges on this RangeAreas object represent entire
      rows (e.g., "1:3, 5:7").


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type: boolean
  - name: style
    uid: 'excel!Excel.RangeAreas#style:member'
    package: excel!
    fullName: style
    summary: >-
      Represents the style for all ranges in this RangeAreas object. If the
      styles of the cells are inconsistent, null will be returned. For custom
      styles, the style name will be returned. For built-in styles, a string
      representing a value in the BuiltInStyle enum will be returned.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: string;'
      return:
        type: string
  - name: worksheet
    uid: 'excel!Excel.RangeAreas#worksheet:member'
    package: excel!
    fullName: worksheet
    summary: >-
      Returns the worksheet for the current RangeAreas.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
methods:
  - name: calculate()
    uid: 'excel!Excel.RangeAreas#calculate:member(1)'
    package: excel!
    fullName: calculate()
    summary: >-
      Calculates all cells in the RangeAreas.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(): void;'
      return:
        type: void
        description: ''
  - name: clear(applyTo)
    uid: 'excel!Excel.RangeAreas#clear:member(1)'
    package: excel!
    fullName: clear(applyTo)
    summary: >-
      Clears values, format, fill, border, etc on each of the areas that
      comprise this RangeAreas object.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      parameters:
        - id: applyTo
          description: >-
            Optional. Determines the type of clear action. See
            Excel.ClearApplyTo for details. Default is "All".
          type: '<xref uid="excel!Excel.ClearApplyTo:enum" />'
      return:
        type: void
        description: ''
  - name: clear(applyToString)
    uid: 'excel!Excel.RangeAreas#clear:member(2)'
    package: excel!
    fullName: clear(applyToString)
    summary: >-
      Clears values, format, fill, border, etc on each of the areas that
      comprise this RangeAreas object.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" |
        "RemoveHyperlinks"): void;
      parameters:
        - id: applyToString
          description: >-
            Optional. Determines the type of clear action. See
            Excel.ClearApplyTo for details. Default is "All".
          type: '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
      return:
        type: void
        description: ''
  - name: convertDataTypeToText()
    uid: 'excel!Excel.RangeAreas#convertDataTypeToText:member(1)'
    package: excel!
    fullName: convertDataTypeToText()
    summary: >-
      Converts all cells in the RangeAreas with datatypes into text.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type: void
        description: ''
  - name: 'convertToLinkedDataType(serviceID, languageCulture)'
    uid: 'excel!Excel.RangeAreas#convertToLinkedDataType:member(1)'
    package: excel!
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    summary: >-
      Converts all cells in the RangeAreas into linked datatype.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        convertToLinkedDataType(serviceID: number, languageCulture: string):
        void;
      parameters:
        - id: serviceID
          description: The Service ID which will be used to query the data.
          type: number
        - id: languageCulture
          description: Language Culture to query the service for.
          type: string
      return:
        type: void
        description: ''
  - name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    uid: 'excel!Excel.RangeAreas#copyFrom:member(1)'
    package: excel!
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the
      current RangeAreas. The destination rangeAreas can be a different size
      than the source range or RangeAreas. The destination will be expanded
      automatically if it is smaller than the source.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        copyFrom(sourceRange: Range | RangeAreas | string, copyType?:
        Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source
            RangeAreas has multiple ranges, their form must able to be created
            by removing full rows or columns from a rectangular range.
          type: >-
            <xref uid="excel!Excel.Range:class" /> | <xref
            uid="excel!Excel.RangeAreas:class" /> | string
        - id: copyType
          description: The type of cell data or formatting to copy over. Default is "All".
          type: '<xref uid="excel!Excel.RangeCopyType:enum" />'
        - id: skipBlanks
          description: >-
            True if to skip blank cells in the source range or RangeAreas.
            Default is false.
          type: boolean
        - id: transpose
          description: >-
            True if to transpose the cells in the destination RangeAreas.
            Default is false.
          type: boolean
      return:
        type: void
        description: ''
  - name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    uid: 'excel!Excel.RangeAreas#copyFrom:member(2)'
    package: excel!
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the
      current RangeAreas. The destination rangeAreas can be a different size
      than the source range or RangeAreas. The destination will be expanded
      automatically if it is smaller than the source.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?:
        "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean,
        transpose?: boolean): void;
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source
            RangeAreas has multiple ranges, their form must able to be created
            by removing full rows or columns from a rectangular range.
          type: >-
            <xref uid="excel!Excel.Range:class" /> | <xref
            uid="excel!Excel.RangeAreas:class" /> | string
        - id: copyTypeString
          description: The type of cell data or formatting to copy over. Default is "All".
          type: '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: >-
            True if to skip blank cells in the source range or RangeAreas.
            Default is false.
          type: boolean
        - id: transpose
          description: >-
            True if to transpose the cells in the destination RangeAreas.
            Default is false.
          type: boolean
      return:
        type: void
        description: ''
  - name: getEntireColumn()
    uid: 'excel!Excel.RangeAreas#getEntireColumn:member(1)'
    package: excel!
    fullName: getEntireColumn()
    summary: >-
      Returns a RangeAreas object that represents the entire columns of the
      RangeAreas (for example, if the current RangeAreas represents cells
      "B4:E11, H2", it returns a RangeAreas that represents columns "B:E, H:H").


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireColumn(): Excel.RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: getEntireRow()
    uid: 'excel!Excel.RangeAreas#getEntireRow:member(1)'
    package: excel!
    fullName: getEntireRow()
    summary: >-
      Returns a RangeAreas object that represents the entire rows of the
      RangeAreas (for example, if the current RangeAreas represents cells
      "B4:E11", it returns a RangeAreas that represents rows "4:11").


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireRow(): Excel.RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: getIntersection(anotherRange)
    uid: 'excel!Excel.RangeAreas#getIntersection:member(1)'
    package: excel!
    fullName: getIntersection(anotherRange)
    summary: >-
      Returns the RangeAreas object that represents the intersection of the
      given ranges or RangeAreas. If no intersection is found, an ItemNotFound
      error will be thrown.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getIntersection(anotherRange: Range | RangeAreas | string):
        Excel.RangeAreas;
      parameters:
        - id: anotherRange
          description: >-
            The range, RangeAreas object or range address that will be used to
            determine the intersection.
          type: >-
            <xref uid="excel!Excel.Range:class" /> | <xref
            uid="excel!Excel.RangeAreas:class" /> | string
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: getIntersectionOrNullObject(anotherRange)
    uid: 'excel!Excel.RangeAreas#getIntersectionOrNullObject:member(1)'
    package: excel!
    fullName: getIntersectionOrNullObject(anotherRange)
    summary: >-
      Returns the RangeAreas object that represents the intersection of the
      given ranges or RangeAreas. If no intersection is found, a null object is
      returned.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getIntersectionOrNullObject(anotherRange: Range | RangeAreas | string):
        Excel.RangeAreas;
      parameters:
        - id: anotherRange
          description: >-
            The range, RangeAreas, or address that will be used to determine the
            intersection.
          type: >-
            <xref uid="excel!Excel.Range:class" /> | <xref
            uid="excel!Excel.RangeAreas:class" /> | string
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    uid: 'excel!Excel.RangeAreas#getOffsetRangeAreas:member(1)'
    package: excel!
    fullName: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    summary: >-
      Returns an RangeAreas object that is shifted by the specific row and
      column offset. The dimension of the returned RangeAreas will match the
      original object. If the resulting RangeAreas is forced outside the bounds
      of the worksheet grid, an error will be thrown.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getOffsetRangeAreas(rowOffset: number, columnOffset: number):
        Excel.RangeAreas;
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the
            RangeAreas is to be offset. Positive values are offset downward, and
            negative values are offset upward.
          type: number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the
            RangeAreas is to be offset. Positive values are offset to the right,
            and negative values are offset to the left.
          type: number
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: 'getSpecialCells(cellType, cellValueType)'
    uid: 'excel!Excel.RangeAreas#getSpecialCells:member(1)'
    package: excel!
    fullName: 'getSpecialCells(cellType, cellValueType)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the
      specified type and value. Throws an error if no special cells are found
      that match the criteria.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?:
        Excel.SpecialCellValueType): Excel.RangeAreas;
      parameters:
        - id: cellType
          description: The type of cells to include.
          type: '<xref uid="excel!Excel.SpecialCellType:enum" />'
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used
            to determine which types of cells to include in the result. These
            values can be combined together to return more than one type. The
            default is to select all constants or formulas, no matter what the
            type.
          type: '<xref uid="excel!Excel.SpecialCellValueType:enum" />'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: 'getSpecialCells(cellTypeString, cellValueType)'
    uid: 'excel!Excel.RangeAreas#getSpecialCells:member(2)'
    package: excel!
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the
      specified type and value. Throws an error if no special cells are found
      that match the criteria.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations"
        | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" |
        "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" |
        "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber"
        | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" |
        "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" |
        "NumbersText" | "Text"): Excel.RangeAreas;
      parameters:
        - id: cellTypeString
          description: The type of cells to include.
          type: >-
            "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" |
            "Formulas" | "SameConditionalFormat" | "SameDataValidation" |
            "Visible"
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used
            to determine which types of cells to include in the result. These
            values can be combined together to return more than one type. The
            default is to select all constants or formulas, no matter what the
            type.
          type: >-
            "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText"
            | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" |
            "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText"
            | "Numbers" | "NumbersText" | "Text"
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    uid: 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(1)'
    package: excel!
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the
      specified type and value. Returns a null object if no special cells are
      found that match the criteria.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType,
        cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;
      parameters:
        - id: cellType
          description: The type of cells to include.
          type: '<xref uid="excel!Excel.SpecialCellType:enum" />'
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used
            to determine which types of cells to include in the result. These
            values can be combined together to return more than one type. The
            default is to select all constants or formulas, no matter what the
            type.
          type: '<xref uid="excel!Excel.SpecialCellValueType:enum" />'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    uid: 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(2)'
    package: excel!
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the
      specified type and value. Returns a null object if no special cells are
      found that match the criteria.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" |
        "DataValidations" | "Blanks" | "Constants" | "Formulas" |
        "SameConditionalFormat" | "SameDataValidation" | "Visible",
        cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" |
        "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" |
        "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" |
        "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"):
        Excel.RangeAreas;
      parameters:
        - id: cellTypeString
          description: The type of cells to include.
          type: >-
            "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" |
            "Formulas" | "SameConditionalFormat" | "SameDataValidation" |
            "Visible"
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used
            to determine which types of cells to include in the result. These
            values can be combined together to return more than one type. The
            default is to select all constants or formulas, no matter what the
            type.
          type: >-
            "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText"
            | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" |
            "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText"
            | "Numbers" | "NumbersText" | "Text"
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: getTables(fullyContained)
    uid: 'excel!Excel.RangeAreas#getTables:member(1)'
    package: excel!
    fullName: getTables(fullyContained)
    summary: >-
      Returns a scoped collection of tables that overlap with any range in this
      RangeAreas object.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      parameters:
        - id: fullyContained
          description: >-
            If true, returns only tables that are fully contained within the
            range bounds. Default is false.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.TableScopedCollection:class" />'
        description: ''
  - name: getUsedRangeAreas(valuesOnly)
    uid: 'excel!Excel.RangeAreas#getUsedRangeAreas:member(1)'
    package: excel!
    fullName: getUsedRangeAreas(valuesOnly)
    summary: >-
      Returns the used RangeAreas that comprises all the used areas of
      individual rectangular ranges in the RangeAreas object. If there are no
      used cells within the RangeAreas, the ItemNotFound error will be thrown.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRangeAreas(valuesOnly?: boolean): Excel.RangeAreas;'
      parameters:
        - id: valuesOnly
          description: >-
            Whether to only consider cells with values as used cells. Default is
            false.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: getUsedRangeAreasOrNullObject(valuesOnly)
    uid: 'excel!Excel.RangeAreas#getUsedRangeAreasOrNullObject:member(1)'
    package: excel!
    fullName: getUsedRangeAreasOrNullObject(valuesOnly)
    summary: >-
      Returns the used RangeAreas that comprises all the used areas of
      individual rectangular ranges in the RangeAreas object. If there are no
      used cells within the RangeAreas, a null object will be returned.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRangeAreasOrNullObject(valuesOnly?: boolean): Excel.RangeAreas;'
      parameters:
        - id: valuesOnly
          description: Whether to only consider cells with values as used cells.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.RangeAreas#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.RangeAreasLoadOptions):
        Excel.RangeAreas;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="excel!Excel.Interfaces.RangeAreasLoadOptions:interface"
            />
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.RangeAreas#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.RangeAreas;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.RangeAreas#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.RangeAreas;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'excel!Excel.RangeAreas#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.RangeAreas): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.RangeAreasUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: '<xref uid="excel!Excel.Interfaces.RangeAreasUpdateData:interface" />'
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.RangeAreas#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.RangeAreas): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.RangeAreas:class" />'
      return:
        type: void
        description: ''
  - name: setDirty()
    uid: 'excel!Excel.RangeAreas#setDirty:member(1)'
    package: excel!
    fullName: setDirty()
    summary: >-
      Sets the RangeAreas to be recalculated when the next recalculation occurs.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setDirty(): void;'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.RangeAreas#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Excel.RangeAreas object
      is an API object, the `toJSON` method returns a plain JavaScript object
      (typed as `Excel.Interfaces.RangeAreasData`<!-- -->) that contains shallow
      copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeAreasData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.RangeAreasData:interface" />'
        description: ''
  - name: track()
    uid: 'excel!Excel.RangeAreas#track:member(1)'
    package: excel!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in
      the document. This call is a shorthand for
      `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this
      object across `.sync` calls and outside the sequential execution of a
      ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to
      the tracked object collection when the object was first created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Excel.RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: untrack()
    uid: 'excel!Excel.RangeAreas#untrack:member(1)'
    package: excel!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been
      tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked
      objects slows down the host application, so please remember to free any
      objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Excel.RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
