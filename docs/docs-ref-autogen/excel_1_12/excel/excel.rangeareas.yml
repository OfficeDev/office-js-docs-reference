### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.RangeAreas:class'
    summary: >-
      RangeAreas represents a collection of one or more rectangular ranges in the same worksheet. To learn how to use
      discontinguous ranges, read [Work with multiple ranges simultaneously in Excel
      add-ins](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-multiple-ranges)<!-- -->.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.RangeAreas
    fullName: Excel.RangeAreas
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.RangeAreas#address:member'
      - 'excel!Excel.RangeAreas#addressLocal:member'
      - 'excel!Excel.RangeAreas#areaCount:member'
      - 'excel!Excel.RangeAreas#areas:member'
      - 'excel!Excel.RangeAreas#calculate:member(1)'
      - 'excel!Excel.RangeAreas#cellCount:member'
      - 'excel!Excel.RangeAreas#clear:member(1)'
      - 'excel!Excel.RangeAreas#clear:member(2)'
      - 'excel!Excel.RangeAreas#conditionalFormats:member'
      - 'excel!Excel.RangeAreas#context:member'
      - 'excel!Excel.RangeAreas#convertDataTypeToText:member(1)'
      - 'excel!Excel.RangeAreas#convertToLinkedDataType:member(1)'
      - 'excel!Excel.RangeAreas#copyFrom:member(1)'
      - 'excel!Excel.RangeAreas#copyFrom:member(2)'
      - 'excel!Excel.RangeAreas#dataValidation:member'
      - 'excel!Excel.RangeAreas#format:member'
      - 'excel!Excel.RangeAreas#getEntireColumn:member(1)'
      - 'excel!Excel.RangeAreas#getEntireRow:member(1)'
      - 'excel!Excel.RangeAreas#getIntersection:member(1)'
      - 'excel!Excel.RangeAreas#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#getOffsetRangeAreas:member(1)'
      - 'excel!Excel.RangeAreas#getSpecialCells:member(1)'
      - 'excel!Excel.RangeAreas#getSpecialCells:member(2)'
      - 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(2)'
      - 'excel!Excel.RangeAreas#getTables:member(1)'
      - 'excel!Excel.RangeAreas#getUsedRangeAreas:member(1)'
      - 'excel!Excel.RangeAreas#getUsedRangeAreasOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#isEntireColumn:member'
      - 'excel!Excel.RangeAreas#isEntireRow:member'
      - 'excel!Excel.RangeAreas#load:member(1)'
      - 'excel!Excel.RangeAreas#load:member(2)'
      - 'excel!Excel.RangeAreas#load:member(3)'
      - 'excel!Excel.RangeAreas#set:member(1)'
      - 'excel!Excel.RangeAreas#set:member(2)'
      - 'excel!Excel.RangeAreas#setDirty:member(1)'
      - 'excel!Excel.RangeAreas#style:member'
      - 'excel!Excel.RangeAreas#toJSON:member(1)'
      - 'excel!Excel.RangeAreas#track:member(1)'
      - 'excel!Excel.RangeAreas#untrack:member(1)'
      - 'excel!Excel.RangeAreas#worksheet:member'
  - uid: 'excel!Excel.RangeAreas#address:member'
    summary: >-
      Returns the RangeAreas reference in A1-style. Address value will contain the worksheet name for each rectangular
      block of cells (e.g., "Sheet1!A1:B4, Sheet1!D1:D4").


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#addressLocal:member'
    summary: |-
      Returns the RangeAreas reference in the user locale.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#areaCount:member'
    summary: |-
      Returns the number of rectangular ranges that comprise this RangeAreas object.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: areaCount
    fullName: areaCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly areaCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.RangeAreas#areas:member'
    summary: |-
      Returns a collection of rectangular ranges that comprise this RangeAreas object.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: areas
    fullName: areas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly areas: Excel.RangeCollection;'
      return:
        type:
          - 'excel!Excel.RangeCollection:class'
  - uid: 'excel!Excel.RangeAreas#calculate:member(1)'
    summary: |-
      Calculates all cells in the RangeAreas.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#cellCount:member'
    summary: >-
      Returns the number of cells in the RangeAreas object, summing up the cell counts of all of the individual
      rectangular ranges. Returns -1 if the cell count exceeds 2^31-1 (2,147,483,647).


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.RangeAreas#clear:member(1)'
    summary: |-
      Clears values, format, fill, border, etc on each of the areas that comprise this RangeAreas object.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: Optional. Determines the type of clear action. See Excel.ClearApplyTo for details. Default is "All".
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.RangeAreas#clear:member(2)'
    summary: |-
      Clears values, format, fill, border, etc on each of the areas that comprise this RangeAreas object.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: Optional. Determines the type of clear action. See Excel.ClearApplyTo for details. Default is "All".
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.RangeAreas#conditionalFormats:member'
    summary: |-
      Returns a collection of ConditionalFormats that intersect with any cells in this RangeAreas object.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
  - uid: 'excel!Excel.RangeAreas#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.RangeAreas#convertDataTypeToText:member(1)'
    summary: |-
      Converts all cells in the RangeAreas with datatypes into text.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#convertToLinkedDataType:member(1)'
    summary: |-
      Converts all cells in the RangeAreas into linked datatype.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: The Service ID which will be used to query the data.
          type:
            - number
        - id: languageCulture
          description: Language Culture to query the service for.
          type:
            - string
  - uid: 'excel!Excel.RangeAreas#copyFrom:member(1)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the current RangeAreas. The destination
      rangeAreas can be a different size than the source range or RangeAreas. The destination will be expanded
      automatically if it is smaller than the source.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean,
        transpose?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must
            able to be created by removing full rows or columns from a rectangular range.
          type:
            - 'excel!Excel.RangeAreas#copyFrom~0:complex'
        - id: copyType
          description: The type of cell data or formatting to copy over. Default is "All".
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: True if to skip blank cells in the source range or RangeAreas. Default is false.
          type:
            - boolean
        - id: transpose
          description: True if to transpose the cells in the destination RangeAreas. Default is false.
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#copyFrom:member(2)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the current RangeAreas. The destination
      rangeAreas can be a different size than the source range or RangeAreas. The destination will be expanded
      automatically if it is smaller than the source.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats",
        skipBlanks?: boolean, transpose?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must
            able to be created by removing full rows or columns from a rectangular range.
          type:
            - 'excel!Excel.RangeAreas#copyFrom~1:complex'
        - id: copyTypeString
          description: The type of cell data or formatting to copy over. Default is "All".
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: True if to skip blank cells in the source range or RangeAreas. Default is false.
          type:
            - boolean
        - id: transpose
          description: True if to transpose the cells in the destination RangeAreas. Default is false.
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#dataValidation:member'
    summary: |-
      Returns a dataValidation object for all ranges in the RangeAreas.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.RangeAreas#format:member'
    summary: >-
      Returns a RangeFormat object, encapsulating the the font, fill, borders, alignment, and other properties for all
      ranges in the RangeAreas object.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml

          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with formulas.
              const formulaRanges = usedRange.getSpecialCells("Formulas");
              formulaRanges.format.fill.color = "lightgreen";

              await context.sync();
          });

          ```
  - uid: 'excel!Excel.RangeAreas#getEntireColumn:member(1)'
    summary: >-
      Returns a RangeAreas object that represents the entire columns of the RangeAreas (for example, if the current
      RangeAreas represents cells "B4:E11, H2", it returns a RangeAreas that represents columns "B:E, H:H").


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.RangeAreas#getEntireRow:member(1)'
    summary: >-
      Returns a RangeAreas object that represents the entire rows of the RangeAreas (for example, if the current
      RangeAreas represents cells "B4:E11", it returns a RangeAreas that represents rows "4:11").


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.RangeAreas#getIntersection:member(1)'
    summary: >-
      Returns the RangeAreas object that represents the intersection of the given ranges or RangeAreas. If no
      intersection is found, an ItemNotFound error will be thrown.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | RangeAreas | string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: anotherRange
          description: 'The range, RangeAreas object or range address that will be used to determine the intersection.'
          type:
            - 'excel!Excel.RangeAreas#getIntersection~0:complex'
  - uid: 'excel!Excel.RangeAreas#getIntersectionOrNullObject:member(1)'
    summary: >-
      Returns the RangeAreas object that represents the intersection of the given ranges or RangeAreas. If no
      intersection is found, a null object is returned.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | RangeAreas | string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: anotherRange
          description: 'The range, RangeAreas, or address that will be used to determine the intersection.'
          type:
            - 'excel!Excel.RangeAreas#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.RangeAreas#getOffsetRangeAreas:member(1)'
    summary: >-
      Returns an RangeAreas object that is shifted by the specific row and column offset. The dimension of the returned
      RangeAreas will match the original object. If the resulting RangeAreas is forced outside the bounds of the
      worksheet grid, an error will be thrown.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    fullName: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRangeAreas(rowOffset: number, columnOffset: number): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the RangeAreas is to be offset. Positive values are
            offset downward, and negative values are offset upward.
          type:
            - number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the RangeAreas is to be offset. Positive values
            are offset to the right, and negative values are offset to the left.
          type:
            - number
  - uid: 'excel!Excel.RangeAreas#getSpecialCells:member(1)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the specified type and value. Throws an error
      if no special cells are found that match the criteria.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: The type of cells to include.
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.RangeAreas#getSpecialCells:member(2)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the specified type and value. Throws an error
      if no special cells are found that match the criteria.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" |
        "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" |
        "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" |
        "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: The type of cells to include.
          type:
            - >-
              "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" |
              "SameDataValidation" | "Visible"
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - >-
              "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" |
              "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" |
              "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"
  - uid: 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(1)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the specified type and value. Returns a null
      object if no special cells are found that match the criteria.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType):
        Excel.RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: The type of cells to include.
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(2)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the specified type and value. Returns a null
      object if no special cells are found that match the criteria.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" |
        "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" |
        "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" |
        "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" |
        "NumbersText" | "Text"): Excel.RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: The type of cells to include.
          type:
            - >-
              "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" |
              "SameDataValidation" | "Visible"
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - >-
              "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" |
              "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" |
              "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"
  - uid: 'excel!Excel.RangeAreas#getTables:member(1)'
    summary: |-
      Returns a scoped collection of tables that overlap with any range in this RangeAreas object.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: 'If true, returns only tables that are fully contained within the range bounds. Default is false.'
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#getUsedRangeAreas:member(1)'
    summary: >-
      Returns the used RangeAreas that comprises all the used areas of individual rectangular ranges in the RangeAreas
      object. If there are no used cells within the RangeAreas, the ItemNotFound error will be thrown.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getUsedRangeAreas(valuesOnly)
    fullName: getUsedRangeAreas(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeAreas(valuesOnly?: boolean): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: Whether to only consider cells with values as used cells. Default is false.
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#getUsedRangeAreasOrNullObject:member(1)'
    summary: >-
      Returns the used RangeAreas that comprises all the used areas of individual rectangular ranges in the RangeAreas
      object. If there are no used cells within the RangeAreas, a null object will be returned.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getUsedRangeAreasOrNullObject(valuesOnly)
    fullName: getUsedRangeAreasOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeAreasOrNullObject(valuesOnly?: boolean): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: Whether to only consider cells with values as used cells.
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#isEntireColumn:member'
    summary: |-
      Specifies if all the ranges on this RangeAreas object represent entire columns (e.g., "A:C, Q:Z").

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.RangeAreas#isEntireRow:member'
    summary: |-
      Specifies if all the ranges on this RangeAreas object represent entire rows (e.g., "1:3, 5:7").

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.RangeAreas#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeAreasLoadOptions): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type:
            - 'excel!Excel.Interfaces.RangeAreasLoadOptions:interface'
  - uid: 'excel!Excel.RangeAreas#load:member(2)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.RangeAreas#load:member(3)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.RangeAreas#set:member(1)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.RangeAreas): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeAreasUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - 'excel!Excel.Interfaces.RangeAreasUpdateData:interface'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - 'office!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.RangeAreas#set:member(2)'
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.RangeAreas): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.RangeAreas:class'
  - uid: 'excel!Excel.RangeAreas#setDirty:member(1)'
    summary: |-
      Sets the RangeAreas to be recalculated when the next recalculation occurs.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#style:member'
    summary: >-
      Represents the style for all ranges in this RangeAreas object. If the styles of the cells are inconsistent, null
      will be returned. For custom styles, the style name will be returned. For built-in styles, a string representing a
      value in the BuiltInStyle enum will be returned.


      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#toJSON:member(1)'
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.RangeAreas object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Excel.Interfaces.RangeAreasData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeAreasData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeAreasData:interface'
        description: ''
  - uid: 'excel!Excel.RangeAreas#track:member(1)'
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this object across `.sync` calls and
      outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to the tracked object collection when the
      object was first created.
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.RangeAreas#untrack:member(1)'
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked objects slows down the host application,
      so please remember to free any objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.RangeAreas#worksheet:member'
    summary: |-
      Returns the worksheet for the current RangeAreas.

      \[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RangeCollection:class'
    name: Excel.RangeCollection
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.RangeAreas#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: Excel.RangeCopyType
  - uid: 'excel!Excel.RangeAreas#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.RangeAreas#getIntersection~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeAreas#getIntersectionOrNullObject~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:class'
    name: Excel.TableScopedCollection
  - uid: 'excel!Excel.Interfaces.RangeAreasLoadOptions:interface'
    name: Excel.Interfaces.RangeAreasLoadOptions
  - uid: 'excel!Excel.Interfaces.RangeAreasUpdateData:interface'
    name: Interfaces.RangeAreasUpdateData
  - uid: 'office!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.RangeAreasData:interface'
    name: Excel.Interfaces.RangeAreasData
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
