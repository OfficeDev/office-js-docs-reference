### YamlMime:TSType
name: Excel.Application
uid: 'excel!Excel.Application:class'
package: excel!
fullName: Excel.Application
summary: >-
  Represents the Excel application that manages the workbook.


  \[ [API set: ExcelApi
  1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: calculationEngineVersion
    uid: 'excel!Excel.Application#calculationEngineVersion:member'
    package: excel!
    fullName: calculationEngineVersion
    summary: >-
      Returns the Excel calculation engine version used for the last full
      recalculation.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly calculationEngineVersion: number;'
      return:
        type: number
  - name: calculationMode
    uid: 'excel!Excel.Application#calculationMode:member'
    package: excel!
    fullName: calculationMode
    summary: >-
      Returns the calculation mode used in the workbook, as defined by the
      constants in Excel.CalculationMode. Possible values are: `Automatic`<!--
      -->, where Excel controls recalculation; `AutomaticExceptTables`<!-- -->,
      where Excel controls recalculation but ignores changes in tables;
      `Manual`<!-- -->, where calculation is done when the user requests it.


      \[ [API set: ExcelApi 1.1 for get, 1.8 for
      set](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        calculationMode: Excel.CalculationMode | "Automatic" |
        "AutomaticExceptTables" | "Manual";
      return:
        type: >-
          <xref uid="excel!Excel.CalculationMode:enum" /> | "Automatic" |
          "AutomaticExceptTables" | "Manual"
  - name: calculationState
    uid: 'excel!Excel.Application#calculationState:member'
    package: excel!
    fullName: calculationState
    summary: >-
      Returns the calculation state of the application. See
      Excel.CalculationState for details.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly calculationState: Excel.CalculationState | "Done" |
        "Calculating" | "Pending";
      return:
        type: >-
          <xref uid="excel!Excel.CalculationState:enum" /> | "Done" |
          "Calculating" | "Pending"
  - name: context
    uid: 'excel!Excel.Application#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: cultureInfo
    uid: 'excel!Excel.Application#cultureInfo:member'
    package: excel!
    fullName: cultureInfo
    summary: >-
      Provides information based on current system culture settings. This
      includes the culture names, number formatting, and other culturally
      dependent settings.


      \[ [API set: ExcelApi
      1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cultureInfo: Excel.CultureInfo;'
      return:
        type: '<xref uid="excel!Excel.CultureInfo:class" />'
  - name: decimalSeparator
    uid: 'excel!Excel.Application#decimalSeparator:member'
    package: excel!
    fullName: decimalSeparator
    summary: >-
      Gets the string used as the decimal separator for numeric values. This is
      based on Excel's local settings.


      \[ [API set: ExcelApi
      1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly decimalSeparator: string;'
      return:
        type: string
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/culture-info.yaml

          await Excel.run(async (context) => {
            context.application.load("decimalSeparator,thousandsSeparator");
            context.application.cultureInfo.numberFormat.load("numberDecimalSeparator,numberGroupSeparator");
            await context.sync();

            // Local settings are set under the "Options > Advanced" menu.
            const localDecimalSeparator = context.application.decimalSeparator;
            const localThousandsSeparator = context.application.thousandsSeparator;

            const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;
            const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;

            console.log("Local character settings: ");
            console.log(`  Local decimal separator: ${localDecimalSeparator}`);
            console.log(`  Local thousands separator: ${localThousandsSeparator}`);

            console.log("System culture settings: ");
            console.log(`  System decimal separator: ${systemDecimalSeparator}`);
            console.log(`  System thousands separator: ${systemThousandsSeparator}`);
            console.log(`  `);

            await context.sync();
          });

          ```
  - name: iterativeCalculation
    uid: 'excel!Excel.Application#iterativeCalculation:member'
    package: excel!
    fullName: iterativeCalculation
    summary: >-
      Returns the Iterative Calculation settings. In Excel on Windows and Mac,
      the settings will apply to the Excel Application. In Excel on the web and
      other platforms, the settings will apply to the active workbook.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly iterativeCalculation: Excel.IterativeCalculation;'
      return:
        type: '<xref uid="excel!Excel.IterativeCalculation:class" />'
  - name: thousandsSeparator
    uid: 'excel!Excel.Application#thousandsSeparator:member'
    package: excel!
    fullName: thousandsSeparator
    summary: >-
      Gets the string used to separate groups of digits to the left of the
      decimal for numeric values. This is based on Excel's local settings.


      \[ [API set: ExcelApi
      1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly thousandsSeparator: string;'
      return:
        type: string
  - name: useSystemSeparators
    uid: 'excel!Excel.Application#useSystemSeparators:member'
    package: excel!
    fullName: useSystemSeparators
    summary: >-
      Specifies if the system separators of Excel are enabled. System separators
      include the decimal separator and thousands separator.


      \[ [API set: ExcelApi
      1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly useSystemSeparators: boolean;'
      return:
        type: boolean
methods:
  - name: calculate(calculationType)
    uid: 'excel!Excel.Application#calculate:member(1)'
    package: excel!
    fullName: calculate(calculationType)
    summary: >-
      Recalculate all currently opened workbooks in Excel.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(calculationType: Excel.CalculationType): void;'
      parameters:
        - id: calculationType
          description: >-
            Specifies the calculation type to use. See Excel.CalculationType for
            details.
          type: '<xref uid="excel!Excel.CalculationType:enum" />'
      return:
        type: void
        description: ''
  - name: calculate(calculationTypeString)
    uid: 'excel!Excel.Application#calculate:member(2)'
    package: excel!
    fullName: calculate(calculationTypeString)
    summary: >-
      Recalculate all currently opened workbooks in Excel.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        calculate(calculationTypeString: "Recalculate" | "Full" |
        "FullRebuild"): void;
      parameters:
        - id: calculationTypeString
          description: >-
            Specifies the calculation type to use. See Excel.CalculationType for
            details.
          type: '"Recalculate" | "Full" | "FullRebuild"'
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) {
              ctx.workbook.application.calculate('Full');
              return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(options)
    uid: 'excel!Excel.Application#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.ApplicationLoadOptions):
        Excel.Application;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="excel!Excel.Interfaces.ApplicationLoadOptions:interface"
            />
      return:
        type: '<xref uid="excel!Excel.Application:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.Application#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Application;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.Application:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) {
              var application = ctx.workbook.application;
              application.load('calculationMode');
              return ctx.sync().then(function() {
                  console.log(application.calculationMode);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.Application#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Application;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.Application:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'excel!Excel.Application#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.Application): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.ApplicationUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: >-
            <xref uid="excel!Excel.Interfaces.ApplicationUpdateData:interface"
            />
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.Application#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.Application): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.Application:class" />'
      return:
        type: void
        description: ''
  - name: suspendApiCalculationUntilNextSync()
    uid: 'excel!Excel.Application#suspendApiCalculationUntilNextSync:member(1)'
    package: excel!
    fullName: suspendApiCalculationUntilNextSync()
    summary: >-
      Suspends calculation until the next "context.sync()" is called. Once set,
      it is the developer's responsibility to re-calc the workbook, to ensure
      that any dependencies are propagated.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'suspendApiCalculationUntilNextSync(): void;'
      return:
        type: void
        description: ''
  - name: suspendScreenUpdatingUntilNextSync()
    uid: 'excel!Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)'
    package: excel!
    fullName: suspendScreenUpdatingUntilNextSync()
    summary: >-
      Suspends screen updating until the next `context.sync()` is called.


      *Note**: Don't call `suspendScreenUpdatingUntilNextSync` repeatedly (such
      as in a loop). Repeated calls will cause the Excel window to flicker.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'suspendScreenUpdatingUntilNextSync(): void;'
      return:
        type: void
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/performance-optimization.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const rowCount = 500;
              const columnCount = 20;

              const startTime = Date.now();
              console.log("Starting...");

              if (pauseScreenPainting) {
                  // Note: Don't call `suspendScreenUpdatingUntilNextSync` repeatedly (such as in a loop).
                  // Repeated calls will cause the Excel window to flicker. 
                  context.application.suspendScreenUpdatingUntilNextSync();
              }

              for (let i = 0; i < rowCount; i++) {
                  for (let j = 0; j < columnCount; j++) {
                      let cell = sheet.getCell(i, j);
                      cell.values = [[i * j * Math.random()]];
                      if (untrack) {
                          cell.untrack();
                      }
                  }
              }

              await context.sync();

              console.log(`Ending. Adding ${rowCount * columnCount} cells took ${Date.now() - startTime} milliseconds`);
          });

          ```
  - name: toJSON()
    uid: 'excel!Excel.Application#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Excel.Application
      object is an API object, the `toJSON` method returns a plain JavaScript
      object (typed as `Excel.Interfaces.ApplicationData`<!-- -->) that contains
      shallow copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.ApplicationData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.ApplicationData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
