### YamlMime:TSType
name: Excel.DataValidationRule
uid: 'excel!Excel.DataValidationRule:interface'
package: excel!
fullName: Excel.DataValidationRule
summary: >-
  Data validation rule contains different types of data validation. You can only
  use one of them at a time according the Excel.DataValidationType.


  \[ [API set: ExcelApi
  1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: custom
    uid: 'excel!Excel.DataValidationRule#custom:member'
    package: excel!
    fullName: custom
    summary: >-
      Custom data validation criteria.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'custom?: Excel.CustomDataValidation;'
      return:
        type: '<xref uid="excel!Excel.CustomDataValidation:interface" />'
  - name: date
    uid: 'excel!Excel.DataValidationRule#date:member'
    package: excel!
    fullName: date
    summary: >-
      Date data validation criteria.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'date?: Excel.DateTimeDataValidation;'
      return:
        type: '<xref uid="excel!Excel.DateTimeDataValidation:interface" />'
  - name: decimal
    uid: 'excel!Excel.DataValidationRule#decimal:member'
    package: excel!
    fullName: decimal
    summary: >-
      Decimal data validation criteria.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'decimal?: Excel.BasicDataValidation;'
      return:
        type: '<xref uid="excel!Excel.BasicDataValidation:interface" />'
  - name: list
    uid: 'excel!Excel.DataValidationRule#list:member'
    package: excel!
    fullName: list
    summary: >-
      List data validation criteria.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'list?: Excel.ListDataValidation;'
      return:
        type: '<xref uid="excel!Excel.ListDataValidation:interface" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/22-data-validation/data-validation.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          });

          ```
  - name: textLength
    uid: 'excel!Excel.DataValidationRule#textLength:member'
    package: excel!
    fullName: textLength
    summary: >-
      TextLength data validation criteria.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'textLength?: Excel.BasicDataValidation;'
      return:
        type: '<xref uid="excel!Excel.BasicDataValidation:interface" />'
  - name: time
    uid: 'excel!Excel.DataValidationRule#time:member'
    package: excel!
    fullName: time
    summary: >-
      Time data validation criteria.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'time?: Excel.DateTimeDataValidation;'
      return:
        type: '<xref uid="excel!Excel.DateTimeDataValidation:interface" />'
  - name: wholeNumber
    uid: 'excel!Excel.DataValidationRule#wholeNumber:member'
    package: excel!
    fullName: wholeNumber
    summary: >-
      WholeNumber data validation criteria.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'wholeNumber?: Excel.BasicDataValidation;'
      return:
        type: '<xref uid="excel!Excel.BasicDataValidation:interface" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/22-data-validation/data-validation.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          });

          ```
