### YamlMime:TSType
name: Excel.ConditionalFormatCollection
uid: 'excel!Excel.ConditionalFormatCollection:class'
package: excel!
fullName: Excel.ConditionalFormatCollection
summary: >-
  Represents a collection of all the conditional formats that are overlap the
  range.


  \[ [API set: ExcelApi
  1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.ConditionalFormatCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: items
    uid: 'excel!Excel.ConditionalFormatCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.ConditionalFormat[];'
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:class" />[]'
methods:
  - name: add(type)
    uid: 'excel!Excel.ConditionalFormatCollection#add:member(1)'
    package: excel!
    fullName: add(type)
    summary: >-
      Adds a new conditional format to the collection at the first/top priority.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
      parameters:
        - id: type
          description: >-
            The type of conditional format being added. See
            Excel.ConditionalFormatType for details.
          type: '<xref uid="excel!Excel.ConditionalFormatType:enum" />'
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });

          ```
  - name: add(typeString)
    uid: 'excel!Excel.ConditionalFormatCollection#add:member(2)'
    package: excel!
    fullName: add(typeString)
    summary: >-
      Adds a new conditional format to the collection at the first/top priority.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" |
        "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"):
        Excel.ConditionalFormat;
      parameters:
        - id: typeString
          description: >-
            The type of conditional format being added. See
            Excel.ConditionalFormatType for details.
          type: >-
            "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" |
            "PresetCriteria" | "ContainsText" | "CellValue"
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:class" />'
        description: ''
  - name: clearAll()
    uid: 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
    package: excel!
    fullName: clearAll()
    summary: >-
      Clears all conditional formats active on the current specified range.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clearAll(): void;'
      return:
        type: void
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          });

          ```
  - name: getCount()
    uid: 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: >-
      Returns the number of conditional formats in the workbook.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;
              var cfCount = range.conditionalFormats.getCount(); 

              return ctx.sync().then(function () {
                  console.log("Count: " + cfCount.value);
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getItem(id)
    uid: 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(id)
    summary: >-
      Returns a conditional format for the given ID.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(id: string): Excel.ConditionalFormat;'
      parameters:
        - id: id
          description: The id of the conditional format.
          type: string
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:class" />'
        description: |-
          Conditional Format object.

          #### Examples

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getItemAt(index)
    uid: 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
    package: excel!
    fullName: getItemAt(index)
    summary: >-
      Returns a conditional format at the given index.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Excel.ConditionalFormat;'
      parameters:
        - id: index
          description: Index of the conditional formats to be retrieved.
          type: number
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });

          ```
  - name: load(options)
    uid: 'excel!Excel.ConditionalFormatCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions &
        Excel.Interfaces.CollectionLoadOptions):
        Excel.ConditionalFormatCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.ConditionalFormatCollectionLoadOptions:interface"
            /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.ConditionalFormatCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.ConditionalFormatCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(propertyNames?: string | string[]):
        Excel.ConditionalFormatCollection;
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.ConditionalFormatCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.ConditionalFormatCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption):
        Excel.ConditionalFormatCollection;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.ConditionalFormatCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.ConditionalFormatCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      `Excel.ConditionalFormatCollection` object is an API object, the `toJSON`
      method returns a plain JavaScript object (typed as
      `Excel.Interfaces.ConditionalFormatCollectionData`<!-- -->) that contains
      an "items" array with shallow copies of any loaded properties from the
      collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
      return:
        type: >-
          <xref
          uid="excel!Excel.Interfaces.ConditionalFormatCollectionData:interface"
          />
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
