### YamlMime:TSPackage
uid: visio!
name: visio
type: package
summary: ''
classes:
  - 'visio!Visio.Application:class'
  - 'visio!Visio.Comment:class'
  - 'visio!Visio.CommentCollection:class'
  - 'visio!Visio.Document:class'
  - 'visio!Visio.DocumentView:class'
  - 'visio!Visio.Hyperlink:class'
  - 'visio!Visio.HyperlinkCollection:class'
  - 'visio!Visio.Page:class'
  - 'visio!Visio.PageCollection:class'
  - 'visio!Visio.PageView:class'
  - 'visio!Visio.RequestContext:class'
  - 'visio!Visio.Selection:class'
  - 'visio!Visio.Shape:class'
  - 'visio!Visio.ShapeCollection:class'
  - 'visio!Visio.ShapeDataItem:class'
  - 'visio!Visio.ShapeDataItemCollection:class'
  - 'visio!Visio.ShapeView:class'
interfaces:
  - 'visio!Visio.BoundingBox:interface'
  - 'visio!Visio.DataRefreshCompleteEventArgs:interface'
  - 'visio!Visio.DocumentLoadCompleteEventArgs:interface'
  - 'visio!Visio.Highlight:interface'
  - 'visio!Visio.Interfaces.ApplicationData:interface'
  - 'visio!Visio.Interfaces.ApplicationLoadOptions:interface'
  - 'visio!Visio.Interfaces.ApplicationUpdateData:interface'
  - 'visio!Visio.Interfaces.CollectionLoadOptions:interface'
  - 'visio!Visio.Interfaces.CommentCollectionData:interface'
  - 'visio!Visio.Interfaces.CommentCollectionLoadOptions:interface'
  - 'visio!Visio.Interfaces.CommentCollectionUpdateData:interface'
  - 'visio!Visio.Interfaces.CommentData:interface'
  - 'visio!Visio.Interfaces.CommentLoadOptions:interface'
  - 'visio!Visio.Interfaces.CommentUpdateData:interface'
  - 'visio!Visio.Interfaces.DocumentData:interface'
  - 'visio!Visio.Interfaces.DocumentLoadOptions:interface'
  - 'visio!Visio.Interfaces.DocumentUpdateData:interface'
  - 'visio!Visio.Interfaces.DocumentViewData:interface'
  - 'visio!Visio.Interfaces.DocumentViewLoadOptions:interface'
  - 'visio!Visio.Interfaces.DocumentViewUpdateData:interface'
  - 'visio!Visio.Interfaces.HyperlinkCollectionData:interface'
  - 'visio!Visio.Interfaces.HyperlinkCollectionLoadOptions:interface'
  - 'visio!Visio.Interfaces.HyperlinkCollectionUpdateData:interface'
  - 'visio!Visio.Interfaces.HyperlinkData:interface'
  - 'visio!Visio.Interfaces.HyperlinkLoadOptions:interface'
  - 'visio!Visio.Interfaces.PageCollectionData:interface'
  - 'visio!Visio.Interfaces.PageCollectionLoadOptions:interface'
  - 'visio!Visio.Interfaces.PageCollectionUpdateData:interface'
  - 'visio!Visio.Interfaces.PageData:interface'
  - 'visio!Visio.Interfaces.PageLoadOptions:interface'
  - 'visio!Visio.Interfaces.PageUpdateData:interface'
  - 'visio!Visio.Interfaces.PageViewData:interface'
  - 'visio!Visio.Interfaces.PageViewLoadOptions:interface'
  - 'visio!Visio.Interfaces.PageViewUpdateData:interface'
  - 'visio!Visio.Interfaces.SelectionData:interface'
  - 'visio!Visio.Interfaces.ShapeCollectionData:interface'
  - 'visio!Visio.Interfaces.ShapeCollectionLoadOptions:interface'
  - 'visio!Visio.Interfaces.ShapeCollectionUpdateData:interface'
  - 'visio!Visio.Interfaces.ShapeData:interface'
  - 'visio!Visio.Interfaces.ShapeDataItemCollectionData:interface'
  - 'visio!Visio.Interfaces.ShapeDataItemCollectionLoadOptions:interface'
  - 'visio!Visio.Interfaces.ShapeDataItemCollectionUpdateData:interface'
  - 'visio!Visio.Interfaces.ShapeDataItemData:interface'
  - 'visio!Visio.Interfaces.ShapeDataItemLoadOptions:interface'
  - 'visio!Visio.Interfaces.ShapeLoadOptions:interface'
  - 'visio!Visio.Interfaces.ShapeUpdateData:interface'
  - 'visio!Visio.Interfaces.ShapeViewData:interface'
  - 'visio!Visio.Interfaces.ShapeViewLoadOptions:interface'
  - 'visio!Visio.Interfaces.ShapeViewUpdateData:interface'
  - 'visio!Visio.PageLoadCompleteEventArgs:interface'
  - 'visio!Visio.PageRenderCompleteEventArgs:interface'
  - 'visio!Visio.Position:interface'
  - 'visio!Visio.SelectionChangedEventArgs:interface'
  - 'visio!Visio.ShapeMouseEnterEventArgs:interface'
  - 'visio!Visio.ShapeMouseLeaveEventArgs:interface'
enums:
  - 'visio!Visio.ErrorCodes:enum'
  - 'visio!Visio.OverlayHorizontalAlignment:enum'
  - 'visio!Visio.OverlayType:enum'
  - 'visio!Visio.OverlayVerticalAlignment:enum'
  - 'visio!Visio.ToolBarType:enum'
functions:
  - name: Visio.run(batch)
    uid: 'visio!Visio.run:function(1)'
    package: visio!
    summary: >-
      Executes a batch script that performs actions on the Visio object model,
      using a new request context. When the promise is resolved, any tracked
      objects that were automatically allocated during execution will be
      released.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(batch: (context: Visio.RequestContext) =>
        Promise<T>): Promise<T>;
      parameters:
        - id: batch
          description: >-
            A function that takes in an Visio.RequestContext and returns a
            promise (typically, just the result of "context.sync()"). The
            context parameter facilitates requests to the Visio application.
            Since the Office add-in and the Visio application run in two
            different processes, the request context is required to get access
            to the Visio object model from the add-in.
          type: >-
            (context: <xref uid="visio!Visio.RequestContext:class" />) =&gt;
            Promise&lt;T&gt;
      return:
        type: Promise&lt;T&gt;
        description: ''
  - name: 'Visio.run(object, batch)'
    uid: 'visio!Visio.run:function(2)'
    package: visio!
    summary: >-
      Executes a batch script that performs actions on the Visio object model,
      using the request context of a previously-created API object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(object: OfficeExtension.ClientObject |
        OfficeExtension.EmbeddedSession, batch: (context: Visio.RequestContext)
        => Promise<T>): Promise<T>;
      parameters:
        - id: object
          description: >-
            A previously-created API object. The batch will use the same request
            context as the passed-in object, which means that any changes
            applied to the object will be picked up by "context.sync()".
          type: >-
            <xref uid="office!OfficeExtension.ClientObject:class" /> | <xref
            uid="office!OfficeExtension.EmbeddedSession:class" />
        - id: batch
          description: >-
            A function that takes in an Visio.RequestContext and returns a
            promise (typically, just the result of "context.sync()"). When the
            promise is resolved, any tracked objects that were automatically
            allocated during execution will be released.
          type: >-
            (context: <xref uid="visio!Visio.RequestContext:class" />) =&gt;
            Promise&lt;T&gt;
      return:
        type: Promise&lt;T&gt;
        description: ''
  - name: 'Visio.run(objects, batch)'
    uid: 'visio!Visio.run:function(3)'
    package: visio!
    summary: >-
      Executes a batch script that performs actions on the Visio object model,
      using the request context of previously-created API objects.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(objects: OfficeExtension.ClientObject[], batch:
        (context: Visio.RequestContext) => Promise<T>): Promise<T>;
      parameters:
        - id: objects
          description: >-
            An array of previously-created API objects. The array will be
            validated to make sure that all of the objects share the same
            context. The batch will use this shared request context, which means
            that any changes applied to these objects will be picked up by
            "context.sync()".
          type: '<xref uid="office!OfficeExtension.ClientObject:class" />[]'
        - id: batch
          description: >-
            A function that takes in a Visio.RequestContext and returns a
            promise (typically, just the result of "context.sync()"). When the
            promise is resolved, any tracked objects that were automatically
            allocated during execution will be released.
          type: >-
            (context: <xref uid="visio!Visio.RequestContext:class" />) =&gt;
            Promise&lt;T&gt;
      return:
        type: Promise&lt;T&gt;
        description: ''
  - name: 'Visio.run(contextObject, batch)'
    uid: 'visio!Visio.run:function(4)'
    package: visio!
    summary: >-
      Executes a batch script that performs actions on the Visio object model,
      using the RequestContext of a previously-created object. When the promise
      is resolved, any tracked objects that were automatically allocated during
      execution will be released.
    remarks: >-
      In addition to this signature, the method also has the following
      signatures:


      `run<T>(batch: (context: Visio.RequestContext) => Promise<T>):
      Promise<T>;`


      `run<T>(object: OfficeExtension.ClientObject |
      OfficeExtension.EmbeddedSession, batch: (context: Visio.RequestContext) =>
      Promise<T>): Promise<T>;`


      `run<T>(objects: OfficeExtension.ClientObject[], batch: (context:
      Visio.RequestContext) => Promise<T>): Promise<T>;`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        export function run<T>(contextObject:
        OfficeExtension.ClientRequestContext, batch: (context:
        Visio.RequestContext) => Promise<T>): Promise<T>;
      parameters:
        - id: contextObject
          description: >-
            A previously-created Visio.RequestContext. This context will get
            re-used by the batch function (instead of having a new context
            created). This means that the batch will be able to pick up changes
            made to existing API objects, if those objects were derived from
            this same context.
          type: '<xref uid="office!OfficeExtension.ClientRequestContext:class" />'
        - id: batch
          description: >-
            A function that takes in a RequestContext and returns a promise
            (typically, just the result of "context.sync()"). The context
            parameter facilitates requests to the Visio application. Since the
            Office add-in and the Visio application run in two different
            processes, the RequestContext is required to get access to the Visio
            object model from the add-in.
          type: >-
            (context: <xref uid="visio!Visio.RequestContext:class" />) =&gt;
            Promise&lt;T&gt;
      return:
        type: Promise&lt;T&gt;
        description: ''
