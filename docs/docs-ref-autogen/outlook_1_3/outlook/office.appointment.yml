### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Appointment:interface'
    summary: >-
      The subclass of [Item](xref:outlook!Office.Item:interface) dealing with appointments.


      **Important**: This is an internal Outlook object, not directly exposed through existing interfaces. You should
      treat this as a mode of Office.context.mailbox.item. Refer to the [Object
      Model](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.3/office.context.mailbox.item)
      page for more information.


      Child interfaces:


      - [AppointmentCompose](xref:outlook!Office.AppointmentCompose:interface)


      - [AppointmentRead](xref:outlook!Office.AppointmentRead:interface)
    name: Office.Appointment
    fullName: Office.Appointment
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Item:interface'
    package: outlook!
    children:
      - 'outlook!Office.Appointment#body:member'
      - 'outlook!Office.Appointment#end:member'
      - 'outlook!Office.Appointment#itemType:member'
      - 'outlook!Office.Appointment#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.Appointment#location:member'
      - 'outlook!Office.Appointment#notificationMessages:member'
      - 'outlook!Office.Appointment#optionalAttendees:member'
      - 'outlook!Office.Appointment#requiredAttendees:member'
      - 'outlook!Office.Appointment#start:member'
      - 'outlook!Office.Appointment#subject:member'
  - uid: 'outlook!Office.Appointment#body:member'
    summary: |-
      Gets an object that provides methods for manipulating the body of an item.

      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer, Appointment Attendee, Message Compose, or Message Read
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.Appointment#end:member'
    summary: >-
      Gets or sets the date and time that the appointment is to end.


      **Read mode**


      The end property is a [Time](xref:outlook!Office.Time:interface) object expressed as a Coordinated Universal Time
      (UTC) date and time value. You can use the convertToLocalClientTime method to convert the end property value to
      the client's local date and time.


      **Compose mode**


      The end property is a Date object expressed as a Coordinated Universal Time (UTC) date and time value. You can use
      the convertToLocalClientTime method to convert the end property value to the client's local date and time.


      When you use the Time.setAsync method to set the end time, you should use the convertToUtcClientTime method to
      convert the local time on the client to UTC for the server.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer, Appointment Attendee, or Message Read (meeting request)
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Time | Date;'
      return:
        type:
          - 'outlook!Office.Appointment#end~0:complex'
  - uid: 'outlook!Office.Appointment#itemType:member'
    summary: >-
      Gets the type of item that an instance represents.


      The itemType property returns one of the ItemType enumeration values, indicating whether the item object instance
      is a message or an appointment.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer, Appointment Attendee, Message Compose, or Message Read
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.Appointment#itemType~0:complex'
  - uid: 'outlook!Office.Appointment#loadCustomPropertiesAsync:member(1)'
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key/value pairs on a per-app, per-item basis. This method returns a
      CustomProperties object in the callback, which provides methods to access the custom properties specific to the
      current item and the current add-in. Custom properties are not encrypted on the item, so this should not be used
      as secure storage.


      The custom properties are provided as a CustomProperties object in the asyncResult.value property. This object can
      be used to get, set, and remove custom properties from the item and save changes to the custom property set back
      to the server.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer, Appointment Attendee, Message Compose, or Message Read
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void,
        userContext?: any): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - 'outlook!Office.Appointment#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: >-
            Optional. Developers can provide any object they wish to access in the callback function. This object can be
            accessed by the asyncResult.asyncContext property in the callback function.
          type:
            - any
  - uid: 'outlook!Office.Appointment#location:member'
    summary: >-
      Gets or sets the location of an appointment.


      **Read mode**


      The location property returns a string that contains the location of the appointment.


      **Compose mode**


      The location property returns a [Location](xref:outlook!Office.Location:interface) object that provides methods
      that are used to get and set the location of the appointment.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer, Appointment Attendee, or Message Read (meeting request)
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: Location | string;'
      return:
        type:
          - 'outlook!Office.Appointment#location~0:complex'
  - uid: 'outlook!Office.Appointment#notificationMessages:member'
    summary: |-
      Gets the notification messages for an item.

      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer, Appointment Attendee, Message Compose, or Message Read
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.Appointment#optionalAttendees:member'
    summary: >-
      Provides access to the optional attendees of an event. The type of object and level of access depends on the mode
      of the current item.


      **Read mode**


      The optionalAttendees property returns an array that contains an
      [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) object for each optional attendee to the
      meeting. By default, the collection is limited to a maximum of 100 members. However, on Windows and Mac, you can
      get 500 members maximum.


      **Compose mode**


      The optionalAttendees property returns a [Recipients](xref:outlook!Office.Recipients:interface) object that
      provides methods to get or update the optional attendees for a meeting. By default, the collection is limited to a
      maximum of 100 members. However, on Windows and Mac, the following limits apply.


      - Get 500 members maximum.


      - Set a maximum of 100 members per call, up to 500 members total.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer or Appointment Attendee
    name: optionalAttendees
    fullName: optionalAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'optionalAttendees: Recipients | EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.Appointment#optionalAttendees~0:complex'
  - uid: 'outlook!Office.Appointment#requiredAttendees:member'
    summary: >-
      Provides access to the required attendees of an event. The type of object and level of access depends on the mode
      of the current item.


      **Read mode**


      The requiredAttendees property returns an array that contains an
      [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) object for each required attendee to the
      meeting. By default, the collection is limited to a maximum of 100 members. However, on Windows and Mac, you can
      get 500 members maximum.


      **Compose mode**


      The requiredAttendees property returns a [Recipients](xref:outlook!Office.Recipients:interface) object that
      provides methods to get or update the required attendees for a meeting. By default, the collection is limited to a
      maximum of 100 members. However, on Windows and Mac, the following limits apply.


      - Get 500 members maximum.


      - Set a maximum of 100 members per call, up to 500 members total.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer or Appointment Attendee
    name: requiredAttendees
    fullName: requiredAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requiredAttendees: Recipients | EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.Appointment#requiredAttendees~0:complex'
  - uid: 'outlook!Office.Appointment#start:member'
    summary: >-
      Gets or sets the date and time that the appointment is to begin.


      **Read mode**


      The start property is a Date object expressed as a Coordinated Universal Time (UTC) date and time value. You can
      use the convertToLocalClientTime method to convert the value to the client's local date and time.


      **Compose mode**


      The start property is a [Time](xref:outlook!Office.Time:interface) object expressed as a Coordinated Universal
      Time (UTC) date and time value. You can use the convertToLocalClientTime method to convert the value to the
      client's local date and time.


      When you use the Time.setAsync method to set the start time, you should use the convertToUtcClientTime method to
      convert the local time on the client to UTC for the server.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer, Appointment Attendee, or Message Read (meeting request)
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Time | Date;'
      return:
        type:
          - 'outlook!Office.Appointment#start~0:complex'
  - uid: 'outlook!Office.Appointment#subject:member'
    summary: >-
      Gets or sets the description that appears in the subject field of an item.


      The subject property gets or sets the entire subject of the item, as sent by the email server.


      **Read mode**


      The subject property returns a string. Use the normalizedSubject property to get the subject minus any leading
      prefixes such as RE: and FW:.


      **Compose mode**


      The subject property returns a Subject object that provides methods to get and set the subject.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Appointment
      Organizer, Appointment Attendee, Message Compose, or Message Read
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject | string;'
      return:
        type:
          - 'outlook!Office.Appointment#subject~0:complex'
references:
  - uid: 'outlook!Office.Item:interface'
    name: Item
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Appointment#end~0:complex'
    name: Time | Date
    fullName: Office.Time | Date
    spec.typeScript:
      - uid: 'outlook!Office.Time:interface'
        name: Time
        fullName: Office.Time
      - name: ' | '
        fullName: ' | '
      - uid: '!Date:interface'
        name: Date
        fullName: Date
  - uid: 'outlook!Office.Appointment#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Appointment#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Appointment#location~0:complex'
    name: Location | string
    fullName: Office.Location | string
    spec.typeScript:
      - uid: 'outlook!Office.Location:interface'
        name: Location
        fullName: Office.Location
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.Appointment#optionalAttendees~0:complex'
    name: 'Recipients | EmailAddressDetails[]'
    fullName: 'Office.Recipients | Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.Recipients:interface'
        name: Recipients
        fullName: Office.Recipients
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.Appointment#requiredAttendees~0:complex'
    name: 'Recipients | EmailAddressDetails[]'
    fullName: 'Office.Recipients | Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.Recipients:interface'
        name: Recipients
        fullName: Office.Recipients
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.Appointment#start~0:complex'
    name: Time | Date
    fullName: Office.Time | Date
    spec.typeScript:
      - uid: 'outlook!Office.Time:interface'
        name: Time
        fullName: Office.Time
      - name: ' | '
        fullName: ' | '
      - uid: '!Date:interface'
        name: Date
        fullName: Date
  - uid: 'outlook!Office.Appointment#subject~0:complex'
    name: Subject | string
    fullName: Office.Subject | string
    spec.typeScript:
      - uid: 'outlook!Office.Subject:interface'
        name: Subject
        fullName: Office.Subject
      - name: ' | string'
        fullName: ' | string'
