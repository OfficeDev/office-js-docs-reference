### YamlMime:UniversalReference
items:
  - uid: Outlook_1_3.Office.Item
    summary: >-
      The item namespace is used to access the currently selected message, meeting request, or appointment. You can
      determine the type of the item by using the `itemType` property.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restricted</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Compose or
      Read</td></tr> </table>
    name: Office.Item
    fullName: Office.Item
    langs:
      - typeScript
    type: interface
    package: Outlook_1_3
    children:
      - Outlook_1_3.Office.Item.loadCustomPropertiesAsync
      - Outlook_1_3.Office.Item.loadCustomPropertiesAsync_1
      - Outlook_1_3.Office.Item.body
      - Outlook_1_3.Office.Item.itemType
      - Outlook_1_3.Office.Item.notificationMessages
  - uid: Outlook_1_3.Office.Item.loadCustomPropertiesAsync
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key/value pairs on a per-app, per-item basis. This method returns a
      CustomProperties object in the callback, which provides methods to access the custom properties specific to the
      current item and the current add-in. Custom properties are not encrypted on the item, so this should not be used
      as secure storage.


      The custom properties are provided as a CustomProperties object in the asyncResult.value property. This object can
      be used to get, set, and remove custom properties from the item and save changes to the custom property set back
      to the server.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Compose or
      Read</td></tr> </table>
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        loadCustomPropertiesAsync(callback: (result: Office.AsyncResult<CustomProperties>) => void, userContext?:
        any): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - '(result: Office.AsyncResult<CustomProperties>) => void'
        - id: userContext
          description: >-
            Optional. Developers can provide any object they wish to access in the callback function. This object can be
            accessed by the asyncResult.asyncContext property in the callback function.
          type:
            - any
  - uid: Outlook_1_3.Office.Item.loadCustomPropertiesAsync_1
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key/value pairs on a per-app, per-item basis. This method returns a
      CustomProperties object in the callback, which provides methods to access the custom properties specific to the
      current item and the current add-in. Custom properties are not encrypted on the item, so this should not be used
      as secure storage.


      The custom properties are provided as a CustomProperties object in the asyncResult.value property. This object can
      be used to get, set, and remove custom properties from the item and save changes to the custom property set back
      to the server.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Compose or
      Read</td></tr> </table>

      #### Examples


      ```javascript

      // The following example shows how to use the loadCustomPropertiesAsync method

      // to asynchronously load custom properties that are specific to the current item.

      // The example also shows how to use the saveAsync method to save these properties

      // back to the server. After loading the custom properties, the example uses the

      // get method to read the custom property myProp, the set method to write the

      // custom property otherProp, and then finally calls the saveAsync method to save

      // the custom properties.

      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };


      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }


      function saveCallback(asyncResult) {

      }

      ```
    name: loadCustomPropertiesAsync(callback)
    fullName: loadCustomPropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (result: Office.AsyncResult<CustomProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the callback parameter is called with a single parameter
            of type Office.AsyncResult.
          type:
            - '(result: Office.AsyncResult<CustomProperties>) => void'
  - uid: Outlook_1_3.Office.Item.body
    summary: |-
      Gets an object that provides methods for manipulating the body of an item.

      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Compose or
      Read</td></tr> </table>

      #### Examples


      ```javascript

      // This example gets the body of the message in plain text.

      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.

      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }

      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - Body
  - uid: Outlook_1_3.Office.Item.itemType
    summary: >-
      Gets the type of item that an instance represents.


      The itemType property returns one of the ItemType enumeration values, indicating whether the item object instance
      is a message or an appointment.


      \[ [API set: Mailbox 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Compose or
      Read</td></tr> </table>

      #### Examples


      ```javascript

      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
          // Do something.
      } else {
          // Do something else.
      }

      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType;'
      return:
        type:
          - MailboxEnums.ItemType
  - uid: Outlook_1_3.Office.Item.notificationMessages
    summary: |-
      Gets the notification messages for an item.

      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      <table> <tr><td>[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>
      <tr><td>[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Compose or
      Read</td></tr> </table>

      #### Examples


      ```javascript

      // Get all notifications.

      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );

      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - NotificationMessages
