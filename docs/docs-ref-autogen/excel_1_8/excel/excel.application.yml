### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Application
    summary: |-
      Represents the Excel application that manages the workbook.

      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.Application
    fullName: Excel.Application
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Application.calculate
      - excel.Excel.Application.calculate_1
      - excel.Excel.Application.calculationMode
      - excel.Excel.Application.context
      - excel.Excel.Application.load
      - excel.Excel.Application.load_1
      - excel.Excel.Application.load_2
      - excel.Excel.Application.set
      - excel.Excel.Application.set_1
      - excel.Excel.Application.suspendApiCalculationUntilNextSync
      - excel.Excel.Application.toJSON
  - uid: excel.Excel.Application.calculate
    summary: |-
      Recalculate all currently opened workbooks in Excel.

      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: calculate(calculationType)
    fullName: calculate(calculationType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(calculationType: Excel.CalculationType): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: calculationType
          description: Specifies the calculation type to use. See Excel.CalculationType for details.
          type:
            - excel.Excel.CalculationType
  - uid: excel.Excel.Application.calculate_1
    summary: |-
      Recalculate all currently opened workbooks in Excel.

      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: calculate(calculationTypeString)
    fullName: calculate(calculationTypeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(calculationTypeString: "Recalculate" | "Full" | "FullRebuild"): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) {
              ctx.workbook.application.calculate('Full');
              return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: calculationTypeString
          description: Specifies the calculation type to use. See Excel.CalculationType for details.
          type:
            - '"Recalculate" | "Full" | "FullRebuild"'
  - uid: excel.Excel.Application.calculationMode
    summary: >-
      Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode. Possible
      values are: `Automatic`<!-- -->, where Excel controls recalculation; `AutomaticExceptTables`<!-- -->, where Excel
      controls recalculation but ignores changes in tables; `Manual`<!-- -->, where calculation is done when the user
      requests it.


      \[ [API set: ExcelApi 1.1 for get, 1.8 for
      set](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: calculationMode
    fullName: calculationMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
      return:
        type:
          - Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual"
  - uid: excel.Excel.Application.context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Application.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Excel.Application` - Where option is a comma-delimited string or an array of
      strings that specify the properties to load.


      `load(option?: { select?: string; expand?: string; }): Excel.Application` - Where option.select is a
      comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ApplicationLoadOptions): Excel.Application;'
      return:
        type:
          - excel.Excel.Application
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.ApplicationLoadOptions
  - uid: excel.Excel.Application.load_1
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Application;'
      return:
        type:
          - excel.Excel.Application
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) {
              var application = ctx.workbook.application;
              application.load('calculationMode');
              return ctx.sync().then(function() {
                  console.log(application.calculationMode);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.Application.load_2
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Application;'
      return:
        type:
          - excel.Excel.Application
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and
            propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Application.set
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.Application): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - Interfaces.ApplicationUpdateData
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Application.set_1
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Application): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Application
  - uid: excel.Excel.Application.suspendApiCalculationUntilNextSync
    summary: >-
      Suspends calculation until the next "context.sync()" is called. Once set, it is the developer's responsibility to
      re-calc the workbook, to ensure that any dependencies are propagated.


      \[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: suspendApiCalculationUntilNextSync()
    fullName: suspendApiCalculationUntilNextSync()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'suspendApiCalculationUntilNextSync(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Application.toJSON
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.Application object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Excel.Interfaces.ApplicationData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ApplicationData;'
      return:
        type:
          - excel.Excel.Interfaces.ApplicationData
        description: ''
