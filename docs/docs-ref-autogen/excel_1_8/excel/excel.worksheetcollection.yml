### YamlMime:TSType
name: Excel.WorksheetCollection
uid: 'excel!Excel.WorksheetCollection:class'
package: excel!
fullName: Excel.WorksheetCollection
summary: Represents a collection of worksheet objects that are part of the workbook.
remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.WorksheetCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: items
    uid: 'excel!Excel.WorksheetCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />[]'
methods:
  - name: add(name)
    uid: 'excel!Excel.WorksheetCollection#add:member(1)'
    package: excel!
    fullName: add(name)
    summary: >-
      Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish
      to activate the newly added worksheet, call `.activate()` on it.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const wSheetName = 'Sample Name';
          const worksheet = context.workbook.worksheets.add(wSheetName);
          worksheet.load('name');
          await context.sync();
          
          console.log(worksheet.name);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      parameters:
        - id: name
          description: >-
            Optional. The name of the worksheet to be added. If specified, the name should be unique. If not specified,
            Excel determines the name of the new worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getActiveWorksheet()
    uid: 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
    package: excel!
    fullName: getActiveWorksheet()
    summary: Gets the currently active worksheet in the workbook.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => {  
          const activeWorksheet = context.workbook.worksheets.getActiveWorksheet();
          activeWorksheet.load('name');
          await context.sync();
          console.log(activeWorksheet.name);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getCount(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getCount:member(1)'
    package: excel!
    fullName: getCount(visibleOnly)
    summary: Gets the number of worksheets in the collection.
    remarks: '\[ [API set: ExcelApi 1.4](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      parameters:
        - id: visibleOnly
          description: 'Optional. If `true`<!-- -->, considers only visible worksheets, skipping over any hidden ones.'
          type: boolean
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getFirst(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getFirst:member(1)'
    package: excel!
    fullName: getFirst(visibleOnly)
    summary: Gets the first worksheet in the collection.
    remarks: >-
      \[ [API set: ExcelApi 1.5](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml


      await Excel.run(async (context) => {
          const sheets = context.workbook.worksheets;

          // We don't want to include the default worksheet that was created
          // when the workbook was created, so our "firstSheet" will be the one
          // after the literal first. Note chaining of navigation methods.
          const firstSheet = sheets.getFirst().getNext();
          const lastSheet = sheets.getLast();
          const firstTaxRateRange = firstSheet.getRange("B2");
          const lastTaxRateRange = lastSheet.getRange("B2");

          firstSheet.load("name");
          lastSheet.load("name");
          firstTaxRateRange.load("text");
          lastTaxRateRange.load("text");

          await context.sync();

          let firstYear = firstSheet.name.substr(5, 4);
          let lastYear = lastSheet.name.substr(5, 4);
          console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      parameters:
        - id: visibleOnly
          description: 'Optional. If `true`<!-- -->, considers only visible worksheets, skipping over any hidden ones.'
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getItem(key)
    uid: 'excel!Excel.WorksheetCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(key)
    summary: Gets a worksheet object using its name or ID.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      parameters:
        - id: key
          description: The name or ID of the worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getItemOrNullObject(key)
    uid: 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a worksheet object using its name or ID. If the worksheet does not exist, then this method returns an object
      with its `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: ExcelApi 1.4](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      parameters:
        - id: key
          description: The name or ID of the worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getLast(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getLast:member(1)'
    package: excel!
    fullName: getLast(visibleOnly)
    summary: Gets the last worksheet in the collection.
    remarks: >-
      \[ [API set: ExcelApi 1.5](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml


      await Excel.run(async (context) => {
          const sheets = context.workbook.worksheets;

          // We don't want to include the default worksheet that was created
          // when the workbook was created, so our "firstSheet" will be the one
          // after the literal first. Note chaining of navigation methods.
          const firstSheet = sheets.getFirst().getNext();
          const lastSheet = sheets.getLast();
          const firstTaxRateRange = firstSheet.getRange("B2");
          const lastTaxRateRange = lastSheet.getRange("B2");

          firstSheet.load("name");
          lastSheet.load("name");
          firstTaxRateRange.load("text");
          lastTaxRateRange.load("text");

          await context.sync();

          let firstYear = firstSheet.name.substr(5, 4);
          let lastYear = lastSheet.name.substr(5, 4);
          console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      parameters:
        - id: visibleOnly
          description: 'Optional. If `true`<!-- -->, considers only visible worksheets, skipping over any hidden ones.'
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.WorksheetCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.WorksheetCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="excel!Excel.Interfaces.WorksheetCollectionLoadOptions:interface" /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.WorksheetCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.WorksheetCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.WorksheetCollection:class" />'
        description: |-


          #### Examples

          ```TypeScript
          await Excel.run(async (context) => { 
              const worksheets = context.workbook.worksheets;
              worksheets.load('items');
              await context.sync();
              
              for (let i = 0; i < worksheets.items.length; i++) {
                  console.log(worksheets.items[i].name);
              }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.WorksheetCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.WorksheetCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.WorksheetCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.WorksheetCollectionData:interface" />'
        description: ''
events:
  - name: onActivated
    uid: 'excel!Excel.WorksheetCollection#onActivated:member'
    package: excel!
    fullName: onActivated
    summary: Occurs when any worksheet in the workbook is activated.
    remarks: >-
      \[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml


      await Excel.run(async (context) => {
          let sheets = context.workbook.worksheets;
          sheets.onActivated.add(onActivate);

          await context.sync();
          console.log("A handler has been registered for the OnActivate event.");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetActivatedEventArgs:interface" />&gt;
  - name: onAdded
    uid: 'excel!Excel.WorksheetCollection#onAdded:member'
    package: excel!
    fullName: onAdded
    summary: Occurs when a new worksheet is added to the workbook.
    remarks: >-
      \[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml


      await Excel.run(async (context) => {
          let sheet = context.workbook.worksheets;
          sheet.onAdded.add(onWorksheetAdd);

          await context.sync();
          console.log("A handler has been registered for the OnAdded event.");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetAddedEventArgs:interface" />&gt;
  - name: onCalculated
    uid: 'excel!Excel.WorksheetCollection#onCalculated:member'
    package: excel!
    fullName: onCalculated
    summary: Occurs when any worksheet in the workbook is calculated.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetCalculatedEventArgs:interface" />&gt;
  - name: onDeactivated
    uid: 'excel!Excel.WorksheetCollection#onDeactivated:member'
    package: excel!
    fullName: onDeactivated
    summary: Occurs when any worksheet in the workbook is deactivated.
    remarks: >-
      \[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml


      await Excel.run(async (context) => {
          let sheets = context.workbook.worksheets;
          sheets.onDeactivated.add(onDeactivate);

          await context.sync();
          console.log("A handler has been registered for the OnDeactivate event.");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetDeactivatedEventArgs:interface" />&gt;
  - name: onDeleted
    uid: 'excel!Excel.WorksheetCollection#onDeleted:member'
    package: excel!
    fullName: onDeleted
    summary: Occurs when a worksheet is deleted from the workbook.
    remarks: '\[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetDeletedEventArgs:interface" />&gt;
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
