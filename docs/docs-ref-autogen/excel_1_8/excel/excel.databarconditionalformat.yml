### YamlMime:TSType
name: Excel.DataBarConditionalFormat
uid: 'excel!Excel.DataBarConditionalFormat:class'
package: excel!
fullName: Excel.DataBarConditionalFormat
summary: >-
  Represents an Excel Conditional Data Bar Type.


  \[ [API set: ExcelApi
  1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: axisColor
    uid: 'excel!Excel.DataBarConditionalFormat#axisColor:member'
    package: excel!
    fullName: axisColor
    summary: >-
      HTML color code representing the color of the Axis line, of the form
      \#RRGGBB (e.g., "FFA500") or as a named HTML color (e.g., "orange"). ""
      (empty string) if no axis is present or set.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'axisColor: string;'
      return:
        type: string
  - name: axisFormat
    uid: 'excel!Excel.DataBarConditionalFormat#axisFormat:member'
    package: excel!
    fullName: axisFormat
    summary: >-
      Representation of how the axis is determined for an Excel data bar.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        axisFormat: Excel.ConditionalDataBarAxisFormat | "Automatic" | "None" |
        "CellMidPoint";
      return:
        type: >-
          <xref uid="excel!Excel.ConditionalDataBarAxisFormat:enum" /> |
          "Automatic" | "None" | "CellMidPoint"
  - name: barDirection
    uid: 'excel!Excel.DataBarConditionalFormat#barDirection:member'
    package: excel!
    fullName: barDirection
    summary: >-
      Specifies the direction that the data bar graphic should be based on.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        barDirection: Excel.ConditionalDataBarDirection | "Context" |
        "LeftToRight" | "RightToLeft";
      return:
        type: >-
          <xref uid="excel!Excel.ConditionalDataBarDirection:enum" /> |
          "Context" | "LeftToRight" | "RightToLeft"
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          });

          ```
  - name: context
    uid: 'excel!Excel.DataBarConditionalFormat#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: lowerBoundRule
    uid: 'excel!Excel.DataBarConditionalFormat#lowerBoundRule:member'
    package: excel!
    fullName: lowerBoundRule
    summary: >-
      The rule for what consistutes the lower bound (and how to calculate it, if
      applicable) for a data bar. The `ConditionalDataBarRule` object must be
      set as a JSON object (use `x.lowerBoundRule = {...}` instead of
      `x.lowerBoundRule.formula = ...`<!-- -->).


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lowerBoundRule: Excel.ConditionalDataBarRule;'
      return:
        type: '<xref uid="excel!Excel.ConditionalDataBarRule:interface" />'
  - name: negativeFormat
    uid: 'excel!Excel.DataBarConditionalFormat#negativeFormat:member'
    package: excel!
    fullName: negativeFormat
    summary: >-
      Representation of all values to the left of the axis in an Excel data bar.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly negativeFormat: Excel.ConditionalDataBarNegativeFormat;'
      return:
        type: '<xref uid="excel!Excel.ConditionalDataBarNegativeFormat:class" />'
  - name: positiveFormat
    uid: 'excel!Excel.DataBarConditionalFormat#positiveFormat:member'
    package: excel!
    fullName: positiveFormat
    summary: >-
      Representation of all values to the right of the axis in an Excel data
      bar.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly positiveFormat: Excel.ConditionalDataBarPositiveFormat;'
      return:
        type: '<xref uid="excel!Excel.ConditionalDataBarPositiveFormat:class" />'
  - name: showDataBarOnly
    uid: 'excel!Excel.DataBarConditionalFormat#showDataBarOnly:member'
    package: excel!
    fullName: showDataBarOnly
    summary: >-
      If true, hides the values from the cells where the data bar is applied.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showDataBarOnly: boolean;'
      return:
        type: boolean
  - name: upperBoundRule
    uid: 'excel!Excel.DataBarConditionalFormat#upperBoundRule:member'
    package: excel!
    fullName: upperBoundRule
    summary: >-
      The rule for what constitutes the upper bound (and how to calculate it, if
      applicable) for a data bar. The `ConditionalDataBarRule` object must be
      set as a JSON object (use `x.upperBoundRule = {...}` instead of
      `x.upperBoundRule.formula = ...`<!-- -->).


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'upperBoundRule: Excel.ConditionalDataBarRule;'
      return:
        type: '<xref uid="excel!Excel.ConditionalDataBarRule:interface" />'
methods:
  - name: load(options)
    uid: 'excel!Excel.DataBarConditionalFormat#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.DataBarConditionalFormatLoadOptions):
        Excel.DataBarConditionalFormat;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.DataBarConditionalFormatLoadOptions:interface"
            />
      return:
        type: '<xref uid="excel!Excel.DataBarConditionalFormat:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.DataBarConditionalFormat#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.DataBarConditionalFormat;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.DataBarConditionalFormat:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.DataBarConditionalFormat#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.DataBarConditionalFormat;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.DataBarConditionalFormat:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'excel!Excel.DataBarConditionalFormat#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.DataBarConditionalFormat): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.DataBarConditionalFormatUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.DataBarConditionalFormatUpdateData:interface"
            />
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.DataBarConditionalFormat#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.DataBarConditionalFormat): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.DataBarConditionalFormat:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.DataBarConditionalFormat#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      Excel.DataBarConditionalFormat object is an API object, the `toJSON`
      method returns a plain JavaScript object (typed as
      `Excel.Interfaces.DataBarConditionalFormatData`<!-- -->) that contains
      shallow copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.DataBarConditionalFormatData;'
      return:
        type: >-
          <xref
          uid="excel!Excel.Interfaces.DataBarConditionalFormatData:interface" />
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
