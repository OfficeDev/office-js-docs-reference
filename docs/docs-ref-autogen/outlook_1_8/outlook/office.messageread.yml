### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.MessageRead:interface'
    summary: >-
      The message read mode of [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


      **Important**: This is an internal Outlook object, not directly exposed through existing interfaces. You should
      treat this as a mode of `Office.context.mailbox.item`<!-- -->. Refer to the [Object
      Model](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item)
      page for more information.


      Parent interfaces:


      - [ItemRead](xref:outlook!Office.ItemRead:interface)


      - [Message](xref:outlook!Office.Message:interface)
    name: Office.MessageRead
    fullName: Office.MessageRead
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Message:interface'
      - 'outlook!Office.ItemRead:interface'
    package: outlook!
    children:
      - 'outlook!Office.MessageRead#addHandlerAsync:member(1)'
      - 'outlook!Office.MessageRead#addHandlerAsync:member(2)'
      - 'outlook!Office.MessageRead#attachments:member'
      - 'outlook!Office.MessageRead#body:member'
      - 'outlook!Office.MessageRead#categories:member'
      - 'outlook!Office.MessageRead#cc:member'
      - 'outlook!Office.MessageRead#conversationId:member'
      - 'outlook!Office.MessageRead#dateTimeCreated:member'
      - 'outlook!Office.MessageRead#dateTimeModified:member'
      - 'outlook!Office.MessageRead#displayReplyAllForm:member(1)'
      - 'outlook!Office.MessageRead#displayReplyForm:member(1)'
      - 'outlook!Office.MessageRead#end:member'
      - 'outlook!Office.MessageRead#from:member'
      - 'outlook!Office.MessageRead#getAllInternetHeadersAsync:member(1)'
      - 'outlook!Office.MessageRead#getAllInternetHeadersAsync:member(2)'
      - 'outlook!Office.MessageRead#getAttachmentContentAsync:member(1)'
      - 'outlook!Office.MessageRead#getAttachmentContentAsync:member(2)'
      - 'outlook!Office.MessageRead#getEntities:member(1)'
      - 'outlook!Office.MessageRead#getEntitiesByType:member(1)'
      - 'outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)'
      - 'outlook!Office.MessageRead#getRegExMatches:member(1)'
      - 'outlook!Office.MessageRead#getRegExMatchesByName:member(1)'
      - 'outlook!Office.MessageRead#getSelectedEntities:member(1)'
      - 'outlook!Office.MessageRead#getSelectedRegExMatches:member(1)'
      - 'outlook!Office.MessageRead#getSharedPropertiesAsync:member(1)'
      - 'outlook!Office.MessageRead#getSharedPropertiesAsync:member(2)'
      - 'outlook!Office.MessageRead#internetMessageId:member'
      - 'outlook!Office.MessageRead#itemClass:member'
      - 'outlook!Office.MessageRead#itemId:member'
      - 'outlook!Office.MessageRead#itemType:member'
      - 'outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.MessageRead#location:member'
      - 'outlook!Office.MessageRead#normalizedSubject:member'
      - 'outlook!Office.MessageRead#notificationMessages:member'
      - 'outlook!Office.MessageRead#recurrence:member'
      - 'outlook!Office.MessageRead#removeHandlerAsync:member(1)'
      - 'outlook!Office.MessageRead#removeHandlerAsync:member(2)'
      - 'outlook!Office.MessageRead#sender:member'
      - 'outlook!Office.MessageRead#seriesId:member'
      - 'outlook!Office.MessageRead#start:member'
      - 'outlook!Office.MessageRead#subject:member'
      - 'outlook!Office.MessageRead#to:member'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync:member(1)'
    summary: >-
      Adds an event handler for a supported event. **Note**: Events are available only with task pane.


      Refer to the Item object model [events
      section](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events)
      for supported events.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions,
        callback?: (asyncResult: Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should invoke the handler.
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~0:complex'
        - id: handler
          description: >-
            The function to handle the event. The function must accept a single parameter, which is an object literal.
            The type property on the parameter will match the eventType `parameter` passed to `addHandlerAsync`<!-- -->.
          type:
            - any
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. `asyncContext`<!-- -->:
            Developers can provide any object they wish to access in the callback method.
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object.
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync:member(2)'
    summary: >-
      Adds an event handler for a supported event. **Note**: Events are available only with task pane.


      Refer to the Item object model [events
      section](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events)
      for supported events.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }


      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);

      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should invoke the handler.
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~2:complex'
        - id: handler
          description: >-
            The function to handle the event. The function must accept a single parameter, which is an object literal.
            The type property on the parameter will match the `eventType` parameter passed to `addHandlerAsync`<!-- -->.
          type:
            - any
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object.
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageRead#attachments:member'
    summary: Gets the item's attachments as an array.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      **Note**: Certain types of files are blocked by Outlook due to potential security issues and are therefore not
      returned. For more information, see [Blocked attachments in
      Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!--
      -->.


      #### Examples


      ```javascript

      // The following code builds an HTML string with details of all attachments on the current item.

      var item = Office.context.mailbox.item;

      var outputString = "";


      if (item.attachments.length > 0) {
          for (i = 0 ; i < item.attachments.length ; i++) {
              var attachment = item.attachments[i];
              outputString += "<BR>" + i + ". Name: ";
              outputString += attachment.name;
              outputString += "<BR>ID: " + attachment.id;
              outputString += "<BR>contentType: " + attachment.contentType;
              outputString += "<BR>size: " + attachment.size;
              outputString += "<BR>attachmentType: " + attachment.attachmentType;
              outputString += "<BR>isInline: " + attachment.isInline;
          }
      }


      console.log(outputString);

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachments-read.yaml

      var attachments = Office.context.mailbox.item.attachments;

      console.log(attachments);

      ```
    name: attachments
    fullName: attachments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#attachments~0:complex'
  - uid: 'outlook!Office.MessageRead#body:member'
    summary: |-
      Gets an object that provides methods for manipulating the body of an item.

      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // This example gets the body of the item as plain text.

      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.

      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }

      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.MessageRead#categories:member'
    summary: |-
      Gets an object that provides methods for managing the item's categories.

      \[ [API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

      Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories && categories.length > 0) {
            console.log("Categories assigned to this item:");
            console.log(JSON.stringify(categories));
          } else {
            console.log("There are no categories assigned to this item.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

      // Note: In order for you to successfully add a category,

      // it must be in the mailbox categories master list.


      Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var masterCategories = asyncResult.value;
          if (masterCategories && masterCategories.length > 0) {
            // Grab the first category from the master list.
            var categoryToAdd = [masterCategories[0].displayName];
            Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
              } else {
                console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
              }
            });
          } else {
            console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

      Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories && categories.length > 0) {
            // Grab the first category assigned to this item.
            var categoryToRemove = [categories[0].displayName];
            Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
              } else {
                console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
              }
            });
          } else {
            console.log("There are no categories assigned to this item.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });

      ```
    name: categories
    fullName: categories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'categories: Categories;'
      return:
        type:
          - 'outlook!Office.Categories:interface'
  - uid: 'outlook!Office.MessageRead#cc:member'
    summary: >-
      Provides access to the Cc (carbon copy) recipients of a message. The type of object and level of access depends on
      the mode of the current item.


      The `cc` property returns an array that contains an `EmailAddressDetails` object for each recipient listed on the
      Cc line of the message. By default, the collection is limited to a maximum of 100 members. However, in Outlook on
      the web, you can get 20 members maximum, while on Windows and Mac, you can get 500 members maximum.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml

      var msgCc = Office.context.mailbox.item.cc;

      console.log("Message copied to:");

      for (var i = 0; i < msgCc.length; i++) {
        console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
      }

      ```
    name: cc
    fullName: cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#cc~0:complex'
  - uid: 'outlook!Office.MessageRead#conversationId:member'
    summary: >-
      Gets an identifier for the email conversation that contains a particular message.


      You can get an integer for this property if your mail app is activated in read forms or responses in compose
      forms. If subsequently the user changes the subject of the reply message, upon sending the reply, the conversation
      ID for that message will change and that value you obtained earlier will no longer apply.


      You get null for this property for a new item in a compose form. If the user sets a subject and saves the item,
      the `conversationId` property will return a value.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

      console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);

      ```
    name: conversationId
    fullName: conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#dateTimeCreated:member'
    summary: Gets the date and time that an item was created.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

      console.log(`Creation date and time: ${Office.context.mailbox.item.dateTimeCreated}`);

      ```
    name: dateTimeCreated
    fullName: dateTimeCreated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#dateTimeModified:member'
    summary: |-
      Gets the date and time that an item was last modified.

      **Note**: This member is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

      console.log(`Date and time item last modified: ${Office.context.mailbox.item.dateTimeModified}`);

      ```
    name: dateTimeModified
    fullName: dateTimeModified
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeModified: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#displayReplyAllForm:member(1)'
    summary: >-
      Displays a reply form that includes the sender and all recipients of the selected message or the organizer and all
      attendees of the selected appointment.


      In Outlook on the web, the reply form is displayed as a pop-out form in the 3-column view and a pop-up form in the
      2- or 1-column view.


      If any of the string parameters exceed their limits, `displayReplyAllForm` throws an exception.


      When attachments are specified in the `formData.attachments` parameter, Outlook on the web and desktop clients
      attempt to download all attachments and attach them to the reply form. If any attachments fail to be added, an
      error is shown in the form UI. If this isn't possible, then no error message is thrown.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // The following code passes a string to the `displayReplyAllForm` function.

      Office.context.mailbox.item.displayReplyAllForm('hello there');

      Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


      // Reply with an empty body.

      Office.context.mailbox.item.displayReplyAllForm({});


      // Reply with just a body.

      Office.context.mailbox.item.displayReplyAllForm(

      {

      'htmlBody' : 'hi'

      });


      // Reply with a body and a file attachment.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : Office.MailboxEnums.AttachmentType.File,
              'name' : 'squirrel.png',
              'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });


      // Reply with a body and an item attachment.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : 'item',
              'name' : 'rand',
              'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });


      // Reply with a body, file attachment, item attachment, and a callback.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

      Office.context.mailbox.item.displayReplyAllForm(
        "This is a reply ALL with <b>some bold text</b>."
      );

      ```
    name: displayReplyAllForm(formData)
    fullName: displayReplyAllForm(formData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: >-
            A string that contains text and HTML and that represents the body of the reply form. The string is limited
            to 32 KB OR a [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) object that contains body or
            attachment data and a callback function.
          type:
            - 'outlook!Office.MessageRead#displayReplyAllForm~0:complex'
  - uid: 'outlook!Office.MessageRead#displayReplyForm:member(1)'
    summary: >-
      Displays a reply form that includes only the sender of the selected message or the organizer of the selected
      appointment.


      In Outlook on the web, the reply form is displayed as a pop-out form in the 3-column view and a pop-up form in the
      2- or 1-column view.


      If any of the string parameters exceed their limits, `displayReplyForm` throws an exception.


      When attachments are specified in the `formData.attachments` parameter, Outlook on the web and desktop clients
      attempt to download all attachments and attach them to the reply form. If any attachments fail to be added, an
      error is shown in the form UI. If this isn't possible, then no error message is thrown.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // The following code passes a string to the `displayReplyForm` function.

      Office.context.mailbox.item.displayReplyForm('hello there');

      Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


      // Reply with an empty body.

      Office.context.mailbox.item.displayReplyForm({});


      // Reply with just a body.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi'
      });


      // Reply with a body and a file attachment.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });


      // Reply with a body and an item attachment.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });


      // Reply with a body, file attachment, item attachment, and a callback.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

      Office.context.mailbox.item.displayReplyForm(
        "This is a reply with <i>some text in italics</i>."
      );

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-with-attachments.yaml

      Office.context.mailbox.item.displayReplyForm(

      {
          htmlBody : "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
          attachments :
          [
              { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
              { type: "item", itemId : Office.context.mailbox.item.itemId, name: "test_email.msg" }
          ],
          options : { asyncContext: null },
          callback : function (result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded)
              {
                  console.error(`Action failed with message ${result.error.message}`);
              }
          }
      });

      ```
    name: displayReplyForm(formData)
    fullName: displayReplyForm(formData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyForm(formData: string | ReplyFormData): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: >-
            A string that contains text and HTML and that represents the body of the reply form. The string is limited
            to 32 KB OR a [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) object that contains body or
            attachment data and a callback function.
          type:
            - 'outlook!Office.MessageRead#displayReplyForm~0:complex'
  - uid: 'outlook!Office.MessageRead#end:member'
    summary: >-
      Gets the date and time that the appointment is to end.


      The `end` property is a `Date` object expressed as a Coordinated Universal Time (UTC) date and time value. You can
      use the `convertToLocalClientTime` method to convert the `end` property value to the client's local date and time.


      When you use the `Time.setAsync` method to set the end time, you should use the `convertToUtcClientTime` method to
      convert the local time on the client to UTC for the server.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-end-read.yaml

      console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);

      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#from:member'
    summary: >-
      Gets the email address of the sender of a message.


      The `from` and `sender` properties represent the same person unless the message is sent by a delegate. In that
      case, the `from` property represents the delegator, and the `sender` property represents the delegate.


      **Note**: The `recipientType` property of the `EmailAddressDetails` object in the `from` property is undefined.


      The `from` property returns an `EmailAddressDetails` object.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml

      var msgFrom = Office.context.mailbox.item.from;

      console.log("Message received from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");

      ```
    name: from
    fullName: from
    langs:
      - typeScript
    type: property
    syntax:
      content: 'from: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.MessageRead#getAllInternetHeadersAsync:member(1)'
    summary: |-
      Gets all the internet headers for the message as a string.

      \[ [API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Get the internet headers related to the mail.

      Office.context.mailbox.item.getAllInternetHeadersAsync(
          function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                  console.log(asyncResult.value);
              } else {
                  if (asyncResult.error.code == 9020) {
                      // GenericResponseError returned when there is no context.
                      // Treat as no context.
                  } else {
                      // Handle the error.
                  }
              }
          }
      );

      ```
    name: 'getAllInternetHeadersAsync(options, callback)'
    fullName: 'getAllInternetHeadersAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getAllInternetHeadersAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. `asyncContext`<!-- -->:
            Developers can provide any object they wish to access in the callback method.
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object. On success, the internet headers
            data is provided in the `asyncResult.value` property as a string. Refer to [RFC
            2183](https://tools.ietf.org/html/rfc2183) for the formatting information of the returned string value. If
            the call fails, the `asyncResult.error` property will contain an error code with the reason for the failure.
          type:
            - 'outlook!Office.MessageRead#getAllInternetHeadersAsync~0:complex'
  - uid: 'outlook!Office.MessageRead#getAllInternetHeadersAsync:member(2)'
    summary: |-
      Gets all the internet headers for the message as a string.

      \[ [API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read
    name: getAllInternetHeadersAsync(callback)
    fullName: getAllInternetHeadersAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAllInternetHeadersAsync(callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object. On success, the internet headers
            data is provided in the asyncResult.value property as a string. Refer to [RFC
            2183](https://tools.ietf.org/html/rfc2183) for the formatting information of the returned string value. If
            the call fails, the `asyncResult.error` property will contain an error code with the reason for the failure.
          type:
            - 'outlook!Office.MessageRead#getAllInternetHeadersAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#getAttachmentContentAsync:member(1)'
    summary: >-
      Gets an attachment from a message or appointment and returns it as an `AttachmentContent` object.


      The `getAttachmentContentAsync` method gets the attachment with the specified identifier from the item. As a best
      practice, you should use the identifier to retrieve an attachment in the same session that the attachmentIds were
      retrieved with the `getAttachmentsAsync` or `item.attachments` call. In Outlook on the web and mobile devices, the
      attachment identifier is valid only within the same session. A session is over when the user closes the app, or if
      the user starts composing an inline form then subsequently pops out the form to continue in a separate window.


      \[ [API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      **Errors**:


      - `AttachmentTypeNotSupported`<!-- -->: The attachment type isn't supported. Unsupported types include embedded
      images in Rich Text Format, or item attachment types other than email or calendar items (such as a contact or task
      item).


      - `InvalidAttachmentId`<!-- -->: The attachment identifier does not exist.


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml

      var item = Office.context.mailbox.item;

      var options = {asyncContext: {currentItem: item}};

      item.getAttachmentsAsync(options, callback);


      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
              }
          }
      }


      function handleAttachmentsCallback(result) {
          // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
          switch (result.value.format) {
              case Office.MailboxEnums.AttachmentContentFormat.Base64:
                  // Handle file attachment.
                  console.log(result.value.content);
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Eml:
                  // Handle email item attachment.
                  console.log("Attachment is a message.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                  // Handle .icalender attachment.
                  console.log("Attachment is a calendar item.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Url:
                  // Handle cloud attachment.
                  console.log("Attachment is a cloud attachment.");
                  break;
              default:
                  // Handle attachment formats that are not supported.
          }
      }

      ```
    name: 'getAttachmentContentAsync(attachmentId, options, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?:
        (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: The identifier of the attachment you want to get.
          type:
            - string
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. `asyncContext`<!-- -->:
            Developers can provide any object they wish to access in the callback method.
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object. If the call fails, the
            `asyncResult.error` property will contain an error code with the reason for the failure.
          type:
            - 'outlook!Office.MessageRead#getAttachmentContentAsync~0:complex'
  - uid: 'outlook!Office.MessageRead#getAttachmentContentAsync:member(2)'
    summary: >-
      Gets an attachment from a message or appointment and returns it as an `AttachmentContent` object.


      The `getAttachmentContentAsync` method gets the attachment with the specified identifier from the item. As a best
      practice, you should use the identifier to retrieve an attachment in the same session that the attachmentIds were
      retrieved with the `getAttachmentsAsync` or `item.attachments` call. In Outlook on the web and mobile devices, the
      attachment identifier is valid only within the same session. A session is over when the user closes the app, or if
      the user starts composing an inline form then subsequently pops out the form to continue in a separate window.


      \[ [API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      **Errors**:


      - `AttachmentTypeNotSupported`<!-- -->: The attachment type isn't supported. Unsupported types include embedded
      images in Rich Text Format, or item attachment types other than email or calendar items (such as a contact or task
      item).


      - `InvalidAttachmentId`<!-- -->: The attachment identifier does not exist.
    name: 'getAttachmentContentAsync(attachmentId, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getAttachmentContentAsync(attachmentId: string, callback?: (asyncResult:
        Office.AsyncResult<AttachmentContent>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: The identifier of the attachment you want to get.
          type:
            - string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object. If the call fails, the
            `asyncResult.error` property will contain an error code with the reason for the failure.
          type:
            - 'outlook!Office.MessageRead#getAttachmentContentAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#getEntities:member(1)'
    summary: |-
      Gets the entities found in the selected item's body.

      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

      var entities = Office.context.mailbox.item.getEntities();

      var entityTypesFound = 0;

      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }

      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }

      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }

      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }

      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }

      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }

      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }

      if (entityTypesFound == 0)

      {
          console.log("No entities found on this item.");
      }

      ```
    name: getEntities()
    fullName: getEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.MessageRead#getEntitiesByType:member(1)'
    summary: |-
      Gets an array of all the entities of the specified entity type found in the selected item's body.

      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

      console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));

      ```
    name: getEntitiesByType(entityType)
    fullName: getEntitiesByType(entityType)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion |
        PhoneNumber | TaskSuggestion)[];
      return:
        type:
          - 'outlook!Office.MessageRead#getEntitiesByType~0:complex'
        description: >-
          If the value passed in `entityType` is not a valid member of the `EntityType` enumeration, the method returns
          `null`<!-- -->. If no entities of the specified type are present in the item's body, the method returns an
          empty array. Otherwise, the type of the objects in the returned array depends on the type of entity requested
          in the `entityType` parameter.
      parameters:
        - id: entityType
          description: >-
            One of the `EntityType` enumeration values.


            While the minimum permission level to use this method is `Restricted`<!-- -->, some entity types require
            `ReadItem` to access, as specified in the following table.


            <table> <tr> <th>Value of entityType</th> <th>Type of objects in returned array</th> <th>Required Permission
            Level</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Contact</td>
            <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr>
            <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td>
            <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td>
            <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restricted</td> </tr> </table>
          type:
            - 'outlook!Office.MessageRead#getEntitiesByType~1:complex'
  - uid: 'outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)'
    summary: >-
      Returns well-known entities in the selected item that pass the named filter defined in the manifest XML file.


      The `getFilteredEntitiesByName` method returns the entities that match the regular expression defined in the
      `ItemHasKnownEntity` rule element in the manifest XML file with the specified `FilterName` element value.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

      // This API would only work when you click on highlighted physical address that has the word "Way" in it.

      console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));

      ```
    name: getFilteredEntitiesByName(name)
    fullName: getFilteredEntitiesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber |
        TaskSuggestion)[];
      return:
        type:
          - 'outlook!Office.MessageRead#getFilteredEntitiesByName~0:complex'
        description: >-
          If there is no `ItemHasKnownEntity` element in the manifest with a `FilterName` element value that matches the
          `name` parameter, the method returns `null`<!-- -->. If the `name` parameter does match an
          `ItemHasKnownEntity` element in the manifest, but there are no entities in the current item that match, the
          method return an empty array.
      parameters:
        - id: name
          description: The name of the `ItemHasKnownEntity` rule element that defines the filter to match.
          type:
            - string
  - uid: 'outlook!Office.MessageRead#getRegExMatches:member(1)'
    summary: >-
      Returns string values in the selected item that match the regular expressions defined in the manifest XML file.


      The `getRegExMatches` method returns the strings that match the regular expression defined in each
      `ItemHasRegularExpressionMatch` or `ItemHasKnownEntity` rule element in the manifest XML file. For an
      `ItemHasRegularExpressionMatch` rule, a matching string has to occur in the property of the item that is specified
      by that rule. The `PropertyName` simple type defines the supported properties.


      If you specify an `ItemHasRegularExpressionMatch` rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results. Instead,
      use the `Body.getAsync` method to retrieve the entire body.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Consider an add-in manifest has the following `Rule` element:

      //<Rule xsi:type="RuleCollection" Mode="And">

      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

      //  <Rule xsi:type="RuleCollection" Mode="Or">

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut"
      PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
      RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //  </Rule>

      //</Rule>


      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

      //{

      //'fruits': ['apple','banana','Banana','coconut'],

      //'veggies': ['tomato','onion','spinach','broccoli']

      //}


      // The following example shows how to access the array of

      // matches for the regular expression rule elements `fruits`

      // and `veggies`, which are specified in the manifest.

      var allMatches = Office.context.mailbox.item.getRegExMatches();

      var fruits = allMatches.fruits;

      var veggies = allMatches.veggies;

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

      // This API would only work when you click on highlighted word "ScriptLab".

      console.log(Office.context.mailbox.item.getRegExMatches());

      ```
    name: getRegExMatches()
    fullName: getRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type:
          - any
        description: >-
          An object that contains arrays of strings that match the regular expressions defined in the manifest XML file.
          The name of each array is equal to the corresponding value of the `RegExName` attribute of the matching
          `ItemHasRegularExpressionMatch` rule or the `FilterName` attribute of the matching `ItemHasKnownEntity` rule.
  - uid: 'outlook!Office.MessageRead#getRegExMatchesByName:member(1)'
    summary: >-
      Returns string values in the selected item that match the named regular expression defined in the manifest XML
      file.


      The `getRegExMatchesByName` method returns the strings that match the regular expression defined in the
      `ItemHasRegularExpressionMatch` rule element in the manifest XML file with the specified `RegExName` element
      value.


      If you specify an `ItemHasRegularExpressionMatch` rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Consider an add-in manifest has the following `Rule` element:

      //<Rule xsi:type="RuleCollection" Mode="And">

      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

      //  <Rule xsi:type="RuleCollection" Mode="Or">

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut"
      PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
      RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //  </Rule>

      //</Rule>


      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

      //{

      //'fruits': ['apple','banana','Banana','coconut'],

      //'veggies': ['tomato','onion','spinach','broccoli']

      //}


      var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

      var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

      // This API would only work when you click on highlighted word "ScriptLab".

      console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));

      ```
    name: getRegExMatchesByName(name)
    fullName: getRegExMatchesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      return:
        type:
          - 'string[]'
        description: An array that contains the strings that match the regular expression defined in the manifest XML file.
      parameters:
        - id: name
          description: The name of the `ItemHasRegularExpressionMatch` rule element that defines the filter to match.
          type:
            - string
  - uid: 'outlook!Office.MessageRead#getSelectedEntities:member(1)'
    summary: >-
      Gets the entities found in a highlighted match a user has selected. Highlighted matches apply to contextual
      add-ins.


      **Note**: This method is not supported in Outlook on iOS or Android.


      \[ [API set: Mailbox 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

      var entities = Office.context.mailbox.item.getSelectedEntities();

      var entityTypesFound = 0;

      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }

      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }

      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }

      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }

      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }

      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }

      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }

      if (entityTypesFound == 0)

      {
          console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
      }

      ```
    name: getSelectedEntities()
    fullName: getSelectedEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.MessageRead#getSelectedRegExMatches:member(1)'
    summary: >-
      Returns string values in a highlighted match that match the regular expressions defined in the manifest XML file.
      Highlighted matches apply to contextual add-ins.


      The `getSelectedRegExMatches` method returns the strings that match the regular expression defined in each
      `ItemHasRegularExpressionMatch` or `ItemHasKnownEntity` rule element in the manifest XML file. For an
      `ItemHasRegularExpressionMatch` rule, a matching string has to occur in the property of the item that is specified
      by that rule. The `PropertyName` simple type defines the supported properties.


      If you specify an `ItemHasRegularExpressionMatch` rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results. Instead,
      use the `Body.getAsync` method to retrieve the entire body.


      **Note**: This method is not supported in Outlook on iOS or Android.


      \[ [API set: Mailbox 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Consider an add-in manifest has the following `Rule` element:

      //<Rule xsi:type="RuleCollection" Mode="And">

      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

      //  <Rule xsi:type="RuleCollection" Mode="Or">

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut"
      PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
      RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //  </Rule>

      //</Rule>


      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

      //{

      //'fruits': ['apple','banana','Banana','coconut'],

      //'veggies': ['tomato','onion','spinach','broccoli']

      //}


      // The following example shows how to access the array of matches for the

      // regular expression rule elements `fruits` and `veggies`, which are

      // specified in the manifest.

      var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();

      var fruits = selectedMatches.fruits;

      var veggies = selectedMatches.veggies;

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

      var matches = Office.context.mailbox.item.getSelectedRegExMatches();

      if (matches) {
          console.log(matches);
      }

      else {
          console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
      }

      ```
    name: getSelectedRegExMatches()
    fullName: getSelectedRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRegExMatches(): any;'
      return:
        type:
          - any
        description: >-
          An object that contains arrays of strings that match the regular expressions defined in the manifest XML file.
          The name of each array is equal to the corresponding value of the `RegExName` attribute of the matching
          `ItemHasRegularExpressionMatch` rule or the `FilterName` attribute of the matching `ItemHasKnownEntity` rule.
  - uid: 'outlook!Office.MessageRead#getSharedPropertiesAsync:member(1)'
    summary: |-
      Gets the properties of an appointment or message in a shared folder, calendar, or mailbox.

      **Note**: This method is not supported in Outlook on Mac, iOS, or Android.

      \[ [API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }


      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
        if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
          Office.context.mailbox.item.getSharedPropertiesAsync(
            {
              // Pass auth token along.
              asyncContext: result.value
            },
            function(result2) {
              let sharedProperties = result2.value;
              let delegatePermissions = sharedProperties.delegatePermissions;

              // Determine if user can do the expected operation, e.g., do they have Write permission?
              if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
                var ewsId = Office.context.mailbox.item.itemId;
                var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
                let rest_url =
                  sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

                $.ajax({
                  url: rest_url,
                  dataType: "json",
                  headers: { Authorization: "Bearer " + result2.asyncContext }
                })
                  .done(function(response) {
                    console.log(response);
                  })
                  .fail(function(error) {
                    console.error(error);
                  });
              }
            }
          );
        }
      });

      ```
    name: 'getSharedPropertiesAsync(options, callback)'
    fullName: 'getSharedPropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult:
        Office.AsyncResult<SharedProperties>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: >-
            An object literal that contains one or more of the following properties. `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback method.
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->. The `value` property of the result is the properties of the shared
            item.
          type:
            - 'outlook!Office.MessageRead#getSharedPropertiesAsync~0:complex'
  - uid: 'outlook!Office.MessageRead#getSharedPropertiesAsync:member(2)'
    summary: |-
      Gets the properties of an appointment or message in a shared folder, calendar, or mailbox.

      **Note**: This method is not supported in Outlook on Mac, iOS, or Android.

      \[ [API set: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }


      Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
        console.log(result.value);
      });

      ```
    name: getSharedPropertiesAsync(callback)
    fullName: getSharedPropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->. The `value` property of the result is the properties of the shared
            item.
          type:
            - 'outlook!Office.MessageRead#getSharedPropertiesAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#internetMessageId:member'
    summary: Gets the internet message identifier for an email message.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml

      console.log(`Internet message ID: ${Office.context.mailbox.item.internetMessageId}`);

      ```
    name: internetMessageId
    fullName: internetMessageId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'internetMessageId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemClass:member'
    summary: >-
      Gets the Exchange Web Services item class of the selected item.


      You can create custom message classes that extends a default message class, for example, a custom appointment
      message class `IPM.Appointment.Contoso`<!-- -->.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      The `itemClass` property specifies the message class of the selected item. The following are the default message
      classes for the message or appointment item.


      <table> <tr> <th>Type</th> <th>Description</th> <th>Item Class</th> </tr> <tr> <td>Appointment items</td>
      <td>These are calendar items of the item class IPM.Appointment or IPM.Appointment.Occurrence.</td>
      <td>IPM.Appointment,IPM.Appointment.Occurrence</td> </tr> <tr> <td>Message items</td> <td>These include email
      messages that have the default message class IPM.Note, and meeting requests, responses, and cancellations, that
      use IPM.Schedule.Meeting as the base message class.</td>
      <td>IPM.Note,IPM.Schedule.Meeting.Request,IPM.Schedule.Meeting.Neg,IPM.Schedule.Meeting.Pos,IPM.Schedule.Meeting.Tent,IPM.Schedule.Meeting.Canceled</td>
      </tr> </table>


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-class-read.yaml

      console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);

      ```
    name: itemClass
    fullName: itemClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemClass: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemId:member'
    summary: >-
      Gets the [Exchange Web Services item
      identifier](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)
      for the current item.


      The `itemId` property is not available in compose mode. If an item identifier is required, the `saveAsync` method
      can be used to save the item to the store, which will return the item identifier in the `asyncResult.value`
      parameter in the callback function.


      **Note**: The identifier returned by the `itemId` property is the same as the [Exchange Web Services item
      identifier](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)<!--
      -->. The `itemId` property is not identical to the Outlook Entry ID or the ID used by the Outlook REST API. Before
      making REST API calls using this value, it should be converted using `Office.context.mailbox.convertToRestId`<!--
      -->. For more details, see [Use the Outlook REST APIs from an Outlook
      add-in](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id)<!-- -->.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // The following code checks for the presence of an item

      // identifier. If the `itemId` property returns `null` or

      // `undefined`, it saves the item to the store and gets the

      // item identifier from the asynchronous result.

      // **Important**: `saveAsync` was introduced with requirement set 1.3

      // so you can't get the `itemId` in Compose mode in earlier sets.

      var itemId = Office.context.mailbox.item.itemId;

      if (itemId === null || itemId == undefined) {
          Office.context.mailbox.item.saveAsync(function(result) {
              itemId = result.value;
          });
      }

      ```
    name: itemId
    fullName: itemId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemType:member'
    summary: >-
      Gets the type of item that an instance represents.


      The `itemType` property returns one of the `ItemType` enumeration values, indicating whether the item object
      instance is a message or an appointment.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml

      console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.MessageRead#itemType~0:complex'
  - uid: 'outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)'
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key/value pairs on a per-app, per-item basis. This method returns a
      `CustomProperties` object in the callback, which provides methods to access the custom properties specific to the
      current item and the current add-in. Custom properties are not encrypted on the item, so this should not be used
      as secure storage.


      The custom properties are provided as a `CustomProperties` object in the `asyncResult.value` property. This object
      can be used to get, set, and remove custom properties from the item and save changes to the custom property set
      back to the server.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // The following example shows how to use the loadCustomPropertiesAsync method

      // to asynchronously load custom properties that are specific to the current item.

      // The example also shows how to use the saveAsync method to save these properties

      // back to the server. After loading the custom properties, the example uses the

      // get method to read the custom property myProp, the set method to write the

      // custom property otherProp, and then finally calls the saveAsync method to save

      // the custom properties.

      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };


      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }


      function saveCallback(asyncResult) {

      }

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });

      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void,
        userContext?: any): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageRead#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: >-
            Optional. Developers can provide any object they wish to access in the callback function. This object can be
            accessed by the `asyncResult.asyncContext` property in the callback function.
          type:
            - any
  - uid: 'outlook!Office.MessageRead#location:member'
    summary: |-
      Gets the location of a meeting request.

      The `location` property returns a string that contains the location of the appointment.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-location-read.yaml

      console.log(`Appointment location: ${Office.context.mailbox.item.location}`);

      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#normalizedSubject:member'
    summary: >-
      Gets the subject of an item, with all prefixes removed (including RE: and FWD:).


      The `normalizedSubject` property gets the subject of the item, with any standard prefixes (such as RE: and FW:)
      that are added by email programs. To get the subject of the item with the prefixes intact, use the `subject`
      property.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

      console.log(`Normalized subject: ${Office.context.mailbox.item.normalizedSubject}`);

      ```
    name: normalizedSubject
    fullName: normalizedSubject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#notificationMessages:member'
    summary: |-
      Gets the notification messages for an item.

      \[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

      var id = $("#notificationId").val();

      var details =
        {
          type: "progressIndicator",
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

      var id = $("#notificationId").val();

      var details =
        {
          type: "informationalMessage",
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

      var id = $("#notificationId").val();

      var details =
        {
          type: "informationalMessage",
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

      var id = $("#notificationId").val();

      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: "informationalMessage",
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);
      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml

      var id = $("#notificationId").val();

      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);

      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.MessageRead#recurrence:member'
    summary: >-
      Gets the recurrence pattern of an appointment. Gets the recurrence pattern of a meeting request. Read and compose
      modes for appointment items. Read mode for meeting request items.


      The `recurrence` property returns a `Recurrence` object for recurring appointments or meetings requests if an item
      is a series or an instance in a series. `null` is returned for single appointments and meeting requests of single
      appointments. `undefined` is returned for messages that are not meeting requests.


      **Note**: Meeting requests have an itemClass value of `IPM.Schedule.Meeting.Request`<!-- -->.


      **Note**: If the `recurrence` object is null, this indicates that the object is a single appointment or a meeting
      request of a single appointment and NOT a part of a series.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-recurrence-read.yaml

      var recurrence = Office.context.mailbox.item.recurrence;


      if (recurrence === undefined) {
        console.log("This item is a message but not a meeting request.");
      } else if (recurrence === null) {
        console.log("This is a single appointment.");
      } else {
        console.log(JSON.stringify(recurrence));
      }

      ```
    name: recurrence
    fullName: recurrence
    langs:
      - typeScript
    type: property
    syntax:
      content: 'recurrence: Recurrence;'
      return:
        type:
          - 'outlook!Office.Recurrence:interface'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync:member(1)'
    summary: >-
      Removes the event handlers for a supported event type. **Note**: Events are available only with task pane.


      Refer to the Item object model [events
      section](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events)
      for supported events.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?:
        (asyncResult: Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should revoke the handler.
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~0:complex'
        - id: options
          description: >-
            Optional. An object literal that contains one or more of the following properties. `asyncContext`<!-- -->:
            Developers can provide any object they wish to access in the callback method.
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object.
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync:member(2)'
    summary: >-
      Removes the event handlers for a supported event type. **Note**: Events are available only with task pane.


      Refer to the Item object model [events
      section](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events)
      for supported events.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: The event that should revoke the handler.
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~2:complex'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter, `asyncResult`<!-- -->, which is an `Office.AsyncResult` object.
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageRead#sender:member'
    summary: >-
      Gets the email address of the sender of an email message.


      The `from` and `sender` properties represent the same person unless the message is sent by a delegate. In that
      case, the `from` property represents the delegator, and the `sender` property represents the delegate.


      **Note**: The `recipientType` property of the `EmailAddressDetails` object in the `sender` property is undefined.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml

      var msgSender = Office.context.mailbox.item.sender;

      console.log("Sender: " + msgSender.displayName + " (" + msgSender.emailAddress + ")");

      ```
    name: sender
    fullName: sender
    langs:
      - typeScript
    type: property
    syntax:
      content: 'sender: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.MessageRead#seriesId:member'
    summary: >-
      Gets the id of the series that an instance belongs to.


      In Outlook on the web and desktop clients, the `seriesId` returns the Exchange Web Services (EWS) ID of the parent
      (series) item that this item belongs to. However, on iOS and Android, the `seriesId` returns the REST ID of the
      parent item.


      **Note**: The identifier returned by the `seriesId` property is the same as the Exchange Web Services item
      identifier. The `seriesId` property is not identical to the Outlook IDs used by the Outlook REST API. Before
      making REST API calls using this value, it should be converted using `Office.context.mailbox.convertToRestId`<!--
      -->. For more details, see [Use the Outlook REST APIs from an Outlook
      add-in](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.


      The `seriesId` property returns `null` for items that do not have parent items such as single appointments, series
      items, or meeting requests and returns `undefined` for any other items that are not meeting requests.


      \[ [API set: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml

      var seriesId = Office.context.mailbox.item.seriesId;


      if (seriesId === undefined) {
        console.log("This is a message that's not a meeting request.");
      } else if (seriesId === null) {
        console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
      } else {
        console.log("This is an instance belonging to series with ID " + seriesId);
      }

      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#start:member'
    summary: >-
      Gets the date and time that the appointment is to begin.


      The `start` property is a `Date` object expressed as a Coordinated Universal Time (UTC) date and time value. You
      can use the `convertToLocalClientTime` method to convert the value to the client's local date and time.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-start-read.yaml

      console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);

      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#subject:member'
    summary: >-
      Gets the description that appears in the subject field of an item.


      The `subject` property gets or sets the entire subject of the item, as sent by the email server.


      The `subject` property returns a string. Use the `normalizedSubject` property to get the subject minus any leading
      prefixes such as RE: and FW:.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-subject-read.yaml

      console.log(`Subject: ${Office.context.mailbox.item.subject}`);

      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#to:member'
    summary: >-
      Provides access to the recipients on the To line of a message. The type of object and level of access depends on
      the mode of the current item.


      The `to` property returns an array that contains an `EmailAddressDetails` object for each recipient listed on the
      To line of the message. By default, the collection is limited to a maximum of 100 members. However, in Outlook on
      the web, you can get 20 members maximum, while on Windows and Mac, you can get 500 members maximum.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `ReadItem`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

      var msgTo = Office.context.mailbox.item.to;

      console.log("Message sent to:");

      for (var i = 0; i < msgTo.length; i++) {
        console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
      }

      ```
    name: to
    fullName: to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#to~0:complex'
references:
  - uid: 'outlook!Office.Message:interface'
    name: Message
  - uid: 'outlook!Office.ItemRead:interface'
    name: ItemRead
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#attachments~0:complex'
    name: 'AttachmentDetails[]'
    fullName: 'Office.AttachmentDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Categories:interface'
    name: Categories
  - uid: 'outlook!Office.MessageRead#cc~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.MessageRead#displayReplyAllForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.MessageRead#displayReplyForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.EmailAddressDetails:interface'
    name: EmailAddressDetails
  - uid: 'outlook!Office.MessageRead#getAllInternetHeadersAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageRead#getAllInternetHeadersAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageRead#getAttachmentContentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageRead#getAttachmentContentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Entities:interface'
    name: Entities
  - uid: 'outlook!Office.MessageRead#getEntitiesByType~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.MessageRead#getEntitiesByType~1:complex'
    name: MailboxEnums.EntityType | string
    fullName: Office.MailboxEnums.EntityType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.EntityType:enum'
        name: MailboxEnums.EntityType
        fullName: Office.MailboxEnums.EntityType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#getFilteredEntitiesByName~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.MessageRead#getSharedPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageRead#getSharedPropertiesAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageRead#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.Recurrence:interface'
    name: Recurrence
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#to~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
