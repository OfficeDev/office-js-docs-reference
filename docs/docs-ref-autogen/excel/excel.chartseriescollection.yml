### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ChartSeriesCollection
    summary: |-
      Represents a collection of chart series.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.ChartSeriesCollection
    fullName: excel.Excel.ChartSeriesCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.ChartSeriesCollection.add
      - excel.Excel.ChartSeriesCollection.count
      - excel.Excel.ChartSeriesCollection.getCount
      - excel.Excel.ChartSeriesCollection.getItemAt
      - excel.Excel.ChartSeriesCollection.items
      - excel.Excel.ChartSeriesCollection.load
      - excel.Excel.ChartSeriesCollection.toJSON
  - uid: excel.Excel.ChartSeriesCollection.add
    summary: >-
      Add a new series to the collection. The new added series is not visible until set values/x axis values/bubble
      sizes for it (depending on chart type).


      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(name, index)'
    fullName: excel.Excel.ChartSeriesCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name?: string, index?: number): Excel.ChartSeries;'
      return:
        type:
          - excel.Excel.ChartSeries
        description: ''
      parameters:
        - id: name
          description: Optional. Name of the series.
          type:
            - string
        - id: index
          description: Optional. Index value of the series to be added. Zero-indexed.
          type:
            - number
  - uid: excel.Excel.ChartSeriesCollection.count
    summary: |-
      Returns the number of series in the collection. Read-only.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: count
    fullName: excel.Excel.ChartSeriesCollection.count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: excel.Excel.ChartSeriesCollection.getCount
    summary: |-
      Returns the number of series in the collection.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.ChartSeriesCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.ChartSeriesCollection.getItemAt
    summary: |-
      Retrieves a series based on its position in the collection.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItemAt(index)
    fullName: excel.Excel.ChartSeriesCollection.getItemAt
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.ChartSeries;'
      return:
        type:
          - excel.Excel.ChartSeries
        description: |-

          #### Examples

          ```javascript
          // Get the name of the first series in the series collection.
          Excel.run(function (ctx) { 
              var seriesCollection = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series;
              seriesCollection.load('items');
              return ctx.sync().then(function() {
                  console.log(seriesCollection.items[0].name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type:
            - number
  - uid: excel.Excel.ChartSeriesCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.ChartSeriesCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.ChartSeries[];'
      return:
        type:
          - 'Excel.ChartSeries[]'
  - uid: excel.Excel.ChartSeriesCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): Excel.ChartSeriesCollection` - Where option.select is a
      comma-delimited string that specifies the properties/relationships to load, and options.expand is a
      comma-delimited string that specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartSeriesCollection` -
      Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip specifies the number of items that are
      to be skipped and not included in the result. If option.top is specified, the result set will start after skipping
      the specified number of items.

      #### Examples


      ```javascript

      // Getting the names of series in the series collection.

      Excel.run(function (ctx) { 
          var seriesCollection = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series;
          seriesCollection.load('items');
          return ctx.sync().then(function() {
              for (var i = 0; i < seriesCollection.items.length; i++)
              {
                  console.log(seriesCollection.items[i].name);
              }
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Get the number of chart series in collection.

      Excel.run(function (ctx) { 
          var seriesCollection = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1").series;
          seriesCollection.load('count');
          return ctx.sync().then(function() {
              console.log("series: Count= " + seriesCollection.count);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: excel.Excel.ChartSeriesCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): Excel.ChartSeriesCollection;'
      return:
        type:
          - excel.Excel.ChartSeriesCollection
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties/relationships to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.ChartSeriesCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.ChartSeriesCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ChartSeriesCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.ChartSeriesCollectionData
        description: ''
