### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPartScopedCollection
    summary: >-
      A scoped collection of custom XML parts. A scoped collection is the result of some operation, e.g. filtering by
      namespace. A scoped collection cannot be scoped any further.


      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.CustomXmlPartScopedCollection
    fullName: excel.Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.CustomXmlPartScopedCollection.getCount
      - excel.Excel.CustomXmlPartScopedCollection.getItem
      - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.items
      - excel.Excel.CustomXmlPartScopedCollection.load
      - excel.Excel.CustomXmlPartScopedCollection.toJSON
  - uid: excel.Excel.CustomXmlPartScopedCollection.getCount
    summary: |-
      Gets the number of CustomXML parts in this collection.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.CustomXmlPartScopedCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItem
    summary: |-
      Gets a custom XML part based on its ID.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItem(id)
    fullName: excel.Excel.CustomXmlPartScopedCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
    summary: >-
      Gets a custom XML part based on its ID. If the CustomXmlPart does not exist, the return object's isNull property
      will be true.


      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItemOrNullObject(id)
    fullName: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const settings = context.workbook.settings;
          const xmlPartIDSetting = settings.getItem("ContosoReviewXmlPartId").load("value");

          await context.sync();
          
          let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
          const xmlBlob = customXmlPart.getXml();
          customXmlPart.delete();
          customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

          await context.sync();

          if (customXmlPart.isNullObject) {
              $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

              // Delete the unneeded setting too.
              xmlPartIDSetting.delete();            
          } else {
              const readableXml = addLineBreaksToXML(xmlBlob.value);
              const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
              $("#display-xml").text(strangeMessage);
          }

          await context.sync();
      });
      ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
    summary: |-
      If the collection contains exactly one item, this method returns it. Otherwise, this method produces an error.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getOnlyItem()
    fullName: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - Excel.CustomXmlPart
        description: ''
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
    summary: |-
      If the collection contains exactly one item, this method returns it. Otherwise, this method returns Null.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getOnlyItemOrNullObject()
    fullName: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - Excel.CustomXmlPart
        description: ''
  - uid: excel.Excel.CustomXmlPartScopedCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.CustomXmlPartScopedCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: excel.Excel.CustomXmlPartScopedCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        load(option?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions &
        Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;
      return:
        type:
          - Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.CustomXmlPartScopedCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
      return:
        type:
          - Excel.Interfaces.CustomXmlPartScopedCollectionData
        description: ''
