### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPartScopedCollection
    summary: >-
      A scoped collection of custom XML parts. A scoped collection is the result of some operation, e.g. filtering by
      namespace. A scoped collection cannot be scoped any further.


      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.CustomXmlPartScopedCollection
    fullName: excel.Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.CustomXmlPartScopedCollection.getCount
      - excel.Excel.CustomXmlPartScopedCollection.getItem
      - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.items
      - excel.Excel.CustomXmlPartScopedCollection.load
      - excel.Excel.CustomXmlPartScopedCollection.toJSON
  - uid: excel.Excel.CustomXmlPartScopedCollection.getCount
    summary: |-
      Gets the number of CustomXML parts in this collection.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.CustomXmlPartScopedCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.
                      There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItem
    summary: |-
      Gets a custom XML part based on its ID.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItem(id)
    fullName: excel.Excel.CustomXmlPartScopedCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
    summary: >-
      Gets a custom XML part based on its ID. If the CustomXmlPart does not exist, the return object's isNull property
      will be true.


      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItemOrNullObject(id)
    fullName: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItem("ContosoReviewXmlPartId").load("value");

              await context.sync();
              
              let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
              const xmlBlob = customXmlPart.getXml();
              customXmlPart.delete();
              customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

              await context.sync();

              if (customXmlPart.isNullObject) {
                  $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                  // Delete the unneeded setting too.
                  xmlPartIDSetting.delete();            
              } else {
                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                  $("#display-xml").text(strangeMessage);
              }

              await context.sync();
          });
          ```
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
    summary: |-
      If the collection contains exactly one item, this method returns it. Otherwise, this method produces an error.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getOnlyItem()
    fullName: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.
                      There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
    summary: |-
      If the collection contains exactly one item, this method returns it. Otherwise, this method returns Null.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getOnlyItemOrNullObject()
    fullName: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
  - uid: excel.Excel.CustomXmlPartScopedCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.CustomXmlPartScopedCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select
      is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string
      that specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }):
      Excel.CustomXmlPartScopedCollection` - Only available on collection types. It is similar to the preceding
      signature. Option.top specifies the maximum number of collection items that can be included in the result.
      Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is
      specified, the result set will start after skipping the specified number of items.
    name: load(option)
    fullName: excel.Excel.CustomXmlPartScopedCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.CustomXmlPartScopedCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
        description: ''
