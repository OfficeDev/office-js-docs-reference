### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPartCollection
    summary: |-
      A collection of custom XML parts.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.CustomXmlPartCollection
    fullName: excel.Excel.CustomXmlPartCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.CustomXmlPartCollection.add
      - excel.Excel.CustomXmlPartCollection.getByNamespace
      - excel.Excel.CustomXmlPartCollection.getCount
      - excel.Excel.CustomXmlPartCollection.getItem
      - excel.Excel.CustomXmlPartCollection.getItemOrNullObject
      - excel.Excel.CustomXmlPartCollection.items
      - excel.Excel.CustomXmlPartCollection.load
      - excel.Excel.CustomXmlPartCollection.toJSON
  - uid: excel.Excel.CustomXmlPartCollection.add
    summary: |-
      Adds a new custom XML part to the workbook.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: add(xml)
    fullName: excel.Excel.CustomXmlPartCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(xml: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |


          #### Examples

          ```typescript
          await Excel.run(async (context) => {

              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
      parameters:
        - id: xml
          description: XML content. Must be a valid XML fragment.
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.getByNamespace
    summary: |-
      Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getByNamespace(namespaceUri)
    fullName: excel.Excel.CustomXmlPartCollection.getByNamespace
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: |


          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.
                      There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
      parameters:
        - id: namespaceUri
          description: 'This must be a fully qualified schema URI; for example, "http://schemas.contoso.com/review/1.0".'
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.getCount
    summary: |-
      Gets the number of CustomXml parts in the collection.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.CustomXmlPartCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.CustomXmlPartCollection.getItem
    summary: |-
      Gets a custom XML part based on its ID.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItem(id)
    fullName: excel.Excel.CustomXmlPartCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |


          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItem("ContosoReviewXmlPartId").load("value");

              await context.sync();
              
              const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

              // The setXml method does a whole-for-whole replacement 
              // of the entire XML.
              customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              await context.sync();
          });
          ```
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.getItemOrNullObject
    summary: >-
      Gets a custom XML part based on its ID. If the CustomXmlPart does not exist, the return object's isNull property
      will be true.


      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItemOrNullObject(id)
    fullName: excel.Excel.CustomXmlPartCollection.getItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.CustomXmlPartCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel.Excel.CustomXmlPartCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection` - Where option.select is a
      comma-delimited string that specifies the properties/relationships to load, and options.expand is a
      comma-delimited string that specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection`
      - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip specifies the number of items that are
      to be skipped and not included in the result. If option.top is specified, the result set will start after skipping
      the specified number of items.
    name: load(option)
    fullName: excel.Excel.CustomXmlPartCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties/relationships to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPartCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.CustomXmlPartCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartCollectionData
        description: ''
