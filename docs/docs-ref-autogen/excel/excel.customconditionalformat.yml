### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomConditionalFormat
    summary: |-
      Represents a custom conditional format type.

      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.CustomConditionalFormat
    fullName: excel.Excel.CustomConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) {
          var sheet = ctx.workbook.worksheets.getActiveWorksheet();
          var range = sheet.getRange("A1:A5");
          range.values = [[1], [20], [""], [5], ["test"]];
          var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
          var cfCustom = cf.customOrNullObject;
          cfCustom.rule.formula = "=ISBLANK(A1)";
          cfCustom.format.fill.color = "#00FF00";
          return ctx.sync().then(function () {
              console.log("Added new custom conditional format highlighting all blank cells.");
          });
      }).catch(function (error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
    children:
      - excel.Excel.CustomConditionalFormat.format
      - excel.Excel.CustomConditionalFormat.load
      - excel.Excel.CustomConditionalFormat.rule
      - excel.Excel.CustomConditionalFormat.set
      - excel.Excel.CustomConditionalFormat.toJSON
  - uid: excel.Excel.CustomConditionalFormat.format
    summary: |-
      Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.

      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: format
    fullName: excel.Excel.CustomConditionalFormat.format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.ConditionalRangeFormat;'
      return:
        type:
          - Excel.ConditionalRangeFormat
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
          conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
          conditionalFormat.custom.format.font.color = "green";

          await context.sync();
      });
      ```
  - uid: excel.Excel.CustomConditionalFormat.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: excel.Excel.CustomConditionalFormat.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomConditionalFormatLoadOptions): Excel.CustomConditionalFormat;'
      return:
        type:
          - Excel.CustomConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomConditionalFormatLoadOptions
  - uid: excel.Excel.CustomConditionalFormat.rule
    summary: |-
      Represents the Rule object on this conditional format.

      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: rule
    fullName: excel.Excel.CustomConditionalFormat.rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rule: Excel.ConditionalFormatRule;'
      return:
        type:
          - Excel.ConditionalFormatRule
  - uid: excel.Excel.CustomConditionalFormat.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: excel.Excel.CustomConditionalFormat.set
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.CustomConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.CustomConditionalFormatUpdateData
        - id: options
          description: ''
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.CustomConditionalFormat.toJSON
    name: toJSON()
    fullName: excel.Excel.CustomConditionalFormat.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomConditionalFormatData;'
      return:
        type:
          - Excel.Interfaces.CustomConditionalFormatData
        description: ''
