### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ConditionalFormatCollection
    summary: |-
      Represents a collection of all the conditional formats that are overlap the range.

      \[ [API set: ExcelApi 1.6](http://bing.com?type=excel) \]
    name: Excel.ConditionalFormatCollection
    fullName: excel.Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.ConditionalFormatCollection.add
      - excel.Excel.ConditionalFormatCollection.clearAll
      - excel.Excel.ConditionalFormatCollection.getCount
      - excel.Excel.ConditionalFormatCollection.getItem
      - excel.Excel.ConditionalFormatCollection.getItemAt
      - excel.Excel.ConditionalFormatCollection.items
      - excel.Excel.ConditionalFormatCollection.load
      - excel.Excel.ConditionalFormatCollection.toJSON
  - uid: excel.Excel.ConditionalFormatCollection.add
    summary: |-
      Adds a new conditional format to the collection at the first/top priority.

      \[ [API set: ExcelApi 1.6](http://bing.com?type=excel) \]
    name: add(type)
    fullName: excel.Excel.ConditionalFormatCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
      return:
        type:
          - Excel.ConditionalFormat
        description: ''
      parameters:
        - id: type
          description: The type of conditional format being added. See Excel.ConditionalFormatType for details.
          type:
            - Excel.ConditionalFormatType
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) {
          var sheetName = "Sheet1";
          var rangeAddress = "A1:C3";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
          conditionalFormat.iconOrNull.style = "YellowThreeArrows";
          return ctx.sync().then(function () {
              console.log("Added new yellow three arrow icon set.");
          });
      }).catch(function (error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
          });
      ```
  - uid: excel.Excel.ConditionalFormatCollection.clearAll
    summary: |-
      Clears all conditional formats active on the current specified range.

      \[ [API set: ExcelApi 1.6](http://bing.com?type=excel) \]
    name: clearAll()
    fullName: excel.Excel.ConditionalFormatCollection.clearAll
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) {
          var sheetName = "Sheet1";
          var rangeAddress = "A1:C3";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var conditionalFormats = range.conditionalFormats;
          var conditionalFormat = conditionalFormats.clearAll();
          return ctx.sync().then(function () {
              console.log("Cleared all conditional formats from this range.");
          });
      }).catch(function (error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
          });
      ```
  - uid: excel.Excel.ConditionalFormatCollection.getCount
    summary: |-
      Returns the number of conditional formats in the workbook. Read-only.

      \[ [API set: ExcelApi 1.6](http://bing.com?type=excel) \]
    name: getCount()
    fullName: excel.Excel.ConditionalFormatCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) {
          var sheetName = "Sheet1";
          var rangeAddress = "A1:C3";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
          conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;
          var cfCount = range.conditionalFormats.getCount(); 

          return ctx.sync().then(function () {
              console.log("Count: " + cfCount.value);
          });
      }).catch(function (error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.ConditionalFormatCollection.getItem
    summary: |-
      Returns a conditional format for the given ID.

      \[ [API set: ExcelApi 1.6](http://bing.com?type=excel) \]
    name: getItem(id)
    fullName: excel.Excel.ConditionalFormatCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.ConditionalFormat;'
      return:
        type:
          - Excel.ConditionalFormat
        description: Conditional Format object.
      parameters:
        - id: id
          description: The id of the conditional format.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) {
          var sheetName = "Sheet1";
          var rangeAddress = "A1:C3";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var conditionalFormats = range.conditionalFormats;
          var conditionalFormat = conditionalFormats.getItemAt(3);
          return ctx.sync().then(function () {
              console.log("Conditional Format at Item 3 Loaded");
          });
      }).catch(function (error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
          });
      ```
  - uid: excel.Excel.ConditionalFormatCollection.getItemAt
    summary: |-
      Returns a conditional format at the given index.

      \[ [API set: ExcelApi 1.6](http://bing.com?type=excel) \]
    name: getItemAt(index)
    fullName: excel.Excel.ConditionalFormatCollection.getItemAt
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.ConditionalFormat;'
      return:
        type:
          - Excel.ConditionalFormat
        description: ''
      parameters:
        - id: index
          description: Index of the conditional formats to be retrieved.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) {
          var sheetName = "Sheet1";
          var rangeAddress = "A1:C3";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var conditionalFormats = range.conditionalFormats;
          var conditionalFormat = conditionalFormats.getItemAt(3);
          return ctx.sync().then(function () {
              console.log("Conditional Format at Item 3 Loaded");
          });
      }).catch(function (error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
          });
      ```
  - uid: excel.Excel.ConditionalFormatCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.ConditionalFormatCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.ConditionalFormat[];'
      return:
        type:
          - 'Excel.ConditionalFormat[]'
  - uid: excel.Excel.ConditionalFormatCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: excel.Excel.ConditionalFormatCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        load(option?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.ConditionalFormatCollection;
      return:
        type:
          - Excel.ConditionalFormatCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.ConditionalFormatCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.ConditionalFormatCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
      return:
        type:
          - Excel.Interfaces.ConditionalFormatCollectionData
        description: ''
