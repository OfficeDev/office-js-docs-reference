### YamlMime:UniversalReference
items:
  - uid: excel.Excel.NamedItemCollection
    summary: >-
      A collection of all the NamedItem objects that are part of the workbook or worksheet, depending on how it was
      reached.


      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.NamedItemCollection
    fullName: excel.Excel.NamedItemCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.NamedItemCollection.add
      - excel.Excel.NamedItemCollection.addFormulaLocal
      - excel.Excel.NamedItemCollection.getCount
      - excel.Excel.NamedItemCollection.getItem
      - excel.Excel.NamedItemCollection.getItemOrNullObject
      - excel.Excel.NamedItemCollection.items
      - excel.Excel.NamedItemCollection.load
      - excel.Excel.NamedItemCollection.toJSON
  - uid: excel.Excel.NamedItemCollection.add
    summary: |-
      Adds a new name to the collection of the given scope.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(name, reference, comment)'
    fullName: excel.Excel.NamedItemCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name: string, reference: Range | string, comment?: string): Excel.NamedItem;'
      return:
        type:
          - excel.Excel.NamedItem
        description: ''
      parameters:
        - id: name
          description: The name of the named item.
          type:
            - string
        - id: reference
          description: The formula or the range that the name will refer to.
          type:
            - Range | string
        - id: comment
          description: Optional. The comment associated with the named item.
          type:
            - string
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const headerRange = sheet.getRange("A1:E1");
          sheet.names.add("ExpensesHeader", headerRange);
          const namedItems = sheet.names.load("name, type");

          await context.sync();

          let namedItemsList = `This workbook contains ${namedItems.items.length} named item(s):`;
          for (let i = 0; i < namedItems.items.length; i++) {
              namedItemsList += JSON.stringify(namedItems.items[i]);
          }
          OfficeHelpers.UI.notify(namedItemsList);

          await context.sync();
      });
      ```

      ```typescript
      try {
          await Excel.run(async (context) => {

              await OfficeHelpers.ExcelUtilities.forceCreateSheet(context.workbook, "Sample");

              const sheet = context.workbook.worksheets.getItem("Sample");

              let expensesTable = sheet.tables.add("A1:D1", true);
              expensesTable.name = "ExpensesTable";

              expensesTable.getHeaderRowRange().values = [["DATE", "MERCHANT", "CATEGORY", "AMOUNT"]];

              let newData = transactions.map(item =>
                  [item.DATE, item.MERCHANT, item.CATEGORY, item.AMOUNT]);

              expensesTable.rows.add(null, newData);

              sheet.names.add("TotalAmount", "=SUM(ExpensesTable[AMOUNT])");

              sheet.getRange("D11").values = [["=TotalAmount"]];

              if (Office.context.requirements.isSetSupported("ExcelAPI", 1.2)) {
                  sheet.getUsedRange().format.autofitColumns();
                  sheet.getUsedRange().format.autofitRows();
              }

              sheet.activate();

              await context.sync();
          });
      }
      catch (error) {
          OfficeHelpers.UI.notify(error);
          OfficeHelpers.Utilities.log(error);
      }
      ```
  - uid: excel.Excel.NamedItemCollection.addFormulaLocal
    summary: |-
      Adds a new name to the collection of the given scope using the user's locale for the formula.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'addFormulaLocal(name, formula, comment)'
    fullName: excel.Excel.NamedItemCollection.addFormulaLocal
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFormulaLocal(name: string, formula: string, comment?: string): Excel.NamedItem;'
      return:
        type:
          - excel.Excel.NamedItem
        description: ''
      parameters:
        - id: name
          description: The "name" of the named item.
          type:
            - string
        - id: formula
          description: The formula in the user's locale that the name will refer to.
          type:
            - string
        - id: comment
          description: Optional. The comment associated with the named item.
          type:
            - string
  - uid: excel.Excel.NamedItemCollection.getCount
    summary: |-
      Gets the number of named items in the collection.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.NamedItemCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.NamedItemCollection.getItem
    summary: |-
      Gets a NamedItem object using its name.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItem(name)
    fullName: excel.Excel.NamedItemCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(name: string): Excel.NamedItem;'
      return:
        type:
          - excel.Excel.NamedItem
        description: ''
      parameters:
        - id: name
          description: Nameditem name.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = 'Sheet1';
          var nameditem = ctx.workbook.names.getItem(sheetName);
          nameditem.load('type');
          return ctx.sync().then(function() {
                  console.log(nameditem.type);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.NamedItemCollection.getItemOrNullObject
    summary: |-
      Gets a NamedItem object using its name. If the nameditem object does not exist, will return a null object.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItemOrNullObject(name)
    fullName: excel.Excel.NamedItemCollection.getItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(name: string): Excel.NamedItem;'
      return:
        type:
          - excel.Excel.NamedItem
        description: ''
      parameters:
        - id: name
          description: Nameditem name.
          type:
            - string
  - uid: excel.Excel.NamedItemCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.NamedItemCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.NamedItem[];'
      return:
        type:
          - 'Excel.NamedItem[]'
  - uid: excel.Excel.NamedItemCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >
      In addition to this signature, this method has the following signatures:


      `load(option?: string \| string\[\]): Excel.NamedItemCollection` - Where option is a comma-delimited string or an
      array of strings that specify the properties/relationships to load.


      `load(option?: { select?: string; expand?: string; }): Excel.NamedItemCollection` - Where option.select is a
      comma-delimited string that specifies the properties/relationships to load, and options.expand is a
      comma-delimited string that specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.NamedItemCollection` -
      Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip specifies the number of items that are
      to be skipped and not included in the result. If option.top is specified, the result set will start after skipping
      the specified number of items.


      #### Examples


      ```javascript

      Excel.run(function (ctx) { 
          var nameditems = ctx.workbook.names;
          nameditems.load('items');
          return ctx.sync().then(function() {
              for (var i = 0; i < nameditems.items.length; i++)
              {
                  console.log(nameditems.items[i].name);
                  console.log(nameditems.items[i].index);
              }
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: excel.Excel.NamedItemCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        load(option?: Excel.Interfaces.NamedItemCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.NamedItemCollection;
      return:
        type:
          - excel.Excel.NamedItemCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.NamedItemCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.NamedItemCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.NamedItemCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.NamedItemCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.NamedItemCollectionData
        description: ''
