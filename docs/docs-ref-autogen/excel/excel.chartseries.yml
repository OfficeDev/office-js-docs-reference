### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ChartSeries
    summary: |-
      Represents a series in a chart.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.ChartSeries
    fullName: excel.Excel.ChartSeries
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.ChartSeries.chartType
      - excel.Excel.ChartSeries.delete
      - excel.Excel.ChartSeries.doughnutHoleSize
      - excel.Excel.ChartSeries.filtered
      - excel.Excel.ChartSeries.format
      - excel.Excel.ChartSeries.gapWidth
      - excel.Excel.ChartSeries.hasDataLabels
      - excel.Excel.ChartSeries.load
      - excel.Excel.ChartSeries.markerBackgroundColor
      - excel.Excel.ChartSeries.markerForegroundColor
      - excel.Excel.ChartSeries.markerSize
      - excel.Excel.ChartSeries.markerStyle
      - excel.Excel.ChartSeries.name
      - excel.Excel.ChartSeries.plotOrder
      - excel.Excel.ChartSeries.points
      - excel.Excel.ChartSeries.set
      - excel.Excel.ChartSeries.setBubbleSizes
      - excel.Excel.ChartSeries.setValues
      - excel.Excel.ChartSeries.setXAxisValues
      - excel.Excel.ChartSeries.showShadow
      - excel.Excel.ChartSeries.smooth
      - excel.Excel.ChartSeries.toJSON
      - excel.Excel.ChartSeries.trendlines
  - uid: excel.Excel.ChartSeries.chartType
    summary: |-
      Represents the chart type of a series. See Excel.ChartType for details.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: chartType
    fullName: excel.Excel.ChartSeries.chartType
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        chartType: Excel.ChartType | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" |
        "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100"
        | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" |
        "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" |
        "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" |
        "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" |
        "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" |
        "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" |
        "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" |
        "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" |
        "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" |
        "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" |
        "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar";
      return:
        type:
          - >-
            Excel.ChartType | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered"
            | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" |
            "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" |
            "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" |
            "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" |
            "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" |
            "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" |
            "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" |
            "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" |
            "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered"
            | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" |
            "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" |
            "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" |
            "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar"
  - uid: excel.Excel.ChartSeries.delete
    summary: |-
      Deletes the chart series.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: delete()
    fullName: excel.Excel.ChartSeries.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          let seriesCollection = sheet.charts.getItemAt(0).series;
          let series = seriesCollection.getItemAt(0);

          // Delete the first series.
          series.delete();

          await context.sync();
      });
      ```
  - uid: excel.Excel.ChartSeries.doughnutHoleSize
    summary: >-
      Represents the doughnut hole size of a chart series. Only valid on doughnut and doughnutExploded charts. Throws an
      invalid argument exception on invalid charts.


      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: doughnutHoleSize
    fullName: excel.Excel.ChartSeries.doughnutHoleSize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doughnutHoleSize: number;'
      return:
        type:
          - number
  - uid: excel.Excel.ChartSeries.filtered
    summary: |-
      Boolean value representing if the series is filtered or not. Not applicable for surface charts.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: filtered
    fullName: excel.Excel.ChartSeries.filtered
    langs:
      - typeScript
    type: property
    syntax:
      content: 'filtered: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.ChartSeries.format
    summary: |-
      Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: format
    fullName: excel.Excel.ChartSeries.format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.ChartSeriesFormat;'
      return:
        type:
          - excel.Excel.ChartSeriesFormat
  - uid: excel.Excel.ChartSeries.gapWidth
    summary: >-
      Represents the gap width of a chart series. Only valid on bar and column charts, as well as specific classes of
      line and pie charts. Throws an invalid argument exception on invalid charts.


      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: gapWidth
    fullName: excel.Excel.ChartSeries.gapWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'gapWidth: number;'
      return:
        type:
          - number
  - uid: excel.Excel.ChartSeries.hasDataLabels
    summary: |-
      Boolean value representing if the series has data labels or not.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: hasDataLabels
    fullName: excel.Excel.ChartSeries.hasDataLabels
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hasDataLabels: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.ChartSeries.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >
      In addition to this signature, this method has the following signatures:


      `load(option?: string \| string\[\]): Excel.ChartSeries` - Where option is a comma-delimited string or an array of
      strings that specify the properties/relationships to load.


      `load(option?: { select?: string; expand?: string; }): Excel.ChartSeries` - Where option.select is a
      comma-delimited string that specifies the properties/relationships to load, and options.expand is a
      comma-delimited string that specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartSeries` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.


      #### Examples


      ```javascript

      // Rename the 1st series of Chart1 to "New Series Name"

      Excel.run(function (ctx) { 
          var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
          chart.series.getItemAt(0).name = "New Series Name";
          return ctx.sync().then(function() {
                  console.log("Series1 Renamed");
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: excel.Excel.ChartSeries.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ChartSeriesLoadOptions): Excel.ChartSeries;'
      return:
        type:
          - excel.Excel.ChartSeries
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.ChartSeriesLoadOptions
  - uid: excel.Excel.ChartSeries.markerBackgroundColor
    summary: |-
      Represents markers background color of a chart series.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: markerBackgroundColor
    fullName: excel.Excel.ChartSeries.markerBackgroundColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'markerBackgroundColor: string;'
      return:
        type:
          - string
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          let sheet = context.workbook.worksheets.getItem("Sample");
          let salesTable = sheet.tables.getItem("SalesTable");
          let dataRange = sheet.getRange("A1:E7");

          // Create an XY scatter chart.
          let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
          chart.title.text = "Bicycle Parts Quarterly Sales"; 
        
          let series = chart.series;
          let series0 = series.getItemAt(0);
          let series1 = series.getItemAt(1);
          let series2 = series.getItemAt(2);
          let series3 = series.getItemAt(3);

          // Set markers.
          series0.markerStyle = "Dash";
          series0.markerForegroundColor = "black";
          series1.markerStyle = "Star";
          series1.markerForegroundColor = "black";
          series2.markerStyle = "X";
          series2.markerSize = 12;
          series3.markerStyle = "Triangle";
          series3.markerBackgroundColor = "purple";

          await context.sync();
      });
      ```
  - uid: excel.Excel.ChartSeries.markerForegroundColor
    summary: |-
      Represents markers foreground color of a chart series.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: markerForegroundColor
    fullName: excel.Excel.ChartSeries.markerForegroundColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'markerForegroundColor: string;'
      return:
        type:
          - string
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          let sheet = context.workbook.worksheets.getItem("Sample");
          let salesTable = sheet.tables.getItem("SalesTable");
          let dataRange = sheet.getRange("A1:E7");

          // Create an XY scatter chart.
          let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
          chart.title.text = "Bicycle Parts Quarterly Sales"; 
        
          let series = chart.series;
          let series0 = series.getItemAt(0);
          let series1 = series.getItemAt(1);
          let series2 = series.getItemAt(2);
          let series3 = series.getItemAt(3);

          // Set markers.
          series0.markerStyle = "Dash";
          series0.markerForegroundColor = "black";
          series1.markerStyle = "Star";
          series1.markerForegroundColor = "black";
          series2.markerStyle = "X";
          series2.markerSize = 12;
          series3.markerStyle = "Triangle";
          series3.markerBackgroundColor = "purple";

          await context.sync();
      });
      ```
  - uid: excel.Excel.ChartSeries.markerSize
    summary: |-
      Represents marker size of a chart series.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: markerSize
    fullName: excel.Excel.ChartSeries.markerSize
    langs:
      - typeScript
    type: property
    syntax:
      content: 'markerSize: number;'
      return:
        type:
          - number
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          let sheet = context.workbook.worksheets.getItem("Sample");
          let salesTable = sheet.tables.getItem("SalesTable");
          let dataRange = sheet.getRange("A1:E7");

          // Create an XY scatter chart.
          let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
          chart.title.text = "Bicycle Parts Quarterly Sales"; 
        
          let series = chart.series;
          let series0 = series.getItemAt(0);
          let series1 = series.getItemAt(1);
          let series2 = series.getItemAt(2);
          let series3 = series.getItemAt(3);

          // Set markers.
          series0.markerStyle = "Dash";
          series0.markerForegroundColor = "black";
          series1.markerStyle = "Star";
          series1.markerForegroundColor = "black";
          series2.markerStyle = "X";
          series2.markerSize = 12;
          series3.markerStyle = "Triangle";
          series3.markerBackgroundColor = "purple";

          await context.sync();
      });
      ```
  - uid: excel.Excel.ChartSeries.markerStyle
    summary: |-
      Represents marker style of a chart series. See Excel.ChartMarkerStyle for details.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: markerStyle
    fullName: excel.Excel.ChartSeries.markerStyle
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        markerStyle: Excel.ChartMarkerStyle | "Invalid" | "Automatic" | "None" | "Square" | "Diamond" | "Triangle" | "X"
        | "Star" | "Dot" | "Dash" | "Circle" | "Plus" | "Picture";
      return:
        type:
          - >-
            Excel.ChartMarkerStyle | "Invalid" | "Automatic" | "None" | "Square" | "Diamond" | "Triangle" | "X" | "Star"
            | "Dot" | "Dash" | "Circle" | "Plus" | "Picture"
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          let sheet = context.workbook.worksheets.getItem("Sample");
          let salesTable = sheet.tables.getItem("SalesTable");
          let dataRange = sheet.getRange("A1:E7");

          // Create an XY scatter chart.
          let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
          chart.title.text = "Bicycle Parts Quarterly Sales"; 
        
          let series = chart.series;
          let series0 = series.getItemAt(0);
          let series1 = series.getItemAt(1);
          let series2 = series.getItemAt(2);
          let series3 = series.getItemAt(3);

          // Set markers.
          series0.markerStyle = "Dash";
          series0.markerForegroundColor = "black";
          series1.markerStyle = "Star";
          series1.markerForegroundColor = "black";
          series2.markerStyle = "X";
          series2.markerSize = 12;
          series3.markerStyle = "Triangle";
          series3.markerBackgroundColor = "purple";

          await context.sync();
      });
      ```
  - uid: excel.Excel.ChartSeries.name
    summary: |-
      Represents the name of a series in a chart.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: name
    fullName: excel.Excel.ChartSeries.name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.ChartSeries.plotOrder
    summary: |-
      Represents the plot order of a chart series within the chart group.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: plotOrder
    fullName: excel.Excel.ChartSeries.plotOrder
    langs:
      - typeScript
    type: property
    syntax:
      content: 'plotOrder: number;'
      return:
        type:
          - number
  - uid: excel.Excel.ChartSeries.points
    summary: |-
      Represents a collection of all points in the series. Read-only.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: points
    fullName: excel.Excel.ChartSeries.points
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly points: Excel.ChartPointsCollection;'
      return:
        type:
          - excel.Excel.ChartPointsCollection
  - uid: excel.Excel.ChartSeries.set
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.ChartSeries): void`
    name: 'set(properties, options)'
    fullName: excel.Excel.ChartSeries.set
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ChartSeriesUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - Interfaces.ChartSeriesUpdateData
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel.Excel.ChartSeries.setBubbleSizes
    summary: |-
      Set bubble sizes for a chart series. Only works for bubble charts.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: setBubbleSizes(sourceData)
    fullName: excel.Excel.ChartSeries.setBubbleSizes
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setBubbleSizes(sourceData: Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceData
          description: The Range object corresponding to the source data.
          type:
            - Range
  - uid: excel.Excel.ChartSeries.setValues
    summary: |-
      Set values for a chart series. For scatter chart, it means Y axis values.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: setValues(sourceData)
    fullName: excel.Excel.ChartSeries.setValues
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValues(sourceData: Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceData
          description: The Range object corresponding to the source data.
          type:
            - Range
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          let seriesCollection = sheet.charts.getItemAt(0).series;

          // Add new series.
          let series = seriesCollection.add("New Product");
          let values = sheet.getRange("E2:E7");

          // Set the vertical values for the series.
          series.setValues(values);
          seriesCollection.load("count");

          await context.sync();

          OfficeHelpers.UI.notify("Number of series  = " + seriesCollection.count);
      });
      ```
  - uid: excel.Excel.ChartSeries.setXAxisValues
    summary: |-
      Set values of X axis for a chart series. Only works for scatter charts.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: setXAxisValues(sourceData)
    fullName: excel.Excel.ChartSeries.setXAxisValues
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXAxisValues(sourceData: Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceData
          description: The Range object corresponding to the source data.
          type:
            - Range
  - uid: excel.Excel.ChartSeries.showShadow
    summary: |-
      Boolean value representing if the series has a shadow or not.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: showShadow
    fullName: excel.Excel.ChartSeries.showShadow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showShadow: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.ChartSeries.smooth
    summary: |-
      Boolean value representing if the series is smooth or not. Only applicable to line and scatter charts.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: smooth
    fullName: excel.Excel.ChartSeries.smooth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'smooth: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.ChartSeries.toJSON
    name: toJSON()
    fullName: excel.Excel.ChartSeries.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ChartSeriesData;'
      return:
        type:
          - excel.Excel.Interfaces.ChartSeriesData
        description: ''
  - uid: excel.Excel.ChartSeries.trendlines
    summary: |-
      Represents a collection of trendlines in the series. Read-only.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: trendlines
    fullName: excel.Excel.ChartSeries.trendlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly trendlines: Excel.ChartTrendlineCollection;'
      return:
        type:
          - excel.Excel.ChartTrendlineCollection
