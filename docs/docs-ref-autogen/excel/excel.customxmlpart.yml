### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPart
    summary: |-
      Represents a custom XML part object in a workbook.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.CustomXmlPart
    fullName: excel.Excel.CustomXmlPart
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.CustomXmlPart.delete
      - excel.Excel.CustomXmlPart.getXml
      - excel.Excel.CustomXmlPart.id
      - excel.Excel.CustomXmlPart.load
      - excel.Excel.CustomXmlPart.namespaceUri
      - excel.Excel.CustomXmlPart.setXml
      - excel.Excel.CustomXmlPart.toJSON
  - uid: excel.Excel.CustomXmlPart.delete
    summary: |-
      Deletes the custom XML part.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: delete()
    fullName: excel.Excel.CustomXmlPart.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItem("ContosoReviewXmlPartId").load("value");

              await context.sync();
              
              let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
              const xmlBlob = customXmlPart.getXml();
              customXmlPart.delete();
              customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

              await context.sync();

              if (customXmlPart.isNullObject) {
                  $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                  // Delete the unneeded setting too.
                  xmlPartIDSetting.delete();            
              } else {
                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                  $("#display-xml").text(strangeMessage);
              }

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPart.getXml
    summary: |-
      Gets the custom XML part's full XML content.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getXml()
    fullName: excel.Excel.CustomXmlPart.getXml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {

              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPart.id
    summary: |-
      The custom XML part's ID. Read-only.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: id
    fullName: excel.Excel.CustomXmlPart.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {

              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPart.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart` - Where option.select is a
      comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.
    name: load(option)
    fullName: excel.Excel.CustomXmlPart.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPart.namespaceUri
    summary: |-
      The custom XML part's namespace URI. Read-only.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: namespaceUri
    fullName: excel.Excel.CustomXmlPart.namespaceUri
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly namespaceUri: string;'
      return:
        type:
          - string
  - uid: excel.Excel.CustomXmlPart.setXml
    summary: |-
      Sets the custom XML part's full XML content.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: setXml(xml)
    fullName: excel.Excel.CustomXmlPart.setXml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXml(xml: string): void;'
      return:
        type:
          - void
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItem("ContosoReviewXmlPartId").load("value");

              await context.sync();
              
              const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

              // The setXml method does a whole-for-whole replacement 
              // of the entire XML.
              customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              await context.sync();
          });
          ```
      parameters:
        - id: xml
          description: XML content for the part.
          type:
            - string
  - uid: excel.Excel.CustomXmlPart.toJSON
    name: toJSON()
    fullName: excel.Excel.CustomXmlPart.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartData
        description: ''
