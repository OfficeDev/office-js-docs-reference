### YamlMime:UniversalReference
items:
  - uid: excel.Excel.IconSetConditionalFormat
    summary: |-
      Represents an IconSet criteria for conditional formatting.

      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.IconSetConditionalFormat
    fullName: excel.Excel.IconSetConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.IconSetConditionalFormat.criteria
      - excel.Excel.IconSetConditionalFormat.load
      - excel.Excel.IconSetConditionalFormat.reverseIconOrder
      - excel.Excel.IconSetConditionalFormat.set
      - excel.Excel.IconSetConditionalFormat.showIconOnly
      - excel.Excel.IconSetConditionalFormat.style
      - excel.Excel.IconSetConditionalFormat.toJSON
  - uid: excel.Excel.IconSetConditionalFormat.criteria
    summary: >-
      An array of Criteria and IconSets for the rules and potential custom icons for conditional icons. Note that for
      the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when
      set.


      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: criteria
    fullName: excel.Excel.IconSetConditionalFormat.criteria
    langs:
      - typeScript
    type: property
    syntax:
      content: 'criteria: Excel.ConditionalIconCriterion[];'
      return:
        type:
          - 'Excel.ConditionalIconCriterion[]'
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.iconSet);
          const iconSetCF = conditionalFormat.iconSet;
          iconSetCF.style = Excel.IconSet.threeTriangles;

          /*
              The iconSetCF.criteria array is automatically prepopulated with
              criterion elements whose properties have been given default settings.
              You can't write to each property of a criterion directly. Instead,
              replace the whole criteria object.

              With a "three*" icon set style, such as "threeTriangles", the third
              element in the criteria array (criteria[2]) defines the "top" icon;
              e.g., a green triangle. The second (criteria[1]) defines the "middle"
              icon, The first (criteria[0]) defines the "low" icon, but it
              can often be left empty as this method does below, because every
              cell that does not match the other two criteria always gets the low
              icon.            
          */
          iconSetCF.criteria = [
              {} as any,
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=700"
              },
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=1000",
              }
          ];

          await context.sync();
      });
      ```
  - uid: excel.Excel.IconSetConditionalFormat.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Excel.IconSetConditionalFormat` - Where option is a comma-delimited string or
      an array of strings that specify the properties/relationships to load.


      `load(option?: { select?: string; expand?: string; }): Excel.IconSetConditionalFormat` - Where option.select is a
      comma-delimited string that specifies the properties/relationships to load, and options.expand is a
      comma-delimited string that specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.IconSetConditionalFormat`
      - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip specifies the number of items that are
      to be skipped and not included in the result. If option.top is specified, the result set will start after skipping
      the specified number of items.
    name: load(option)
    fullName: excel.Excel.IconSetConditionalFormat.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.IconSetConditionalFormatLoadOptions): Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.IconSetConditionalFormatLoadOptions
  - uid: excel.Excel.IconSetConditionalFormat.reverseIconOrder
    summary: |-
      If true, reverses the icon orders for the IconSet. Note that this cannot be set if custom icons are used.

      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: reverseIconOrder
    fullName: excel.Excel.IconSetConditionalFormat.reverseIconOrder
    langs:
      - typeScript
    type: property
    syntax:
      content: 'reverseIconOrder: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.IconSetConditionalFormat.set
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.IconSetConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: excel.Excel.IconSetConditionalFormat.set
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.IconSetConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - Interfaces.IconSetConditionalFormatUpdateData
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel.Excel.IconSetConditionalFormat.showIconOnly
    summary: |-
      If true, hides the values and only shows icons.

      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: showIconOnly
    fullName: excel.Excel.IconSetConditionalFormat.showIconOnly
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showIconOnly: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.IconSetConditionalFormat.style
    summary: |-
      If set, displays the IconSet option for the conditional format.

      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: style
    fullName: excel.Excel.IconSetConditionalFormat.style
    langs:
      - typeScript
    type: property
    syntax:
      content: >-
        style: Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" |
        "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" |
        "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" |
        "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes";
      return:
        type:
          - >-
            Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" |
            "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" |
            "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" |
            "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes"
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.iconSet);
          const iconSetCF = conditionalFormat.iconSet;
          iconSetCF.style = Excel.IconSet.threeTriangles;

          /*
              The iconSetCF.criteria array is automatically prepopulated with
              criterion elements whose properties have been given default settings.
              You can't write to each property of a criterion directly. Instead,
              replace the whole criteria object.

              With a "three*" icon set style, such as "threeTriangles", the third
              element in the criteria array (criteria[2]) defines the "top" icon;
              e.g., a green triangle. The second (criteria[1]) defines the "middle"
              icon, The first (criteria[0]) defines the "low" icon, but it
              can often be left empty as this method does below, because every
              cell that does not match the other two criteria always gets the low
              icon.            
          */
          iconSetCF.criteria = [
              {} as any,
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=700"
              },
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=1000",
              }
          ];

          await context.sync();
      });
      ```
  - uid: excel.Excel.IconSetConditionalFormat.toJSON
    name: toJSON()
    fullName: excel.Excel.IconSetConditionalFormat.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.IconSetConditionalFormatData;'
      return:
        type:
          - excel.Excel.Interfaces.IconSetConditionalFormatData
        description: ''
