### YamlMime:UniversalReference
items:
  - uid: excel.Excel.TableColumnCollection
    summary: |-
      Represents a collection of all the columns that are part of the table.

      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.TableColumnCollection
    fullName: excel.Excel.TableColumnCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.TableColumnCollection.add
      - excel.Excel.TableColumnCollection.count
      - excel.Excel.TableColumnCollection.getCount
      - excel.Excel.TableColumnCollection.getItem
      - excel.Excel.TableColumnCollection.getItemAt
      - excel.Excel.TableColumnCollection.getItemOrNullObject
      - excel.Excel.TableColumnCollection.items
      - excel.Excel.TableColumnCollection.load
      - excel.Excel.TableColumnCollection.toJSON
  - uid: excel.Excel.TableColumnCollection.add
    summary: >-
      Adds a new column to the table.


      \[ [API set: ExcelApi 1.1 requires an index smaller than the total column count; 1.4 allows index to be optional
      (null or -1) and will append a column at the end; 1.4 allows name parameter at creation
      time.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(index, values, name)'
    fullName: excel.Excel.TableColumnCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number, name?:
        string): Excel.TableColumn;
      return:
        type:
          - excel.Excel.TableColumn
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var values = [["Sample"], ["Values"], ["For"], ["New"], ["Column"]];
              var column = tables.getItem("Table1").columns.add(null, values);
              column.load('name');
              return ctx.sync().then(function() {
                  console.log(column.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: >-
            Optional. Specifies the relative position of the new column. If null or -1, the addition happens at the end.
            Columns with a higher index will be shifted to the side. Zero-indexed.
          type:
            - number
        - id: values
          description: Optional. A 2-dimensional array of unformatted values of the table column.
          type:
            - Array<Array<boolean | string | number>> | boolean | string | number
        - id: name
          description: 'Optional. Specifies the name of the new column. If null, the default name will be used.'
          type:
            - string
  - uid: excel.Excel.TableColumnCollection.count
    summary: |-
      Returns the number of columns in the table. Read-only.

      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: count
    fullName: excel.Excel.TableColumnCollection.count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: excel.Excel.TableColumnCollection.getCount
    summary: |-
      Gets the number of columns in the table.

      \[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.TableColumnCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.TableColumnCollection.getItem
    summary: |-
      Gets a column object by Name or ID.

      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getItem(key)
    fullName: excel.Excel.TableColumnCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: number | string): Excel.TableColumn;'
      return:
        type:
          - excel.Excel.TableColumn
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tablecolumn = ctx.workbook.tables.getItem('Table1').columns.getItem(0);
              tablecolumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tablecolumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var tablecolumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);
              tablecolumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tablecolumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: key
          description: Column Name or ID.
          type:
            - number | string
  - uid: excel.Excel.TableColumnCollection.getItemAt
    summary: |-
      Gets a column based on its position in the collection.

      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getItemAt(index)
    fullName: excel.Excel.TableColumnCollection.getItemAt
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.TableColumn;'
      return:
        type:
          - excel.Excel.TableColumn
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tablecolumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);
              tablecolumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tablecolumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type:
            - number
  - uid: excel.Excel.TableColumnCollection.getItemOrNullObject
    summary: |-
      Gets a column object by Name or ID. If the column does not exist, will return a null object.

      \[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getItemOrNullObject(key)
    fullName: excel.Excel.TableColumnCollection.getItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: number | string): Excel.TableColumn;'
      return:
        type:
          - excel.Excel.TableColumn
        description: ''
      parameters:
        - id: key
          description: Column Name or ID.
          type:
            - number | string
  - uid: excel.Excel.TableColumnCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.TableColumnCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.TableColumn[];'
      return:
        type:
          - 'Excel.TableColumn[]'
  - uid: excel.Excel.TableColumnCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): Excel.TableColumnCollection` - Where option.select is a
      comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableColumnCollection` -
      Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip specifies the number of items that are
      to be skipped and not included in the result. If option.top is specified, the result set will start after skipping
      the specified number of items.

      #### Examples


      ```javascript

      Excel.run(function (ctx) { 
          var tablecolumns = ctx.workbook.tables.getItem('Table1').columns;
          tablecolumns.load('items');
          return ctx.sync().then(function() {
              console.log("tablecolumns Count: " + tablecolumns.count);
              for (var i = 0; i < tablecolumns.items.length; i++)
              {
                  console.log(tablecolumns.items[i].name);
              }
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: excel.Excel.TableColumnCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): Excel.TableColumnCollection;'
      return:
        type:
          - excel.Excel.TableColumnCollection
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.TableColumnCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.TableColumnCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableColumnCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.TableColumnCollectionData
        description: ''
