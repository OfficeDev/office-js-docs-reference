### YamlMime:UniversalReference
items:
  - uid: excel.Excel.BindingCollection
    summary: |-
      Represents the collection of all the binding objects that are part of the workbook.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.BindingCollection
    fullName: excel.Excel.BindingCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.BindingCollection.add
      - excel.Excel.BindingCollection.addFromNamedItem
      - excel.Excel.BindingCollection.addFromSelection
      - excel.Excel.BindingCollection.count
      - excel.Excel.BindingCollection.getCount
      - excel.Excel.BindingCollection.getItem
      - excel.Excel.BindingCollection.getItemAt
      - excel.Excel.BindingCollection.getItemOrNullObject
      - excel.Excel.BindingCollection.items
      - excel.Excel.BindingCollection.load
      - excel.Excel.BindingCollection.toJSON
  - uid: excel.Excel.BindingCollection.add
    summary: |-
      Add a new binding to a particular Range.

      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(range, bindingType, id)'
    fullName: excel.Excel.BindingCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: range
          description: >-
            Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full
            address, including the sheet name
          type:
            - Range | string
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - excel.Excel.BindingType
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: excel.Excel.BindingCollection.addFromNamedItem
    summary: >-
      Add a new binding based on a named item in the workbook. If the named item references to multiple areas, the
      "InvalidReference" error will be returned.


      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'addFromNamedItem(name, bindingType, id)'
    fullName: excel.Excel.BindingCollection.addFromNamedItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: name
          description: Name from which to create binding.
          type:
            - string
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - excel.Excel.BindingType
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: excel.Excel.BindingCollection.addFromSelection
    summary: >-
      Add a new binding based on the current selection. If the selection has multiple areas, the "InvalidReference"
      error will be returned.


      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'addFromSelection(bindingType, id)'
    fullName: excel.Excel.BindingCollection.addFromSelection
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - excel.Excel.BindingType
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: excel.Excel.BindingCollection.count
    summary: |-
      Returns the number of bindings in the collection. Read-only.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: count
    fullName: excel.Excel.BindingCollection.count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: excel.Excel.BindingCollection.getCount
    summary: |-
      Gets the number of bindings in the collection.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.BindingCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.BindingCollection.getItem
    summary: |-
      Gets a binding object by ID.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItem(id)
    fullName: excel.Excel.BindingCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: id
          description: Id of the binding object to be retrieved.
          type:
            - string
    remarks: >


      #### Examples


      ```javascript

      // Create a table binding to monitor data changes in the table. When data is changed, the background color of the
      table will be changed to orange.

      function addEventHandler() {
          //Create Table1
      Excel.run(function (ctx) { 
          ctx.workbook.tables.add("Sheet1!A1:C4", true);
          return ctx.sync().then(function() {
                   console.log("My Diet Data Inserted!");
          })
          .catch(function (error) {
                   console.log(JSON.stringify(error));
          });
      });
          //Create a new table binding for Table1
      Office.context.document.bindings.addFromNamedItemAsync("Table1", Office.CoercionType.Table, { id: "myBinding" },
      function (asyncResult) {
          if (asyncResult.status == "failed") {
              console.log("Action failed with error: " + asyncResult.error.message);
          }
          else {
              // If succeeded, then add event handler to the table binding.
              Office.select("bindings#myBinding").addHandlerAsync(Office.EventType.BindingDataChanged, onBindingDataChanged);
          }
      });

      }
          
      // when data in the table is changed, this event will be triggered.

      function onBindingDataChanged(eventArgs) {

      Excel.run(function (ctx) { 
          // highlight the table in orange to indicate data has been changed.
          ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
          return ctx.sync().then(function() {
                  console.log("The value in this table got changed!");
          })
          .catch(function (error) {
                  console.log(JSON.stringify(error));
          });
      });

      }

      ```


      ```javascript

      Excel.run(function (ctx) { 
          var lastPosition = ctx.workbook.bindings.count - 1;
          var binding = ctx.workbook.bindings.getItemAt(lastPosition);
          binding.load('type')
          return ctx.sync().then(function() {
                  console.log(binding.type); 
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
  - uid: excel.Excel.BindingCollection.getItemAt
    summary: |-
      Gets a binding object based on its position in the items array.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItemAt(index)
    fullName: excel.Excel.BindingCollection.getItemAt
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var lastPosition = ctx.workbook.bindings.count - 1;
          var binding = ctx.workbook.bindings.getItemAt(lastPosition);
          binding.load('type')
          return ctx.sync().then(function() {
                  console.log(binding.type); 
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.BindingCollection.getItemOrNullObject
    summary: |-
      Gets a binding object by ID. If the binding object does not exist, will return a null object.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItemOrNullObject(id)
    fullName: excel.Excel.BindingCollection.getItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: id
          description: Id of the binding object to be retrieved.
          type:
            - string
  - uid: excel.Excel.BindingCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.BindingCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Binding[];'
      return:
        type:
          - 'Excel.Binding[]'
  - uid: excel.Excel.BindingCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Excel.BindingCollection` - Where option is a comma-delimited string or an array
      of strings that specify the properties/relationships to load.


      `load(option?: { select?: string; expand?: string; }): Excel.BindingCollection` - Where option.select is a
      comma-delimited string that specifies the properties/relationships to load, and options.expand is a
      comma-delimited string that specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.BindingCollection` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.


      #### Examples


      ```javascript

      Excel.run(function (ctx) { 
          var bindings = ctx.workbook.bindings;
          bindings.load('items');
          return ctx.sync().then(function() {
              for (var i = 0; i < bindings.items.length; i++)
              {
                  console.log(bindings.items[i].id);
              }
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```


      ```javascript

      // Get the number of bindings

      Excel.run(function (ctx) { 
          var bindings = ctx.workbook.bindings;
          bindings.load('count');
          return ctx.sync().then(function() {
              console.log("Bindings: Count= " + bindings.count);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: excel.Excel.BindingCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        load(option?: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.BindingCollection;
      return:
        type:
          - excel.Excel.BindingCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.BindingCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.BindingCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.BindingCollectionData
        description: ''
