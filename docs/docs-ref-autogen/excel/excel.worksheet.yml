### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Worksheet
    summary: |-
      An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.Worksheet
    fullName: excel.Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.Worksheet.activate
      - excel.Excel.Worksheet.calculate
      - excel.Excel.Worksheet.charts
      - excel.Excel.Worksheet.copy
      - excel.Excel.Worksheet.delete
      - excel.Excel.Worksheet.freezePanes
      - excel.Excel.Worksheet.getCell
      - excel.Excel.Worksheet.getNext
      - excel.Excel.Worksheet.getNextOrNullObject
      - excel.Excel.Worksheet.getPrevious
      - excel.Excel.Worksheet.getPreviousOrNullObject
      - excel.Excel.Worksheet.getRange
      - excel.Excel.Worksheet.getRangeByIndexes
      - excel.Excel.Worksheet.getUsedRange
      - excel.Excel.Worksheet.getUsedRangeOrNullObject
      - excel.Excel.Worksheet.id
      - excel.Excel.Worksheet.load
      - excel.Excel.Worksheet.name
      - excel.Excel.Worksheet.names
      - excel.Excel.Worksheet.onActivated
      - excel.Excel.Worksheet.onChanged
      - excel.Excel.Worksheet.onDeactivated
      - excel.Excel.Worksheet.onSelectionChanged
      - excel.Excel.Worksheet.pivotTables
      - excel.Excel.Worksheet.position
      - excel.Excel.Worksheet.protection
      - excel.Excel.Worksheet.set
      - excel.Excel.Worksheet.standardHeight
      - excel.Excel.Worksheet.standardWidth
      - excel.Excel.Worksheet.tabColor
      - excel.Excel.Worksheet.tables
      - excel.Excel.Worksheet.toJSON
      - excel.Excel.Worksheet.visibility
  - uid: excel.Excel.Worksheet.activate
    summary: |-
      Activate the worksheet in the Excel UI.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: activate()
    fullName: excel.Excel.Worksheet.activate
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var wSheetName = 'Sheet1';
          var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
          worksheet.activate();
          return ctx.sync(); 
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.Worksheet.calculate
    summary: |-
      Calculates all cells on a worksheet.

      \[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: calculate(markAllDirty)
    fullName: excel.Excel.Worksheet.calculate
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: ''
          type:
            - boolean
  - uid: excel.Excel.Worksheet.charts
    summary: |-
      Returns collection of charts that are part of the worksheet.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: charts
    fullName: excel.Excel.Worksheet.charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - Excel.ChartCollection
  - uid: excel.Excel.Worksheet.copy
    summary: |-
      Copy a worksheet and place it at the specified position. Return the copied worksheet.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'copy(positionType, relativeTo)'
    fullName: excel.Excel.Worksheet.copy
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - Excel.Worksheet
        description: ''
      parameters:
        - id: positionType
          description: ''
          type:
            - Excel.WorksheetPositionType
        - id: relativeTo
          description: ''
          type:
            - Excel.Worksheet
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {

          let myWorkbook = context.workbook;
          let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
          let copiedSheet = sampleSheet.copy("End")

          sampleSheet.load("name");
          copiedSheet.load("name");

          await context.sync();

          console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
      });
      ```
  - uid: excel.Excel.Worksheet.delete
    summary: |-
      Deletes the worksheet from the workbook.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: delete()
    fullName: excel.Excel.Worksheet.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var wSheetName = 'Sheet1';
          var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
          worksheet.delete();
          return ctx.sync(); 
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.Worksheet.freezePanes
    summary: |-
      Gets an object that can be used to manipulate frozen panes on the worksheet.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: freezePanes
    fullName: excel.Excel.Worksheet.freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - Excel.WorksheetFreezePanes
  - uid: excel.Excel.Worksheet.getCell
    summary: >-
      Gets the range object containing the single cell based on row and column numbers. The cell can be outside the
      bounds of its parent range, so long as it's stays within the worksheet grid.


      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'getCell(row, column)'
    fullName: excel.Excel.Worksheet.getCell
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: row
          description: The row number of the cell to be retrieved. Zero-indexed.
          type:
            - number
        - id: column
          description: the column number of the cell to be retrieved. Zero-indexed.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:F8";
          var worksheet = ctx.workbook.worksheets.getItem(sheetName);
          var cell = worksheet.getCell(0,0);
          cell.load('address');
          return ctx.sync().then(function() {
              console.log(cell.address);
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.Worksheet.getNext
    summary: >-
      Gets the worksheet that follows this one. If there are no worksheets following this one, this method will throw an
      error.


      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getNext(visibleOnly)
    fullName: excel.Excel.Worksheet.getNext
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: 'If true, considers only visible worksheets, skipping over any hidden ones.'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getNextOrNullObject
    summary: >-
      Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a
      null object.


      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getNextOrNullObject(visibleOnly)
    fullName: excel.Excel.Worksheet.getNextOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: 'If true, considers only visible worksheets, skipping over any hidden ones.'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPrevious
    summary: |-
      Gets the worksheet that precedes this one. If there are no previous worksheets, this method will throw an error.

      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getPrevious(visibleOnly)
    fullName: excel.Excel.Worksheet.getPrevious
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: 'If true, considers only visible worksheets, skipping over any hidden ones.'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPreviousOrNullObject
    summary: >-
      Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null
      objet.


      \[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getPreviousOrNullObject(visibleOnly)
    fullName: excel.Excel.Worksheet.getPreviousOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: 'If true, considers only visible worksheets, skipping over any hidden ones.'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getRange
    summary: |-
      Gets the range object specified by the address or name.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getRange(address)
    fullName: excel.Excel.Worksheet.getRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: address
          description: 'The address or the name of the range. If not specified, the entire worksheet range is returned.'
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:F8";
          var worksheet = ctx.workbook.worksheets.getItem(sheetName);
          var range = worksheet.getRange(rangeAddress);
          range.load('cellCount');
          return ctx.sync().then(function() {
              console.log(range.cellCount);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeName = 'MyRange';
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getActiveWorksheet();

          // To create a Range with multiple child areas, pass a 
          // comma-delimited string of range addresses to 
          // Worksheet.getRange.
          const range = sheet.getRange("F3:F5, H3:H5");
          range.format.fill.color = "pink";

          await context.sync();
      });
      ```
  - uid: excel.Excel.Worksheet.getRangeByIndexes
    summary: >-
      Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows
      and columns.


      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: excel.Excel.Worksheet.getRangeByIndexes
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: startRow
          description: Start row (zero-indexed).
          type:
            - number
        - id: startColumn
          description: Start column (zero-indexed).
          type:
            - number
        - id: rowCount
          description: Number of rows to include in the range.
          type:
            - number
        - id: columnCount
          description: Number of columns to include in the range.
          type:
            - number
  - uid: excel.Excel.Worksheet.getUsedRange
    summary: >-
      The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.
      If the entire worksheet is blank, this function will return the top left cell (i.e.,: it will \*not\* throw an
      error).


      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getUsedRange(valuesOnly)
    fullName: excel.Excel.Worksheet.getUsedRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: 'Considers only cells with values as used cells (ignoring formatting). \[Api set: ExcelApi 1.2\]'
          type:
            - boolean
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var wSheetName = 'Sheet1';
          var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
          var usedRange = worksheet.getUsedRange();
          usedRange.load('address');
          return ctx.sync().then(function() {
                  console.log(usedRange.address);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
    summary: >-
      The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.
      If the entire worksheet is blank, this function will return a null object.


      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: excel.Excel.Worksheet.getUsedRangeOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: Considers only cells with values as used cells.
          type:
            - boolean
  - uid: excel.Excel.Worksheet.id
    summary: >-
      Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains
      the same even when the worksheet is renamed or moved. Read-only.


      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: id
    fullName: excel.Excel.Worksheet.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: excel.Excel.Worksheet.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - Excel.Worksheet
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.WorksheetLoadOptions
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var wSheetName = 'Sheet1';
          var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
          worksheet.load('position')
          return ctx.sync().then(function() {
                  console.log(worksheet.position);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```

      ```javascript
      Excel.run(function (ctx) { 
          var wSheetName = 'Sheet1';
          var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
          worksheet.position = 2;
          return ctx.sync(); 
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.Worksheet.name
    summary: |-
      The display name of the worksheet.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: name
    fullName: excel.Excel.Worksheet.name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.names
    summary: |-
      Collection of names scoped to the current worksheet.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: names
    fullName: excel.Excel.Worksheet.names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - Excel.NamedItemCollection
  - uid: excel.Excel.Worksheet.onActivated
    summary: |-
      Occurs when the worksheet is activated.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: onActivated
    fullName: excel.Excel.Worksheet.onActivated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
  - uid: excel.Excel.Worksheet.onChanged
    summary: |-
      Occurs when data changed on a specific worksheet.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: onChanged
    fullName: excel.Excel.Worksheet.onChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
  - uid: excel.Excel.Worksheet.onDeactivated
    summary: |-
      Occurs when the worksheet is deactivated.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: onDeactivated
    fullName: excel.Excel.Worksheet.onDeactivated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
  - uid: excel.Excel.Worksheet.onSelectionChanged
    summary: |-
      Occurs when the selection changed on a specific worksheet.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: onSelectionChanged
    fullName: excel.Excel.Worksheet.onSelectionChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
  - uid: excel.Excel.Worksheet.pivotTables
    summary: |-
      Collection of PivotTables that are part of the worksheet.

      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: pivotTables
    fullName: excel.Excel.Worksheet.pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - Excel.PivotTableCollection
  - uid: excel.Excel.Worksheet.position
    summary: |-
      The zero-based position of the worksheet within the workbook.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: position
    fullName: excel.Excel.Worksheet.position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.protection
    summary: |-
      Returns sheet protection object for a worksheet.

      \[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: protection
    fullName: excel.Excel.Worksheet.protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - Excel.WorksheetProtection
  - uid: excel.Excel.Worksheet.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: excel.Excel.Worksheet.set
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.WorksheetUpdateData
        - id: options
          description: ''
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Worksheet.standardHeight
    summary: |-
      Returns the standard (default) height of all the rows in the worksheet, in points. Read-only.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: standardHeight
    fullName: excel.Excel.Worksheet.standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.standardWidth
    summary: >-
      Returns or sets the standard (default) width of all the columns in the worksheet. One unit of column width is
      equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0
      (zero) is used.


      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: standardWidth
    fullName: excel.Excel.Worksheet.standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.tabColor
    summary: >-
      Gets or sets the worksheet tab color. When retrieving the tab color, if the worksheet is invisible, the value will
      be null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned.
      Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string
      to set an "auto" color, or a real color otherwise.


      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: tabColor
    fullName: excel.Excel.Worksheet.tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.tables
    summary: |-
      Collection of tables that are part of the worksheet.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: tables
    fullName: excel.Excel.Worksheet.tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - Excel.TableCollection
  - uid: excel.Excel.Worksheet.toJSON
    name: toJSON()
    fullName: excel.Excel.Worksheet.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - Excel.Interfaces.WorksheetData
        description: ''
  - uid: excel.Excel.Worksheet.visibility
    summary: >-
      The Visibility of the worksheet.


      \[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting
      it.](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: visibility
    fullName: excel.Excel.Worksheet.visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
