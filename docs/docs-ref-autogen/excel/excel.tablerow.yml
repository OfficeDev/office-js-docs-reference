### YamlMime:UniversalReference
items:
  - uid: excel.Excel.TableRow
    summary: >-
      Represents a row in a table.


      Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them, a TableRow object
      represent the physical location of the table row, but not the data. That is, if the data is sorted or if new rows
      are added, a table row will continue to point at the index for which it was created.


      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.TableRow
    fullName: excel.Excel.TableRow
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.TableRow.delete
      - excel.Excel.TableRow.getRange
      - excel.Excel.TableRow.index
      - excel.Excel.TableRow.load
      - excel.Excel.TableRow.set
      - excel.Excel.TableRow.toJSON
      - excel.Excel.TableRow.values
  - uid: excel.Excel.TableRow.delete
    summary: |-
      Deletes the row from the table.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: delete()
    fullName: excel.Excel.TableRow.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var tableName = 'Table1';
          var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);
          row.delete();
          return ctx.sync(); 
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.TableRow.getRange
    summary: |-
      Returns the range object associated with the entire row.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getRange()
    fullName: excel.Excel.TableRow.getRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var tableName = 'Table1';
          var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(0);
          var rowRange = row.getRange();
          rowRange.load('address');
          return ctx.sync().then(function() {
              console.log(rowRange.address);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: excel.Excel.TableRow.index
    summary: |-
      Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: index
    fullName: excel.Excel.TableRow.index
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly index: number;'
      return:
        type:
          - number
  - uid: excel.Excel.TableRow.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Excel.TableRow` - Where option is a comma-delimited string or an array of
      strings that specify the properties/relationships to load.


      `load(option?: { select?: string; expand?: string; }): Excel.TableRow` - Where option.select is a comma-delimited
      string that specifies the properties/relationships to load, and options.expand is a comma-delimited string that
      specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRow` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.


      #### Examples


      ```javascript

      Excel.run(function (ctx) { 
          var tableName = 'Table1';
          var row = ctx.workbook.tables.getItem(tableName).rows.getItem(0);
          row.load('index');
          return ctx.sync().then(function() {
              console.log(row.index);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```


      ```javascript

      Excel.run(function (ctx) { 
          var tables = ctx.workbook.tables;
          var newValues = [["New", "Values", "For", "New", "Row"]];
          var tableName = 'Table1';
          var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);
          row.values = newValues;
          row.load('values');
          return ctx.sync().then(function() {
              console.log(row.values);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: excel.Excel.TableRow.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.TableRowLoadOptions): Excel.TableRow;'
      return:
        type:
          - excel.Excel.TableRow
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.TableRowLoadOptions
  - uid: excel.Excel.TableRow.set
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.TableRow): void`
    name: 'set(properties, options)'
    fullName: excel.Excel.TableRow.set
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TableRowUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type:
            - Interfaces.TableRowUpdateData
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel.Excel.TableRow.toJSON
    name: toJSON()
    fullName: excel.Excel.TableRow.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableRowData;'
      return:
        type:
          - excel.Excel.Interfaces.TableRowData
        description: ''
  - uid: excel.Excel.TableRow.values
    summary: >-
      Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean.
      Cells that contain an error will return the error string.


      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: values
    fullName: excel.Excel.TableRow.values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
