### YamlMime:TSType
name: Excel.ConditionalFormat
uid: 'excel!Excel.ConditionalFormat:class'
package: excel!
fullName: Excel.ConditionalFormat
summary: >-
  An object encapsulating a conditional format's range, format, rule, and other
  properties. To learn more about the conditional formatting object model, read
  [Apply conditional formatting to Excel
  ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)<!--
  -->.


  \[ [API set: ExcelApi
  1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: cellValue
    uid: 'excel!Excel.ConditionalFormat#cellValue:member'
    package: excel!
    fullName: cellValue
    summary: >-
      Returns the cell value conditional format properties if the current
      conditional format is a CellValue type. For example to format all cells
      between 5 and 10.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.CellValueConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });

          ```
  - name: cellValueOrNullObject
    uid: 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
    package: excel!
    fullName: cellValueOrNullObject
    summary: >-
      Returns the cell value conditional format properties if the current
      conditional format is a CellValue type. For example to format all cells
      between 5 and 10.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.CellValueConditionalFormat:class" />'
  - name: colorScale
    uid: 'excel!Excel.ConditionalFormat#colorScale:member'
    package: excel!
    fullName: colorScale
    summary: >-
      Returns the ColorScale conditional format properties if the current
      conditional format is an ColorScale type.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.ColorScaleConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });

          ```
  - name: colorScaleOrNullObject
    uid: 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
    package: excel!
    fullName: colorScaleOrNullObject
    summary: >-
      Returns the ColorScale conditional format properties if the current
      conditional format is an ColorScale type.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.ColorScaleConditionalFormat:class" />'
  - name: context
    uid: 'excel!Excel.ConditionalFormat#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: custom
    uid: 'excel!Excel.ConditionalFormat#custom:member'
    package: excel!
    fullName: custom
    summary: >-
      Returns the custom conditional format properties if the current
      conditional format is a custom type.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.CustomConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });

          ```
  - name: customOrNullObject
    uid: 'excel!Excel.ConditionalFormat#customOrNullObject:member'
    package: excel!
    fullName: customOrNullObject
    summary: >-
      Returns the custom conditional format properties if the current
      conditional format is a custom type.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.CustomConditionalFormat:class" />'
  - name: dataBar
    uid: 'excel!Excel.ConditionalFormat#dataBar:member'
    package: excel!
    fullName: dataBar
    summary: >-
      Returns the data bar properties if the current conditional format is a
      data bar.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.DataBarConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          });

          ```
  - name: dataBarOrNullObject
    uid: 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
    package: excel!
    fullName: dataBarOrNullObject
    summary: >-
      Returns the data bar properties if the current conditional format is a
      data bar.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.DataBarConditionalFormat:class" />'
  - name: iconSet
    uid: 'excel!Excel.ConditionalFormat#iconSet:member'
    package: excel!
    fullName: iconSet
    summary: >-
      Returns the IconSet conditional format properties if the current
      conditional format is an IconSet type.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.IconSetConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });

          ```
  - name: iconSetOrNullObject
    uid: 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
    package: excel!
    fullName: iconSetOrNullObject
    summary: >-
      Returns the IconSet conditional format properties if the current
      conditional format is an IconSet type.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.IconSetConditionalFormat:class" />'
  - name: id
    uid: 'excel!Excel.ConditionalFormat#id:member'
    package: excel!
    fullName: id
    summary: >-
      The Priority of the Conditional Format within the current
      ConditionalFormatCollection.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: preset
    uid: 'excel!Excel.ConditionalFormat#preset:member'
    package: excel!
    fullName: preset
    summary: >-
      Returns the preset criteria conditional format. See
      Excel.PresetCriteriaConditionalFormat for more details.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.PresetCriteriaConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          });

          ```
  - name: presetOrNullObject
    uid: 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
    package: excel!
    fullName: presetOrNullObject
    summary: >-
      Returns the preset criteria conditional format. See
      Excel.PresetCriteriaConditionalFormat for more details.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.PresetCriteriaConditionalFormat:class" />'
  - name: priority
    uid: 'excel!Excel.ConditionalFormat#priority:member'
    package: excel!
    fullName: priority
    summary: >-
      The priority (or index) within the conditional format collection that this
      conditional format currently exists in. Changing this also changes other
      conditional formats' priorities, to allow for a contiguous priority order.
      Use a negative priority to begin from the back. Priorities greater than
      than bounds will get and set to the maximum (or minimum if negative)
      priority. Also note that if you change the priority, you have to re-fetch
      a new copy of the object at that new priority location if you want to make
      further changes to it.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'priority: number;'
      return:
        type: number
  - name: stopIfTrue
    uid: 'excel!Excel.ConditionalFormat#stopIfTrue:member'
    package: excel!
    fullName: stopIfTrue
    summary: >-
      If the conditions of this conditional format are met, no lower-priority
      formats shall take effect on that cell. Null on databars, icon sets, and
      colorscales as there's no concept of StopIfTrue for these


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type: boolean
  - name: textComparison
    uid: 'excel!Excel.ConditionalFormat#textComparison:member'
    package: excel!
    fullName: textComparison
    summary: >-
      Returns the specific text conditional format properties if the current
      conditional format is a text type. For example to format cells matching
      the word "Text".


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.TextConditionalFormat:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });

          ```
  - name: textComparisonOrNullObject
    uid: 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
    package: excel!
    fullName: textComparisonOrNullObject
    summary: >-
      Returns the specific text conditional format properties if the current
      conditional format is a text type. For example to format cells matching
      the word "Text".


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.TextConditionalFormat:class" />'
  - name: topBottom
    uid: 'excel!Excel.ConditionalFormat#topBottom:member'
    package: excel!
    fullName: topBottom
    summary: >-
      Returns the Top/Bottom conditional format properties if the current
      conditional format is an TopBottom type. For example to format the top 10%
      or bottom 10 items.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.TopBottomConditionalFormat:class" />'
  - name: topBottomOrNullObject
    uid: 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
    package: excel!
    fullName: topBottomOrNullObject
    summary: >-
      Returns the Top/Bottom conditional format properties if the current
      conditional format is an TopBottom type. For example to format the top 10%
      or bottom 10 items.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.TopBottomConditionalFormat:class" />'
  - name: type
    uid: 'excel!Excel.ConditionalFormat#type:member'
    package: excel!
    fullName: type
    summary: >-
      A type of conditional format. Only one can be set at a time.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" |
        "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" |
        "ContainsText" | "CellValue";
      return:
        type: >-
          <xref uid="excel!Excel.ConditionalFormatType:enum" /> | "Custom" |
          "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria"
          | "ContainsText" | "CellValue"
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });

          ```
methods:
  - name: delete()
    uid: 'excel!Excel.ConditionalFormat#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: >-
      Deletes this conditional format.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getRange()
    uid: 'excel!Excel.ConditionalFormat#getRange:member(1)'
    package: excel!
    fullName: getRange()
    summary: >-
      Returns the range the conditonal format is applied to. Throws an error if
      the conditional format is applied to multiple ranges.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });

          ```
  - name: getRangeOrNullObject()
    uid: 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
    package: excel!
    fullName: getRangeOrNullObject()
    summary: >-
      Returns the range the conditonal format is applied to, or a null object if
      the conditional format is applied to multiple ranges.


      \[ [API set: ExcelApi
      1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type: '<xref uid="excel!Excel.Range:class" />'
        description: ''
  - name: getRanges()
    uid: 'excel!Excel.ConditionalFormat#getRanges:member(1)'
    package: excel!
    fullName: getRanges()
    summary: >-
      Returns the RangeAreas, comprising one or more rectangular ranges, the
      conditonal format is applied to.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRanges(): Excel.RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.ConditionalFormat#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.ConditionalFormatLoadOptions):
        Excel.ConditionalFormat;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.ConditionalFormatLoadOptions:interface"
            />
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.ConditionalFormat#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.ConditionalFormat#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.ConditionalFormat;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'excel!Excel.ConditionalFormat#set:member(1)'
    package: excel!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: |-
      This method has the following additional signature:

      `set(properties: Excel.ConditionalFormat): void`
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.ConditionalFormatUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.ConditionalFormatUpdateData:interface"
            />
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'excel!Excel.ConditionalFormat#set:member(2)'
    package: excel!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="excel!Excel.ConditionalFormat:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.ConditionalFormat#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Excel.ConditionalFormat
      object is an API object, the `toJSON` method returns a plain JavaScript
      object (typed as `Excel.Interfaces.ConditionalFormatData`<!-- -->) that
      contains shallow copies of any loaded child properties from the original
      object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.ConditionalFormatData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
