### YamlMime:TSType
name: Excel.CultureInfo
uid: 'excel!Excel.CultureInfo:class'
package: excel!
fullName: Excel.CultureInfo
summary: >-
  Provides information based on current system culture settings. This includes
  the culture names, number formatting, and other culturally dependent settings.


  \[ [API set: ExcelApi
  1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.CultureInfo#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: datetimeFormat
    uid: 'excel!Excel.CultureInfo#datetimeFormat:member'
    package: excel!
    fullName: datetimeFormat
    summary: >-
      Defines the culturally appropriate format of displaying date and time.
      This is based on current system culture settings.


      \[ [API set: ExcelApi
      1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly datetimeFormat: Excel.DatetimeFormatInfo;'
      return:
        type: '<xref uid="excel!Excel.DatetimeFormatInfo:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/culture-info-date-time.yaml

          await Excel.run(async (context) => {
            context.application.cultureInfo.datetimeFormat.load([
              "longDatePattern",
              "shortDatePattern",
              "dateSeparator",
              "longTimePattern",
              "timeSeparator"
            ]);
            await context.sync();

            // Use the cultural settings API to retrieve the user's system date and time settings.
            const systemLongDatePattern = context.application.cultureInfo.datetimeFormat.longDatePattern;
            const systemShortDatePattern = context.application.cultureInfo.datetimeFormat.shortDatePattern;
            const systemDateSeparator = context.application.cultureInfo.datetimeFormat.dateSeparator;
            const systemLongTimePattern = context.application.cultureInfo.datetimeFormat.longTimePattern;
            const systemTimeSeparator = context.application.cultureInfo.datetimeFormat.timeSeparator;

            // Write the date and time settings in your table. 
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const dateTimeData = sheet.getRange("A2:B6");
            dateTimeData.values = [
              ["Long date", systemLongDatePattern], 
              ["Short date", systemShortDatePattern], 
              ["Date separator", systemDateSeparator], 
              ["Long time format", systemLongTimePattern],
              ["Time separator", systemTimeSeparator]
            ];

            sheet.tables
              .getItemAt(0)
              .getRange()
              .format.autofitColumns();

            await context.sync();
          });

          ```
  - name: name
    uid: 'excel!Excel.CultureInfo#name:member'
    package: excel!
    fullName: name
    summary: >-
      Gets the culture name in the format languagecode2-country/regioncode2
      (e.g., "zh-cn" or "en-us"). This is based on current system settings.


      \[ [API set: ExcelApi
      1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly name: string;'
      return:
        type: string
  - name: numberFormat
    uid: 'excel!Excel.CultureInfo#numberFormat:member'
    package: excel!
    fullName: numberFormat
    summary: >-
      Defines the culturally appropriate format of displaying numbers. This is
      based on current system culture settings.


      \[ [API set: ExcelApi
      1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly numberFormat: Excel.NumberFormatInfo;'
      return:
        type: '<xref uid="excel!Excel.NumberFormatInfo:class" />'
methods:
  - name: load(options)
    uid: 'excel!Excel.CultureInfo#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.CultureInfoLoadOptions):
        Excel.CultureInfo;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="excel!Excel.Interfaces.CultureInfoLoadOptions:interface"
            />
      return:
        type: '<xref uid="excel!Excel.CultureInfo:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.CultureInfo#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CultureInfo;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.CultureInfo:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.CultureInfo#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.CultureInfo;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.CultureInfo:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.CultureInfo#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original Excel.CultureInfo
      object is an API object, the `toJSON` method returns a plain JavaScript
      object (typed as `Excel.Interfaces.CultureInfoData`<!-- -->) that contains
      shallow copies of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.CultureInfoData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.CultureInfoData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
