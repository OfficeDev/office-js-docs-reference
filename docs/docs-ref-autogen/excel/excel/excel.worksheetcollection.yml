### YamlMime:TSType
name: Excel.WorksheetCollection
uid: 'excel!Excel.WorksheetCollection:class'
package: excel!
fullName: Excel.WorksheetCollection
summary: >-
  Represents a collection of worksheet objects that are part of the workbook.


  \[ [API set: ExcelApi
  1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.WorksheetCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: items
    uid: 'excel!Excel.WorksheetCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />[]'
  - name: onActivated
    uid: 'excel!Excel.WorksheetCollection#onActivated:member'
    package: excel!
    fullName: onActivated
    summary: >-
      Occurs when any worksheet in the workbook is activated.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onActivated:
        OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetActivatedEventArgs:interface" />&gt;
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onActivated.add(onActivate);

              await context.sync();
              console.log("A handler has been registered for the OnActivate event.");
          });

          ```
  - name: onAdded
    uid: 'excel!Excel.WorksheetCollection#onAdded:member'
    package: excel!
    fullName: onAdded
    summary: >-
      Occurs when a new worksheet is added to the workbook.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onAdded:
        OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetAddedEventArgs:interface" />&gt;
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets;
              sheet.onAdded.add(onWorksheetAdd);

              await context.sync();
              console.log("A handler has been registered for the OnAdded event.");
          });

          ```
  - name: onCalculated
    uid: 'excel!Excel.WorksheetCollection#onCalculated:member'
    package: excel!
    fullName: onCalculated
    summary: >-
      Occurs when any worksheet in the workbook is calculated.


      \[ [API set: ExcelApi
      1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onCalculated:
        OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetCalculatedEventArgs:interface" />&gt;
  - name: onChanged
    uid: 'excel!Excel.WorksheetCollection#onChanged:member'
    package: excel!
    fullName: onChanged
    summary: >-
      Occurs when any worksheet in the workbook is changed.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onChanged:
        OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetChangedEventArgs:interface" />&gt;
  - name: onColumnSorted
    uid: 'excel!Excel.WorksheetCollection#onColumnSorted:member'
    package: excel!
    fullName: onColumnSorted
    summary: >-
      Occurs when one or more columns have been sorted. This happens as the
      result of a left-to-right sort operation.


      \[ [API set: ExcelApi
      1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onColumnSorted:
        OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetColumnSortedEventArgs:interface" />&gt;
  - name: onDeactivated
    uid: 'excel!Excel.WorksheetCollection#onDeactivated:member'
    package: excel!
    fullName: onDeactivated
    summary: >-
      Occurs when any worksheet in the workbook is deactivated.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onDeactivated:
        OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetDeactivatedEventArgs:interface" />&gt;
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml

          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onDeactivated.add(onDeactivate);

              await context.sync();
              console.log("A handler has been registered for the OnDeactivate event.");
          });

          ```
  - name: onDeleted
    uid: 'excel!Excel.WorksheetCollection#onDeleted:member'
    package: excel!
    fullName: onDeleted
    summary: >-
      Occurs when a worksheet is deleted from the workbook.


      \[ [API set: ExcelApi
      1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onDeleted:
        OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetDeletedEventArgs:interface" />&gt;
  - name: onFiltered
    uid: 'excel!Excel.WorksheetCollection#onFiltered:member'
    package: excel!
    fullName: onFiltered
    summary: >-
      Occurs when any worksheet's filter is applied in the workbook.


      \[ [API set: ExcelApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        readonly onFiltered:
        OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetFilteredEventArgs:interface" />&gt;
  - name: onFormatChanged
    uid: 'excel!Excel.WorksheetCollection#onFormatChanged:member'
    package: excel!
    fullName: onFormatChanged
    summary: >-
      Occurs when any worksheet in the workbook has format changed.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onFormatChanged:
        OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetFormatChangedEventArgs:interface" />&gt;
  - name: onRowHiddenChanged
    uid: 'excel!Excel.WorksheetCollection#onRowHiddenChanged:member'
    package: excel!
    fullName: onRowHiddenChanged
    summary: >-
      Occurs when the hidden state of one or more rows has changed on a specific
      worksheet.


      \[ [API set: ExcelApi
      1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onRowHiddenChanged:
        OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetRowHiddenChangedEventArgs:interface" />&gt;
  - name: onRowSorted
    uid: 'excel!Excel.WorksheetCollection#onRowSorted:member'
    package: excel!
    fullName: onRowSorted
    summary: >-
      Occurs when one or more rows have been sorted. This happens as the result
      of a top-to-bottom sort operation.


      \[ [API set: ExcelApi
      1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onRowSorted:
        OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetRowSortedEventArgs:interface" />&gt;
  - name: onSelectionChanged
    uid: 'excel!Excel.WorksheetCollection#onSelectionChanged:member'
    package: excel!
    fullName: onSelectionChanged
    summary: >-
      Occurs when the selection changes on any worksheet.


      \[ [API set: ExcelApi
      1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onSelectionChanged:
        OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetSelectionChangedEventArgs:interface" />&gt;
  - name: onSingleClicked
    uid: 'excel!Excel.WorksheetCollection#onSingleClicked:member'
    package: excel!
    fullName: onSingleClicked
    summary: >-
      Occurs when left-clicked/tapped operation happens in the worksheet
      collection. This event will not be fired when clicking in the following
      cases: - The user drags the mouse for multi-selection. - The user selects
      a cell in the mode when cell arguments are selected for formula
      references.


      \[ [API set: ExcelApi
      1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly onSingleClicked:
        OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="excel!Excel.WorksheetSingleClickedEventArgs:interface" />&gt;
methods:
  - name: add(name)
    uid: 'excel!Excel.WorksheetCollection#add:member(1)'
    package: excel!
    fullName: add(name)
    summary: >-
      Adds a new worksheet to the workbook. The worksheet will be added at the
      end of existing worksheets. If you wish to activate the newly added
      worksheet, call ".activate() on it.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      parameters:
        - id: name
          description: >-
            Optional. The name of the worksheet to be added. If specified, name
            should be unqiue. If not specified, Excel determines the name of the
            new worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sample Name';
              var worksheet = ctx.workbook.worksheets.add(wSheetName);
              worksheet.load('name');
              return ctx.sync().then(function() {
                  console.log(worksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: 'addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)'
    uid: 'excel!Excel.WorksheetCollection#addFromBase64:member(1)'
    package: excel!
    fullName: 'addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)'
    summary: >-
      Inserts the specified worksheets of a workbook into the current workbook.


      *Note**: This API is currently only supported for Office on Windows and
      Mac.


      \[ [API set: ExcelApiAddFromBase64String
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        addFromBase64(base64File: string, sheetNamesToInsert?: string[],
        positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet |
        string): OfficeExtension.ClientResult<string[]>;
      parameters:
        - id: base64File
          description: >-
            Required. The base64-encoded string representing the source workbook
            file.
          type: string
        - id: sheetNamesToInsert
          description: >-
            Optional. The names of individual worksheets to insert. By default,
            all the worksheets from the source workbook are inserted.
          type: 'string[]'
        - id: positionType
          description: >-
            Optional. Where in the current workbook the new worksheets will be
            inserted. See Excel.WorksheetPositionType for details. Default is
            "Start".
          type: '<xref uid="excel!Excel.WorksheetPositionType:enum" />'
        - id: relativeTo
          description: >-
            Optional. The worksheet in the current workbook that is referenced
            for the positionType parameter. Default is null and, based on
            positionType, it will insert worksheets at the start or end of the
            current workbook.
          type: '<xref uid="excel!Excel.Worksheet:class" /> | string'
      return:
        type: >-
          <xref uid="office!OfficeExtension.ClientResult:class"
          />&lt;string[]&gt;
        description: >-
          An array of ids corresponding to each newly inserted worksheet.


          #### Examples


          ```javascript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/85-preview-apis/workbook-insert-external-worksheets.yaml

          const myFile = <HTMLInputElement>document.getElementById("file");

          const reader = new FileReader();


          reader.onload = (event) => {
              Excel.run((context) => {
                  // strip off the metadata before the base64-encoded string
                  const startIndex = reader.result.toString().indexOf("base64,");
                  const workbookContents = reader.result.toString().substr(startIndex + 7);

                  const sheets = context.workbook.worksheets;
                  sheets.addFromBase64(
                      workbookContents,
                      null, // get all the worksheets 
                      Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets
                      );
                  return context.sync();
              });
          };


          // read in the file as a data URL so we can parse the base64-encoded
          string

          reader.readAsDataURL(myFile.files[0]);

          ```
  - name: >-
      addFromBase64(base64File, sheetNamesToInsert, positionTypeString,
      relativeTo)
    uid: 'excel!Excel.WorksheetCollection#addFromBase64:member(2)'
    package: excel!
    fullName: >-
      addFromBase64(base64File, sheetNamesToInsert, positionTypeString,
      relativeTo)
    summary: >-
      Inserts the specified worksheets of a workbook into the current workbook.


      *Note**: This API is currently only supported for Office on Windows and
      Mac.


      \[ [API set: ExcelApiAddFromBase64String
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addFromBase64(base64File: string, sheetNamesToInsert?: string[],
        positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End",
        relativeTo?: Worksheet | string):
        OfficeExtension.ClientResult<string[]>;
      parameters:
        - id: base64File
          description: >-
            Required. The base64-encoded string representing the source workbook
            file.
          type: string
        - id: sheetNamesToInsert
          description: >-
            Optional. The names of individual worksheets to insert. By default,
            all the worksheets from the source workbook are inserted.
          type: 'string[]'
        - id: positionTypeString
          description: >-
            Optional. Where in the current workbook the new worksheets will be
            inserted. See Excel.WorksheetPositionType for details. Default is
            "Start".
          type: '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: >-
            Optional. The worksheet in the current workbook that is referenced
            for the positionType parameter. Default is null and, based on
            positionType, it will insert worksheets at the start or end of the
            current workbook.
          type: '<xref uid="excel!Excel.Worksheet:class" /> | string'
      return:
        type: >-
          <xref uid="office!OfficeExtension.ClientResult:class"
          />&lt;string[]&gt;
        description: An array of ids corresponding to each newly inserted worksheet.
  - name: getActiveWorksheet()
    uid: 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
    package: excel!
    fullName: getActiveWorksheet()
    summary: >-
      Gets the currently active worksheet in the workbook.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) {  
              var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
              activeWorksheet.load('name');
              return ctx.sync().then(function() {
                      console.log(activeWorksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: getCount(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getCount:member(1)'
    package: excel!
    fullName: getCount(visibleOnly)
    summary: >-
      Gets the number of worksheets in the collection.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getFirst(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getFirst:member(1)'
    package: excel!
    fullName: getFirst(visibleOnly)
    summary: >-
      Gets the first worksheet in the collection.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });

          ```
  - name: getItem(key)
    uid: 'excel!Excel.WorksheetCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(key)
    summary: >-
      Gets a worksheet object using its Name or ID.


      \[ [API set: ExcelApi
      1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      parameters:
        - id: key
          description: The Name or ID of the worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getItemOrNullObject(key)
    uid: 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a worksheet object using its Name or ID. If the worksheet does not
      exist, will return a null object.


      \[ [API set: ExcelApi
      1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      parameters:
        - id: key
          description: The Name or ID of the worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: ''
  - name: getLast(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getLast:member(1)'
    package: excel!
    fullName: getLast(visibleOnly)
    summary: >-
      Gets the last worksheet in the collection.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml

          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });

          ```
  - name: load(options)
    uid: 'excel!Excel.WorksheetCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.WorksheetCollectionLoadOptions &
        Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.WorksheetCollectionLoadOptions:interface"
            /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.WorksheetCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.WorksheetCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.WorksheetCollection:class" />'
        description: |-


          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var worksheets = ctx.workbook.worksheets;
              worksheets.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < worksheets.items.length; i++)
                  {
                      console.log(worksheets.items[i].name);
                      console.log(worksheets.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.WorksheetCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption):
        Excel.WorksheetCollection;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.WorksheetCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.WorksheetCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      `Excel.WorksheetCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as
      `Excel.Interfaces.WorksheetCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the
      collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type: >-
          <xref uid="excel!Excel.Interfaces.WorksheetCollectionData:interface"
          />
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
