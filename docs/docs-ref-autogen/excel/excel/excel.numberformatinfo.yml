### YamlMime:TSType
name: Excel.NumberFormatInfo
uid: 'excel!Excel.NumberFormatInfo:class'
package: excel!
fullName: Excel.NumberFormatInfo
summary: Defines the culturally appropriate format of displaying numbers. This is based on current system culture settings.
remarks: '\[ [API set: ExcelApi 1.11](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.NumberFormatInfo#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: currencySymbol
    uid: 'excel!Excel.NumberFormatInfo#currencySymbol:member'
    package: excel!
    fullName: currencySymbol
    summary: Gets the currency symbol for currency values. This is based on current system settings.
    remarks: '\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'readonly currencySymbol: string;'
      return:
        type: string
  - name: numberDecimalSeparator
    uid: 'excel!Excel.NumberFormatInfo#numberDecimalSeparator:member'
    package: excel!
    fullName: numberDecimalSeparator
    summary: Gets the string used as the decimal separator for numeric values. This is based on current system settings.
    remarks: >-
      \[ [API set: ExcelApi 1.11](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

      // This will convert a number like "14,37" to "14.37"

      // (assuming the system decimal separator is ".").
        await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");

      const decimalSource = sheet.getRange("B2");

      decimalSource.load("values");

      context.application.cultureInfo.numberFormat.load("numberDecimalSeparator");

      await context.sync();


      const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;

      const oldDecimalString: string = decimalSource.values[0][0];


      // This assumes the input column is standardized to use "," as the decimal separator. 

      const newDecimalString = oldDecimalString.replace(",", systemDecimalSeparator);


      const resultRange = sheet.getRange("C2");

      resultRange.values = [[newDecimalString]];

      resultRange.format.autofitColumns();

      await context.sync();
        });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly numberDecimalSeparator: string;'
      return:
        type: string
  - name: numberGroupSeparator
    uid: 'excel!Excel.NumberFormatInfo#numberGroupSeparator:member'
    package: excel!
    fullName: numberGroupSeparator
    summary: >-
      Gets the string used to separate groups of digits to the left of the decimal for numeric values. This is based on
      current system settings.
    remarks: >-
      \[ [API set: ExcelApi 1.11](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

      await Excel.run(async (context) => {
        // This will convert a number like "123-456-789" to "123,456,789"
        // (assuming the system thousands separator is ",").
        const sheet = context.workbook.worksheets.getItem("Sample");
        const bigNumberSource = sheet.getRange("B3");
        bigNumberSource.load("values");
        context.application.cultureInfo.numberFormat.load("numberGroupSeparator");
        await context.sync();

        const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;
        const oldBigNumberString: string = bigNumberSource.values[0][0];
        
        // This assumes the input column is standardized to use "-" as the number group separator. 
        const newBigNumberString = oldBigNumberString.replace(/-/g, systemThousandsSeparator);

        const resultRange = sheet.getRange("C3");
        resultRange.values = [[newBigNumberString]];
        resultRange.format.autofitColumns();
        await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly numberGroupSeparator: string;'
      return:
        type: string
methods:
  - name: load(options)
    uid: 'excel!Excel.NumberFormatInfo#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.NumberFormatInfoLoadOptions): Excel.NumberFormatInfo;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="excel!Excel.Interfaces.NumberFormatInfoLoadOptions:interface" />'
      return:
        type: '<xref uid="excel!Excel.NumberFormatInfo:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.NumberFormatInfo#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.NumberFormatInfo;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.NumberFormatInfo:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.NumberFormatInfo#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.NumberFormatInfo;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="excel!Excel.NumberFormatInfo:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.NumberFormatInfo#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.NumberFormatInfo object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `Excel.Interfaces.NumberFormatInfoData`<!-- -->) that contains shallow copies of
      any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.NumberFormatInfoData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.NumberFormatInfoData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
