### YamlMime:UniversalReference
items:
  - uid: excel.Excel.SlicerStyleCollection
    summary: >-
      Represents a collection of SlicerStyle objects.


      \[ [API set: ExcelApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    isPreview: true
    name: Excel.SlicerStyleCollection
    fullName: Excel.SlicerStyleCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.SlicerStyleCollection.add
      - excel.Excel.SlicerStyleCollection.context
      - excel.Excel.SlicerStyleCollection.getCount
      - excel.Excel.SlicerStyleCollection.getDefault
      - excel.Excel.SlicerStyleCollection.getItem
      - excel.Excel.SlicerStyleCollection.getItemOrNullObject
      - excel.Excel.SlicerStyleCollection.items
      - excel.Excel.SlicerStyleCollection.load
      - excel.Excel.SlicerStyleCollection.load_1
      - excel.Excel.SlicerStyleCollection.load_2
      - excel.Excel.SlicerStyleCollection.setDefault
      - excel.Excel.SlicerStyleCollection.toJSON
  - uid: excel.Excel.SlicerStyleCollection.add
    summary: >-
      Creates a blank SlicerStyle with the specified name.


      \[ [API set: ExcelApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    isPreview: true
    name: 'add(name, makeUniqueName)'
    fullName: 'add(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name: string, makeUniqueName?: boolean): Excel.SlicerStyle;'
      return:
        type:
          - excel.Excel.SlicerStyle
        description: The newly created SlicerStyle.
      parameters:
        - id: name
          description: >-
            The unique name for the new SlicerStyle. Will throw an invalid argument exception if the name is already in
            use.
          type:
            - string
        - id: makeUniqueName
          description: 'Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.'
          type:
            - boolean
  - uid: excel.Excel.SlicerStyleCollection.context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    isPreview: true
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.SlicerStyleCollection.getCount
    summary: >-
      Gets the number of slicer styles in the collection.


      \[ [API set: ExcelApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    isPreview: true
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.SlicerStyleCollection.getDefault
    summary: >-
      Gets the default SlicerStyle for the parent object's scope.


      \[ [API set: ExcelApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    isPreview: true
    name: getDefault()
    fullName: getDefault()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefault(): Excel.SlicerStyle;'
      return:
        type:
          - excel.Excel.SlicerStyle
        description: The SlicerStyle object that is the current default SlicerStyle.
  - uid: excel.Excel.SlicerStyleCollection.getItem
    summary: >-
      Gets a SlicerStyle by name.


      \[ [API set: ExcelApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    isPreview: true
    name: getItem(name)
    fullName: getItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(name: string): Excel.SlicerStyle;'
      return:
        type:
          - excel.Excel.SlicerStyle
        description: The SlicerStyle object whose name matches the input.
      parameters:
        - id: name
          description: Name of the SlicerStyle to be retrieved.
          type:
            - string
  - uid: excel.Excel.SlicerStyleCollection.getItemOrNullObject
    summary: >-
      Gets a SlicerStyle by name. If the SlicerStyle does not exist, will return a null object.


      \[ [API set: ExcelApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    isPreview: true
    name: getItemOrNullObject(name)
    fullName: getItemOrNullObject(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(name: string): Excel.SlicerStyle;'
      return:
        type:
          - excel.Excel.SlicerStyle
        description: The SlicerStyle object whose name matches the input.
      parameters:
        - id: name
          description: Name of the SlicerStyle to be retrieved.
          type:
            - string
  - uid: excel.Excel.SlicerStyleCollection.items
    summary: Gets the loaded child items in this collection.
    isPreview: true
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.SlicerStyle[];'
      return:
        type:
          - 'Excel.SlicerStyle[]'
  - uid: excel.Excel.SlicerStyleCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Excel.SlicerStyleCollection` - Where option is a comma-delimited string or an
      array of strings that specify the properties to load.


      `load(option?: { select?: string; expand?: string; }): Excel.SlicerStyleCollection` - Where option.select is a
      comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.SlicerStyleCollection` -
      Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip specifies the number of items that are
      to be skipped and not included in the result. If option.top is specified, the result set will start after skipping
      the specified number of items.
    isPreview: true
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        load(option?: Excel.Interfaces.SlicerStyleCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.SlicerStyleCollection;
      return:
        type:
          - excel.Excel.SlicerStyleCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.SlicerStyleCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.SlicerStyleCollection.load_1
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    isPreview: true
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SlicerStyleCollection;'
      return:
        type:
          - excel.Excel.SlicerStyleCollection
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.SlicerStyleCollection.load_2
    isPreview: true
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.SlicerStyleCollection;'
      return:
        type:
          - excel.Excel.SlicerStyleCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.SlicerStyleCollection.setDefault
    summary: >-
      Sets the default SlicerStyle for use in the parent object's scope.


      \[ [API set: ExcelApi BETA (PREVIEW
      ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    isPreview: true
    name: setDefault(newDefaultStyle)
    fullName: setDefault(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDefault(newDefaultStyle: SlicerStyle | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: The SlicerStyle object or name of the SlicerStyle object that should be the new default.
          type:
            - SlicerStyle | string
  - uid: excel.Excel.SlicerStyleCollection.toJSON
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Excel.SlicerStyleCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerStyleCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the collection's items.
    isPreview: true
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.SlicerStyleCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.SlicerStyleCollectionData
        description: ''
