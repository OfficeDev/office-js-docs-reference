### YamlMime:UniversalReference
items:
  - uid: excel.Excel.TableRowCollection
    summary: >-
      Represents a collection of all the rows that are part of the table.


      Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them, a TableRow object
      represent the physical location of the table row, but not the data. That is, if the data is sorted or if new rows
      are added, a table row will continue to point at the index for which it was created.


      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.TableRowCollection
    fullName: excel.Excel.TableRowCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.TableRowCollection.add
      - excel.Excel.TableRowCollection.count
      - excel.Excel.TableRowCollection.getCount
      - excel.Excel.TableRowCollection.getItemAt
      - excel.Excel.TableRowCollection.items
      - excel.Excel.TableRowCollection.load
      - excel.Excel.TableRowCollection.toJSON
  - uid: excel.Excel.TableRowCollection.add
    summary: >-
      Adds one or more rows to the table. The return object will be the top of the newly added row(s).


      Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them, a TableRow object
      represent the physical location of the table row, but not the data. That is, if the data is sorted or if new rows
      are added, a table row will continue to point at the index for which it was created.


      \[ [API set: ExcelApi 1.1 for adding a single row; 1.4 allows adding of multiple
      rows.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(index, values)'
    fullName: excel.Excel.TableRowCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number):
        Excel.TableRow;
      return:
        type:
          - excel.Excel.TableRow
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var values = [["Sample", "Values", "For", "New", "Row"]];
              var row = tables.getItem("Table1").rows.add(null, values);
              row.load('index');
              return ctx.sync().then(function() {
                  console.log(row.index);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: >-
            Optional. Specifies the relative position of the new row. If null or -1, the addition happens at the end.
            Any rows below the inserted row are shifted downwards. Zero-indexed.
          type:
            - number
        - id: values
          description: Optional. A 2-dimensional array of unformatted values of the table row.
          type:
            - Array<Array<boolean | string | number>> | boolean | string | number
  - uid: excel.Excel.TableRowCollection.count
    summary: |-
      Returns the number of rows in the table. Read-only.

      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: count
    fullName: excel.Excel.TableRowCollection.count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: excel.Excel.TableRowCollection.getCount
    summary: |-
      Gets the number of rows in the table.

      \[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.TableRowCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.TableRowCollection.getItemAt
    summary: >-
      Gets a row based on its position in the collection.


      Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them, a TableRow object
      represent the physical location of the table row, but not the data. That is, if the data is sorted or if new rows
      are added, a table row will continue to point at the index for which it was created.


      \[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: getItemAt(index)
    fullName: excel.Excel.TableRowCollection.getItemAt
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.TableRow;'
      return:
        type:
          - excel.Excel.TableRow
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tablerow = ctx.workbook.tables.getItem('Table1').rows.getItemAt(0);
              tablerow.load('name');
              return ctx.sync().then(function() {
                      console.log(tablerow.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type:
            - number
  - uid: excel.Excel.TableRowCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.TableRowCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.TableRow[];'
      return:
        type:
          - 'Excel.TableRow[]'
  - uid: excel.Excel.TableRowCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): Excel.TableRowCollection` - Where option.select is a
      comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that
      specifies the navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRowCollection` -
      Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum
      number of collection items that can be included in the result. Option.skip specifies the number of items that are
      to be skipped and not included in the result. If option.top is specified, the result set will start after skipping
      the specified number of items.

      #### Examples


      ```javascript

      Excel.run(function (ctx) { 
          var tablerows = ctx.workbook.tables.getItem('Table1').rows;
          tablerows.load('items');
          return ctx.sync().then(function() {
              console.log("tablerows Count: " + tablerows.count);
              for (var i = 0; i < tablerows.items.length; i++)
              {
                  console.log(tablerows.items[i].index);
              }
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // In the example, we'll select the top 100 rows of the table.

      Excel.run(function (ctx) { 
          var table = ctx.workbook.tables.getItem("Table1");
          var tableRows = table.rows.load({"select" : "index, values","top": 100, "skip": 0 })
          return ctx.sync().then(function() {
              for (var i = 0; i < tableRows.items.length; i++)
              {
                  console.log(tableRows.items[i].index);
                  console.log(tableRows.items[i].values);
              }
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });

      ```
    name: load(option)
    fullName: excel.Excel.TableRowCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): Excel.TableRowCollection;'
      return:
        type:
          - excel.Excel.TableRowCollection
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.TableRowCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.TableRowCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableRowCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.TableRowCollectionData
        description: ''
