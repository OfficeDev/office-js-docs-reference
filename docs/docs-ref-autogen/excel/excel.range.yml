### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Range
    summary: |-
      Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: Excel.Range
    fullName: excel.Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.Range.address
      - excel.Excel.Range.addressLocal
      - excel.Excel.Range.calculate
      - excel.Excel.Range.cellCount
      - excel.Excel.Range.clear
      - excel.Excel.Range.columnCount
      - excel.Excel.Range.columnHidden
      - excel.Excel.Range.columnIndex
      - excel.Excel.Range.conditionalFormats
      - excel.Excel.Range.delete
      - excel.Excel.Range.format
      - excel.Excel.Range.formulas
      - excel.Excel.Range.formulasLocal
      - excel.Excel.Range.formulasR1C1
      - excel.Excel.Range.getBoundingRect
      - excel.Excel.Range.getCell
      - excel.Excel.Range.getColumn
      - excel.Excel.Range.getColumnsAfter
      - excel.Excel.Range.getColumnsBefore
      - excel.Excel.Range.getEntireColumn
      - excel.Excel.Range.getEntireRow
      - excel.Excel.Range.getIntersection
      - excel.Excel.Range.getIntersectionOrNullObject
      - excel.Excel.Range.getLastCell
      - excel.Excel.Range.getLastColumn
      - excel.Excel.Range.getLastRow
      - excel.Excel.Range.getOffsetRange
      - excel.Excel.Range.getResizedRange
      - excel.Excel.Range.getRow
      - excel.Excel.Range.getRowsAbove
      - excel.Excel.Range.getRowsBelow
      - excel.Excel.Range.getUsedRange
      - excel.Excel.Range.getUsedRangeOrNullObject
      - excel.Excel.Range.getVisibleView
      - excel.Excel.Range.hidden
      - excel.Excel.Range.insert
      - excel.Excel.Range.load
      - excel.Excel.Range.merge
      - excel.Excel.Range.numberFormat
      - excel.Excel.Range.rowCount
      - excel.Excel.Range.rowHidden
      - excel.Excel.Range.rowIndex
      - excel.Excel.Range.select
      - excel.Excel.Range.set
      - excel.Excel.Range.sort
      - excel.Excel.Range.text
      - excel.Excel.Range.toJSON
      - excel.Excel.Range.track
      - excel.Excel.Range.unmerge
      - excel.Excel.Range.untrack
      - excel.Excel.Range.values
      - excel.Excel.Range.valueTypes
      - excel.Excel.Range.worksheet
  - uid: excel.Excel.Range.address
    summary: >-
      Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. Sheet1!A1:B4).
      Read-only.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: address
    fullName: excel.Excel.Range.address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Range.addressLocal
    summary: |-
      Represents range reference for the specified range in the language of the user. Read-only.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: addressLocal
    fullName: excel.Excel.Range.addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Range.calculate
    summary: |-
      Calculates a range of cells on a worksheet.

      \[ [API set: ExcelApi 1.6 (PREVIEW)](http://bing.com?type=excel) \]
    name: calculate()
    fullName: excel.Excel.Range.calculate
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Range.cellCount
    summary: |-
      Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: cellCount
    fullName: excel.Excel.Range.cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.clear
    summary: |-
      Clear range values, format, fill, border, etc.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: clear(applyTo)
    fullName: excel.Excel.Range.clear
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: Determines the type of clear action. See Excel.ClearApplyTo for details.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "D:F";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          range.clear();
          return ctx.sync(); 
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.columnCount
    summary: |-
      Represents the total number of columns in the range. Read-only.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: columnCount
    fullName: excel.Excel.Range.columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.columnHidden
    summary: |-
      Represents if all columns of the current range are hidden.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: columnHidden
    fullName: excel.Excel.Range.columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.columnIndex
    summary: |-
      Represents the column number of the first cell in the range. Zero-indexed. Read-only.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: columnIndex
    fullName: excel.Excel.Range.columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.conditionalFormats
    summary: |-
      Collection of ConditionalFormats that intersect the range. Read-only.

      \[ [API set: ExcelApi 1.6 (PREVIEW)](http://bing.com?type=excel) \]
    name: conditionalFormats
    fullName: excel.Excel.Range.conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - Excel.ConditionalFormatCollection
  - uid: excel.Excel.Range.delete
    summary: |-
      Deletes the cells associated with the range.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: delete(shift)
    fullName: excel.Excel.Range.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: Specifies which way to shift the cells. See Excel.DeleteShiftDirection for details.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "D:F";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          range.delete();
          return ctx.sync(); 
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.format
    summary: >-
      Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.
      Read-only.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: format
    fullName: excel.Excel.Range.format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - Excel.RangeFormat
  - uid: excel.Excel.Range.formulas
    summary: |-
      Represents the formula in A1-style notation.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: formulas
    fullName: excel.Excel.Range.formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: Array<Array<any>>;'
      return:
        type:
          - Array<Array<any>>
  - uid: excel.Excel.Range.formulasLocal
    summary: >-
      Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the
      English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: formulasLocal
    fullName: excel.Excel.Range.formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: Array<Array<any>>;'
      return:
        type:
          - Array<Array<any>>
  - uid: excel.Excel.Range.formulasR1C1
    summary: |-
      Represents the formula in R1C1-style notation.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: formulasR1C1
    fullName: excel.Excel.Range.formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: Array<Array<any>>;'
      return:
        type:
          - Array<Array<any>>
  - uid: excel.Excel.Range.getBoundingRect
    summary: >-
      Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of "B2:C5" and
      "D10:E15" is "B2:E16".


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getBoundingRect(anotherRange)
    fullName: excel.Excel.Range.getBoundingRect
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Excel.Range | string): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: anotherRange
          description: The range object or address or range name.
          type:
            - Excel.Range | string
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "D4:G6";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var range = range.getBoundingRect("G4:H8");
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address); // Prints Sheet1!D4:H8
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getCell
    summary: >-
      Gets the range object containing the single cell based on row and column numbers. The cell can be outside the
      bounds of its parent range, so long as it's stays within the worksheet grid. The returned cell is located relative
      to the top left cell of the range.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: 'getCell(row, column)'
    fullName: excel.Excel.Range.getCell
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: row
          description: Row number of the cell to be retrieved. Zero-indexed.
          type:
            - number
        - id: column
          description: Column number of the cell to be retrieved. Zero-indexed.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:F8";
          var worksheet = ctx.workbook.worksheets.getItem(sheetName);
          var range = worksheet.getRange(rangeAddress);
          var cell = range.cell(0,0);
          cell.load('address');
          return ctx.sync().then(function() {
              console.log(cell.address);
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getColumn
    summary: |-
      Gets a column contained in the range.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getColumn(column)
    fullName: excel.Excel.Range.getColumn
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: column
          description: Column number of the range to be retrieved. Zero-indexed.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet19";
          var rangeAddress = "A1:F8";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address); // prints Sheet1!B1:B8
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getColumnsAfter
    summary: |-
      Gets a certain number of columns to the right of the current Range object.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: getColumnsAfter(count)
    fullName: excel.Excel.Range.getColumnsAfter
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: count
          description: >-
            The number of columns to include in the resulting range. In general, use a positive number to create a range
            outside the current range. You can also use a negative number to create a range within the current range.
            The default value is 1.
          type:
            - number
  - uid: excel.Excel.Range.getColumnsBefore
    summary: |-
      Gets a certain number of columns to the left of the current Range object.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: getColumnsBefore(count)
    fullName: excel.Excel.Range.getColumnsBefore
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: count
          description: >-
            The number of columns to include in the resulting range. In general, use a positive number to create a range
            outside the current range. You can also use a negative number to create a range within the current range.
            The default value is 1.
          type:
            - number
  - uid: excel.Excel.Range.getEntireColumn
    summary: >-
      Gets an object that represents the entire column of the range (for example, if the current range represents cells
      "B4:E11", it's \`getEntireColumn\` is a range that represents columns "B:E").


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getEntireColumn()
    fullName: excel.Excel.Range.getEntireColumn
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "D:F";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var rangeEC = range.getEntireColumn();
          rangeEC.load('address');
          return ctx.sync().then(function() {
              console.log(rangeEC.address);
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getEntireRow
    summary: >-
      Gets an object that represents the entire row of the range (for example, if the current range represents cells
      "B4:E11", it's \`GetEntireRow\` is a range that represents rows "4:11").


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getEntireRow()
    fullName: excel.Excel.Range.getEntireRow
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) {
          var sheetName = "Sheet1";
          var rangeAddress = "D:F"; 
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var rangeER = range.getEntireRow();
          rangeER.load('address');
          return ctx.sync().then(function() {
              console.log(rangeER.address);
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getIntersection
    summary: |-
      Gets the range object that represents the rectangular intersection of the given ranges.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getIntersection(anotherRange)
    fullName: excel.Excel.Range.getIntersection
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Excel.Range | string): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: anotherRange
          description: The range object or range address that will be used to determine the intersection of ranges.
          type:
            - Excel.Range | string
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:F8";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address); // prints Sheet1!D4:F6
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getIntersectionOrNullObject
    summary: >-
      Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is
      found, will return a null object.


      \[ [API set: ExcelApi 1.4](http://bing.com?type=excel) \]
    name: getIntersectionOrNullObject(anotherRange)
    fullName: excel.Excel.Range.getIntersectionOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Excel.Range | string): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: anotherRange
          description: The range object or range address that will be used to determine the intersection of ranges.
          type:
            - Excel.Range | string
  - uid: excel.Excel.Range.getLastCell
    summary: |-
      Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getLastCell()
    fullName: excel.Excel.Range.getLastCell
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:F8";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address); // prints Sheet1!F8
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getLastColumn
    summary: |-
      Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getLastColumn()
    fullName: excel.Excel.Range.getLastColumn
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:F8";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address); // prints Sheet1!F1:F8
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getLastRow
    summary: |-
      Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getLastRow()
    fullName: excel.Excel.Range.getLastRow
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:F8";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address); // prints Sheet1!A8:F8
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getOffsetRange
    summary: >-
      Gets an object which represents a range that's offset from the specified range. The dimension of the returned
      range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error
      will be thrown.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: excel.Excel.Range.getOffsetRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset
            downward, and negative values are offset upward.
          type:
            - number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are
            offset to the right, and negative values are offset to the left.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "D4:F6";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address); // prints Sheet1!H3:K5
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getResizedRange
    summary: >-
      Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted)
      by some number of rows and columns.


      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: excel.Excel.Range.getResizedRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: deltaRows
          description: >-
            The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive
            number to expand the range, or a negative number to decrease it.
          type:
            - number
        - id: deltaColumns
          description: >-
            The number of columnsby which to expand the bottom-right corner, relative to the current range. Use a
            positive number to expand the range, or a negative number to decrease it.
          type:
            - number
  - uid: excel.Excel.Range.getRow
    summary: |-
      Gets a row contained in the range.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getRow(row)
    fullName: excel.Excel.Range.getRow
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: row
          description: Row number of the range to be retrieved. Zero-indexed.
          type:
            - number
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:F8";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
          range.load('address');
          return ctx.sync().then(function() {
              console.log(range.address); // prints Sheet1!A2:F2
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getRowsAbove
    summary: |-
      Gets a certain number of rows above the current Range object.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: getRowsAbove(count)
    fullName: excel.Excel.Range.getRowsAbove
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: count
          description: >-
            The number of rows to include in the resulting range. In general, use a positive number to create a range
            outside the current range. You can also use a negative number to create a range within the current range.
            The default value is 1.
          type:
            - number
  - uid: excel.Excel.Range.getRowsBelow
    summary: |-
      Gets a certain number of rows below the current Range object.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: getRowsBelow(count)
    fullName: excel.Excel.Range.getRowsBelow
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: count
          description: >-
            The number of rows to include in the resulting range. In general, use a positive number to create a range
            outside the current range. You can also use a negative number to create a range within the current range.
            The default value is 1.
          type:
            - number
  - uid: excel.Excel.Range.getUsedRange
    summary: >-
      Returns the used range of the given range object. If there are no used cells within the range, this function will
      throw an ItemNotFound error.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: getUsedRange(valuesOnly)
    fullName: excel.Excel.Range.getUsedRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: 'Considers only cells with values as used cells. \[Api set: ExcelApi 1.2\]'
          type:
            - boolean
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "D:F";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          var rangeUR = range.getUsedRange();
          rangeUR.load('address');
          return ctx.sync().then(function() {
              console.log(rangeUR.address);
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.getUsedRangeOrNullObject
    summary: >-
      Returns the used range of the given range object. If there are no used cells within the range, this function will
      return a null object.


      \[ [API set: ExcelApi 1.4](http://bing.com?type=excel) \]
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: excel.Excel.Range.getUsedRangeOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: Considers only cells with values as used cells.
          type:
            - boolean
  - uid: excel.Excel.Range.getVisibleView
    summary: |-
      Represents the visible rows of the current range.

      \[ [API set: ExcelApi 1.3](http://bing.com?type=excel) \]
    name: getVisibleView()
    fullName: excel.Excel.Range.getVisibleView
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - Excel.RangeView
        description: ''
  - uid: excel.Excel.Range.hidden
    summary: |-
      Represents if all cells of the current range are hidden.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: hidden
    fullName: excel.Excel.Range.hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.insert
    summary: >-
      Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make
      space. Returns a new Range object at the now blank space.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: insert(shift)
    fullName: excel.Excel.Range.insert
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: string): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: shift
          description: Specifies which way to shift the cells. See Excel.InsertShiftDirection for details.
          type:
            - string
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "F5:F10";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          range.insert();
          return ctx.sync(); 
          });
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: excel.Excel.Range.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: excel.Excel.Range.merge
    summary: |-
      Merge the range cells into one region in the worksheet.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: merge(across)
    fullName: excel.Excel.Range.merge
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: >-
            Set true to merge cells in each row of the specified range as separate merged cells. The default value is
            false.
          type:
            - boolean
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:C3";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          range.merge(true);
          return ctx.sync(); 
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:C3";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          range.unmerge();
          return ctx.sync(); 
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.numberFormat
    summary: |-
      Represents Excel's number format code for the given cell.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: numberFormat
    fullName: excel.Excel.Range.numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: Array<Array<any>>;'
      return:
        type:
          - Array<Array<any>>
  - uid: excel.Excel.Range.rowCount
    summary: |-
      Returns the total number of rows in the range. Read-only.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: rowCount
    fullName: excel.Excel.Range.rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.rowHidden
    summary: |-
      Represents if all rows of the current range are hidden.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: rowHidden
    fullName: excel.Excel.Range.rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.rowIndex
    summary: |-
      Returns the row number of the first cell in the range. Zero-indexed. Read-only.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: rowIndex
    fullName: excel.Excel.Range.rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.select
    summary: |-
      Selects the specified range in the Excel UI.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: select()
    fullName: excel.Excel.Range.select
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript

      Excel.run(function (ctx) {
          var sheetName = "Sheet1";
          var rangeAddress = "F5:F10"; 
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          range.select();
          return ctx.sync(); 
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: excel.Excel.Range.set
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        set(properties: Interfaces.RangeUpdateData, options?: {
                    throwOnReadOnly?: boolean;
                }): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: ''
          type:
            - |-
              {
                          /**
                           * Throw an error if the passed-in property list includes read-only properties (default = true).
                           */
                          throwOnReadOnly?: boolean;
                      }
  - uid: excel.Excel.Range.sort
    summary: |-
      Represents the range sort of the current range.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: sort
    fullName: excel.Excel.Range.sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - Excel.RangeSort
  - uid: excel.Excel.Range.text
    summary: >-
      Text values of the specified range. The Text value will not depend on the cell width. The \# sign substitution
      that happens in Excel UI will not affect the text value returned by the API. Read-only.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: text
    fullName: excel.Excel.Range.text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: Array<Array<any>>;'
      return:
        type:
          - Array<Array<any>>
  - uid: excel.Excel.Range.toJSON
    name: toJSON()
    fullName: excel.Excel.Range.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON:'
      return:
        type:
          - |-
            {
                        "address": string;
                        "addressLocal": string;
                        "cellCount": number;
                        "columnCount": number;
                        "columnHidden": boolean;
                        "columnIndex": number;
                        "format": RangeFormat;
                        "formulas": any[][];
                        "formulasLocal": any[][];
                        "formulasR1C1": any[][];
                        "hidden": boolean;
                        "numberFormat": any[][];
                        "rowCount": number;
                        "rowHidden": boolean;
                        "rowIndex": number;
                        "text": any[][];
                        "values": any[][];
                        "valueTypes": string[][];
                    }
        description: ''
  - uid: excel.Excel.Range.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: excel.Excel.Range.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
  - uid: excel.Excel.Range.unmerge
    summary: |-
      Unmerge the range cells into separate cells.

      \[ [API set: ExcelApi 1.2](http://bing.com?type=excel) \]
    name: unmerge()
    fullName: excel.Excel.Range.unmerge
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      #### Examples

      ```javascript
      Excel.run(function (ctx) { 
          var sheetName = "Sheet1";
          var rangeAddress = "A1:C3";
          var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
          range.unmerge();
          return ctx.sync(); 
      }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
      });
      ```
  - uid: excel.Excel.Range.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: excel.Excel.Range.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
  - uid: excel.Excel.Range.values
    summary: >-
      Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean.
      Cell that contain an error will return the error string.


      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: values
    fullName: excel.Excel.Range.values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: Array<Array<any>>;'
      return:
        type:
          - Array<Array<any>>
  - uid: excel.Excel.Range.valueTypes
    summary: |-
      Represents the type of data of each cell. Read-only.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: valueTypes
    fullName: excel.Excel.Range.valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Array<Array<string>>;'
      return:
        type:
          - Array<Array<string>>
  - uid: excel.Excel.Range.worksheet
    summary: |-
      The worksheet containing the current range. Read-only.

      \[ [API set: ExcelApi 1.1](http://bing.com?type=excel) \]
    name: worksheet
    fullName: excel.Excel.Range.worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - Excel.Worksheet
