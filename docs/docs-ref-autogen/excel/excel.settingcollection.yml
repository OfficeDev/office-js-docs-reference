### YamlMime:UniversalReference
items:
  - uid: excel.Excel.SettingCollection
    summary: >-
      Represents a collection of key-value pair setting objects that are part of the workbook. The scope is limited to
      per file and add-in (task-pane or content) combination.


      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: Excel.SettingCollection
    fullName: excel.Excel.SettingCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.SettingCollection.add
      - excel.Excel.SettingCollection.getCount
      - excel.Excel.SettingCollection.getItem
      - excel.Excel.SettingCollection.getItemOrNullObject
      - excel.Excel.SettingCollection.items
      - excel.Excel.SettingCollection.load
      - excel.Excel.SettingCollection.onSettingsChanged
      - excel.Excel.SettingCollection.toJSON
  - uid: excel.Excel.SettingCollection.add
    summary: |-
      Sets or adds the specified setting to the workbook.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(key, value)'
    fullName: excel.Excel.SettingCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(key: string, value: string | number | boolean | Date | Array<any> | any): Excel.Setting;'
      return:
        type:
          - excel.Excel.Setting
        description: ''
      parameters:
        - id: key
          description: The Key of the new setting.
          type:
            - string
        - id: value
          description: The Value for the new setting.
          type:
            - string | number | boolean | Date | Array<any> | any
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const settings = context.workbook.settings; 
          settings.onSettingsChanged.add(onChangedSetting);
          OfficeHelpers.UI.notify("Handler registered", "");

          await context.sync();
      });
      ```
  - uid: excel.Excel.SettingCollection.getCount
    summary: |-
      Gets the number of Settings in the collection.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getCount()
    fullName: excel.Excel.SettingCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.SettingCollection.getItem
    summary: |-
      Gets a Setting entry via the key.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItem(key)
    fullName: excel.Excel.SettingCollection.getItem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Setting;'
      return:
        type:
          - excel.Excel.Setting
        description: ''
      parameters:
        - id: key
          description: Key of the setting.
          type:
            - string
  - uid: excel.Excel.SettingCollection.getItemOrNullObject
    summary: |-
      Gets a Setting entry via the key. If the Setting does not exist, will return a null object.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getItemOrNullObject(key)
    fullName: excel.Excel.SettingCollection.getItemOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Setting;'
      return:
        type:
          - excel.Excel.Setting
        description: ''
      parameters:
        - id: key
          description: The key of the setting.
          type:
            - string
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const settings = context.workbook.settings;
          let needsReview = settings.getItem("NeedsReview");
          needsReview.delete();
          needsReview = settings.getItemOrNullObject("NeedsReview");

          await context.sync();

          if (needsReview.isNullObject) {
              OfficeHelpers.UI.notify("The setting has been deleted");
          } else {
              OfficeHelpers.UI.notify("The setting was not deleted");
          }

          await context.sync();
      });
      ```
  - uid: excel.Excel.SettingCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: excel.Excel.SettingCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Setting[];'
      return:
        type:
          - 'Excel.Setting[]'
  - uid: excel.Excel.SettingCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: string | string[]): Excel.SettingCollection` - Where option is a comma-delimited string or an array
      of strings that specify the properties/relationships to load.


      `load(option?: { select?: string; expand?: string; }): Excel.SettingCollection` - Where option.select is a
      comma-delimited string that specifies the properties/relationships to load, and options.expand is a
      comma-delimited string that specifies the relationships to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.SettingCollection` - Only
      available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number
      of collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.
    name: load(option)
    fullName: excel.Excel.SettingCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        load(option?: Excel.Interfaces.SettingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.SettingCollection;
      return:
        type:
          - excel.Excel.SettingCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.SettingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.SettingCollection.onSettingsChanged
    summary: |-
      Occurs when the Settings in the document are changed.

      \[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: onSettingsChanged
    fullName: excel.Excel.SettingCollection.onSettingsChanged
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly onSettingsChanged: OfficeExtension.EventHandlers<Excel.SettingsChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.SettingsChangedEventArgs>
    remarks: |


      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const settings = context.workbook.settings; 
          settings.onSettingsChanged.add(onChangedSetting);
          OfficeHelpers.UI.notify("Handler registered", "");

          await context.sync();
      });
      ```
  - uid: excel.Excel.SettingCollection.toJSON
    name: toJSON()
    fullName: excel.Excel.SettingCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.SettingCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.SettingCollectionData
        description: ''
