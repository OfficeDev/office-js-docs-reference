### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Table
    summary: |-
      Represents an Excel table.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    remarks: >-
      Our [how-to guide on working with
      tables](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables) has detailed walkthroughs,
      images, and code samples.
    name: Excel.Table
    fullName: excel.Excel.Table
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.Table.clearFilters
      - excel.Excel.Table.columns
      - excel.Excel.Table.convertToRange
      - excel.Excel.Table.delete
      - excel.Excel.Table.getDataBodyRange
      - excel.Excel.Table.getHeaderRowRange
      - excel.Excel.Table.getRange
      - excel.Excel.Table.getTotalRowRange
      - excel.Excel.Table.highlightFirstColumn
      - excel.Excel.Table.highlightLastColumn
      - excel.Excel.Table.id
      - excel.Excel.Table.load
      - excel.Excel.Table.name
      - excel.Excel.Table.onChanged
      - excel.Excel.Table.onSelectionChanged
      - excel.Excel.Table.reapplyFilters
      - excel.Excel.Table.rows
      - excel.Excel.Table.showBandedColumns
      - excel.Excel.Table.showBandedRows
      - excel.Excel.Table.showFilterButton
      - excel.Excel.Table.showHeaders
      - excel.Excel.Table.showTotals
      - excel.Excel.Table.sort
      - excel.Excel.Table.style
      - excel.Excel.Table.toJSON
      - excel.Excel.Table.worksheet
  - uid: excel.Excel.Table.clearFilters
    summary: |-
      Clears all the filters currently applied on the table.

      \[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: clearFilters()
    fullName: excel.Excel.Table.clearFilters
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFilters(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Table.columns
    summary: |-
      Represents a collection of all the columns in the table. Read-only.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: columns
    fullName: excel.Excel.Table.columns
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columns: Excel.TableColumnCollection;'
      return:
        type:
          - excel.Excel.TableColumnCollection
  - uid: excel.Excel.Table.convertToRange
    summary: |-
      Converts the table into a normal range of cells. All data is preserved.

      \[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: convertToRange()
    fullName: excel.Excel.Table.convertToRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              table.convertToRange();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Table.delete
    summary: |-
      Deletes the table.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: delete()
    fullName: excel.Excel.Table.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              table.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Table.getDataBodyRange
    summary: |-
      Gets the range object associated with the data body of the table.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getDataBodyRange()
    fullName: excel.Excel.Table.getDataBodyRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataBodyRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              var tableDataRange = table.getDataBodyRange();
              tableDataRange.load('address')
              return ctx.sync().then(function() {
                      console.log(tableDataRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Table.getHeaderRowRange
    summary: |-
      Gets the range object associated with header row of the table.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getHeaderRowRange()
    fullName: excel.Excel.Table.getHeaderRowRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHeaderRowRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              var tableHeaderRange = table.getHeaderRowRange();
              tableHeaderRange.load('address');
              return ctx.sync().then(function() {
                  console.log(tableHeaderRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Table.getRange
    summary: |-
      Gets the range object associated with the entire table.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getRange()
    fullName: excel.Excel.Table.getRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              var tableRange = table.getRange();
              tableRange.load('address');    
              return ctx.sync().then(function() {
                      console.log(tableRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Table.getTotalRowRange
    summary: |-
      Gets the range object associated with totals row of the table.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: getTotalRowRange()
    fullName: excel.Excel.Table.getTotalRowRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTotalRowRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-

          #### Examples

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              var tableTotalsRange = table.getTotalRowRange();
              tableTotalsRange.load('address');    
              return ctx.sync().then(function() {
                      console.log(tableTotalsRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Table.highlightFirstColumn
    summary: |-
      Indicates whether the first column contains special formatting.

      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: highlightFirstColumn
    fullName: excel.Excel.Table.highlightFirstColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'highlightFirstColumn: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Table.highlightLastColumn
    summary: |-
      Indicates whether the last column contains special formatting.

      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: highlightLastColumn
    fullName: excel.Excel.Table.highlightLastColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'highlightLastColumn: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Table.id
    summary: >-
      Returns a value that uniquely identifies the table in a given workbook. The value of the identifier remains the
      same even when the table is renamed. Read-only.


      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: id
    fullName: excel.Excel.Table.id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Table.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    remarks: >-
      In addition to this signature, this method has the following signatures:


      `load(option?: { select?: string; expand?: string; }): Excel.Table` - Where option.select is a comma-delimited
      string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the
      navigation properties to load.


      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Table` - Only available
      on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of
      collection items that can be included in the result. Option.skip specifies the number of items that are to be
      skipped and not included in the result. If option.top is specified, the result set will start after skipping the
      specified number of items.

      #### Examples


      ```javascript

      // Get a table by name. 

      Excel.run(function (ctx) { 
          var tableName = 'Table1';
          var table = ctx.workbook.tables.getItem(tableName);
          table.load('index')
          return ctx.sync().then(function() {
                  console.log(table.index);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Get a table by index.

      Excel.run(function (ctx) { 
          var index = 0;
          var table = ctx.workbook.tables.getItemAt(0);
          table.load('id')
          return ctx.sync().then(function() {
                  console.log(table.id);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```

      ```javascript

      // Set table style. 

      Excel.run(function (ctx) { 
          var tableName = 'Table1';
          var table = ctx.workbook.tables.getItem(tableName);
          table.name = 'Table1-Renamed';
          table.showTotals = false;
          table.style = 'TableStyleMedium2';
          table.load('tableStyle');
          return ctx.sync().then(function() {
                  console.log(table.style);
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });

      ```
    name: load(option)
    fullName: excel.Excel.Table.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[]): Excel.Table;'
      return:
        type:
          - excel.Excel.Table
        description: ''
      parameters:
        - id: option
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: excel.Excel.Table.name
    summary: |-
      Name of the table.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: name
    fullName: excel.Excel.Table.name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Table.onChanged
    summary: |-
      Occurs when data in cells changes on a specific table.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: onChanged
    fullName: excel.Excel.Table.onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              let table = context.workbook.tables.getItemAt(0);
              table.onChanged.add(onChange);

              await context.sync();

              OfficeHelpers.UI.notify("A handler has been registered for the onChanged event",
                  "Try changing a cell value in the table, and watch the console output.");
          });
          ```
  - uid: excel.Excel.Table.onSelectionChanged
    summary: |-
      Occurs when the selection changes on a specific table.

      \[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: onSelectionChanged
    fullName: excel.Excel.Table.onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.TableSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.TableSelectionChangedEventArgs>
        description: |-

          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              let table = context.workbook.tables.getItemAt(0);
              table.onSelectionChanged.add(onSelectionChange);

              await context.sync();

              OfficeHelpers.UI.notify("A handler has been registered for table onSelectionChanged event",
                  "Try changing a range selection in the table, and watch the console output.");
          });
          ```
  - uid: excel.Excel.Table.reapplyFilters
    summary: |-
      Reapplies all the filters currently on the table.

      \[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: reapplyFilters()
    fullName: excel.Excel.Table.reapplyFilters
    langs:
      - typeScript
    type: method
    syntax:
      content: 'reapplyFilters(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Table.rows
    summary: |-
      Represents a collection of all the rows in the table. Read-only.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: rows
    fullName: excel.Excel.Table.rows
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rows: Excel.TableRowCollection;'
      return:
        type:
          - excel.Excel.TableRowCollection
  - uid: excel.Excel.Table.showBandedColumns
    summary: >-
      Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even
      ones to make reading the table easier.


      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: showBandedColumns
    fullName: excel.Excel.Table.showBandedColumns
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showBandedColumns: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Table.showBandedRows
    summary: >-
      Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to
      make reading the table easier.


      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: showBandedRows
    fullName: excel.Excel.Table.showBandedRows
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showBandedRows: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Table.showFilterButton
    summary: >-
      Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if
      the table contains a header row.


      \[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: showFilterButton
    fullName: excel.Excel.Table.showFilterButton
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showFilterButton: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Table.showHeaders
    summary: |-
      Indicates whether the header row is visible or not. This value can be set to show or remove the header row.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: showHeaders
    fullName: excel.Excel.Table.showHeaders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeaders: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Table.showTotals
    summary: |-
      Indicates whether the total row is visible or not. This value can be set to show or remove the total row.

      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: showTotals
    fullName: excel.Excel.Table.showTotals
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showTotals: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Table.sort
    summary: |-
      Represents the sorting for the table. Read-only.

      \[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: sort
    fullName: excel.Excel.Table.sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.TableSort;'
      return:
        type:
          - excel.Excel.TableSort
  - uid: excel.Excel.Table.style
    summary: >-
      Constant value that represents the Table style. Possible values are: TableStyleLight1 thru TableStyleLight21,
      TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined
      style present in the workbook can also be specified.


      \[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: style
    fullName: excel.Excel.Table.style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Table.toJSON
    name: toJSON()
    fullName: excel.Excel.Table.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableData;'
      return:
        type:
          - excel.Excel.Interfaces.TableData
        description: ''
  - uid: excel.Excel.Table.worksheet
    summary: |-
      The worksheet containing the current table. Read-only.

      \[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]
    name: worksheet
    fullName: excel.Excel.Table.worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
