### YamlMime:TSType
name: Excel.CustomXmlPartCollection
uid: 'excel!Excel.CustomXmlPartCollection:class'
package: excel!
fullName: Excel.CustomXmlPartCollection
summary: >-
  A collection of custom XML parts.


  \[ [API set: ExcelApi
  1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
  \]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.CustomXmlPartCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: items
    uid: 'excel!Excel.CustomXmlPartCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type: '<xref uid="excel!Excel.CustomXmlPart:class" />[]'
methods:
  - name: add(xml)
    uid: 'excel!Excel.CustomXmlPartCollection#add:member(1)'
    package: excel!
    fullName: add(xml)
    summary: >-
      Adds a new custom XML part to the workbook.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(xml: string): Excel.CustomXmlPart;'
      parameters:
        - id: xml
          description: XML content. Must be a valid XML fragment.
          type: string
      return:
        type: '<xref uid="excel!Excel.CustomXmlPart:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });

          ```
  - name: getByNamespace(namespaceUri)
    uid: 'excel!Excel.CustomXmlPartCollection#getByNamespace:member(1)'
    package: excel!
    fullName: getByNamespace(namespaceUri)
    summary: >-
      Gets a new scoped collection of custom XML parts whose namespaces match
      the given namespace.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getByNamespace(namespaceUri: string):
        Excel.CustomXmlPartScopedCollection;
      parameters:
        - id: namespaceUri
          description: >-
            This must be a fully qualified schema URI; for example,
            "http://schemas.contoso.com/review/1.0".
          type: string
      return:
        type: '<xref uid="excel!Excel.CustomXmlPartScopedCollection:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/test-xml-for-unique-namespace.yaml

          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });

          ```
  - name: getCount()
    uid: 'excel!Excel.CustomXmlPartCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: >-
      Gets the number of CustomXml parts in the collection.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getItem(id)
    uid: 'excel!Excel.CustomXmlPartCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(id)
    summary: >-
      Gets a custom XML part based on its ID.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.CustomXmlPart:class" />'
        description: >-


          #### Examples


          ```typescript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/18-custom-xml-parts/create-set-get-and-delete-custom-xml-parts.yaml

          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });

          ```
  - name: getItemOrNullObject(id)
    uid: 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(id)
    summary: >-
      Gets a custom XML part based on its ID. If the CustomXmlPart does not
      exist, the return object's isNull property will be true.


      \[ [API set: ExcelApi
      1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)
      \]
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.CustomXmlPart:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.CustomXmlPartCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.CustomXmlPartCollectionLoadOptions &
        Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref
            uid="excel!Excel.Interfaces.CustomXmlPartCollectionLoadOptions:interface"
            /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.CustomXmlPartCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.CustomXmlPartCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.CustomXmlPartCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.CustomXmlPartCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(propertyNamesAndPaths?: OfficeExtension.LoadOption):
        Excel.CustomXmlPartCollection;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.CustomXmlPartCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.CustomXmlPartCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that is passed to it.) Whereas the original
      `Excel.CustomXmlPartCollection` object is an API object, the `toJSON`
      method returns a plain JavaScript object (typed as
      `Excel.Interfaces.CustomXmlPartCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the
      collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartCollectionData;'
      return:
        type: >-
          <xref
          uid="excel!Excel.Interfaces.CustomXmlPartCollectionData:interface" />
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
