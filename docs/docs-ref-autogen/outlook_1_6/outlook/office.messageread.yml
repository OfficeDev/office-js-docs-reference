### YamlMime:TSType
name: Office.MessageRead
uid: 'outlook!Office.MessageRead:interface'
package: outlook!
fullName: Office.MessageRead
summary: >-
  The message read mode of [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


  **Important**: This is an internal Outlook object, not directly exposed through existing interfaces. You should treat
  this as a mode of `Office.context.mailbox.item`<!-- -->. For more information, refer to the [Object
  Model](https://learn.microsoft.com/javascript/api/requirement-sets/outlook/requirement-set-1.6/office.context.mailbox.item)
  page.


  Parent interfaces:


  - [ItemRead](xref:outlook!Office.ItemRead:interface)


  - [Message](xref:outlook!Office.Message:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: attachments
    uid: 'outlook!Office.MessageRead#attachments:member'
    package: outlook!
    fullName: attachments
    summary: Gets the item's attachments as an array.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      **Note**: Certain types of files are blocked by Outlook due to potential security issues and are therefore not
      returned. For more information, see [Blocked attachments in
      Outlook](https://support.microsoft.com/office/434752e1-02d3-4e90-9124-8b81e49a8519)<!-- -->.


      #### Examples


      ```javascript

      // The following code builds an HTML string with details of all attachments on the current item.

      const item = Office.context.mailbox.item;

      let outputString = "";


      if (item.attachments.length > 0) {
          for (let i = 0 ; i < item.attachments.length ; i++) {
              const attachment = item.attachments[i];
              outputString += "<BR>" + i + ". Name: ";
              outputString += attachment.name;
              outputString += "<BR>ID: " + attachment.id;
              outputString += "<BR>contentType: " + attachment.contentType;
              outputString += "<BR>size: " + attachment.size;
              outputString += "<BR>attachmentType: " + attachment.attachmentType;
              outputString += "<BR>isInline: " + attachment.isInline;
          }
      }


      console.log(outputString);

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachments-read.yaml

      const attachments = Office.context.mailbox.item.attachments;

      console.log(attachments);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type: '<xref uid="outlook!Office.AttachmentDetails:interface" />[]'
  - name: body
    uid: 'outlook!Office.MessageRead#body:member'
    package: outlook!
    fullName: body
    summary: Gets an object that provides methods for manipulating the body of an item.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // This example gets the body of the item as plain text.

      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.

      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'body: Body;'
      return:
        type: '<xref uid="outlook!Office.Body:interface" />'
  - name: cc
    uid: 'outlook!Office.MessageRead#cc:member'
    package: outlook!
    fullName: cc
    summary: >-
      Provides access to the Cc (carbon copy) recipients of a message. The type of object and level of access depend on
      the mode of the current item.


      The `cc` property returns an array that contains an
      [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) object for each recipient listed on the
      **Cc** line of the message. Collection size limits:


      - Windows: 500 members


      - Classic Mac UI: 100 members


      - Web browser: 20 members


      - New Mac UI, Android: No limit
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml

      const msgCc = Office.context.mailbox.item.cc;

      console.log("Message copied to:");

      for (let i = 0; i < msgCc.length; i++) {
        console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cc: EmailAddressDetails[];'
      return:
        type: '<xref uid="outlook!Office.EmailAddressDetails:interface" />[]'
  - name: conversationId
    uid: 'outlook!Office.MessageRead#conversationId:member'
    package: outlook!
    fullName: conversationId
    summary: >-
      Gets an identifier for the email conversation that contains a particular message.


      You can get an integer for this property if your mail app is activated in read forms or responses in compose
      forms. If subsequently the user changes the subject of the reply message, upon sending the reply, the conversation
      ID for that message will change and that value you obtained earlier will no longer apply.


      You get null for this property for a new item in a compose form. If the user sets a subject and saves the item,
      the `conversationId` property will return a value.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

      console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'conversationId: string;'
      return:
        type: string
  - name: dateTimeCreated
    uid: 'outlook!Office.MessageRead#dateTimeCreated:member'
    package: outlook!
    fullName: dateTimeCreated
    summary: Gets the date and time that an item was created.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

      console.log(`Creation date and time: ${Office.context.mailbox.item.dateTimeCreated}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type: Date
  - name: dateTimeModified
    uid: 'outlook!Office.MessageRead#dateTimeModified:member'
    package: outlook!
    fullName: dateTimeModified
    summary: |-
      Gets the date and time that an item was last modified.

      **Note**: This member is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

      console.log(`Date and time item last modified: ${Office.context.mailbox.item.dateTimeModified}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dateTimeModified: Date;'
      return:
        type: Date
  - name: end
    uid: 'outlook!Office.MessageRead#end:member'
    package: outlook!
    fullName: end
    summary: >-
      Gets the date and time that the appointment is to end.


      The `end` property is a `Date` object expressed as a Coordinated Universal Time (UTC) date and time value. You can
      use the `convertToLocalClientTime` method to convert the `end` property value to the client's local date and time.


      When you use the `Time.setAsync` method to set the end time, you should use the `convertToUtcClientTime` method to
      convert the local time on the client to UTC for the server.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-end-read.yaml

      console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'end: Date;'
      return:
        type: Date
  - name: from
    uid: 'outlook!Office.MessageRead#from:member'
    package: outlook!
    fullName: from
    summary: >-
      Gets the email address of the sender of a message.


      The `from` and `sender` properties represent the same person unless the message is sent by a delegate. In that
      case, the `from` property represents the delegator, and the `sender` property represents the delegate.


      **Note**: The `recipientType` property of the `EmailAddressDetails` object in the `from` property is undefined.


      The `from` property returns an `EmailAddressDetails` object.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml

      const msgFrom = Office.context.mailbox.item.from;

      console.log("Message received from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'from: EmailAddressDetails;'
      return:
        type: '<xref uid="outlook!Office.EmailAddressDetails:interface" />'
  - name: internetMessageId
    uid: 'outlook!Office.MessageRead#internetMessageId:member'
    package: outlook!
    fullName: internetMessageId
    summary: >-
      Gets the internet message identifier for an email message.


      **Important**: In the **Sent Items** folder, the `internetMessageId` may not be available yet on recently sent
      items. In that case, consider using [Exchange Web
      Services](https://learn.microsoft.com/office/dev/add-ins/outlook/web-services) to get this [property from the
      server](https://learn.microsoft.com/exchange/client-developer/web-service-reference/internetmessageid)<!-- -->.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml

      console.log(`Internet message ID: ${Office.context.mailbox.item.internetMessageId}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'internetMessageId: string;'
      return:
        type: string
  - name: itemClass
    uid: 'outlook!Office.MessageRead#itemClass:member'
    package: outlook!
    fullName: itemClass
    summary: >-
      Gets the Exchange Web Services item class of the selected item.


      You can create custom message classes that extends a default message class, for example, a custom appointment
      message class `IPM.Appointment.Contoso`<!-- -->.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      The `itemClass` property specifies the message class of the selected item. The following are the default message
      classes for the message or appointment item.


      <table> <tr> <th>Type</th> <th>Description</th> <th>Item Class</th> </tr> <tr> <td>Appointment items</td>
      <td>These are calendar items of the item class IPM.Appointment or IPM.Appointment.Occurrence.</td>
      <td>IPM.Appointment, IPM.Appointment.Occurrence</td> </tr> <tr> <td>Message items</td> <td>These include email
      messages that have the default message class IPM.Note, and meeting requests, responses, and cancellations, that
      use IPM.Schedule.Meeting as the base message class.</td> <td>IPM.Note, IPM.Schedule.Meeting.Request,
      IPM.Schedule.Meeting.Neg, IPM.Schedule.Meeting.Pos, IPM.Schedule.Meeting.Tent, IPM.Schedule.Meeting.Canceled</td>
      </tr> </table>


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-class-read.yaml

      console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemClass: string;'
      return:
        type: string
  - name: itemId
    uid: 'outlook!Office.MessageRead#itemId:member'
    package: outlook!
    fullName: itemId
    summary: >-
      Gets the [Exchange Web Services item
      identifier](https://learn.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)
      for the current item.


      The `itemId` property is not available in compose mode. If an item identifier is required, the `saveAsync` method
      can be used to save the item to the store, which will return the item identifier in the `asyncResult.value`
      parameter in the callback function.


      **Note**: The identifier returned by the `itemId` property is the same as the [Exchange Web Services item
      identifier](https://learn.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)<!--
      -->. The `itemId` property is not identical to the Outlook Entry ID or the ID used by the Outlook REST API. Before
      making REST API calls using this value, it should be converted using `Office.context.mailbox.convertToRestId`<!--
      -->. For more details, see [Use the Outlook REST APIs from an Outlook
      add-in](https://learn.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id)<!-- -->.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // The following code checks for the presence of an item

      // identifier. If the `itemId` property returns `null` or

      // `undefined`, it saves the item to the store and gets the

      // item identifier from the asynchronous result.

      // **Important**: `saveAsync` was introduced with requirement set 1.3

      // so you can't get the `itemId` in Compose mode in earlier sets.

      let itemId = Office.context.mailbox.item.itemId;

      if (itemId === null || itemId == undefined) {
          Office.context.mailbox.item.saveAsync(function(result) {
              itemId = result.value;
          });
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemId: string;'
      return:
        type: string
  - name: itemType
    uid: 'outlook!Office.MessageRead#itemType:member'
    package: outlook!
    fullName: itemType
    summary: >-
      Gets the type of item that an instance represents.


      The `itemType` property returns one of the `ItemType` enumeration values, indicating whether the item object
      instance is a message or an appointment.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

      const itemType = Office.context.mailbox.item.itemType;

      switch (itemType) {
          case Office.MailboxEnums.ItemType.Appointment:
              console.log(`Current item is an ${itemType}.`);
              break;
          case Office.MailboxEnums.ItemType.Message:
              console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
              break;
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type: '<xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string'
  - name: location
    uid: 'outlook!Office.MessageRead#location:member'
    package: outlook!
    fullName: location
    summary: |-
      Gets the location of a meeting request.

      The `location` property returns a string that contains the location of the appointment.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-location-read.yaml

      console.log(`Appointment location: ${Office.context.mailbox.item.location}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'location: string;'
      return:
        type: string
  - name: normalizedSubject
    uid: 'outlook!Office.MessageRead#normalizedSubject:member'
    package: outlook!
    fullName: normalizedSubject
    summary: >-
      Gets the subject of an item, with all prefixes removed (including RE: and FWD:).


      The `normalizedSubject` property gets the subject of the item, with any standard prefixes (such as RE: and FW:)
      that are added by email programs. To get the subject of the item with the prefixes intact, use the `subject`
      property.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

      console.log(`Normalized subject: ${Office.context.mailbox.item.normalizedSubject}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type: string
  - name: notificationMessages
    uid: 'outlook!Office.MessageRead#notificationMessages:member'
    package: outlook!
    fullName: notificationMessages
    summary: Gets the notification messages for an item.
    remarks: >-
      \[ [API set: Mailbox 1.3](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

      const id = $("#notificationId").val();

      const details =
        {
          type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);


      ...

      const id = $("#notificationId").val();

      const details =
        {
          type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);


      ...

      const id = $("#notificationId").val();

      const details =
        {
          type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);


      ...

      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          


      ...

      const id = $("#notificationId").val();

      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);

      ...

      const id = $("#notificationId").val();

      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type: '<xref uid="outlook!Office.NotificationMessages:interface" />'
  - name: sender
    uid: 'outlook!Office.MessageRead#sender:member'
    package: outlook!
    fullName: sender
    summary: >-
      Gets the email address of the sender of an email message.


      The `from` and `sender` properties represent the same person unless the message is sent by a delegate. In that
      case, the `from` property represents the delegator, and the `sender` property represents the delegate.


      **Note**: The `recipientType` property of the `EmailAddressDetails` object in the `sender` property is undefined.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml

      const msgSender = Office.context.mailbox.item.sender;

      console.log("Sender: " + msgSender.displayName + " (" + msgSender.emailAddress + ")");

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sender: EmailAddressDetails;'
      return:
        type: '<xref uid="outlook!Office.EmailAddressDetails:interface" />'
  - name: start
    uid: 'outlook!Office.MessageRead#start:member'
    package: outlook!
    fullName: start
    summary: >-
      Gets the date and time that the appointment is to begin.


      The `start` property is a `Date` object expressed as a Coordinated Universal Time (UTC) date and time value. You
      can use the `convertToLocalClientTime` method to convert the value to the client's local date and time.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-start-read.yaml

      console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'start: Date;'
      return:
        type: Date
  - name: subject
    uid: 'outlook!Office.MessageRead#subject:member'
    package: outlook!
    fullName: subject
    summary: >-
      Gets the description that appears in the subject field of an item.


      The `subject` property gets or sets the entire subject of the item, as sent by the email server.


      The `subject` property returns a string. Use the `normalizedSubject` property to get the subject minus any leading
      prefixes such as RE: and FW:.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-subject-read.yaml

      console.log(`Subject: ${Office.context.mailbox.item.subject}`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'subject: string;'
      return:
        type: string
  - name: to
    uid: 'outlook!Office.MessageRead#to:member'
    package: outlook!
    fullName: to
    summary: >-
      Provides access to the recipients on the **To** line of a message. The type of object and level of access depend
      on the mode of the current item.


      The `to` property returns an array that contains an
      [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) object for each recipient listed on the
      **To** line of the message. Collection size limits:


      - Windows: 500 members


      - Classic Mac UI: 100 members


      - Web browser: 20 members


      - New Mac UI, Android: No limit
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

      const msgTo = Office.context.mailbox.item.to;

      const distributionLists = [];

      const externalRecipients = [];

      const internalRecipients = [];

      const otherRecipients = [];

      for (let i = 0; i < msgTo.length; i++) {
          switch (msgTo[i].recipientType) {
          case Office.MailboxEnums.RecipientType.DistributionList:
              distributionLists.push(msgTo[i]);
              break;
          case Office.MailboxEnums.RecipientType.ExternalUser:
              externalRecipients.push(msgTo[i]);
              break;
          case Office.MailboxEnums.RecipientType.User:
              internalRecipients.push(msgTo[i]);
              break;
          case Office.MailboxEnums.RecipientType.Other:
              otherRecipients.push(msgTo[i]);
          }
      }


      if (distributionLists.length > 0) {
          console.log("Distribution Lists:");
          distributionLists.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
      }


      if (externalRecipients.length > 0) {
          console.log("External Recipients:");
          externalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
      }


      if (internalRecipients.length > 0) {
          console.log("Internal Recipients:");
          internalRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
      }


      if (otherRecipients.length > 0) {
          console.log("Other Recipients:");
          otherRecipients.forEach((recipient) => console.log(`${recipient.displayName}, ${recipient.emailAddress}`));
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'to: EmailAddressDetails[];'
      return:
        type: '<xref uid="outlook!Office.EmailAddressDetails:interface" />[]'
methods:
  - name: displayReplyAllForm(formData)
    uid: 'outlook!Office.MessageRead#displayReplyAllForm:member(1)'
    package: outlook!
    fullName: displayReplyAllForm(formData)
    summary: >-
      Displays a reply form that includes either the sender and all recipients of the selected message or the organizer
      and all attendees of the selected appointment.


      In Outlook on the web, the reply form is displayed as a pop-out form in the 3-column view and a pop-up form in the
      2-column or 1-column view.


      If any of the string parameters exceed their limits, `displayReplyAllForm` throws an exception.


      When attachments are specified in the `formData.attachments` parameter, Outlook attempts to download all
      attachments and attach them to the reply form. If any attachments fail to be added, an error is shown in the form
      UI. If this isn't possible, then no error message is thrown.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // The following code passes a string to the `displayReplyAllForm` method.

      Office.context.mailbox.item.displayReplyAllForm('hello there');

      Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


      // Reply with an empty body.

      Office.context.mailbox.item.displayReplyAllForm({});


      // Reply with just a body.

      Office.context.mailbox.item.displayReplyAllForm(

      {

      'htmlBody' : 'hi'

      });


      // Reply with a body and a file attachment.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : Office.MailboxEnums.AttachmentType.File,
              'name' : 'squirrel.png',
              'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });


      // Reply with a body and an item attachment.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : 'item',
              'name' : 'rand',
              'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });


      // Reply with a body, file attachment, item attachment, and a callback.

      Office.context.mailbox.item.displayReplyAllForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

      Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with <b>some bold text</b>.");

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
      parameters:
        - id: formData
          description: >-
            A string that contains text and HTML and that represents the body of the reply form. The string is limited
            to 32 KB OR a [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) object that contains body or
            attachment data and a callback function.
          type: 'string | <xref uid="outlook!Office.ReplyFormData:interface" />'
      return:
        type: void
        description: ''
  - name: displayReplyForm(formData)
    uid: 'outlook!Office.MessageRead#displayReplyForm:member(1)'
    package: outlook!
    fullName: displayReplyForm(formData)
    summary: >-
      Displays a reply form that includes only the sender of the selected message or the organizer of the selected
      appointment.


      In Outlook on the web, the reply form is displayed as a pop-out form in the 3-column view and a pop-up form in the
      2-column or 1-column view.


      If any of the string parameters exceed their limits, `displayReplyForm` throws an exception.


      When attachments are specified in the `formData.attachments` parameter, Outlook attempts to download all
      attachments and attach them to the reply form. If any attachments fail to be added, an error is shown in the form
      UI. If this isn't possible, then no error message is thrown.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // The following code passes a string to the `displayReplyForm` method.

      Office.context.mailbox.item.displayReplyForm('hello there');

      Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


      // Reply with an empty body.

      Office.context.mailbox.item.displayReplyForm({});


      // Reply with just a body.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi'
      });


      // Reply with a body and a file attachment.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });


      // Reply with a body and an item attachment.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });


      // Reply with a body, file attachment, item attachment, and a callback.

      Office.context.mailbox.item.displayReplyForm(

      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

      Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some text in italics</i>.");


      ...

      Office.context.mailbox.item.displayReplyForm({
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ],
        options: { asyncContext: null },
        callback: function(result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Action failed with message ${result.error.message}`);
          }
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayReplyForm(formData: string | ReplyFormData): void;'
      parameters:
        - id: formData
          description: >-
            A string that contains text and HTML and that represents the body of the reply form. The string is limited
            to 32 KB OR a [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) object that contains body or
            attachment data and a callback function.
          type: 'string | <xref uid="outlook!Office.ReplyFormData:interface" />'
      return:
        type: void
        description: ''
  - name: getEntities()
    uid: 'outlook!Office.MessageRead#getEntities:member(1)'
    package: outlook!
    fullName: getEntities()
    summary: |-
      Gets the entities found in the selected item's body.

      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

      const entities = Office.context.mailbox.item.getEntities();

      let entityTypesFound = 0;

      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }

      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }

      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }

      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }

      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }

      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }

      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }

      if (entityTypesFound == 0)

      {
          console.log("No entities found on this item.");
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type: '<xref uid="outlook!Office.Entities:interface" />'
        description: ''
  - name: getEntitiesByType(entityType)
    uid: 'outlook!Office.MessageRead#getEntitiesByType:member(1)'
    package: outlook!
    fullName: getEntitiesByType(entityType)
    summary: |-
      Gets an array of all the entities of the specified entity type found in the selected item's body.

      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **restricted**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

      console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion |
        PhoneNumber | TaskSuggestion)[];
      parameters:
        - id: entityType
          description: >-
            One of the `EntityType` enumeration values.


            While the minimum permission level to use this method is **restricted**, some entity types require **read
            item** to access, as specified in the following table.


            <table> <tr> <th>Value of entityType</th> <th>Type of objects in returned array</th> <th>Required Permission
            Level</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Contact</td>
            <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr>
            <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td>
            <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td>
            <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restricted</td> </tr> </table>
          type: '<xref uid="outlook!Office.MailboxEnums.EntityType:enum" /> | string'
      return:
        type: >-
          (string | <xref uid="outlook!Office.Contact:interface" /> | <xref
          uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> |
          <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
        description: >-
          If the value passed in `entityType` is not a valid member of the `EntityType` enumeration, the method returns
          `null`<!-- -->. If no entities of the specified type are present in the item's body, the method returns an
          empty array. Otherwise, the type of the objects in the returned array depends on the type of entity requested
          in the `entityType` parameter.
  - name: getFilteredEntitiesByName(name)
    uid: 'outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)'
    package: outlook!
    fullName: getFilteredEntitiesByName(name)
    summary: >-
      Returns well-known entities in the selected item that pass the named filter defined in an XML manifest file.


      **Note**: This method is used with the [activation rules feature for Outlook
      add-ins](https://learn.microsoft.com/office/dev/add-ins/outlook/activation-rules)<!-- -->, which isn't supported
      by the [Teams manifest for Office Add-ins
      (preview)](https://learn.microsoft.com/office/dev/add-ins/develop/json-manifest-overview)<!-- -->.


      The `getFilteredEntitiesByName` method returns the entities that match the regular expression defined in the
      `ItemHasKnownEntity` rule element in the manifest XML file with the specified `FilterName` element value.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

      // This API would only work when you click on highlighted physical address that has the word "Way" in it.

      console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber |
        TaskSuggestion)[];
      parameters:
        - id: name
          description: The name of the `ItemHasKnownEntity` rule element that defines the filter to match.
          type: string
      return:
        type: >-
          (string | <xref uid="outlook!Office.Contact:interface" /> | <xref
          uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> |
          <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
        description: >-
          If there is no `ItemHasKnownEntity` element in the manifest with a `FilterName` element value that matches the
          `name` parameter, the method returns `null`<!-- -->. If the `name` parameter does match an
          `ItemHasKnownEntity` element in the manifest, but there are no entities in the current item that match, the
          method return an empty array.
  - name: getRegExMatches()
    uid: 'outlook!Office.MessageRead#getRegExMatches:member(1)'
    package: outlook!
    fullName: getRegExMatches()
    summary: >-
      Returns string values in the selected item that match the regular expressions defined in an XML manifest file.


      **Note**: This method is used with the [activation rules feature for Outlook
      add-ins](https://learn.microsoft.com/office/dev/add-ins/outlook/activation-rules)<!-- -->, which isn't supported
      by the [Teams manifest for Office Add-ins
      (preview)](https://learn.microsoft.com/office/dev/add-ins/develop/json-manifest-overview)<!-- -->.


      The `getRegExMatches` method returns the strings that match the regular expression defined in each
      `ItemHasRegularExpressionMatch` or `ItemHasKnownEntity` rule element in the manifest XML file. For an
      `ItemHasRegularExpressionMatch` rule, a matching string has to occur in the property of the item that is specified
      by that rule. The `PropertyName` simple type defines the supported properties.


      If you specify an `ItemHasRegularExpressionMatch` rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results. Instead,
      use the `Body.getAsync` method to retrieve the entire body.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Consider an add-in manifest has the following `Rule` element:

      //<Rule xsi:type="RuleCollection" Mode="And">

      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

      //  <Rule xsi:type="RuleCollection" Mode="Or">

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut"
      PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
      RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //  </Rule>

      //</Rule>


      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

      //{

      //'fruits': ['apple','banana','Banana','coconut'],

      //'veggies': ['tomato','onion','spinach','broccoli']

      //}


      // The following example shows how to access the array of

      // matches for the regular expression rule elements `fruits`

      // and `veggies`, which are specified in the manifest.

      const allMatches = Office.context.mailbox.item.getRegExMatches();

      const fruits = allMatches.fruits;

      const veggies = allMatches.veggies;

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

      // This API would only work when you click on highlighted word "ScriptLab".

      console.log(Office.context.mailbox.item.getRegExMatches());

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type: any
        description: >-
          An object that contains arrays of strings that match the regular expressions defined in the manifest XML file.
          The name of each array is equal to the corresponding value of the `RegExName` attribute of the matching
          `ItemHasRegularExpressionMatch` rule or the `FilterName` attribute of the matching `ItemHasKnownEntity` rule.
  - name: getRegExMatchesByName(name)
    uid: 'outlook!Office.MessageRead#getRegExMatchesByName:member(1)'
    package: outlook!
    fullName: getRegExMatchesByName(name)
    summary: >-
      Returns string values in the selected item that match the named regular expression defined in an XML manifest
      file.


      **Note**: This method is used with the [activation rules feature for Outlook
      add-ins](https://learn.microsoft.com/office/dev/add-ins/outlook/activation-rules)<!-- -->, which isn't supported
      by the [Teams manifest for Office Add-ins
      (preview)](https://learn.microsoft.com/office/dev/add-ins/develop/json-manifest-overview)<!-- -->.


      The `getRegExMatchesByName` method returns the strings that match the regular expression defined in the
      `ItemHasRegularExpressionMatch` rule element in the manifest XML file with the specified `RegExName` element
      value.


      If you specify an `ItemHasRegularExpressionMatch` rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Consider an add-in manifest has the following `Rule` element:

      //<Rule xsi:type="RuleCollection" Mode="And">

      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

      //  <Rule xsi:type="RuleCollection" Mode="Or">

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut"
      PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
      RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //  </Rule>

      //</Rule>


      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

      //{

      //'fruits': ['apple','banana','Banana','coconut'],

      //'veggies': ['tomato','onion','spinach','broccoli']

      //}


      const fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

      const veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

      // This API would only work when you click on highlighted word "ScriptLab".

      console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      parameters:
        - id: name
          description: The name of the `ItemHasRegularExpressionMatch` rule element that defines the filter to match.
          type: string
      return:
        type: 'string[]'
        description: An array that contains the strings that match the regular expression defined in the manifest XML file.
  - name: getSelectedEntities()
    uid: 'outlook!Office.MessageRead#getSelectedEntities:member(1)'
    package: outlook!
    fullName: getSelectedEntities()
    summary: >-
      Gets the entities found in a highlighted match a user has selected. Highlighted matches apply to contextual
      add-ins.


      **Note**: This method is used with the [activation rules feature for Outlook
      add-ins](https://learn.microsoft.com/office/dev/add-ins/outlook/activation-rules)<!-- -->, which isn't supported
      by the [Teams manifest for Office Add-ins
      (preview)](https://learn.microsoft.com/office/dev/add-ins/develop/json-manifest-overview)<!-- -->.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      \[ [API set: Mailbox 1.6](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

      const entities = Office.context.mailbox.item.getSelectedEntities();

      let entityTypesFound = 0;

      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }

      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }

      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }

      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }

      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }

      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }

      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }

      if (entityTypesFound == 0)

      {
          console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedEntities(): Entities;'
      return:
        type: '<xref uid="outlook!Office.Entities:interface" />'
        description: ''
  - name: getSelectedRegExMatches()
    uid: 'outlook!Office.MessageRead#getSelectedRegExMatches:member(1)'
    package: outlook!
    fullName: getSelectedRegExMatches()
    summary: >-
      Returns string values in a highlighted match that match the regular expressions defined in an XML manifest file.
      Highlighted matches apply to contextual add-ins.


      **Note**: This method is used with the [activation rules feature for Outlook
      add-ins](https://learn.microsoft.com/office/dev/add-ins/outlook/activation-rules)<!-- -->, which isn't supported
      by the [Teams manifest for Office Add-ins
      (preview)](https://learn.microsoft.com/office/dev/add-ins/develop/json-manifest-overview)<!-- -->.


      The `getSelectedRegExMatches` method returns the strings that match the regular expression defined in each
      `ItemHasRegularExpressionMatch` or `ItemHasKnownEntity` rule element in the manifest XML file. For an
      `ItemHasRegularExpressionMatch` rule, a matching string has to occur in the property of the item that is specified
      by that rule. The `PropertyName` simple type defines the supported properties.


      If you specify an `ItemHasRegularExpressionMatch` rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results. Instead,
      use the `Body.getAsync` method to retrieve the entire body.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      \[ [API set: Mailbox 1.6](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // Consider an add-in manifest has the following `Rule` element:

      //<Rule xsi:type="RuleCollection" Mode="And">

      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

      //  <Rule xsi:type="RuleCollection" Mode="Or">

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut"
      PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies"
      RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

      //  </Rule>

      //</Rule>


      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

      //{

      //'fruits': ['apple','banana','Banana','coconut'],

      //'veggies': ['tomato','onion','spinach','broccoli']

      //}


      // The following example shows how to access the array of matches for the

      // regular expression rule elements `fruits` and `veggies`, which are

      // specified in the manifest.

      const selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();

      const fruits = selectedMatches.fruits;

      const veggies = selectedMatches.veggies;

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/selected.yaml

      const matches = Office.context.mailbox.item.getSelectedRegExMatches();

      if (matches) {
          console.log(matches);
      }

      else {
          console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedRegExMatches(): any;'
      return:
        type: any
        description: >-
          An object that contains arrays of strings that match the regular expressions defined in the manifest XML file.
          The name of each array is equal to the corresponding value of the `RegExName` attribute of the matching
          `ItemHasRegularExpressionMatch` rule or the `FilterName` attribute of the matching `ItemHasKnownEntity` rule.
  - name: 'loadCustomPropertiesAsync(callback, userContext)'
    uid: 'outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)'
    package: outlook!
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key-value pairs on a per-app, per-item basis. This method returns a
      [CustomProperties](xref:outlook!Office.CustomProperties:interface) object in the callback, which provides methods
      to access the custom properties specific to the current item and the current add-in. Custom properties aren't
      encrypted on the item, so this shouldn't be used as secure storage.


      The custom properties are provided as a `CustomProperties` object in the `asyncResult.value` property. This object
      can be used to get, set, save, and remove custom properties from the mail item.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      To learn more about custom properties, see [Get and set add-in metadata for an Outlook
      add-in](https://learn.microsoft.com/office/dev/add-ins/outlook/metadata-for-an-outlook-add-in)<!-- -->.


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Message Read


      #### Examples


      ```javascript

      // The following example shows how to use the loadCustomPropertiesAsync method

      // to asynchronously load custom properties that are specific to the current item.

      // The example also shows how to use the saveAsync method to save these properties

      // back to the server. After loading the custom properties, the example uses the

      // get method to read the custom property myProp, the set method to write the

      // custom property otherProp, and then finally calls the saveAsync method to save

      // the custom properties.

      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready method.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              const mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };


      function customPropsCallback(asyncResult) {
          const customProps = asyncResult.value;
          const myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }


      function saveCallback(asyncResult) {

      }

      ```

      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml

      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          const dataKey = Object.keys(customProps)[0];
          const data = customProps[dataKey];
          for (let propertyName in data)
          {
            let propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void,
        userContext?: any): void;
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->.
          type: >-
            (asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref
            uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void
        - id: userContext
          description: >-
            Optional. Developers can provide any object they wish to access in the callback function. This object can be
            accessed by the `asyncResult.asyncContext` property in the callback function.
          type: any
      return:
        type: void
        description: ''
extends: '<xref uid="outlook!Office.Message:interface" />'
