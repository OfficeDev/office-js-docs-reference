### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.ItemRead:interface'
    summary: >-
      The read mode of [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


      **Important**: This is an internal Outlook object, not directly exposed through existing interfaces. You should
      treat this as a mode of Office.context.mailbox.item. Refer to the [Object
      Model](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.6/office.context.mailbox.item)
      page for more information.
    name: Office.ItemRead
    fullName: Office.ItemRead
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Item:interface'
    package: outlook!
    children:
      - 'outlook!Office.ItemRead#attachments:member'
      - 'outlook!Office.ItemRead#displayReplyAllForm:member(1)'
      - 'outlook!Office.ItemRead#displayReplyForm:member(1)'
      - 'outlook!Office.ItemRead#getEntities:member(1)'
      - 'outlook!Office.ItemRead#getEntitiesByType:member(1)'
      - 'outlook!Office.ItemRead#getFilteredEntitiesByName:member(1)'
      - 'outlook!Office.ItemRead#getRegExMatches:member(1)'
      - 'outlook!Office.ItemRead#getRegExMatchesByName:member(1)'
      - 'outlook!Office.ItemRead#getSelectedEntities:member(1)'
      - 'outlook!Office.ItemRead#getSelectedRegExMatches:member(1)'
      - 'outlook!Office.ItemRead#itemClass:member'
      - 'outlook!Office.ItemRead#itemId:member'
      - 'outlook!Office.ItemRead#normalizedSubject:member'
      - 'outlook!Office.ItemRead#subject:member'
  - uid: 'outlook!Office.ItemRead#attachments:member'
    summary: Gets the item's attachments as an array.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read


      **Note**: Certain types of files are blocked by Outlook due to potential security issues and are therefore not
      returned. For more information, see [Blocked attachments in
      Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!--
      -->.
    name: attachments
    fullName: attachments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type:
          - 'outlook!Office.ItemRead#attachments~0:complex'
  - uid: 'outlook!Office.ItemRead#displayReplyAllForm:member(1)'
    summary: >-
      Displays a reply form that includes the sender and all recipients of the selected message or the organizer and all
      attendees of the selected appointment.


      In Outlook on the web, the reply form is displayed as a pop-out form in the 3-column view and a pop-up form in the
      2- or 1-column view.


      If any of the string parameters exceed their limits, displayReplyAllForm throws an exception.


      When attachments are specified in the formData.attachments parameter, Outlook on the web and desktop clients
      attempt to download all attachments and attach them to the reply form. If any attachments fail to be added, an
      error is shown in the form UI. If this isn't possible, then no error message is thrown.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: 'displayReplyAllForm(formData, callback)'
    fullName: 'displayReplyAllForm(formData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        displayReplyAllForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: >-
            A string that contains text and HTML and that represents the body of the reply form. The string is limited
            to 32 KB OR a [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) object that contains body or
            attachment data and a callback function.
          type:
            - 'outlook!Office.ItemRead#displayReplyAllForm~0:complex'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an Office.AsyncResult object.
          type:
            - 'outlook!Office.ItemRead#displayReplyAllForm~1:complex'
  - uid: 'outlook!Office.ItemRead#displayReplyForm:member(1)'
    summary: >-
      Displays a reply form that includes only the sender of the selected message or the organizer of the selected
      appointment.


      In Outlook on the web, the reply form is displayed as a pop-out form in the 3-column view and a pop-up form in the
      2- or 1-column view.


      If any of the string parameters exceed their limits, displayReplyForm throws an exception.


      When attachments are specified in the formData.attachments parameter, Outlook on the web and desktop clients
      attempt to download all attachments and attach them to the reply form. If any attachments fail to be added, an
      error is shown in the form UI. If this isn't possible, then no error message is thrown.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: 'displayReplyForm(formData, callback)'
    fullName: 'displayReplyForm(formData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        displayReplyForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) =>
        void): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: >-
            A string that contains text and HTML and that represents the body of the reply form. The string is limited
            to 32 KB OR a [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) object that contains body or
            attachment data and a callback function.
          type:
            - 'outlook!Office.ItemRead#displayReplyForm~0:complex'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter, asyncResult, which is an Office.AsyncResult object.
          type:
            - 'outlook!Office.ItemRead#displayReplyForm~1:complex'
  - uid: 'outlook!Office.ItemRead#getEntities:member(1)'
    summary: |-
      Gets the entities found in the selected item's body.

      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: getEntities()
    fullName: getEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.ItemRead#getEntitiesByType:member(1)'
    summary: |-
      Gets an array of all the entities of the specified entity type found in the selected item's body.

      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read


      While the minimum permission level to use this method is Restricted, some entity types require ReadItem to access,
      as specified in the following table.


      <table> <tr> <th>Value of entityType</th> <th>Type of objects in returned array</th> <th>Required Permission
      Level</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Contact</td>
      <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr>
      <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td>
      <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td>
      <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restricted</td> </tr> </table>
    name: getEntitiesByType(entityType)
    fullName: getEntitiesByType(entityType)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion |
        PhoneNumber | TaskSuggestion)[];
      return:
        type:
          - 'outlook!Office.ItemRead#getEntitiesByType~0:complex'
        description: >-
          If the value passed in entityType is not a valid member of the EntityType enumeration, the method returns
          null. If no entities of the specified type are present in the item's body, the method returns an empty array.
          Otherwise, the type of the objects in the returned array depends on the type of entity requested in the
          entityType parameter.
      parameters:
        - id: entityType
          description: One of the EntityType enumeration values.
          type:
            - 'outlook!Office.ItemRead#getEntitiesByType~1:complex'
  - uid: 'outlook!Office.ItemRead#getFilteredEntitiesByName:member(1)'
    summary: >-
      Returns well-known entities in the selected item that pass the named filter defined in the manifest XML file.


      The getFilteredEntitiesByName method returns the entities that match the regular expression defined in the
      ItemHasKnownEntity rule element in the manifest XML file with the specified FilterName element value.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: getFilteredEntitiesByName(name)
    fullName: getFilteredEntitiesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber |
        TaskSuggestion)[];
      return:
        type:
          - 'outlook!Office.ItemRead#getFilteredEntitiesByName~0:complex'
        description: >-
          If there is no ItemHasKnownEntity element in the manifest with a FilterName element value that matches the
          name parameter, the method returns null. If the name parameter does match an ItemHasKnownEntity element in the
          manifest, but there are no entities in the current item that match, the method return an empty array.
      parameters:
        - id: name
          description: The name of the ItemHasKnownEntity rule element that defines the filter to match.
          type:
            - string
  - uid: 'outlook!Office.ItemRead#getRegExMatches:member(1)'
    summary: >-
      Returns string values in the selected item that match the regular expressions defined in the manifest XML file.


      The getRegExMatches method returns the strings that match the regular expression defined in each
      ItemHasRegularExpressionMatch or ItemHasKnownEntity rule element in the manifest XML file. For an
      ItemHasRegularExpressionMatch rule, a matching string has to occur in the property of the item that is specified
      by that rule. The PropertyName simple type defines the supported properties.


      If you specify an ItemHasRegularExpressionMatch rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results. Instead,
      use the Body.getAsync method to retrieve the entire body.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: getRegExMatches()
    fullName: getRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type:
          - any
        description: >-
          An object that contains arrays of strings that match the regular expressions defined in the manifest XML file.
          The name of each array is equal to the corresponding value of the RegExName attribute of the matching
          ItemHasRegularExpressionMatch rule or the FilterName attribute of the matching ItemHasKnownEntity rule.
  - uid: 'outlook!Office.ItemRead#getRegExMatchesByName:member(1)'
    summary: >-
      Returns string values in the selected item that match the named regular expression defined in the manifest XML
      file.


      The getRegExMatchesByName method returns the strings that match the regular expression defined in the
      ItemHasRegularExpressionMatch rule element in the manifest XML file with the specified RegExName element value.


      If you specify an ItemHasRegularExpressionMatch rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results.


      **Note**: This method is not supported in Outlook on iOS or Android.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: getRegExMatchesByName(name)
    fullName: getRegExMatchesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      return:
        type:
          - 'string[]'
        description: An array that contains the strings that match the regular expression defined in the manifest XML file.
      parameters:
        - id: name
          description: The name of the ItemHasRegularExpressionMatch rule element that defines the filter to match.
          type:
            - string
  - uid: 'outlook!Office.ItemRead#getSelectedEntities:member(1)'
    summary: >-
      Gets the entities found in a highlighted match a user has selected. Highlighted matches apply to contextual
      add-ins.


      **Note**: This method is not supported in Outlook on iOS or Android.


      \[ [API set: Mailbox 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: getSelectedEntities()
    fullName: getSelectedEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.ItemRead#getSelectedRegExMatches:member(1)'
    summary: >-
      Returns string values in a highlighted match that match the regular expressions defined in the manifest XML file.
      Highlighted matches apply to contextual add-ins.


      The getSelectedRegExMatches method returns the strings that match the regular expression defined in each
      ItemHasRegularExpressionMatch or ItemHasKnownEntity rule element in the manifest XML file. For an
      ItemHasRegularExpressionMatch rule, a matching string has to occur in the property of the item that is specified
      by that rule. The PropertyName simple type defines the supported properties.


      If you specify an ItemHasRegularExpressionMatch rule on the body property of an item, the regular expression
      should further filter the body and should not attempt to return the entire body of the item. Using a regular
      expression such as .* to obtain the entire body of an item does not always return the expected results. Instead,
      use the Body.getAsync method to retrieve the entire body.


      **Note**: This method is not supported in Outlook on iOS or Android.


      \[ [API set: Mailbox 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: getSelectedRegExMatches()
    fullName: getSelectedRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRegExMatches(): any;'
      return:
        type:
          - any
        description: >-
          An object that contains arrays of strings that match the regular expressions defined in the manifest XML file.
          The name of each array is equal to the corresponding value of the RegExName attribute of the matching
          ItemHasRegularExpressionMatch rule or the FilterName attribute of the matching ItemHasKnownEntity rule.
  - uid: 'outlook!Office.ItemRead#itemClass:member'
    summary: >-
      Gets the Exchange Web Services item class of the selected item.


      You can create custom message classes that extends a default message class, for example, a custom appointment
      message class IPM.Appointment.Contoso.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read


      The itemClass property specifies the message class of the selected item. The following are the default message
      classes for the message or appointment item.


      <table> <tr> <th>Type</th> <th>Description</th> <th>Item Class</th> </tr> <tr> <td>Appointment items</td>
      <td>These are calendar items of the item class IPM.Appointment or IPM.Appointment.Occurrence.</td>
      <td>IPM.Appointment,IPM.Appointment.Occurrence</td> </tr> <tr> <td>Message items</td> <td>These include email
      messages that have the default message class IPM.Note, and meeting requests, responses, and cancellations, that
      use IPM.Schedule.Meeting as the base message class.</td>
      <td>IPM.Note,IPM.Schedule.Meeting.Request,IPM.Schedule.Meeting.Neg,IPM.Schedule.Meeting.Pos,IPM.Schedule.Meeting.Tent,IPM.Schedule.Meeting.Canceled</td>
      </tr> </table>
    name: itemClass
    fullName: itemClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemClass: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.ItemRead#itemId:member'
    summary: >-
      Gets the [Exchange Web Services item
      identifier](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)
      for the current item.


      The itemId property is not available in compose mode. If an item identifier is required, the saveAsync method can
      be used to save the item to the store, which will return the item identifier in the asyncResult.value parameter in
      the callback function.


      **Note**: The identifier returned by the itemId property is the same as the [Exchange Web Services item
      identifier](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)<!--
      -->. The itemId property is not identical to the Outlook Entry ID or the ID used by the Outlook REST API. Before
      making REST API calls using this value, it should be converted using Office.context.mailbox.convertToRestId. For
      more details, see [Use the Outlook REST APIs from an Outlook
      add-in](https://docs.microsoft.com/outlook/add-ins/use-rest-api#get-the-item-id)<!-- -->.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: itemId
    fullName: itemId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.ItemRead#normalizedSubject:member'
    summary: >-
      Gets the subject of an item, with all prefixes removed (including RE: and FWD:).


      The normalizedSubject property gets the subject of the item, with any standard prefixes (such as RE: and FW:) that
      are added by email programs. To get the subject of the item with the prefixes intact, use the subject property.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: normalizedSubject
    fullName: normalizedSubject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.ItemRead#subject:member'
    summary: >-
      Gets the description that appears in the subject field of an item.


      The subject property gets or sets the entire subject of the item, as sent by the email server.


      The subject property returns a string. Use the normalizedSubject property to get the subject minus any leading
      prefixes such as RE: and FW:.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem


      **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Read
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: string;'
      return:
        type:
          - string
references:
  - uid: 'outlook!Office.Item:interface'
    name: Item
  - uid: 'outlook!Office.ItemRead#attachments~0:complex'
    name: 'AttachmentDetails[]'
    fullName: 'Office.AttachmentDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.ItemRead#displayReplyAllForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.ItemRead#displayReplyAllForm~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.ItemRead#displayReplyForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.ItemRead#displayReplyForm~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Entities:interface'
    name: Entities
  - uid: 'outlook!Office.ItemRead#getEntitiesByType~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.ItemRead#getEntitiesByType~1:complex'
    name: MailboxEnums.EntityType | string
    fullName: Office.MailboxEnums.EntityType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.EntityType:enum'
        name: MailboxEnums.EntityType
        fullName: Office.MailboxEnums.EntityType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.ItemRead#getFilteredEntitiesByName~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
