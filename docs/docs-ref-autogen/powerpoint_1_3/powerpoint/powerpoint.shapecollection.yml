### YamlMime:TSType
name: PowerPoint.ShapeCollection
uid: 'powerpoint!PowerPoint.ShapeCollection:class'
package: powerpoint!
fullName: PowerPoint.ShapeCollection
summary: Represents the collection of shapes.
remarks: >-
  \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-shapes-by-type.yaml


  // Changes the transparency of every geometric shape in the slide.

  await PowerPoint.run(async (context) => {
    // Get the type of shape for every shape in the collection.
    const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(0).shapes;
    shapes.load("type");
    await context.sync();

    // Change the shape transparency to be halfway transparent.
    shapes.items.forEach((shape) => {
      if (shape.type === PowerPoint.ShapeType.geometricShape) {
        shape.fill.transparency = 0.5;
      }
    });
    await context.sync();
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'powerpoint!PowerPoint.ShapeCollection#context:member'
    package: powerpoint!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.RequestContext:class" />'
  - name: items
    uid: 'powerpoint!PowerPoint.ShapeCollection#items:member'
    package: powerpoint!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: PowerPoint.Shape[];'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Shape:class" />[]'
methods:
  - name: getCount()
    uid: 'powerpoint!PowerPoint.ShapeCollection#getCount:member(1)'
    package: powerpoint!
    fullName: getCount()
    summary: Gets the number of shapes in the collection.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: The number of shapes in the collection.
  - name: getItem(key)
    uid: 'powerpoint!PowerPoint.ShapeCollection#getItem:member(1)'
    package: powerpoint!
    fullName: getItem(key)
    summary: Gets a shape using its unique ID. An error is thrown if the shape does not exist.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): PowerPoint.Shape;'
      parameters:
        - id: key
          description: The ID of the shape.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Shape:class" />'
        description: 'The shape with the unique ID. If such a shape does not exist, an error is thrown.'
  - name: getItemAt(index)
    uid: 'powerpoint!PowerPoint.ShapeCollection#getItemAt:member(1)'
    package: powerpoint!
    fullName: getItemAt(index)
    summary: Gets a shape using its zero-based index in the collection. An error is thrown if the index is out of range.
    remarks: >-
      \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml


      await PowerPoint.run(async function(context) {
        const slide: PowerPoint.Slide = context.presentation.slides.getItemAt(0);
        const shape: PowerPoint.Shape = slide.shapes.getItemAt(0);
        shape.tags.add("MOUNTAIN", "Denali");

        await context.sync();

        const myShapeTag: PowerPoint.Tag = shape.tags.getItem("MOUNTAIN");
        myShapeTag.load("key, value");

        await context.sync();

        console.log("Added key " + JSON.stringify(myShapeTag.key) + " with value " + JSON.stringify(myShapeTag.value));
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): PowerPoint.Shape;'
      parameters:
        - id: index
          description: The index of the shape in the collection.
          type: number
      return:
        type: '<xref uid="powerpoint!PowerPoint.Shape:class" />'
        description: The shape at the given index. An error is thrown if index is out of range.
  - name: getItemOrNullObject(id)
    uid: 'powerpoint!PowerPoint.ShapeCollection#getItemOrNullObject:member(1)'
    package: powerpoint!
    fullName: getItemOrNullObject(id)
    summary: >-
      Gets a shape using its unique ID. If such a shape does not exist, an object with an `isNullObject` property set to
      true is returned.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(id: string): PowerPoint.Shape;'
      parameters:
        - id: id
          description: The ID of the shape.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.Shape:class" />'
        description: >-
          The shape with the unique ID. If such a shape does not exist, an object with an `isNullObject` property set to
          true is returned.
  - name: load(options)
    uid: 'powerpoint!PowerPoint.ShapeCollection#load:member(1)'
    package: powerpoint!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: PowerPoint.Interfaces.ShapeCollectionLoadOptions & PowerPoint.Interfaces.CollectionLoadOptions):
        PowerPoint.ShapeCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="powerpoint!PowerPoint.Interfaces.ShapeCollectionLoadOptions:interface" /> & <xref
            uid="powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="powerpoint!PowerPoint.ShapeCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'powerpoint!PowerPoint.ShapeCollection#load:member(2)'
    package: powerpoint!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.ShapeCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="powerpoint!PowerPoint.ShapeCollection:class" />'
        description: >-


          #### Examples


          ```TypeScript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-shapes-by-type.yaml


          // Changes the transparency of every geometric shape in the slide.

          await PowerPoint.run(async (context) => {
            // Get the type of shape for every shape in the collection.
            const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(0).shapes;
            shapes.load("type");
            await context.sync();

            // Change the shape transparency to be halfway transparent.
            shapes.items.forEach((shape) => {
              if (shape.type === PowerPoint.ShapeType.geometricShape) {
                shape.fill.transparency = 0.5;
              }
            });
            await context.sync();
          });

          ```
  - name: load(propertyNamesAndPaths)
    uid: 'powerpoint!PowerPoint.ShapeCollection#load:member(3)'
    package: powerpoint!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): PowerPoint.ShapeCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="powerpoint!PowerPoint.ShapeCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'powerpoint!PowerPoint.ShapeCollection#toJSON:member(1)'
    package: powerpoint!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `PowerPoint.ShapeCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `PowerPoint.Interfaces.ShapeCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.ShapeCollectionData;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Interfaces.ShapeCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
