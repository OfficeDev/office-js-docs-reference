### YamlMime:TSType
name: Excel.TableCollection
uid: 'excel!Excel.TableCollection:class'
package: excel!
fullName: Excel.TableCollection
summary: 'Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.'
remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'excel!Excel.TableCollection#context:member'
    package: excel!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="excel!Excel.RequestContext:class" />'
  - name: count
    uid: 'excel!Excel.TableCollection#count:member'
    package: excel!
    fullName: count
    summary: Returns the number of tables in the workbook.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly count: number;'
      return:
        type: number
  - name: items
    uid: 'excel!Excel.TableCollection#items:member'
    package: excel!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Table[];'
      return:
        type: '<xref uid="excel!Excel.Table:class" />[]'
methods:
  - name: 'add(address, hasHeaders)'
    uid: 'excel!Excel.TableCollection#add:member(1)'
    package: excel!
    fullName: 'add(address, hasHeaders)'
    summary: >-
      Creates a new table. The range object or source address determines the worksheet under which the table will be
      added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another
      table), an error will be thrown.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const table = context.workbook.tables.add('Sheet1!A1:E7', true);
          table.load('name');
          await context.sync();
          
          console.log(table.name);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
      parameters:
        - id: address
          description: >-
            A `Range` object, or a string address or name of the range representing the data source. If the address does
            not contain a sheet name, the currently-active sheet is used. \[Api set: ExcelApi 1.1 / 1.3. Prior to
            ExcelApi 1.3, this parameter must be a string. Starting with Excel Api 1.3, this parameter may be a Range
            object or a string.\]
          type: '<xref uid="excel!Excel.Range:class" /> | string'
        - id: hasHeaders
          description: >-
            A boolean value that indicates whether the data being imported has column labels. If the source does not
            contain headers (i.e., when this property set to `false`<!-- -->), Excel will automatically generate a
            header and shift the data down by one row.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Table:class" />'
        description: ''
  - name: getCount()
    uid: 'excel!Excel.TableCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: Gets the number of tables in the collection.
    remarks: '\[ [API set: ExcelApi 1.4](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getItem(key)
    uid: 'excel!Excel.TableCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(key)
    summary: Gets a table by name or ID.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const tableName = 'Table1';
          const table = context.workbook.tables.getItem(tableName);
          table.load('name');
          await context.sync();
          
          console.log(table.name);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Excel.Table;'
      parameters:
        - id: key
          description: Name or ID of the table to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.Table:class" />'
        description: ''
  - name: getItemAt(index)
    uid: 'excel!Excel.TableCollection#getItemAt:member(1)'
    package: excel!
    fullName: getItemAt(index)
    summary: Gets a table based on its position in the collection.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```TypeScript
      await Excel.run(async (context) => { 
          const table = context.workbook.tables.getItemAt(0);
          table.load('name');
          await context.sync();
          
          console.log(table.name);
      });
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Excel.Table;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Table:class" />'
        description: ''
  - name: getItemOrNullObject(key)
    uid: 'excel!Excel.TableCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a table by name or ID. If the table doesn't exist, then this method returns an object with its `isNullObject`
      property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: ExcelApi 1.4](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Table;'
      parameters:
        - id: key
          description: Name or ID of the table to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.Table:class" />'
        description: ''
  - name: load(options)
    uid: 'excel!Excel.TableCollection#load:member(1)'
    package: excel!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.TableCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="excel!Excel.Interfaces.TableCollectionLoadOptions:interface" /> & <xref
            uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="excel!Excel.TableCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.TableCollection#load:member(2)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="excel!Excel.TableCollection:class" />'
        description: |-


          #### Examples

          ```TypeScript
          // Get the number of tables.
          await Excel.run(async (context) => { 
              const tables = context.workbook.tables;
              tables.load('count');
              await context.sync();
              
              console.log(tables.count);
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'excel!Excel.TableCollection#load:member(3)'
    package: excel!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="excel!Excel.TableCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'excel!Excel.TableCollection#toJSON:member(1)'
    package: excel!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `Excel.TableCollection` object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `Excel.Interfaces.TableCollectionData`<!-- -->) that contains an "items" array
      with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
      return:
        type: '<xref uid="excel!Excel.Interfaces.TableCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
