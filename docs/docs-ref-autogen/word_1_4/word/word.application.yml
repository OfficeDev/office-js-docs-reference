### YamlMime:TSType
name: Word.Application
uid: word!Word.Application:class
package: word!
fullName: Word.Application
summary: Represents the `Application` object.
remarks: >-
  \[ [API set: WordApi
  1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-external-document.yaml


  // Updates the text of the current document with the text from another
  document passed in as a Base64-encoded string.

  await Word.run(async (context) => {
    // Use the Base64-encoded string representation of the selected .docx file.
    const externalDoc: Word.DocumentCreated = context.application.createDocument(externalDocument);
    await context.sync();

    if (!Office.context.requirements.isSetSupported("WordApiHiddenDocument", "1.3")) {
      console.warn("The WordApiHiddenDocument 1.3 requirement set isn't supported on this client so can't proceed. Try this action on a platform that supports this requirement set.");
      return;
    }

    const externalDocBody: Word.Body = externalDoc.body;
    externalDocBody.load("text");
    await context.sync();

    // Insert the external document's text at the beginning of the current document's body.
    const externalDocBodyText = externalDocBody.text;
    const currentDocBody: Word.Body = context.document.body;
    currentDocBody.insertText(externalDocBodyText, Word.InsertLocation.start);
    await context.sync();
  });

  ```

isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: word!Word.Application#context:member
    package: word!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's
      process to the Office host application's process.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: <xref uid="word!Word.RequestContext:class" />
methods:
  - name: createDocument(base64File)
    uid: word!Word.Application#createDocument:member(1)
    package: word!
    fullName: createDocument(base64File)
    summary: Creates a new document by using an optional Base64-encoded .docx file.
    remarks: >-
      \[ [API set: WordApi
      1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/insert-external-document.yaml


      // Updates the text of the current document with the text from another
      document passed in as a Base64-encoded string.

      await Word.run(async (context) => {
        // Use the Base64-encoded string representation of the selected .docx file.
        const externalDoc: Word.DocumentCreated = context.application.createDocument(externalDocument);
        await context.sync();

        if (!Office.context.requirements.isSetSupported("WordApiHiddenDocument", "1.3")) {
          console.warn("The WordApiHiddenDocument 1.3 requirement set isn't supported on this client so can't proceed. Try this action on a platform that supports this requirement set.");
          return;
        }

        const externalDocBody: Word.Body = externalDoc.body;
        externalDocBody.load("text");
        await context.sync();

        // Insert the external document's text at the beginning of the current document's body.
        const externalDocBodyText = externalDocBody.text;
        const currentDocBody: Word.Body = context.document.body;
        currentDocBody.insertText(externalDocBodyText, Word.InsertLocation.start);
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'createDocument(base64File?: string): Word.DocumentCreated;'
      parameters:
        - id: base64File
          description: >-
            Optional. The Base64-encoded .docx file. The default value is
            `null`<!-- -->.
          type: string
      return:
        type: <xref uid="word!Word.DocumentCreated:class" />
        description: ''
  - name: load(options)
    uid: word!Word.Application#load:member(1)
    package: word!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Word.Interfaces.ApplicationLoadOptions):
        Word.Application;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: <xref uid="word!Word.Interfaces.ApplicationLoadOptions:interface" />
      return:
        type: <xref uid="word!Word.Application:class" />
        description: ''
  - name: load(propertyNames)
    uid: word!Word.Application#load:member(2)
    package: word!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Application;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: string | string[]
      return:
        type: <xref uid="word!Word.Application:class" />
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: word!Word.Application#load:member(3)
    package: word!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Application;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that
            specifies the properties to load, and `propertyNamesAndPaths.expand`
            is a comma-delimited string that specifies the navigation properties
            to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: <xref uid="word!Word.Application:class" />
        description: ''
  - name: newObject(context)
    uid: word!Word.Application.newObject:member(1)
    package: word!
    fullName: newObject(context)
    summary: Create a new instance of the `Word.Application` object.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static newObject(context: OfficeExtension.ClientRequestContext):
        Word.Application;
      parameters:
        - id: context
          description: ''
          type: <xref uid="office!OfficeExtension.ClientRequestContext:class" />
      return:
        type: <xref uid="word!Word.Application:class" />
        description: ''
  - name: set(properties, options)
    uid: word!Word.Application#set:member(1)
    package: word!
    fullName: set(properties, options)
    summary: >-
      Sets multiple properties of an object at the same time. You can pass
      either a plain object with the appropriate properties, or another API
      object of the same type.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        set(properties: Interfaces.ApplicationUpdateData, options?:
        OfficeExtension.UpdateOptions): void;
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured
            isomorphically to the properties of the object on which the method
            is called.
          type: <xref uid="word!Word.Interfaces.ApplicationUpdateData:interface" />
        - id: options
          description: >-
            Provides an option to suppress errors if the properties object tries
            to set any read-only properties.
          type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: word!Word.Application#set:member(2)
    package: word!
    fullName: set(properties)
    summary: >-
      Sets multiple properties on the object at the same time, based on an
      existing loaded object.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Application): void;'
      parameters:
        - id: properties
          description: ''
          type: <xref uid="word!Word.Application:class" />
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: word!Word.Application#toJSON:member(1)
    package: word!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful
      output when an API object is passed to `JSON.stringify()`<!-- -->.
      (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the
      object that's passed to it.) Whereas the original `Word.Application`
      object is an API object, the `toJSON` method returns a plain JavaScript
      object (typed as `Word.Interfaces.ApplicationData`<!-- -->) that contains
      shallow copies of any loaded child properties from the original object.
    remarks: ''

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.ApplicationData;'
      return:
        type: <xref uid="word!Word.Interfaces.ApplicationData:interface" />
        description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
