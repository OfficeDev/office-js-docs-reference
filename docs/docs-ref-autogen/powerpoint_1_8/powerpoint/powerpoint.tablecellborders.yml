### YamlMime:TSType
name: PowerPoint.TableCellBorders
uid: powerpoint!PowerPoint.TableCellBorders:interface
package: powerpoint!
fullName: PowerPoint.TableCellBorders
summary: Represents the borders of a table cell.
remarks: >-
  \[ [API set: PowerPointApi
  1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
  \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


  // Specifies a table's borders.

  await PowerPoint.run(async (context) => {
    const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

    // Add a table, specifying border styles
    shapes.addTable(3, 4, {
      values: [
        ["A", "BB", "CCC", "DDDD"],
        ["E", "FF", "GGG", "HHHH"],
        ["1", "12", "123", "1234"]
      ],
      uniformCellProperties: {
        borders: {
          left: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
          right: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
          top: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 },
          bottom: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 }
        }
      }
    });
    await context.sync();
  });

  ```

isPreview: false
isDeprecated: false
type: interface
properties:
  - name: bottom
    uid: powerpoint!PowerPoint.TableCellBorders#bottom:member
    package: powerpoint!
    fullName: bottom
    summary: Represents the bottom border.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies a table's borders.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying border styles
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          uniformCellProperties: {
            borders: {
              left: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              right: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              top: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 },
              bottom: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 }
            }
          }
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'bottom?: PowerPoint.BorderProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.BorderProperties:interface" />
  - name: diagonalDown
    uid: powerpoint!PowerPoint.TableCellBorders#diagonalDown:member
    package: powerpoint!
    fullName: diagonalDown
    summary: Represents the diagonal border (top-left to bottom-right).
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'diagonalDown?: PowerPoint.BorderProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.BorderProperties:interface" />
  - name: diagonalUp
    uid: powerpoint!PowerPoint.TableCellBorders#diagonalUp:member
    package: powerpoint!
    fullName: diagonalUp
    summary: Represents the diagonal border (bottom-left to top-right).
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'diagonalUp?: PowerPoint.BorderProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.BorderProperties:interface" />
  - name: left
    uid: powerpoint!PowerPoint.TableCellBorders#left:member
    package: powerpoint!
    fullName: left
    summary: Represents the left border.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies a table's borders.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying border styles
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          uniformCellProperties: {
            borders: {
              left: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              right: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              top: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 },
              bottom: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 }
            }
          }
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'left?: PowerPoint.BorderProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.BorderProperties:interface" />
  - name: right
    uid: powerpoint!PowerPoint.TableCellBorders#right:member
    package: powerpoint!
    fullName: right
    summary: Represents the right border.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies a table's borders.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying border styles
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          uniformCellProperties: {
            borders: {
              left: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              right: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              top: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 },
              bottom: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 }
            }
          }
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'right?: PowerPoint.BorderProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.BorderProperties:interface" />
  - name: top
    uid: powerpoint!PowerPoint.TableCellBorders#top:member
    package: powerpoint!
    fullName: top
    summary: Represents the top border.
    remarks: >-
      \[ [API set: PowerPointApi
      1.8](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets)
      \]


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/add-modify-tables.yaml


      // Specifies a table's borders.

      await PowerPoint.run(async (context) => {
        const shapes = context.presentation.getSelectedSlides().getItemAt(0).shapes;

        // Add a table, specifying border styles
        shapes.addTable(3, 4, {
          values: [
            ["A", "BB", "CCC", "DDDD"],
            ["E", "FF", "GGG", "HHHH"],
            ["1", "12", "123", "1234"]
          ],
          uniformCellProperties: {
            borders: {
              left: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              right: { color: "blue", dashStyle: PowerPoint.ShapeLineDashStyle.solid, weight: 4 },
              top: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 },
              bottom: { color: "red", dashStyle: PowerPoint.ShapeLineDashStyle.longDashDotDot, weight: 2 }
            }
          }
        });
        await context.sync();
      });

      ```

    isPreview: false
    isDeprecated: false
    syntax:
      content: 'top?: PowerPoint.BorderProperties;'
      return:
        type: <xref uid="powerpoint!PowerPoint.BorderProperties:interface" />
