### YamlMime:TSType
name: PowerPoint.Tag
uid: 'powerpoint!PowerPoint.Tag:class'
package: powerpoint!
fullName: PowerPoint.Tag
summary: Represents a single tag in the slide.
remarks: >-
  \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/tags/tags.yaml


  await PowerPoint.run(async function (context) {
    let presentationTags: PowerPoint.TagCollection = context.presentation.tags;
    presentationTags.add("COLOR", "blue");

    await context.sync();

    const tag: PowerPoint.Tag = presentationTags.getItem("COLOR");
    tag.load("key, value");

    await context.sync();

    console.log("Added key " + JSON.stringify(tag.key) + " with value " + JSON.stringify(tag.value));
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'powerpoint!PowerPoint.Tag#context:member'
    package: powerpoint!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.RequestContext:class" />'
  - name: key
    uid: 'powerpoint!PowerPoint.Tag#key:member'
    package: powerpoint!
    fullName: key
    summary: >-
      Gets the unique ID of the tag. The `key` is unique within the owning `TagCollection` and always stored as
      uppercase letters within the document.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly key: string;'
      return:
        type: string
  - name: value
    uid: 'powerpoint!PowerPoint.Tag#value:member'
    package: powerpoint!
    fullName: value
    summary: Gets the value of the tag.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'value: string;'
      return:
        type: string
methods:
  - name: load(options)
    uid: 'powerpoint!PowerPoint.Tag#load:member(1)'
    package: powerpoint!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: PowerPoint.Interfaces.TagLoadOptions): PowerPoint.Tag;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="powerpoint!PowerPoint.Interfaces.TagLoadOptions:interface" />'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Tag:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'powerpoint!PowerPoint.Tag#load:member(2)'
    package: powerpoint!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.Tag;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Tag:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'powerpoint!PowerPoint.Tag#load:member(3)'
    package: powerpoint!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): PowerPoint.Tag;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="powerpoint!PowerPoint.Tag:class" />'
        description: ''
  - name: toJSON()
    uid: 'powerpoint!PowerPoint.Tag#toJSON:member(1)'
    package: powerpoint!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `PowerPoint.Tag` object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `PowerPoint.Interfaces.TagData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.TagData;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Interfaces.TagData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
