### YamlMime:TSType
name: PowerPoint.SlideLayoutCollection
uid: 'powerpoint!PowerPoint.SlideLayoutCollection:class'
package: powerpoint!
fullName: PowerPoint.SlideLayoutCollection
summary: Represents the collection of layouts provided by the Slide Master for slides.
remarks: >-
  \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


  #### Examples


  ```TypeScript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/add-slides.yaml


  await PowerPoint.run(async function(context) {
    // Load information about all the slide masters and associated layouts.
    const slideMasters: PowerPoint.SlideMasterCollection = context.presentation.slideMasters.load("id, name, layouts/items/name, layouts/items/id");
    await context.sync();

    // Log the name and ID of each slide master.
    for (let i = 0; i < slideMasters.items.length; i++) {
      console.log("Master name: " + slideMasters.items[i].name);
      console.log("Master ID: " + slideMasters.items[i].id);

      // Log the name and ID of each slide layout in the slide master.
      const layoutsInMaster: PowerPoint.SlideLayoutCollection = slideMasters.items[i].layouts;
      for (let j = 0; j < layoutsInMaster.items.length; j++) {
        console.log("    Layout name: " + layoutsInMaster.items[j].name + " Layout ID: " + layoutsInMaster.items[j].id);
      }
    }
  });

  ```
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#context:member'
    package: powerpoint!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.RequestContext:class" />'
  - name: items
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#items:member'
    package: powerpoint!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: PowerPoint.SlideLayout[];'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayout:class" />[]'
methods:
  - name: getCount()
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#getCount:member(1)'
    package: powerpoint!
    fullName: getCount()
    summary: Gets the number of layouts in the collection.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: The number of layouts in the collection.
  - name: getItem(key)
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#getItem:member(1)'
    package: powerpoint!
    fullName: getItem(key)
    summary: Gets a layout using its unique ID.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): PowerPoint.SlideLayout;'
      parameters:
        - id: key
          description: The ID of the layout.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayout:class" />'
        description: 'The layout with the unique ID. If such a layout does not exist, an error is thrown.'
  - name: getItemAt(index)
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#getItemAt:member(1)'
    package: powerpoint!
    fullName: getItemAt(index)
    summary: Gets a layout using its zero-based index in the collection.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): PowerPoint.SlideLayout;'
      parameters:
        - id: index
          description: The index of the layout in the collection.
          type: number
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayout:class" />'
        description: The layout at the given index. An error is thrown if index is out of range.
  - name: getItemOrNullObject(id)
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#getItemOrNullObject:member(1)'
    package: powerpoint!
    fullName: getItemOrNullObject(id)
    summary: >-
      Gets a layout using its unique ID. If such a layout does not exist, an object with an `isNullObject` property set
      to true is returned. For further information, see [*OrNullObject methods and
      properties](https://learn.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(id: string): PowerPoint.SlideLayout;'
      parameters:
        - id: id
          description: The ID of the layout.
          type: string
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayout:class" />'
        description: The layout with the unique ID.
  - name: load(options)
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#load:member(1)'
    package: powerpoint!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: PowerPoint.Interfaces.SlideLayoutCollectionLoadOptions &
        PowerPoint.Interfaces.CollectionLoadOptions): PowerPoint.SlideLayoutCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionLoadOptions:interface" /> & <xref
            uid="powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayoutCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#load:member(2)'
    package: powerpoint!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.SlideLayoutCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayoutCollection:class" />'
        description: >-


          #### Examples


          ```TypeScript

          // Link to full sample:
          https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/add-slides.yaml


          await PowerPoint.run(async function(context) {
            // Load information about all the slide masters and associated layouts.
            const slideMasters: PowerPoint.SlideMasterCollection = context.presentation.slideMasters.load("id, name, layouts/items/name, layouts/items/id");
            await context.sync();

            // Log the name and ID of each slide master.
            for (let i = 0; i < slideMasters.items.length; i++) {
              console.log("Master name: " + slideMasters.items[i].name);
              console.log("Master ID: " + slideMasters.items[i].id);

              // Log the name and ID of each slide layout in the slide master.
              const layoutsInMaster: PowerPoint.SlideLayoutCollection = slideMasters.items[i].layouts;
              for (let j = 0; j < layoutsInMaster.items.length; j++) {
                console.log("    Layout name: " + layoutsInMaster.items[j].name + " Layout ID: " + layoutsInMaster.items[j].id);
              }
            }
          });

          ```
  - name: load(propertyNamesAndPaths)
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#load:member(3)'
    package: powerpoint!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): PowerPoint.SlideLayoutCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="powerpoint!PowerPoint.SlideLayoutCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'powerpoint!PowerPoint.SlideLayoutCollection#toJSON:member(1)'
    package: powerpoint!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that's
      passed to it.) Whereas the original `PowerPoint.SlideLayoutCollection` object is an API object, the `toJSON`
      method returns a plain JavaScript object (typed as `PowerPoint.Interfaces.SlideLayoutCollectionData`<!-- -->) that
      contains an "items" array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.SlideLayoutCollectionData;'
      return:
        type: '<xref uid="powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
