### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.RoamingSettings:interface'
    summary: >-
      The settings created by using the methods of the `RoamingSettings` object are saved per add-in and per user. That
      is, they are available only to the add-in that created them, and only from the user's mail box in which they are
      saved.


      While the Outlook Add-in API limits access to these settings to only the add-in that created them, these settings
      should not be considered secure storage. They can be accessed by Exchange Web Services or Extended MAPI. They
      should not be used to store sensitive information such as user credentials or security tokens.


      The name of a setting is a String, while the value can be a String, Number, Boolean, null, Object, or Array.


      The `RoamingSettings` object is accessible via the `roamingSettings` property in the `Office.context` namespace.


      **Important**: The `RoamingSettings` object is initialized from the persisted storage only when the add-in is
      first loaded. For task panes, this means that it is only initialized when the task pane first opens. If the task
      pane navigates to another page or reloads the current page, the in-memory object is reset to its initial values,
      even if your add-in has persisted changes. The persisted changes will not be available until the task pane (or
      item in the case of UI-less add-ins) is closed and reopened.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read
    name: Office.RoamingSettings
    fullName: Office.RoamingSettings
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.RoamingSettings#get:member(1)'
      - 'outlook!Office.RoamingSettings#remove:member(1)'
      - 'outlook!Office.RoamingSettings#saveAsync:member(1)'
      - 'outlook!Office.RoamingSettings#set:member(1)'
  - uid: 'outlook!Office.RoamingSettings#get:member(1)'
    summary: Retrieves the specified setting.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      var settingName = $("#settingName").val();

      var settingValue = Office.context.roamingSettings.get(settingName);

      $("#settingValue").val(settingValue);

      console.log(`The value of setting "${settingName}" is "${settingValue}".`);

      ```
    name: get(name)
    fullName: get(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'get(name: string): any;'
      return:
        type:
          - any
        description: 'Type: String \| Number \| Boolean \| Object \| Array'
      parameters:
        - id: name
          description: The case-sensitive name of the setting to retrieve.
          type:
            - string
  - uid: 'outlook!Office.RoamingSettings#remove:member(1)'
    summary: Removes the specified setting
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read
    name: remove(name)
    fullName: remove(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'remove(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: The case-sensitive name of the setting to remove.
          type:
            - string
  - uid: 'outlook!Office.RoamingSettings#saveAsync:member(1)'
    summary: >-
      Saves the settings.


      Any settings previously saved by an add-in are loaded when it is initialized, so during the lifetime of the
      session you can just use the set and get methods to work with the in-memory copy of the settings property bag.
      When you want to persist the settings so that they are available the next time the add-in is used, use the
      saveAsync method.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // Save settings in the mailbox to make it available in future sessions.

      Office.context.roamingSettings.saveAsync(function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        } else {
          console.log(`Settings saved with status: ${result.status}`);
        }
      });

      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.RoamingSettings#saveAsync~0:complex'
  - uid: 'outlook!Office.RoamingSettings#set:member(1)'
    summary: >-
      Sets or creates the specified setting.


      The `set` method creates a new setting of the specified name if it does not already exist, or sets an existing
      setting of the specified name. The value is stored in the document as the serialized JSON representation of its
      data type.


      A maximum of 32KB is available for the settings of each add-in.


      Any changes made to settings using the set function will not be saved to the server until the `saveAsync` function
      is called.
    remarks: >-
      **[Minimum permission
      level](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      `Restricted`


      **[Applicable Outlook
      mode](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose or Read


      #### Examples


      ```javascript

      // Get the current value of the 'myKey' setting.

      var value = Office.context.roamingSettings.get('myKey');

      // Update the value of the 'myKey' setting.

      Office.context.roamingSettings.set('myKey', 'Hello World!');

      // Persist the change.

      Office.context.roamingSettings.saveAsync();

      ```

      ```javascript

      var settingName = $("#settingName").val();

      var settingValue = $("#settingValue").val();

      Office.context.roamingSettings.set(settingName, settingValue);

      console.log(`Setting "${settingName}" set to value "${settingValue}".`);

      ```
    name: 'set(name, value)'
    fullName: 'set(name, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(name: string, value: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: The case-sensitive name of the setting to set or create.
          type:
            - string
        - id: value
          description: Specifies the value to be stored.
          type:
            - any
references:
  - uid: 'outlook!Office.RoamingSettings#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
