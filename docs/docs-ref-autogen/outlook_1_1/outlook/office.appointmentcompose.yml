### YamlMime:TSType
name: Office.AppointmentCompose
uid: 'outlook!Office.AppointmentCompose:interface'
package: outlook!
fullName: Office.AppointmentCompose
summary: >-
  The appointment organizer mode of [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


  **Important**: This is an internal Outlook object, not directly exposed through existing interfaces. You should
  treat this as a mode of `Office.context.mailbox.item`<!-- -->. For more information, refer to the [Object
  Model](https://learn.microsoft.com/javascript/api/requirement-sets/outlook/requirement-set-1.1/office.context.mailbox.item)
  page.


  Parent interfaces:


  - [ItemCompose](xref:outlook!Office.ItemCompose:interface)


  - [Appointment](xref:outlook!Office.Appointment:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: body
    uid: 'outlook!Office.AppointmentCompose#body:member'
    package: outlook!
    fullName: body
    summary: Gets an object that provides methods for manipulating the body of an item.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      // This example gets the body of the item as plain text.

      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of an object that is passed as the result parameter to the callback function.

      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'body: Body;'
      return:
        type: '<xref uid="outlook!Office.Body:interface" />'
  - name: end
    uid: 'outlook!Office.AppointmentCompose#end:member'
    package: outlook!
    fullName: end
    summary: >-
      Gets or sets the date and time that the appointment is to end.


      The `end` property is a [Time](xref:outlook!Office.Time:interface) object expressed as a Coordinated Universal
      Time (UTC) date and time value. You can use the `convertToLocalClientTime` method to convert the `end` property
      value to the client's local date and time.


      When you use the `Time.setAsync` method to set the end time, you should use the `convertToUtcClientTime` method to
      convert the local time on the client to UTC for the server.


      **Important**: In the Windows client, you can't use this property to update the end of a recurrence.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      // The following example sets the end time of an appointment in compose mode by

      // using the `setAsync` method of the `Time` object.

      const endTime = new Date("3/14/2015");

      const options = {
          // Pass information that can be used in the callback.
          asyncContext: {verb: "Set"}
      };

      Office.context.mailbox.item.end.setAsync(endTime, options, function(result) {
          if (result.error) {
              console.debug(result.error);
          } else {
              // Access the asyncContext that was passed to the setAsync method.
              console.debug("End Time " + result.asyncContext.verb);
          }
      });

      ```

      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml


      Office.context.mailbox.item.end.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment ends: ${result.value}`);
      });


      ...


      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Get start date failed with message ${result.error.message}`);
          return;
        }

        const end = result.value; // Set end to current start date and time.
        end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
        Office.context.mailbox.item.end.setAsync(end, (result) => {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Set end date failed with message ${result.error.message}`);
            return;
          }
          console.log(`Successfully set end date and time to ${end}`);
        });
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'end: Time;'
      return:
        type: '<xref uid="outlook!Office.Time:interface" />'
  - name: itemType
    uid: 'outlook!Office.AppointmentCompose#itemType:member'
    package: outlook!
    fullName: itemType
    summary: >-
      Gets the type of item that an instance represents.


      The `itemType` property returns one of the `ItemType` enumeration values, indicating whether the `item` object
      instance is a message or an appointment.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml


      const itemType = Office.context.mailbox.item.itemType;

      switch (itemType) {
          case Office.MailboxEnums.ItemType.Appointment:
              console.log(`Current item is an ${itemType}.`);
              break;
          case Office.MailboxEnums.ItemType.Message:
              console.log(`Current item is a ${itemType}. A message could be an email, meeting request, meeting response, or meeting cancellation.`);
              break;
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type: '<xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string'
  - name: location
    uid: 'outlook!Office.AppointmentCompose#location:member'
    package: outlook!
    fullName: location
    summary: >-
      Gets or sets the location of an appointment. The `location` property returns a
      [Location](xref:outlook!Office.Location:interface) object that provides methods that are used to get and set the
      location of the appointment.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      const userContext = { value : 1 };

      Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);


      function callback(asyncResult) {
          const context = asyncResult.context;
          const location = asyncResult.value;
      }

      ```

      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml


      Office.context.mailbox.item.location.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment location: ${result.value}`);
      });


      ...


      const location = "my office";

      Office.context.mailbox.item.location.setAsync(location, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set location to ${location}`);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'location: Location;'
      return:
        type: '<xref uid="outlook!Office.Location:interface" />'
  - name: optionalAttendees
    uid: 'outlook!Office.AppointmentCompose#optionalAttendees:member'
    package: outlook!
    fullName: optionalAttendees
    summary: >-
      Provides access to the optional attendees of an event. The type of object and level of access depend on the mode
      of the current item.


      The `optionalAttendees` property returns a `Recipients` object that provides methods to get or update the optional
      attendees for a meeting. However, depending on the client/platform (i.e., Windows, Mac, etc.), limits may apply on
      how many recipients you can get or update. See the [Recipients](xref:outlook!Office.Recipients:interface) object
      for more details.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      Office.context.mailbox.item.optionalAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

      Office.context.mailbox.item.optionalAttendees.addAsync( ['jason@contoso.com'] );

      Office.context.mailbox.item.optionalAttendees.getAsync(callback);


      function callback(asyncResult) {
          const arrayOfOptionalAttendeesRecipients = asyncResult.value;
      }

      ```

      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml


      Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          const apptOptionalAttendees = asyncResult.value;
          for (let i = 0; i < apptOptionalAttendees.length; i++) {
            console.log(
              "Optional attendees: " +
                apptOptionalAttendees[i].displayName +
                " (" +
                apptOptionalAttendees[i].emailAddress +
                ") - response: " +
                apptOptionalAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });


      ...


      const email = $("#emailOptional")
        .val()
        .toString();
      const emailArray = [email];

      Office.context.mailbox.item.optionalAttendees.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting optional attendees field.");
        } else {
          console.error(asyncResult.error);
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'optionalAttendees: Recipients;'
      return:
        type: '<xref uid="outlook!Office.Recipients:interface" />'
  - name: requiredAttendees
    uid: 'outlook!Office.AppointmentCompose#requiredAttendees:member'
    package: outlook!
    fullName: requiredAttendees
    summary: >-
      Provides access to the required attendees of an event. The type of object and level of access depend on the mode
      of the current item.


      The `requiredAttendees` property returns a `Recipients` object that provides methods to get or update the required
      attendees for a meeting. However, depending on the client/platform (i.e., Windows, Mac, etc.), limits may apply on
      how many recipients you can get or update. See the [Recipients](xref:outlook!Office.Recipients:interface) object
      for more details.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      Office.context.mailbox.item.requiredAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

      Office.context.mailbox.item.requiredAttendees.addAsync( ['jason@contoso.com'] );

      Office.context.mailbox.item.requiredAttendees.getAsync(callback);


      function callback(asyncResult) {
          const arrayOfRequiredAttendeesRecipients = asyncResult.value;
          console.log(JSON.stringify(arrayOfRequiredAttendeesRecipients));
      }

      ```

      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml


      Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          const apptRequiredAttendees = asyncResult.value;
          for (let i = 0; i < apptRequiredAttendees.length; i++) {
            console.log(
              "Required attendees: " +
                apptRequiredAttendees[i].displayName +
                " (" +
                apptRequiredAttendees[i].emailAddress +
                ") - response: " +
                apptRequiredAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });


      ...


      const email = $("#emailRequired")
        .val()
        .toString();
      const emailArray = [email];

      Office.context.mailbox.item.requiredAttendees.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting required attendees field.");
        } else {
          console.error(asyncResult.error);
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'requiredAttendees: Recipients;'
      return:
        type: '<xref uid="outlook!Office.Recipients:interface" />'
  - name: start
    uid: 'outlook!Office.AppointmentCompose#start:member'
    package: outlook!
    fullName: start
    summary: >-
      Gets or sets the date and time that the appointment is to begin.


      The `start` property is a [Time](xref:outlook!Office.Time:interface) object expressed as a Coordinated Universal
      Time (UTC) date and time value. You can use the `convertToLocalClientTime` method to convert the value to the
      client's local date and time.


      When you use the `Time.setAsync` method to set the start time, you should use the `convertToUtcClientTime` method
      to convert the local time on the client to UTC for the server.


      **Important**: In the Windows client, you can't use this property to update the start of a recurrence.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml


      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment starts: ${result.value}`);
      });


      ...


      const start = new Date(); // Represents current date and time.

      start.setDate(start.getDate() + 2); // Add 2 days to current date.

      Office.context.mailbox.item.start.setAsync(start, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set start date and time to ${start}`);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'start: Time;'
      return:
        type: '<xref uid="outlook!Office.Time:interface" />'
  - name: subject
    uid: 'outlook!Office.AppointmentCompose#subject:member'
    package: outlook!
    fullName: subject
    summary: |-
      Gets or sets the description that appears in the subject field of an item.

      The `subject` property gets or sets the entire subject of the item, as sent by the email server.

      The `subject` property returns a `Subject` object that provides methods to get and set the subject.
    remarks: >-
      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml


      Office.context.mailbox.item.subject.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Subject: ${result.value}`);
      });


      ...


      let subject = "Hello World!";

      Office.context.mailbox.item.subject.setAsync(subject, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set subject to ${subject}`);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'subject: Subject;'
      return:
        type: '<xref uid="outlook!Office.Subject:interface" />'
methods:
  - name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)'
    package: outlook!
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The `addFileAttachmentAsync` method uploads the file at the specified URI and attaches it to the item in the
      compose form.
    remarks: >-
      \[ [API set: Mailbox 1.1 for Outlook on Windows (classic) and on Mac, Mailbox 1.8 for Outlook on the web and new
      Outlook on Windows](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      **Important**:


      - This method isn't supported in Outlook on iOS or Android. For more information on supported APIs in Outlook
      mobile, see [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      - In recent builds of classic Outlook on Windows, a bug was introduced that incorrectly appends an `Authorization:
      Bearer` header to this action (whether using this API or the Outlook UI). To work around this issue, use the
      `addFileAttachmentFromBase64` API introduced with requirement set 1.8.


      - The URI of the file to be attached must support caching in production. The server hosting the image shouldn't
      return a `Cache-Control` header that specifies `no-cache`<!-- -->, `no-store`<!-- -->, or similar options in the
      HTTP response. However, when you're developing the add-in and making changes to files, caching can prevent you
      from seeing your changes. We recommend using `Cache-Control` headers during development.


      - You can use the same URI with the `removeAttachmentAsync` method to remove the attachment in the same session.


      **Errors**:


      - `AttachmentSizeExceeded`<!-- -->: The attachment is larger than allowed.


      - `FileTypeNotSupported`<!-- -->: The attachment has an extension that is not allowed.


      - `NumberOfAttachmentsExceeded`<!-- -->: The message or appointment has too many attachments.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml


      const attachmentUrl = $("#attachmentUrl")
        .val()
        .toString();
      Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { isInline: false },
        (result) => {
          console.log(result);
        }
      );

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addFileAttachmentAsync(uri: string, attachmentName: string, options: Office.AsyncContextOptions & { isInline:
        boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;
      parameters:
        - id: uri
          description: >-
            The URI that provides the location of the file to attach to the message or appointment. The maximum length
            is 2048 characters.
          type: string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type: string
        - id: options
          description: >-
            An object literal that contains one or more of the following properties:- `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback function. `isInline`<!-- -->: If true, indicates
            that the attachment will be shown inline as an image in the message body and won't be displayed in the
            attachment list.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isInline: boolean }'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. On success, the attachment identifier will be provided in
            the `asyncResult.value` property. If uploading the attachment fails, the `asyncResult` object will contain
            an `Error` object that provides a description of the error.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(2)'
    package: outlook!
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    summary: >-
      Adds a file to a message or appointment as an attachment.


      The `addFileAttachmentAsync` method uploads the file at the specified URI and attaches it to the item in the
      compose form.
    remarks: >-
      \[ [API set: Mailbox 1.1 for Outlook on Windows (classic) and on Mac, Mailbox 1.8 for Outlook on the web and new
      Outlook on Windows](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      **Important**:


      - This method isn't supported in Outlook on iOS or Android. For more information on supported APIs in Outlook
      mobile, see [Outlook JavaScript APIs supported in Outlook on mobile
      devices](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-mobile-apis)<!-- -->.


      - In recent builds of classic Outlook on Windows, a bug was introduced that incorrectly appends an `Authorization:
      Bearer` header to this action (whether using this API or the Outlook UI). To work around this issue, use the
      `addFileAttachmentFromBase64` API introduced with requirement set 1.8.


      - The URI of the file to be attached must support caching in production. The server hosting the image shouldn't
      return a `Cache-Control` header that specifies `no-cache`<!-- -->, `no-store`<!-- -->, or similar options in the
      HTTP response. However, when you're developing the add-in and making changes to files, caching can prevent you
      from seeing your changes. We recommend using `Cache-Control` headers during development.


      - You can use the same URI with the `removeAttachmentAsync` method to remove the attachment in the same session.


      **Errors**:


      - `AttachmentSizeExceeded`<!-- -->: The attachment is larger than allowed.


      - `FileTypeNotSupported`<!-- -->: The attachment has an extension that is not allowed.


      - `NumberOfAttachmentsExceeded`<!-- -->: The message or appointment has too many attachments.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      parameters:
        - id: uri
          description: >-
            The URI that provides the location of the file to attach to the message or appointment. The maximum length
            is 2048 characters.
          type: string
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type: string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. On success, the attachment identifier will be provided in
            the `asyncResult.value` property. If uploading the attachment fails, the `asyncResult` object will contain
            an `Error` object that provides a description of the error.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)'
    package: outlook!
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    summary: >-
      Adds an Exchange item, such as a message, as an attachment to the message or appointment.


      The `addItemAttachmentAsync` method attaches the item with the specified Exchange identifier to the item in the
      compose form. If you specify a callback function, the method is called with one parameter, `asyncResult`<!-- -->,
      which contains either the attachment identifier or a code that indicates any error that occurred while attaching
      the item. You can use the `options` parameter to pass state information to the callback function, if needed.


      You can subsequently use the identifier with the `removeAttachmentAsync` method to remove the attachment in the
      same session.


      If your Office Add-in is running in Outlook on the web and [new Outlook on
      Windows](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627)<!-- -->, the
      `addItemAttachmentAsync` method can attach items to items other than the item that you're editing. However, this
      isn't supported and isn't recommended.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      **Errors**:


      - `NumberOfAttachmentsExceeded`<!-- -->: The message or appointment has too many attachments.


      #### Examples


      ```TypeScript

      // The following example adds an existing Outlook item as an attachment

      // with the name "My Attachment".

      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          const itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          const options = { asyncContext: { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, (result) => {
              if (result.status === Office.AsyncResultStatus.Failed) {
                  console.error("Failed to add attachment: " + result.error.message);
                  return;
              }

              console.log("Attachment added successfully.");
              console.log("var1: " + result.asyncContext.var1);
              console.log("var2: " + result.asyncContext.var2);
          });
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addItemAttachmentAsync(itemId: any, attachmentName: string, options: Office.AsyncContextOptions, callback?:
        (asyncResult: Office.AsyncResult<string>) => void): void;
      parameters:
        - id: itemId
          description: The Exchange identifier of the item to attach. The maximum length is 100 characters.
          type: any
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type: string
        - id: options
          description: >-
            An object literal that contains one or more of the following properties:- `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback function.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. On success, the attachment identifier will be provided in
            the `asyncResult.value` property. If adding the attachment fails, the `asyncResult` object will contain an
            `Error` object that provides a description of the error.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(2)'
    package: outlook!
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    summary: >-
      Adds an Exchange item, such as a message, as an attachment to the message or appointment.


      The `addItemAttachmentAsync` method attaches the item with the specified Exchange identifier to the item in the
      compose form. If you specify a callback function, the method is called with one parameter, `asyncResult`<!-- -->,
      which contains either the attachment identifier or a code that indicates any error that occurred while attaching
      the item. You can use the `options` parameter to pass state information to the callback function, if needed.


      You can subsequently use the identifier with the `removeAttachmentAsync` method to remove the attachment in the
      same session.


      If your Office Add-in is running in Outlook on the web and [new Outlook on
      Windows](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627)<!-- -->, the
      `addItemAttachmentAsync` method can attach items to items other than the item that you're editing. However, this
      isn't supported and isn't recommended.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      **Errors**:


      - `NumberOfAttachmentsExceeded`<!-- -->: The message or appointment has too many attachments.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult:
        Office.AsyncResult<string>) => void): void;
      parameters:
        - id: itemId
          description: The Exchange identifier of the item to attach. The maximum length is 100 characters.
          type: any
        - id: attachmentName
          description: >-
            The name of the attachment that is shown while the attachment is uploading. The maximum length is 255
            characters.
          type: string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the callback parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. On success, the attachment identifier will be provided in
            the `asyncResult.value` property. If adding the attachment fails, the `asyncResult` object will contain an
            `Error` object that provides a description of the error.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'loadCustomPropertiesAsync(callback, userContext)'
    uid: 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)'
    package: outlook!
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    summary: >-
      Asynchronously loads custom properties for this add-in on the selected item.


      Custom properties are stored as key-value pairs on a per-app, per-item basis. This method returns a
      [CustomProperties](xref:outlook!Office.CustomProperties:interface) object in the callback, which provides methods
      to access the custom properties specific to the current item and the current add-in. Custom properties aren't
      encrypted on the item, so this shouldn't be used as secure storage.


      The custom properties are provided as a `CustomProperties` object in the `asyncResult.value` property. This object
      can be used to get, set, save, and remove custom properties from the mail item.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      To learn more about custom properties, see [Get and set add-in metadata for an Outlook
      add-in](https://learn.microsoft.com/office/dev/add-ins/outlook/metadata-for-an-outlook-add-in)<!-- -->.


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml


      Office.context.mailbox.item.loadCustomPropertiesAsync((result) => {
        if (result.status === Office.AsyncResultStatus.Failed) {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
          return;
        }

        customProps = result.value;
        console.log("Loaded the CustomProperties object.");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void,
        userContext?: any): void;
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->.
          type: >-
            (asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref
            uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void
        - id: userContext
          description: >-
            Optional. Developers can provide any object they wish to access in the callback function. This object can be
            accessed by the `asyncResult.asyncContext` property in the callback function.
          type: any
      return:
        type: void
        description: ''
  - name: 'removeAttachmentAsync(attachmentId, options, callback)'
    uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)'
    package: outlook!
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    summary: >-
      Removes an attachment from a message or appointment.


      The `removeAttachmentAsync` method removes the attachment with the specified identifier from the item. As a best
      practice, you should use the attachment identifier to remove an attachment only if the same mail app has added
      that attachment in the same session. In Outlook on the web, on mobile devices, and in [new Outlook on
      Windows](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627)<!-- -->, the attachment
      identifier is valid only within the same session. A session is over when the user closes the app, or if the user
      starts composing an inline form then subsequently pops out the form to continue in a separate window.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      *Important**: The `removeAttachmentAsync` method doesn't remove inline attachments from a mail item. To remove
      an inline attachment, first get the item's body, then remove any references of the attachment from its contents.
      Use the [Office.Body](https://learn.microsoft.com/javascript/api/outlook/office.body) APIs to get and set the body
      of an item.


      **Errors**:


      - `InvalidAttachmentId`<!-- -->: The attachment identifier does not exist.


      #### Examples


      ```TypeScript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml


      Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId")
          .val()
          .toString(),
        (result) => {
          if (result.status === Office.AsyncResultStatus.Failed) {
            console.error(result.error.message);
            return;
          }

          console.log(`Attachment removed successfully.`);
        }
      );

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        removeAttachmentAsync(attachmentId: string, options: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      parameters:
        - id: attachmentId
          description: >-
            The identifier of the attachment to remove. The maximum string length of the `attachmentId` is 200
            characters in Outlook on the web and on Windows (new and classic).
          type: string
        - id: options
          description: >-
            An object literal that contains one or more of the following properties:- `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback function.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. If removing the attachment fails, the `asyncResult.error`
            property will contain an error code with the reason for the failure.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'removeAttachmentAsync(attachmentId, callback)'
    uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(2)'
    package: outlook!
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    summary: >-
      Removes an attachment from a message or appointment.


      The `removeAttachmentAsync` method removes the attachment with the specified identifier from the item. As a best
      practice, you should use the attachment identifier to remove an attachment only if the same mail app has added
      that attachment in the same session. In Outlook on the web, on mobile devices, and in [new Outlook on
      Windows](https://support.microsoft.com/office/656bb8d9-5a60-49b2-a98b-ba7822bc7627)<!-- -->, the attachment
      identifier is valid only within the same session. A session is over when the user closes the app, or if the user
      starts composing an inline form then subsequently pops out the form to continue in a separate window.
    remarks: >-
      \[ [API set: Mailbox 1.1](/javascript/api/requirement-sets/outlook/outlook-api-requirement-sets) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!--
      -->**: **read/write item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!--
      -->**: Appointment Organizer


      *Important**: The `removeAttachmentAsync` method doesn't remove inline attachments from a mail item. To remove
      an inline attachment, first get the item's body, then remove any references of the attachment from its contents.
      Use the [Office.Body](https://learn.microsoft.com/javascript/api/outlook/office.body) APIs to get and set the body
      of an item.


      **Errors**:


      - `InvalidAttachmentId`<!-- -->: The attachment identifier does not exist.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void):
        void;
      parameters:
        - id: attachmentId
          description: >-
            The identifier of the attachment to remove. The maximum string length of the `attachmentId` is 200
            characters in Outlook on the web and on Windows (new and classic).
          type: string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. If removing the attachment fails, the `asyncResult.error`
            property will contain an error code with the reason for the failure.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
      return:
        type: void
        description: ''
extends: '<xref uid="outlook!Office.Appointment:interface" />'
