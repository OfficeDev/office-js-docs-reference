### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ConditionalFormat
    summary: |-
      An object encapsulating a conditional format's range, format, rule, and other properties.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: Excel.ConditionalFormat
    fullName: excel.Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.ConditionalFormat.cellValue
      - excel.Excel.ConditionalFormat.cellValueOrNullObject
      - excel.Excel.ConditionalFormat.colorScale
      - excel.Excel.ConditionalFormat.colorScaleOrNullObject
      - excel.Excel.ConditionalFormat.custom
      - excel.Excel.ConditionalFormat.customOrNullObject
      - excel.Excel.ConditionalFormat.dataBar
      - excel.Excel.ConditionalFormat.dataBarOrNullObject
      - excel.Excel.ConditionalFormat.delete
      - excel.Excel.ConditionalFormat.getRange
      - excel.Excel.ConditionalFormat.getRangeOrNullObject
      - excel.Excel.ConditionalFormat.iconSet
      - excel.Excel.ConditionalFormat.iconSetOrNullObject
      - excel.Excel.ConditionalFormat.load
      - excel.Excel.ConditionalFormat.preset
      - excel.Excel.ConditionalFormat.presetOrNullObject
      - excel.Excel.ConditionalFormat.priority
      - excel.Excel.ConditionalFormat.set
      - excel.Excel.ConditionalFormat.stopIfTrue
      - excel.Excel.ConditionalFormat.textComparison
      - excel.Excel.ConditionalFormat.textComparisonOrNullObject
      - excel.Excel.ConditionalFormat.toJSON
      - excel.Excel.ConditionalFormat.topBottom
      - excel.Excel.ConditionalFormat.topBottomOrNullObject
      - excel.Excel.ConditionalFormat.type
  - uid: excel.Excel.ConditionalFormat.cellValue
    summary: >-
      Returns the cell value conditional format properties if the current conditional format is a CellValue type. For
      example to format all cells between 5 and 10.


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: cellValue
    fullName: excel.Excel.ConditionalFormat.cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - Excel.CellValueConditionalFormat
  - uid: excel.Excel.ConditionalFormat.cellValueOrNullObject
    summary: >-
      Returns the cell value conditional format properties if the current conditional format is a CellValue type. For
      example to format all cells between 5 and 10.


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: cellValueOrNullObject
    fullName: excel.Excel.ConditionalFormat.cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - Excel.CellValueConditionalFormat
  - uid: excel.Excel.ConditionalFormat.colorScale
    summary: |-
      Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: colorScale
    fullName: excel.Excel.ConditionalFormat.colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - Excel.ColorScaleConditionalFormat
    remarks: |


      ## Snippets

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B2:M5");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.colorScale);
          const criteria = {
              minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
              midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
              maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
          };
          conditionalFormat.colorScale.criteria = criteria;

          await context.sync();
      });
      ```
  - uid: excel.Excel.ConditionalFormat.colorScaleOrNullObject
    summary: |-
      Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: colorScaleOrNullObject
    fullName: excel.Excel.ConditionalFormat.colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - Excel.ColorScaleConditionalFormat
  - uid: excel.Excel.ConditionalFormat.custom
    summary: |-
      Returns the custom conditional format properties if the current conditional format is a custom type.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: custom
    fullName: excel.Excel.ConditionalFormat.custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - Excel.CustomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.customOrNullObject
    summary: |-
      Returns the custom conditional format properties if the current conditional format is a custom type.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: customOrNullObject
    fullName: excel.Excel.ConditionalFormat.customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - Excel.CustomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.dataBar
    summary: |-
      Returns the data bar properties if the current conditional format is a data bar.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: dataBar
    fullName: excel.Excel.ConditionalFormat.dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - Excel.DataBarConditionalFormat
    remarks: |


      ## Snippets

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.dataBar);
          conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

          await context.sync();
      });
      ```
  - uid: excel.Excel.ConditionalFormat.dataBarOrNullObject
    summary: |-
      Returns the data bar properties if the current conditional format is a data bar.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: dataBarOrNullObject
    fullName: excel.Excel.ConditionalFormat.dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - Excel.DataBarConditionalFormat
  - uid: excel.Excel.ConditionalFormat.delete
    summary: |-
      Deletes this conditional format.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: delete()
    fullName: excel.Excel.ConditionalFormat.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.ConditionalFormat.getRange
    summary: |-
      Returns the range the conditonal format is applied to or a null object if the range is discontiguous. Read-only.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: getRange()
    fullName: excel.Excel.ConditionalFormat.getRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
  - uid: excel.Excel.ConditionalFormat.getRangeOrNullObject
    summary: |-
      Returns the range the conditonal format is applied to or a null object if the range is discontiguous. Read-only.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: getRangeOrNullObject()
    fullName: excel.Excel.ConditionalFormat.getRangeOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - Excel.Range
        description: ''
  - uid: excel.Excel.ConditionalFormat.iconSet
    summary: |-
      Returns the IconSet conditional format properties if the current conditional format is an IconSet type.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: iconSet
    fullName: excel.Excel.ConditionalFormat.iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - Excel.IconSetConditionalFormat
  - uid: excel.Excel.ConditionalFormat.iconSetOrNullObject
    summary: |-
      Returns the IconSet conditional format properties if the current conditional format is an IconSet type.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: iconSetOrNullObject
    fullName: excel.Excel.ConditionalFormat.iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - Excel.IconSetConditionalFormat
  - uid: excel.Excel.ConditionalFormat.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: excel.Excel.ConditionalFormat.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ConditionalFormat;'
      return:
        type:
          - Excel.ConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: excel.Excel.ConditionalFormat.preset
    summary: >-
      Returns the preset criteria conditional format such as above average/below average/unique values/contains
      blank/nonblank/error/noerror properties.


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: preset
    fullName: excel.Excel.ConditionalFormat.preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - Excel.PresetCriteriaConditionalFormat
  - uid: excel.Excel.ConditionalFormat.presetOrNullObject
    summary: >-
      Returns the preset criteria conditional format such as above average/below average/unique values/contains
      blank/nonblank/error/noerror properties.


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: presetOrNullObject
    fullName: excel.Excel.ConditionalFormat.presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - Excel.PresetCriteriaConditionalFormat
  - uid: excel.Excel.ConditionalFormat.priority
    summary: >-
      The priority (or index) within the conditional format collection that this conditional format currently exists in.
      Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order. Use a
      negative priority to begin from the back. Priorities greater than than bounds will get and set to the maximum (or
      minimum if negative) priority.


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: priority
    fullName: excel.Excel.ConditionalFormat.priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: excel.Excel.ConditionalFormat.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: excel.Excel.ConditionalFormat.set
    langs:
      - typeScript
    type: method
    syntax:
      content: "set(properties: Interfaces.ConditionalFormatUpdateData, options?: {\r\n            throwOnReadOnly?: boolean;\r\n        }): void;"
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.ConditionalFormatUpdateData
        - id: options
          description: ''
          type:
            - "{\r\n            /**\r\n             * Throw an error if the passed-in property list includes read-only properties (default = true).\r\n             */\r\n            throwOnReadOnly?: boolean;\r\n        }"
  - uid: excel.Excel.ConditionalFormat.stopIfTrue
    summary: >-
      If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.
      Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: stopIfTrue
    fullName: excel.Excel.ConditionalFormat.stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.ConditionalFormat.textComparison
    summary: >-
      Returns the specific text conditional format properties if the current conditional format is a text type. For
      example to format cells matching the word "Text".


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: textComparison
    fullName: excel.Excel.ConditionalFormat.textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - Excel.TextConditionalFormat
  - uid: excel.Excel.ConditionalFormat.textComparisonOrNullObject
    summary: >-
      Returns the specific text conditional format properties if the current conditional format is a text type. For
      example to format cells matching the word "Text".


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: textComparisonOrNullObject
    fullName: excel.Excel.ConditionalFormat.textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - Excel.TextConditionalFormat
  - uid: excel.Excel.ConditionalFormat.toJSON
    name: toJSON()
    fullName: excel.Excel.ConditionalFormat.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON:'
      return:
        type:
          - "{\r\n            \"cellValue\": CellValueConditionalFormat;\r\n            \"cellValueOrNullObject\": CellValueConditionalFormat;\r\n            \"colorScale\": ColorScaleConditionalFormat;\r\n            \"colorScaleOrNullObject\": ColorScaleConditionalFormat;\r\n            \"custom\": CustomConditionalFormat;\r\n            \"customOrNullObject\": CustomConditionalFormat;\r\n            \"dataBar\": DataBarConditionalFormat;\r\n            \"dataBarOrNullObject\": DataBarConditionalFormat;\r\n            \"iconSet\": IconSetConditionalFormat;\r\n            \"iconSetOrNullObject\": IconSetConditionalFormat;\r\n            \"preset\": PresetCriteriaConditionalFormat;\r\n            \"presetOrNullObject\": PresetCriteriaConditionalFormat;\r\n            \"priority\": number;\r\n            \"stopIfTrue\": boolean;\r\n            \"textComparison\": TextConditionalFormat;\r\n            \"textComparisonOrNullObject\": TextConditionalFormat;\r\n            \"topBottom\": TopBottomConditionalFormat;\r\n            \"topBottomOrNullObject\": TopBottomConditionalFormat;\r\n            \"type\": string;\r\n        }"
        description: ''
  - uid: excel.Excel.ConditionalFormat.topBottom
    summary: >-
      Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type. For
      example to format the top 10% or bottom 10 items.


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: topBottom
    fullName: excel.Excel.ConditionalFormat.topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - Excel.TopBottomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.topBottomOrNullObject
    summary: >-
      Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type. For
      example to format the top 10% or bottom 10 items.


      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: topBottomOrNullObject
    fullName: excel.Excel.ConditionalFormat.topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - Excel.TopBottomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.type
    summary: |-
      A type of conditional format. Only one can be set at a time. Read-Only.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: type
    fullName: excel.Excel.ConditionalFormat.type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: string;'
      return:
        type:
          - string
    remarks: |


      ## Snippets

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const worksheetRange = sheet.getRange();
          worksheetRange.conditionalFormats.load("type");

          await context.sync();

          let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
          worksheetRange.conditionalFormats.items.forEach(item => {
              cfRangePairs.push({
                  cf: item,
                  range: item.getRange().load("address")
              });
          });

          await context.sync();

          $("#conditional-formats li").remove();
          if (cfRangePairs.length > 0) {
              cfRangePairs.forEach(item => {
                  let $p = $("<p></p>").text(
                      `${item.cf.type}`)
                  let $li = $(`<li></li>`);
                  $li.append($p);
                  $("#conditional-formats").append($li);
                  $(".conditional-formats").show()[0].scrollIntoView();
              })
          }
          else {
              OfficeHelpers.UI.notify("None to display", "No conditional formats in workbook", "warning");
          }
      });
      ```
