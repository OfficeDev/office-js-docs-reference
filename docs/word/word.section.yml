### YamlMime:UniversalReference
items:
  - uid: word.Word.Section
    summary: |-
      Represents a section in a Word document.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: Word.Section
    fullName: word.Word.Section
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: word
    children:
      - word.Word.Section.body
      - word.Word.Section.getFooter
      - word.Word.Section.getHeader
      - word.Word.Section.getNext
      - word.Word.Section.getNextOrNullObject
      - word.Word.Section.load
      - word.Word.Section.set
      - word.Word.Section.toJSON
      - word.Word.Section.track
      - word.Word.Section.untrack
  - uid: word.Word.Section.body
    summary: >-
      Gets the body object of the section. This does not include the header/footer and other section metadata.
      Read-only.


      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: body
    fullName: word.Word.Section.body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Word.Body;'
      return:
        type:
          - Word.Body
  - uid: word.Word.Section.getFooter
    summary: |-
      Gets one of the section's footers.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: getFooter(type)
    fullName: word.Word.Section.getFooter
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFooter(type: string): Word.Body;'
      return:
        type:
          - Word.Body
        description: ''
      parameters:
        - id: type
          description: 'Required. The type of footer to return. This value can be: ''primary'', ''firstPage'' or ''evenPages''.'
          type:
            - string
  - uid: word.Word.Section.getHeader
    summary: |-
      Gets one of the section's headers.

      \[ [API set: WordApi 1.1](http://bing.com?type=word) \]
    name: getHeader(type)
    fullName: word.Word.Section.getHeader
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHeader(type: string): Word.Body;'
      return:
        type:
          - Word.Body
        description: ''
      parameters:
        - id: type
          description: 'Required. The type of header to return. This value can be: ''primary'', ''firstPage'' or ''evenPages''.'
          type:
            - string
  - uid: word.Word.Section.getNext
    summary: |-
      Gets the next section. Throws if this section is the last one.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: getNext()
    fullName: word.Word.Section.getNext
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(): Word.Section;'
      return:
        type:
          - Word.Section
        description: ''
  - uid: word.Word.Section.getNextOrNullObject
    summary: |-
      Gets the next section. Returns a null object if this section is the last one.

      \[ [API set: WordApi 1.3](http://bing.com?type=word) \]
    name: getNextOrNullObject()
    fullName: word.Word.Section.getNextOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(): Word.Section;'
      return:
        type:
          - Word.Section
        description: ''
  - uid: word.Word.Section.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: word.Word.Section.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): Word.Section;'
      return:
        type:
          - Word.Section
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: word.Word.Section.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: word.Word.Section.set
    langs:
      - typeScript
    type: method
    syntax:
      content: "set(properties: Interfaces.SectionUpdateData, options?: {\r\n            throwOnReadOnly?: boolean;\r\n        }): void;"
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.SectionUpdateData
        - id: options
          description: ''
          type:
            - "{\r\n            /**\r\n             * Throw an error if the passed-in property list includes read-only properties (default = true).\r\n             */\r\n            throwOnReadOnly?: boolean;\r\n        }"
  - uid: word.Word.Section.toJSON
    name: toJSON()
    fullName: word.Word.Section.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON:'
      return:
        type:
          - "{\r\n            \"body\": Body;\r\n        }"
        description: ''
  - uid: word.Word.Section.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: word.Word.Section.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Section;'
      return:
        type:
          - Word.Section
        description: ''
  - uid: word.Word.Section.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: word.Word.Section.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Section;'
      return:
        type:
          - Word.Section
        description: ''
