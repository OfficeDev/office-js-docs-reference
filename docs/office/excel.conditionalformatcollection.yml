### YamlMime:UniversalReference
items:
  - uid: office.Excel.ConditionalFormatCollection
    summary: |-
      Represents a collection of all the conditional formats that are overlap the range.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: Excel.ConditionalFormatCollection
    fullName: office.Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: office
    children:
      - office.Excel.ConditionalFormatCollection.add
      - office.Excel.ConditionalFormatCollection.clearAll
      - office.Excel.ConditionalFormatCollection.getCount
      - office.Excel.ConditionalFormatCollection.getItemAt
      - office.Excel.ConditionalFormatCollection.items
      - office.Excel.ConditionalFormatCollection.load
      - office.Excel.ConditionalFormatCollection.toJSON
  - uid: office.Excel.ConditionalFormatCollection.add
    summary: |-
      Adds a new conditional format to the collection at the first/top priority.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: add(type)
    fullName: office.Excel.ConditionalFormatCollection.add
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: string): Excel.ConditionalFormat;'
      return:
        type:
          - Excel.ConditionalFormat
        description: ''
      parameters:
        - id: type
          description: The type of conditional format being added. See Excel.ConditionalFormatType for details.
          type:
            - string
  - uid: office.Excel.ConditionalFormatCollection.clearAll
    summary: |-
      Clears all conditional formats active on the current specified range.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: clearAll()
    fullName: office.Excel.ConditionalFormatCollection.clearAll
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: ''
  - uid: office.Excel.ConditionalFormatCollection.getCount
    summary: |-
      Returns the number of conditional formats in the workbook. Read-only.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: getCount()
    fullName: office.Excel.ConditionalFormatCollection.getCount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: office.Excel.ConditionalFormatCollection.getItemAt
    summary: |-
      Returns a conditional format at the given index.

      \[ [Api set: ExcelApi 1.6 (PREVIEW)](http://bing.com) \]
    name: getItemAt(index)
    fullName: office.Excel.ConditionalFormatCollection.getItemAt
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.ConditionalFormat;'
      return:
        type:
          - Excel.ConditionalFormat
        description: ''
      parameters:
        - id: index
          description: Index of the conditional formats to be retrieved.
          type:
            - number
    remarks: |


      ## Snippets

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const worksheetRange = sheet.getRange();
          worksheetRange.conditionalFormats.load("type");

          await context.sync();

          let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
          worksheetRange.conditionalFormats.items.forEach(item => {
              cfRangePairs.push({
                  cf: item,
                  range: item.getRange().load("address")
              });
          });

          await context.sync();

          $("#conditional-formats li").remove();
          if (cfRangePairs.length > 0) {
              cfRangePairs.forEach(item => {
                  let $p = $("<p></p>").text(
                      `${item.cf.type}`)
                  let $li = $(`<li></li>`);
                  $li.append($p);
                  $("#conditional-formats").append($li);
                  $(".conditional-formats").show()[0].scrollIntoView();
              })
          }
          else {
              OfficeHelpers.UI.notify("None to display", "No conditional formats in workbook", "warning");
          }
      });
      ```
  - uid: office.Excel.ConditionalFormatCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: office.Excel.ConditionalFormatCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Array<Excel.ConditionalFormat>;'
      return:
        type:
          - Array<Excel.ConditionalFormat>
  - uid: office.Excel.ConditionalFormatCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: office.Excel.ConditionalFormatCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
      return:
        type:
          - Excel.ConditionalFormatCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: office.Excel.ConditionalFormatCollection.toJSON
    name: toJSON()
    fullName: office.Excel.ConditionalFormatCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON:'
      return:
        type:
          - '{}'
        description: ''
