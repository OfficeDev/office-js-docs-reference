### YamlMime:UniversalReference
items:
  - uid: office.Word.RangeCollection
    summary: |-
      Contains a collection of \[range\](range.md) objects.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: Word.RangeCollection
    fullName: office.Word.RangeCollection
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: office
    children:
      - office.Word.RangeCollection.getFirst
      - office.Word.RangeCollection.getFirstOrNullObject
      - office.Word.RangeCollection.items
      - office.Word.RangeCollection.load
      - office.Word.RangeCollection.toJSON
      - office.Word.RangeCollection.track
      - office.Word.RangeCollection.untrack
  - uid: office.Word.RangeCollection.getFirst
    summary: |-
      Gets the first range in this collection. Throws if this collection is empty.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: getFirst()
    fullName: office.Word.RangeCollection.getFirst
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
  - uid: office.Word.RangeCollection.getFirstOrNullObject
    summary: |-
      Gets the first range in this collection. Returns a null object if this collection is empty.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: getFirstOrNullObject()
    fullName: office.Word.RangeCollection.getFirstOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirstOrNullObject(): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
  - uid: office.Word.RangeCollection.items
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: office.Word.RangeCollection.items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'items: Array<Word.Range>;'
      return:
        type:
          - Array<Word.Range>
  - uid: office.Word.RangeCollection.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: office.Word.RangeCollection.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: office.Word.RangeCollection.toJSON
    name: toJSON()
    fullName: office.Word.RangeCollection.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON:'
      return:
        type:
          - '{}'
        description: ''
  - uid: office.Word.RangeCollection.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: office.Word.RangeCollection.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
  - uid: office.Word.RangeCollection.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: office.Word.RangeCollection.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
