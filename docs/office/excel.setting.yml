### YamlMime:UniversalReference
items:
  - uid: office.Excel.Setting
    summary: |-
      Setting represents a key-value pair of a setting persisted to the document.

      \[ [Api set: ExcelApi 1.4](http://bing.com) \]
    name: Excel.Setting
    fullName: office.Excel.Setting
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: office
    children:
      - office.Excel.Setting.delete
      - office.Excel.Setting.key
      - office.Excel.Setting.load
      - office.Excel.Setting.set
      - office.Excel.Setting.toJSON
      - office.Excel.Setting.value
  - uid: office.Excel.Setting.delete
    summary: |-
      Deletes the setting.

      \[ [Api set: ExcelApi 1.4](http://bing.com) \]
    name: delete()
    fullName: office.Excel.Setting.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
    remarks: |


      ## Snippets

      ```typescript
      await Excel.run(async (context) => {
          const settings = context.workbook.settings;
          let needsReview = settings.getItem("NeedsReview");
          needsReview.delete();
          needsReview = settings.getItemOrNullObject("NeedsReview");

          await context.sync();

          if (needsReview.isNullObject) {
              OfficeHelpers.UI.notify("The setting has been deleted");
          } else {
              OfficeHelpers.UI.notify("The setting was not deleted");
          }

          await context.sync();
      });
      ```
  - uid: office.Excel.Setting.key
    summary: |-
      Returns the key that represents the id of the Setting. Read-only.

      \[ [Api set: ExcelApi 1.4](http://bing.com) \]
    name: key
    fullName: office.Excel.Setting.key
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly key: string;'
      return:
        type:
          - string
  - uid: office.Excel.Setting.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: office.Excel.Setting.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Setting;'
      return:
        type:
          - Excel.Setting
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: office.Excel.Setting.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: office.Excel.Setting.set
    langs:
      - typeScript
    type: method
    syntax:
      content: "set(properties: Interfaces.SettingUpdateData, options?: {\r\n            throwOnReadOnly?: boolean;\r\n        }): void;"
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.SettingUpdateData
        - id: options
          description: ''
          type:
            - "{\r\n            /**\r\n             * Throw an error if the passed-in property list includes read-only properties (default = true).\r\n             */\r\n            throwOnReadOnly?: boolean;\r\n        }"
  - uid: office.Excel.Setting.toJSON
    name: toJSON()
    fullName: office.Excel.Setting.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON:'
      return:
        type:
          - "{\r\n            \"key\": string;\r\n            \"value\": any;\r\n        }"
        description: ''
  - uid: office.Excel.Setting.value
    summary: |-
      Represents the value stored for this setting.

      \[ [Api set: ExcelApi 1.4](http://bing.com) \]
    name: value
    fullName: office.Excel.Setting.value
    langs:
      - typeScript
    type: property
    syntax:
      content: 'value: any;'
      return:
        type:
          - any
