### YamlMime:UniversalReference
items:
  - uid: office.Word.Paragraph
    summary: |-
      Represents a single paragraph in a selection, range, content control, or document body.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: Word.Paragraph
    fullName: office.Word.Paragraph
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: office
    children:
      - office.Word.Paragraph.alignment
      - office.Word.Paragraph.attachToList
      - office.Word.Paragraph.clear
      - office.Word.Paragraph.contentControls
      - office.Word.Paragraph.delete
      - office.Word.Paragraph.detachFromList
      - office.Word.Paragraph.firstLineIndent
      - office.Word.Paragraph.font
      - office.Word.Paragraph.getHtml
      - office.Word.Paragraph.getNext
      - office.Word.Paragraph.getNextOrNullObject
      - office.Word.Paragraph.getOoxml
      - office.Word.Paragraph.getPrevious
      - office.Word.Paragraph.getPreviousOrNullObject
      - office.Word.Paragraph.getRange
      - office.Word.Paragraph.getTextRanges
      - office.Word.Paragraph.inlinePictures
      - office.Word.Paragraph.insertBreak
      - office.Word.Paragraph.insertContentControl
      - office.Word.Paragraph.insertFileFromBase64
      - office.Word.Paragraph.insertHtml
      - office.Word.Paragraph.insertInlinePictureFromBase64
      - office.Word.Paragraph.insertOoxml
      - office.Word.Paragraph.insertParagraph
      - office.Word.Paragraph.insertTable
      - office.Word.Paragraph.insertText
      - office.Word.Paragraph.isLastParagraph
      - office.Word.Paragraph.isListItem
      - office.Word.Paragraph.leftIndent
      - office.Word.Paragraph.lineSpacing
      - office.Word.Paragraph.lineUnitAfter
      - office.Word.Paragraph.lineUnitBefore
      - office.Word.Paragraph.list
      - office.Word.Paragraph.listItem
      - office.Word.Paragraph.listItemOrNullObject
      - office.Word.Paragraph.listOrNullObject
      - office.Word.Paragraph.load
      - office.Word.Paragraph.outlineLevel
      - office.Word.Paragraph.parentBody
      - office.Word.Paragraph.parentContentControl
      - office.Word.Paragraph.parentContentControlOrNullObject
      - office.Word.Paragraph.parentTable
      - office.Word.Paragraph.parentTableCell
      - office.Word.Paragraph.parentTableCellOrNullObject
      - office.Word.Paragraph.parentTableOrNullObject
      - office.Word.Paragraph.rightIndent
      - office.Word.Paragraph.search
      - office.Word.Paragraph.select
      - office.Word.Paragraph.set
      - office.Word.Paragraph.spaceAfter
      - office.Word.Paragraph.spaceBefore
      - office.Word.Paragraph.split
      - office.Word.Paragraph.startNewList
      - office.Word.Paragraph.style
      - office.Word.Paragraph.styleBuiltIn
      - office.Word.Paragraph.tableNestingLevel
      - office.Word.Paragraph.text
      - office.Word.Paragraph.toJSON
      - office.Word.Paragraph.track
      - office.Word.Paragraph.untrack
  - uid: office.Word.Paragraph.alignment
    summary: |-
      Gets or sets the alignment for a paragraph. The value can be 'left', 'centered', 'right', or 'justified'.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: alignment
    fullName: office.Word.Paragraph.alignment
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignment: string;'
      return:
        type:
          - string
  - uid: office.Word.Paragraph.attachToList
    summary: >-
      Lets the paragraph join an existing list at the specified level. Fails if the paragraph cannot join the list or if
      the paragraph is already a list item.


      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: 'attachToList(listId, level)'
    fullName: office.Word.Paragraph.attachToList
    langs:
      - typeScript
    type: method
    syntax:
      content: 'attachToList(listId: number, level: number): Word.List;'
      return:
        type:
          - Word.List
        description: ''
      parameters:
        - id: listId
          description: Required. The ID of an existing list.
          type:
            - number
        - id: level
          description: Required. The level in the list.
          type:
            - number
  - uid: office.Word.Paragraph.clear
    summary: |-
      Clears the contents of the paragraph object. The user can perform the undo operation on the cleared content.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: clear()
    fullName: office.Word.Paragraph.clear
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: office.Word.Paragraph.contentControls
    summary: |-
      Gets the collection of content control objects in the paragraph. Read-only.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: contentControls
    fullName: office.Word.Paragraph.contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'contentControls: Word.ContentControlCollection;'
      return:
        type:
          - Word.ContentControlCollection
  - uid: office.Word.Paragraph.delete
    summary: |-
      Deletes the paragraph and its content from the document.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: delete()
    fullName: office.Word.Paragraph.delete
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: office.Word.Paragraph.detachFromList
    summary: |-
      Moves this paragraph out of its list, if the paragraph is a list item.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: detachFromList()
    fullName: office.Word.Paragraph.detachFromList
    langs:
      - typeScript
    type: method
    syntax:
      content: 'detachFromList(): void;'
      return:
        type:
          - void
        description: ''
  - uid: office.Word.Paragraph.firstLineIndent
    summary: >-
      Gets or sets the value, in points, for a first line or hanging indent. Use a positive value to set a first-line
      indent, and use a negative value to set a hanging indent.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: firstLineIndent
    fullName: office.Word.Paragraph.firstLineIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstLineIndent: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.font
    summary: >-
      Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.
      Read-only.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: font
    fullName: office.Word.Paragraph.font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'font: Word.Font;'
      return:
        type:
          - Word.Font
  - uid: office.Word.Paragraph.getHtml
    summary: |-
      Gets the HTML representation of the paragraph object.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: getHtml()
    fullName: office.Word.Paragraph.getHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
  - uid: office.Word.Paragraph.getNext
    summary: |-
      Gets the next paragraph. Throws if the paragraph is the last one.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: getNext()
    fullName: office.Word.Paragraph.getNext
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: office.Word.Paragraph.getNextOrNullObject
    summary: |-
      Gets the next paragraph. Returns a null object if the paragraph is the last one.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: getNextOrNullObject()
    fullName: office.Word.Paragraph.getNextOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: office.Word.Paragraph.getOoxml
    summary: |-
      Gets the Office Open XML (OOXML) representation of the paragraph object.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: getOoxml()
    fullName: office.Word.Paragraph.getOoxml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
  - uid: office.Word.Paragraph.getPrevious
    summary: |-
      Gets the previous paragraph. Throws if the paragraph is the first one.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: getPrevious()
    fullName: office.Word.Paragraph.getPrevious
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: office.Word.Paragraph.getPreviousOrNullObject
    summary: |-
      Gets the previous paragraph. Returns a null object if the paragraph is the first one.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: getPreviousOrNullObject()
    fullName: office.Word.Paragraph.getPreviousOrNullObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: office.Word.Paragraph.getRange
    summary: |-
      Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: getRange(rangeLocation)
    fullName: office.Word.Paragraph.getRange
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocation?: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocation
          description: 'Optional. The range location can be ''Whole'', ''Start'', ''End'', ''After'' or ''Content''.'
          type:
            - string
  - uid: office.Word.Paragraph.getTextRanges
    summary: |-
      Gets the text ranges in the paragraph by using punctuation marks and/or other ending marks.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: 'getTextRanges(endingMarks, trimSpacing)'
    fullName: office.Word.Paragraph.getTextRanges
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextRanges(endingMarks: Array<string>, trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: endingMarks
          description: Required. The punctuation marks and/or other ending marks as an array of strings.
          type:
            - Array<string>
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks)
            from the start and end of the ranges returned in the range collection. Default is false which indicates that
            spacing characters at the start and end of the ranges are included in the range collection.
          type:
            - boolean
  - uid: office.Word.Paragraph.inlinePictures
    summary: >-
      Gets the collection of inlinePicture objects in the paragraph. The collection does not include floating images.
      Read-only.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: inlinePictures
    fullName: office.Word.Paragraph.inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - Word.InlinePictureCollection
  - uid: office.Word.Paragraph.insertBreak
    summary: >-
      Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or
      'After'.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: 'insertBreak(breakType, insertLocation)'
    fullName: office.Word.Paragraph.insertBreak
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: string, insertLocation: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakType
          description: Required. The break type to add to the document.
          type:
            - string
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - string
  - uid: office.Word.Paragraph.insertContentControl
    summary: |-
      Wraps the paragraph object with a rich text content control.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: insertContentControl()
    fullName: office.Word.Paragraph.insertContentControl
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
        description: ''
  - uid: office.Word.Paragraph.insertFileFromBase64
    summary: >-
      Inserts a document into the paragraph at the specified location. The insertLocation value can be 'Replace',
      'Start' or 'End'.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: office.Word.Paragraph.insertFileFromBase64
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: base64File
          description: Required. The base64 encoded content of a .docx file.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - string
  - uid: office.Word.Paragraph.insertHtml
    summary: >-
      Inserts HTML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or
      'End'.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: 'insertHtml(html, insertLocation)'
    fullName: office.Word.Paragraph.insertHtml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: html
          description: Required. The HTML to be inserted in the paragraph.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - string
  - uid: office.Word.Paragraph.insertInlinePictureFromBase64
    summary: >-
      Inserts a picture into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start'
      or 'End'.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: office.Word.Paragraph.insertInlinePictureFromBase64
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: string): Word.InlinePicture;'
      return:
        type:
          - Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: Required. The base64 encoded image to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - string
  - uid: office.Word.Paragraph.insertOoxml
    summary: >-
      Inserts OOXML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or
      'End'.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: office.Word.Paragraph.insertOoxml
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: Required. The OOXML to be inserted in the paragraph.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - string
  - uid: office.Word.Paragraph.insertParagraph
    summary: |-
      Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: office.Word.Paragraph.insertParagraph
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: string): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
      parameters:
        - id: paragraphText
          description: Required. The paragraph text to be inserted.
          type:
            - string
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - string
  - uid: office.Word.Paragraph.insertTable
    summary: >-
      Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Before' or
      'After'.


      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    fullName: office.Word.Paragraph.insertTable
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        insertTable(rowCount: number, columnCount: number, insertLocation: string, values?: Array<Array<string>>):
        Word.Table;
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: Required. The number of rows in the table.
          type:
            - number
        - id: columnCount
          description: Required. The number of columns in the table.
          type:
            - number
        - id: insertLocation
          description: Required. The value can be 'Before' or 'After'.
          type:
            - string
        - id: values
          description: Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
          type:
            - Array<Array<string>>
  - uid: office.Word.Paragraph.insertText
    summary: >-
      Inserts text into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or
      'End'.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: 'insertText(text, insertLocation)'
    fullName: office.Word.Paragraph.insertText
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: string): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: text
          description: Required. Text to be inserted.
          type:
            - string
        - id: insertLocation
          description: 'Required. The value can be ''Replace'', ''Start'' or ''End''.'
          type:
            - string
  - uid: office.Word.Paragraph.isLastParagraph
    summary: |-
      Indicates the paragraph is the last one inside its parent body. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: isLastParagraph
    fullName: office.Word.Paragraph.isLastParagraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isLastParagraph: boolean;'
      return:
        type:
          - boolean
  - uid: office.Word.Paragraph.isListItem
    summary: |-
      Checks whether the paragraph is a list item. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: isListItem
    fullName: office.Word.Paragraph.isListItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isListItem: boolean;'
      return:
        type:
          - boolean
  - uid: office.Word.Paragraph.leftIndent
    summary: |-
      Gets or sets the left indent value, in points, for the paragraph.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: leftIndent
    fullName: office.Word.Paragraph.leftIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'leftIndent: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.lineSpacing
    summary: >-
      Gets or sets the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by
      12.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: lineSpacing
    fullName: office.Word.Paragraph.lineSpacing
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineSpacing: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.lineUnitAfter
    summary: |-
      Gets or sets the amount of spacing, in grid lines. after the paragraph.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: lineUnitAfter
    fullName: office.Word.Paragraph.lineUnitAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitAfter: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.lineUnitBefore
    summary: |-
      Gets or sets the amount of spacing, in grid lines, before the paragraph.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: lineUnitBefore
    fullName: office.Word.Paragraph.lineUnitBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitBefore: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.list
    summary: |-
      Gets the List to which this paragraph belongs. Throws if the paragraph is not in a list. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: list
    fullName: office.Word.Paragraph.list
    langs:
      - typeScript
    type: property
    syntax:
      content: 'list: Word.List;'
      return:
        type:
          - Word.List
  - uid: office.Word.Paragraph.listItem
    summary: |-
      Gets the ListItem for the paragraph. Throws if the paragraph is not part of a list. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: listItem
    fullName: office.Word.Paragraph.listItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'listItem: Word.ListItem;'
      return:
        type:
          - Word.ListItem
  - uid: office.Word.Paragraph.listItemOrNullObject
    summary: |-
      Gets the ListItem for the paragraph. Returns a null object if the paragraph is not part of a list. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: listItemOrNullObject
    fullName: office.Word.Paragraph.listItemOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'listItemOrNullObject: Word.ListItem;'
      return:
        type:
          - Word.ListItem
  - uid: office.Word.Paragraph.listOrNullObject
    summary: |-
      Gets the List to which this paragraph belongs. Returns a null object if the paragraph is not in a list. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: listOrNullObject
    fullName: office.Word.Paragraph.listOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'listOrNullObject: Word.List;'
      return:
        type:
          - Word.List
  - uid: office.Word.Paragraph.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: office.Word.Paragraph.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: office.Word.Paragraph.outlineLevel
    summary: |-
      Gets or sets the outline level for the paragraph.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: outlineLevel
    fullName: office.Word.Paragraph.outlineLevel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'outlineLevel: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.parentBody
    summary: |-
      Gets the parent body of the paragraph. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: parentBody
    fullName: office.Word.Paragraph.parentBody
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentBody: Word.Body;'
      return:
        type:
          - Word.Body
  - uid: office.Word.Paragraph.parentContentControl
    summary: |-
      Gets the content control that contains the paragraph. Throws if there isn't a parent content control. Read-only.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: parentContentControl
    fullName: office.Word.Paragraph.parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentContentControl: Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
  - uid: office.Word.Paragraph.parentContentControlOrNullObject
    summary: >-
      Gets the content control that contains the paragraph. Returns a null object if there isn't a parent content
      control. Read-only.


      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: parentContentControlOrNullObject
    fullName: office.Word.Paragraph.parentContentControlOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type:
          - Word.ContentControl
  - uid: office.Word.Paragraph.parentTable
    summary: |-
      Gets the table that contains the paragraph. Throws if it is not contained in a table. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: parentTable
    fullName: office.Word.Paragraph.parentTable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentTable: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: office.Word.Paragraph.parentTableCell
    summary: |-
      Gets the table cell that contains the paragraph. Throws if it is not contained in a table cell. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: parentTableCell
    fullName: office.Word.Paragraph.parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentTableCell: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: office.Word.Paragraph.parentTableCellOrNullObject
    summary: >-
      Gets the table cell that contains the paragraph. Returns a null object if it is not contained in a table cell.
      Read-only.


      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: parentTableCellOrNullObject
    fullName: office.Word.Paragraph.parentTableCellOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentTableCellOrNullObject: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: office.Word.Paragraph.parentTableOrNullObject
    summary: |-
      Gets the table that contains the paragraph. Returns a null object if it is not contained in a table. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: parentTableOrNullObject
    fullName: office.Word.Paragraph.parentTableOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'parentTableOrNullObject: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: office.Word.Paragraph.rightIndent
    summary: |-
      Gets or sets the right indent value, in points, for the paragraph.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: rightIndent
    fullName: office.Word.Paragraph.rightIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rightIndent: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.search
    summary: >-
      Performs a search with the specified searchOptions on the scope of the paragraph object. The search results are a
      collection of range objects.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: 'search(searchText, searchOptions)'
    fullName: office.Word.Paragraph.search
    langs:
      - typeScript
    type: method
    syntax:
      content: "search(searchText: string, searchOptions?: Word.SearchOptions | {\r\n            ignorePunct?: boolean;\r\n            ignoreSpace?: boolean;\r\n            matchCase?: boolean;\r\n            matchPrefix?: boolean;\r\n            matchSuffix?: boolean;\r\n            matchWholeWord?: boolean;\r\n            matchWildcards?: boolean;\r\n        }): Word.RangeCollection;"
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: searchText
          description: Required. The search text.
          type:
            - string
        - id: searchOptions
          description: Optional. Options for the search.
          type:
            - "Word.SearchOptions | {\r\n            ignorePunct?: boolean;\r\n            ignoreSpace?: boolean;\r\n            matchCase?: boolean;\r\n            matchPrefix?: boolean;\r\n            matchSuffix?: boolean;\r\n            matchWholeWord?: boolean;\r\n            matchWildcards?: boolean;\r\n        }"
  - uid: office.Word.Paragraph.select
    summary: |-
      Selects and navigates the Word UI to the paragraph.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: select(selectionMode)
    fullName: office.Word.Paragraph.select
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionMode
          description: 'Optional. The selection mode can be ''Select'', ''Start'' or ''End''. ''Select'' is the default.'
          type:
            - string
  - uid: office.Word.Paragraph.set
    summary: 'Sets multiple properties on the object at the same time, based on JSON input.'
    name: 'set(properties, options)'
    fullName: office.Word.Paragraph.set
    langs:
      - typeScript
    type: method
    syntax:
      content: "set(properties: Interfaces.ParagraphUpdateData, options?: {\r\n            throwOnReadOnly?: boolean;\r\n        }): void;"
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Interfaces.ParagraphUpdateData
        - id: options
          description: ''
          type:
            - "{\r\n            /**\r\n             * Throw an error if the passed-in property list includes read-only properties (default = true).\r\n             */\r\n            throwOnReadOnly?: boolean;\r\n        }"
  - uid: office.Word.Paragraph.spaceAfter
    summary: |-
      Gets or sets the spacing, in points, after the paragraph.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: spaceAfter
    fullName: office.Word.Paragraph.spaceAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceAfter: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.spaceBefore
    summary: |-
      Gets or sets the spacing, in points, before the paragraph.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: spaceBefore
    fullName: office.Word.Paragraph.spaceBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceBefore: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.split
    summary: |-
      Splits the paragraph into child ranges by using delimiters.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: 'split(delimiters, trimDelimiters, trimSpacing)'
    fullName: office.Word.Paragraph.split
    langs:
      - typeScript
    type: method
    syntax:
      content: 'split(delimiters: Array<string>, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: delimiters
          description: Required. The delimiters as an array of strings.
          type:
            - Array<string>
        - id: trimDelimiters
          description: >-
            Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is false
            which indicates that the delimiters are included in the ranges returned in the range collection.
          type:
            - boolean
        - id: trimSpacing
          description: >-
            Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks)
            from the start and end of the ranges returned in the range collection. Default is false which indicates that
            spacing characters at the start and end of the ranges are included in the range collection.
          type:
            - boolean
  - uid: office.Word.Paragraph.startNewList
    summary: |-
      Starts a new list with this paragraph. Fails if the paragraph is already a list item.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: startNewList()
    fullName: office.Word.Paragraph.startNewList
    langs:
      - typeScript
    type: method
    syntax:
      content: 'startNewList(): Word.List;'
      return:
        type:
          - Word.List
        description: ''
  - uid: office.Word.Paragraph.style
    summary: >-
      Gets or sets the style name for the paragraph. Use this property for custom styles and localized style names. To
      use the built-in styles that are portable between locales, see the "styleBuiltIn" property.


      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: style
    fullName: office.Word.Paragraph.style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: office.Word.Paragraph.styleBuiltIn
    summary: >-
      Gets or sets the built-in style name for the paragraph. Use this property for built-in styles that are portable
      between locales. To use custom styles or localized style names, see the "style" property.


      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: styleBuiltIn
    fullName: office.Word.Paragraph.styleBuiltIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styleBuiltIn: string;'
      return:
        type:
          - string
  - uid: office.Word.Paragraph.tableNestingLevel
    summary: |-
      Gets the level of the paragraph's table. It returns 0 if the paragraph is not in a table. Read-only.

      \[ [Api set: WordApi 1.3](http://bing.com) \]
    name: tableNestingLevel
    fullName: office.Word.Paragraph.tableNestingLevel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tableNestingLevel: number;'
      return:
        type:
          - number
  - uid: office.Word.Paragraph.text
    summary: |-
      Gets the text of the paragraph. Read-only.

      \[ [Api set: WordApi 1.1](http://bing.com) \]
    name: text
    fullName: office.Word.Paragraph.text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'text: string;'
      return:
        type:
          - string
  - uid: office.Word.Paragraph.toJSON
    name: toJSON()
    fullName: office.Word.Paragraph.toJSON
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON:'
      return:
        type:
          - "{\r\n            \"alignment\": string;\r\n            \"firstLineIndent\": number;\r\n            \"font\": Font;\r\n            \"isLastParagraph\": boolean;\r\n            \"isListItem\": boolean;\r\n            \"leftIndent\": number;\r\n            \"lineSpacing\": number;\r\n            \"lineUnitAfter\": number;\r\n            \"lineUnitBefore\": number;\r\n            \"listItem\": ListItem;\r\n            \"listItemOrNullObject\": ListItem;\r\n            \"outlineLevel\": number;\r\n            \"rightIndent\": number;\r\n            \"spaceAfter\": number;\r\n            \"spaceBefore\": number;\r\n            \"style\": string;\r\n            \"styleBuiltIn\": string;\r\n            \"tableNestingLevel\": number;\r\n            \"text\": string;\r\n        }"
        description: ''
  - uid: office.Word.Paragraph.track
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the
      sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a
      method on the object, you needed to have added the object to the tracked object collection when the object was
      first created.
    name: track()
    fullName: office.Word.Paragraph.track
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
  - uid: office.Word.Paragraph.untrack
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please
      remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before
      the memory release takes effect.
    name: untrack()
    fullName: office.Word.Paragraph.untrack
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
