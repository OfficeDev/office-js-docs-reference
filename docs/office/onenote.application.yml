### YamlMime:UniversalReference
items:
  - uid: office.OneNote.Application
    summary: >-
      Represents the top-level object that contains all globally addressable OneNote objects such as notebooks, the
      active notebook, and the active section.


      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: OneNote.Application
    fullName: office.OneNote.Application
    langs:
      - typeScript
    type: class
    extends:
      - OfficeExtension.ClientObject
    package: office
    children:
      - office.OneNote.Application.getActiveNotebook
      - office.OneNote.Application.getActiveNotebookOrNull
      - office.OneNote.Application.getActiveOutline
      - office.OneNote.Application.getActiveOutlineOrNull
      - office.OneNote.Application.getActivePage
      - office.OneNote.Application.getActivePageOrNull
      - office.OneNote.Application.getActiveSection
      - office.OneNote.Application.getActiveSectionOrNull
      - office.OneNote.Application.load
      - office.OneNote.Application.navigateToPage
      - office.OneNote.Application.navigateToPageWithClientUrl
      - office.OneNote.Application.notebooks
  - uid: office.OneNote.Application.getActiveNotebook
    summary: |-
      Gets the active notebook if one exists. If no notebook is active, throws ItemNotFound.

      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: getActiveNotebook()
    fullName: office.OneNote.Application.getActiveNotebook
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveNotebook(): OneNote.Notebook;'
      return:
        type:
          - OneNote.Notebook
        description: ''
    remarks: |


      ## Snippets

      ```typescript
      OneNote.run(function (context) {

          // Get the active notebook.
          var notebook = context.application.getActiveNotebook();
                  
          // Queue a command to load the notebook. 
          // For best performance, request specific properties.           
          notebook.load('id,name');
                  
          // Run the queued commands, and return a promise to indicate task completion.
          return context.sync()
              .then(function () {
                          
                  // Show some properties.
                  console.log("Notebook name: " + notebook.name);
                  console.log("Notebook ID: " + notebook.id);
                  
              });
      })
      .catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
  - uid: office.OneNote.Application.getActiveNotebookOrNull
    summary: |-
      Gets the active notebook if one exists. If no notebook is active, returns null.

      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: getActiveNotebookOrNull()
    fullName: office.OneNote.Application.getActiveNotebookOrNull
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveNotebookOrNull(): OneNote.Notebook;'
      return:
        type:
          - OneNote.Notebook
        description: ''
  - uid: office.OneNote.Application.getActiveOutline
    summary: |-
      Gets the active outline if one exists, If no outline is active, throws ItemNotFound.

      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: getActiveOutline()
    fullName: office.OneNote.Application.getActiveOutline
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveOutline(): OneNote.Outline;'
      return:
        type:
          - OneNote.Outline
        description: ''
  - uid: office.OneNote.Application.getActiveOutlineOrNull
    summary: |-
      Gets the active outline if one exists, otherwise returns null.

      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: getActiveOutlineOrNull()
    fullName: office.OneNote.Application.getActiveOutlineOrNull
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveOutlineOrNull(): OneNote.Outline;'
      return:
        type:
          - OneNote.Outline
        description: ''
  - uid: office.OneNote.Application.getActivePage
    summary: |-
      Gets the active page if one exists. If no page is active, throws ItemNotFound.

      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: getActivePage()
    fullName: office.OneNote.Application.getActivePage
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActivePage(): OneNote.Page;'
      return:
        type:
          - OneNote.Page
        description: ''
  - uid: office.OneNote.Application.getActivePageOrNull
    summary: |-
      Gets the active page if one exists. If no page is active, returns null.

      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: getActivePageOrNull()
    fullName: office.OneNote.Application.getActivePageOrNull
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActivePageOrNull(): OneNote.Page;'
      return:
        type:
          - OneNote.Page
        description: ''
  - uid: office.OneNote.Application.getActiveSection
    summary: |-
      Gets the active section if one exists. If no section is active, throws ItemNotFound.

      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: getActiveSection()
    fullName: office.OneNote.Application.getActiveSection
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSection(): OneNote.Section;'
      return:
        type:
          - OneNote.Section
        description: ''
  - uid: office.OneNote.Application.getActiveSectionOrNull
    summary: |-
      Gets the active section if one exists. If no section is active, returns null.

      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: getActiveSectionOrNull()
    fullName: office.OneNote.Application.getActiveSectionOrNull
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSectionOrNull(): OneNote.Section;'
      return:
        type:
          - OneNote.Section
        description: ''
  - uid: office.OneNote.Application.load
    summary: >-
      Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading
      the properties.
    name: load(option)
    fullName: office.OneNote.Application.load
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: string | string[] | OfficeExtension.LoadOption): OneNote.Application;'
      return:
        type:
          - OneNote.Application
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'string | string[] | OfficeExtension.LoadOption'
  - uid: office.OneNote.Application.navigateToPage
    summary: Opens the specified page in the application instance.
    name: navigateToPage(page)
    fullName: office.OneNote.Application.navigateToPage
    langs:
      - typeScript
    type: method
    syntax:
      content: 'navigateToPage(page: OneNote.Page): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: page
          description: 'The page to open. \[Api set: OneNoteApi 1.1\]'
          type:
            - OneNote.Page
  - uid: office.OneNote.Application.navigateToPageWithClientUrl
    summary: 'Gets the specified page, and opens it in the application instance.'
    name: navigateToPageWithClientUrl(url)
    fullName: office.OneNote.Application.navigateToPageWithClientUrl
    langs:
      - typeScript
    type: method
    syntax:
      content: 'navigateToPageWithClientUrl(url: string): OneNote.Page;'
      return:
        type:
          - OneNote.Page
        description: ''
      parameters:
        - id: url
          description: 'The client url of the page to open. \[Api set: OneNoteApi 1.1\]'
          type:
            - string
  - uid: office.OneNote.Application.notebooks
    summary: >-
      Gets the collection of notebooks that are open in the OneNote application instance. In OneNote Online, only one
      notebook at a time is open in the application instance. Read-only.


      \[ [Api set: OneNoteApi 1.1](http://bing.com) \]
    name: notebooks
    fullName: office.OneNote.Application.notebooks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notebooks: OneNote.NotebookCollection;'
      return:
        type:
          - OneNote.NotebookCollection
